
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000046ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f98  0800487c  0800487c  0001487c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005814  08005814  000205bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005814  08005814  00015814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800581c  0800581c  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800581c  0800581c  0001581c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005820  08005820  00015820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  20000000  08005824  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000a4  200005c0  08005de0  000205c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20000664  08005de0  00020664  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fcec  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002735  00000000  00000000  000302d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b98  00000000  00000000  00032a10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a60  00000000  00000000  000335a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002446f  00000000  00000000  00034008  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000a1e1  00000000  00000000  00058477  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb088  00000000  00000000  00062658  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011d6e0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000359c  00000000  00000000  0011d75c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c0 	.word	0x200005c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004864 	.word	0x08004864

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c4 	.word	0x200005c4
 80001cc:	08004864 	.word	0x08004864

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9a5 	b.w	80005dc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f835 	bl	8000310 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f828 	bl	8000310 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f817 	bl	8000310 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f809 	bl	8000310 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f80d 	bl	800060c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f833 	bl	8000660 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f877 	bl	80006f0 <adns2610_config>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <adns2610_configureSPI+0x14>
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <adns2610_configureSPI+0x48>)
 800061e:	e000      	b.n	8000622 <adns2610_configureSPI+0x16>
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <adns2610_configureSPI+0x4c>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <adns2610_configureSPI+0x50>)
 8000624:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <adns2610_configureSPI+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <adns2610_configureSPI+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000634:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <adns2610_configureSPI+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <adns2610_configureSPI+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40003800 	.word	0x40003800
 8000658:	40003c00 	.word	0x40003c00
 800065c:	200005dc 	.word	0x200005dc

08000660 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <adns2610_resetCOM+0x14>
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <adns2610_resetCOM+0x84>)
 8000672:	e000      	b.n	8000676 <adns2610_resetCOM+0x16>
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <adns2610_resetCOM+0x88>)
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000678:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800067a:	bf00      	nop
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <adns2610_resetCOM+0x8c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <adns2610_resetCOM+0x8c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	330c      	adds	r3, #12
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000694:	bf00      	nop
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80006ac:	bf00      	nop
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	4313      	orrs	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ec      	bne.n	80006ae <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f003 f915 	bl	8003904 <LL_mDelay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003800 	.word	0x40003800
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	200005dc 	.word	0x200005dc

080006f0 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <adns2610_config+0x14>
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <adns2610_config+0xc0>)
 8000702:	e000      	b.n	8000706 <adns2610_config+0x16>
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <adns2610_config+0xc4>)
 8000706:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	482b      	ldr	r0, [pc, #172]	; (80007b8 <adns2610_config+0xc8>)
 800070c:	f003 f962 	bl	80039d4 <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <adns2610_config+0xcc>)
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <adns2610_config+0xd0>)
 8000714:	f003 f95e 	bl	80039d4 <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f8be 	bl	80008a0 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 8000724:	4925      	ldr	r1, [pc, #148]	; (80007bc <adns2610_config+0xcc>)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <adns2610_config+0xd4>)
 8000728:	f003 f954 	bl	80039d4 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f857 	bl	80007e4 <adns2610_readRegister>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10f      	bne.n	800075c <adns2610_config+0x6c>
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <adns2610_config+0xd8>)
 800073e:	f003 f9bd 	bl	8003abc <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <adns2610_config+0xdc>)
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <adns2610_config+0xe0>)
 8000746:	f003 f945 	bl	80039d4 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f848 	bl	80007e4 <adns2610_readRegister>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d116      	bne.n	8000788 <adns2610_config+0x98>
 800075a:	e003      	b.n	8000764 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <adns2610_config+0xe4>)
 800075e:	f003 f9ad 	bl	8003abc <puts>
 8000762:	e7fe      	b.n	8000762 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <adns2610_config+0xd8>)
 8000766:	f003 f9a9 	bl	8003abc <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 800076a:	491b      	ldr	r1, [pc, #108]	; (80007d8 <adns2610_config+0xe8>)
 800076c:	481b      	ldr	r0, [pc, #108]	; (80007dc <adns2610_config+0xec>)
 800076e:	f003 f931 	bl	80039d4 <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2111      	movs	r1, #17
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f834 	bl	80007e4 <adns2610_readRegister>
 800077c:	4603      	mov	r3, r0
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d108      	bne.n	8000798 <adns2610_config+0xa8>
 8000786:	e003      	b.n	8000790 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <adns2610_config+0xe4>)
 800078a:	f003 f997 	bl	8003abc <puts>
 800078e:	e7fe      	b.n	800078e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <adns2610_config+0xd8>)
 8000792:	f003 f993 	bl	8003abc <puts>
 8000796:	e003      	b.n	80007a0 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <adns2610_config+0xe4>)
 800079a:	f003 f98f 	bl	8003abc <puts>
 800079e:	e7fe      	b.n	800079e <adns2610_config+0xae>

	printf("\r\n");
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <adns2610_config+0xf0>)
 80007a2:	f003 f98b 	bl	8003abc <puts>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	0800487c 	.word	0x0800487c
 80007b4:	0800488c 	.word	0x0800488c
 80007b8:	0800489c 	.word	0x0800489c
 80007bc:	080048f8 	.word	0x080048f8
 80007c0:	08004908 	.word	0x08004908
 80007c4:	08004938 	.word	0x08004938
 80007c8:	08004964 	.word	0x08004964
 80007cc:	08004974 	.word	0x08004974
 80007d0:	08004984 	.word	0x08004984
 80007d4:	0800496c 	.word	0x0800496c
 80007d8:	080049b0 	.word	0x080049b0
 80007dc:	080049c4 	.word	0x080049c4
 80007e0:	080049f8 	.word	0x080049f8

080007e4 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <adns2610_readRegister+0x1a>
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <adns2610_readRegister+0xb0>)
 80007fc:	e000      	b.n	8000800 <adns2610_readRegister+0x1c>
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <adns2610_readRegister+0xb4>)
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <adns2610_readRegister+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000804:	bf00      	nop
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <adns2610_readRegister+0xb8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f8      	beq.n	8000806 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <adns2610_readRegister+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	330c      	adds	r3, #12
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800081e:	bf00      	nop
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <adns2610_readRegister+0xb8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <adns2610_readRegister+0xb8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f003 f864 	bl	8003904 <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <adns2610_readRegister+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330c      	adds	r3, #12
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000846:	bf00      	nop
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <adns2610_readRegister+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <adns2610_readRegister+0xb8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	330c      	adds	r3, #12
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000860:	bf00      	nop
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <adns2610_readRegister+0xb8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <adns2610_readRegister+0xb8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000876:	431a      	orrs	r2, r3
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <adns2610_readRegister+0xb8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	4313      	orrs	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <adns2610_readRegister+0x7e>
	return value;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00
 800089c:	200005dc 	.word	0x200005dc

080008a0 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <adns2610_writeRegister+0x1c>
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <adns2610_writeRegister+0xb4>)
 80008ba:	e000      	b.n	80008be <adns2610_writeRegister+0x1e>
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <adns2610_writeRegister+0xb8>)
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c0:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <adns2610_writeRegister+0xbc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008d0:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80008d2:	bf00      	nop
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <adns2610_writeRegister+0xbc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <adns2610_writeRegister+0xbc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80008fa:	bf00      	nop
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <adns2610_writeRegister+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <adns2610_writeRegister+0xbc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000910:	bf00      	nop
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <adns2610_writeRegister+0xbc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <adns2610_writeRegister+0xbc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000926:	431a      	orrs	r2, r3
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <adns2610_writeRegister+0xbc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	4313      	orrs	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ec      	bne.n	8000912 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <adns2610_writeRegister+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <adns2610_writeRegister+0xbc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000946:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40003800 	.word	0x40003800
 8000958:	40003c00 	.word	0x40003c00
 800095c:	200005dc 	.word	0x200005dc

08000960 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <adns2610_receiveByte+0x16>
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <adns2610_receiveByte+0x78>)
 8000974:	e000      	b.n	8000978 <adns2610_receiveByte+0x18>
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <adns2610_receiveByte+0x7c>)
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	330c      	adds	r3, #12
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000986:	bf00      	nop
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <adns2610_receiveByte+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <adns2610_receiveByte+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	330c      	adds	r3, #12
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80009a4:	bf00      	nop
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	4313      	orrs	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	200005dc 	.word	0x200005dc

080009e4 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <adns2610_sendByte+0x1a>
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <adns2610_sendByte+0x60>)
 80009fc:	e000      	b.n	8000a00 <adns2610_sendByte+0x1c>
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <adns2610_sendByte+0x64>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a02:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000a04:	bf00      	nop
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f8      	beq.n	8000a06 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	79ba      	ldrb	r2, [r7, #6]
 8000a1c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000a1e:	bf00      	nop
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	330c      	adds	r3, #12
 8000a34:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40003c00 	.word	0x40003c00
 8000a4c:	200005dc 	.word	0x200005dc

08000a50 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da01      	bge.n	8000a72 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e009      	b.n	8000a86 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000a72:	2302      	movs	r3, #2
 8000a74:	e007      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da01      	bge.n	8000a84 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000a84:	2303      	movs	r3, #3
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40020080 	.word	0x40020080

08000b64 <eyes_init>:
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

/** @brief Initialize the
 *
 */
void eyes_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 8000b68:	f000 f9da 	bl	8000f20 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fd37 	bl	80005e0 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000b72:	2201      	movs	r2, #1
 8000b74:	2100      	movs	r1, #0
 8000b76:	4807      	ldr	r0, [pc, #28]	; (8000b94 <eyes_init+0x30>)
 8000b78:	f001 fc26 	bl	80023c8 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	; (8000b98 <eyes_init+0x34>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <eyes_init+0x38>)
 8000b84:	2201      	movs	r2, #1
 8000b86:	701a      	strb	r2, [r3, #0]

	// Initialization done
	initialized = true;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <eyes_init+0x3c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	40004400 	.word	0x40004400
 8000b98:	2000065c 	.word	0x2000065c
 8000b9c:	2000065d 	.word	0x2000065d
 8000ba0:	200005e1 	.word	0x200005e1

08000ba4 <eyes_start>:

void eyes_start(){
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	af00      	add	r7, sp, #0

	if(!initialized) eyes_init();
 8000ba8:	4b09      	ldr	r3, [pc, #36]	; (8000bd0 <eyes_start+0x2c>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	f083 0301 	eor.w	r3, r3, #1
 8000bb0:	b2db      	uxtb	r3, r3
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <eyes_start+0x16>
 8000bb6:	f7ff ffd5 	bl	8000b64 <eyes_init>

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <eyes_start+0x30>)
 8000bbc:	681b      	ldr	r3, [r3, #0]
 8000bbe:	4a05      	ldr	r2, [pc, #20]	; (8000bd4 <eyes_start+0x30>)
 8000bc0:	f043 0301 	orr.w	r3, r3, #1
 8000bc4:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000bc6:	4b04      	ldr	r3, [pc, #16]	; (8000bd8 <eyes_start+0x34>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	701a      	strb	r2, [r3, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	200005e1 	.word	0x200005e1
 8000bd4:	40012c00 	.word	0x40012c00
 8000bd8:	200005e0 	.word	0x200005e0

08000bdc <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	switch(FSMstate){
 8000be2:	4bb9      	ldr	r3, [pc, #740]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000be4:	781b      	ldrb	r3, [r3, #0]
 8000be6:	2b04      	cmp	r3, #4
 8000be8:	f200 818f 	bhi.w	8000f0a <eyes_FSM+0x32e>
 8000bec:	a201      	add	r2, pc, #4	; (adr r2, 8000bf4 <eyes_FSM+0x18>)
 8000bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf2:	bf00      	nop
 8000bf4:	08000c09 	.word	0x08000c09
 8000bf8:	08000c4d 	.word	0x08000c4d
 8000bfc:	08000de5 	.word	0x08000de5
 8000c00:	08000ceb 	.word	0x08000ceb
 8000c04:	08000e5d 	.word	0x08000e5d
	/* SENSOR_RESET state --------------------------------------------------------- */
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c08:	4bb0      	ldr	r3, [pc, #704]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c0a:	2200      	movs	r2, #0
 8000c0c:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_RIGHT] = 0;
#endif
		/* Stop the interrupt timer and reset all the relevant values */
		eyes_stopWaitIT();
 8000c0e:	f000 f9ed 	bl	8000fec <eyes_stopWaitIT>
		pixelIdx[0] = pixelIdx[1] = 0;
 8000c12:	4bae      	ldr	r3, [pc, #696]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	805a      	strh	r2, [r3, #2]
 8000c18:	4bac      	ldr	r3, [pc, #688]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c1a:	885a      	ldrh	r2, [r3, #2]
 8000c1c:	4bab      	ldr	r3, [pc, #684]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c1e:	801a      	strh	r2, [r3, #0]
		pixelStatus[0] = pixelIdx[1] = 0;
 8000c20:	4baa      	ldr	r3, [pc, #680]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c22:	2200      	movs	r2, #0
 8000c24:	805a      	strh	r2, [r3, #2]
 8000c26:	4baa      	ldr	r3, [pc, #680]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000c28:	2200      	movs	r2, #0
 8000c2a:	701a      	strb	r2, [r3, #0]
		firstPixelRead = true;
 8000c2c:	4ba9      	ldr	r3, [pc, #676]	; (8000ed4 <eyes_FSM+0x2f8>)
 8000c2e:	2201      	movs	r2, #1
 8000c30:	701a      	strb	r2, [r3, #0]
		firstFrameRead = true;
 8000c32:	4ba9      	ldr	r3, [pc, #676]	; (8000ed8 <eyes_FSM+0x2fc>)
 8000c34:	2201      	movs	r2, #1
 8000c36:	701a      	strb	r2, [r3, #0]
		seqTemp = 0;
 8000c38:	4ba8      	ldr	r3, [pc, #672]	; (8000edc <eyes_FSM+0x300>)
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	701a      	strb	r2, [r3, #0]
		initialized = false;
 8000c3e:	4ba8      	ldr	r3, [pc, #672]	; (8000ee0 <eyes_FSM+0x304>)
 8000c40:	2200      	movs	r2, #0
 8000c42:	701a      	strb	r2, [r3, #0]
		collisionFlag = 0;
 8000c44:	4ba7      	ldr	r3, [pc, #668]	; (8000ee4 <eyes_FSM+0x308>)
 8000c46:	2200      	movs	r2, #0
 8000c48:	701a      	strb	r2, [r3, #0]
		return;
 8000c4a:	e164      	b.n	8000f16 <eyes_FSM+0x33a>
	/* TRIGGER_FRAME state --------------------------------------------------------- */
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 8000c4c:	f000 f9ce 	bl	8000fec <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000c50:	4ba4      	ldr	r3, [pc, #656]	; (8000ee4 <eyes_FSM+0x308>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	f040 8153 	bne.w	8000f00 <eyes_FSM+0x324>
 8000c5a:	4ba2      	ldr	r3, [pc, #648]	; (8000ee4 <eyes_FSM+0x308>)
 8000c5c:	2201      	movs	r2, #1
 8000c5e:	701a      	strb	r2, [r3, #0]
		/* Write pixel data register to reset the HW */
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c60:	2201      	movs	r2, #1
 8000c62:	2108      	movs	r1, #8
 8000c64:	2000      	movs	r0, #0
 8000c66:	f7ff fe1b 	bl	80008a0 <adns2610_writeRegister>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Increasing the SEQ number
		 * 	- Transfer all data by means of DMA
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000c6a:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000c6e:	f000 f995 	bl	8000f9c <eyes_waitIT>
		firstPixelRead = true;
 8000c72:	4b98      	ldr	r3, [pc, #608]	; (8000ed4 <eyes_FSM+0x2f8>)
 8000c74:	2201      	movs	r2, #1
 8000c76:	701a      	strb	r2, [r3, #0]
		FSMstate = REQ_READING_FRAME;
 8000c78:	4b93      	ldr	r3, [pc, #588]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000c7a:	2203      	movs	r2, #3
 8000c7c:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c7e:	4b93      	ldr	r3, [pc, #588]	; (8000ecc <eyes_FSM+0x2f0>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
#endif
		if(!firstFrameRead){
 8000c84:	4b94      	ldr	r3, [pc, #592]	; (8000ed8 <eyes_FSM+0x2fc>)
 8000c86:	781b      	ldrb	r3, [r3, #0]
 8000c88:	f083 0301 	eor.w	r3, r3, #1
 8000c8c:	b2db      	uxtb	r3, r3
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d024      	beq.n	8000cdc <eyes_FSM+0x100>
			frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 8000c92:	4b92      	ldr	r3, [pc, #584]	; (8000edc <eyes_FSM+0x300>)
 8000c94:	781b      	ldrb	r3, [r3, #0]
 8000c96:	1c5a      	adds	r2, r3, #1
 8000c98:	b2d1      	uxtb	r1, r2
 8000c9a:	4a90      	ldr	r2, [pc, #576]	; (8000edc <eyes_FSM+0x300>)
 8000c9c:	7011      	strb	r1, [r2, #0]
 8000c9e:	4a92      	ldr	r2, [pc, #584]	; (8000ee8 <eyes_FSM+0x30c>)
 8000ca0:	7812      	ldrb	r2, [r2, #0]
 8000ca2:	4610      	mov	r0, r2
 8000ca4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000ca8:	b2d9      	uxtb	r1, r3
 8000caa:	4a90      	ldr	r2, [pc, #576]	; (8000eec <eyes_FSM+0x310>)
 8000cac:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000cb0:	fb03 f300 	mul.w	r3, r3, r0
 8000cb4:	4413      	add	r3, r2
 8000cb6:	3304      	adds	r3, #4
 8000cb8:	460a      	mov	r2, r1
 8000cba:	701a      	strb	r2, [r3, #0]
			transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 8000cbc:	4b8a      	ldr	r3, [pc, #552]	; (8000ee8 <eyes_FSM+0x30c>)
 8000cbe:	781b      	ldrb	r3, [r3, #0]
 8000cc0:	461a      	mov	r2, r3
 8000cc2:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000cc6:	fb03 f302 	mul.w	r3, r3, r2
 8000cca:	4a88      	ldr	r2, [pc, #544]	; (8000eec <eyes_FSM+0x310>)
 8000ccc:	4413      	add	r3, r2
 8000cce:	f240 21a9 	movw	r1, #681	; 0x2a9
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	f7ff ff26 	bl	8000b24 <transferDMA_USART2_TX>
			OF_ResetCoefficients();
 8000cd8:	f000 fd1a 	bl	8001710 <OF_ResetCoefficients>
		}
		collisionFlag = 0;
 8000cdc:	4b81      	ldr	r3, [pc, #516]	; (8000ee4 <eyes_FSM+0x308>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000ce2:	4b83      	ldr	r3, [pc, #524]	; (8000ef0 <eyes_FSM+0x314>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	801a      	strh	r2, [r3, #0]
		return;
 8000ce8:	e115      	b.n	8000f16 <eyes_FSM+0x33a>
	/* REQ_READING_FRAME state --------------------------------------------------------- */
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 8000cea:	f000 f97f 	bl	8000fec <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000cee:	4b7d      	ldr	r3, [pc, #500]	; (8000ee4 <eyes_FSM+0x308>)
 8000cf0:	781b      	ldrb	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	f040 8106 	bne.w	8000f04 <eyes_FSM+0x328>
 8000cf8:	4b7a      	ldr	r3, [pc, #488]	; (8000ee4 <eyes_FSM+0x308>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
		/* Send a pixel data read request */
		adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000cfe:	2108      	movs	r1, #8
 8000d00:	2000      	movs	r0, #0
 8000d02:	f7ff fe6f 	bl	80009e4 <adns2610_sendByte>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Check the last received pixel status and take decision related to it
		 * 	- Compute OF coefficients when it was possible
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8000d06:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000d0a:	f000 f947 	bl	8000f9c <eyes_waitIT>
		if(!firstPixelRead){
 8000d0e:	4b71      	ldr	r3, [pc, #452]	; (8000ed4 <eyes_FSM+0x2f8>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	f083 0301 	eor.w	r3, r3, #1
 8000d16:	b2db      	uxtb	r3, r3
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d059      	beq.n	8000dd0 <eyes_FSM+0x1f4>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000d1c:	4b75      	ldr	r3, [pc, #468]	; (8000ef4 <eyes_FSM+0x318>)
 8000d1e:	781b      	ldrb	r3, [r3, #0]
 8000d20:	4619      	mov	r1, r3
 8000d22:	4b6a      	ldr	r3, [pc, #424]	; (8000ecc <eyes_FSM+0x2f0>)
 8000d24:	881b      	ldrh	r3, [r3, #0]
 8000d26:	461a      	mov	r2, r3
 8000d28:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d2c:	fb03 f301 	mul.w	r3, r3, r1
 8000d30:	4413      	add	r3, r2
 8000d32:	4a6e      	ldr	r2, [pc, #440]	; (8000eec <eyes_FSM+0x310>)
 8000d34:	4413      	add	r3, r2
 8000d36:	3305      	adds	r3, #5
 8000d38:	4618      	mov	r0, r3
 8000d3a:	f7ff fe89 	bl	8000a50 <adns2610_checkPixel>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	461a      	mov	r2, r3
 8000d42:	4b63      	ldr	r3, [pc, #396]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000d44:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000d46:	4b6c      	ldr	r3, [pc, #432]	; (8000ef8 <eyes_FSM+0x31c>)
 8000d48:	4a60      	ldr	r2, [pc, #384]	; (8000ecc <eyes_FSM+0x2f0>)
 8000d4a:	496c      	ldr	r1, [pc, #432]	; (8000efc <eyes_FSM+0x320>)
 8000d4c:	4860      	ldr	r0, [pc, #384]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000d4e:	f000 f95d 	bl	800100c <eyes_computeIdxFromStatus>
 8000d52:	4603      	mov	r3, r0
 8000d54:	2b00      	cmp	r3, #0
 8000d56:	d031      	beq.n	8000dbc <eyes_FSM+0x1e0>
				FSMstate = READING_FRAME;
 8000d58:	4b5b      	ldr	r3, [pc, #364]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000d5a:	2202      	movs	r2, #2
 8000d5c:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 8000d5e:	4b5c      	ldr	r3, [pc, #368]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000d60:	781b      	ldrb	r3, [r3, #0]
 8000d62:	2b03      	cmp	r3, #3
 8000d64:	d003      	beq.n	8000d6e <eyes_FSM+0x192>
 8000d66:	4b5a      	ldr	r3, [pc, #360]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000d68:	781b      	ldrb	r3, [r3, #0]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d105      	bne.n	8000d7a <eyes_FSM+0x19e>
					errorCounter++;
 8000d6e:	4b60      	ldr	r3, [pc, #384]	; (8000ef0 <eyes_FSM+0x314>)
 8000d70:	881b      	ldrh	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	b29a      	uxth	r2, r3
 8000d76:	4b5e      	ldr	r3, [pc, #376]	; (8000ef0 <eyes_FSM+0x314>)
 8000d78:	801a      	strh	r2, [r3, #0]
				}
				if(!firstFrameRead){
 8000d7a:	4b57      	ldr	r3, [pc, #348]	; (8000ed8 <eyes_FSM+0x2fc>)
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	f083 0301 	eor.w	r3, r3, #1
 8000d82:	b2db      	uxtb	r3, r3
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	d029      	beq.n	8000ddc <eyes_FSM+0x200>
					OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 8000d88:	4b5a      	ldr	r3, [pc, #360]	; (8000ef4 <eyes_FSM+0x318>)
 8000d8a:	781b      	ldrb	r3, [r3, #0]
 8000d8c:	461a      	mov	r2, r3
 8000d8e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d92:	fb03 f302 	mul.w	r3, r3, r2
 8000d96:	4a55      	ldr	r2, [pc, #340]	; (8000eec <eyes_FSM+0x310>)
 8000d98:	4413      	add	r3, r2
 8000d9a:	1d59      	adds	r1, r3, #5
 8000d9c:	4b52      	ldr	r3, [pc, #328]	; (8000ee8 <eyes_FSM+0x30c>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	461a      	mov	r2, r3
 8000da2:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000da6:	fb03 f302 	mul.w	r3, r3, r2
 8000daa:	4a50      	ldr	r2, [pc, #320]	; (8000eec <eyes_FSM+0x310>)
 8000dac:	4413      	add	r3, r2
 8000dae:	1d5a      	adds	r2, r3, #5
 8000db0:	4b46      	ldr	r3, [pc, #280]	; (8000ecc <eyes_FSM+0x2f0>)
 8000db2:	881b      	ldrh	r3, [r3, #0]
 8000db4:	2000      	movs	r0, #0
 8000db6:	f000 fcff 	bl	80017b8 <OF_ComputeCoefficients>
 8000dba:	e00f      	b.n	8000ddc <eyes_FSM+0x200>
					OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
#endif
				}
			}
			else{
				eyes_stopWaitIT();
 8000dbc:	f000 f916 	bl	8000fec <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8000dc0:	4b41      	ldr	r3, [pc, #260]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000dc2:	2201      	movs	r2, #1
 8000dc4:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000dc6:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000dca:	f000 f8e7 	bl	8000f9c <eyes_waitIT>
 8000dce:	e005      	b.n	8000ddc <eyes_FSM+0x200>
			}
		}
		else{
			firstPixelRead = false;
 8000dd0:	4b40      	ldr	r3, [pc, #256]	; (8000ed4 <eyes_FSM+0x2f8>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 8000dd6:	4b3c      	ldr	r3, [pc, #240]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000dd8:	2202      	movs	r2, #2
 8000dda:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 8000ddc:	4b41      	ldr	r3, [pc, #260]	; (8000ee4 <eyes_FSM+0x308>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	701a      	strb	r2, [r3, #0]
		return;
 8000de2:	e098      	b.n	8000f16 <eyes_FSM+0x33a>
	/* READING_FRAME state ---------------------------------------------------------------- */
	case READING_FRAME:
		eyes_stopWaitIT();
 8000de4:	f000 f902 	bl	8000fec <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000de8:	4b3e      	ldr	r3, [pc, #248]	; (8000ee4 <eyes_FSM+0x308>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	f040 808b 	bne.w	8000f08 <eyes_FSM+0x32c>
 8000df2:	4b3c      	ldr	r3, [pc, #240]	; (8000ee4 <eyes_FSM+0x308>)
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
		/* Read pixel data register */
		adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000df8:	4b3e      	ldr	r3, [pc, #248]	; (8000ef4 <eyes_FSM+0x318>)
 8000dfa:	781b      	ldrb	r3, [r3, #0]
 8000dfc:	4619      	mov	r1, r3
 8000dfe:	4b33      	ldr	r3, [pc, #204]	; (8000ecc <eyes_FSM+0x2f0>)
 8000e00:	881b      	ldrh	r3, [r3, #0]
 8000e02:	461a      	mov	r2, r3
 8000e04:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e08:	fb03 f301 	mul.w	r3, r3, r1
 8000e0c:	4413      	add	r3, r2
 8000e0e:	4a37      	ldr	r2, [pc, #220]	; (8000eec <eyes_FSM+0x310>)
 8000e10:	4413      	add	r3, r2
 8000e12:	3305      	adds	r3, #5
 8000e14:	4619      	mov	r1, r3
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fda2 	bl	8000960 <adns2610_receiveByte>
		}
		else{
			FSMstate = REQ_READING_FRAME;
		}
#else
		if(pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1){
 8000e1c:	4b2b      	ldr	r3, [pc, #172]	; (8000ecc <eyes_FSM+0x2f0>)
 8000e1e:	881b      	ldrh	r3, [r3, #0]
 8000e20:	f240 1243 	movw	r2, #323	; 0x143
 8000e24:	4293      	cmp	r3, r2
 8000e26:	d10c      	bne.n	8000e42 <eyes_FSM+0x266>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000e28:	4b33      	ldr	r3, [pc, #204]	; (8000ef8 <eyes_FSM+0x31c>)
 8000e2a:	4a28      	ldr	r2, [pc, #160]	; (8000ecc <eyes_FSM+0x2f0>)
 8000e2c:	4933      	ldr	r1, [pc, #204]	; (8000efc <eyes_FSM+0x320>)
 8000e2e:	4828      	ldr	r0, [pc, #160]	; (8000ed0 <eyes_FSM+0x2f4>)
 8000e30:	f000 f8ec 	bl	800100c <eyes_computeIdxFromStatus>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d00d      	beq.n	8000e56 <eyes_FSM+0x27a>
				FSMstate = PROCESSING;
 8000e3a:	4b23      	ldr	r3, [pc, #140]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000e3c:	2204      	movs	r2, #4
 8000e3e:	701a      	strb	r2, [r3, #0]
 8000e40:	e009      	b.n	8000e56 <eyes_FSM+0x27a>
			}
		}
		else{
			// It only waits for the next state when it is REQ_READING_FRAME. If not, it continues directly to PROCESSING state.
			FSMstate = REQ_READING_FRAME;
 8000e42:	4b21      	ldr	r3, [pc, #132]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000e44:	2203      	movs	r2, #3
 8000e46:	701a      	strb	r2, [r3, #0]
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000e48:	20c8      	movs	r0, #200	; 0xc8
 8000e4a:	f000 f8a7 	bl	8000f9c <eyes_waitIT>
			collisionFlag = 0;
 8000e4e:	4b25      	ldr	r3, [pc, #148]	; (8000ee4 <eyes_FSM+0x308>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	701a      	strb	r2, [r3, #0]
			return;
 8000e54:	e05f      	b.n	8000f16 <eyes_FSM+0x33a>
		}
#endif
		collisionFlag = 0;
 8000e56:	4b23      	ldr	r3, [pc, #140]	; (8000ee4 <eyes_FSM+0x308>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	701a      	strb	r2, [r3, #0]
	/* PROCESSING state ---------------------------------------------------------------- */
	case PROCESSING:
		/* Check if it's the first frame read */
		if(firstFrameRead){
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <eyes_FSM+0x2fc>)
 8000e5e:	781b      	ldrb	r3, [r3, #0]
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d003      	beq.n	8000e6c <eyes_FSM+0x290>
			firstFrameRead = false;
 8000e64:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <eyes_FSM+0x2fc>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	701a      	strb	r2, [r3, #0]
 8000e6a:	e01b      	b.n	8000ea4 <eyes_FSM+0x2c8>
		}
		else{
			/* Compute the Optical Flow from the previous computed coefficients */
			OF_Compute(ADNS2610_RIGHT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
 8000e6c:	4b21      	ldr	r3, [pc, #132]	; (8000ef4 <eyes_FSM+0x318>)
 8000e6e:	781b      	ldrb	r3, [r3, #0]
 8000e70:	461a      	mov	r2, r3
 8000e72:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e76:	fb03 f302 	mul.w	r3, r3, r2
 8000e7a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000e7e:	4a1b      	ldr	r2, [pc, #108]	; (8000eec <eyes_FSM+0x310>)
 8000e80:	4413      	add	r3, r2
 8000e82:	1d59      	adds	r1, r3, #5
 8000e84:	4b1b      	ldr	r3, [pc, #108]	; (8000ef4 <eyes_FSM+0x318>)
 8000e86:	781b      	ldrb	r3, [r3, #0]
 8000e88:	461a      	mov	r2, r3
 8000e8a:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e8e:	fb03 f302 	mul.w	r3, r3, r2
 8000e92:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000e96:	4a15      	ldr	r2, [pc, #84]	; (8000eec <eyes_FSM+0x310>)
 8000e98:	4413      	add	r3, r2
 8000e9a:	3309      	adds	r3, #9
 8000e9c:	461a      	mov	r2, r3
 8000e9e:	2000      	movs	r0, #0
 8000ea0:	f000 fd9e 	bl	80019e0 <OF_Compute>
#if SECOND_SENSOR_IMPLEMENTED
			OF_Compute(ADNS2610_LEFT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
#endif
		}
		/* Switch the frame structures to store the new frame in the "oldest" data buffer */
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 8000ea4:	4b10      	ldr	r3, [pc, #64]	; (8000ee8 <eyes_FSM+0x30c>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	71fb      	strb	r3, [r7, #7]
 8000eaa:	4b12      	ldr	r3, [pc, #72]	; (8000ef4 <eyes_FSM+0x318>)
 8000eac:	781a      	ldrb	r2, [r3, #0]
 8000eae:	4b0e      	ldr	r3, [pc, #56]	; (8000ee8 <eyes_FSM+0x30c>)
 8000eb0:	701a      	strb	r2, [r3, #0]
 8000eb2:	4a10      	ldr	r2, [pc, #64]	; (8000ef4 <eyes_FSM+0x318>)
 8000eb4:	79fb      	ldrb	r3, [r7, #7]
 8000eb6:	7013      	strb	r3, [r2, #0]
		FSMstate = TRIGGER_FRAME;
 8000eb8:	4b03      	ldr	r3, [pc, #12]	; (8000ec8 <eyes_FSM+0x2ec>)
 8000eba:	2201      	movs	r2, #1
 8000ebc:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000ebe:	20c8      	movs	r0, #200	; 0xc8
 8000ec0:	f000 f86c 	bl	8000f9c <eyes_waitIT>
		return;
 8000ec4:	e027      	b.n	8000f16 <eyes_FSM+0x33a>
 8000ec6:	bf00      	nop
 8000ec8:	200005e0 	.word	0x200005e0
 8000ecc:	200005e4 	.word	0x200005e4
 8000ed0:	200005e8 	.word	0x200005e8
 8000ed4:	20000552 	.word	0x20000552
 8000ed8:	20000553 	.word	0x20000553
 8000edc:	200005ea 	.word	0x200005ea
 8000ee0:	200005e1 	.word	0x200005e1
 8000ee4:	200005eb 	.word	0x200005eb
 8000ee8:	2000065d 	.word	0x2000065d
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	200005ec 	.word	0x200005ec
 8000ef4:	2000065c 	.word	0x2000065c
 8000ef8:	200005e6 	.word	0x200005e6
 8000efc:	200005e9 	.word	0x200005e9
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000f00:	bf00      	nop
 8000f02:	e002      	b.n	8000f0a <eyes_FSM+0x32e>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000f04:	bf00      	nop
 8000f06:	e000      	b.n	8000f0a <eyes_FSM+0x32e>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000f08:	bf00      	nop
	}

	// Check for collisions between interrupts callings
	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8000f0a:	4804      	ldr	r0, [pc, #16]	; (8000f1c <eyes_FSM+0x340>)
 8000f0c:	f002 fdd6 	bl	8003abc <puts>
		eyes_stopWaitIT();
 8000f10:	f000 f86c 	bl	8000fec <eyes_stopWaitIT>
		while(1);
 8000f14:	e7fe      	b.n	8000f14 <eyes_FSM+0x338>
}
 8000f16:	3708      	adds	r7, #8
 8000f18:	46bd      	mov	sp, r7
 8000f1a:	bd80      	pop	{r7, pc}
 8000f1c:	08004a88 	.word	0x08004a88

08000f20 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8000f26:	4b1c      	ldr	r3, [pc, #112]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000f2c:	4b1a      	ldr	r3, [pc, #104]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f2e:	68db      	ldr	r3, [r3, #12]
 8000f30:	4a19      	ldr	r2, [pc, #100]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	f003 0302 	and.w	r3, r3, #2
 8000f3e:	f043 0304 	orr.w	r3, r3, #4
 8000f42:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8000f44:	4a14      	ldr	r2, [pc, #80]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 8000f4a:	4b13      	ldr	r3, [pc, #76]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f4c:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000f50:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000f52:	4b11      	ldr	r3, [pc, #68]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f54:	695b      	ldr	r3, [r3, #20]
 8000f56:	4a10      	ldr	r2, [pc, #64]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f58:	f043 0301 	orr.w	r3, r3, #1
 8000f5c:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000f5e:	4b0e      	ldr	r3, [pc, #56]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f60:	691b      	ldr	r3, [r3, #16]
 8000f62:	4a0d      	ldr	r2, [pc, #52]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f64:	f023 0301 	bic.w	r3, r3, #1
 8000f68:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000f6a:	4b0b      	ldr	r3, [pc, #44]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a0a      	ldr	r2, [pc, #40]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f70:	f023 0304 	bic.w	r3, r3, #4
 8000f74:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000f76:	4b08      	ldr	r3, [pc, #32]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f78:	68db      	ldr	r3, [r3, #12]
 8000f7a:	4a07      	ldr	r2, [pc, #28]	; (8000f98 <eyes_configureFSM_TIM+0x78>)
 8000f7c:	f043 0301 	orr.w	r3, r3, #1
 8000f80:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8000f82:	2100      	movs	r1, #0
 8000f84:	2019      	movs	r0, #25
 8000f86:	f7ff fda3 	bl	8000ad0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000f8a:	2019      	movs	r0, #25
 8000f8c:	f7ff fd82 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8000f90:	bf00      	nop
 8000f92:	3708      	adds	r7, #8
 8000f94:	46bd      	mov	sp, r7
 8000f96:	bd80      	pop	{r7, pc}
 8000f98:	40012c00 	.word	0x40012c00

08000f9c <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8000fa4:	4b10      	ldr	r3, [pc, #64]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	4a0f      	ldr	r2, [pc, #60]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000faa:	f043 0304 	orr.w	r3, r3, #4
 8000fae:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8000fb0:	4a0d      	ldr	r2, [pc, #52]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000fb6:	4b0c      	ldr	r3, [pc, #48]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fb8:	695b      	ldr	r3, [r3, #20]
 8000fba:	4a0b      	ldr	r2, [pc, #44]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fbc:	f043 0301 	orr.w	r3, r3, #1
 8000fc0:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fc8:	f023 0304 	bic.w	r3, r3, #4
 8000fcc:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	4a05      	ldr	r2, [pc, #20]	; (8000fe8 <eyes_waitIT+0x4c>)
 8000fd4:	f043 0301 	orr.w	r3, r3, #1
 8000fd8:	6013      	str	r3, [r2, #0]
}
 8000fda:	bf00      	nop
 8000fdc:	370c      	adds	r7, #12
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	40012c00 	.word	0x40012c00

08000fec <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000ff0:	4b05      	ldr	r3, [pc, #20]	; (8001008 <eyes_stopWaitIT+0x1c>)
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a04      	ldr	r2, [pc, #16]	; (8001008 <eyes_stopWaitIT+0x1c>)
 8000ff6:	f023 0301 	bic.w	r3, r3, #1
 8000ffa:	6013      	str	r3, [r2, #0]
}
 8000ffc:	bf00      	nop
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	40012c00 	.word	0x40012c00

0800100c <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 800100c:	b480      	push	{r7}
 800100e:	b085      	sub	sp, #20
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
 8001018:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	781b      	ldrb	r3, [r3, #0]
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10a      	bne.n	8001038 <eyes_computeIdxFromStatus+0x2c>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	881b      	ldrh	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d106      	bne.n	8001038 <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 800102a:	687b      	ldr	r3, [r7, #4]
 800102c:	881b      	ldrh	r3, [r3, #0]
 800102e:	3301      	adds	r3, #1
 8001030:	b29a      	uxth	r2, r3
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	801a      	strh	r2, [r3, #0]
 8001036:	e024      	b.n	8001082 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	781b      	ldrb	r3, [r3, #0]
 800103c:	2b02      	cmp	r3, #2
 800103e:	d10f      	bne.n	8001060 <eyes_computeIdxFromStatus+0x54>
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	881b      	ldrh	r3, [r3, #0]
 8001044:	2b00      	cmp	r3, #0
 8001046:	d00b      	beq.n	8001060 <eyes_computeIdxFromStatus+0x54>
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	881b      	ldrh	r3, [r3, #0]
 800104c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8001050:	d806      	bhi.n	8001060 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	881b      	ldrh	r3, [r3, #0]
 8001056:	3301      	adds	r3, #1
 8001058:	b29a      	uxth	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	801a      	strh	r2, [r3, #0]
 800105e:	e010      	b.n	8001082 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 8001060:	68fb      	ldr	r3, [r7, #12]
 8001062:	781b      	ldrb	r3, [r3, #0]
 8001064:	2b00      	cmp	r3, #0
 8001066:	d10c      	bne.n	8001082 <eyes_computeIdxFromStatus+0x76>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	881b      	ldrh	r3, [r3, #0]
 800106c:	2b00      	cmp	r3, #0
 800106e:	d008      	beq.n	8001082 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	2200      	movs	r2, #0
 8001074:	801a      	strh	r2, [r3, #0]
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	881a      	ldrh	r2, [r3, #0]
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	801a      	strh	r2, [r3, #0]
		return false;
 800107e:	2300      	movs	r3, #0
 8001080:	e000      	b.n	8001084 <eyes_computeIdxFromStatus+0x78>
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
		(*idx1) = (*idx2) = 0;
		return false;
	}
#endif
	return true;
 8001082:	2301      	movs	r3, #1
}
 8001084:	4618      	mov	r0, r3
 8001086:	3714      	adds	r7, #20
 8001088:	46bd      	mov	sp, r7
 800108a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108e:	4770      	bx	lr

08001090 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8001090:	b580      	push	{r7, lr}
 8001092:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8001094:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001096:	691b      	ldr	r3, [r3, #16]
 8001098:	f003 0301 	and.w	r3, r3, #1
 800109c:	2b00      	cmp	r3, #0
 800109e:	d007      	beq.n	80010b0 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80010a0:	4b04      	ldr	r3, [pc, #16]	; (80010b4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80010a2:	691b      	ldr	r3, [r3, #16]
 80010a4:	4a03      	ldr	r2, [pc, #12]	; (80010b4 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80010a6:	f023 0301 	bic.w	r3, r3, #1
 80010aa:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 80010ac:	f7ff fd96 	bl	8000bdc <eyes_FSM>
	}
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}
 80010b4:	40012c00 	.word	0x40012c00

080010b8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80010b8:	b480      	push	{r7}
 80010ba:	b085      	sub	sp, #20
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80010c0:	4b08      	ldr	r3, [pc, #32]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010c4:	4907      	ldr	r1, [pc, #28]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	4313      	orrs	r3, r2
 80010ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80010cc:	4b05      	ldr	r3, [pc, #20]	; (80010e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80010ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	4013      	ands	r3, r2
 80010d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010d6:	68fb      	ldr	r3, [r7, #12]
}
 80010d8:	bf00      	nop
 80010da:	3714      	adds	r7, #20
 80010dc:	46bd      	mov	sp, r7
 80010de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e2:	4770      	bx	lr
 80010e4:	40021000 	.word	0x40021000

080010e8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80010e8:	b480      	push	{r7}
 80010ea:	b087      	sub	sp, #28
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
 80010f0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <LL_SYSCFG_SetEXTISource+0x68>)
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	b2db      	uxtb	r3, r3
 80010f8:	3302      	adds	r3, #2
 80010fa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	0c1b      	lsrs	r3, r3, #16
 8001102:	43db      	mvns	r3, r3
 8001104:	ea02 0103 	and.w	r1, r2, r3
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	0c1b      	lsrs	r3, r3, #16
 800110c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800110e:	693b      	ldr	r3, [r7, #16]
 8001110:	fa93 f3a3 	rbit	r3, r3
 8001114:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001116:	68fb      	ldr	r3, [r7, #12]
 8001118:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800111a:	697b      	ldr	r3, [r7, #20]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8001120:	2320      	movs	r3, #32
 8001122:	e003      	b.n	800112c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8001124:	697b      	ldr	r3, [r7, #20]
 8001126:	fab3 f383 	clz	r3, r3
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	fa03 f202 	lsl.w	r2, r3, r2
 8001134:	4806      	ldr	r0, [pc, #24]	; (8001150 <LL_SYSCFG_SetEXTISource+0x68>)
 8001136:	683b      	ldr	r3, [r7, #0]
 8001138:	b2db      	uxtb	r3, r3
 800113a:	430a      	orrs	r2, r1
 800113c:	3302      	adds	r3, #2
 800113e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001142:	bf00      	nop
 8001144:	371c      	adds	r7, #28
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr
 800114e:	bf00      	nop
 8001150:	40010000 	.word	0x40010000

08001154 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001154:	b480      	push	{r7}
 8001156:	b08b      	sub	sp, #44	; 0x2c
 8001158:	af00      	add	r7, sp, #0
 800115a:	60f8      	str	r0, [r7, #12]
 800115c:	60b9      	str	r1, [r7, #8]
 800115e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	68bb      	ldr	r3, [r7, #8]
 8001166:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	fa93 f3a3 	rbit	r3, r3
 800116e:	613b      	str	r3, [r7, #16]
  return result;
 8001170:	693b      	ldr	r3, [r7, #16]
 8001172:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001174:	69bb      	ldr	r3, [r7, #24]
 8001176:	2b00      	cmp	r3, #0
 8001178:	d101      	bne.n	800117e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800117a:	2320      	movs	r3, #32
 800117c:	e003      	b.n	8001186 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800117e:	69bb      	ldr	r3, [r7, #24]
 8001180:	fab3 f383 	clz	r3, r3
 8001184:	b2db      	uxtb	r3, r3
 8001186:	005b      	lsls	r3, r3, #1
 8001188:	2103      	movs	r1, #3
 800118a:	fa01 f303 	lsl.w	r3, r1, r3
 800118e:	43db      	mvns	r3, r3
 8001190:	401a      	ands	r2, r3
 8001192:	68bb      	ldr	r3, [r7, #8]
 8001194:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	fa93 f3a3 	rbit	r3, r3
 800119c:	61fb      	str	r3, [r7, #28]
  return result;
 800119e:	69fb      	ldr	r3, [r7, #28]
 80011a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d101      	bne.n	80011ac <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80011a8:	2320      	movs	r3, #32
 80011aa:	e003      	b.n	80011b4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80011ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ae:	fab3 f383 	clz	r3, r3
 80011b2:	b2db      	uxtb	r3, r3
 80011b4:	005b      	lsls	r3, r3, #1
 80011b6:	6879      	ldr	r1, [r7, #4]
 80011b8:	fa01 f303 	lsl.w	r3, r1, r3
 80011bc:	431a      	orrs	r2, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	601a      	str	r2, [r3, #0]
}
 80011c2:	bf00      	nop
 80011c4:	372c      	adds	r7, #44	; 0x2c
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr

080011ce <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80011ce:	b480      	push	{r7}
 80011d0:	b08b      	sub	sp, #44	; 0x2c
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	60f8      	str	r0, [r7, #12]
 80011d6:	60b9      	str	r1, [r7, #8]
 80011d8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80011da:	68fb      	ldr	r3, [r7, #12]
 80011dc:	68da      	ldr	r2, [r3, #12]
 80011de:	68bb      	ldr	r3, [r7, #8]
 80011e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011e2:	697b      	ldr	r3, [r7, #20]
 80011e4:	fa93 f3a3 	rbit	r3, r3
 80011e8:	613b      	str	r3, [r7, #16]
  return result;
 80011ea:	693b      	ldr	r3, [r7, #16]
 80011ec:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d101      	bne.n	80011f8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80011f4:	2320      	movs	r3, #32
 80011f6:	e003      	b.n	8001200 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80011f8:	69bb      	ldr	r3, [r7, #24]
 80011fa:	fab3 f383 	clz	r3, r3
 80011fe:	b2db      	uxtb	r3, r3
 8001200:	005b      	lsls	r3, r3, #1
 8001202:	2103      	movs	r1, #3
 8001204:	fa01 f303 	lsl.w	r3, r1, r3
 8001208:	43db      	mvns	r3, r3
 800120a:	401a      	ands	r2, r3
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001210:	6a3b      	ldr	r3, [r7, #32]
 8001212:	fa93 f3a3 	rbit	r3, r3
 8001216:	61fb      	str	r3, [r7, #28]
  return result;
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800121c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800121e:	2b00      	cmp	r3, #0
 8001220:	d101      	bne.n	8001226 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001222:	2320      	movs	r3, #32
 8001224:	e003      	b.n	800122e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001228:	fab3 f383 	clz	r3, r3
 800122c:	b2db      	uxtb	r3, r3
 800122e:	005b      	lsls	r3, r3, #1
 8001230:	6879      	ldr	r1, [r7, #4]
 8001232:	fa01 f303 	lsl.w	r3, r1, r3
 8001236:	431a      	orrs	r2, r3
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	60da      	str	r2, [r3, #12]
}
 800123c:	bf00      	nop
 800123e:	372c      	adds	r7, #44	; 0x2c
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8001248:	b480      	push	{r7}
 800124a:	b083      	sub	sp, #12
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
 8001250:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	683a      	ldr	r2, [r7, #0]
 8001256:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001258:	bf00      	nop
 800125a:	370c      	adds	r7, #12
 800125c:	46bd      	mov	sp, r7
 800125e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001262:	4770      	bx	lr

08001264 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b08a      	sub	sp, #40	; 0x28
 8001268:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800126a:	f107 031c 	add.w	r3, r7, #28
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]
 8001274:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001276:	1d3b      	adds	r3, r7, #4
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
 8001284:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001286:	2004      	movs	r0, #4
 8001288:	f7ff ff16 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800128c:	2080      	movs	r0, #128	; 0x80
 800128e:	f7ff ff13 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001292:	2001      	movs	r0, #1
 8001294:	f7ff ff10 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001298:	2002      	movs	r0, #2
 800129a:	f7ff ff0d 	bl	80010b8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800129e:	2120      	movs	r1, #32
 80012a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012a4:	f7ff ffd0 	bl	8001248 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80012a8:	491b      	ldr	r1, [pc, #108]	; (8001318 <MX_GPIO_Init+0xb4>)
 80012aa:	2002      	movs	r0, #2
 80012ac:	f7ff ff1c 	bl	80010e8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80012b0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012b4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80012b6:	2300      	movs	r3, #0
 80012b8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80012ba:	2301      	movs	r3, #1
 80012bc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80012c6:	2302      	movs	r3, #2
 80012c8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80012cc:	f107 031c 	add.w	r3, r7, #28
 80012d0:	4618      	mov	r0, r3
 80012d2:	f001 fa61 	bl	8002798 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80012d6:	2200      	movs	r2, #0
 80012d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012dc:	480f      	ldr	r0, [pc, #60]	; (800131c <MX_GPIO_Init+0xb8>)
 80012de:	f7ff ff76 	bl	80011ce <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80012e2:	2200      	movs	r2, #0
 80012e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80012e8:	480c      	ldr	r0, [pc, #48]	; (800131c <MX_GPIO_Init+0xb8>)
 80012ea:	f7ff ff33 	bl	8001154 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80012ee:	2320      	movs	r3, #32
 80012f0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80012f2:	2301      	movs	r3, #1
 80012f4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80012f6:	2300      	movs	r3, #0
 80012f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80012fa:	2300      	movs	r3, #0
 80012fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80012fe:	2300      	movs	r3, #0
 8001300:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001302:	1d3b      	adds	r3, r7, #4
 8001304:	4619      	mov	r1, r3
 8001306:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800130a:	f001 fc7c 	bl	8002c06 <LL_GPIO_Init>

}
 800130e:	bf00      	nop
 8001310:	3728      	adds	r7, #40	; 0x28
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	00f00003 	.word	0x00f00003
 800131c:	48000800 	.word	0x48000800

08001320 <__NVIC_SetPriorityGrouping>:
{
 8001320:	b480      	push	{r7}
 8001322:	b085      	sub	sp, #20
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	f003 0307 	and.w	r3, r3, #7
 800132e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001330:	4b0c      	ldr	r3, [pc, #48]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001336:	68ba      	ldr	r2, [r7, #8]
 8001338:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800133c:	4013      	ands	r3, r2
 800133e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001344:	68bb      	ldr	r3, [r7, #8]
 8001346:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001348:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800134c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001350:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001352:	4a04      	ldr	r2, [pc, #16]	; (8001364 <__NVIC_SetPriorityGrouping+0x44>)
 8001354:	68bb      	ldr	r3, [r7, #8]
 8001356:	60d3      	str	r3, [r2, #12]
}
 8001358:	bf00      	nop
 800135a:	3714      	adds	r7, #20
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	e000ed00 	.word	0xe000ed00

08001368 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800136c:	4b05      	ldr	r3, [pc, #20]	; (8001384 <LL_RCC_HSI_Enable+0x1c>)
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	4a04      	ldr	r2, [pc, #16]	; (8001384 <LL_RCC_HSI_Enable+0x1c>)
 8001372:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001376:	6013      	str	r3, [r2, #0]
}
 8001378:	bf00      	nop
 800137a:	46bd      	mov	sp, r7
 800137c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001380:	4770      	bx	lr
 8001382:	bf00      	nop
 8001384:	40021000 	.word	0x40021000

08001388 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <LL_RCC_HSI_IsReady+0x24>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001394:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001398:	d101      	bne.n	800139e <LL_RCC_HSI_IsReady+0x16>
 800139a:	2301      	movs	r3, #1
 800139c:	e000      	b.n	80013a0 <LL_RCC_HSI_IsReady+0x18>
 800139e:	2300      	movs	r3, #0
}
 80013a0:	4618      	mov	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a8:	4770      	bx	lr
 80013aa:	bf00      	nop
 80013ac:	40021000 	.word	0x40021000

080013b0 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b083      	sub	sp, #12
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80013b8:	4b07      	ldr	r3, [pc, #28]	; (80013d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	061b      	lsls	r3, r3, #24
 80013c4:	4904      	ldr	r1, [pc, #16]	; (80013d8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80013c6:	4313      	orrs	r3, r2
 80013c8:	604b      	str	r3, [r1, #4]
}
 80013ca:	bf00      	nop
 80013cc:	370c      	adds	r7, #12
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr
 80013d6:	bf00      	nop
 80013d8:	40021000 	.word	0x40021000

080013dc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80013dc:	b480      	push	{r7}
 80013de:	b083      	sub	sp, #12
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <LL_RCC_SetSysClkSource+0x24>)
 80013e6:	689b      	ldr	r3, [r3, #8]
 80013e8:	f023 0203 	bic.w	r2, r3, #3
 80013ec:	4904      	ldr	r1, [pc, #16]	; (8001400 <LL_RCC_SetSysClkSource+0x24>)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	4313      	orrs	r3, r2
 80013f2:	608b      	str	r3, [r1, #8]
}
 80013f4:	bf00      	nop
 80013f6:	370c      	adds	r7, #12
 80013f8:	46bd      	mov	sp, r7
 80013fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fe:	4770      	bx	lr
 8001400:	40021000 	.word	0x40021000

08001404 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001408:	4b04      	ldr	r3, [pc, #16]	; (800141c <LL_RCC_GetSysClkSource+0x18>)
 800140a:	689b      	ldr	r3, [r3, #8]
 800140c:	f003 030c 	and.w	r3, r3, #12
}
 8001410:	4618      	mov	r0, r3
 8001412:	46bd      	mov	sp, r7
 8001414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001418:	4770      	bx	lr
 800141a:	bf00      	nop
 800141c:	40021000 	.word	0x40021000

08001420 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8001420:	b480      	push	{r7}
 8001422:	b083      	sub	sp, #12
 8001424:	af00      	add	r7, sp, #0
 8001426:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8001428:	4b06      	ldr	r3, [pc, #24]	; (8001444 <LL_RCC_SetAHBPrescaler+0x24>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001430:	4904      	ldr	r1, [pc, #16]	; (8001444 <LL_RCC_SetAHBPrescaler+0x24>)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4313      	orrs	r3, r2
 8001436:	608b      	str	r3, [r1, #8]
}
 8001438:	bf00      	nop
 800143a:	370c      	adds	r7, #12
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000

08001448 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001450:	4b06      	ldr	r3, [pc, #24]	; (800146c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001452:	689b      	ldr	r3, [r3, #8]
 8001454:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001458:	4904      	ldr	r1, [pc, #16]	; (800146c <LL_RCC_SetAPB1Prescaler+0x24>)
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	4313      	orrs	r3, r2
 800145e:	608b      	str	r3, [r1, #8]
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000

08001470 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001478:	4b06      	ldr	r3, [pc, #24]	; (8001494 <LL_RCC_SetAPB2Prescaler+0x24>)
 800147a:	689b      	ldr	r3, [r3, #8]
 800147c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001480:	4904      	ldr	r1, [pc, #16]	; (8001494 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	4313      	orrs	r3, r2
 8001486:	608b      	str	r3, [r1, #8]
}
 8001488:	bf00      	nop
 800148a:	370c      	adds	r7, #12
 800148c:	46bd      	mov	sp, r7
 800148e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001492:	4770      	bx	lr
 8001494:	40021000 	.word	0x40021000

08001498 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001498:	b480      	push	{r7}
 800149a:	b083      	sub	sp, #12
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80014a0:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80014a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	0c1b      	lsrs	r3, r3, #16
 80014aa:	43db      	mvns	r3, r3
 80014ac:	401a      	ands	r2, r3
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	b29b      	uxth	r3, r3
 80014b2:	4905      	ldr	r1, [pc, #20]	; (80014c8 <LL_RCC_SetUSARTClockSource+0x30>)
 80014b4:	4313      	orrs	r3, r2
 80014b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c4:	4770      	bx	lr
 80014c6:	bf00      	nop
 80014c8:	40021000 	.word	0x40021000

080014cc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80014cc:	b480      	push	{r7}
 80014ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80014d0:	4b05      	ldr	r3, [pc, #20]	; (80014e8 <LL_RCC_PLL_Enable+0x1c>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a04      	ldr	r2, [pc, #16]	; (80014e8 <LL_RCC_PLL_Enable+0x1c>)
 80014d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014da:	6013      	str	r3, [r2, #0]
}
 80014dc:	bf00      	nop
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40021000 	.word	0x40021000

080014ec <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80014ec:	b480      	push	{r7}
 80014ee:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80014f0:	4b07      	ldr	r3, [pc, #28]	; (8001510 <LL_RCC_PLL_IsReady+0x24>)
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014f8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80014fc:	d101      	bne.n	8001502 <LL_RCC_PLL_IsReady+0x16>
 80014fe:	2301      	movs	r3, #1
 8001500:	e000      	b.n	8001504 <LL_RCC_PLL_IsReady+0x18>
 8001502:	2300      	movs	r3, #0
}
 8001504:	4618      	mov	r0, r3
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
 800150e:	bf00      	nop
 8001510:	40021000 	.word	0x40021000

08001514 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001514:	b480      	push	{r7}
 8001516:	b085      	sub	sp, #20
 8001518:	af00      	add	r7, sp, #0
 800151a:	60f8      	str	r0, [r7, #12]
 800151c:	60b9      	str	r1, [r7, #8]
 800151e:	607a      	str	r2, [r7, #4]
 8001520:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8001522:	4b0a      	ldr	r3, [pc, #40]	; (800154c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001524:	68da      	ldr	r2, [r3, #12]
 8001526:	4b0a      	ldr	r3, [pc, #40]	; (8001550 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8001528:	4013      	ands	r3, r2
 800152a:	68f9      	ldr	r1, [r7, #12]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	4311      	orrs	r1, r2
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	0212      	lsls	r2, r2, #8
 8001534:	4311      	orrs	r1, r2
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	430a      	orrs	r2, r1
 800153a:	4904      	ldr	r1, [pc, #16]	; (800154c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800153c:	4313      	orrs	r3, r2
 800153e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001540:	bf00      	nop
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr
 800154c:	40021000 	.word	0x40021000
 8001550:	f9ff808c 	.word	0xf9ff808c

08001554 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001558:	4b05      	ldr	r3, [pc, #20]	; (8001570 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	4a04      	ldr	r2, [pc, #16]	; (8001570 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800155e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001562:	60d3      	str	r3, [r2, #12]
}
 8001564:	bf00      	nop
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800157e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800158a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80015ba:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80015dc:	4b06      	ldr	r3, [pc, #24]	; (80015f8 <LL_FLASH_SetLatency+0x24>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f023 0207 	bic.w	r2, r3, #7
 80015e4:	4904      	ldr	r1, [pc, #16]	; (80015f8 <LL_FLASH_SetLatency+0x24>)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4313      	orrs	r3, r2
 80015ea:	600b      	str	r3, [r1, #0]
}
 80015ec:	bf00      	nop
 80015ee:	370c      	adds	r7, #12
 80015f0:	46bd      	mov	sp, r7
 80015f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f6:	4770      	bx	lr
 80015f8:	40022000 	.word	0x40022000

080015fc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001600:	4b04      	ldr	r3, [pc, #16]	; (8001614 <LL_FLASH_GetLatency+0x18>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0307 	and.w	r3, r3, #7
}
 8001608:	4618      	mov	r0, r3
 800160a:	46bd      	mov	sp, r7
 800160c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001610:	4770      	bx	lr
 8001612:	bf00      	nop
 8001614:	40022000 	.word	0x40022000

08001618 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001618:	b480      	push	{r7}
 800161a:	b083      	sub	sp, #12
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001620:	4b06      	ldr	r3, [pc, #24]	; (800163c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001628:	4904      	ldr	r1, [pc, #16]	; (800163c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4313      	orrs	r3, r2
 800162e:	600b      	str	r3, [r1, #0]
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr
 800163c:	40007000 	.word	0x40007000

08001640 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001644:	2001      	movs	r0, #1
 8001646:	f7ff ffad 	bl	80015a4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800164a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800164e:	f7ff ff91 	bl	8001574 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001652:	2003      	movs	r0, #3
 8001654:	f7ff fe64 	bl	8001320 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001658:	f000 f810 	bl	800167c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800165c:	f7ff fe02 	bl	8001264 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001660:	f000 fe0e 	bl	8002280 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001664:	f000 faf4 	bl	8001c50 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001668:	f000 fcdc 	bl	8002024 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 800166c:	f000 fe7e 	bl	800236c <startupPrint>

  eyes_init();
 8001670:	f7ff fa78 	bl	8000b64 <eyes_init>
  eyes_start();
 8001674:	f7ff fa96 	bl	8000ba4 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001678:	e7fe      	b.n	8001678 <main+0x38>
	...

0800167c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001680:	2003      	movs	r0, #3
 8001682:	f7ff ffa7 	bl	80015d4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001686:	bf00      	nop
 8001688:	f7ff ffb8 	bl	80015fc <LL_FLASH_GetLatency>
 800168c:	4603      	mov	r3, r0
 800168e:	2b03      	cmp	r3, #3
 8001690:	d1fa      	bne.n	8001688 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001692:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001696:	f7ff ffbf 	bl	8001618 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800169a:	f7ff fe65 	bl	8001368 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800169e:	bf00      	nop
 80016a0:	f7ff fe72 	bl	8001388 <LL_RCC_HSI_IsReady>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d1fa      	bne.n	80016a0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80016aa:	2010      	movs	r0, #16
 80016ac:	f7ff fe80 	bl	80013b0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80016b0:	2300      	movs	r3, #0
 80016b2:	2208      	movs	r2, #8
 80016b4:	2100      	movs	r1, #0
 80016b6:	2002      	movs	r0, #2
 80016b8:	f7ff ff2c 	bl	8001514 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80016bc:	f7ff ff4a 	bl	8001554 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80016c0:	f7ff ff04 	bl	80014cc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80016c4:	bf00      	nop
 80016c6:	f7ff ff11 	bl	80014ec <LL_RCC_PLL_IsReady>
 80016ca:	4603      	mov	r3, r0
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d1fa      	bne.n	80016c6 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80016d0:	2003      	movs	r0, #3
 80016d2:	f7ff fe83 	bl	80013dc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80016d6:	bf00      	nop
 80016d8:	f7ff fe94 	bl	8001404 <LL_RCC_GetSysClkSource>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b0c      	cmp	r3, #12
 80016e0:	d1fa      	bne.n	80016d8 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80016e2:	2000      	movs	r0, #0
 80016e4:	f7ff fe9c 	bl	8001420 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80016e8:	2000      	movs	r0, #0
 80016ea:	f7ff fead 	bl	8001448 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80016ee:	2000      	movs	r0, #0
 80016f0:	f7ff febe 	bl	8001470 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80016f4:	4805      	ldr	r0, [pc, #20]	; (800170c <SystemClock_Config+0x90>)
 80016f6:	f002 f8f7 	bl	80038e8 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80016fa:	4804      	ldr	r0, [pc, #16]	; (800170c <SystemClock_Config+0x90>)
 80016fc:	f002 f928 	bl	8003950 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001700:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001704:	f7ff fec8 	bl	8001498 <LL_RCC_SetUSARTClockSource>
}
 8001708:	bf00      	nop
 800170a:	bd80      	pop	{r7, pc}
 800170c:	03d09000 	.word	0x03d09000

08001710 <OF_ResetCoefficients>:
static int32_t deltaX;
static int32_t deltaY;
static int32_t deltaT;
static int16_t frameIdx;

void OF_ResetCoefficients(){
 8001710:	b490      	push	{r4, r7}
 8001712:	af00      	add	r7, sp, #0
	A[0] = B[0] = C[0] = E[0] = F[0] = 0;
 8001714:	4a22      	ldr	r2, [pc, #136]	; (80017a0 <OF_ResetCoefficients+0x90>)
 8001716:	f04f 0300 	mov.w	r3, #0
 800171a:	f04f 0400 	mov.w	r4, #0
 800171e:	e9c2 3400 	strd	r3, r4, [r2]
 8001722:	4b1f      	ldr	r3, [pc, #124]	; (80017a0 <OF_ResetCoefficients+0x90>)
 8001724:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001728:	4a1e      	ldr	r2, [pc, #120]	; (80017a4 <OF_ResetCoefficients+0x94>)
 800172a:	e9c2 3400 	strd	r3, r4, [r2]
 800172e:	4b1d      	ldr	r3, [pc, #116]	; (80017a4 <OF_ResetCoefficients+0x94>)
 8001730:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001734:	4a1c      	ldr	r2, [pc, #112]	; (80017a8 <OF_ResetCoefficients+0x98>)
 8001736:	e9c2 3400 	strd	r3, r4, [r2]
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <OF_ResetCoefficients+0x98>)
 800173c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001740:	4a1a      	ldr	r2, [pc, #104]	; (80017ac <OF_ResetCoefficients+0x9c>)
 8001742:	e9c2 3400 	strd	r3, r4, [r2]
 8001746:	4b19      	ldr	r3, [pc, #100]	; (80017ac <OF_ResetCoefficients+0x9c>)
 8001748:	e9d3 3400 	ldrd	r3, r4, [r3]
 800174c:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <OF_ResetCoefficients+0xa0>)
 800174e:	e9c2 3400 	strd	r3, r4, [r2]
	A[1] = B[1] = C[1] = E[1] = F[1] = 0;
 8001752:	4a13      	ldr	r2, [pc, #76]	; (80017a0 <OF_ResetCoefficients+0x90>)
 8001754:	f04f 0300 	mov.w	r3, #0
 8001758:	f04f 0400 	mov.w	r4, #0
 800175c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001760:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <OF_ResetCoefficients+0x90>)
 8001762:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001766:	4a0f      	ldr	r2, [pc, #60]	; (80017a4 <OF_ResetCoefficients+0x94>)
 8001768:	e9c2 3402 	strd	r3, r4, [r2, #8]
 800176c:	4b0d      	ldr	r3, [pc, #52]	; (80017a4 <OF_ResetCoefficients+0x94>)
 800176e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001772:	4a0d      	ldr	r2, [pc, #52]	; (80017a8 <OF_ResetCoefficients+0x98>)
 8001774:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001778:	4b0b      	ldr	r3, [pc, #44]	; (80017a8 <OF_ResetCoefficients+0x98>)
 800177a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <OF_ResetCoefficients+0x9c>)
 8001780:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001784:	4b09      	ldr	r3, [pc, #36]	; (80017ac <OF_ResetCoefficients+0x9c>)
 8001786:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 800178a:	4a09      	ldr	r2, [pc, #36]	; (80017b0 <OF_ResetCoefficients+0xa0>)
 800178c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	frameIdx = 0;
 8001790:	4b08      	ldr	r3, [pc, #32]	; (80017b4 <OF_ResetCoefficients+0xa4>)
 8001792:	2200      	movs	r2, #0
 8001794:	801a      	strh	r2, [r3, #0]
}
 8001796:	bf00      	nop
 8001798:	46bd      	mov	sp, r7
 800179a:	bc90      	pop	{r4, r7}
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20000630 	.word	0x20000630
 80017a4:	20000620 	.word	0x20000620
 80017a8:	20000610 	.word	0x20000610
 80017ac:	20000600 	.word	0x20000600
 80017b0:	200005f0 	.word	0x200005f0
 80017b4:	2000064c 	.word	0x2000064c

080017b8 <OF_ComputeCoefficients>:

void OF_ComputeCoefficients(Device dev, uint8_t currentFrame[], uint8_t lastFrame[], int32_t idx){
 80017b8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 80017bc:	b085      	sub	sp, #20
 80017be:	af00      	add	r7, sp, #0
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
 80017c6:	4603      	mov	r3, r0
 80017c8:	73fb      	strb	r3, [r7, #15]

	if(fSelect[idx]){
 80017ca:	4a76      	ldr	r2, [pc, #472]	; (80019a4 <OF_ComputeCoefficients+0x1ec>)
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	4413      	add	r3, r2
 80017d0:	781b      	ldrb	r3, [r3, #0]
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	f000 80e0 	beq.w	8001998 <OF_ComputeCoefficients+0x1e0>
		deltaX = (currentFrame[f2[frameIdx]] & ADNS2610_PIXEL_DATA) - (currentFrame[f1[frameIdx]] & ADNS2610_PIXEL_DATA);
 80017d8:	4b73      	ldr	r3, [pc, #460]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 80017da:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017de:	461a      	mov	r2, r3
 80017e0:	4b72      	ldr	r3, [pc, #456]	; (80019ac <OF_ComputeCoefficients+0x1f4>)
 80017e2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 80017e6:	461a      	mov	r2, r3
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	4413      	add	r3, r2
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80017f2:	4b6d      	ldr	r3, [pc, #436]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 80017f4:	f9b3 3000 	ldrsh.w	r3, [r3]
 80017f8:	4619      	mov	r1, r3
 80017fa:	4b6d      	ldr	r3, [pc, #436]	; (80019b0 <OF_ComputeCoefficients+0x1f8>)
 80017fc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001800:	4619      	mov	r1, r3
 8001802:	68bb      	ldr	r3, [r7, #8]
 8001804:	440b      	add	r3, r1
 8001806:	781b      	ldrb	r3, [r3, #0]
 8001808:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	461a      	mov	r2, r3
 8001810:	4b68      	ldr	r3, [pc, #416]	; (80019b4 <OF_ComputeCoefficients+0x1fc>)
 8001812:	601a      	str	r2, [r3, #0]
		deltaY = (currentFrame[f4[frameIdx]] & ADNS2610_PIXEL_DATA) - (currentFrame[f3[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001814:	4b64      	ldr	r3, [pc, #400]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 8001816:	f9b3 3000 	ldrsh.w	r3, [r3]
 800181a:	461a      	mov	r2, r3
 800181c:	4b66      	ldr	r3, [pc, #408]	; (80019b8 <OF_ComputeCoefficients+0x200>)
 800181e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001822:	461a      	mov	r2, r3
 8001824:	68bb      	ldr	r3, [r7, #8]
 8001826:	4413      	add	r3, r2
 8001828:	781b      	ldrb	r3, [r3, #0]
 800182a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800182e:	4b5e      	ldr	r3, [pc, #376]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 8001830:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001834:	4619      	mov	r1, r3
 8001836:	4b61      	ldr	r3, [pc, #388]	; (80019bc <OF_ComputeCoefficients+0x204>)
 8001838:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800183c:	4619      	mov	r1, r3
 800183e:	68bb      	ldr	r3, [r7, #8]
 8001840:	440b      	add	r3, r1
 8001842:	781b      	ldrb	r3, [r3, #0]
 8001844:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	461a      	mov	r2, r3
 800184c:	4b5c      	ldr	r3, [pc, #368]	; (80019c0 <OF_ComputeCoefficients+0x208>)
 800184e:	601a      	str	r2, [r3, #0]
		deltaT = (currentFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001850:	4b55      	ldr	r3, [pc, #340]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 8001852:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001856:	461a      	mov	r2, r3
 8001858:	4b5a      	ldr	r3, [pc, #360]	; (80019c4 <OF_ComputeCoefficients+0x20c>)
 800185a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 800185e:	461a      	mov	r2, r3
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	4413      	add	r3, r2
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800186a:	4b4f      	ldr	r3, [pc, #316]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 800186c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001870:	4619      	mov	r1, r3
 8001872:	4b54      	ldr	r3, [pc, #336]	; (80019c4 <OF_ComputeCoefficients+0x20c>)
 8001874:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001878:	4619      	mov	r1, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	440b      	add	r3, r1
 800187e:	781b      	ldrb	r3, [r3, #0]
 8001880:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001884:	1ad3      	subs	r3, r2, r3
 8001886:	461a      	mov	r2, r3
 8001888:	4b4f      	ldr	r3, [pc, #316]	; (80019c8 <OF_ComputeCoefficients+0x210>)
 800188a:	601a      	str	r2, [r3, #0]

		A[dev] += deltaX * deltaX;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	4a4f      	ldr	r2, [pc, #316]	; (80019cc <OF_ComputeCoefficients+0x214>)
 8001890:	00db      	lsls	r3, r3, #3
 8001892:	4413      	add	r3, r2
 8001894:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001898:	4b46      	ldr	r3, [pc, #280]	; (80019b4 <OF_ComputeCoefficients+0x1fc>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	4845      	ldr	r0, [pc, #276]	; (80019b4 <OF_ComputeCoefficients+0x1fc>)
 800189e:	6800      	ldr	r0, [r0, #0]
 80018a0:	fb00 f303 	mul.w	r3, r0, r3
 80018a4:	469b      	mov	fp, r3
 80018a6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80018aa:	7bf8      	ldrb	r0, [r7, #15]
 80018ac:	eb1b 0301 	adds.w	r3, fp, r1
 80018b0:	eb4c 0402 	adc.w	r4, ip, r2
 80018b4:	4945      	ldr	r1, [pc, #276]	; (80019cc <OF_ComputeCoefficients+0x214>)
 80018b6:	00c2      	lsls	r2, r0, #3
 80018b8:	440a      	add	r2, r1
 80018ba:	e9c2 3400 	strd	r3, r4, [r2]
		B[dev] += deltaY * deltaX;
 80018be:	7bfb      	ldrb	r3, [r7, #15]
 80018c0:	4a43      	ldr	r2, [pc, #268]	; (80019d0 <OF_ComputeCoefficients+0x218>)
 80018c2:	00db      	lsls	r3, r3, #3
 80018c4:	4413      	add	r3, r2
 80018c6:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018ca:	4b3d      	ldr	r3, [pc, #244]	; (80019c0 <OF_ComputeCoefficients+0x208>)
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4839      	ldr	r0, [pc, #228]	; (80019b4 <OF_ComputeCoefficients+0x1fc>)
 80018d0:	6800      	ldr	r0, [r0, #0]
 80018d2:	fb00 f303 	mul.w	r3, r0, r3
 80018d6:	469b      	mov	fp, r3
 80018d8:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 80018dc:	7bf8      	ldrb	r0, [r7, #15]
 80018de:	eb1b 0301 	adds.w	r3, fp, r1
 80018e2:	eb4c 0402 	adc.w	r4, ip, r2
 80018e6:	493a      	ldr	r1, [pc, #232]	; (80019d0 <OF_ComputeCoefficients+0x218>)
 80018e8:	00c2      	lsls	r2, r0, #3
 80018ea:	440a      	add	r2, r1
 80018ec:	e9c2 3400 	strd	r3, r4, [r2]
		C[dev] += deltaT * deltaX;
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	4a38      	ldr	r2, [pc, #224]	; (80019d4 <OF_ComputeCoefficients+0x21c>)
 80018f4:	00db      	lsls	r3, r3, #3
 80018f6:	4413      	add	r3, r2
 80018f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80018fc:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <OF_ComputeCoefficients+0x210>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	482c      	ldr	r0, [pc, #176]	; (80019b4 <OF_ComputeCoefficients+0x1fc>)
 8001902:	6800      	ldr	r0, [r0, #0]
 8001904:	fb00 f303 	mul.w	r3, r0, r3
 8001908:	469b      	mov	fp, r3
 800190a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 800190e:	7bf8      	ldrb	r0, [r7, #15]
 8001910:	eb1b 0301 	adds.w	r3, fp, r1
 8001914:	eb4c 0402 	adc.w	r4, ip, r2
 8001918:	492e      	ldr	r1, [pc, #184]	; (80019d4 <OF_ComputeCoefficients+0x21c>)
 800191a:	00c2      	lsls	r2, r0, #3
 800191c:	440a      	add	r2, r1
 800191e:	e9c2 3400 	strd	r3, r4, [r2]
		E[dev] += deltaY * deltaY;
 8001922:	7bfb      	ldrb	r3, [r7, #15]
 8001924:	4a2c      	ldr	r2, [pc, #176]	; (80019d8 <OF_ComputeCoefficients+0x220>)
 8001926:	00db      	lsls	r3, r3, #3
 8001928:	4413      	add	r3, r2
 800192a:	e9d3 1200 	ldrd	r1, r2, [r3]
 800192e:	4b24      	ldr	r3, [pc, #144]	; (80019c0 <OF_ComputeCoefficients+0x208>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4823      	ldr	r0, [pc, #140]	; (80019c0 <OF_ComputeCoefficients+0x208>)
 8001934:	6800      	ldr	r0, [r0, #0]
 8001936:	fb00 f303 	mul.w	r3, r0, r3
 800193a:	469b      	mov	fp, r3
 800193c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001940:	7bf8      	ldrb	r0, [r7, #15]
 8001942:	eb1b 0301 	adds.w	r3, fp, r1
 8001946:	eb4c 0402 	adc.w	r4, ip, r2
 800194a:	4923      	ldr	r1, [pc, #140]	; (80019d8 <OF_ComputeCoefficients+0x220>)
 800194c:	00c2      	lsls	r2, r0, #3
 800194e:	440a      	add	r2, r1
 8001950:	e9c2 3400 	strd	r3, r4, [r2]
		F[dev] += deltaT * deltaY;
 8001954:	7bfb      	ldrb	r3, [r7, #15]
 8001956:	4a21      	ldr	r2, [pc, #132]	; (80019dc <OF_ComputeCoefficients+0x224>)
 8001958:	00db      	lsls	r3, r3, #3
 800195a:	4413      	add	r3, r2
 800195c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001960:	4b19      	ldr	r3, [pc, #100]	; (80019c8 <OF_ComputeCoefficients+0x210>)
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4816      	ldr	r0, [pc, #88]	; (80019c0 <OF_ComputeCoefficients+0x208>)
 8001966:	6800      	ldr	r0, [r0, #0]
 8001968:	fb00 f303 	mul.w	r3, r0, r3
 800196c:	469b      	mov	fp, r3
 800196e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001972:	7bf8      	ldrb	r0, [r7, #15]
 8001974:	eb1b 0301 	adds.w	r3, fp, r1
 8001978:	eb4c 0402 	adc.w	r4, ip, r2
 800197c:	4917      	ldr	r1, [pc, #92]	; (80019dc <OF_ComputeCoefficients+0x224>)
 800197e:	00c2      	lsls	r2, r0, #3
 8001980:	440a      	add	r2, r1
 8001982:	e9c2 3400 	strd	r3, r4, [r2]

		frameIdx++;
 8001986:	4b08      	ldr	r3, [pc, #32]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 8001988:	f9b3 3000 	ldrsh.w	r3, [r3]
 800198c:	b29b      	uxth	r3, r3
 800198e:	3301      	adds	r3, #1
 8001990:	b29b      	uxth	r3, r3
 8001992:	b21a      	sxth	r2, r3
 8001994:	4b04      	ldr	r3, [pc, #16]	; (80019a8 <OF_ComputeCoefficients+0x1f0>)
 8001996:	801a      	strh	r2, [r3, #0]
	}
}
 8001998:	bf00      	nop
 800199a:	3714      	adds	r7, #20
 800199c:	46bd      	mov	sp, r7
 800199e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 80019a2:	4770      	bx	lr
 80019a4:	080055f0 	.word	0x080055f0
 80019a8:	2000064c 	.word	0x2000064c
 80019ac:	08004ff0 	.word	0x08004ff0
 80019b0:	08004df0 	.word	0x08004df0
 80019b4:	20000640 	.word	0x20000640
 80019b8:	080053f0 	.word	0x080053f0
 80019bc:	080051f0 	.word	0x080051f0
 80019c0:	20000644 	.word	0x20000644
 80019c4:	08004bf0 	.word	0x08004bf0
 80019c8:	20000648 	.word	0x20000648
 80019cc:	200005f0 	.word	0x200005f0
 80019d0:	20000600 	.word	0x20000600
 80019d4:	20000610 	.word	0x20000610
 80019d8:	20000620 	.word	0x20000620
 80019dc:	20000630 	.word	0x20000630

080019e0 <OF_Compute>:

void OF_Compute(Device dev, int32_t* ofX, int32_t* ofY){
 80019e0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80019e4:	b088      	sub	sp, #32
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	4603      	mov	r3, r0
 80019ea:	60b9      	str	r1, [r7, #8]
 80019ec:	607a      	str	r2, [r7, #4]
 80019ee:	73fb      	strb	r3, [r7, #15]
	int64_t num, den;

	den = A[dev] * E[dev] - B[dev] * B[dev];
 80019f0:	7bfb      	ldrb	r3, [r7, #15]
 80019f2:	4a68      	ldr	r2, [pc, #416]	; (8001b94 <OF_Compute+0x1b4>)
 80019f4:	00db      	lsls	r3, r3, #3
 80019f6:	4413      	add	r3, r2
 80019f8:	e9d3 1200 	ldrd	r1, r2, [r3]
 80019fc:	7bfb      	ldrb	r3, [r7, #15]
 80019fe:	4866      	ldr	r0, [pc, #408]	; (8001b98 <OF_Compute+0x1b8>)
 8001a00:	00db      	lsls	r3, r3, #3
 8001a02:	4403      	add	r3, r0
 8001a04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a08:	fb03 f502 	mul.w	r5, r3, r2
 8001a0c:	fb01 f004 	mul.w	r0, r1, r4
 8001a10:	4428      	add	r0, r5
 8001a12:	fba1 5603 	umull	r5, r6, r1, r3
 8001a16:	1983      	adds	r3, r0, r6
 8001a18:	461e      	mov	r6, r3
 8001a1a:	7bfb      	ldrb	r3, [r7, #15]
 8001a1c:	4a5f      	ldr	r2, [pc, #380]	; (8001b9c <OF_Compute+0x1bc>)
 8001a1e:	00db      	lsls	r3, r3, #3
 8001a20:	4413      	add	r3, r2
 8001a22:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a26:	7bfb      	ldrb	r3, [r7, #15]
 8001a28:	485c      	ldr	r0, [pc, #368]	; (8001b9c <OF_Compute+0x1bc>)
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	4403      	add	r3, r0
 8001a2e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a32:	fb03 fc02 	mul.w	ip, r3, r2
 8001a36:	fb01 f004 	mul.w	r0, r1, r4
 8001a3a:	4460      	add	r0, ip
 8001a3c:	fba1 bc03 	umull	fp, ip, r1, r3
 8001a40:	eb00 020c 	add.w	r2, r0, ip
 8001a44:	4694      	mov	ip, r2
 8001a46:	462b      	mov	r3, r5
 8001a48:	4634      	mov	r4, r6
 8001a4a:	ebb3 030b 	subs.w	r3, r3, fp
 8001a4e:	eb64 040c 	sbc.w	r4, r4, ip
 8001a52:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(den > 0){
 8001a56:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	f174 0300 	sbcs.w	r3, r4, #0
 8001a60:	f2c0 8089 	blt.w	8001b76 <OF_Compute+0x196>
		num = ((C[dev]*E[dev]) - (B[dev]*F[dev])) << bitsOfResolution;
 8001a64:	7bfb      	ldrb	r3, [r7, #15]
 8001a66:	4a4e      	ldr	r2, [pc, #312]	; (8001ba0 <OF_Compute+0x1c0>)
 8001a68:	00db      	lsls	r3, r3, #3
 8001a6a:	4413      	add	r3, r2
 8001a6c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a70:	7bfb      	ldrb	r3, [r7, #15]
 8001a72:	4849      	ldr	r0, [pc, #292]	; (8001b98 <OF_Compute+0x1b8>)
 8001a74:	00db      	lsls	r3, r3, #3
 8001a76:	4403      	add	r3, r0
 8001a78:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001a7c:	fb03 f502 	mul.w	r5, r3, r2
 8001a80:	fb01 f004 	mul.w	r0, r1, r4
 8001a84:	4428      	add	r0, r5
 8001a86:	fba1 5603 	umull	r5, r6, r1, r3
 8001a8a:	1983      	adds	r3, r0, r6
 8001a8c:	461e      	mov	r6, r3
 8001a8e:	7bfb      	ldrb	r3, [r7, #15]
 8001a90:	4a42      	ldr	r2, [pc, #264]	; (8001b9c <OF_Compute+0x1bc>)
 8001a92:	00db      	lsls	r3, r3, #3
 8001a94:	4413      	add	r3, r2
 8001a96:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001a9a:	7bfb      	ldrb	r3, [r7, #15]
 8001a9c:	4841      	ldr	r0, [pc, #260]	; (8001ba4 <OF_Compute+0x1c4>)
 8001a9e:	00db      	lsls	r3, r3, #3
 8001aa0:	4403      	add	r3, r0
 8001aa2:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aa6:	fb03 fc02 	mul.w	ip, r3, r2
 8001aaa:	fb01 f004 	mul.w	r0, r1, r4
 8001aae:	4460      	add	r0, ip
 8001ab0:	fba1 3403 	umull	r3, r4, r1, r3
 8001ab4:	1902      	adds	r2, r0, r4
 8001ab6:	4614      	mov	r4, r2
 8001ab8:	4629      	mov	r1, r5
 8001aba:	4632      	mov	r2, r6
 8001abc:	1ac9      	subs	r1, r1, r3
 8001abe:	eb62 0204 	sbc.w	r2, r2, r4
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f04f 0400 	mov.w	r4, #0
 8001aca:	0314      	lsls	r4, r2, #12
 8001acc:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 8001ad0:	030b      	lsls	r3, r1, #12
 8001ad2:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofX = num / den;
 8001ad6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ada:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001ade:	f7fe fbc7 	bl	8000270 <__aeabi_ldivmod>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	460c      	mov	r4, r1
 8001ae6:	461a      	mov	r2, r3
 8001ae8:	68bb      	ldr	r3, [r7, #8]
 8001aea:	601a      	str	r2, [r3, #0]
		num = ((A[dev]*F[dev]) - (C[dev]*B[dev])) << bitsOfResolution;
 8001aec:	7bfb      	ldrb	r3, [r7, #15]
 8001aee:	4a29      	ldr	r2, [pc, #164]	; (8001b94 <OF_Compute+0x1b4>)
 8001af0:	00db      	lsls	r3, r3, #3
 8001af2:	4413      	add	r3, r2
 8001af4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001af8:	7bfb      	ldrb	r3, [r7, #15]
 8001afa:	482a      	ldr	r0, [pc, #168]	; (8001ba4 <OF_Compute+0x1c4>)
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	4403      	add	r3, r0
 8001b00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b04:	fb03 f502 	mul.w	r5, r3, r2
 8001b08:	fb01 f004 	mul.w	r0, r1, r4
 8001b0c:	4428      	add	r0, r5
 8001b0e:	fba1 5603 	umull	r5, r6, r1, r3
 8001b12:	1983      	adds	r3, r0, r6
 8001b14:	461e      	mov	r6, r3
 8001b16:	7bfb      	ldrb	r3, [r7, #15]
 8001b18:	4a21      	ldr	r2, [pc, #132]	; (8001ba0 <OF_Compute+0x1c0>)
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001b22:	7bfb      	ldrb	r3, [r7, #15]
 8001b24:	481d      	ldr	r0, [pc, #116]	; (8001b9c <OF_Compute+0x1bc>)
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4403      	add	r3, r0
 8001b2a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001b2e:	fb03 fc02 	mul.w	ip, r3, r2
 8001b32:	fb01 f004 	mul.w	r0, r1, r4
 8001b36:	4460      	add	r0, ip
 8001b38:	fba1 3403 	umull	r3, r4, r1, r3
 8001b3c:	1902      	adds	r2, r0, r4
 8001b3e:	4614      	mov	r4, r2
 8001b40:	4629      	mov	r1, r5
 8001b42:	4632      	mov	r2, r6
 8001b44:	1ac9      	subs	r1, r1, r3
 8001b46:	eb62 0204 	sbc.w	r2, r2, r4
 8001b4a:	f04f 0300 	mov.w	r3, #0
 8001b4e:	f04f 0400 	mov.w	r4, #0
 8001b52:	0314      	lsls	r4, r2, #12
 8001b54:	ea44 5411 	orr.w	r4, r4, r1, lsr #20
 8001b58:	030b      	lsls	r3, r1, #12
 8001b5a:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofY = num / den;
 8001b5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001b62:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8001b66:	f7fe fb83 	bl	8000270 <__aeabi_ldivmod>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	460c      	mov	r4, r1
 8001b6e:	461a      	mov	r2, r3
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	601a      	str	r2, [r3, #0]
 8001b74:	e006      	b.n	8001b84 <OF_Compute+0x1a4>
	}
	else{
		*ofX = *ofY = 0;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681a      	ldr	r2, [r3, #0]
 8001b80:	68bb      	ldr	r3, [r7, #8]
 8001b82:	601a      	str	r2, [r3, #0]
	}

	OF_ResetCoefficients();
 8001b84:	f7ff fdc4 	bl	8001710 <OF_ResetCoefficients>
}
 8001b88:	bf00      	nop
 8001b8a:	3720      	adds	r7, #32
 8001b8c:	46bd      	mov	sp, r7
 8001b8e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001b92:	bf00      	nop
 8001b94:	200005f0 	.word	0x200005f0
 8001b98:	20000620 	.word	0x20000620
 8001b9c:	20000600 	.word	0x20000600
 8001ba0:	20000610 	.word	0x20000610
 8001ba4:	20000630 	.word	0x20000630

08001ba8 <LL_AHB2_GRP1_EnableClock>:
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001bb0:	4b08      	ldr	r3, [pc, #32]	; (8001bd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bb4:	4907      	ldr	r1, [pc, #28]	; (8001bd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001bbc:	4b05      	ldr	r3, [pc, #20]	; (8001bd4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001bbe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bc6:	68fb      	ldr	r3, [r7, #12]
}
 8001bc8:	bf00      	nop
 8001bca:	3714      	adds	r7, #20
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr
 8001bd4:	40021000 	.word	0x40021000

08001bd8 <LL_APB1_GRP1_EnableClock>:
{
 8001bd8:	b480      	push	{r7}
 8001bda:	b085      	sub	sp, #20
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001be0:	4b08      	ldr	r3, [pc, #32]	; (8001c04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001be2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001be4:	4907      	ldr	r1, [pc, #28]	; (8001c04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001bec:	4b05      	ldr	r3, [pc, #20]	; (8001c04 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001bee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
}
 8001bf8:	bf00      	nop
 8001bfa:	3714      	adds	r7, #20
 8001bfc:	46bd      	mov	sp, r7
 8001bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c02:	4770      	bx	lr
 8001c04:	40021000 	.word	0x40021000

08001c08 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001c08:	b480      	push	{r7}
 8001c0a:	b083      	sub	sp, #12
 8001c0c:	af00      	add	r7, sp, #0
 8001c0e:	6078      	str	r0, [r7, #4]
 8001c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	685b      	ldr	r3, [r3, #4]
 8001c16:	f023 0210 	bic.w	r2, r3, #16
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	605a      	str	r2, [r3, #4]
}
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f023 0208 	bic.w	r2, r3, #8
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	605a      	str	r2, [r3, #4]
}
 8001c42:	bf00      	nop
 8001c44:	370c      	adds	r7, #12
 8001c46:	46bd      	mov	sp, r7
 8001c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4c:	4770      	bx	lr
	...

08001c50 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	; 0x40
 8001c54:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	2228      	movs	r2, #40	; 0x28
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f001 feb0 	bl	80039c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c64:	463b      	mov	r3, r7
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]
 8001c72:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001c74:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001c78:	f7ff ffae 	bl	8001bd8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001c7c:	2004      	movs	r0, #4
 8001c7e:	f7ff ff93 	bl	8001ba8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001c82:	2002      	movs	r0, #2
 8001c84:	f7ff ff90 	bl	8001ba8 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001c88:	230c      	movs	r3, #12
 8001c8a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001c90:	2303      	movs	r3, #3
 8001c92:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001c94:	2300      	movs	r3, #0
 8001c96:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001c9c:	2305      	movs	r3, #5
 8001c9e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ca0:	463b      	mov	r3, r7
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	481e      	ldr	r0, [pc, #120]	; (8001d20 <MX_SPI2_Init+0xd0>)
 8001ca6:	f000 ffae 	bl	8002c06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001caa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001cc0:	2305      	movs	r3, #5
 8001cc2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001cc4:	463b      	mov	r3, r7
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4816      	ldr	r0, [pc, #88]	; (8001d24 <MX_SPI2_Init+0xd4>)
 8001cca:	f000 ff9c 	bl	8002c06 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8001cd2:	f44f 7382 	mov.w	r3, #260	; 0x104
 8001cd6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001cd8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001cdc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001cde:	2302      	movs	r3, #2
 8001ce0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8001ce6:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001cea:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001cec:	2320      	movs	r3, #32
 8001cee:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001cf8:	2307      	movs	r3, #7
 8001cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001cfc:	f107 0318 	add.w	r3, r7, #24
 8001d00:	4619      	mov	r1, r3
 8001d02:	4809      	ldr	r0, [pc, #36]	; (8001d28 <MX_SPI2_Init+0xd8>)
 8001d04:	f001 fbcd 	bl	80034a2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001d08:	2100      	movs	r1, #0
 8001d0a:	4807      	ldr	r0, [pc, #28]	; (8001d28 <MX_SPI2_Init+0xd8>)
 8001d0c:	f7ff ff7c 	bl	8001c08 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001d10:	4805      	ldr	r0, [pc, #20]	; (8001d28 <MX_SPI2_Init+0xd8>)
 8001d12:	f7ff ff8c 	bl	8001c2e <LL_SPI_DisableNSSPulseMgt>

}
 8001d16:	bf00      	nop
 8001d18:	3740      	adds	r7, #64	; 0x40
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	48000800 	.word	0x48000800
 8001d24:	48000400 	.word	0x48000400
 8001d28:	40003800 	.word	0x40003800

08001d2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001d30:	bf00      	nop
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <HardFault_Handler+0x4>

08001d40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <MemManage_Handler+0x4>

08001d46 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d4a:	e7fe      	b.n	8001d4a <BusFault_Handler+0x4>

08001d4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d50:	e7fe      	b.n	8001d50 <UsageFault_Handler+0x4>

08001d52 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001d52:	b480      	push	{r7}
 8001d54:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001d56:	bf00      	nop
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5e:	4770      	bx	lr

08001d60 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d64:	bf00      	nop
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001d6e:	b480      	push	{r7}
 8001d70:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001d72:	bf00      	nop
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d80:	bf00      	nop
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr

08001d8a <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001d8a:	b580      	push	{r7, lr}
 8001d8c:	b086      	sub	sp, #24
 8001d8e:	af00      	add	r7, sp, #0
 8001d90:	60f8      	str	r0, [r7, #12]
 8001d92:	60b9      	str	r1, [r7, #8]
 8001d94:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d96:	2300      	movs	r3, #0
 8001d98:	617b      	str	r3, [r7, #20]
 8001d9a:	e00a      	b.n	8001db2 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001d9c:	f000 fade 	bl	800235c <__io_getchar>
 8001da0:	4601      	mov	r1, r0
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	1c5a      	adds	r2, r3, #1
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	b2ca      	uxtb	r2, r1
 8001daa:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dac:	697b      	ldr	r3, [r7, #20]
 8001dae:	3301      	adds	r3, #1
 8001db0:	617b      	str	r3, [r7, #20]
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	429a      	cmp	r2, r3
 8001db8:	dbf0      	blt.n	8001d9c <_read+0x12>
	}

return len;
 8001dba:	687b      	ldr	r3, [r7, #4]
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3718      	adds	r7, #24
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b086      	sub	sp, #24
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	60f8      	str	r0, [r7, #12]
 8001dcc:	60b9      	str	r1, [r7, #8]
 8001dce:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	617b      	str	r3, [r7, #20]
 8001dd4:	e009      	b.n	8001dea <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001dd6:	68bb      	ldr	r3, [r7, #8]
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	60ba      	str	r2, [r7, #8]
 8001ddc:	781b      	ldrb	r3, [r3, #0]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 fa9e 	bl	8002320 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	3301      	adds	r3, #1
 8001de8:	617b      	str	r3, [r7, #20]
 8001dea:	697a      	ldr	r2, [r7, #20]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	429a      	cmp	r2, r3
 8001df0:	dbf1      	blt.n	8001dd6 <_write+0x12>
	}
	return len;
 8001df2:	687b      	ldr	r3, [r7, #4]
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3718      	adds	r7, #24
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <_close>:

int _close(int file)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b083      	sub	sp, #12
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
	return -1;
 8001e04:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr

08001e14 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
 8001e1c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001e24:	605a      	str	r2, [r3, #4]
	return 0;
 8001e26:	2300      	movs	r3, #0
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr

08001e34 <_isatty>:

int _isatty(int file)
{
 8001e34:	b480      	push	{r7}
 8001e36:	b083      	sub	sp, #12
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
	return 1;
 8001e3c:	2301      	movs	r3, #1
}
 8001e3e:	4618      	mov	r0, r3
 8001e40:	370c      	adds	r7, #12
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr

08001e4a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001e4a:	b480      	push	{r7}
 8001e4c:	b085      	sub	sp, #20
 8001e4e:	af00      	add	r7, sp, #0
 8001e50:	60f8      	str	r0, [r7, #12]
 8001e52:	60b9      	str	r1, [r7, #8]
 8001e54:	607a      	str	r2, [r7, #4]
	return 0;
 8001e56:	2300      	movs	r3, #0
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3714      	adds	r7, #20
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001e6c:	4a14      	ldr	r2, [pc, #80]	; (8001ec0 <_sbrk+0x5c>)
 8001e6e:	4b15      	ldr	r3, [pc, #84]	; (8001ec4 <_sbrk+0x60>)
 8001e70:	1ad3      	subs	r3, r2, r3
 8001e72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001e74:	697b      	ldr	r3, [r7, #20]
 8001e76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001e78:	4b13      	ldr	r3, [pc, #76]	; (8001ec8 <_sbrk+0x64>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d102      	bne.n	8001e86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001e80:	4b11      	ldr	r3, [pc, #68]	; (8001ec8 <_sbrk+0x64>)
 8001e82:	4a12      	ldr	r2, [pc, #72]	; (8001ecc <_sbrk+0x68>)
 8001e84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001e86:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <_sbrk+0x64>)
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4413      	add	r3, r2
 8001e8e:	693a      	ldr	r2, [r7, #16]
 8001e90:	429a      	cmp	r2, r3
 8001e92:	d207      	bcs.n	8001ea4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001e94:	f001 fd6c 	bl	8003970 <__errno>
 8001e98:	4602      	mov	r2, r0
 8001e9a:	230c      	movs	r3, #12
 8001e9c:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ea2:	e009      	b.n	8001eb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ea4:	4b08      	ldr	r3, [pc, #32]	; (8001ec8 <_sbrk+0x64>)
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001eaa:	4b07      	ldr	r3, [pc, #28]	; (8001ec8 <_sbrk+0x64>)
 8001eac:	681a      	ldr	r2, [r3, #0]
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <_sbrk+0x64>)
 8001eb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001eb6:	68fb      	ldr	r3, [r7, #12]
}
 8001eb8:	4618      	mov	r0, r3
 8001eba:	3718      	adds	r7, #24
 8001ebc:	46bd      	mov	sp, r7
 8001ebe:	bd80      	pop	{r7, pc}
 8001ec0:	20018000 	.word	0x20018000
 8001ec4:	00000400 	.word	0x00000400
 8001ec8:	20000650 	.word	0x20000650
 8001ecc:	20000668 	.word	0x20000668

08001ed0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001ed4:	4b17      	ldr	r3, [pc, #92]	; (8001f34 <SystemInit+0x64>)
 8001ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eda:	4a16      	ldr	r2, [pc, #88]	; (8001f34 <SystemInit+0x64>)
 8001edc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001ee0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001ee4:	4b14      	ldr	r3, [pc, #80]	; (8001f38 <SystemInit+0x68>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4a13      	ldr	r2, [pc, #76]	; (8001f38 <SystemInit+0x68>)
 8001eea:	f043 0301 	orr.w	r3, r3, #1
 8001eee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001ef0:	4b11      	ldr	r3, [pc, #68]	; (8001f38 <SystemInit+0x68>)
 8001ef2:	2200      	movs	r2, #0
 8001ef4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001ef6:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <SystemInit+0x68>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a0f      	ldr	r2, [pc, #60]	; (8001f38 <SystemInit+0x68>)
 8001efc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001f00:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001f04:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001f06:	4b0c      	ldr	r3, [pc, #48]	; (8001f38 <SystemInit+0x68>)
 8001f08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001f0c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001f0e:	4b0a      	ldr	r3, [pc, #40]	; (8001f38 <SystemInit+0x68>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a09      	ldr	r2, [pc, #36]	; (8001f38 <SystemInit+0x68>)
 8001f14:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001f18:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001f1a:	4b07      	ldr	r3, [pc, #28]	; (8001f38 <SystemInit+0x68>)
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001f20:	4b04      	ldr	r3, [pc, #16]	; (8001f34 <SystemInit+0x64>)
 8001f22:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001f26:	609a      	str	r2, [r3, #8]
#endif
}
 8001f28:	bf00      	nop
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
 8001f32:	bf00      	nop
 8001f34:	e000ed00 	.word	0xe000ed00
 8001f38:	40021000 	.word	0x40021000

08001f3c <LL_APB2_GRP1_EnableClock>:
{
 8001f3c:	b480      	push	{r7}
 8001f3e:	b085      	sub	sp, #20
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001f44:	4b08      	ldr	r3, [pc, #32]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f46:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f48:	4907      	ldr	r1, [pc, #28]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001f50:	4b05      	ldr	r3, [pc, #20]	; (8001f68 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001f52:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	4013      	ands	r3, r2
 8001f58:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001f5a:	68fb      	ldr	r3, [r7, #12]
}
 8001f5c:	bf00      	nop
 8001f5e:	3714      	adds	r7, #20
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000

08001f6c <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	b083      	sub	sp, #12
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	601a      	str	r2, [r3, #0]
}
 8001f80:	bf00      	nop
 8001f82:	370c      	adds	r7, #12
 8001f84:	46bd      	mov	sp, r7
 8001f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f8a:	4770      	bx	lr

08001f8c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001f8c:	b480      	push	{r7}
 8001f8e:	b083      	sub	sp, #12
 8001f90:	af00      	add	r7, sp, #0
 8001f92:	6078      	str	r0, [r7, #4]
 8001f94:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001f9e:	f023 0307 	bic.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	431a      	orrs	r2, r3
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	609a      	str	r2, [r3, #8]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb4:	4770      	bx	lr

08001fb6 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001fb6:	b480      	push	{r7}
 8001fb8:	b083      	sub	sp, #12
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	431a      	orrs	r2, r3
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	605a      	str	r2, [r3, #4]
}
 8001fd0:	bf00      	nop
 8001fd2:	370c      	adds	r7, #12
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	b083      	sub	sp, #12
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	685b      	ldr	r3, [r3, #4]
 8001fea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001fee:	683b      	ldr	r3, [r7, #0]
 8001ff0:	431a      	orrs	r2, r3
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	605a      	str	r2, [r3, #4]
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr

08002002 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002002:	b480      	push	{r7}
 8002004:	b083      	sub	sp, #12
 8002006:	af00      	add	r7, sp, #0
 8002008:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	689b      	ldr	r3, [r3, #8]
 800200e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	609a      	str	r2, [r3, #8]
}
 8002016:	bf00      	nop
 8002018:	370c      	adds	r7, #12
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b086      	sub	sp, #24
 8002028:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800202a:	1d3b      	adds	r3, r7, #4
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002038:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800203c:	f7ff ff7e 	bl	8001f3c <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8002040:	230f      	movs	r3, #15
 8002042:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8002044:	2300      	movs	r3, #0
 8002046:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 8002048:	f44f 73c8 	mov.w	r3, #400	; 0x190
 800204c:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800204e:	2300      	movs	r3, #0
 8002050:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8002056:	1d3b      	adds	r3, r7, #4
 8002058:	4619      	mov	r1, r3
 800205a:	480c      	ldr	r0, [pc, #48]	; (800208c <MX_TIM1_Init+0x68>)
 800205c:	f001 faaa 	bl	80035b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002060:	480a      	ldr	r0, [pc, #40]	; (800208c <MX_TIM1_Init+0x68>)
 8002062:	f7ff ff83 	bl	8001f6c <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002066:	2100      	movs	r1, #0
 8002068:	4808      	ldr	r0, [pc, #32]	; (800208c <MX_TIM1_Init+0x68>)
 800206a:	f7ff ff8f 	bl	8001f8c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 800206e:	2100      	movs	r1, #0
 8002070:	4806      	ldr	r0, [pc, #24]	; (800208c <MX_TIM1_Init+0x68>)
 8002072:	f7ff ffa0 	bl	8001fb6 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8002076:	2100      	movs	r1, #0
 8002078:	4804      	ldr	r0, [pc, #16]	; (800208c <MX_TIM1_Init+0x68>)
 800207a:	f7ff ffaf 	bl	8001fdc <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 800207e:	4803      	ldr	r0, [pc, #12]	; (800208c <MX_TIM1_Init+0x68>)
 8002080:	f7ff ffbf 	bl	8002002 <LL_TIM_DisableMasterSlaveMode>

}
 8002084:	bf00      	nop
 8002086:	3718      	adds	r7, #24
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40012c00 	.word	0x40012c00

08002090 <__NVIC_GetPriorityGrouping>:
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002094:	4b04      	ldr	r3, [pc, #16]	; (80020a8 <__NVIC_GetPriorityGrouping+0x18>)
 8002096:	68db      	ldr	r3, [r3, #12]
 8002098:	0a1b      	lsrs	r3, r3, #8
 800209a:	f003 0307 	and.w	r3, r3, #7
}
 800209e:	4618      	mov	r0, r3
 80020a0:	46bd      	mov	sp, r7
 80020a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a6:	4770      	bx	lr
 80020a8:	e000ed00 	.word	0xe000ed00

080020ac <__NVIC_EnableIRQ>:
{
 80020ac:	b480      	push	{r7}
 80020ae:	b083      	sub	sp, #12
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	4603      	mov	r3, r0
 80020b4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	db0b      	blt.n	80020d6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80020be:	79fb      	ldrb	r3, [r7, #7]
 80020c0:	f003 021f 	and.w	r2, r3, #31
 80020c4:	4907      	ldr	r1, [pc, #28]	; (80020e4 <__NVIC_EnableIRQ+0x38>)
 80020c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020ca:	095b      	lsrs	r3, r3, #5
 80020cc:	2001      	movs	r0, #1
 80020ce:	fa00 f202 	lsl.w	r2, r0, r2
 80020d2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80020d6:	bf00      	nop
 80020d8:	370c      	adds	r7, #12
 80020da:	46bd      	mov	sp, r7
 80020dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e0:	4770      	bx	lr
 80020e2:	bf00      	nop
 80020e4:	e000e100 	.word	0xe000e100

080020e8 <__NVIC_SetPriority>:
{
 80020e8:	b480      	push	{r7}
 80020ea:	b083      	sub	sp, #12
 80020ec:	af00      	add	r7, sp, #0
 80020ee:	4603      	mov	r3, r0
 80020f0:	6039      	str	r1, [r7, #0]
 80020f2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80020f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	db0a      	blt.n	8002112 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	b2da      	uxtb	r2, r3
 8002100:	490c      	ldr	r1, [pc, #48]	; (8002134 <__NVIC_SetPriority+0x4c>)
 8002102:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002106:	0112      	lsls	r2, r2, #4
 8002108:	b2d2      	uxtb	r2, r2
 800210a:	440b      	add	r3, r1
 800210c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002110:	e00a      	b.n	8002128 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	b2da      	uxtb	r2, r3
 8002116:	4908      	ldr	r1, [pc, #32]	; (8002138 <__NVIC_SetPriority+0x50>)
 8002118:	79fb      	ldrb	r3, [r7, #7]
 800211a:	f003 030f 	and.w	r3, r3, #15
 800211e:	3b04      	subs	r3, #4
 8002120:	0112      	lsls	r2, r2, #4
 8002122:	b2d2      	uxtb	r2, r2
 8002124:	440b      	add	r3, r1
 8002126:	761a      	strb	r2, [r3, #24]
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr
 8002134:	e000e100 	.word	0xe000e100
 8002138:	e000ed00 	.word	0xe000ed00

0800213c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800213c:	b480      	push	{r7}
 800213e:	b089      	sub	sp, #36	; 0x24
 8002140:	af00      	add	r7, sp, #0
 8002142:	60f8      	str	r0, [r7, #12]
 8002144:	60b9      	str	r1, [r7, #8]
 8002146:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	f003 0307 	and.w	r3, r3, #7
 800214e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002150:	69fb      	ldr	r3, [r7, #28]
 8002152:	f1c3 0307 	rsb	r3, r3, #7
 8002156:	2b04      	cmp	r3, #4
 8002158:	bf28      	it	cs
 800215a:	2304      	movcs	r3, #4
 800215c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	3304      	adds	r3, #4
 8002162:	2b06      	cmp	r3, #6
 8002164:	d902      	bls.n	800216c <NVIC_EncodePriority+0x30>
 8002166:	69fb      	ldr	r3, [r7, #28]
 8002168:	3b03      	subs	r3, #3
 800216a:	e000      	b.n	800216e <NVIC_EncodePriority+0x32>
 800216c:	2300      	movs	r3, #0
 800216e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002170:	f04f 32ff 	mov.w	r2, #4294967295
 8002174:	69bb      	ldr	r3, [r7, #24]
 8002176:	fa02 f303 	lsl.w	r3, r2, r3
 800217a:	43da      	mvns	r2, r3
 800217c:	68bb      	ldr	r3, [r7, #8]
 800217e:	401a      	ands	r2, r3
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002184:	f04f 31ff 	mov.w	r1, #4294967295
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	fa01 f303 	lsl.w	r3, r1, r3
 800218e:	43d9      	mvns	r1, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002194:	4313      	orrs	r3, r2
         );
}
 8002196:	4618      	mov	r0, r3
 8002198:	3724      	adds	r7, #36	; 0x24
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
	...

080021a4 <LL_AHB1_GRP1_EnableClock>:
{
 80021a4:	b480      	push	{r7}
 80021a6:	b085      	sub	sp, #20
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80021ac:	4b08      	ldr	r3, [pc, #32]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021b0:	4907      	ldr	r1, [pc, #28]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80021b8:	4b05      	ldr	r3, [pc, #20]	; (80021d0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80021ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4013      	ands	r3, r2
 80021c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021c2:	68fb      	ldr	r3, [r7, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr
 80021d0:	40021000 	.word	0x40021000

080021d4 <LL_AHB2_GRP1_EnableClock>:
{
 80021d4:	b480      	push	{r7}
 80021d6:	b085      	sub	sp, #20
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80021dc:	4b08      	ldr	r3, [pc, #32]	; (8002200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80021de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021e0:	4907      	ldr	r1, [pc, #28]	; (8002200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	4313      	orrs	r3, r2
 80021e6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80021e8:	4b05      	ldr	r3, [pc, #20]	; (8002200 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80021ea:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4013      	ands	r3, r2
 80021f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80021f2:	68fb      	ldr	r3, [r7, #12]
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	40021000 	.word	0x40021000

08002204 <LL_APB1_GRP1_EnableClock>:
{
 8002204:	b480      	push	{r7}
 8002206:	b085      	sub	sp, #20
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800220c:	4b08      	ldr	r3, [pc, #32]	; (8002230 <LL_APB1_GRP1_EnableClock+0x2c>)
 800220e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002210:	4907      	ldr	r1, [pc, #28]	; (8002230 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4313      	orrs	r3, r2
 8002216:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002218:	4b05      	ldr	r3, [pc, #20]	; (8002230 <LL_APB1_GRP1_EnableClock+0x2c>)
 800221a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	4013      	ands	r3, r2
 8002220:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002222:	68fb      	ldr	r3, [r7, #12]
}
 8002224:	bf00      	nop
 8002226:	3714      	adds	r7, #20
 8002228:	46bd      	mov	sp, r7
 800222a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222e:	4770      	bx	lr
 8002230:	40021000 	.word	0x40021000

08002234 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002234:	b480      	push	{r7}
 8002236:	b083      	sub	sp, #12
 8002238:	af00      	add	r7, sp, #0
 800223a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f043 0201 	orr.w	r2, r3, #1
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	601a      	str	r2, [r3, #0]
}
 8002248:	bf00      	nop
 800224a:	370c      	adds	r7, #12
 800224c:	46bd      	mov	sp, r7
 800224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002252:	4770      	bx	lr

08002254 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002254:	b480      	push	{r7}
 8002256:	b083      	sub	sp, #12
 8002258:	af00      	add	r7, sp, #0
 800225a:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	609a      	str	r2, [r3, #8]
}
 8002274:	bf00      	nop
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr

08002280 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b08e      	sub	sp, #56	; 0x38
 8002284:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002286:	f107 031c 	add.w	r3, r7, #28
 800228a:	2200      	movs	r2, #0
 800228c:	601a      	str	r2, [r3, #0]
 800228e:	605a      	str	r2, [r3, #4]
 8002290:	609a      	str	r2, [r3, #8]
 8002292:	60da      	str	r2, [r3, #12]
 8002294:	611a      	str	r2, [r3, #16]
 8002296:	615a      	str	r2, [r3, #20]
 8002298:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	2200      	movs	r2, #0
 800229e:	601a      	str	r2, [r3, #0]
 80022a0:	605a      	str	r2, [r3, #4]
 80022a2:	609a      	str	r2, [r3, #8]
 80022a4:	60da      	str	r2, [r3, #12]
 80022a6:	611a      	str	r2, [r3, #16]
 80022a8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80022aa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80022ae:	f7ff ffa9 	bl	8002204 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80022b2:	2001      	movs	r0, #1
 80022b4:	f7ff ff8e 	bl	80021d4 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80022b8:	230c      	movs	r3, #12
 80022ba:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022bc:	2302      	movs	r3, #2
 80022be:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022c0:	2303      	movs	r3, #3
 80022c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022c4:	2300      	movs	r3, #0
 80022c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022c8:	2300      	movs	r3, #0
 80022ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80022cc:	2307      	movs	r3, #7
 80022ce:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022d0:	1d3b      	adds	r3, r7, #4
 80022d2:	4619      	mov	r1, r3
 80022d4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022d8:	f000 fc95 	bl	8002c06 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80022dc:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80022e0:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80022e2:	2300      	movs	r3, #0
 80022e4:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80022e6:	2300      	movs	r3, #0
 80022e8:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80022ea:	2300      	movs	r3, #0
 80022ec:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80022ee:	230c      	movs	r3, #12
 80022f0:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80022f2:	2300      	movs	r3, #0
 80022f4:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80022f6:	2300      	movs	r3, #0
 80022f8:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80022fa:	f107 031c 	add.w	r3, r7, #28
 80022fe:	4619      	mov	r1, r3
 8002300:	4806      	ldr	r0, [pc, #24]	; (800231c <MX_USART2_UART_Init+0x9c>)
 8002302:	f001 fa5b 	bl	80037bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002306:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_USART2_UART_Init+0x9c>)
 8002308:	f7ff ffa4 	bl	8002254 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 800230c:	4803      	ldr	r0, [pc, #12]	; (800231c <MX_USART2_UART_Init+0x9c>)
 800230e:	f7ff ff91 	bl	8002234 <LL_USART_Enable>

}
 8002312:	bf00      	nop
 8002314:	3738      	adds	r7, #56	; 0x38
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}
 800231a:	bf00      	nop
 800231c:	40004400 	.word	0x40004400

08002320 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8002320:	b480      	push	{r7}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8002328:	bf00      	nop
 800232a:	4b0b      	ldr	r3, [pc, #44]	; (8002358 <__io_putchar+0x38>)
 800232c:	69db      	ldr	r3, [r3, #28]
 800232e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002332:	2b00      	cmp	r3, #0
 8002334:	d0f9      	beq.n	800232a <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <__io_putchar+0x38>)
 8002338:	687a      	ldr	r2, [r7, #4]
 800233a:	b292      	uxth	r2, r2
 800233c:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 800233e:	bf00      	nop
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <__io_putchar+0x38>)
 8002342:	69db      	ldr	r3, [r3, #28]
 8002344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002348:	2b00      	cmp	r3, #0
 800234a:	d0f9      	beq.n	8002340 <__io_putchar+0x20>
#endif
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	40004400 	.word	0x40004400

0800235c <__io_getchar>:

void __io_getchar(void){
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr
	...

0800236c <startupPrint>:

void startupPrint(void){
 800236c:	b580      	push	{r7, lr}
 800236e:	af00      	add	r7, sp, #0
	printf("\r\n");
 8002370:	480b      	ldr	r0, [pc, #44]	; (80023a0 <startupPrint+0x34>)
 8002372:	f001 fba3 	bl	8003abc <puts>
	printf("+==============================================================+\r\n");
 8002376:	480b      	ldr	r0, [pc, #44]	; (80023a4 <startupPrint+0x38>)
 8002378:	f001 fba0 	bl	8003abc <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 800237c:	490a      	ldr	r1, [pc, #40]	; (80023a8 <startupPrint+0x3c>)
 800237e:	480b      	ldr	r0, [pc, #44]	; (80023ac <startupPrint+0x40>)
 8002380:	f001 fb28 	bl	80039d4 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8002384:	480a      	ldr	r0, [pc, #40]	; (80023b0 <startupPrint+0x44>)
 8002386:	f001 fb99 	bl	8003abc <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 800238a:	4b0a      	ldr	r3, [pc, #40]	; (80023b4 <startupPrint+0x48>)
 800238c:	4a0a      	ldr	r2, [pc, #40]	; (80023b8 <startupPrint+0x4c>)
 800238e:	490b      	ldr	r1, [pc, #44]	; (80023bc <startupPrint+0x50>)
 8002390:	480b      	ldr	r0, [pc, #44]	; (80023c0 <startupPrint+0x54>)
 8002392:	f001 fb1f 	bl	80039d4 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8002396:	480b      	ldr	r0, [pc, #44]	; (80023c4 <startupPrint+0x58>)
 8002398:	f001 fb90 	bl	8003abc <puts>
}
 800239c:	bf00      	nop
 800239e:	bd80      	pop	{r7, pc}
 80023a0:	08004a9c 	.word	0x08004a9c
 80023a4:	08004aa0 	.word	0x08004aa0
 80023a8:	08004ae4 	.word	0x08004ae4
 80023ac:	08004b0c 	.word	0x08004b0c
 80023b0:	08004b18 	.word	0x08004b18
 80023b4:	08004b5c 	.word	0x08004b5c
 80023b8:	08004b60 	.word	0x08004b60
 80023bc:	08004b6c 	.word	0x08004b6c
 80023c0:	08004b80 	.word	0x08004b80
 80023c4:	08004bac 	.word	0x08004bac

080023c8 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b086      	sub	sp, #24
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
 80023d0:	460b      	mov	r3, r1
 80023d2:	70fb      	strb	r3, [r7, #3]
 80023d4:	4613      	mov	r3, r2
 80023d6:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 80023d8:	2300      	movs	r3, #0
 80023da:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 80023dc:	2300      	movs	r3, #0
 80023de:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 80023e0:	78fb      	ldrb	r3, [r7, #3]
 80023e2:	029b      	lsls	r3, r3, #10
 80023e4:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 80023e6:	78fb      	ldrb	r3, [r7, #3]
 80023e8:	021b      	lsls	r3, r3, #8
 80023ea:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	4a1d      	ldr	r2, [pc, #116]	; (8002464 <configureDMA_USART_TX+0x9c>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d132      	bne.n	800245a <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 80023f4:	2001      	movs	r0, #1
 80023f6:	f7ff fed5 	bl	80021a4 <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	689b      	ldr	r3, [r3, #8]
 80023fe:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8002406:	4b18      	ldr	r3, [pc, #96]	; (8002468 <configureDMA_USART_TX+0xa0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	4a17      	ldr	r2, [pc, #92]	; (8002468 <configureDMA_USART_TX+0xa0>)
 800240c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002410:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8002412:	4b16      	ldr	r3, [pc, #88]	; (800246c <configureDMA_USART_TX+0xa4>)
 8002414:	685b      	ldr	r3, [r3, #4]
 8002416:	4a15      	ldr	r2, [pc, #84]	; (800246c <configureDMA_USART_TX+0xa4>)
 8002418:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 800241c:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 800241e:	4b14      	ldr	r3, [pc, #80]	; (8002470 <configureDMA_USART_TX+0xa8>)
 8002420:	4a14      	ldr	r2, [pc, #80]	; (8002474 <configureDMA_USART_TX+0xac>)
 8002422:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8002424:	78ba      	ldrb	r2, [r7, #2]
 8002426:	697b      	ldr	r3, [r7, #20]
 8002428:	431a      	orrs	r2, r3
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	4313      	orrs	r3, r2
 800242e:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8002432:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8002434:	4a0e      	ldr	r2, [pc, #56]	; (8002470 <configureDMA_USART_TX+0xa8>)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 800243a:	f7ff fe29 	bl	8002090 <__NVIC_GetPriorityGrouping>
 800243e:	4603      	mov	r3, r0
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	4618      	mov	r0, r3
 8002446:	f7ff fe79 	bl	800213c <NVIC_EncodePriority>
 800244a:	4603      	mov	r3, r0
 800244c:	4619      	mov	r1, r3
 800244e:	2011      	movs	r0, #17
 8002450:	f7ff fe4a 	bl	80020e8 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002454:	2011      	movs	r0, #17
 8002456:	f7ff fe29 	bl	80020ac <__NVIC_EnableIRQ>
	}
}
 800245a:	bf00      	nop
 800245c:	3718      	adds	r7, #24
 800245e:	46bd      	mov	sp, r7
 8002460:	bd80      	pop	{r7, pc}
 8002462:	bf00      	nop
 8002464:	40004400 	.word	0x40004400
 8002468:	400200a8 	.word	0x400200a8
 800246c:	40020000 	.word	0x40020000
 8002470:	40020080 	.word	0x40020080
 8002474:	40004428 	.word	0x40004428

08002478 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 800247c:	4b17      	ldr	r3, [pc, #92]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d006      	beq.n	8002496 <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8002488:	4b14      	ldr	r3, [pc, #80]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 800248a:	685b      	ldr	r3, [r3, #4]
 800248c:	4a13      	ldr	r2, [pc, #76]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 800248e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002492:	6053      	str	r3, [r2, #4]
		while(1);
 8002494:	e7fe      	b.n	8002494 <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8002496:	4b11      	ldr	r3, [pc, #68]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800249e:	2b00      	cmp	r3, #0
 80024a0:	d00b      	beq.n	80024ba <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 80024a2:	4b0e      	ldr	r3, [pc, #56]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 80024a4:	685b      	ldr	r3, [r3, #4]
 80024a6:	4a0d      	ldr	r2, [pc, #52]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 80024a8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80024ac:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 80024ae:	4b0c      	ldr	r3, [pc, #48]	; (80024e0 <DMA1_Channel7_IRQHandler+0x68>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	4a0b      	ldr	r2, [pc, #44]	; (80024e0 <DMA1_Channel7_IRQHandler+0x68>)
 80024b4:	f023 0301 	bic.w	r3, r3, #1
 80024b8:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 80024ba:	4b08      	ldr	r3, [pc, #32]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d005      	beq.n	80024d2 <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 80024c6:	4b05      	ldr	r3, [pc, #20]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	4a04      	ldr	r2, [pc, #16]	; (80024dc <DMA1_Channel7_IRQHandler+0x64>)
 80024cc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024d0:	6053      	str	r3, [r2, #4]
	}
}
 80024d2:	bf00      	nop
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr
 80024dc:	40020000 	.word	0x40020000
 80024e0:	40020080 	.word	0x40020080

080024e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80024e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800251c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80024e8:	f7ff fcf2 	bl	8001ed0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80024ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80024ee:	e003      	b.n	80024f8 <LoopCopyDataInit>

080024f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80024f0:	4b0b      	ldr	r3, [pc, #44]	; (8002520 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80024f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80024f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80024f6:	3104      	adds	r1, #4

080024f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80024f8:	480a      	ldr	r0, [pc, #40]	; (8002524 <LoopForever+0xa>)
	ldr	r3, =_edata
 80024fa:	4b0b      	ldr	r3, [pc, #44]	; (8002528 <LoopForever+0xe>)
	adds	r2, r0, r1
 80024fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80024fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002500:	d3f6      	bcc.n	80024f0 <CopyDataInit>
	ldr	r2, =_sbss
 8002502:	4a0a      	ldr	r2, [pc, #40]	; (800252c <LoopForever+0x12>)
	b	LoopFillZerobss
 8002504:	e002      	b.n	800250c <LoopFillZerobss>

08002506 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002506:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002508:	f842 3b04 	str.w	r3, [r2], #4

0800250c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800250c:	4b08      	ldr	r3, [pc, #32]	; (8002530 <LoopForever+0x16>)
	cmp	r2, r3
 800250e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002510:	d3f9      	bcc.n	8002506 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002512:	f001 fa33 	bl	800397c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002516:	f7ff f893 	bl	8001640 <main>

0800251a <LoopForever>:

LoopForever:
    b LoopForever
 800251a:	e7fe      	b.n	800251a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800251c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002520:	08005824 	.word	0x08005824
	ldr	r0, =_sdata
 8002524:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002528:	200005bc 	.word	0x200005bc
	ldr	r2, =_sbss
 800252c:	200005c0 	.word	0x200005c0
	ldr	r3, = _ebss
 8002530:	20000664 	.word	0x20000664

08002534 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002534:	e7fe      	b.n	8002534 <ADC1_2_IRQHandler>
	...

08002538 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002538:	b480      	push	{r7}
 800253a:	b083      	sub	sp, #12
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002540:	4b05      	ldr	r3, [pc, #20]	; (8002558 <LL_EXTI_EnableIT_0_31+0x20>)
 8002542:	681a      	ldr	r2, [r3, #0]
 8002544:	4904      	ldr	r1, [pc, #16]	; (8002558 <LL_EXTI_EnableIT_0_31+0x20>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	600b      	str	r3, [r1, #0]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	40010400 	.word	0x40010400

0800255c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800255c:	b480      	push	{r7}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
 8002562:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002564:	4b05      	ldr	r3, [pc, #20]	; (800257c <LL_EXTI_EnableIT_32_63+0x20>)
 8002566:	6a1a      	ldr	r2, [r3, #32]
 8002568:	4904      	ldr	r1, [pc, #16]	; (800257c <LL_EXTI_EnableIT_32_63+0x20>)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4313      	orrs	r3, r2
 800256e:	620b      	str	r3, [r1, #32]
}
 8002570:	bf00      	nop
 8002572:	370c      	adds	r7, #12
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40010400 	.word	0x40010400

08002580 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002580:	b480      	push	{r7}
 8002582:	b083      	sub	sp, #12
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002588:	4b06      	ldr	r3, [pc, #24]	; (80025a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	43db      	mvns	r3, r3
 8002590:	4904      	ldr	r1, [pc, #16]	; (80025a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8002592:	4013      	ands	r3, r2
 8002594:	600b      	str	r3, [r1, #0]
}
 8002596:	bf00      	nop
 8002598:	370c      	adds	r7, #12
 800259a:	46bd      	mov	sp, r7
 800259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a0:	4770      	bx	lr
 80025a2:	bf00      	nop
 80025a4:	40010400 	.word	0x40010400

080025a8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b083      	sub	sp, #12
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80025b0:	4b06      	ldr	r3, [pc, #24]	; (80025cc <LL_EXTI_DisableIT_32_63+0x24>)
 80025b2:	6a1a      	ldr	r2, [r3, #32]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	43db      	mvns	r3, r3
 80025b8:	4904      	ldr	r1, [pc, #16]	; (80025cc <LL_EXTI_DisableIT_32_63+0x24>)
 80025ba:	4013      	ands	r3, r2
 80025bc:	620b      	str	r3, [r1, #32]
}
 80025be:	bf00      	nop
 80025c0:	370c      	adds	r7, #12
 80025c2:	46bd      	mov	sp, r7
 80025c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c8:	4770      	bx	lr
 80025ca:	bf00      	nop
 80025cc:	40010400 	.word	0x40010400

080025d0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80025d0:	b480      	push	{r7}
 80025d2:	b083      	sub	sp, #12
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80025d8:	4b05      	ldr	r3, [pc, #20]	; (80025f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80025da:	685a      	ldr	r2, [r3, #4]
 80025dc:	4904      	ldr	r1, [pc, #16]	; (80025f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4313      	orrs	r3, r2
 80025e2:	604b      	str	r3, [r1, #4]

}
 80025e4:	bf00      	nop
 80025e6:	370c      	adds	r7, #12
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40010400 	.word	0x40010400

080025f4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80025f4:	b480      	push	{r7}
 80025f6:	b083      	sub	sp, #12
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80025fc:	4b05      	ldr	r3, [pc, #20]	; (8002614 <LL_EXTI_EnableEvent_32_63+0x20>)
 80025fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002600:	4904      	ldr	r1, [pc, #16]	; (8002614 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	4313      	orrs	r3, r2
 8002606:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002608:	bf00      	nop
 800260a:	370c      	adds	r7, #12
 800260c:	46bd      	mov	sp, r7
 800260e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002612:	4770      	bx	lr
 8002614:	40010400 	.word	0x40010400

08002618 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002618:	b480      	push	{r7}
 800261a:	b083      	sub	sp, #12
 800261c:	af00      	add	r7, sp, #0
 800261e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002622:	685a      	ldr	r2, [r3, #4]
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	43db      	mvns	r3, r3
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <LL_EXTI_DisableEvent_0_31+0x24>)
 800262a:	4013      	ands	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
}
 800262e:	bf00      	nop
 8002630:	370c      	adds	r7, #12
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
 800263a:	bf00      	nop
 800263c:	40010400 	.word	0x40010400

08002640 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002648:	4b06      	ldr	r3, [pc, #24]	; (8002664 <LL_EXTI_DisableEvent_32_63+0x24>)
 800264a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	43db      	mvns	r3, r3
 8002650:	4904      	ldr	r1, [pc, #16]	; (8002664 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002652:	4013      	ands	r3, r2
 8002654:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002656:	bf00      	nop
 8002658:	370c      	adds	r7, #12
 800265a:	46bd      	mov	sp, r7
 800265c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002660:	4770      	bx	lr
 8002662:	bf00      	nop
 8002664:	40010400 	.word	0x40010400

08002668 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002668:	b480      	push	{r7}
 800266a:	b083      	sub	sp, #12
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002670:	4b05      	ldr	r3, [pc, #20]	; (8002688 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	4904      	ldr	r1, [pc, #16]	; (8002688 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	4313      	orrs	r3, r2
 800267a:	608b      	str	r3, [r1, #8]

}
 800267c:	bf00      	nop
 800267e:	370c      	adds	r7, #12
 8002680:	46bd      	mov	sp, r7
 8002682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002686:	4770      	bx	lr
 8002688:	40010400 	.word	0x40010400

0800268c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800268c:	b480      	push	{r7}
 800268e:	b083      	sub	sp, #12
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002694:	4b05      	ldr	r3, [pc, #20]	; (80026ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002696:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002698:	4904      	ldr	r1, [pc, #16]	; (80026ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	4313      	orrs	r3, r2
 800269e:	628b      	str	r3, [r1, #40]	; 0x28
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr
 80026ac:	40010400 	.word	0x40010400

080026b0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80026b0:	b480      	push	{r7}
 80026b2:	b083      	sub	sp, #12
 80026b4:	af00      	add	r7, sp, #0
 80026b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80026b8:	4b06      	ldr	r3, [pc, #24]	; (80026d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026ba:	689a      	ldr	r2, [r3, #8]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	43db      	mvns	r3, r3
 80026c0:	4904      	ldr	r1, [pc, #16]	; (80026d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80026c2:	4013      	ands	r3, r2
 80026c4:	608b      	str	r3, [r1, #8]

}
 80026c6:	bf00      	nop
 80026c8:	370c      	adds	r7, #12
 80026ca:	46bd      	mov	sp, r7
 80026cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	40010400 	.word	0x40010400

080026d8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80026d8:	b480      	push	{r7}
 80026da:	b083      	sub	sp, #12
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80026e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	43db      	mvns	r3, r3
 80026e8:	4904      	ldr	r1, [pc, #16]	; (80026fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	628b      	str	r3, [r1, #40]	; 0x28
}
 80026ee:	bf00      	nop
 80026f0:	370c      	adds	r7, #12
 80026f2:	46bd      	mov	sp, r7
 80026f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f8:	4770      	bx	lr
 80026fa:	bf00      	nop
 80026fc:	40010400 	.word	0x40010400

08002700 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002700:	b480      	push	{r7}
 8002702:	b083      	sub	sp, #12
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002708:	4b05      	ldr	r3, [pc, #20]	; (8002720 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800270a:	68da      	ldr	r2, [r3, #12]
 800270c:	4904      	ldr	r1, [pc, #16]	; (8002720 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	4313      	orrs	r3, r2
 8002712:	60cb      	str	r3, [r1, #12]
}
 8002714:	bf00      	nop
 8002716:	370c      	adds	r7, #12
 8002718:	46bd      	mov	sp, r7
 800271a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271e:	4770      	bx	lr
 8002720:	40010400 	.word	0x40010400

08002724 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002724:	b480      	push	{r7}
 8002726:	b083      	sub	sp, #12
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800272c:	4b05      	ldr	r3, [pc, #20]	; (8002744 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800272e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002730:	4904      	ldr	r1, [pc, #16]	; (8002744 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	4313      	orrs	r3, r2
 8002736:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002738:	bf00      	nop
 800273a:	370c      	adds	r7, #12
 800273c:	46bd      	mov	sp, r7
 800273e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002742:	4770      	bx	lr
 8002744:	40010400 	.word	0x40010400

08002748 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002748:	b480      	push	{r7}
 800274a:	b083      	sub	sp, #12
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002750:	4b06      	ldr	r3, [pc, #24]	; (800276c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002752:	68da      	ldr	r2, [r3, #12]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	43db      	mvns	r3, r3
 8002758:	4904      	ldr	r1, [pc, #16]	; (800276c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800275a:	4013      	ands	r3, r2
 800275c:	60cb      	str	r3, [r1, #12]
}
 800275e:	bf00      	nop
 8002760:	370c      	adds	r7, #12
 8002762:	46bd      	mov	sp, r7
 8002764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002768:	4770      	bx	lr
 800276a:	bf00      	nop
 800276c:	40010400 	.word	0x40010400

08002770 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002770:	b480      	push	{r7}
 8002772:	b083      	sub	sp, #12
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002778:	4b06      	ldr	r3, [pc, #24]	; (8002794 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800277a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	43db      	mvns	r3, r3
 8002780:	4904      	ldr	r1, [pc, #16]	; (8002794 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002782:	4013      	ands	r3, r2
 8002784:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002786:	bf00      	nop
 8002788:	370c      	adds	r7, #12
 800278a:	46bd      	mov	sp, r7
 800278c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002790:	4770      	bx	lr
 8002792:	bf00      	nop
 8002794:	40010400 	.word	0x40010400

08002798 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80027a0:	2300      	movs	r3, #0
 80027a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	7a1b      	ldrb	r3, [r3, #8]
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	f000 80c6 	beq.w	800293a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d05d      	beq.n	8002872 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	7a5b      	ldrb	r3, [r3, #9]
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d00e      	beq.n	80027dc <LL_EXTI_Init+0x44>
 80027be:	2b02      	cmp	r3, #2
 80027c0:	d017      	beq.n	80027f2 <LL_EXTI_Init+0x5a>
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d120      	bne.n	8002808 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f7ff ff24 	bl	8002618 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	4618      	mov	r0, r3
 80027d6:	f7ff feaf 	bl	8002538 <LL_EXTI_EnableIT_0_31>
          break;
 80027da:	e018      	b.n	800280e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7ff fecd 	bl	8002580 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4618      	mov	r0, r3
 80027ec:	f7ff fef0 	bl	80025d0 <LL_EXTI_EnableEvent_0_31>
          break;
 80027f0:	e00d      	b.n	800280e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7ff fe9e 	bl	8002538 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4618      	mov	r0, r3
 8002802:	f7ff fee5 	bl	80025d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002806:	e002      	b.n	800280e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8002808:	2301      	movs	r3, #1
 800280a:	60fb      	str	r3, [r7, #12]
          break;
 800280c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	7a9b      	ldrb	r3, [r3, #10]
 8002812:	2b00      	cmp	r3, #0
 8002814:	d02d      	beq.n	8002872 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	7a9b      	ldrb	r3, [r3, #10]
 800281a:	2b02      	cmp	r3, #2
 800281c:	d00e      	beq.n	800283c <LL_EXTI_Init+0xa4>
 800281e:	2b03      	cmp	r3, #3
 8002820:	d017      	beq.n	8002852 <LL_EXTI_Init+0xba>
 8002822:	2b01      	cmp	r3, #1
 8002824:	d120      	bne.n	8002868 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4618      	mov	r0, r3
 800282c:	f7ff ff8c 	bl	8002748 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4618      	mov	r0, r3
 8002836:	f7ff ff17 	bl	8002668 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800283a:	e01b      	b.n	8002874 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4618      	mov	r0, r3
 8002842:	f7ff ff35 	bl	80026b0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7ff ff58 	bl	8002700 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002850:	e010      	b.n	8002874 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7ff ff06 	bl	8002668 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4618      	mov	r0, r3
 8002862:	f7ff ff4d 	bl	8002700 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002866:	e005      	b.n	8002874 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f043 0302 	orr.w	r3, r3, #2
 800286e:	60fb      	str	r3, [r7, #12]
            break;
 8002870:	e000      	b.n	8002874 <LL_EXTI_Init+0xdc>
        }
      }
 8002872:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d073      	beq.n	8002964 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	7a5b      	ldrb	r3, [r3, #9]
 8002880:	2b01      	cmp	r3, #1
 8002882:	d00e      	beq.n	80028a2 <LL_EXTI_Init+0x10a>
 8002884:	2b02      	cmp	r3, #2
 8002886:	d017      	beq.n	80028b8 <LL_EXTI_Init+0x120>
 8002888:	2b00      	cmp	r3, #0
 800288a:	d120      	bne.n	80028ce <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	4618      	mov	r0, r3
 8002892:	f7ff fed5 	bl	8002640 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	4618      	mov	r0, r3
 800289c:	f7ff fe5e 	bl	800255c <LL_EXTI_EnableIT_32_63>
          break;
 80028a0:	e01a      	b.n	80028d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	4618      	mov	r0, r3
 80028a8:	f7ff fe7e 	bl	80025a8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	4618      	mov	r0, r3
 80028b2:	f7ff fe9f 	bl	80025f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80028b6:	e00f      	b.n	80028d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	4618      	mov	r0, r3
 80028be:	f7ff fe4d 	bl	800255c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4618      	mov	r0, r3
 80028c8:	f7ff fe94 	bl	80025f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80028cc:	e004      	b.n	80028d8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	f043 0304 	orr.w	r3, r3, #4
 80028d4:	60fb      	str	r3, [r7, #12]
          break;
 80028d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	7a9b      	ldrb	r3, [r3, #10]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d041      	beq.n	8002964 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	7a9b      	ldrb	r3, [r3, #10]
 80028e4:	2b02      	cmp	r3, #2
 80028e6:	d00e      	beq.n	8002906 <LL_EXTI_Init+0x16e>
 80028e8:	2b03      	cmp	r3, #3
 80028ea:	d017      	beq.n	800291c <LL_EXTI_Init+0x184>
 80028ec:	2b01      	cmp	r3, #1
 80028ee:	d120      	bne.n	8002932 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7ff ff3b 	bl	8002770 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	4618      	mov	r0, r3
 8002900:	f7ff fec4 	bl	800268c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002904:	e02f      	b.n	8002966 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	4618      	mov	r0, r3
 800290c:	f7ff fee4 	bl	80026d8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	4618      	mov	r0, r3
 8002916:	f7ff ff05 	bl	8002724 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800291a:	e024      	b.n	8002966 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	4618      	mov	r0, r3
 8002922:	f7ff feb3 	bl	800268c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	4618      	mov	r0, r3
 800292c:	f7ff fefa 	bl	8002724 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002930:	e019      	b.n	8002966 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	60fb      	str	r3, [r7, #12]
            break;
 8002936:	bf00      	nop
 8002938:	e015      	b.n	8002966 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4618      	mov	r0, r3
 8002940:	f7ff fe1e 	bl	8002580 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff fe65 	bl	8002618 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	4618      	mov	r0, r3
 8002954:	f7ff fe28 	bl	80025a8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	4618      	mov	r0, r3
 800295e:	f7ff fe6f 	bl	8002640 <LL_EXTI_DisableEvent_32_63>
 8002962:	e000      	b.n	8002966 <LL_EXTI_Init+0x1ce>
      }
 8002964:	bf00      	nop
  }

  return status;
 8002966:	68fb      	ldr	r3, [r7, #12]
}
 8002968:	4618      	mov	r0, r3
 800296a:	3710      	adds	r7, #16
 800296c:	46bd      	mov	sp, r7
 800296e:	bd80      	pop	{r7, pc}

08002970 <LL_GPIO_SetPinMode>:
{
 8002970:	b480      	push	{r7}
 8002972:	b08b      	sub	sp, #44	; 0x2c
 8002974:	af00      	add	r7, sp, #0
 8002976:	60f8      	str	r0, [r7, #12]
 8002978:	60b9      	str	r1, [r7, #8]
 800297a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681a      	ldr	r2, [r3, #0]
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002984:	697b      	ldr	r3, [r7, #20]
 8002986:	fa93 f3a3 	rbit	r3, r3
 800298a:	613b      	str	r3, [r7, #16]
  return result;
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002990:	69bb      	ldr	r3, [r7, #24]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d101      	bne.n	800299a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002996:	2320      	movs	r3, #32
 8002998:	e003      	b.n	80029a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	fab3 f383 	clz	r3, r3
 80029a0:	b2db      	uxtb	r3, r3
 80029a2:	005b      	lsls	r3, r3, #1
 80029a4:	2103      	movs	r1, #3
 80029a6:	fa01 f303 	lsl.w	r3, r1, r3
 80029aa:	43db      	mvns	r3, r3
 80029ac:	401a      	ands	r2, r3
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029b2:	6a3b      	ldr	r3, [r7, #32]
 80029b4:	fa93 f3a3 	rbit	r3, r3
 80029b8:	61fb      	str	r3, [r7, #28]
  return result;
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80029be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d101      	bne.n	80029c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80029c4:	2320      	movs	r3, #32
 80029c6:	e003      	b.n	80029d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80029c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ca:	fab3 f383 	clz	r3, r3
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	005b      	lsls	r3, r3, #1
 80029d2:	6879      	ldr	r1, [r7, #4]
 80029d4:	fa01 f303 	lsl.w	r3, r1, r3
 80029d8:	431a      	orrs	r2, r3
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	601a      	str	r2, [r3, #0]
}
 80029de:	bf00      	nop
 80029e0:	372c      	adds	r7, #44	; 0x2c
 80029e2:	46bd      	mov	sp, r7
 80029e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e8:	4770      	bx	lr

080029ea <LL_GPIO_SetPinOutputType>:
{
 80029ea:	b480      	push	{r7}
 80029ec:	b085      	sub	sp, #20
 80029ee:	af00      	add	r7, sp, #0
 80029f0:	60f8      	str	r0, [r7, #12]
 80029f2:	60b9      	str	r1, [r7, #8]
 80029f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	685a      	ldr	r2, [r3, #4]
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	43db      	mvns	r3, r3
 80029fe:	401a      	ands	r2, r3
 8002a00:	68bb      	ldr	r3, [r7, #8]
 8002a02:	6879      	ldr	r1, [r7, #4]
 8002a04:	fb01 f303 	mul.w	r3, r1, r3
 8002a08:	431a      	orrs	r2, r3
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	605a      	str	r2, [r3, #4]
}
 8002a0e:	bf00      	nop
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <LL_GPIO_SetPinSpeed>:
{
 8002a1a:	b480      	push	{r7}
 8002a1c:	b08b      	sub	sp, #44	; 0x2c
 8002a1e:	af00      	add	r7, sp, #0
 8002a20:	60f8      	str	r0, [r7, #12]
 8002a22:	60b9      	str	r1, [r7, #8]
 8002a24:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	689a      	ldr	r2, [r3, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
 8002a2c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a2e:	697b      	ldr	r3, [r7, #20]
 8002a30:	fa93 f3a3 	rbit	r3, r3
 8002a34:	613b      	str	r3, [r7, #16]
  return result;
 8002a36:	693b      	ldr	r3, [r7, #16]
 8002a38:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d101      	bne.n	8002a44 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002a40:	2320      	movs	r3, #32
 8002a42:	e003      	b.n	8002a4c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	fab3 f383 	clz	r3, r3
 8002a4a:	b2db      	uxtb	r3, r3
 8002a4c:	005b      	lsls	r3, r3, #1
 8002a4e:	2103      	movs	r1, #3
 8002a50:	fa01 f303 	lsl.w	r3, r1, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	401a      	ands	r2, r3
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a5c:	6a3b      	ldr	r3, [r7, #32]
 8002a5e:	fa93 f3a3 	rbit	r3, r3
 8002a62:	61fb      	str	r3, [r7, #28]
  return result;
 8002a64:	69fb      	ldr	r3, [r7, #28]
 8002a66:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002a6e:	2320      	movs	r3, #32
 8002a70:	e003      	b.n	8002a7a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002a72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a74:	fab3 f383 	clz	r3, r3
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	005b      	lsls	r3, r3, #1
 8002a7c:	6879      	ldr	r1, [r7, #4]
 8002a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a82:	431a      	orrs	r2, r3
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	609a      	str	r2, [r3, #8]
}
 8002a88:	bf00      	nop
 8002a8a:	372c      	adds	r7, #44	; 0x2c
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a92:	4770      	bx	lr

08002a94 <LL_GPIO_SetPinPull>:
{
 8002a94:	b480      	push	{r7}
 8002a96:	b08b      	sub	sp, #44	; 0x2c
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	60b9      	str	r1, [r7, #8]
 8002a9e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	68da      	ldr	r2, [r3, #12]
 8002aa4:	68bb      	ldr	r3, [r7, #8]
 8002aa6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aa8:	697b      	ldr	r3, [r7, #20]
 8002aaa:	fa93 f3a3 	rbit	r3, r3
 8002aae:	613b      	str	r3, [r7, #16]
  return result;
 8002ab0:	693b      	ldr	r3, [r7, #16]
 8002ab2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002ab4:	69bb      	ldr	r3, [r7, #24]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d101      	bne.n	8002abe <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002aba:	2320      	movs	r3, #32
 8002abc:	e003      	b.n	8002ac6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	fab3 f383 	clz	r3, r3
 8002ac4:	b2db      	uxtb	r3, r3
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2103      	movs	r1, #3
 8002aca:	fa01 f303 	lsl.w	r3, r1, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	401a      	ands	r2, r3
 8002ad2:	68bb      	ldr	r3, [r7, #8]
 8002ad4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ad6:	6a3b      	ldr	r3, [r7, #32]
 8002ad8:	fa93 f3a3 	rbit	r3, r3
 8002adc:	61fb      	str	r3, [r7, #28]
  return result;
 8002ade:	69fb      	ldr	r3, [r7, #28]
 8002ae0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d101      	bne.n	8002aec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002ae8:	2320      	movs	r3, #32
 8002aea:	e003      	b.n	8002af4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aee:	fab3 f383 	clz	r3, r3
 8002af2:	b2db      	uxtb	r3, r3
 8002af4:	005b      	lsls	r3, r3, #1
 8002af6:	6879      	ldr	r1, [r7, #4]
 8002af8:	fa01 f303 	lsl.w	r3, r1, r3
 8002afc:	431a      	orrs	r2, r3
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	60da      	str	r2, [r3, #12]
}
 8002b02:	bf00      	nop
 8002b04:	372c      	adds	r7, #44	; 0x2c
 8002b06:	46bd      	mov	sp, r7
 8002b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0c:	4770      	bx	lr

08002b0e <LL_GPIO_SetAFPin_0_7>:
{
 8002b0e:	b480      	push	{r7}
 8002b10:	b08b      	sub	sp, #44	; 0x2c
 8002b12:	af00      	add	r7, sp, #0
 8002b14:	60f8      	str	r0, [r7, #12]
 8002b16:	60b9      	str	r1, [r7, #8]
 8002b18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	6a1a      	ldr	r2, [r3, #32]
 8002b1e:	68bb      	ldr	r3, [r7, #8]
 8002b20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	fa93 f3a3 	rbit	r3, r3
 8002b28:	613b      	str	r3, [r7, #16]
  return result;
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002b2e:	69bb      	ldr	r3, [r7, #24]
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d101      	bne.n	8002b38 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002b34:	2320      	movs	r3, #32
 8002b36:	e003      	b.n	8002b40 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002b38:	69bb      	ldr	r3, [r7, #24]
 8002b3a:	fab3 f383 	clz	r3, r3
 8002b3e:	b2db      	uxtb	r3, r3
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	210f      	movs	r1, #15
 8002b44:	fa01 f303 	lsl.w	r3, r1, r3
 8002b48:	43db      	mvns	r3, r3
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b50:	6a3b      	ldr	r3, [r7, #32]
 8002b52:	fa93 f3a3 	rbit	r3, r3
 8002b56:	61fb      	str	r3, [r7, #28]
  return result;
 8002b58:	69fb      	ldr	r3, [r7, #28]
 8002b5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d101      	bne.n	8002b66 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002b62:	2320      	movs	r3, #32
 8002b64:	e003      	b.n	8002b6e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8002b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b68:	fab3 f383 	clz	r3, r3
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	009b      	lsls	r3, r3, #2
 8002b70:	6879      	ldr	r1, [r7, #4]
 8002b72:	fa01 f303 	lsl.w	r3, r1, r3
 8002b76:	431a      	orrs	r2, r3
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	621a      	str	r2, [r3, #32]
}
 8002b7c:	bf00      	nop
 8002b7e:	372c      	adds	r7, #44	; 0x2c
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <LL_GPIO_SetAFPin_8_15>:
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b08b      	sub	sp, #44	; 0x2c
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	60f8      	str	r0, [r7, #12]
 8002b90:	60b9      	str	r1, [r7, #8]
 8002b92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b98:	68bb      	ldr	r3, [r7, #8]
 8002b9a:	0a1b      	lsrs	r3, r3, #8
 8002b9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b9e:	697b      	ldr	r3, [r7, #20]
 8002ba0:	fa93 f3a3 	rbit	r3, r3
 8002ba4:	613b      	str	r3, [r7, #16]
  return result;
 8002ba6:	693b      	ldr	r3, [r7, #16]
 8002ba8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002baa:	69bb      	ldr	r3, [r7, #24]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d101      	bne.n	8002bb4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002bb0:	2320      	movs	r3, #32
 8002bb2:	e003      	b.n	8002bbc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8002bb4:	69bb      	ldr	r3, [r7, #24]
 8002bb6:	fab3 f383 	clz	r3, r3
 8002bba:	b2db      	uxtb	r3, r3
 8002bbc:	009b      	lsls	r3, r3, #2
 8002bbe:	210f      	movs	r1, #15
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	43db      	mvns	r3, r3
 8002bc6:	401a      	ands	r2, r3
 8002bc8:	68bb      	ldr	r3, [r7, #8]
 8002bca:	0a1b      	lsrs	r3, r3, #8
 8002bcc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	fa93 f3a3 	rbit	r3, r3
 8002bd4:	61fb      	str	r3, [r7, #28]
  return result;
 8002bd6:	69fb      	ldr	r3, [r7, #28]
 8002bd8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d101      	bne.n	8002be4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8002be0:	2320      	movs	r3, #32
 8002be2:	e003      	b.n	8002bec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8002be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be6:	fab3 f383 	clz	r3, r3
 8002bea:	b2db      	uxtb	r3, r3
 8002bec:	009b      	lsls	r3, r3, #2
 8002bee:	6879      	ldr	r1, [r7, #4]
 8002bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf4:	431a      	orrs	r2, r3
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8002bfa:	bf00      	nop
 8002bfc:	372c      	adds	r7, #44	; 0x2c
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr

08002c06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8002c06:	b580      	push	{r7, lr}
 8002c08:	b088      	sub	sp, #32
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
 8002c0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c16:	693b      	ldr	r3, [r7, #16]
 8002c18:	fa93 f3a3 	rbit	r3, r3
 8002c1c:	60fb      	str	r3, [r7, #12]
  return result;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d101      	bne.n	8002c2c <LL_GPIO_Init+0x26>
    return 32U;
 8002c28:	2320      	movs	r3, #32
 8002c2a:	e003      	b.n	8002c34 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	fab3 f383 	clz	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002c36:	e040      	b.n	8002cba <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	681a      	ldr	r2, [r3, #0]
 8002c3c:	2101      	movs	r1, #1
 8002c3e:	69fb      	ldr	r3, [r7, #28]
 8002c40:	fa01 f303 	lsl.w	r3, r1, r3
 8002c44:	4013      	ands	r3, r2
 8002c46:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002c48:	69bb      	ldr	r3, [r7, #24]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d032      	beq.n	8002cb4 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	685b      	ldr	r3, [r3, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	69b9      	ldr	r1, [r7, #24]
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f7ff fe8a 	bl	8002970 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002c5c:	683b      	ldr	r3, [r7, #0]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b01      	cmp	r3, #1
 8002c62:	d003      	beq.n	8002c6c <LL_GPIO_Init+0x66>
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	2b02      	cmp	r3, #2
 8002c6a:	d106      	bne.n	8002c7a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	461a      	mov	r2, r3
 8002c72:	69b9      	ldr	r1, [r7, #24]
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f7ff fed0 	bl	8002a1a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	691b      	ldr	r3, [r3, #16]
 8002c7e:	461a      	mov	r2, r3
 8002c80:	69b9      	ldr	r1, [r7, #24]
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f7ff ff06 	bl	8002a94 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	2b02      	cmp	r3, #2
 8002c8e:	d111      	bne.n	8002cb4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002c90:	69bb      	ldr	r3, [r7, #24]
 8002c92:	2bff      	cmp	r3, #255	; 0xff
 8002c94:	d807      	bhi.n	8002ca6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002c96:	683b      	ldr	r3, [r7, #0]
 8002c98:	695b      	ldr	r3, [r3, #20]
 8002c9a:	461a      	mov	r2, r3
 8002c9c:	69b9      	ldr	r1, [r7, #24]
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff ff35 	bl	8002b0e <LL_GPIO_SetAFPin_0_7>
 8002ca4:	e006      	b.n	8002cb4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	695b      	ldr	r3, [r3, #20]
 8002caa:	461a      	mov	r2, r3
 8002cac:	69b9      	ldr	r1, [r7, #24]
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f7ff ff6a 	bl	8002b88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681a      	ldr	r2, [r3, #0]
 8002cbe:	69fb      	ldr	r3, [r7, #28]
 8002cc0:	fa22 f303 	lsr.w	r3, r2, r3
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d1b7      	bne.n	8002c38 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d003      	beq.n	8002cd8 <LL_GPIO_Init+0xd2>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	2b02      	cmp	r3, #2
 8002cd6:	d107      	bne.n	8002ce8 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	6819      	ldr	r1, [r3, #0]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	461a      	mov	r2, r3
 8002ce2:	6878      	ldr	r0, [r7, #4]
 8002ce4:	f7ff fe81 	bl	80029ea <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8002ce8:	2300      	movs	r3, #0
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
	...

08002cf4 <LL_RCC_HSI_IsReady>:
{
 8002cf4:	b480      	push	{r7}
 8002cf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8002cf8:	4b07      	ldr	r3, [pc, #28]	; (8002d18 <LL_RCC_HSI_IsReady+0x24>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d04:	d101      	bne.n	8002d0a <LL_RCC_HSI_IsReady+0x16>
 8002d06:	2301      	movs	r3, #1
 8002d08:	e000      	b.n	8002d0c <LL_RCC_HSI_IsReady+0x18>
 8002d0a:	2300      	movs	r3, #0
}
 8002d0c:	4618      	mov	r0, r3
 8002d0e:	46bd      	mov	sp, r7
 8002d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d14:	4770      	bx	lr
 8002d16:	bf00      	nop
 8002d18:	40021000 	.word	0x40021000

08002d1c <LL_RCC_LSE_IsReady>:
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002d20:	4b07      	ldr	r3, [pc, #28]	; (8002d40 <LL_RCC_LSE_IsReady+0x24>)
 8002d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d26:	f003 0302 	and.w	r3, r3, #2
 8002d2a:	2b02      	cmp	r3, #2
 8002d2c:	d101      	bne.n	8002d32 <LL_RCC_LSE_IsReady+0x16>
 8002d2e:	2301      	movs	r3, #1
 8002d30:	e000      	b.n	8002d34 <LL_RCC_LSE_IsReady+0x18>
 8002d32:	2300      	movs	r3, #0
}
 8002d34:	4618      	mov	r0, r3
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr
 8002d3e:	bf00      	nop
 8002d40:	40021000 	.word	0x40021000

08002d44 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002d48:	4b06      	ldr	r3, [pc, #24]	; (8002d64 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f003 0308 	and.w	r3, r3, #8
 8002d50:	2b08      	cmp	r3, #8
 8002d52:	d101      	bne.n	8002d58 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr
 8002d64:	40021000 	.word	0x40021000

08002d68 <LL_RCC_MSI_GetRange>:
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002d6c:	4b04      	ldr	r3, [pc, #16]	; (8002d80 <LL_RCC_MSI_GetRange+0x18>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr
 8002d7e:	bf00      	nop
 8002d80:	40021000 	.word	0x40021000

08002d84 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002d88:	4b04      	ldr	r3, [pc, #16]	; (8002d9c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002d8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002d8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8002d92:	4618      	mov	r0, r3
 8002d94:	46bd      	mov	sp, r7
 8002d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9a:	4770      	bx	lr
 8002d9c:	40021000 	.word	0x40021000

08002da0 <LL_RCC_GetSysClkSource>:
{
 8002da0:	b480      	push	{r7}
 8002da2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002da4:	4b04      	ldr	r3, [pc, #16]	; (8002db8 <LL_RCC_GetSysClkSource+0x18>)
 8002da6:	689b      	ldr	r3, [r3, #8]
 8002da8:	f003 030c 	and.w	r3, r3, #12
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	46bd      	mov	sp, r7
 8002db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db4:	4770      	bx	lr
 8002db6:	bf00      	nop
 8002db8:	40021000 	.word	0x40021000

08002dbc <LL_RCC_GetAHBPrescaler>:
{
 8002dbc:	b480      	push	{r7}
 8002dbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002dc0:	4b04      	ldr	r3, [pc, #16]	; (8002dd4 <LL_RCC_GetAHBPrescaler+0x18>)
 8002dc2:	689b      	ldr	r3, [r3, #8]
 8002dc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd0:	4770      	bx	lr
 8002dd2:	bf00      	nop
 8002dd4:	40021000 	.word	0x40021000

08002dd8 <LL_RCC_GetAPB1Prescaler>:
{
 8002dd8:	b480      	push	{r7}
 8002dda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8002ddc:	4b04      	ldr	r3, [pc, #16]	; (8002df0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8002dde:	689b      	ldr	r3, [r3, #8]
 8002de0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	40021000 	.word	0x40021000

08002df4 <LL_RCC_GetAPB2Prescaler>:
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8002df8:	4b04      	ldr	r3, [pc, #16]	; (8002e0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002e00:	4618      	mov	r0, r3
 8002e02:	46bd      	mov	sp, r7
 8002e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	40021000 	.word	0x40021000

08002e10 <LL_RCC_GetUSARTClockSource>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002e18:	4b06      	ldr	r3, [pc, #24]	; (8002e34 <LL_RCC_GetUSARTClockSource+0x24>)
 8002e1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	401a      	ands	r2, r3
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	041b      	lsls	r3, r3, #16
 8002e26:	4313      	orrs	r3, r2
}
 8002e28:	4618      	mov	r0, r3
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e32:	4770      	bx	lr
 8002e34:	40021000 	.word	0x40021000

08002e38 <LL_RCC_GetUARTClockSource>:
{
 8002e38:	b480      	push	{r7}
 8002e3a:	b083      	sub	sp, #12
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002e40:	4b06      	ldr	r3, [pc, #24]	; (8002e5c <LL_RCC_GetUARTClockSource+0x24>)
 8002e42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	401a      	ands	r2, r3
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	041b      	lsls	r3, r3, #16
 8002e4e:	4313      	orrs	r3, r2
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr
 8002e5c:	40021000 	.word	0x40021000

08002e60 <LL_RCC_PLL_GetMainSource>:
{
 8002e60:	b480      	push	{r7}
 8002e62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002e64:	4b04      	ldr	r3, [pc, #16]	; (8002e78 <LL_RCC_PLL_GetMainSource+0x18>)
 8002e66:	68db      	ldr	r3, [r3, #12]
 8002e68:	f003 0303 	and.w	r3, r3, #3
}
 8002e6c:	4618      	mov	r0, r3
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
 8002e76:	bf00      	nop
 8002e78:	40021000 	.word	0x40021000

08002e7c <LL_RCC_PLL_GetN>:
{
 8002e7c:	b480      	push	{r7}
 8002e7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002e80:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <LL_RCC_PLL_GetN+0x18>)
 8002e82:	68db      	ldr	r3, [r3, #12]
 8002e84:	0a1b      	lsrs	r3, r3, #8
 8002e86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e92:	4770      	bx	lr
 8002e94:	40021000 	.word	0x40021000

08002e98 <LL_RCC_PLL_GetR>:
{
 8002e98:	b480      	push	{r7}
 8002e9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002e9c:	4b04      	ldr	r3, [pc, #16]	; (8002eb0 <LL_RCC_PLL_GetR+0x18>)
 8002e9e:	68db      	ldr	r3, [r3, #12]
 8002ea0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	46bd      	mov	sp, r7
 8002ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eac:	4770      	bx	lr
 8002eae:	bf00      	nop
 8002eb0:	40021000 	.word	0x40021000

08002eb4 <LL_RCC_PLL_GetDivider>:
{
 8002eb4:	b480      	push	{r7}
 8002eb6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002eb8:	4b04      	ldr	r3, [pc, #16]	; (8002ecc <LL_RCC_PLL_GetDivider+0x18>)
 8002eba:	68db      	ldr	r3, [r3, #12]
 8002ebc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	40021000 	.word	0x40021000

08002ed0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2b03      	cmp	r3, #3
 8002ee0:	d137      	bne.n	8002f52 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff94 	bl	8002e10 <LL_RCC_GetUSARTClockSource>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	f200 80b2 	bhi.w	8003058 <LL_RCC_GetUSARTClockFreq+0x188>
 8002ef4:	a201      	add	r2, pc, #4	; (adr r2, 8002efc <LL_RCC_GetUSARTClockFreq+0x2c>)
 8002ef6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002efa:	bf00      	nop
 8002efc:	08002f3b 	.word	0x08002f3b
 8002f00:	08002f0d 	.word	0x08002f0d
 8002f04:	08002f15 	.word	0x08002f15
 8002f08:	08002f27 	.word	0x08002f27
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002f0c:	f000 f952 	bl	80031b4 <RCC_GetSystemClockFreq>
 8002f10:	60f8      	str	r0, [r7, #12]
        break;
 8002f12:	e0b2      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002f14:	f7ff feee 	bl	8002cf4 <LL_RCC_HSI_IsReady>
 8002f18:	4603      	mov	r3, r0
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	f000 809e 	beq.w	800305c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8002f20:	4b58      	ldr	r3, [pc, #352]	; (8003084 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002f22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002f24:	e09a      	b.n	800305c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002f26:	f7ff fef9 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8002f2a:	4603      	mov	r3, r0
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	f000 8097 	beq.w	8003060 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8002f32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002f38:	e092      	b.n	8003060 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002f3a:	f000 f93b 	bl	80031b4 <RCC_GetSystemClockFreq>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	4618      	mov	r0, r3
 8002f42:	f000 f9c7 	bl	80032d4 <RCC_GetHCLKClockFreq>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4618      	mov	r0, r3
 8002f4a:	f000 f9ed 	bl	8003328 <RCC_GetPCLK2ClockFreq>
 8002f4e:	60f8      	str	r0, [r7, #12]
        break;
 8002f50:	e093      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	2b0c      	cmp	r3, #12
 8002f56:	d146      	bne.n	8002fe6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f7ff ff59 	bl	8002e10 <LL_RCC_GetUSARTClockSource>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002f64:	2b0c      	cmp	r3, #12
 8002f66:	d87d      	bhi.n	8003064 <LL_RCC_GetUSARTClockFreq+0x194>
 8002f68:	a201      	add	r2, pc, #4	; (adr r2, 8002f70 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002f6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6e:	bf00      	nop
 8002f70:	08002fcf 	.word	0x08002fcf
 8002f74:	08003065 	.word	0x08003065
 8002f78:	08003065 	.word	0x08003065
 8002f7c:	08003065 	.word	0x08003065
 8002f80:	08002fa5 	.word	0x08002fa5
 8002f84:	08003065 	.word	0x08003065
 8002f88:	08003065 	.word	0x08003065
 8002f8c:	08003065 	.word	0x08003065
 8002f90:	08002fad 	.word	0x08002fad
 8002f94:	08003065 	.word	0x08003065
 8002f98:	08003065 	.word	0x08003065
 8002f9c:	08003065 	.word	0x08003065
 8002fa0:	08002fbd 	.word	0x08002fbd
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002fa4:	f000 f906 	bl	80031b4 <RCC_GetSystemClockFreq>
 8002fa8:	60f8      	str	r0, [r7, #12]
        break;
 8002faa:	e066      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002fac:	f7ff fea2 	bl	8002cf4 <LL_RCC_HSI_IsReady>
 8002fb0:	4603      	mov	r3, r0
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d058      	beq.n	8003068 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8002fb6:	4b33      	ldr	r3, [pc, #204]	; (8003084 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002fb8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fba:	e055      	b.n	8003068 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002fbc:	f7ff feae 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8002fc0:	4603      	mov	r3, r0
 8002fc2:	2b00      	cmp	r3, #0
 8002fc4:	d052      	beq.n	800306c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8002fc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002fcc:	e04e      	b.n	800306c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002fce:	f000 f8f1 	bl	80031b4 <RCC_GetSystemClockFreq>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4618      	mov	r0, r3
 8002fd6:	f000 f97d 	bl	80032d4 <RCC_GetHCLKClockFreq>
 8002fda:	4603      	mov	r3, r0
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f000 f98f 	bl	8003300 <RCC_GetPCLK1ClockFreq>
 8002fe2:	60f8      	str	r0, [r7, #12]
        break;
 8002fe4:	e049      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	2b30      	cmp	r3, #48	; 0x30
 8002fea:	d141      	bne.n	8003070 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f7ff ff0f 	bl	8002e10 <LL_RCC_GetUSARTClockSource>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	4a24      	ldr	r2, [pc, #144]	; (8003088 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d00d      	beq.n	8003016 <LL_RCC_GetUSARTClockFreq+0x146>
 8002ffa:	4a23      	ldr	r2, [pc, #140]	; (8003088 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d803      	bhi.n	8003008 <LL_RCC_GetUSARTClockFreq+0x138>
 8003000:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003004:	d01c      	beq.n	8003040 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8003006:	e038      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003008:	4a20      	ldr	r2, [pc, #128]	; (800308c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <LL_RCC_GetUSARTClockFreq+0x14e>
 800300e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8003012:	d00c      	beq.n	800302e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8003014:	e031      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8003016:	f000 f8cd 	bl	80031b4 <RCC_GetSystemClockFreq>
 800301a:	60f8      	str	r0, [r7, #12]
          break;
 800301c:	e02d      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 800301e:	f7ff fe69 	bl	8002cf4 <LL_RCC_HSI_IsReady>
 8003022:	4603      	mov	r3, r0
 8003024:	2b00      	cmp	r3, #0
 8003026:	d025      	beq.n	8003074 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8003028:	4b16      	ldr	r3, [pc, #88]	; (8003084 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800302a:	60fb      	str	r3, [r7, #12]
          break;
 800302c:	e022      	b.n	8003074 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 800302e:	f7ff fe75 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d01f      	beq.n	8003078 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8003038:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800303c:	60fb      	str	r3, [r7, #12]
          break;
 800303e:	e01b      	b.n	8003078 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003040:	f000 f8b8 	bl	80031b4 <RCC_GetSystemClockFreq>
 8003044:	4603      	mov	r3, r0
 8003046:	4618      	mov	r0, r3
 8003048:	f000 f944 	bl	80032d4 <RCC_GetHCLKClockFreq>
 800304c:	4603      	mov	r3, r0
 800304e:	4618      	mov	r0, r3
 8003050:	f000 f956 	bl	8003300 <RCC_GetPCLK1ClockFreq>
 8003054:	60f8      	str	r0, [r7, #12]
          break;
 8003056:	e010      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003058:	bf00      	nop
 800305a:	e00e      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800305c:	bf00      	nop
 800305e:	e00c      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003060:	bf00      	nop
 8003062:	e00a      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003064:	bf00      	nop
 8003066:	e008      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003068:	bf00      	nop
 800306a:	e006      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800306c:	bf00      	nop
 800306e:	e004      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8003070:	bf00      	nop
 8003072:	e002      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003074:	bf00      	nop
 8003076:	e000      	b.n	800307a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003078:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800307a:	68fb      	ldr	r3, [r7, #12]
}
 800307c:	4618      	mov	r0, r3
 800307e:	3710      	adds	r7, #16
 8003080:	46bd      	mov	sp, r7
 8003082:	bd80      	pop	{r7, pc}
 8003084:	00f42400 	.word	0x00f42400
 8003088:	00300010 	.word	0x00300010
 800308c:	00300020 	.word	0x00300020

08003090 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003090:	b580      	push	{r7, lr}
 8003092:	b084      	sub	sp, #16
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003098:	2300      	movs	r3, #0
 800309a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	2bc0      	cmp	r3, #192	; 0xc0
 80030a0:	d135      	bne.n	800310e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7ff fec8 	bl	8002e38 <LL_RCC_GetUARTClockSource>
 80030a8:	4603      	mov	r3, r0
 80030aa:	4a3d      	ldr	r2, [pc, #244]	; (80031a0 <LL_RCC_GetUARTClockFreq+0x110>)
 80030ac:	4293      	cmp	r3, r2
 80030ae:	d00d      	beq.n	80030cc <LL_RCC_GetUARTClockFreq+0x3c>
 80030b0:	4a3b      	ldr	r2, [pc, #236]	; (80031a0 <LL_RCC_GetUARTClockFreq+0x110>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d803      	bhi.n	80030be <LL_RCC_GetUARTClockFreq+0x2e>
 80030b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80030ba:	d01c      	beq.n	80030f6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80030bc:	e02c      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80030be:	4a39      	ldr	r2, [pc, #228]	; (80031a4 <LL_RCC_GetUARTClockFreq+0x114>)
 80030c0:	4293      	cmp	r3, r2
 80030c2:	d007      	beq.n	80030d4 <LL_RCC_GetUARTClockFreq+0x44>
 80030c4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80030c8:	d00c      	beq.n	80030e4 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80030ca:	e025      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80030cc:	f000 f872 	bl	80031b4 <RCC_GetSystemClockFreq>
 80030d0:	60f8      	str	r0, [r7, #12]
        break;
 80030d2:	e021      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80030d4:	f7ff fe0e 	bl	8002cf4 <LL_RCC_HSI_IsReady>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d019      	beq.n	8003112 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80030de:	4b32      	ldr	r3, [pc, #200]	; (80031a8 <LL_RCC_GetUARTClockFreq+0x118>)
 80030e0:	60fb      	str	r3, [r7, #12]
        break;
 80030e2:	e016      	b.n	8003112 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80030e4:	f7ff fe1a 	bl	8002d1c <LL_RCC_LSE_IsReady>
 80030e8:	4603      	mov	r3, r0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d013      	beq.n	8003116 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80030ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f2:	60fb      	str	r3, [r7, #12]
        break;
 80030f4:	e00f      	b.n	8003116 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80030f6:	f000 f85d 	bl	80031b4 <RCC_GetSystemClockFreq>
 80030fa:	4603      	mov	r3, r0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 f8e9 	bl	80032d4 <RCC_GetHCLKClockFreq>
 8003102:	4603      	mov	r3, r0
 8003104:	4618      	mov	r0, r3
 8003106:	f000 f8fb 	bl	8003300 <RCC_GetPCLK1ClockFreq>
 800310a:	60f8      	str	r0, [r7, #12]
        break;
 800310c:	e004      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 800310e:	bf00      	nop
 8003110:	e002      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003112:	bf00      	nop
 8003114:	e000      	b.n	8003118 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003116:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800311e:	d135      	bne.n	800318c <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	f7ff fe89 	bl	8002e38 <LL_RCC_GetUARTClockSource>
 8003126:	4603      	mov	r3, r0
 8003128:	4a20      	ldr	r2, [pc, #128]	; (80031ac <LL_RCC_GetUARTClockFreq+0x11c>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00d      	beq.n	800314a <LL_RCC_GetUARTClockFreq+0xba>
 800312e:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <LL_RCC_GetUARTClockFreq+0x11c>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d803      	bhi.n	800313c <LL_RCC_GetUARTClockFreq+0xac>
 8003134:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003138:	d01c      	beq.n	8003174 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800313a:	e02c      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800313c:	4a1c      	ldr	r2, [pc, #112]	; (80031b0 <LL_RCC_GetUARTClockFreq+0x120>)
 800313e:	4293      	cmp	r3, r2
 8003140:	d007      	beq.n	8003152 <LL_RCC_GetUARTClockFreq+0xc2>
 8003142:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003146:	d00c      	beq.n	8003162 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8003148:	e025      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800314a:	f000 f833 	bl	80031b4 <RCC_GetSystemClockFreq>
 800314e:	60f8      	str	r0, [r7, #12]
        break;
 8003150:	e021      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003152:	f7ff fdcf 	bl	8002cf4 <LL_RCC_HSI_IsReady>
 8003156:	4603      	mov	r3, r0
 8003158:	2b00      	cmp	r3, #0
 800315a:	d019      	beq.n	8003190 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 800315c:	4b12      	ldr	r3, [pc, #72]	; (80031a8 <LL_RCC_GetUARTClockFreq+0x118>)
 800315e:	60fb      	str	r3, [r7, #12]
        break;
 8003160:	e016      	b.n	8003190 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003162:	f7ff fddb 	bl	8002d1c <LL_RCC_LSE_IsReady>
 8003166:	4603      	mov	r3, r0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d013      	beq.n	8003194 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 800316c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003170:	60fb      	str	r3, [r7, #12]
        break;
 8003172:	e00f      	b.n	8003194 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003174:	f000 f81e 	bl	80031b4 <RCC_GetSystemClockFreq>
 8003178:	4603      	mov	r3, r0
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f8aa 	bl	80032d4 <RCC_GetHCLKClockFreq>
 8003180:	4603      	mov	r3, r0
 8003182:	4618      	mov	r0, r3
 8003184:	f000 f8bc 	bl	8003300 <RCC_GetPCLK1ClockFreq>
 8003188:	60f8      	str	r0, [r7, #12]
        break;
 800318a:	e004      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 800318c:	bf00      	nop
 800318e:	e002      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003190:	bf00      	nop
 8003192:	e000      	b.n	8003196 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003194:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003196:	68fb      	ldr	r3, [r7, #12]
}
 8003198:	4618      	mov	r0, r3
 800319a:	3710      	adds	r7, #16
 800319c:	46bd      	mov	sp, r7
 800319e:	bd80      	pop	{r7, pc}
 80031a0:	00c00040 	.word	0x00c00040
 80031a4:	00c00080 	.word	0x00c00080
 80031a8:	00f42400 	.word	0x00f42400
 80031ac:	03000100 	.word	0x03000100
 80031b0:	03000200 	.word	0x03000200

080031b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b082      	sub	sp, #8
 80031b8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80031ba:	f7ff fdf1 	bl	8002da0 <LL_RCC_GetSysClkSource>
 80031be:	4603      	mov	r3, r0
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	d851      	bhi.n	8003268 <RCC_GetSystemClockFreq+0xb4>
 80031c4:	a201      	add	r2, pc, #4	; (adr r2, 80031cc <RCC_GetSystemClockFreq+0x18>)
 80031c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031ca:	bf00      	nop
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003269 	.word	0x08003269
 80031d4:	08003269 	.word	0x08003269
 80031d8:	08003269 	.word	0x08003269
 80031dc:	08003255 	.word	0x08003255
 80031e0:	08003269 	.word	0x08003269
 80031e4:	08003269 	.word	0x08003269
 80031e8:	08003269 	.word	0x08003269
 80031ec:	0800325b 	.word	0x0800325b
 80031f0:	08003269 	.word	0x08003269
 80031f4:	08003269 	.word	0x08003269
 80031f8:	08003269 	.word	0x08003269
 80031fc:	08003261 	.word	0x08003261
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003200:	f7ff fda0 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003204:	4603      	mov	r3, r0
 8003206:	2b00      	cmp	r3, #0
 8003208:	d111      	bne.n	800322e <RCC_GetSystemClockFreq+0x7a>
 800320a:	f7ff fd9b 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800320e:	4603      	mov	r3, r0
 8003210:	2b00      	cmp	r3, #0
 8003212:	d004      	beq.n	800321e <RCC_GetSystemClockFreq+0x6a>
 8003214:	f7ff fda8 	bl	8002d68 <LL_RCC_MSI_GetRange>
 8003218:	4603      	mov	r3, r0
 800321a:	0a1b      	lsrs	r3, r3, #8
 800321c:	e003      	b.n	8003226 <RCC_GetSystemClockFreq+0x72>
 800321e:	f7ff fdb1 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 8003222:	4603      	mov	r3, r0
 8003224:	0a1b      	lsrs	r3, r3, #8
 8003226:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <RCC_GetSystemClockFreq+0x114>)
 8003228:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800322c:	e010      	b.n	8003250 <RCC_GetSystemClockFreq+0x9c>
 800322e:	f7ff fd89 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003232:	4603      	mov	r3, r0
 8003234:	2b00      	cmp	r3, #0
 8003236:	d004      	beq.n	8003242 <RCC_GetSystemClockFreq+0x8e>
 8003238:	f7ff fd96 	bl	8002d68 <LL_RCC_MSI_GetRange>
 800323c:	4603      	mov	r3, r0
 800323e:	091b      	lsrs	r3, r3, #4
 8003240:	e003      	b.n	800324a <RCC_GetSystemClockFreq+0x96>
 8003242:	f7ff fd9f 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 8003246:	4603      	mov	r3, r0
 8003248:	091b      	lsrs	r3, r3, #4
 800324a:	4a1f      	ldr	r2, [pc, #124]	; (80032c8 <RCC_GetSystemClockFreq+0x114>)
 800324c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003250:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003252:	e033      	b.n	80032bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003254:	4b1d      	ldr	r3, [pc, #116]	; (80032cc <RCC_GetSystemClockFreq+0x118>)
 8003256:	607b      	str	r3, [r7, #4]
      break;
 8003258:	e030      	b.n	80032bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800325a:	4b1d      	ldr	r3, [pc, #116]	; (80032d0 <RCC_GetSystemClockFreq+0x11c>)
 800325c:	607b      	str	r3, [r7, #4]
      break;
 800325e:	e02d      	b.n	80032bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003260:	f000 f876 	bl	8003350 <RCC_PLL_GetFreqDomain_SYS>
 8003264:	6078      	str	r0, [r7, #4]
      break;
 8003266:	e029      	b.n	80032bc <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003268:	f7ff fd6c 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800326c:	4603      	mov	r3, r0
 800326e:	2b00      	cmp	r3, #0
 8003270:	d111      	bne.n	8003296 <RCC_GetSystemClockFreq+0xe2>
 8003272:	f7ff fd67 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003276:	4603      	mov	r3, r0
 8003278:	2b00      	cmp	r3, #0
 800327a:	d004      	beq.n	8003286 <RCC_GetSystemClockFreq+0xd2>
 800327c:	f7ff fd74 	bl	8002d68 <LL_RCC_MSI_GetRange>
 8003280:	4603      	mov	r3, r0
 8003282:	0a1b      	lsrs	r3, r3, #8
 8003284:	e003      	b.n	800328e <RCC_GetSystemClockFreq+0xda>
 8003286:	f7ff fd7d 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 800328a:	4603      	mov	r3, r0
 800328c:	0a1b      	lsrs	r3, r3, #8
 800328e:	4a0e      	ldr	r2, [pc, #56]	; (80032c8 <RCC_GetSystemClockFreq+0x114>)
 8003290:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003294:	e010      	b.n	80032b8 <RCC_GetSystemClockFreq+0x104>
 8003296:	f7ff fd55 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800329a:	4603      	mov	r3, r0
 800329c:	2b00      	cmp	r3, #0
 800329e:	d004      	beq.n	80032aa <RCC_GetSystemClockFreq+0xf6>
 80032a0:	f7ff fd62 	bl	8002d68 <LL_RCC_MSI_GetRange>
 80032a4:	4603      	mov	r3, r0
 80032a6:	091b      	lsrs	r3, r3, #4
 80032a8:	e003      	b.n	80032b2 <RCC_GetSystemClockFreq+0xfe>
 80032aa:	f7ff fd6b 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 80032ae:	4603      	mov	r3, r0
 80032b0:	091b      	lsrs	r3, r3, #4
 80032b2:	4a05      	ldr	r2, [pc, #20]	; (80032c8 <RCC_GetSystemClockFreq+0x114>)
 80032b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032b8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80032ba:	bf00      	nop
  }

  return frequency;
 80032bc:	687b      	ldr	r3, [r7, #4]
}
 80032be:	4618      	mov	r0, r3
 80032c0:	3708      	adds	r7, #8
 80032c2:	46bd      	mov	sp, r7
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	0800574c 	.word	0x0800574c
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b082      	sub	sp, #8
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80032dc:	f7ff fd6e 	bl	8002dbc <LL_RCC_GetAHBPrescaler>
 80032e0:	4603      	mov	r3, r0
 80032e2:	091b      	lsrs	r3, r3, #4
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	4a04      	ldr	r2, [pc, #16]	; (80032fc <RCC_GetHCLKClockFreq+0x28>)
 80032ea:	5cd3      	ldrb	r3, [r2, r3]
 80032ec:	461a      	mov	r2, r3
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	40d3      	lsrs	r3, r2
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3708      	adds	r7, #8
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bd80      	pop	{r7, pc}
 80032fa:	bf00      	nop
 80032fc:	08005734 	.word	0x08005734

08003300 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003308:	f7ff fd66 	bl	8002dd8 <LL_RCC_GetAPB1Prescaler>
 800330c:	4603      	mov	r3, r0
 800330e:	0a1b      	lsrs	r3, r3, #8
 8003310:	4a04      	ldr	r2, [pc, #16]	; (8003324 <RCC_GetPCLK1ClockFreq+0x24>)
 8003312:	5cd3      	ldrb	r3, [r2, r3]
 8003314:	461a      	mov	r2, r3
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	40d3      	lsrs	r3, r2
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	08005744 	.word	0x08005744

08003328 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003330:	f7ff fd60 	bl	8002df4 <LL_RCC_GetAPB2Prescaler>
 8003334:	4603      	mov	r3, r0
 8003336:	0adb      	lsrs	r3, r3, #11
 8003338:	4a04      	ldr	r2, [pc, #16]	; (800334c <RCC_GetPCLK2ClockFreq+0x24>)
 800333a:	5cd3      	ldrb	r3, [r2, r3]
 800333c:	461a      	mov	r2, r3
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	40d3      	lsrs	r3, r2
}
 8003342:	4618      	mov	r0, r3
 8003344:	3708      	adds	r7, #8
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}
 800334a:	bf00      	nop
 800334c:	08005744 	.word	0x08005744

08003350 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003350:	b590      	push	{r4, r7, lr}
 8003352:	b083      	sub	sp, #12
 8003354:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003356:	f7ff fd83 	bl	8002e60 <LL_RCC_PLL_GetMainSource>
 800335a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d02d      	beq.n	80033be <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8003362:	2b03      	cmp	r3, #3
 8003364:	d02e      	beq.n	80033c4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003366:	2b01      	cmp	r3, #1
 8003368:	d12f      	bne.n	80033ca <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800336a:	f7ff fceb 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800336e:	4603      	mov	r3, r0
 8003370:	2b00      	cmp	r3, #0
 8003372:	d111      	bne.n	8003398 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003374:	f7ff fce6 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003378:	4603      	mov	r3, r0
 800337a:	2b00      	cmp	r3, #0
 800337c:	d004      	beq.n	8003388 <RCC_PLL_GetFreqDomain_SYS+0x38>
 800337e:	f7ff fcf3 	bl	8002d68 <LL_RCC_MSI_GetRange>
 8003382:	4603      	mov	r3, r0
 8003384:	0a1b      	lsrs	r3, r3, #8
 8003386:	e003      	b.n	8003390 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8003388:	f7ff fcfc 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 800338c:	4603      	mov	r3, r0
 800338e:	0a1b      	lsrs	r3, r3, #8
 8003390:	4a2f      	ldr	r2, [pc, #188]	; (8003450 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003392:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003396:	e010      	b.n	80033ba <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8003398:	f7ff fcd4 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d004      	beq.n	80033ac <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80033a2:	f7ff fce1 	bl	8002d68 <LL_RCC_MSI_GetRange>
 80033a6:	4603      	mov	r3, r0
 80033a8:	091b      	lsrs	r3, r3, #4
 80033aa:	e003      	b.n	80033b4 <RCC_PLL_GetFreqDomain_SYS+0x64>
 80033ac:	f7ff fcea 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 80033b0:	4603      	mov	r3, r0
 80033b2:	091b      	lsrs	r3, r3, #4
 80033b4:	4a26      	ldr	r2, [pc, #152]	; (8003450 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80033b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033ba:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80033bc:	e02f      	b.n	800341e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80033be:	4b25      	ldr	r3, [pc, #148]	; (8003454 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80033c0:	607b      	str	r3, [r7, #4]
      break;
 80033c2:	e02c      	b.n	800341e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80033c4:	4b24      	ldr	r3, [pc, #144]	; (8003458 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80033c6:	607b      	str	r3, [r7, #4]
      break;
 80033c8:	e029      	b.n	800341e <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80033ca:	f7ff fcbb 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	d111      	bne.n	80033f8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80033d4:	f7ff fcb6 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033d8:	4603      	mov	r3, r0
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d004      	beq.n	80033e8 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80033de:	f7ff fcc3 	bl	8002d68 <LL_RCC_MSI_GetRange>
 80033e2:	4603      	mov	r3, r0
 80033e4:	0a1b      	lsrs	r3, r3, #8
 80033e6:	e003      	b.n	80033f0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80033e8:	f7ff fccc 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 80033ec:	4603      	mov	r3, r0
 80033ee:	0a1b      	lsrs	r3, r3, #8
 80033f0:	4a17      	ldr	r2, [pc, #92]	; (8003450 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80033f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80033f6:	e010      	b.n	800341a <RCC_PLL_GetFreqDomain_SYS+0xca>
 80033f8:	f7ff fca4 	bl	8002d44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80033fc:	4603      	mov	r3, r0
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8003402:	f7ff fcb1 	bl	8002d68 <LL_RCC_MSI_GetRange>
 8003406:	4603      	mov	r3, r0
 8003408:	091b      	lsrs	r3, r3, #4
 800340a:	e003      	b.n	8003414 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 800340c:	f7ff fcba 	bl	8002d84 <LL_RCC_MSI_GetRangeAfterStandby>
 8003410:	4603      	mov	r3, r0
 8003412:	091b      	lsrs	r3, r3, #4
 8003414:	4a0e      	ldr	r2, [pc, #56]	; (8003450 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003416:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800341a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800341c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800341e:	f7ff fd49 	bl	8002eb4 <LL_RCC_PLL_GetDivider>
 8003422:	4603      	mov	r3, r0
 8003424:	091b      	lsrs	r3, r3, #4
 8003426:	3301      	adds	r3, #1
 8003428:	687a      	ldr	r2, [r7, #4]
 800342a:	fbb2 f4f3 	udiv	r4, r2, r3
 800342e:	f7ff fd25 	bl	8002e7c <LL_RCC_PLL_GetN>
 8003432:	4603      	mov	r3, r0
 8003434:	fb03 f404 	mul.w	r4, r3, r4
 8003438:	f7ff fd2e 	bl	8002e98 <LL_RCC_PLL_GetR>
 800343c:	4603      	mov	r3, r0
 800343e:	0e5b      	lsrs	r3, r3, #25
 8003440:	3301      	adds	r3, #1
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003448:	4618      	mov	r0, r3
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bd90      	pop	{r4, r7, pc}
 8003450:	0800574c 	.word	0x0800574c
 8003454:	00f42400 	.word	0x00f42400
 8003458:	007a1200 	.word	0x007a1200

0800345c <LL_SPI_IsEnabled>:
{
 800345c:	b480      	push	{r7}
 800345e:	b083      	sub	sp, #12
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800346c:	2b40      	cmp	r3, #64	; 0x40
 800346e:	d101      	bne.n	8003474 <LL_SPI_IsEnabled+0x18>
 8003470:	2301      	movs	r3, #1
 8003472:	e000      	b.n	8003476 <LL_SPI_IsEnabled+0x1a>
 8003474:	2300      	movs	r3, #0
}
 8003476:	4618      	mov	r0, r3
 8003478:	370c      	adds	r7, #12
 800347a:	46bd      	mov	sp, r7
 800347c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003480:	4770      	bx	lr

08003482 <LL_SPI_SetCRCPolynomial>:
{
 8003482:	b480      	push	{r7}
 8003484:	b083      	sub	sp, #12
 8003486:	af00      	add	r7, sp, #0
 8003488:	6078      	str	r0, [r7, #4]
 800348a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	b29b      	uxth	r3, r3
 8003490:	461a      	mov	r2, r3
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	611a      	str	r2, [r3, #16]
}
 8003496:	bf00      	nop
 8003498:	370c      	adds	r7, #12
 800349a:	46bd      	mov	sp, r7
 800349c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a0:	4770      	bx	lr

080034a2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b084      	sub	sp, #16
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	6078      	str	r0, [r7, #4]
 80034aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f7ff ffd3 	bl	800345c <LL_SPI_IsEnabled>
 80034b6:	4603      	mov	r3, r0
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d13b      	bne.n	8003534 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80034c4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80034c8:	683a      	ldr	r2, [r7, #0]
 80034ca:	6811      	ldr	r1, [r2, #0]
 80034cc:	683a      	ldr	r2, [r7, #0]
 80034ce:	6852      	ldr	r2, [r2, #4]
 80034d0:	4311      	orrs	r1, r2
 80034d2:	683a      	ldr	r2, [r7, #0]
 80034d4:	68d2      	ldr	r2, [r2, #12]
 80034d6:	4311      	orrs	r1, r2
 80034d8:	683a      	ldr	r2, [r7, #0]
 80034da:	6912      	ldr	r2, [r2, #16]
 80034dc:	4311      	orrs	r1, r2
 80034de:	683a      	ldr	r2, [r7, #0]
 80034e0:	6952      	ldr	r2, [r2, #20]
 80034e2:	4311      	orrs	r1, r2
 80034e4:	683a      	ldr	r2, [r7, #0]
 80034e6:	6992      	ldr	r2, [r2, #24]
 80034e8:	4311      	orrs	r1, r2
 80034ea:	683a      	ldr	r2, [r7, #0]
 80034ec:	69d2      	ldr	r2, [r2, #28]
 80034ee:	4311      	orrs	r1, r2
 80034f0:	683a      	ldr	r2, [r7, #0]
 80034f2:	6a12      	ldr	r2, [r2, #32]
 80034f4:	430a      	orrs	r2, r1
 80034f6:	431a      	orrs	r2, r3
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	685b      	ldr	r3, [r3, #4]
 8003500:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003504:	f023 0304 	bic.w	r3, r3, #4
 8003508:	683a      	ldr	r2, [r7, #0]
 800350a:	6891      	ldr	r1, [r2, #8]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	6952      	ldr	r2, [r2, #20]
 8003510:	0c12      	lsrs	r2, r2, #16
 8003512:	430a      	orrs	r2, r1
 8003514:	431a      	orrs	r2, r3
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	6a1b      	ldr	r3, [r3, #32]
 800351e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003522:	d105      	bne.n	8003530 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003528:	4619      	mov	r1, r3
 800352a:	6878      	ldr	r0, [r7, #4]
 800352c:	f7ff ffa9 	bl	8003482 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003530:	2300      	movs	r3, #0
 8003532:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003534:	7bfb      	ldrb	r3, [r7, #15]
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <LL_TIM_SetPrescaler>:
{
 800353e:	b480      	push	{r7}
 8003540:	b083      	sub	sp, #12
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	683a      	ldr	r2, [r7, #0]
 800354c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <LL_TIM_SetAutoReload>:
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
 8003562:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	683a      	ldr	r2, [r7, #0]
 8003568:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800356a:	bf00      	nop
 800356c:	370c      	adds	r7, #12
 800356e:	46bd      	mov	sp, r7
 8003570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003574:	4770      	bx	lr

08003576 <LL_TIM_SetRepetitionCounter>:
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	683a      	ldr	r2, [r7, #0]
 8003584:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003586:	bf00      	nop
 8003588:	370c      	adds	r7, #12
 800358a:	46bd      	mov	sp, r7
 800358c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003590:	4770      	bx	lr

08003592 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003592:	b480      	push	{r7}
 8003594:	b083      	sub	sp, #12
 8003596:	af00      	add	r7, sp, #0
 8003598:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	f043 0201 	orr.w	r2, r3, #1
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	615a      	str	r2, [r3, #20]
}
 80035a6:	bf00      	nop
 80035a8:	370c      	adds	r7, #12
 80035aa:	46bd      	mov	sp, r7
 80035ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035b0:	4770      	bx	lr
	...

080035b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b084      	sub	sp, #16
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	4a3d      	ldr	r2, [pc, #244]	; (80036bc <LL_TIM_Init+0x108>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d013      	beq.n	80035f4 <LL_TIM_Init+0x40>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80035d2:	d00f      	beq.n	80035f4 <LL_TIM_Init+0x40>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	4a3a      	ldr	r2, [pc, #232]	; (80036c0 <LL_TIM_Init+0x10c>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d00b      	beq.n	80035f4 <LL_TIM_Init+0x40>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	4a39      	ldr	r2, [pc, #228]	; (80036c4 <LL_TIM_Init+0x110>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d007      	beq.n	80035f4 <LL_TIM_Init+0x40>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <LL_TIM_Init+0x114>)
 80035e8:	4293      	cmp	r3, r2
 80035ea:	d003      	beq.n	80035f4 <LL_TIM_Init+0x40>
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a37      	ldr	r2, [pc, #220]	; (80036cc <LL_TIM_Init+0x118>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d106      	bne.n	8003602 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035fa:	683b      	ldr	r3, [r7, #0]
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	4313      	orrs	r3, r2
 8003600:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2d      	ldr	r2, [pc, #180]	; (80036bc <LL_TIM_Init+0x108>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d01f      	beq.n	800364a <LL_TIM_Init+0x96>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003610:	d01b      	beq.n	800364a <LL_TIM_Init+0x96>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2a      	ldr	r2, [pc, #168]	; (80036c0 <LL_TIM_Init+0x10c>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d017      	beq.n	800364a <LL_TIM_Init+0x96>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a29      	ldr	r2, [pc, #164]	; (80036c4 <LL_TIM_Init+0x110>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d013      	beq.n	800364a <LL_TIM_Init+0x96>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a28      	ldr	r2, [pc, #160]	; (80036c8 <LL_TIM_Init+0x114>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d00f      	beq.n	800364a <LL_TIM_Init+0x96>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a27      	ldr	r2, [pc, #156]	; (80036cc <LL_TIM_Init+0x118>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d00b      	beq.n	800364a <LL_TIM_Init+0x96>
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	4a26      	ldr	r2, [pc, #152]	; (80036d0 <LL_TIM_Init+0x11c>)
 8003636:	4293      	cmp	r3, r2
 8003638:	d007      	beq.n	800364a <LL_TIM_Init+0x96>
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	4a25      	ldr	r2, [pc, #148]	; (80036d4 <LL_TIM_Init+0x120>)
 800363e:	4293      	cmp	r3, r2
 8003640:	d003      	beq.n	800364a <LL_TIM_Init+0x96>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	4a24      	ldr	r2, [pc, #144]	; (80036d8 <LL_TIM_Init+0x124>)
 8003646:	4293      	cmp	r3, r2
 8003648:	d106      	bne.n	8003658 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	68db      	ldr	r3, [r3, #12]
 8003654:	4313      	orrs	r3, r2
 8003656:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	4619      	mov	r1, r3
 8003664:	6878      	ldr	r0, [r7, #4]
 8003666:	f7ff ff78 	bl	800355a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800366a:	683b      	ldr	r3, [r7, #0]
 800366c:	881b      	ldrh	r3, [r3, #0]
 800366e:	4619      	mov	r1, r3
 8003670:	6878      	ldr	r0, [r7, #4]
 8003672:	f7ff ff64 	bl	800353e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	4a10      	ldr	r2, [pc, #64]	; (80036bc <LL_TIM_Init+0x108>)
 800367a:	4293      	cmp	r3, r2
 800367c:	d00f      	beq.n	800369e <LL_TIM_Init+0xea>
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	4a12      	ldr	r2, [pc, #72]	; (80036cc <LL_TIM_Init+0x118>)
 8003682:	4293      	cmp	r3, r2
 8003684:	d00b      	beq.n	800369e <LL_TIM_Init+0xea>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	4a11      	ldr	r2, [pc, #68]	; (80036d0 <LL_TIM_Init+0x11c>)
 800368a:	4293      	cmp	r3, r2
 800368c:	d007      	beq.n	800369e <LL_TIM_Init+0xea>
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	4a10      	ldr	r2, [pc, #64]	; (80036d4 <LL_TIM_Init+0x120>)
 8003692:	4293      	cmp	r3, r2
 8003694:	d003      	beq.n	800369e <LL_TIM_Init+0xea>
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a0f      	ldr	r2, [pc, #60]	; (80036d8 <LL_TIM_Init+0x124>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d105      	bne.n	80036aa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	691b      	ldr	r3, [r3, #16]
 80036a2:	4619      	mov	r1, r3
 80036a4:	6878      	ldr	r0, [r7, #4]
 80036a6:	f7ff ff66 	bl	8003576 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff ff71 	bl	8003592 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3710      	adds	r7, #16
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
 80036ba:	bf00      	nop
 80036bc:	40012c00 	.word	0x40012c00
 80036c0:	40000400 	.word	0x40000400
 80036c4:	40000800 	.word	0x40000800
 80036c8:	40000c00 	.word	0x40000c00
 80036cc:	40013400 	.word	0x40013400
 80036d0:	40014000 	.word	0x40014000
 80036d4:	40014400 	.word	0x40014400
 80036d8:	40014800 	.word	0x40014800

080036dc <LL_USART_IsEnabled>:
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f003 0301 	and.w	r3, r3, #1
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <LL_USART_IsEnabled+0x18>
 80036f0:	2301      	movs	r3, #1
 80036f2:	e000      	b.n	80036f6 <LL_USART_IsEnabled+0x1a>
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	370c      	adds	r7, #12
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr

08003702 <LL_USART_SetStopBitsLength>:
{
 8003702:	b480      	push	{r7}
 8003704:	b083      	sub	sp, #12
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	431a      	orrs	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	605a      	str	r2, [r3, #4]
}
 800371c:	bf00      	nop
 800371e:	370c      	adds	r7, #12
 8003720:	46bd      	mov	sp, r7
 8003722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003726:	4770      	bx	lr

08003728 <LL_USART_SetHWFlowCtrl>:
{
 8003728:	b480      	push	{r7}
 800372a:	b083      	sub	sp, #12
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	431a      	orrs	r2, r3
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	609a      	str	r2, [r3, #8]
}
 8003742:	bf00      	nop
 8003744:	370c      	adds	r7, #12
 8003746:	46bd      	mov	sp, r7
 8003748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800374c:	4770      	bx	lr

0800374e <LL_USART_SetBaudRate>:
{
 800374e:	b480      	push	{r7}
 8003750:	b087      	sub	sp, #28
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
 800375a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003762:	d11a      	bne.n	800379a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003764:	68bb      	ldr	r3, [r7, #8]
 8003766:	005a      	lsls	r2, r3, #1
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	085b      	lsrs	r3, r3, #1
 800376c:	441a      	add	r2, r3
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	fbb2 f3f3 	udiv	r3, r2, r3
 8003774:	b29b      	uxth	r3, r3
 8003776:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003778:	697a      	ldr	r2, [r7, #20]
 800377a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800377e:	4013      	ands	r3, r2
 8003780:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	b29b      	uxth	r3, r3
 8003788:	f003 0307 	and.w	r3, r3, #7
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	4313      	orrs	r3, r2
 8003790:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	693a      	ldr	r2, [r7, #16]
 8003796:	60da      	str	r2, [r3, #12]
}
 8003798:	e00a      	b.n	80037b0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	085a      	lsrs	r2, r3, #1
 800379e:	68bb      	ldr	r3, [r7, #8]
 80037a0:	441a      	add	r2, r3
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80037a8:	b29b      	uxth	r3, r3
 80037aa:	461a      	mov	r2, r3
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	60da      	str	r2, [r3, #12]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b084      	sub	sp, #16
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
 80037c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80037ca:	2300      	movs	r3, #0
 80037cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80037ce:	6878      	ldr	r0, [r7, #4]
 80037d0:	f7ff ff84 	bl	80036dc <LL_USART_IsEnabled>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d15b      	bne.n	8003892 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681a      	ldr	r2, [r3, #0]
 80037de:	4b2f      	ldr	r3, [pc, #188]	; (800389c <LL_USART_Init+0xe0>)
 80037e0:	4013      	ands	r3, r2
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	6851      	ldr	r1, [r2, #4]
 80037e6:	683a      	ldr	r2, [r7, #0]
 80037e8:	68d2      	ldr	r2, [r2, #12]
 80037ea:	4311      	orrs	r1, r2
 80037ec:	683a      	ldr	r2, [r7, #0]
 80037ee:	6912      	ldr	r2, [r2, #16]
 80037f0:	4311      	orrs	r1, r2
 80037f2:	683a      	ldr	r2, [r7, #0]
 80037f4:	6992      	ldr	r2, [r2, #24]
 80037f6:	430a      	orrs	r2, r1
 80037f8:	431a      	orrs	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	689b      	ldr	r3, [r3, #8]
 8003802:	4619      	mov	r1, r3
 8003804:	6878      	ldr	r0, [r7, #4]
 8003806:	f7ff ff7c 	bl	8003702 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	695b      	ldr	r3, [r3, #20]
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f7ff ff89 	bl	8003728 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	4a21      	ldr	r2, [pc, #132]	; (80038a0 <LL_USART_Init+0xe4>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d104      	bne.n	8003828 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800381e:	2003      	movs	r0, #3
 8003820:	f7ff fb56 	bl	8002ed0 <LL_RCC_GetUSARTClockFreq>
 8003824:	60b8      	str	r0, [r7, #8]
 8003826:	e023      	b.n	8003870 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	4a1e      	ldr	r2, [pc, #120]	; (80038a4 <LL_USART_Init+0xe8>)
 800382c:	4293      	cmp	r3, r2
 800382e:	d104      	bne.n	800383a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003830:	200c      	movs	r0, #12
 8003832:	f7ff fb4d 	bl	8002ed0 <LL_RCC_GetUSARTClockFreq>
 8003836:	60b8      	str	r0, [r7, #8]
 8003838:	e01a      	b.n	8003870 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	4a1a      	ldr	r2, [pc, #104]	; (80038a8 <LL_USART_Init+0xec>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d104      	bne.n	800384c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003842:	2030      	movs	r0, #48	; 0x30
 8003844:	f7ff fb44 	bl	8002ed0 <LL_RCC_GetUSARTClockFreq>
 8003848:	60b8      	str	r0, [r7, #8]
 800384a:	e011      	b.n	8003870 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a17      	ldr	r2, [pc, #92]	; (80038ac <LL_USART_Init+0xf0>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d104      	bne.n	800385e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003854:	20c0      	movs	r0, #192	; 0xc0
 8003856:	f7ff fc1b 	bl	8003090 <LL_RCC_GetUARTClockFreq>
 800385a:	60b8      	str	r0, [r7, #8]
 800385c:	e008      	b.n	8003870 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a13      	ldr	r2, [pc, #76]	; (80038b0 <LL_USART_Init+0xf4>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d104      	bne.n	8003870 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003866:	f44f 7040 	mov.w	r0, #768	; 0x300
 800386a:	f7ff fc11 	bl	8003090 <LL_RCC_GetUARTClockFreq>
 800386e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d009      	beq.n	8003892 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800387e:	2300      	movs	r3, #0
 8003880:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	699a      	ldr	r2, [r3, #24]
 8003886:	683b      	ldr	r3, [r7, #0]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	68b9      	ldr	r1, [r7, #8]
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f7ff ff5e 	bl	800374e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003892:	7bfb      	ldrb	r3, [r7, #15]
}
 8003894:	4618      	mov	r0, r3
 8003896:	3710      	adds	r7, #16
 8003898:	46bd      	mov	sp, r7
 800389a:	bd80      	pop	{r7, pc}
 800389c:	efff69f3 	.word	0xefff69f3
 80038a0:	40013800 	.word	0x40013800
 80038a4:	40004400 	.word	0x40004400
 80038a8:	40004800 	.word	0x40004800
 80038ac:	40004c00 	.word	0x40004c00
 80038b0:	40005000 	.word	0x40005000

080038b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b083      	sub	sp, #12
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
 80038bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80038be:	687a      	ldr	r2, [r7, #4]
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c6:	4a07      	ldr	r2, [pc, #28]	; (80038e4 <LL_InitTick+0x30>)
 80038c8:	3b01      	subs	r3, #1
 80038ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80038cc:	4b05      	ldr	r3, [pc, #20]	; (80038e4 <LL_InitTick+0x30>)
 80038ce:	2200      	movs	r2, #0
 80038d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80038d2:	4b04      	ldr	r3, [pc, #16]	; (80038e4 <LL_InitTick+0x30>)
 80038d4:	2205      	movs	r2, #5
 80038d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80038d8:	bf00      	nop
 80038da:	370c      	adds	r7, #12
 80038dc:	46bd      	mov	sp, r7
 80038de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038e2:	4770      	bx	lr
 80038e4:	e000e010 	.word	0xe000e010

080038e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80038f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f7ff ffdd 	bl	80038b4 <LL_InitTick>
}
 80038fa:	bf00      	nop
 80038fc:	3708      	adds	r7, #8
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
	...

08003904 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003904:	b480      	push	{r7}
 8003906:	b085      	sub	sp, #20
 8003908:	af00      	add	r7, sp, #0
 800390a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800390c:	4b0f      	ldr	r3, [pc, #60]	; (800394c <LL_mDelay+0x48>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003916:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800391e:	d00c      	beq.n	800393a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	3301      	adds	r3, #1
 8003924:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8003926:	e008      	b.n	800393a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003928:	4b08      	ldr	r3, [pc, #32]	; (800394c <LL_mDelay+0x48>)
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d002      	beq.n	800393a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	3b01      	subs	r3, #1
 8003938:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	2b00      	cmp	r3, #0
 800393e:	d1f3      	bne.n	8003928 <LL_mDelay+0x24>
    }
  }
}
 8003940:	bf00      	nop
 8003942:	3714      	adds	r7, #20
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	e000e010 	.word	0xe000e010

08003950 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003950:	b480      	push	{r7}
 8003952:	b083      	sub	sp, #12
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003958:	4a04      	ldr	r2, [pc, #16]	; (800396c <LL_SetSystemCoreClock+0x1c>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6013      	str	r3, [r2, #0]
}
 800395e:	bf00      	nop
 8003960:	370c      	adds	r7, #12
 8003962:	46bd      	mov	sp, r7
 8003964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003968:	4770      	bx	lr
 800396a:	bf00      	nop
 800396c:	20000554 	.word	0x20000554

08003970 <__errno>:
 8003970:	4b01      	ldr	r3, [pc, #4]	; (8003978 <__errno+0x8>)
 8003972:	6818      	ldr	r0, [r3, #0]
 8003974:	4770      	bx	lr
 8003976:	bf00      	nop
 8003978:	20000558 	.word	0x20000558

0800397c <__libc_init_array>:
 800397c:	b570      	push	{r4, r5, r6, lr}
 800397e:	4e0d      	ldr	r6, [pc, #52]	; (80039b4 <__libc_init_array+0x38>)
 8003980:	4c0d      	ldr	r4, [pc, #52]	; (80039b8 <__libc_init_array+0x3c>)
 8003982:	1ba4      	subs	r4, r4, r6
 8003984:	10a4      	asrs	r4, r4, #2
 8003986:	2500      	movs	r5, #0
 8003988:	42a5      	cmp	r5, r4
 800398a:	d109      	bne.n	80039a0 <__libc_init_array+0x24>
 800398c:	4e0b      	ldr	r6, [pc, #44]	; (80039bc <__libc_init_array+0x40>)
 800398e:	4c0c      	ldr	r4, [pc, #48]	; (80039c0 <__libc_init_array+0x44>)
 8003990:	f000 ff68 	bl	8004864 <_init>
 8003994:	1ba4      	subs	r4, r4, r6
 8003996:	10a4      	asrs	r4, r4, #2
 8003998:	2500      	movs	r5, #0
 800399a:	42a5      	cmp	r5, r4
 800399c:	d105      	bne.n	80039aa <__libc_init_array+0x2e>
 800399e:	bd70      	pop	{r4, r5, r6, pc}
 80039a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039a4:	4798      	blx	r3
 80039a6:	3501      	adds	r5, #1
 80039a8:	e7ee      	b.n	8003988 <__libc_init_array+0xc>
 80039aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80039ae:	4798      	blx	r3
 80039b0:	3501      	adds	r5, #1
 80039b2:	e7f2      	b.n	800399a <__libc_init_array+0x1e>
 80039b4:	0800581c 	.word	0x0800581c
 80039b8:	0800581c 	.word	0x0800581c
 80039bc:	0800581c 	.word	0x0800581c
 80039c0:	08005820 	.word	0x08005820

080039c4 <memset>:
 80039c4:	4402      	add	r2, r0
 80039c6:	4603      	mov	r3, r0
 80039c8:	4293      	cmp	r3, r2
 80039ca:	d100      	bne.n	80039ce <memset+0xa>
 80039cc:	4770      	bx	lr
 80039ce:	f803 1b01 	strb.w	r1, [r3], #1
 80039d2:	e7f9      	b.n	80039c8 <memset+0x4>

080039d4 <iprintf>:
 80039d4:	b40f      	push	{r0, r1, r2, r3}
 80039d6:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <iprintf+0x2c>)
 80039d8:	b513      	push	{r0, r1, r4, lr}
 80039da:	681c      	ldr	r4, [r3, #0]
 80039dc:	b124      	cbz	r4, 80039e8 <iprintf+0x14>
 80039de:	69a3      	ldr	r3, [r4, #24]
 80039e0:	b913      	cbnz	r3, 80039e8 <iprintf+0x14>
 80039e2:	4620      	mov	r0, r4
 80039e4:	f000 fa22 	bl	8003e2c <__sinit>
 80039e8:	ab05      	add	r3, sp, #20
 80039ea:	9a04      	ldr	r2, [sp, #16]
 80039ec:	68a1      	ldr	r1, [r4, #8]
 80039ee:	9301      	str	r3, [sp, #4]
 80039f0:	4620      	mov	r0, r4
 80039f2:	f000 fbdb 	bl	80041ac <_vfiprintf_r>
 80039f6:	b002      	add	sp, #8
 80039f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80039fc:	b004      	add	sp, #16
 80039fe:	4770      	bx	lr
 8003a00:	20000558 	.word	0x20000558

08003a04 <_puts_r>:
 8003a04:	b570      	push	{r4, r5, r6, lr}
 8003a06:	460e      	mov	r6, r1
 8003a08:	4605      	mov	r5, r0
 8003a0a:	b118      	cbz	r0, 8003a14 <_puts_r+0x10>
 8003a0c:	6983      	ldr	r3, [r0, #24]
 8003a0e:	b90b      	cbnz	r3, 8003a14 <_puts_r+0x10>
 8003a10:	f000 fa0c 	bl	8003e2c <__sinit>
 8003a14:	69ab      	ldr	r3, [r5, #24]
 8003a16:	68ac      	ldr	r4, [r5, #8]
 8003a18:	b913      	cbnz	r3, 8003a20 <_puts_r+0x1c>
 8003a1a:	4628      	mov	r0, r5
 8003a1c:	f000 fa06 	bl	8003e2c <__sinit>
 8003a20:	4b23      	ldr	r3, [pc, #140]	; (8003ab0 <_puts_r+0xac>)
 8003a22:	429c      	cmp	r4, r3
 8003a24:	d117      	bne.n	8003a56 <_puts_r+0x52>
 8003a26:	686c      	ldr	r4, [r5, #4]
 8003a28:	89a3      	ldrh	r3, [r4, #12]
 8003a2a:	071b      	lsls	r3, r3, #28
 8003a2c:	d51d      	bpl.n	8003a6a <_puts_r+0x66>
 8003a2e:	6923      	ldr	r3, [r4, #16]
 8003a30:	b1db      	cbz	r3, 8003a6a <_puts_r+0x66>
 8003a32:	3e01      	subs	r6, #1
 8003a34:	68a3      	ldr	r3, [r4, #8]
 8003a36:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003a3a:	3b01      	subs	r3, #1
 8003a3c:	60a3      	str	r3, [r4, #8]
 8003a3e:	b9e9      	cbnz	r1, 8003a7c <_puts_r+0x78>
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	da2e      	bge.n	8003aa2 <_puts_r+0x9e>
 8003a44:	4622      	mov	r2, r4
 8003a46:	210a      	movs	r1, #10
 8003a48:	4628      	mov	r0, r5
 8003a4a:	f000 f83f 	bl	8003acc <__swbuf_r>
 8003a4e:	3001      	adds	r0, #1
 8003a50:	d011      	beq.n	8003a76 <_puts_r+0x72>
 8003a52:	200a      	movs	r0, #10
 8003a54:	e011      	b.n	8003a7a <_puts_r+0x76>
 8003a56:	4b17      	ldr	r3, [pc, #92]	; (8003ab4 <_puts_r+0xb0>)
 8003a58:	429c      	cmp	r4, r3
 8003a5a:	d101      	bne.n	8003a60 <_puts_r+0x5c>
 8003a5c:	68ac      	ldr	r4, [r5, #8]
 8003a5e:	e7e3      	b.n	8003a28 <_puts_r+0x24>
 8003a60:	4b15      	ldr	r3, [pc, #84]	; (8003ab8 <_puts_r+0xb4>)
 8003a62:	429c      	cmp	r4, r3
 8003a64:	bf08      	it	eq
 8003a66:	68ec      	ldreq	r4, [r5, #12]
 8003a68:	e7de      	b.n	8003a28 <_puts_r+0x24>
 8003a6a:	4621      	mov	r1, r4
 8003a6c:	4628      	mov	r0, r5
 8003a6e:	f000 f87f 	bl	8003b70 <__swsetup_r>
 8003a72:	2800      	cmp	r0, #0
 8003a74:	d0dd      	beq.n	8003a32 <_puts_r+0x2e>
 8003a76:	f04f 30ff 	mov.w	r0, #4294967295
 8003a7a:	bd70      	pop	{r4, r5, r6, pc}
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	da04      	bge.n	8003a8a <_puts_r+0x86>
 8003a80:	69a2      	ldr	r2, [r4, #24]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	dc06      	bgt.n	8003a94 <_puts_r+0x90>
 8003a86:	290a      	cmp	r1, #10
 8003a88:	d004      	beq.n	8003a94 <_puts_r+0x90>
 8003a8a:	6823      	ldr	r3, [r4, #0]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	6022      	str	r2, [r4, #0]
 8003a90:	7019      	strb	r1, [r3, #0]
 8003a92:	e7cf      	b.n	8003a34 <_puts_r+0x30>
 8003a94:	4622      	mov	r2, r4
 8003a96:	4628      	mov	r0, r5
 8003a98:	f000 f818 	bl	8003acc <__swbuf_r>
 8003a9c:	3001      	adds	r0, #1
 8003a9e:	d1c9      	bne.n	8003a34 <_puts_r+0x30>
 8003aa0:	e7e9      	b.n	8003a76 <_puts_r+0x72>
 8003aa2:	6823      	ldr	r3, [r4, #0]
 8003aa4:	200a      	movs	r0, #10
 8003aa6:	1c5a      	adds	r2, r3, #1
 8003aa8:	6022      	str	r2, [r4, #0]
 8003aaa:	7018      	strb	r0, [r3, #0]
 8003aac:	e7e5      	b.n	8003a7a <_puts_r+0x76>
 8003aae:	bf00      	nop
 8003ab0:	080057a0 	.word	0x080057a0
 8003ab4:	080057c0 	.word	0x080057c0
 8003ab8:	08005780 	.word	0x08005780

08003abc <puts>:
 8003abc:	4b02      	ldr	r3, [pc, #8]	; (8003ac8 <puts+0xc>)
 8003abe:	4601      	mov	r1, r0
 8003ac0:	6818      	ldr	r0, [r3, #0]
 8003ac2:	f7ff bf9f 	b.w	8003a04 <_puts_r>
 8003ac6:	bf00      	nop
 8003ac8:	20000558 	.word	0x20000558

08003acc <__swbuf_r>:
 8003acc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ace:	460e      	mov	r6, r1
 8003ad0:	4614      	mov	r4, r2
 8003ad2:	4605      	mov	r5, r0
 8003ad4:	b118      	cbz	r0, 8003ade <__swbuf_r+0x12>
 8003ad6:	6983      	ldr	r3, [r0, #24]
 8003ad8:	b90b      	cbnz	r3, 8003ade <__swbuf_r+0x12>
 8003ada:	f000 f9a7 	bl	8003e2c <__sinit>
 8003ade:	4b21      	ldr	r3, [pc, #132]	; (8003b64 <__swbuf_r+0x98>)
 8003ae0:	429c      	cmp	r4, r3
 8003ae2:	d12a      	bne.n	8003b3a <__swbuf_r+0x6e>
 8003ae4:	686c      	ldr	r4, [r5, #4]
 8003ae6:	69a3      	ldr	r3, [r4, #24]
 8003ae8:	60a3      	str	r3, [r4, #8]
 8003aea:	89a3      	ldrh	r3, [r4, #12]
 8003aec:	071a      	lsls	r2, r3, #28
 8003aee:	d52e      	bpl.n	8003b4e <__swbuf_r+0x82>
 8003af0:	6923      	ldr	r3, [r4, #16]
 8003af2:	b363      	cbz	r3, 8003b4e <__swbuf_r+0x82>
 8003af4:	6923      	ldr	r3, [r4, #16]
 8003af6:	6820      	ldr	r0, [r4, #0]
 8003af8:	1ac0      	subs	r0, r0, r3
 8003afa:	6963      	ldr	r3, [r4, #20]
 8003afc:	b2f6      	uxtb	r6, r6
 8003afe:	4283      	cmp	r3, r0
 8003b00:	4637      	mov	r7, r6
 8003b02:	dc04      	bgt.n	8003b0e <__swbuf_r+0x42>
 8003b04:	4621      	mov	r1, r4
 8003b06:	4628      	mov	r0, r5
 8003b08:	f000 f926 	bl	8003d58 <_fflush_r>
 8003b0c:	bb28      	cbnz	r0, 8003b5a <__swbuf_r+0x8e>
 8003b0e:	68a3      	ldr	r3, [r4, #8]
 8003b10:	3b01      	subs	r3, #1
 8003b12:	60a3      	str	r3, [r4, #8]
 8003b14:	6823      	ldr	r3, [r4, #0]
 8003b16:	1c5a      	adds	r2, r3, #1
 8003b18:	6022      	str	r2, [r4, #0]
 8003b1a:	701e      	strb	r6, [r3, #0]
 8003b1c:	6963      	ldr	r3, [r4, #20]
 8003b1e:	3001      	adds	r0, #1
 8003b20:	4283      	cmp	r3, r0
 8003b22:	d004      	beq.n	8003b2e <__swbuf_r+0x62>
 8003b24:	89a3      	ldrh	r3, [r4, #12]
 8003b26:	07db      	lsls	r3, r3, #31
 8003b28:	d519      	bpl.n	8003b5e <__swbuf_r+0x92>
 8003b2a:	2e0a      	cmp	r6, #10
 8003b2c:	d117      	bne.n	8003b5e <__swbuf_r+0x92>
 8003b2e:	4621      	mov	r1, r4
 8003b30:	4628      	mov	r0, r5
 8003b32:	f000 f911 	bl	8003d58 <_fflush_r>
 8003b36:	b190      	cbz	r0, 8003b5e <__swbuf_r+0x92>
 8003b38:	e00f      	b.n	8003b5a <__swbuf_r+0x8e>
 8003b3a:	4b0b      	ldr	r3, [pc, #44]	; (8003b68 <__swbuf_r+0x9c>)
 8003b3c:	429c      	cmp	r4, r3
 8003b3e:	d101      	bne.n	8003b44 <__swbuf_r+0x78>
 8003b40:	68ac      	ldr	r4, [r5, #8]
 8003b42:	e7d0      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b44:	4b09      	ldr	r3, [pc, #36]	; (8003b6c <__swbuf_r+0xa0>)
 8003b46:	429c      	cmp	r4, r3
 8003b48:	bf08      	it	eq
 8003b4a:	68ec      	ldreq	r4, [r5, #12]
 8003b4c:	e7cb      	b.n	8003ae6 <__swbuf_r+0x1a>
 8003b4e:	4621      	mov	r1, r4
 8003b50:	4628      	mov	r0, r5
 8003b52:	f000 f80d 	bl	8003b70 <__swsetup_r>
 8003b56:	2800      	cmp	r0, #0
 8003b58:	d0cc      	beq.n	8003af4 <__swbuf_r+0x28>
 8003b5a:	f04f 37ff 	mov.w	r7, #4294967295
 8003b5e:	4638      	mov	r0, r7
 8003b60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b62:	bf00      	nop
 8003b64:	080057a0 	.word	0x080057a0
 8003b68:	080057c0 	.word	0x080057c0
 8003b6c:	08005780 	.word	0x08005780

08003b70 <__swsetup_r>:
 8003b70:	4b32      	ldr	r3, [pc, #200]	; (8003c3c <__swsetup_r+0xcc>)
 8003b72:	b570      	push	{r4, r5, r6, lr}
 8003b74:	681d      	ldr	r5, [r3, #0]
 8003b76:	4606      	mov	r6, r0
 8003b78:	460c      	mov	r4, r1
 8003b7a:	b125      	cbz	r5, 8003b86 <__swsetup_r+0x16>
 8003b7c:	69ab      	ldr	r3, [r5, #24]
 8003b7e:	b913      	cbnz	r3, 8003b86 <__swsetup_r+0x16>
 8003b80:	4628      	mov	r0, r5
 8003b82:	f000 f953 	bl	8003e2c <__sinit>
 8003b86:	4b2e      	ldr	r3, [pc, #184]	; (8003c40 <__swsetup_r+0xd0>)
 8003b88:	429c      	cmp	r4, r3
 8003b8a:	d10f      	bne.n	8003bac <__swsetup_r+0x3c>
 8003b8c:	686c      	ldr	r4, [r5, #4]
 8003b8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b92:	b29a      	uxth	r2, r3
 8003b94:	0715      	lsls	r5, r2, #28
 8003b96:	d42c      	bmi.n	8003bf2 <__swsetup_r+0x82>
 8003b98:	06d0      	lsls	r0, r2, #27
 8003b9a:	d411      	bmi.n	8003bc0 <__swsetup_r+0x50>
 8003b9c:	2209      	movs	r2, #9
 8003b9e:	6032      	str	r2, [r6, #0]
 8003ba0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ba4:	81a3      	strh	r3, [r4, #12]
 8003ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8003baa:	e03e      	b.n	8003c2a <__swsetup_r+0xba>
 8003bac:	4b25      	ldr	r3, [pc, #148]	; (8003c44 <__swsetup_r+0xd4>)
 8003bae:	429c      	cmp	r4, r3
 8003bb0:	d101      	bne.n	8003bb6 <__swsetup_r+0x46>
 8003bb2:	68ac      	ldr	r4, [r5, #8]
 8003bb4:	e7eb      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bb6:	4b24      	ldr	r3, [pc, #144]	; (8003c48 <__swsetup_r+0xd8>)
 8003bb8:	429c      	cmp	r4, r3
 8003bba:	bf08      	it	eq
 8003bbc:	68ec      	ldreq	r4, [r5, #12]
 8003bbe:	e7e6      	b.n	8003b8e <__swsetup_r+0x1e>
 8003bc0:	0751      	lsls	r1, r2, #29
 8003bc2:	d512      	bpl.n	8003bea <__swsetup_r+0x7a>
 8003bc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003bc6:	b141      	cbz	r1, 8003bda <__swsetup_r+0x6a>
 8003bc8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003bcc:	4299      	cmp	r1, r3
 8003bce:	d002      	beq.n	8003bd6 <__swsetup_r+0x66>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f000 fa19 	bl	8004008 <_free_r>
 8003bd6:	2300      	movs	r3, #0
 8003bd8:	6363      	str	r3, [r4, #52]	; 0x34
 8003bda:	89a3      	ldrh	r3, [r4, #12]
 8003bdc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8003be0:	81a3      	strh	r3, [r4, #12]
 8003be2:	2300      	movs	r3, #0
 8003be4:	6063      	str	r3, [r4, #4]
 8003be6:	6923      	ldr	r3, [r4, #16]
 8003be8:	6023      	str	r3, [r4, #0]
 8003bea:	89a3      	ldrh	r3, [r4, #12]
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	81a3      	strh	r3, [r4, #12]
 8003bf2:	6923      	ldr	r3, [r4, #16]
 8003bf4:	b94b      	cbnz	r3, 8003c0a <__swsetup_r+0x9a>
 8003bf6:	89a3      	ldrh	r3, [r4, #12]
 8003bf8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003bfc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c00:	d003      	beq.n	8003c0a <__swsetup_r+0x9a>
 8003c02:	4621      	mov	r1, r4
 8003c04:	4630      	mov	r0, r6
 8003c06:	f000 f9bf 	bl	8003f88 <__smakebuf_r>
 8003c0a:	89a2      	ldrh	r2, [r4, #12]
 8003c0c:	f012 0301 	ands.w	r3, r2, #1
 8003c10:	d00c      	beq.n	8003c2c <__swsetup_r+0xbc>
 8003c12:	2300      	movs	r3, #0
 8003c14:	60a3      	str	r3, [r4, #8]
 8003c16:	6963      	ldr	r3, [r4, #20]
 8003c18:	425b      	negs	r3, r3
 8003c1a:	61a3      	str	r3, [r4, #24]
 8003c1c:	6923      	ldr	r3, [r4, #16]
 8003c1e:	b953      	cbnz	r3, 8003c36 <__swsetup_r+0xc6>
 8003c20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003c24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003c28:	d1ba      	bne.n	8003ba0 <__swsetup_r+0x30>
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	0792      	lsls	r2, r2, #30
 8003c2e:	bf58      	it	pl
 8003c30:	6963      	ldrpl	r3, [r4, #20]
 8003c32:	60a3      	str	r3, [r4, #8]
 8003c34:	e7f2      	b.n	8003c1c <__swsetup_r+0xac>
 8003c36:	2000      	movs	r0, #0
 8003c38:	e7f7      	b.n	8003c2a <__swsetup_r+0xba>
 8003c3a:	bf00      	nop
 8003c3c:	20000558 	.word	0x20000558
 8003c40:	080057a0 	.word	0x080057a0
 8003c44:	080057c0 	.word	0x080057c0
 8003c48:	08005780 	.word	0x08005780

08003c4c <__sflush_r>:
 8003c4c:	898a      	ldrh	r2, [r1, #12]
 8003c4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003c52:	4605      	mov	r5, r0
 8003c54:	0710      	lsls	r0, r2, #28
 8003c56:	460c      	mov	r4, r1
 8003c58:	d458      	bmi.n	8003d0c <__sflush_r+0xc0>
 8003c5a:	684b      	ldr	r3, [r1, #4]
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	dc05      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	dc02      	bgt.n	8003c6c <__sflush_r+0x20>
 8003c66:	2000      	movs	r0, #0
 8003c68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003c6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c6e:	2e00      	cmp	r6, #0
 8003c70:	d0f9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003c72:	2300      	movs	r3, #0
 8003c74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003c78:	682f      	ldr	r7, [r5, #0]
 8003c7a:	6a21      	ldr	r1, [r4, #32]
 8003c7c:	602b      	str	r3, [r5, #0]
 8003c7e:	d032      	beq.n	8003ce6 <__sflush_r+0x9a>
 8003c80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003c82:	89a3      	ldrh	r3, [r4, #12]
 8003c84:	075a      	lsls	r2, r3, #29
 8003c86:	d505      	bpl.n	8003c94 <__sflush_r+0x48>
 8003c88:	6863      	ldr	r3, [r4, #4]
 8003c8a:	1ac0      	subs	r0, r0, r3
 8003c8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003c8e:	b10b      	cbz	r3, 8003c94 <__sflush_r+0x48>
 8003c90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003c92:	1ac0      	subs	r0, r0, r3
 8003c94:	2300      	movs	r3, #0
 8003c96:	4602      	mov	r2, r0
 8003c98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003c9a:	6a21      	ldr	r1, [r4, #32]
 8003c9c:	4628      	mov	r0, r5
 8003c9e:	47b0      	blx	r6
 8003ca0:	1c43      	adds	r3, r0, #1
 8003ca2:	89a3      	ldrh	r3, [r4, #12]
 8003ca4:	d106      	bne.n	8003cb4 <__sflush_r+0x68>
 8003ca6:	6829      	ldr	r1, [r5, #0]
 8003ca8:	291d      	cmp	r1, #29
 8003caa:	d848      	bhi.n	8003d3e <__sflush_r+0xf2>
 8003cac:	4a29      	ldr	r2, [pc, #164]	; (8003d54 <__sflush_r+0x108>)
 8003cae:	40ca      	lsrs	r2, r1
 8003cb0:	07d6      	lsls	r6, r2, #31
 8003cb2:	d544      	bpl.n	8003d3e <__sflush_r+0xf2>
 8003cb4:	2200      	movs	r2, #0
 8003cb6:	6062      	str	r2, [r4, #4]
 8003cb8:	04d9      	lsls	r1, r3, #19
 8003cba:	6922      	ldr	r2, [r4, #16]
 8003cbc:	6022      	str	r2, [r4, #0]
 8003cbe:	d504      	bpl.n	8003cca <__sflush_r+0x7e>
 8003cc0:	1c42      	adds	r2, r0, #1
 8003cc2:	d101      	bne.n	8003cc8 <__sflush_r+0x7c>
 8003cc4:	682b      	ldr	r3, [r5, #0]
 8003cc6:	b903      	cbnz	r3, 8003cca <__sflush_r+0x7e>
 8003cc8:	6560      	str	r0, [r4, #84]	; 0x54
 8003cca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003ccc:	602f      	str	r7, [r5, #0]
 8003cce:	2900      	cmp	r1, #0
 8003cd0:	d0c9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003cd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003cd6:	4299      	cmp	r1, r3
 8003cd8:	d002      	beq.n	8003ce0 <__sflush_r+0x94>
 8003cda:	4628      	mov	r0, r5
 8003cdc:	f000 f994 	bl	8004008 <_free_r>
 8003ce0:	2000      	movs	r0, #0
 8003ce2:	6360      	str	r0, [r4, #52]	; 0x34
 8003ce4:	e7c0      	b.n	8003c68 <__sflush_r+0x1c>
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	4628      	mov	r0, r5
 8003cea:	47b0      	blx	r6
 8003cec:	1c41      	adds	r1, r0, #1
 8003cee:	d1c8      	bne.n	8003c82 <__sflush_r+0x36>
 8003cf0:	682b      	ldr	r3, [r5, #0]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0c5      	beq.n	8003c82 <__sflush_r+0x36>
 8003cf6:	2b1d      	cmp	r3, #29
 8003cf8:	d001      	beq.n	8003cfe <__sflush_r+0xb2>
 8003cfa:	2b16      	cmp	r3, #22
 8003cfc:	d101      	bne.n	8003d02 <__sflush_r+0xb6>
 8003cfe:	602f      	str	r7, [r5, #0]
 8003d00:	e7b1      	b.n	8003c66 <__sflush_r+0x1a>
 8003d02:	89a3      	ldrh	r3, [r4, #12]
 8003d04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d08:	81a3      	strh	r3, [r4, #12]
 8003d0a:	e7ad      	b.n	8003c68 <__sflush_r+0x1c>
 8003d0c:	690f      	ldr	r7, [r1, #16]
 8003d0e:	2f00      	cmp	r7, #0
 8003d10:	d0a9      	beq.n	8003c66 <__sflush_r+0x1a>
 8003d12:	0793      	lsls	r3, r2, #30
 8003d14:	680e      	ldr	r6, [r1, #0]
 8003d16:	bf08      	it	eq
 8003d18:	694b      	ldreq	r3, [r1, #20]
 8003d1a:	600f      	str	r7, [r1, #0]
 8003d1c:	bf18      	it	ne
 8003d1e:	2300      	movne	r3, #0
 8003d20:	eba6 0807 	sub.w	r8, r6, r7
 8003d24:	608b      	str	r3, [r1, #8]
 8003d26:	f1b8 0f00 	cmp.w	r8, #0
 8003d2a:	dd9c      	ble.n	8003c66 <__sflush_r+0x1a>
 8003d2c:	4643      	mov	r3, r8
 8003d2e:	463a      	mov	r2, r7
 8003d30:	6a21      	ldr	r1, [r4, #32]
 8003d32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003d34:	4628      	mov	r0, r5
 8003d36:	47b0      	blx	r6
 8003d38:	2800      	cmp	r0, #0
 8003d3a:	dc06      	bgt.n	8003d4a <__sflush_r+0xfe>
 8003d3c:	89a3      	ldrh	r3, [r4, #12]
 8003d3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003d42:	81a3      	strh	r3, [r4, #12]
 8003d44:	f04f 30ff 	mov.w	r0, #4294967295
 8003d48:	e78e      	b.n	8003c68 <__sflush_r+0x1c>
 8003d4a:	4407      	add	r7, r0
 8003d4c:	eba8 0800 	sub.w	r8, r8, r0
 8003d50:	e7e9      	b.n	8003d26 <__sflush_r+0xda>
 8003d52:	bf00      	nop
 8003d54:	20400001 	.word	0x20400001

08003d58 <_fflush_r>:
 8003d58:	b538      	push	{r3, r4, r5, lr}
 8003d5a:	690b      	ldr	r3, [r1, #16]
 8003d5c:	4605      	mov	r5, r0
 8003d5e:	460c      	mov	r4, r1
 8003d60:	b1db      	cbz	r3, 8003d9a <_fflush_r+0x42>
 8003d62:	b118      	cbz	r0, 8003d6c <_fflush_r+0x14>
 8003d64:	6983      	ldr	r3, [r0, #24]
 8003d66:	b90b      	cbnz	r3, 8003d6c <_fflush_r+0x14>
 8003d68:	f000 f860 	bl	8003e2c <__sinit>
 8003d6c:	4b0c      	ldr	r3, [pc, #48]	; (8003da0 <_fflush_r+0x48>)
 8003d6e:	429c      	cmp	r4, r3
 8003d70:	d109      	bne.n	8003d86 <_fflush_r+0x2e>
 8003d72:	686c      	ldr	r4, [r5, #4]
 8003d74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003d78:	b17b      	cbz	r3, 8003d9a <_fflush_r+0x42>
 8003d7a:	4621      	mov	r1, r4
 8003d7c:	4628      	mov	r0, r5
 8003d7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003d82:	f7ff bf63 	b.w	8003c4c <__sflush_r>
 8003d86:	4b07      	ldr	r3, [pc, #28]	; (8003da4 <_fflush_r+0x4c>)
 8003d88:	429c      	cmp	r4, r3
 8003d8a:	d101      	bne.n	8003d90 <_fflush_r+0x38>
 8003d8c:	68ac      	ldr	r4, [r5, #8]
 8003d8e:	e7f1      	b.n	8003d74 <_fflush_r+0x1c>
 8003d90:	4b05      	ldr	r3, [pc, #20]	; (8003da8 <_fflush_r+0x50>)
 8003d92:	429c      	cmp	r4, r3
 8003d94:	bf08      	it	eq
 8003d96:	68ec      	ldreq	r4, [r5, #12]
 8003d98:	e7ec      	b.n	8003d74 <_fflush_r+0x1c>
 8003d9a:	2000      	movs	r0, #0
 8003d9c:	bd38      	pop	{r3, r4, r5, pc}
 8003d9e:	bf00      	nop
 8003da0:	080057a0 	.word	0x080057a0
 8003da4:	080057c0 	.word	0x080057c0
 8003da8:	08005780 	.word	0x08005780

08003dac <std>:
 8003dac:	2300      	movs	r3, #0
 8003dae:	b510      	push	{r4, lr}
 8003db0:	4604      	mov	r4, r0
 8003db2:	e9c0 3300 	strd	r3, r3, [r0]
 8003db6:	6083      	str	r3, [r0, #8]
 8003db8:	8181      	strh	r1, [r0, #12]
 8003dba:	6643      	str	r3, [r0, #100]	; 0x64
 8003dbc:	81c2      	strh	r2, [r0, #14]
 8003dbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003dc2:	6183      	str	r3, [r0, #24]
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	2208      	movs	r2, #8
 8003dc8:	305c      	adds	r0, #92	; 0x5c
 8003dca:	f7ff fdfb 	bl	80039c4 <memset>
 8003dce:	4b05      	ldr	r3, [pc, #20]	; (8003de4 <std+0x38>)
 8003dd0:	6263      	str	r3, [r4, #36]	; 0x24
 8003dd2:	4b05      	ldr	r3, [pc, #20]	; (8003de8 <std+0x3c>)
 8003dd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8003dd6:	4b05      	ldr	r3, [pc, #20]	; (8003dec <std+0x40>)
 8003dd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8003dda:	4b05      	ldr	r3, [pc, #20]	; (8003df0 <std+0x44>)
 8003ddc:	6224      	str	r4, [r4, #32]
 8003dde:	6323      	str	r3, [r4, #48]	; 0x30
 8003de0:	bd10      	pop	{r4, pc}
 8003de2:	bf00      	nop
 8003de4:	08004709 	.word	0x08004709
 8003de8:	0800472b 	.word	0x0800472b
 8003dec:	08004763 	.word	0x08004763
 8003df0:	08004787 	.word	0x08004787

08003df4 <_cleanup_r>:
 8003df4:	4901      	ldr	r1, [pc, #4]	; (8003dfc <_cleanup_r+0x8>)
 8003df6:	f000 b885 	b.w	8003f04 <_fwalk_reent>
 8003dfa:	bf00      	nop
 8003dfc:	08003d59 	.word	0x08003d59

08003e00 <__sfmoreglue>:
 8003e00:	b570      	push	{r4, r5, r6, lr}
 8003e02:	1e4a      	subs	r2, r1, #1
 8003e04:	2568      	movs	r5, #104	; 0x68
 8003e06:	4355      	muls	r5, r2
 8003e08:	460e      	mov	r6, r1
 8003e0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003e0e:	f000 f949 	bl	80040a4 <_malloc_r>
 8003e12:	4604      	mov	r4, r0
 8003e14:	b140      	cbz	r0, 8003e28 <__sfmoreglue+0x28>
 8003e16:	2100      	movs	r1, #0
 8003e18:	e9c0 1600 	strd	r1, r6, [r0]
 8003e1c:	300c      	adds	r0, #12
 8003e1e:	60a0      	str	r0, [r4, #8]
 8003e20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003e24:	f7ff fdce 	bl	80039c4 <memset>
 8003e28:	4620      	mov	r0, r4
 8003e2a:	bd70      	pop	{r4, r5, r6, pc}

08003e2c <__sinit>:
 8003e2c:	6983      	ldr	r3, [r0, #24]
 8003e2e:	b510      	push	{r4, lr}
 8003e30:	4604      	mov	r4, r0
 8003e32:	bb33      	cbnz	r3, 8003e82 <__sinit+0x56>
 8003e34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003e38:	6503      	str	r3, [r0, #80]	; 0x50
 8003e3a:	4b12      	ldr	r3, [pc, #72]	; (8003e84 <__sinit+0x58>)
 8003e3c:	4a12      	ldr	r2, [pc, #72]	; (8003e88 <__sinit+0x5c>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6282      	str	r2, [r0, #40]	; 0x28
 8003e42:	4298      	cmp	r0, r3
 8003e44:	bf04      	itt	eq
 8003e46:	2301      	moveq	r3, #1
 8003e48:	6183      	streq	r3, [r0, #24]
 8003e4a:	f000 f81f 	bl	8003e8c <__sfp>
 8003e4e:	6060      	str	r0, [r4, #4]
 8003e50:	4620      	mov	r0, r4
 8003e52:	f000 f81b 	bl	8003e8c <__sfp>
 8003e56:	60a0      	str	r0, [r4, #8]
 8003e58:	4620      	mov	r0, r4
 8003e5a:	f000 f817 	bl	8003e8c <__sfp>
 8003e5e:	2200      	movs	r2, #0
 8003e60:	60e0      	str	r0, [r4, #12]
 8003e62:	2104      	movs	r1, #4
 8003e64:	6860      	ldr	r0, [r4, #4]
 8003e66:	f7ff ffa1 	bl	8003dac <std>
 8003e6a:	2201      	movs	r2, #1
 8003e6c:	2109      	movs	r1, #9
 8003e6e:	68a0      	ldr	r0, [r4, #8]
 8003e70:	f7ff ff9c 	bl	8003dac <std>
 8003e74:	2202      	movs	r2, #2
 8003e76:	2112      	movs	r1, #18
 8003e78:	68e0      	ldr	r0, [r4, #12]
 8003e7a:	f7ff ff97 	bl	8003dac <std>
 8003e7e:	2301      	movs	r3, #1
 8003e80:	61a3      	str	r3, [r4, #24]
 8003e82:	bd10      	pop	{r4, pc}
 8003e84:	0800577c 	.word	0x0800577c
 8003e88:	08003df5 	.word	0x08003df5

08003e8c <__sfp>:
 8003e8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e8e:	4b1b      	ldr	r3, [pc, #108]	; (8003efc <__sfp+0x70>)
 8003e90:	681e      	ldr	r6, [r3, #0]
 8003e92:	69b3      	ldr	r3, [r6, #24]
 8003e94:	4607      	mov	r7, r0
 8003e96:	b913      	cbnz	r3, 8003e9e <__sfp+0x12>
 8003e98:	4630      	mov	r0, r6
 8003e9a:	f7ff ffc7 	bl	8003e2c <__sinit>
 8003e9e:	3648      	adds	r6, #72	; 0x48
 8003ea0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	d503      	bpl.n	8003eb0 <__sfp+0x24>
 8003ea8:	6833      	ldr	r3, [r6, #0]
 8003eaa:	b133      	cbz	r3, 8003eba <__sfp+0x2e>
 8003eac:	6836      	ldr	r6, [r6, #0]
 8003eae:	e7f7      	b.n	8003ea0 <__sfp+0x14>
 8003eb0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8003eb4:	b16d      	cbz	r5, 8003ed2 <__sfp+0x46>
 8003eb6:	3468      	adds	r4, #104	; 0x68
 8003eb8:	e7f4      	b.n	8003ea4 <__sfp+0x18>
 8003eba:	2104      	movs	r1, #4
 8003ebc:	4638      	mov	r0, r7
 8003ebe:	f7ff ff9f 	bl	8003e00 <__sfmoreglue>
 8003ec2:	6030      	str	r0, [r6, #0]
 8003ec4:	2800      	cmp	r0, #0
 8003ec6:	d1f1      	bne.n	8003eac <__sfp+0x20>
 8003ec8:	230c      	movs	r3, #12
 8003eca:	603b      	str	r3, [r7, #0]
 8003ecc:	4604      	mov	r4, r0
 8003ece:	4620      	mov	r0, r4
 8003ed0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003ed2:	4b0b      	ldr	r3, [pc, #44]	; (8003f00 <__sfp+0x74>)
 8003ed4:	6665      	str	r5, [r4, #100]	; 0x64
 8003ed6:	e9c4 5500 	strd	r5, r5, [r4]
 8003eda:	60a5      	str	r5, [r4, #8]
 8003edc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8003ee0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8003ee4:	2208      	movs	r2, #8
 8003ee6:	4629      	mov	r1, r5
 8003ee8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003eec:	f7ff fd6a 	bl	80039c4 <memset>
 8003ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003ef4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8003ef8:	e7e9      	b.n	8003ece <__sfp+0x42>
 8003efa:	bf00      	nop
 8003efc:	0800577c 	.word	0x0800577c
 8003f00:	ffff0001 	.word	0xffff0001

08003f04 <_fwalk_reent>:
 8003f04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f08:	4680      	mov	r8, r0
 8003f0a:	4689      	mov	r9, r1
 8003f0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003f10:	2600      	movs	r6, #0
 8003f12:	b914      	cbnz	r4, 8003f1a <_fwalk_reent+0x16>
 8003f14:	4630      	mov	r0, r6
 8003f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003f1e:	3f01      	subs	r7, #1
 8003f20:	d501      	bpl.n	8003f26 <_fwalk_reent+0x22>
 8003f22:	6824      	ldr	r4, [r4, #0]
 8003f24:	e7f5      	b.n	8003f12 <_fwalk_reent+0xe>
 8003f26:	89ab      	ldrh	r3, [r5, #12]
 8003f28:	2b01      	cmp	r3, #1
 8003f2a:	d907      	bls.n	8003f3c <_fwalk_reent+0x38>
 8003f2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003f30:	3301      	adds	r3, #1
 8003f32:	d003      	beq.n	8003f3c <_fwalk_reent+0x38>
 8003f34:	4629      	mov	r1, r5
 8003f36:	4640      	mov	r0, r8
 8003f38:	47c8      	blx	r9
 8003f3a:	4306      	orrs	r6, r0
 8003f3c:	3568      	adds	r5, #104	; 0x68
 8003f3e:	e7ee      	b.n	8003f1e <_fwalk_reent+0x1a>

08003f40 <__swhatbuf_r>:
 8003f40:	b570      	push	{r4, r5, r6, lr}
 8003f42:	460e      	mov	r6, r1
 8003f44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003f48:	2900      	cmp	r1, #0
 8003f4a:	b096      	sub	sp, #88	; 0x58
 8003f4c:	4614      	mov	r4, r2
 8003f4e:	461d      	mov	r5, r3
 8003f50:	da07      	bge.n	8003f62 <__swhatbuf_r+0x22>
 8003f52:	2300      	movs	r3, #0
 8003f54:	602b      	str	r3, [r5, #0]
 8003f56:	89b3      	ldrh	r3, [r6, #12]
 8003f58:	061a      	lsls	r2, r3, #24
 8003f5a:	d410      	bmi.n	8003f7e <__swhatbuf_r+0x3e>
 8003f5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003f60:	e00e      	b.n	8003f80 <__swhatbuf_r+0x40>
 8003f62:	466a      	mov	r2, sp
 8003f64:	f000 fc36 	bl	80047d4 <_fstat_r>
 8003f68:	2800      	cmp	r0, #0
 8003f6a:	dbf2      	blt.n	8003f52 <__swhatbuf_r+0x12>
 8003f6c:	9a01      	ldr	r2, [sp, #4]
 8003f6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003f72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8003f76:	425a      	negs	r2, r3
 8003f78:	415a      	adcs	r2, r3
 8003f7a:	602a      	str	r2, [r5, #0]
 8003f7c:	e7ee      	b.n	8003f5c <__swhatbuf_r+0x1c>
 8003f7e:	2340      	movs	r3, #64	; 0x40
 8003f80:	2000      	movs	r0, #0
 8003f82:	6023      	str	r3, [r4, #0]
 8003f84:	b016      	add	sp, #88	; 0x58
 8003f86:	bd70      	pop	{r4, r5, r6, pc}

08003f88 <__smakebuf_r>:
 8003f88:	898b      	ldrh	r3, [r1, #12]
 8003f8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003f8c:	079d      	lsls	r5, r3, #30
 8003f8e:	4606      	mov	r6, r0
 8003f90:	460c      	mov	r4, r1
 8003f92:	d507      	bpl.n	8003fa4 <__smakebuf_r+0x1c>
 8003f94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003f98:	6023      	str	r3, [r4, #0]
 8003f9a:	6123      	str	r3, [r4, #16]
 8003f9c:	2301      	movs	r3, #1
 8003f9e:	6163      	str	r3, [r4, #20]
 8003fa0:	b002      	add	sp, #8
 8003fa2:	bd70      	pop	{r4, r5, r6, pc}
 8003fa4:	ab01      	add	r3, sp, #4
 8003fa6:	466a      	mov	r2, sp
 8003fa8:	f7ff ffca 	bl	8003f40 <__swhatbuf_r>
 8003fac:	9900      	ldr	r1, [sp, #0]
 8003fae:	4605      	mov	r5, r0
 8003fb0:	4630      	mov	r0, r6
 8003fb2:	f000 f877 	bl	80040a4 <_malloc_r>
 8003fb6:	b948      	cbnz	r0, 8003fcc <__smakebuf_r+0x44>
 8003fb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003fbc:	059a      	lsls	r2, r3, #22
 8003fbe:	d4ef      	bmi.n	8003fa0 <__smakebuf_r+0x18>
 8003fc0:	f023 0303 	bic.w	r3, r3, #3
 8003fc4:	f043 0302 	orr.w	r3, r3, #2
 8003fc8:	81a3      	strh	r3, [r4, #12]
 8003fca:	e7e3      	b.n	8003f94 <__smakebuf_r+0xc>
 8003fcc:	4b0d      	ldr	r3, [pc, #52]	; (8004004 <__smakebuf_r+0x7c>)
 8003fce:	62b3      	str	r3, [r6, #40]	; 0x28
 8003fd0:	89a3      	ldrh	r3, [r4, #12]
 8003fd2:	6020      	str	r0, [r4, #0]
 8003fd4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003fd8:	81a3      	strh	r3, [r4, #12]
 8003fda:	9b00      	ldr	r3, [sp, #0]
 8003fdc:	6163      	str	r3, [r4, #20]
 8003fde:	9b01      	ldr	r3, [sp, #4]
 8003fe0:	6120      	str	r0, [r4, #16]
 8003fe2:	b15b      	cbz	r3, 8003ffc <__smakebuf_r+0x74>
 8003fe4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003fe8:	4630      	mov	r0, r6
 8003fea:	f000 fc05 	bl	80047f8 <_isatty_r>
 8003fee:	b128      	cbz	r0, 8003ffc <__smakebuf_r+0x74>
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f023 0303 	bic.w	r3, r3, #3
 8003ff6:	f043 0301 	orr.w	r3, r3, #1
 8003ffa:	81a3      	strh	r3, [r4, #12]
 8003ffc:	89a3      	ldrh	r3, [r4, #12]
 8003ffe:	431d      	orrs	r5, r3
 8004000:	81a5      	strh	r5, [r4, #12]
 8004002:	e7cd      	b.n	8003fa0 <__smakebuf_r+0x18>
 8004004:	08003df5 	.word	0x08003df5

08004008 <_free_r>:
 8004008:	b538      	push	{r3, r4, r5, lr}
 800400a:	4605      	mov	r5, r0
 800400c:	2900      	cmp	r1, #0
 800400e:	d045      	beq.n	800409c <_free_r+0x94>
 8004010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004014:	1f0c      	subs	r4, r1, #4
 8004016:	2b00      	cmp	r3, #0
 8004018:	bfb8      	it	lt
 800401a:	18e4      	addlt	r4, r4, r3
 800401c:	f000 fc0e 	bl	800483c <__malloc_lock>
 8004020:	4a1f      	ldr	r2, [pc, #124]	; (80040a0 <_free_r+0x98>)
 8004022:	6813      	ldr	r3, [r2, #0]
 8004024:	4610      	mov	r0, r2
 8004026:	b933      	cbnz	r3, 8004036 <_free_r+0x2e>
 8004028:	6063      	str	r3, [r4, #4]
 800402a:	6014      	str	r4, [r2, #0]
 800402c:	4628      	mov	r0, r5
 800402e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004032:	f000 bc04 	b.w	800483e <__malloc_unlock>
 8004036:	42a3      	cmp	r3, r4
 8004038:	d90c      	bls.n	8004054 <_free_r+0x4c>
 800403a:	6821      	ldr	r1, [r4, #0]
 800403c:	1862      	adds	r2, r4, r1
 800403e:	4293      	cmp	r3, r2
 8004040:	bf04      	itt	eq
 8004042:	681a      	ldreq	r2, [r3, #0]
 8004044:	685b      	ldreq	r3, [r3, #4]
 8004046:	6063      	str	r3, [r4, #4]
 8004048:	bf04      	itt	eq
 800404a:	1852      	addeq	r2, r2, r1
 800404c:	6022      	streq	r2, [r4, #0]
 800404e:	6004      	str	r4, [r0, #0]
 8004050:	e7ec      	b.n	800402c <_free_r+0x24>
 8004052:	4613      	mov	r3, r2
 8004054:	685a      	ldr	r2, [r3, #4]
 8004056:	b10a      	cbz	r2, 800405c <_free_r+0x54>
 8004058:	42a2      	cmp	r2, r4
 800405a:	d9fa      	bls.n	8004052 <_free_r+0x4a>
 800405c:	6819      	ldr	r1, [r3, #0]
 800405e:	1858      	adds	r0, r3, r1
 8004060:	42a0      	cmp	r0, r4
 8004062:	d10b      	bne.n	800407c <_free_r+0x74>
 8004064:	6820      	ldr	r0, [r4, #0]
 8004066:	4401      	add	r1, r0
 8004068:	1858      	adds	r0, r3, r1
 800406a:	4282      	cmp	r2, r0
 800406c:	6019      	str	r1, [r3, #0]
 800406e:	d1dd      	bne.n	800402c <_free_r+0x24>
 8004070:	6810      	ldr	r0, [r2, #0]
 8004072:	6852      	ldr	r2, [r2, #4]
 8004074:	605a      	str	r2, [r3, #4]
 8004076:	4401      	add	r1, r0
 8004078:	6019      	str	r1, [r3, #0]
 800407a:	e7d7      	b.n	800402c <_free_r+0x24>
 800407c:	d902      	bls.n	8004084 <_free_r+0x7c>
 800407e:	230c      	movs	r3, #12
 8004080:	602b      	str	r3, [r5, #0]
 8004082:	e7d3      	b.n	800402c <_free_r+0x24>
 8004084:	6820      	ldr	r0, [r4, #0]
 8004086:	1821      	adds	r1, r4, r0
 8004088:	428a      	cmp	r2, r1
 800408a:	bf04      	itt	eq
 800408c:	6811      	ldreq	r1, [r2, #0]
 800408e:	6852      	ldreq	r2, [r2, #4]
 8004090:	6062      	str	r2, [r4, #4]
 8004092:	bf04      	itt	eq
 8004094:	1809      	addeq	r1, r1, r0
 8004096:	6021      	streq	r1, [r4, #0]
 8004098:	605c      	str	r4, [r3, #4]
 800409a:	e7c7      	b.n	800402c <_free_r+0x24>
 800409c:	bd38      	pop	{r3, r4, r5, pc}
 800409e:	bf00      	nop
 80040a0:	20000654 	.word	0x20000654

080040a4 <_malloc_r>:
 80040a4:	b570      	push	{r4, r5, r6, lr}
 80040a6:	1ccd      	adds	r5, r1, #3
 80040a8:	f025 0503 	bic.w	r5, r5, #3
 80040ac:	3508      	adds	r5, #8
 80040ae:	2d0c      	cmp	r5, #12
 80040b0:	bf38      	it	cc
 80040b2:	250c      	movcc	r5, #12
 80040b4:	2d00      	cmp	r5, #0
 80040b6:	4606      	mov	r6, r0
 80040b8:	db01      	blt.n	80040be <_malloc_r+0x1a>
 80040ba:	42a9      	cmp	r1, r5
 80040bc:	d903      	bls.n	80040c6 <_malloc_r+0x22>
 80040be:	230c      	movs	r3, #12
 80040c0:	6033      	str	r3, [r6, #0]
 80040c2:	2000      	movs	r0, #0
 80040c4:	bd70      	pop	{r4, r5, r6, pc}
 80040c6:	f000 fbb9 	bl	800483c <__malloc_lock>
 80040ca:	4a21      	ldr	r2, [pc, #132]	; (8004150 <_malloc_r+0xac>)
 80040cc:	6814      	ldr	r4, [r2, #0]
 80040ce:	4621      	mov	r1, r4
 80040d0:	b991      	cbnz	r1, 80040f8 <_malloc_r+0x54>
 80040d2:	4c20      	ldr	r4, [pc, #128]	; (8004154 <_malloc_r+0xb0>)
 80040d4:	6823      	ldr	r3, [r4, #0]
 80040d6:	b91b      	cbnz	r3, 80040e0 <_malloc_r+0x3c>
 80040d8:	4630      	mov	r0, r6
 80040da:	f000 fb05 	bl	80046e8 <_sbrk_r>
 80040de:	6020      	str	r0, [r4, #0]
 80040e0:	4629      	mov	r1, r5
 80040e2:	4630      	mov	r0, r6
 80040e4:	f000 fb00 	bl	80046e8 <_sbrk_r>
 80040e8:	1c43      	adds	r3, r0, #1
 80040ea:	d124      	bne.n	8004136 <_malloc_r+0x92>
 80040ec:	230c      	movs	r3, #12
 80040ee:	6033      	str	r3, [r6, #0]
 80040f0:	4630      	mov	r0, r6
 80040f2:	f000 fba4 	bl	800483e <__malloc_unlock>
 80040f6:	e7e4      	b.n	80040c2 <_malloc_r+0x1e>
 80040f8:	680b      	ldr	r3, [r1, #0]
 80040fa:	1b5b      	subs	r3, r3, r5
 80040fc:	d418      	bmi.n	8004130 <_malloc_r+0x8c>
 80040fe:	2b0b      	cmp	r3, #11
 8004100:	d90f      	bls.n	8004122 <_malloc_r+0x7e>
 8004102:	600b      	str	r3, [r1, #0]
 8004104:	50cd      	str	r5, [r1, r3]
 8004106:	18cc      	adds	r4, r1, r3
 8004108:	4630      	mov	r0, r6
 800410a:	f000 fb98 	bl	800483e <__malloc_unlock>
 800410e:	f104 000b 	add.w	r0, r4, #11
 8004112:	1d23      	adds	r3, r4, #4
 8004114:	f020 0007 	bic.w	r0, r0, #7
 8004118:	1ac3      	subs	r3, r0, r3
 800411a:	d0d3      	beq.n	80040c4 <_malloc_r+0x20>
 800411c:	425a      	negs	r2, r3
 800411e:	50e2      	str	r2, [r4, r3]
 8004120:	e7d0      	b.n	80040c4 <_malloc_r+0x20>
 8004122:	428c      	cmp	r4, r1
 8004124:	684b      	ldr	r3, [r1, #4]
 8004126:	bf16      	itet	ne
 8004128:	6063      	strne	r3, [r4, #4]
 800412a:	6013      	streq	r3, [r2, #0]
 800412c:	460c      	movne	r4, r1
 800412e:	e7eb      	b.n	8004108 <_malloc_r+0x64>
 8004130:	460c      	mov	r4, r1
 8004132:	6849      	ldr	r1, [r1, #4]
 8004134:	e7cc      	b.n	80040d0 <_malloc_r+0x2c>
 8004136:	1cc4      	adds	r4, r0, #3
 8004138:	f024 0403 	bic.w	r4, r4, #3
 800413c:	42a0      	cmp	r0, r4
 800413e:	d005      	beq.n	800414c <_malloc_r+0xa8>
 8004140:	1a21      	subs	r1, r4, r0
 8004142:	4630      	mov	r0, r6
 8004144:	f000 fad0 	bl	80046e8 <_sbrk_r>
 8004148:	3001      	adds	r0, #1
 800414a:	d0cf      	beq.n	80040ec <_malloc_r+0x48>
 800414c:	6025      	str	r5, [r4, #0]
 800414e:	e7db      	b.n	8004108 <_malloc_r+0x64>
 8004150:	20000654 	.word	0x20000654
 8004154:	20000658 	.word	0x20000658

08004158 <__sfputc_r>:
 8004158:	6893      	ldr	r3, [r2, #8]
 800415a:	3b01      	subs	r3, #1
 800415c:	2b00      	cmp	r3, #0
 800415e:	b410      	push	{r4}
 8004160:	6093      	str	r3, [r2, #8]
 8004162:	da08      	bge.n	8004176 <__sfputc_r+0x1e>
 8004164:	6994      	ldr	r4, [r2, #24]
 8004166:	42a3      	cmp	r3, r4
 8004168:	db01      	blt.n	800416e <__sfputc_r+0x16>
 800416a:	290a      	cmp	r1, #10
 800416c:	d103      	bne.n	8004176 <__sfputc_r+0x1e>
 800416e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004172:	f7ff bcab 	b.w	8003acc <__swbuf_r>
 8004176:	6813      	ldr	r3, [r2, #0]
 8004178:	1c58      	adds	r0, r3, #1
 800417a:	6010      	str	r0, [r2, #0]
 800417c:	7019      	strb	r1, [r3, #0]
 800417e:	4608      	mov	r0, r1
 8004180:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004184:	4770      	bx	lr

08004186 <__sfputs_r>:
 8004186:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004188:	4606      	mov	r6, r0
 800418a:	460f      	mov	r7, r1
 800418c:	4614      	mov	r4, r2
 800418e:	18d5      	adds	r5, r2, r3
 8004190:	42ac      	cmp	r4, r5
 8004192:	d101      	bne.n	8004198 <__sfputs_r+0x12>
 8004194:	2000      	movs	r0, #0
 8004196:	e007      	b.n	80041a8 <__sfputs_r+0x22>
 8004198:	463a      	mov	r2, r7
 800419a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800419e:	4630      	mov	r0, r6
 80041a0:	f7ff ffda 	bl	8004158 <__sfputc_r>
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	d1f3      	bne.n	8004190 <__sfputs_r+0xa>
 80041a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080041ac <_vfiprintf_r>:
 80041ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041b0:	460c      	mov	r4, r1
 80041b2:	b09d      	sub	sp, #116	; 0x74
 80041b4:	4617      	mov	r7, r2
 80041b6:	461d      	mov	r5, r3
 80041b8:	4606      	mov	r6, r0
 80041ba:	b118      	cbz	r0, 80041c4 <_vfiprintf_r+0x18>
 80041bc:	6983      	ldr	r3, [r0, #24]
 80041be:	b90b      	cbnz	r3, 80041c4 <_vfiprintf_r+0x18>
 80041c0:	f7ff fe34 	bl	8003e2c <__sinit>
 80041c4:	4b7c      	ldr	r3, [pc, #496]	; (80043b8 <_vfiprintf_r+0x20c>)
 80041c6:	429c      	cmp	r4, r3
 80041c8:	d158      	bne.n	800427c <_vfiprintf_r+0xd0>
 80041ca:	6874      	ldr	r4, [r6, #4]
 80041cc:	89a3      	ldrh	r3, [r4, #12]
 80041ce:	0718      	lsls	r0, r3, #28
 80041d0:	d55e      	bpl.n	8004290 <_vfiprintf_r+0xe4>
 80041d2:	6923      	ldr	r3, [r4, #16]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d05b      	beq.n	8004290 <_vfiprintf_r+0xe4>
 80041d8:	2300      	movs	r3, #0
 80041da:	9309      	str	r3, [sp, #36]	; 0x24
 80041dc:	2320      	movs	r3, #32
 80041de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80041e2:	2330      	movs	r3, #48	; 0x30
 80041e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80041e8:	9503      	str	r5, [sp, #12]
 80041ea:	f04f 0b01 	mov.w	fp, #1
 80041ee:	46b8      	mov	r8, r7
 80041f0:	4645      	mov	r5, r8
 80041f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80041f6:	b10b      	cbz	r3, 80041fc <_vfiprintf_r+0x50>
 80041f8:	2b25      	cmp	r3, #37	; 0x25
 80041fa:	d154      	bne.n	80042a6 <_vfiprintf_r+0xfa>
 80041fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8004200:	d00b      	beq.n	800421a <_vfiprintf_r+0x6e>
 8004202:	4653      	mov	r3, sl
 8004204:	463a      	mov	r2, r7
 8004206:	4621      	mov	r1, r4
 8004208:	4630      	mov	r0, r6
 800420a:	f7ff ffbc 	bl	8004186 <__sfputs_r>
 800420e:	3001      	adds	r0, #1
 8004210:	f000 80c2 	beq.w	8004398 <_vfiprintf_r+0x1ec>
 8004214:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004216:	4453      	add	r3, sl
 8004218:	9309      	str	r3, [sp, #36]	; 0x24
 800421a:	f898 3000 	ldrb.w	r3, [r8]
 800421e:	2b00      	cmp	r3, #0
 8004220:	f000 80ba 	beq.w	8004398 <_vfiprintf_r+0x1ec>
 8004224:	2300      	movs	r3, #0
 8004226:	f04f 32ff 	mov.w	r2, #4294967295
 800422a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800422e:	9304      	str	r3, [sp, #16]
 8004230:	9307      	str	r3, [sp, #28]
 8004232:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8004236:	931a      	str	r3, [sp, #104]	; 0x68
 8004238:	46a8      	mov	r8, r5
 800423a:	2205      	movs	r2, #5
 800423c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004240:	485e      	ldr	r0, [pc, #376]	; (80043bc <_vfiprintf_r+0x210>)
 8004242:	f7fb ffc5 	bl	80001d0 <memchr>
 8004246:	9b04      	ldr	r3, [sp, #16]
 8004248:	bb78      	cbnz	r0, 80042aa <_vfiprintf_r+0xfe>
 800424a:	06d9      	lsls	r1, r3, #27
 800424c:	bf44      	itt	mi
 800424e:	2220      	movmi	r2, #32
 8004250:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004254:	071a      	lsls	r2, r3, #28
 8004256:	bf44      	itt	mi
 8004258:	222b      	movmi	r2, #43	; 0x2b
 800425a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800425e:	782a      	ldrb	r2, [r5, #0]
 8004260:	2a2a      	cmp	r2, #42	; 0x2a
 8004262:	d02a      	beq.n	80042ba <_vfiprintf_r+0x10e>
 8004264:	9a07      	ldr	r2, [sp, #28]
 8004266:	46a8      	mov	r8, r5
 8004268:	2000      	movs	r0, #0
 800426a:	250a      	movs	r5, #10
 800426c:	4641      	mov	r1, r8
 800426e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004272:	3b30      	subs	r3, #48	; 0x30
 8004274:	2b09      	cmp	r3, #9
 8004276:	d969      	bls.n	800434c <_vfiprintf_r+0x1a0>
 8004278:	b360      	cbz	r0, 80042d4 <_vfiprintf_r+0x128>
 800427a:	e024      	b.n	80042c6 <_vfiprintf_r+0x11a>
 800427c:	4b50      	ldr	r3, [pc, #320]	; (80043c0 <_vfiprintf_r+0x214>)
 800427e:	429c      	cmp	r4, r3
 8004280:	d101      	bne.n	8004286 <_vfiprintf_r+0xda>
 8004282:	68b4      	ldr	r4, [r6, #8]
 8004284:	e7a2      	b.n	80041cc <_vfiprintf_r+0x20>
 8004286:	4b4f      	ldr	r3, [pc, #316]	; (80043c4 <_vfiprintf_r+0x218>)
 8004288:	429c      	cmp	r4, r3
 800428a:	bf08      	it	eq
 800428c:	68f4      	ldreq	r4, [r6, #12]
 800428e:	e79d      	b.n	80041cc <_vfiprintf_r+0x20>
 8004290:	4621      	mov	r1, r4
 8004292:	4630      	mov	r0, r6
 8004294:	f7ff fc6c 	bl	8003b70 <__swsetup_r>
 8004298:	2800      	cmp	r0, #0
 800429a:	d09d      	beq.n	80041d8 <_vfiprintf_r+0x2c>
 800429c:	f04f 30ff 	mov.w	r0, #4294967295
 80042a0:	b01d      	add	sp, #116	; 0x74
 80042a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042a6:	46a8      	mov	r8, r5
 80042a8:	e7a2      	b.n	80041f0 <_vfiprintf_r+0x44>
 80042aa:	4a44      	ldr	r2, [pc, #272]	; (80043bc <_vfiprintf_r+0x210>)
 80042ac:	1a80      	subs	r0, r0, r2
 80042ae:	fa0b f000 	lsl.w	r0, fp, r0
 80042b2:	4318      	orrs	r0, r3
 80042b4:	9004      	str	r0, [sp, #16]
 80042b6:	4645      	mov	r5, r8
 80042b8:	e7be      	b.n	8004238 <_vfiprintf_r+0x8c>
 80042ba:	9a03      	ldr	r2, [sp, #12]
 80042bc:	1d11      	adds	r1, r2, #4
 80042be:	6812      	ldr	r2, [r2, #0]
 80042c0:	9103      	str	r1, [sp, #12]
 80042c2:	2a00      	cmp	r2, #0
 80042c4:	db01      	blt.n	80042ca <_vfiprintf_r+0x11e>
 80042c6:	9207      	str	r2, [sp, #28]
 80042c8:	e004      	b.n	80042d4 <_vfiprintf_r+0x128>
 80042ca:	4252      	negs	r2, r2
 80042cc:	f043 0302 	orr.w	r3, r3, #2
 80042d0:	9207      	str	r2, [sp, #28]
 80042d2:	9304      	str	r3, [sp, #16]
 80042d4:	f898 3000 	ldrb.w	r3, [r8]
 80042d8:	2b2e      	cmp	r3, #46	; 0x2e
 80042da:	d10e      	bne.n	80042fa <_vfiprintf_r+0x14e>
 80042dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80042e0:	2b2a      	cmp	r3, #42	; 0x2a
 80042e2:	d138      	bne.n	8004356 <_vfiprintf_r+0x1aa>
 80042e4:	9b03      	ldr	r3, [sp, #12]
 80042e6:	1d1a      	adds	r2, r3, #4
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	9203      	str	r2, [sp, #12]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	bfb8      	it	lt
 80042f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80042f4:	f108 0802 	add.w	r8, r8, #2
 80042f8:	9305      	str	r3, [sp, #20]
 80042fa:	4d33      	ldr	r5, [pc, #204]	; (80043c8 <_vfiprintf_r+0x21c>)
 80042fc:	f898 1000 	ldrb.w	r1, [r8]
 8004300:	2203      	movs	r2, #3
 8004302:	4628      	mov	r0, r5
 8004304:	f7fb ff64 	bl	80001d0 <memchr>
 8004308:	b140      	cbz	r0, 800431c <_vfiprintf_r+0x170>
 800430a:	2340      	movs	r3, #64	; 0x40
 800430c:	1b40      	subs	r0, r0, r5
 800430e:	fa03 f000 	lsl.w	r0, r3, r0
 8004312:	9b04      	ldr	r3, [sp, #16]
 8004314:	4303      	orrs	r3, r0
 8004316:	f108 0801 	add.w	r8, r8, #1
 800431a:	9304      	str	r3, [sp, #16]
 800431c:	f898 1000 	ldrb.w	r1, [r8]
 8004320:	482a      	ldr	r0, [pc, #168]	; (80043cc <_vfiprintf_r+0x220>)
 8004322:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004326:	2206      	movs	r2, #6
 8004328:	f108 0701 	add.w	r7, r8, #1
 800432c:	f7fb ff50 	bl	80001d0 <memchr>
 8004330:	2800      	cmp	r0, #0
 8004332:	d037      	beq.n	80043a4 <_vfiprintf_r+0x1f8>
 8004334:	4b26      	ldr	r3, [pc, #152]	; (80043d0 <_vfiprintf_r+0x224>)
 8004336:	bb1b      	cbnz	r3, 8004380 <_vfiprintf_r+0x1d4>
 8004338:	9b03      	ldr	r3, [sp, #12]
 800433a:	3307      	adds	r3, #7
 800433c:	f023 0307 	bic.w	r3, r3, #7
 8004340:	3308      	adds	r3, #8
 8004342:	9303      	str	r3, [sp, #12]
 8004344:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004346:	444b      	add	r3, r9
 8004348:	9309      	str	r3, [sp, #36]	; 0x24
 800434a:	e750      	b.n	80041ee <_vfiprintf_r+0x42>
 800434c:	fb05 3202 	mla	r2, r5, r2, r3
 8004350:	2001      	movs	r0, #1
 8004352:	4688      	mov	r8, r1
 8004354:	e78a      	b.n	800426c <_vfiprintf_r+0xc0>
 8004356:	2300      	movs	r3, #0
 8004358:	f108 0801 	add.w	r8, r8, #1
 800435c:	9305      	str	r3, [sp, #20]
 800435e:	4619      	mov	r1, r3
 8004360:	250a      	movs	r5, #10
 8004362:	4640      	mov	r0, r8
 8004364:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004368:	3a30      	subs	r2, #48	; 0x30
 800436a:	2a09      	cmp	r2, #9
 800436c:	d903      	bls.n	8004376 <_vfiprintf_r+0x1ca>
 800436e:	2b00      	cmp	r3, #0
 8004370:	d0c3      	beq.n	80042fa <_vfiprintf_r+0x14e>
 8004372:	9105      	str	r1, [sp, #20]
 8004374:	e7c1      	b.n	80042fa <_vfiprintf_r+0x14e>
 8004376:	fb05 2101 	mla	r1, r5, r1, r2
 800437a:	2301      	movs	r3, #1
 800437c:	4680      	mov	r8, r0
 800437e:	e7f0      	b.n	8004362 <_vfiprintf_r+0x1b6>
 8004380:	ab03      	add	r3, sp, #12
 8004382:	9300      	str	r3, [sp, #0]
 8004384:	4622      	mov	r2, r4
 8004386:	4b13      	ldr	r3, [pc, #76]	; (80043d4 <_vfiprintf_r+0x228>)
 8004388:	a904      	add	r1, sp, #16
 800438a:	4630      	mov	r0, r6
 800438c:	f3af 8000 	nop.w
 8004390:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004394:	4681      	mov	r9, r0
 8004396:	d1d5      	bne.n	8004344 <_vfiprintf_r+0x198>
 8004398:	89a3      	ldrh	r3, [r4, #12]
 800439a:	065b      	lsls	r3, r3, #25
 800439c:	f53f af7e 	bmi.w	800429c <_vfiprintf_r+0xf0>
 80043a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80043a2:	e77d      	b.n	80042a0 <_vfiprintf_r+0xf4>
 80043a4:	ab03      	add	r3, sp, #12
 80043a6:	9300      	str	r3, [sp, #0]
 80043a8:	4622      	mov	r2, r4
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <_vfiprintf_r+0x228>)
 80043ac:	a904      	add	r1, sp, #16
 80043ae:	4630      	mov	r0, r6
 80043b0:	f000 f888 	bl	80044c4 <_printf_i>
 80043b4:	e7ec      	b.n	8004390 <_vfiprintf_r+0x1e4>
 80043b6:	bf00      	nop
 80043b8:	080057a0 	.word	0x080057a0
 80043bc:	080057e0 	.word	0x080057e0
 80043c0:	080057c0 	.word	0x080057c0
 80043c4:	08005780 	.word	0x08005780
 80043c8:	080057e6 	.word	0x080057e6
 80043cc:	080057ea 	.word	0x080057ea
 80043d0:	00000000 	.word	0x00000000
 80043d4:	08004187 	.word	0x08004187

080043d8 <_printf_common>:
 80043d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80043dc:	4691      	mov	r9, r2
 80043de:	461f      	mov	r7, r3
 80043e0:	688a      	ldr	r2, [r1, #8]
 80043e2:	690b      	ldr	r3, [r1, #16]
 80043e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80043e8:	4293      	cmp	r3, r2
 80043ea:	bfb8      	it	lt
 80043ec:	4613      	movlt	r3, r2
 80043ee:	f8c9 3000 	str.w	r3, [r9]
 80043f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80043f6:	4606      	mov	r6, r0
 80043f8:	460c      	mov	r4, r1
 80043fa:	b112      	cbz	r2, 8004402 <_printf_common+0x2a>
 80043fc:	3301      	adds	r3, #1
 80043fe:	f8c9 3000 	str.w	r3, [r9]
 8004402:	6823      	ldr	r3, [r4, #0]
 8004404:	0699      	lsls	r1, r3, #26
 8004406:	bf42      	ittt	mi
 8004408:	f8d9 3000 	ldrmi.w	r3, [r9]
 800440c:	3302      	addmi	r3, #2
 800440e:	f8c9 3000 	strmi.w	r3, [r9]
 8004412:	6825      	ldr	r5, [r4, #0]
 8004414:	f015 0506 	ands.w	r5, r5, #6
 8004418:	d107      	bne.n	800442a <_printf_common+0x52>
 800441a:	f104 0a19 	add.w	sl, r4, #25
 800441e:	68e3      	ldr	r3, [r4, #12]
 8004420:	f8d9 2000 	ldr.w	r2, [r9]
 8004424:	1a9b      	subs	r3, r3, r2
 8004426:	42ab      	cmp	r3, r5
 8004428:	dc28      	bgt.n	800447c <_printf_common+0xa4>
 800442a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800442e:	6822      	ldr	r2, [r4, #0]
 8004430:	3300      	adds	r3, #0
 8004432:	bf18      	it	ne
 8004434:	2301      	movne	r3, #1
 8004436:	0692      	lsls	r2, r2, #26
 8004438:	d42d      	bmi.n	8004496 <_printf_common+0xbe>
 800443a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800443e:	4639      	mov	r1, r7
 8004440:	4630      	mov	r0, r6
 8004442:	47c0      	blx	r8
 8004444:	3001      	adds	r0, #1
 8004446:	d020      	beq.n	800448a <_printf_common+0xb2>
 8004448:	6823      	ldr	r3, [r4, #0]
 800444a:	68e5      	ldr	r5, [r4, #12]
 800444c:	f8d9 2000 	ldr.w	r2, [r9]
 8004450:	f003 0306 	and.w	r3, r3, #6
 8004454:	2b04      	cmp	r3, #4
 8004456:	bf08      	it	eq
 8004458:	1aad      	subeq	r5, r5, r2
 800445a:	68a3      	ldr	r3, [r4, #8]
 800445c:	6922      	ldr	r2, [r4, #16]
 800445e:	bf0c      	ite	eq
 8004460:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004464:	2500      	movne	r5, #0
 8004466:	4293      	cmp	r3, r2
 8004468:	bfc4      	itt	gt
 800446a:	1a9b      	subgt	r3, r3, r2
 800446c:	18ed      	addgt	r5, r5, r3
 800446e:	f04f 0900 	mov.w	r9, #0
 8004472:	341a      	adds	r4, #26
 8004474:	454d      	cmp	r5, r9
 8004476:	d11a      	bne.n	80044ae <_printf_common+0xd6>
 8004478:	2000      	movs	r0, #0
 800447a:	e008      	b.n	800448e <_printf_common+0xb6>
 800447c:	2301      	movs	r3, #1
 800447e:	4652      	mov	r2, sl
 8004480:	4639      	mov	r1, r7
 8004482:	4630      	mov	r0, r6
 8004484:	47c0      	blx	r8
 8004486:	3001      	adds	r0, #1
 8004488:	d103      	bne.n	8004492 <_printf_common+0xba>
 800448a:	f04f 30ff 	mov.w	r0, #4294967295
 800448e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004492:	3501      	adds	r5, #1
 8004494:	e7c3      	b.n	800441e <_printf_common+0x46>
 8004496:	18e1      	adds	r1, r4, r3
 8004498:	1c5a      	adds	r2, r3, #1
 800449a:	2030      	movs	r0, #48	; 0x30
 800449c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80044a0:	4422      	add	r2, r4
 80044a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80044a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80044aa:	3302      	adds	r3, #2
 80044ac:	e7c5      	b.n	800443a <_printf_common+0x62>
 80044ae:	2301      	movs	r3, #1
 80044b0:	4622      	mov	r2, r4
 80044b2:	4639      	mov	r1, r7
 80044b4:	4630      	mov	r0, r6
 80044b6:	47c0      	blx	r8
 80044b8:	3001      	adds	r0, #1
 80044ba:	d0e6      	beq.n	800448a <_printf_common+0xb2>
 80044bc:	f109 0901 	add.w	r9, r9, #1
 80044c0:	e7d8      	b.n	8004474 <_printf_common+0x9c>
	...

080044c4 <_printf_i>:
 80044c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80044c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80044cc:	460c      	mov	r4, r1
 80044ce:	7e09      	ldrb	r1, [r1, #24]
 80044d0:	b085      	sub	sp, #20
 80044d2:	296e      	cmp	r1, #110	; 0x6e
 80044d4:	4617      	mov	r7, r2
 80044d6:	4606      	mov	r6, r0
 80044d8:	4698      	mov	r8, r3
 80044da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80044dc:	f000 80b3 	beq.w	8004646 <_printf_i+0x182>
 80044e0:	d822      	bhi.n	8004528 <_printf_i+0x64>
 80044e2:	2963      	cmp	r1, #99	; 0x63
 80044e4:	d036      	beq.n	8004554 <_printf_i+0x90>
 80044e6:	d80a      	bhi.n	80044fe <_printf_i+0x3a>
 80044e8:	2900      	cmp	r1, #0
 80044ea:	f000 80b9 	beq.w	8004660 <_printf_i+0x19c>
 80044ee:	2958      	cmp	r1, #88	; 0x58
 80044f0:	f000 8083 	beq.w	80045fa <_printf_i+0x136>
 80044f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80044f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80044fc:	e032      	b.n	8004564 <_printf_i+0xa0>
 80044fe:	2964      	cmp	r1, #100	; 0x64
 8004500:	d001      	beq.n	8004506 <_printf_i+0x42>
 8004502:	2969      	cmp	r1, #105	; 0x69
 8004504:	d1f6      	bne.n	80044f4 <_printf_i+0x30>
 8004506:	6820      	ldr	r0, [r4, #0]
 8004508:	6813      	ldr	r3, [r2, #0]
 800450a:	0605      	lsls	r5, r0, #24
 800450c:	f103 0104 	add.w	r1, r3, #4
 8004510:	d52a      	bpl.n	8004568 <_printf_i+0xa4>
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6011      	str	r1, [r2, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	da03      	bge.n	8004522 <_printf_i+0x5e>
 800451a:	222d      	movs	r2, #45	; 0x2d
 800451c:	425b      	negs	r3, r3
 800451e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004522:	486f      	ldr	r0, [pc, #444]	; (80046e0 <_printf_i+0x21c>)
 8004524:	220a      	movs	r2, #10
 8004526:	e039      	b.n	800459c <_printf_i+0xd8>
 8004528:	2973      	cmp	r1, #115	; 0x73
 800452a:	f000 809d 	beq.w	8004668 <_printf_i+0x1a4>
 800452e:	d808      	bhi.n	8004542 <_printf_i+0x7e>
 8004530:	296f      	cmp	r1, #111	; 0x6f
 8004532:	d020      	beq.n	8004576 <_printf_i+0xb2>
 8004534:	2970      	cmp	r1, #112	; 0x70
 8004536:	d1dd      	bne.n	80044f4 <_printf_i+0x30>
 8004538:	6823      	ldr	r3, [r4, #0]
 800453a:	f043 0320 	orr.w	r3, r3, #32
 800453e:	6023      	str	r3, [r4, #0]
 8004540:	e003      	b.n	800454a <_printf_i+0x86>
 8004542:	2975      	cmp	r1, #117	; 0x75
 8004544:	d017      	beq.n	8004576 <_printf_i+0xb2>
 8004546:	2978      	cmp	r1, #120	; 0x78
 8004548:	d1d4      	bne.n	80044f4 <_printf_i+0x30>
 800454a:	2378      	movs	r3, #120	; 0x78
 800454c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004550:	4864      	ldr	r0, [pc, #400]	; (80046e4 <_printf_i+0x220>)
 8004552:	e055      	b.n	8004600 <_printf_i+0x13c>
 8004554:	6813      	ldr	r3, [r2, #0]
 8004556:	1d19      	adds	r1, r3, #4
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	6011      	str	r1, [r2, #0]
 800455c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004560:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004564:	2301      	movs	r3, #1
 8004566:	e08c      	b.n	8004682 <_printf_i+0x1be>
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	6011      	str	r1, [r2, #0]
 800456c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004570:	bf18      	it	ne
 8004572:	b21b      	sxthne	r3, r3
 8004574:	e7cf      	b.n	8004516 <_printf_i+0x52>
 8004576:	6813      	ldr	r3, [r2, #0]
 8004578:	6825      	ldr	r5, [r4, #0]
 800457a:	1d18      	adds	r0, r3, #4
 800457c:	6010      	str	r0, [r2, #0]
 800457e:	0628      	lsls	r0, r5, #24
 8004580:	d501      	bpl.n	8004586 <_printf_i+0xc2>
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	e002      	b.n	800458c <_printf_i+0xc8>
 8004586:	0668      	lsls	r0, r5, #25
 8004588:	d5fb      	bpl.n	8004582 <_printf_i+0xbe>
 800458a:	881b      	ldrh	r3, [r3, #0]
 800458c:	4854      	ldr	r0, [pc, #336]	; (80046e0 <_printf_i+0x21c>)
 800458e:	296f      	cmp	r1, #111	; 0x6f
 8004590:	bf14      	ite	ne
 8004592:	220a      	movne	r2, #10
 8004594:	2208      	moveq	r2, #8
 8004596:	2100      	movs	r1, #0
 8004598:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800459c:	6865      	ldr	r5, [r4, #4]
 800459e:	60a5      	str	r5, [r4, #8]
 80045a0:	2d00      	cmp	r5, #0
 80045a2:	f2c0 8095 	blt.w	80046d0 <_printf_i+0x20c>
 80045a6:	6821      	ldr	r1, [r4, #0]
 80045a8:	f021 0104 	bic.w	r1, r1, #4
 80045ac:	6021      	str	r1, [r4, #0]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d13d      	bne.n	800462e <_printf_i+0x16a>
 80045b2:	2d00      	cmp	r5, #0
 80045b4:	f040 808e 	bne.w	80046d4 <_printf_i+0x210>
 80045b8:	4665      	mov	r5, ip
 80045ba:	2a08      	cmp	r2, #8
 80045bc:	d10b      	bne.n	80045d6 <_printf_i+0x112>
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	07db      	lsls	r3, r3, #31
 80045c2:	d508      	bpl.n	80045d6 <_printf_i+0x112>
 80045c4:	6923      	ldr	r3, [r4, #16]
 80045c6:	6862      	ldr	r2, [r4, #4]
 80045c8:	429a      	cmp	r2, r3
 80045ca:	bfde      	ittt	le
 80045cc:	2330      	movle	r3, #48	; 0x30
 80045ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80045d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80045d6:	ebac 0305 	sub.w	r3, ip, r5
 80045da:	6123      	str	r3, [r4, #16]
 80045dc:	f8cd 8000 	str.w	r8, [sp]
 80045e0:	463b      	mov	r3, r7
 80045e2:	aa03      	add	r2, sp, #12
 80045e4:	4621      	mov	r1, r4
 80045e6:	4630      	mov	r0, r6
 80045e8:	f7ff fef6 	bl	80043d8 <_printf_common>
 80045ec:	3001      	adds	r0, #1
 80045ee:	d14d      	bne.n	800468c <_printf_i+0x1c8>
 80045f0:	f04f 30ff 	mov.w	r0, #4294967295
 80045f4:	b005      	add	sp, #20
 80045f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80045fa:	4839      	ldr	r0, [pc, #228]	; (80046e0 <_printf_i+0x21c>)
 80045fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004600:	6813      	ldr	r3, [r2, #0]
 8004602:	6821      	ldr	r1, [r4, #0]
 8004604:	1d1d      	adds	r5, r3, #4
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	6015      	str	r5, [r2, #0]
 800460a:	060a      	lsls	r2, r1, #24
 800460c:	d50b      	bpl.n	8004626 <_printf_i+0x162>
 800460e:	07ca      	lsls	r2, r1, #31
 8004610:	bf44      	itt	mi
 8004612:	f041 0120 	orrmi.w	r1, r1, #32
 8004616:	6021      	strmi	r1, [r4, #0]
 8004618:	b91b      	cbnz	r3, 8004622 <_printf_i+0x15e>
 800461a:	6822      	ldr	r2, [r4, #0]
 800461c:	f022 0220 	bic.w	r2, r2, #32
 8004620:	6022      	str	r2, [r4, #0]
 8004622:	2210      	movs	r2, #16
 8004624:	e7b7      	b.n	8004596 <_printf_i+0xd2>
 8004626:	064d      	lsls	r5, r1, #25
 8004628:	bf48      	it	mi
 800462a:	b29b      	uxthmi	r3, r3
 800462c:	e7ef      	b.n	800460e <_printf_i+0x14a>
 800462e:	4665      	mov	r5, ip
 8004630:	fbb3 f1f2 	udiv	r1, r3, r2
 8004634:	fb02 3311 	mls	r3, r2, r1, r3
 8004638:	5cc3      	ldrb	r3, [r0, r3]
 800463a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800463e:	460b      	mov	r3, r1
 8004640:	2900      	cmp	r1, #0
 8004642:	d1f5      	bne.n	8004630 <_printf_i+0x16c>
 8004644:	e7b9      	b.n	80045ba <_printf_i+0xf6>
 8004646:	6813      	ldr	r3, [r2, #0]
 8004648:	6825      	ldr	r5, [r4, #0]
 800464a:	6961      	ldr	r1, [r4, #20]
 800464c:	1d18      	adds	r0, r3, #4
 800464e:	6010      	str	r0, [r2, #0]
 8004650:	0628      	lsls	r0, r5, #24
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	d501      	bpl.n	800465a <_printf_i+0x196>
 8004656:	6019      	str	r1, [r3, #0]
 8004658:	e002      	b.n	8004660 <_printf_i+0x19c>
 800465a:	066a      	lsls	r2, r5, #25
 800465c:	d5fb      	bpl.n	8004656 <_printf_i+0x192>
 800465e:	8019      	strh	r1, [r3, #0]
 8004660:	2300      	movs	r3, #0
 8004662:	6123      	str	r3, [r4, #16]
 8004664:	4665      	mov	r5, ip
 8004666:	e7b9      	b.n	80045dc <_printf_i+0x118>
 8004668:	6813      	ldr	r3, [r2, #0]
 800466a:	1d19      	adds	r1, r3, #4
 800466c:	6011      	str	r1, [r2, #0]
 800466e:	681d      	ldr	r5, [r3, #0]
 8004670:	6862      	ldr	r2, [r4, #4]
 8004672:	2100      	movs	r1, #0
 8004674:	4628      	mov	r0, r5
 8004676:	f7fb fdab 	bl	80001d0 <memchr>
 800467a:	b108      	cbz	r0, 8004680 <_printf_i+0x1bc>
 800467c:	1b40      	subs	r0, r0, r5
 800467e:	6060      	str	r0, [r4, #4]
 8004680:	6863      	ldr	r3, [r4, #4]
 8004682:	6123      	str	r3, [r4, #16]
 8004684:	2300      	movs	r3, #0
 8004686:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800468a:	e7a7      	b.n	80045dc <_printf_i+0x118>
 800468c:	6923      	ldr	r3, [r4, #16]
 800468e:	462a      	mov	r2, r5
 8004690:	4639      	mov	r1, r7
 8004692:	4630      	mov	r0, r6
 8004694:	47c0      	blx	r8
 8004696:	3001      	adds	r0, #1
 8004698:	d0aa      	beq.n	80045f0 <_printf_i+0x12c>
 800469a:	6823      	ldr	r3, [r4, #0]
 800469c:	079b      	lsls	r3, r3, #30
 800469e:	d413      	bmi.n	80046c8 <_printf_i+0x204>
 80046a0:	68e0      	ldr	r0, [r4, #12]
 80046a2:	9b03      	ldr	r3, [sp, #12]
 80046a4:	4298      	cmp	r0, r3
 80046a6:	bfb8      	it	lt
 80046a8:	4618      	movlt	r0, r3
 80046aa:	e7a3      	b.n	80045f4 <_printf_i+0x130>
 80046ac:	2301      	movs	r3, #1
 80046ae:	464a      	mov	r2, r9
 80046b0:	4639      	mov	r1, r7
 80046b2:	4630      	mov	r0, r6
 80046b4:	47c0      	blx	r8
 80046b6:	3001      	adds	r0, #1
 80046b8:	d09a      	beq.n	80045f0 <_printf_i+0x12c>
 80046ba:	3501      	adds	r5, #1
 80046bc:	68e3      	ldr	r3, [r4, #12]
 80046be:	9a03      	ldr	r2, [sp, #12]
 80046c0:	1a9b      	subs	r3, r3, r2
 80046c2:	42ab      	cmp	r3, r5
 80046c4:	dcf2      	bgt.n	80046ac <_printf_i+0x1e8>
 80046c6:	e7eb      	b.n	80046a0 <_printf_i+0x1dc>
 80046c8:	2500      	movs	r5, #0
 80046ca:	f104 0919 	add.w	r9, r4, #25
 80046ce:	e7f5      	b.n	80046bc <_printf_i+0x1f8>
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d1ac      	bne.n	800462e <_printf_i+0x16a>
 80046d4:	7803      	ldrb	r3, [r0, #0]
 80046d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80046da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80046de:	e76c      	b.n	80045ba <_printf_i+0xf6>
 80046e0:	080057f1 	.word	0x080057f1
 80046e4:	08005802 	.word	0x08005802

080046e8 <_sbrk_r>:
 80046e8:	b538      	push	{r3, r4, r5, lr}
 80046ea:	4c06      	ldr	r4, [pc, #24]	; (8004704 <_sbrk_r+0x1c>)
 80046ec:	2300      	movs	r3, #0
 80046ee:	4605      	mov	r5, r0
 80046f0:	4608      	mov	r0, r1
 80046f2:	6023      	str	r3, [r4, #0]
 80046f4:	f7fd fbb6 	bl	8001e64 <_sbrk>
 80046f8:	1c43      	adds	r3, r0, #1
 80046fa:	d102      	bne.n	8004702 <_sbrk_r+0x1a>
 80046fc:	6823      	ldr	r3, [r4, #0]
 80046fe:	b103      	cbz	r3, 8004702 <_sbrk_r+0x1a>
 8004700:	602b      	str	r3, [r5, #0]
 8004702:	bd38      	pop	{r3, r4, r5, pc}
 8004704:	20000660 	.word	0x20000660

08004708 <__sread>:
 8004708:	b510      	push	{r4, lr}
 800470a:	460c      	mov	r4, r1
 800470c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004710:	f000 f896 	bl	8004840 <_read_r>
 8004714:	2800      	cmp	r0, #0
 8004716:	bfab      	itete	ge
 8004718:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800471a:	89a3      	ldrhlt	r3, [r4, #12]
 800471c:	181b      	addge	r3, r3, r0
 800471e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004722:	bfac      	ite	ge
 8004724:	6563      	strge	r3, [r4, #84]	; 0x54
 8004726:	81a3      	strhlt	r3, [r4, #12]
 8004728:	bd10      	pop	{r4, pc}

0800472a <__swrite>:
 800472a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800472e:	461f      	mov	r7, r3
 8004730:	898b      	ldrh	r3, [r1, #12]
 8004732:	05db      	lsls	r3, r3, #23
 8004734:	4605      	mov	r5, r0
 8004736:	460c      	mov	r4, r1
 8004738:	4616      	mov	r6, r2
 800473a:	d505      	bpl.n	8004748 <__swrite+0x1e>
 800473c:	2302      	movs	r3, #2
 800473e:	2200      	movs	r2, #0
 8004740:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004744:	f000 f868 	bl	8004818 <_lseek_r>
 8004748:	89a3      	ldrh	r3, [r4, #12]
 800474a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800474e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004752:	81a3      	strh	r3, [r4, #12]
 8004754:	4632      	mov	r2, r6
 8004756:	463b      	mov	r3, r7
 8004758:	4628      	mov	r0, r5
 800475a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800475e:	f000 b817 	b.w	8004790 <_write_r>

08004762 <__sseek>:
 8004762:	b510      	push	{r4, lr}
 8004764:	460c      	mov	r4, r1
 8004766:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800476a:	f000 f855 	bl	8004818 <_lseek_r>
 800476e:	1c43      	adds	r3, r0, #1
 8004770:	89a3      	ldrh	r3, [r4, #12]
 8004772:	bf15      	itete	ne
 8004774:	6560      	strne	r0, [r4, #84]	; 0x54
 8004776:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800477a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800477e:	81a3      	strheq	r3, [r4, #12]
 8004780:	bf18      	it	ne
 8004782:	81a3      	strhne	r3, [r4, #12]
 8004784:	bd10      	pop	{r4, pc}

08004786 <__sclose>:
 8004786:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800478a:	f000 b813 	b.w	80047b4 <_close_r>
	...

08004790 <_write_r>:
 8004790:	b538      	push	{r3, r4, r5, lr}
 8004792:	4c07      	ldr	r4, [pc, #28]	; (80047b0 <_write_r+0x20>)
 8004794:	4605      	mov	r5, r0
 8004796:	4608      	mov	r0, r1
 8004798:	4611      	mov	r1, r2
 800479a:	2200      	movs	r2, #0
 800479c:	6022      	str	r2, [r4, #0]
 800479e:	461a      	mov	r2, r3
 80047a0:	f7fd fb10 	bl	8001dc4 <_write>
 80047a4:	1c43      	adds	r3, r0, #1
 80047a6:	d102      	bne.n	80047ae <_write_r+0x1e>
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	b103      	cbz	r3, 80047ae <_write_r+0x1e>
 80047ac:	602b      	str	r3, [r5, #0]
 80047ae:	bd38      	pop	{r3, r4, r5, pc}
 80047b0:	20000660 	.word	0x20000660

080047b4 <_close_r>:
 80047b4:	b538      	push	{r3, r4, r5, lr}
 80047b6:	4c06      	ldr	r4, [pc, #24]	; (80047d0 <_close_r+0x1c>)
 80047b8:	2300      	movs	r3, #0
 80047ba:	4605      	mov	r5, r0
 80047bc:	4608      	mov	r0, r1
 80047be:	6023      	str	r3, [r4, #0]
 80047c0:	f7fd fb1c 	bl	8001dfc <_close>
 80047c4:	1c43      	adds	r3, r0, #1
 80047c6:	d102      	bne.n	80047ce <_close_r+0x1a>
 80047c8:	6823      	ldr	r3, [r4, #0]
 80047ca:	b103      	cbz	r3, 80047ce <_close_r+0x1a>
 80047cc:	602b      	str	r3, [r5, #0]
 80047ce:	bd38      	pop	{r3, r4, r5, pc}
 80047d0:	20000660 	.word	0x20000660

080047d4 <_fstat_r>:
 80047d4:	b538      	push	{r3, r4, r5, lr}
 80047d6:	4c07      	ldr	r4, [pc, #28]	; (80047f4 <_fstat_r+0x20>)
 80047d8:	2300      	movs	r3, #0
 80047da:	4605      	mov	r5, r0
 80047dc:	4608      	mov	r0, r1
 80047de:	4611      	mov	r1, r2
 80047e0:	6023      	str	r3, [r4, #0]
 80047e2:	f7fd fb17 	bl	8001e14 <_fstat>
 80047e6:	1c43      	adds	r3, r0, #1
 80047e8:	d102      	bne.n	80047f0 <_fstat_r+0x1c>
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	b103      	cbz	r3, 80047f0 <_fstat_r+0x1c>
 80047ee:	602b      	str	r3, [r5, #0]
 80047f0:	bd38      	pop	{r3, r4, r5, pc}
 80047f2:	bf00      	nop
 80047f4:	20000660 	.word	0x20000660

080047f8 <_isatty_r>:
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4c06      	ldr	r4, [pc, #24]	; (8004814 <_isatty_r+0x1c>)
 80047fc:	2300      	movs	r3, #0
 80047fe:	4605      	mov	r5, r0
 8004800:	4608      	mov	r0, r1
 8004802:	6023      	str	r3, [r4, #0]
 8004804:	f7fd fb16 	bl	8001e34 <_isatty>
 8004808:	1c43      	adds	r3, r0, #1
 800480a:	d102      	bne.n	8004812 <_isatty_r+0x1a>
 800480c:	6823      	ldr	r3, [r4, #0]
 800480e:	b103      	cbz	r3, 8004812 <_isatty_r+0x1a>
 8004810:	602b      	str	r3, [r5, #0]
 8004812:	bd38      	pop	{r3, r4, r5, pc}
 8004814:	20000660 	.word	0x20000660

08004818 <_lseek_r>:
 8004818:	b538      	push	{r3, r4, r5, lr}
 800481a:	4c07      	ldr	r4, [pc, #28]	; (8004838 <_lseek_r+0x20>)
 800481c:	4605      	mov	r5, r0
 800481e:	4608      	mov	r0, r1
 8004820:	4611      	mov	r1, r2
 8004822:	2200      	movs	r2, #0
 8004824:	6022      	str	r2, [r4, #0]
 8004826:	461a      	mov	r2, r3
 8004828:	f7fd fb0f 	bl	8001e4a <_lseek>
 800482c:	1c43      	adds	r3, r0, #1
 800482e:	d102      	bne.n	8004836 <_lseek_r+0x1e>
 8004830:	6823      	ldr	r3, [r4, #0]
 8004832:	b103      	cbz	r3, 8004836 <_lseek_r+0x1e>
 8004834:	602b      	str	r3, [r5, #0]
 8004836:	bd38      	pop	{r3, r4, r5, pc}
 8004838:	20000660 	.word	0x20000660

0800483c <__malloc_lock>:
 800483c:	4770      	bx	lr

0800483e <__malloc_unlock>:
 800483e:	4770      	bx	lr

08004840 <_read_r>:
 8004840:	b538      	push	{r3, r4, r5, lr}
 8004842:	4c07      	ldr	r4, [pc, #28]	; (8004860 <_read_r+0x20>)
 8004844:	4605      	mov	r5, r0
 8004846:	4608      	mov	r0, r1
 8004848:	4611      	mov	r1, r2
 800484a:	2200      	movs	r2, #0
 800484c:	6022      	str	r2, [r4, #0]
 800484e:	461a      	mov	r2, r3
 8004850:	f7fd fa9b 	bl	8001d8a <_read>
 8004854:	1c43      	adds	r3, r0, #1
 8004856:	d102      	bne.n	800485e <_read_r+0x1e>
 8004858:	6823      	ldr	r3, [r4, #0]
 800485a:	b103      	cbz	r3, 800485e <_read_r+0x1e>
 800485c:	602b      	str	r3, [r5, #0]
 800485e:	bd38      	pop	{r3, r4, r5, pc}
 8004860:	20000660 	.word	0x20000660

08004864 <_init>:
 8004864:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004866:	bf00      	nop
 8004868:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800486a:	bc08      	pop	{r3}
 800486c:	469e      	mov	lr, r3
 800486e:	4770      	bx	lr

08004870 <_fini>:
 8004870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004872:	bf00      	nop
 8004874:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004876:	bc08      	pop	{r3}
 8004878:	469e      	mov	lr, r3
 800487a:	4770      	bx	lr
