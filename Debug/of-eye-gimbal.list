
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000202c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080021b4  080021b4  000121b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080021fc  080021fc  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  080021fc  080021fc  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  080021fc  080021fc  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080021fc  080021fc  000121fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002200  08002200  00012200  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002204  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000004  08002208  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000020  08002208  00020020  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .debug_info   00007a3a  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001682  00000000  00000000  00027a6e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000968  00000000  00000000  000290f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000880  00000000  00000000  00029a58  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021269  00000000  00000000  0002a2d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00006bb7  00000000  00000000  0004b541  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000b48cd  00000000  00000000  000520f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001069c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000025c0  00000000  00000000  00106a40  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800219c 	.word	0x0800219c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	0800219c 	.word	0x0800219c

080001c8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b085      	sub	sp, #20
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80001d0:	4b08      	ldr	r3, [pc, #32]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001d4:	4907      	ldr	r1, [pc, #28]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001d6:	687b      	ldr	r3, [r7, #4]
 80001d8:	4313      	orrs	r3, r2
 80001da:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80001dc:	4b05      	ldr	r3, [pc, #20]	; (80001f4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80001de:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80001e0:	687b      	ldr	r3, [r7, #4]
 80001e2:	4013      	ands	r3, r2
 80001e4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80001e6:	68fb      	ldr	r3, [r7, #12]
}
 80001e8:	bf00      	nop
 80001ea:	3714      	adds	r7, #20
 80001ec:	46bd      	mov	sp, r7
 80001ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001f2:	4770      	bx	lr
 80001f4:	40021000 	.word	0x40021000

080001f8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80001f8:	b480      	push	{r7}
 80001fa:	b087      	sub	sp, #28
 80001fc:	af00      	add	r7, sp, #0
 80001fe:	6078      	str	r0, [r7, #4]
 8000200:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000202:	4a17      	ldr	r2, [pc, #92]	; (8000260 <LL_SYSCFG_SetEXTISource+0x68>)
 8000204:	683b      	ldr	r3, [r7, #0]
 8000206:	b2db      	uxtb	r3, r3
 8000208:	3302      	adds	r3, #2
 800020a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800020e:	683b      	ldr	r3, [r7, #0]
 8000210:	0c1b      	lsrs	r3, r3, #16
 8000212:	43db      	mvns	r3, r3
 8000214:	ea02 0103 	and.w	r1, r2, r3
 8000218:	683b      	ldr	r3, [r7, #0]
 800021a:	0c1b      	lsrs	r3, r3, #16
 800021c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800021e:	693b      	ldr	r3, [r7, #16]
 8000220:	fa93 f3a3 	rbit	r3, r3
 8000224:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000226:	68fb      	ldr	r3, [r7, #12]
 8000228:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800022a:	697b      	ldr	r3, [r7, #20]
 800022c:	2b00      	cmp	r3, #0
 800022e:	d101      	bne.n	8000234 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000230:	2320      	movs	r3, #32
 8000232:	e003      	b.n	800023c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000234:	697b      	ldr	r3, [r7, #20]
 8000236:	fab3 f383 	clz	r3, r3
 800023a:	b2db      	uxtb	r3, r3
 800023c:	461a      	mov	r2, r3
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	fa03 f202 	lsl.w	r2, r3, r2
 8000244:	4806      	ldr	r0, [pc, #24]	; (8000260 <LL_SYSCFG_SetEXTISource+0x68>)
 8000246:	683b      	ldr	r3, [r7, #0]
 8000248:	b2db      	uxtb	r3, r3
 800024a:	430a      	orrs	r2, r1
 800024c:	3302      	adds	r3, #2
 800024e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000252:	bf00      	nop
 8000254:	371c      	adds	r7, #28
 8000256:	46bd      	mov	sp, r7
 8000258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800025c:	4770      	bx	lr
 800025e:	bf00      	nop
 8000260:	40010000 	.word	0x40010000

08000264 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000264:	b480      	push	{r7}
 8000266:	b08b      	sub	sp, #44	; 0x2c
 8000268:	af00      	add	r7, sp, #0
 800026a:	60f8      	str	r0, [r7, #12]
 800026c:	60b9      	str	r1, [r7, #8]
 800026e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000270:	68fb      	ldr	r3, [r7, #12]
 8000272:	681a      	ldr	r2, [r3, #0]
 8000274:	68bb      	ldr	r3, [r7, #8]
 8000276:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000278:	697b      	ldr	r3, [r7, #20]
 800027a:	fa93 f3a3 	rbit	r3, r3
 800027e:	613b      	str	r3, [r7, #16]
  return result;
 8000280:	693b      	ldr	r3, [r7, #16]
 8000282:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000284:	69bb      	ldr	r3, [r7, #24]
 8000286:	2b00      	cmp	r3, #0
 8000288:	d101      	bne.n	800028e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800028a:	2320      	movs	r3, #32
 800028c:	e003      	b.n	8000296 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800028e:	69bb      	ldr	r3, [r7, #24]
 8000290:	fab3 f383 	clz	r3, r3
 8000294:	b2db      	uxtb	r3, r3
 8000296:	005b      	lsls	r3, r3, #1
 8000298:	2103      	movs	r1, #3
 800029a:	fa01 f303 	lsl.w	r3, r1, r3
 800029e:	43db      	mvns	r3, r3
 80002a0:	401a      	ands	r2, r3
 80002a2:	68bb      	ldr	r3, [r7, #8]
 80002a4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002a6:	6a3b      	ldr	r3, [r7, #32]
 80002a8:	fa93 f3a3 	rbit	r3, r3
 80002ac:	61fb      	str	r3, [r7, #28]
  return result;
 80002ae:	69fb      	ldr	r3, [r7, #28]
 80002b0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80002b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002b4:	2b00      	cmp	r3, #0
 80002b6:	d101      	bne.n	80002bc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80002b8:	2320      	movs	r3, #32
 80002ba:	e003      	b.n	80002c4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80002bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80002be:	fab3 f383 	clz	r3, r3
 80002c2:	b2db      	uxtb	r3, r3
 80002c4:	005b      	lsls	r3, r3, #1
 80002c6:	6879      	ldr	r1, [r7, #4]
 80002c8:	fa01 f303 	lsl.w	r3, r1, r3
 80002cc:	431a      	orrs	r2, r3
 80002ce:	68fb      	ldr	r3, [r7, #12]
 80002d0:	601a      	str	r2, [r3, #0]
}
 80002d2:	bf00      	nop
 80002d4:	372c      	adds	r7, #44	; 0x2c
 80002d6:	46bd      	mov	sp, r7
 80002d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002dc:	4770      	bx	lr

080002de <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80002de:	b480      	push	{r7}
 80002e0:	b08b      	sub	sp, #44	; 0x2c
 80002e2:	af00      	add	r7, sp, #0
 80002e4:	60f8      	str	r0, [r7, #12]
 80002e6:	60b9      	str	r1, [r7, #8]
 80002e8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80002ea:	68fb      	ldr	r3, [r7, #12]
 80002ec:	68da      	ldr	r2, [r3, #12]
 80002ee:	68bb      	ldr	r3, [r7, #8]
 80002f0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80002f2:	697b      	ldr	r3, [r7, #20]
 80002f4:	fa93 f3a3 	rbit	r3, r3
 80002f8:	613b      	str	r3, [r7, #16]
  return result;
 80002fa:	693b      	ldr	r3, [r7, #16]
 80002fc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80002fe:	69bb      	ldr	r3, [r7, #24]
 8000300:	2b00      	cmp	r3, #0
 8000302:	d101      	bne.n	8000308 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000304:	2320      	movs	r3, #32
 8000306:	e003      	b.n	8000310 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000308:	69bb      	ldr	r3, [r7, #24]
 800030a:	fab3 f383 	clz	r3, r3
 800030e:	b2db      	uxtb	r3, r3
 8000310:	005b      	lsls	r3, r3, #1
 8000312:	2103      	movs	r1, #3
 8000314:	fa01 f303 	lsl.w	r3, r1, r3
 8000318:	43db      	mvns	r3, r3
 800031a:	401a      	ands	r2, r3
 800031c:	68bb      	ldr	r3, [r7, #8]
 800031e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000320:	6a3b      	ldr	r3, [r7, #32]
 8000322:	fa93 f3a3 	rbit	r3, r3
 8000326:	61fb      	str	r3, [r7, #28]
  return result;
 8000328:	69fb      	ldr	r3, [r7, #28]
 800032a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800032c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800032e:	2b00      	cmp	r3, #0
 8000330:	d101      	bne.n	8000336 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000332:	2320      	movs	r3, #32
 8000334:	e003      	b.n	800033e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000338:	fab3 f383 	clz	r3, r3
 800033c:	b2db      	uxtb	r3, r3
 800033e:	005b      	lsls	r3, r3, #1
 8000340:	6879      	ldr	r1, [r7, #4]
 8000342:	fa01 f303 	lsl.w	r3, r1, r3
 8000346:	431a      	orrs	r2, r3
 8000348:	68fb      	ldr	r3, [r7, #12]
 800034a:	60da      	str	r2, [r3, #12]
}
 800034c:	bf00      	nop
 800034e:	372c      	adds	r7, #44	; 0x2c
 8000350:	46bd      	mov	sp, r7
 8000352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000356:	4770      	bx	lr

08000358 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000358:	b480      	push	{r7}
 800035a:	b083      	sub	sp, #12
 800035c:	af00      	add	r7, sp, #0
 800035e:	6078      	str	r0, [r7, #4]
 8000360:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000362:	687b      	ldr	r3, [r7, #4]
 8000364:	683a      	ldr	r2, [r7, #0]
 8000366:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000368:	bf00      	nop
 800036a:	370c      	adds	r7, #12
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000374:	b580      	push	{r7, lr}
 8000376:	b08a      	sub	sp, #40	; 0x28
 8000378:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800037a:	f107 031c 	add.w	r3, r7, #28
 800037e:	2200      	movs	r2, #0
 8000380:	601a      	str	r2, [r3, #0]
 8000382:	605a      	str	r2, [r3, #4]
 8000384:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000386:	1d3b      	adds	r3, r7, #4
 8000388:	2200      	movs	r2, #0
 800038a:	601a      	str	r2, [r3, #0]
 800038c:	605a      	str	r2, [r3, #4]
 800038e:	609a      	str	r2, [r3, #8]
 8000390:	60da      	str	r2, [r3, #12]
 8000392:	611a      	str	r2, [r3, #16]
 8000394:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000396:	2004      	movs	r0, #4
 8000398:	f7ff ff16 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800039c:	2080      	movs	r0, #128	; 0x80
 800039e:	f7ff ff13 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80003a2:	2001      	movs	r0, #1
 80003a4:	f7ff ff10 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80003a8:	2002      	movs	r0, #2
 80003aa:	f7ff ff0d 	bl	80001c8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80003ae:	2120      	movs	r1, #32
 80003b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80003b4:	f7ff ffd0 	bl	8000358 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80003b8:	491b      	ldr	r1, [pc, #108]	; (8000428 <MX_GPIO_Init+0xb4>)
 80003ba:	2002      	movs	r0, #2
 80003bc:	f7ff ff1c 	bl	80001f8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80003c0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80003c4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80003ca:	2301      	movs	r3, #1
 80003cc:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80003d0:	2300      	movs	r3, #0
 80003d2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80003d6:	2302      	movs	r3, #2
 80003d8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80003dc:	f107 031c 	add.w	r3, r7, #28
 80003e0:	4618      	mov	r0, r3
 80003e2:	f000 fde9 	bl	8000fb8 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80003e6:	2200      	movs	r2, #0
 80003e8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003ec:	480f      	ldr	r0, [pc, #60]	; (800042c <MX_GPIO_Init+0xb8>)
 80003ee:	f7ff ff76 	bl	80002de <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80003f2:	2200      	movs	r2, #0
 80003f4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80003f8:	480c      	ldr	r0, [pc, #48]	; (800042c <MX_GPIO_Init+0xb8>)
 80003fa:	f7ff ff33 	bl	8000264 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80003fe:	2320      	movs	r3, #32
 8000400:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000402:	2301      	movs	r3, #1
 8000404:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000406:	2300      	movs	r3, #0
 8000408:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800040a:	2300      	movs	r3, #0
 800040c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800040e:	2300      	movs	r3, #0
 8000410:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000412:	1d3b      	adds	r3, r7, #4
 8000414:	4619      	mov	r1, r3
 8000416:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041a:	f001 f804 	bl	8001426 <LL_GPIO_Init>

}
 800041e:	bf00      	nop
 8000420:	3728      	adds	r7, #40	; 0x28
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	00f00003 	.word	0x00f00003
 800042c:	48000800 	.word	0x48000800

08000430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000430:	b480      	push	{r7}
 8000432:	b085      	sub	sp, #20
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	f003 0307 	and.w	r3, r3, #7
 800043e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000440:	4b0c      	ldr	r3, [pc, #48]	; (8000474 <__NVIC_SetPriorityGrouping+0x44>)
 8000442:	68db      	ldr	r3, [r3, #12]
 8000444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000446:	68ba      	ldr	r2, [r7, #8]
 8000448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800044c:	4013      	ands	r3, r2
 800044e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000450:	68fb      	ldr	r3, [r7, #12]
 8000452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000454:	68bb      	ldr	r3, [r7, #8]
 8000456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800045c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000462:	4a04      	ldr	r2, [pc, #16]	; (8000474 <__NVIC_SetPriorityGrouping+0x44>)
 8000464:	68bb      	ldr	r3, [r7, #8]
 8000466:	60d3      	str	r3, [r2, #12]
}
 8000468:	bf00      	nop
 800046a:	3714      	adds	r7, #20
 800046c:	46bd      	mov	sp, r7
 800046e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000472:	4770      	bx	lr
 8000474:	e000ed00 	.word	0xe000ed00

08000478 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000478:	b480      	push	{r7}
 800047a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800047c:	4b05      	ldr	r3, [pc, #20]	; (8000494 <LL_RCC_HSI_Enable+0x1c>)
 800047e:	681b      	ldr	r3, [r3, #0]
 8000480:	4a04      	ldr	r2, [pc, #16]	; (8000494 <LL_RCC_HSI_Enable+0x1c>)
 8000482:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000486:	6013      	str	r3, [r2, #0]
}
 8000488:	bf00      	nop
 800048a:	46bd      	mov	sp, r7
 800048c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000490:	4770      	bx	lr
 8000492:	bf00      	nop
 8000494:	40021000 	.word	0x40021000

08000498 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000498:	b480      	push	{r7}
 800049a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800049c:	4b07      	ldr	r3, [pc, #28]	; (80004bc <LL_RCC_HSI_IsReady+0x24>)
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80004a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80004a8:	d101      	bne.n	80004ae <LL_RCC_HSI_IsReady+0x16>
 80004aa:	2301      	movs	r3, #1
 80004ac:	e000      	b.n	80004b0 <LL_RCC_HSI_IsReady+0x18>
 80004ae:	2300      	movs	r3, #0
}
 80004b0:	4618      	mov	r0, r3
 80004b2:	46bd      	mov	sp, r7
 80004b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004b8:	4770      	bx	lr
 80004ba:	bf00      	nop
 80004bc:	40021000 	.word	0x40021000

080004c0 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80004c0:	b480      	push	{r7}
 80004c2:	b083      	sub	sp, #12
 80004c4:	af00      	add	r7, sp, #0
 80004c6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80004c8:	4b07      	ldr	r3, [pc, #28]	; (80004e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004ca:	685b      	ldr	r3, [r3, #4]
 80004cc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	061b      	lsls	r3, r3, #24
 80004d4:	4904      	ldr	r1, [pc, #16]	; (80004e8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80004d6:	4313      	orrs	r3, r2
 80004d8:	604b      	str	r3, [r1, #4]
}
 80004da:	bf00      	nop
 80004dc:	370c      	adds	r7, #12
 80004de:	46bd      	mov	sp, r7
 80004e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop
 80004e8:	40021000 	.word	0x40021000

080004ec <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80004ec:	b480      	push	{r7}
 80004ee:	b083      	sub	sp, #12
 80004f0:	af00      	add	r7, sp, #0
 80004f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80004f4:	4b06      	ldr	r3, [pc, #24]	; (8000510 <LL_RCC_SetSysClkSource+0x24>)
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f023 0203 	bic.w	r2, r3, #3
 80004fc:	4904      	ldr	r1, [pc, #16]	; (8000510 <LL_RCC_SetSysClkSource+0x24>)
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	4313      	orrs	r3, r2
 8000502:	608b      	str	r3, [r1, #8]
}
 8000504:	bf00      	nop
 8000506:	370c      	adds	r7, #12
 8000508:	46bd      	mov	sp, r7
 800050a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800050e:	4770      	bx	lr
 8000510:	40021000 	.word	0x40021000

08000514 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000514:	b480      	push	{r7}
 8000516:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000518:	4b04      	ldr	r3, [pc, #16]	; (800052c <LL_RCC_GetSysClkSource+0x18>)
 800051a:	689b      	ldr	r3, [r3, #8]
 800051c:	f003 030c 	and.w	r3, r3, #12
}
 8000520:	4618      	mov	r0, r3
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	40021000 	.word	0x40021000

08000530 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000538:	4b06      	ldr	r3, [pc, #24]	; (8000554 <LL_RCC_SetAHBPrescaler+0x24>)
 800053a:	689b      	ldr	r3, [r3, #8]
 800053c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000540:	4904      	ldr	r1, [pc, #16]	; (8000554 <LL_RCC_SetAHBPrescaler+0x24>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	4313      	orrs	r3, r2
 8000546:	608b      	str	r3, [r1, #8]
}
 8000548:	bf00      	nop
 800054a:	370c      	adds	r7, #12
 800054c:	46bd      	mov	sp, r7
 800054e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000552:	4770      	bx	lr
 8000554:	40021000 	.word	0x40021000

08000558 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000562:	689b      	ldr	r3, [r3, #8]
 8000564:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000568:	4904      	ldr	r1, [pc, #16]	; (800057c <LL_RCC_SetAPB1Prescaler+0x24>)
 800056a:	687b      	ldr	r3, [r7, #4]
 800056c:	4313      	orrs	r3, r2
 800056e:	608b      	str	r3, [r1, #8]
}
 8000570:	bf00      	nop
 8000572:	370c      	adds	r7, #12
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	40021000 	.word	0x40021000

08000580 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000580:	b480      	push	{r7}
 8000582:	b083      	sub	sp, #12
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000588:	4b06      	ldr	r3, [pc, #24]	; (80005a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800058a:	689b      	ldr	r3, [r3, #8]
 800058c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000590:	4904      	ldr	r1, [pc, #16]	; (80005a4 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	4313      	orrs	r3, r2
 8000596:	608b      	str	r3, [r1, #8]
}
 8000598:	bf00      	nop
 800059a:	370c      	adds	r7, #12
 800059c:	46bd      	mov	sp, r7
 800059e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a2:	4770      	bx	lr
 80005a4:	40021000 	.word	0x40021000

080005a8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80005b0:	4b09      	ldr	r3, [pc, #36]	; (80005d8 <LL_RCC_SetUSARTClockSource+0x30>)
 80005b2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80005b6:	687b      	ldr	r3, [r7, #4]
 80005b8:	0c1b      	lsrs	r3, r3, #16
 80005ba:	43db      	mvns	r3, r3
 80005bc:	401a      	ands	r2, r3
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	b29b      	uxth	r3, r3
 80005c2:	4905      	ldr	r1, [pc, #20]	; (80005d8 <LL_RCC_SetUSARTClockSource+0x30>)
 80005c4:	4313      	orrs	r3, r2
 80005c6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80005ca:	bf00      	nop
 80005cc:	370c      	adds	r7, #12
 80005ce:	46bd      	mov	sp, r7
 80005d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d4:	4770      	bx	lr
 80005d6:	bf00      	nop
 80005d8:	40021000 	.word	0x40021000

080005dc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80005dc:	b480      	push	{r7}
 80005de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80005e0:	4b05      	ldr	r3, [pc, #20]	; (80005f8 <LL_RCC_PLL_Enable+0x1c>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	4a04      	ldr	r2, [pc, #16]	; (80005f8 <LL_RCC_PLL_Enable+0x1c>)
 80005e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005ea:	6013      	str	r3, [r2, #0]
}
 80005ec:	bf00      	nop
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40021000 	.word	0x40021000

080005fc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000600:	4b07      	ldr	r3, [pc, #28]	; (8000620 <LL_RCC_PLL_IsReady+0x24>)
 8000602:	681b      	ldr	r3, [r3, #0]
 8000604:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000608:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800060c:	d101      	bne.n	8000612 <LL_RCC_PLL_IsReady+0x16>
 800060e:	2301      	movs	r3, #1
 8000610:	e000      	b.n	8000614 <LL_RCC_PLL_IsReady+0x18>
 8000612:	2300      	movs	r3, #0
}
 8000614:	4618      	mov	r0, r3
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr
 800061e:	bf00      	nop
 8000620:	40021000 	.word	0x40021000

08000624 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0
 800062a:	60f8      	str	r0, [r7, #12]
 800062c:	60b9      	str	r1, [r7, #8]
 800062e:	607a      	str	r2, [r7, #4]
 8000630:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000632:	4b0a      	ldr	r3, [pc, #40]	; (800065c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000634:	68da      	ldr	r2, [r3, #12]
 8000636:	4b0a      	ldr	r3, [pc, #40]	; (8000660 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000638:	4013      	ands	r3, r2
 800063a:	68f9      	ldr	r1, [r7, #12]
 800063c:	68ba      	ldr	r2, [r7, #8]
 800063e:	4311      	orrs	r1, r2
 8000640:	687a      	ldr	r2, [r7, #4]
 8000642:	0212      	lsls	r2, r2, #8
 8000644:	4311      	orrs	r1, r2
 8000646:	683a      	ldr	r2, [r7, #0]
 8000648:	430a      	orrs	r2, r1
 800064a:	4904      	ldr	r1, [pc, #16]	; (800065c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800064c:	4313      	orrs	r3, r2
 800064e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	40021000 	.word	0x40021000
 8000660:	f9ff808c 	.word	0xf9ff808c

08000664 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000664:	b480      	push	{r7}
 8000666:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000668:	4b05      	ldr	r3, [pc, #20]	; (8000680 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800066a:	68db      	ldr	r3, [r3, #12]
 800066c:	4a04      	ldr	r2, [pc, #16]	; (8000680 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800066e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000672:	60d3      	str	r3, [r2, #12]
}
 8000674:	bf00      	nop
 8000676:	46bd      	mov	sp, r7
 8000678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067c:	4770      	bx	lr
 800067e:	bf00      	nop
 8000680:	40021000 	.word	0x40021000

08000684 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000684:	b480      	push	{r7}
 8000686:	b085      	sub	sp, #20
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800068c:	4b08      	ldr	r3, [pc, #32]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800068e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000690:	4907      	ldr	r1, [pc, #28]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	4313      	orrs	r3, r2
 8000696:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000698:	4b05      	ldr	r3, [pc, #20]	; (80006b0 <LL_APB1_GRP1_EnableClock+0x2c>)
 800069a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	4013      	ands	r3, r2
 80006a0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006a2:	68fb      	ldr	r3, [r7, #12]
}
 80006a4:	bf00      	nop
 80006a6:	3714      	adds	r7, #20
 80006a8:	46bd      	mov	sp, r7
 80006aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ae:	4770      	bx	lr
 80006b0:	40021000 	.word	0x40021000

080006b4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006b4:	b480      	push	{r7}
 80006b6:	b085      	sub	sp, #20
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80006bc:	4b08      	ldr	r3, [pc, #32]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006be:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006c0:	4907      	ldr	r1, [pc, #28]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006c2:	687b      	ldr	r3, [r7, #4]
 80006c4:	4313      	orrs	r3, r2
 80006c6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80006c8:	4b05      	ldr	r3, [pc, #20]	; (80006e0 <LL_APB2_GRP1_EnableClock+0x2c>)
 80006ca:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	4013      	ands	r3, r2
 80006d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006d2:	68fb      	ldr	r3, [r7, #12]
}
 80006d4:	bf00      	nop
 80006d6:	3714      	adds	r7, #20
 80006d8:	46bd      	mov	sp, r7
 80006da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006de:	4770      	bx	lr
 80006e0:	40021000 	.word	0x40021000

080006e4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80006e4:	b480      	push	{r7}
 80006e6:	b083      	sub	sp, #12
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80006ec:	4b06      	ldr	r3, [pc, #24]	; (8000708 <LL_FLASH_SetLatency+0x24>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	f023 0207 	bic.w	r2, r3, #7
 80006f4:	4904      	ldr	r1, [pc, #16]	; (8000708 <LL_FLASH_SetLatency+0x24>)
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	4313      	orrs	r3, r2
 80006fa:	600b      	str	r3, [r1, #0]
}
 80006fc:	bf00      	nop
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40022000 	.word	0x40022000

0800070c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000710:	4b04      	ldr	r3, [pc, #16]	; (8000724 <LL_FLASH_GetLatency+0x18>)
 8000712:	681b      	ldr	r3, [r3, #0]
 8000714:	f003 0307 	and.w	r3, r3, #7
}
 8000718:	4618      	mov	r0, r3
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
 8000722:	bf00      	nop
 8000724:	40022000 	.word	0x40022000

08000728 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000728:	b480      	push	{r7}
 800072a:	b083      	sub	sp, #12
 800072c:	af00      	add	r7, sp, #0
 800072e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000730:	4b06      	ldr	r3, [pc, #24]	; (800074c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000732:	681b      	ldr	r3, [r3, #0]
 8000734:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000738:	4904      	ldr	r1, [pc, #16]	; (800074c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	4313      	orrs	r3, r2
 800073e:	600b      	str	r3, [r1, #0]
}
 8000740:	bf00      	nop
 8000742:	370c      	adds	r7, #12
 8000744:	46bd      	mov	sp, r7
 8000746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800074a:	4770      	bx	lr
 800074c:	40007000 	.word	0x40007000

08000750 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000754:	2001      	movs	r0, #1
 8000756:	f7ff ffad 	bl	80006b4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800075a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800075e:	f7ff ff91 	bl	8000684 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000762:	2003      	movs	r0, #3
 8000764:	f7ff fe64 	bl	8000430 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000768:	f000 f80a 	bl	8000780 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800076c:	f7ff fe02 	bl	8000374 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000770:	f000 fa78 	bl	8000c64 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000774:	f000 f8a2 	bl	80008bc <MX_SPI2_Init>
  MX_TIM1_Init();
 8000778:	f000 f9e8 	bl	8000b4c <MX_TIM1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800077c:	e7fe      	b.n	800077c <main+0x2c>
	...

08000780 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000780:	b580      	push	{r7, lr}
 8000782:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000784:	2003      	movs	r0, #3
 8000786:	f7ff ffad 	bl	80006e4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800078a:	bf00      	nop
 800078c:	f7ff ffbe 	bl	800070c <LL_FLASH_GetLatency>
 8000790:	4603      	mov	r3, r0
 8000792:	2b03      	cmp	r3, #3
 8000794:	d1fa      	bne.n	800078c <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000796:	f44f 7000 	mov.w	r0, #512	; 0x200
 800079a:	f7ff ffc5 	bl	8000728 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800079e:	f7ff fe6b 	bl	8000478 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80007a2:	bf00      	nop
 80007a4:	f7ff fe78 	bl	8000498 <LL_RCC_HSI_IsReady>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b01      	cmp	r3, #1
 80007ac:	d1fa      	bne.n	80007a4 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80007ae:	2010      	movs	r0, #16
 80007b0:	f7ff fe86 	bl	80004c0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80007b4:	2300      	movs	r3, #0
 80007b6:	2208      	movs	r2, #8
 80007b8:	2100      	movs	r1, #0
 80007ba:	2002      	movs	r0, #2
 80007bc:	f7ff ff32 	bl	8000624 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80007c0:	f7ff ff50 	bl	8000664 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80007c4:	f7ff ff0a 	bl	80005dc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80007c8:	bf00      	nop
 80007ca:	f7ff ff17 	bl	80005fc <LL_RCC_PLL_IsReady>
 80007ce:	4603      	mov	r3, r0
 80007d0:	2b01      	cmp	r3, #1
 80007d2:	d1fa      	bne.n	80007ca <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80007d4:	2003      	movs	r0, #3
 80007d6:	f7ff fe89 	bl	80004ec <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80007da:	bf00      	nop
 80007dc:	f7ff fe9a 	bl	8000514 <LL_RCC_GetSysClkSource>
 80007e0:	4603      	mov	r3, r0
 80007e2:	2b0c      	cmp	r3, #12
 80007e4:	d1fa      	bne.n	80007dc <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80007e6:	2000      	movs	r0, #0
 80007e8:	f7ff fea2 	bl	8000530 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80007ec:	2000      	movs	r0, #0
 80007ee:	f7ff feb3 	bl	8000558 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80007f2:	2000      	movs	r0, #0
 80007f4:	f7ff fec4 	bl	8000580 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80007f8:	4805      	ldr	r0, [pc, #20]	; (8000810 <SystemClock_Config+0x90>)
 80007fa:	f001 fc85 	bl	8002108 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80007fe:	4804      	ldr	r0, [pc, #16]	; (8000810 <SystemClock_Config+0x90>)
 8000800:	f001 fc90 	bl	8002124 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000804:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000808:	f7ff fece 	bl	80005a8 <LL_RCC_SetUSARTClockSource>
}
 800080c:	bf00      	nop
 800080e:	bd80      	pop	{r7, pc}
 8000810:	03d09000 	.word	0x03d09000

08000814 <LL_AHB2_GRP1_EnableClock>:
{
 8000814:	b480      	push	{r7}
 8000816:	b085      	sub	sp, #20
 8000818:	af00      	add	r7, sp, #0
 800081a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800081c:	4b08      	ldr	r3, [pc, #32]	; (8000840 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800081e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000820:	4907      	ldr	r1, [pc, #28]	; (8000840 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	4313      	orrs	r3, r2
 8000826:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000828:	4b05      	ldr	r3, [pc, #20]	; (8000840 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800082a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	4013      	ands	r3, r2
 8000830:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000832:	68fb      	ldr	r3, [r7, #12]
}
 8000834:	bf00      	nop
 8000836:	3714      	adds	r7, #20
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	40021000 	.word	0x40021000

08000844 <LL_APB1_GRP1_EnableClock>:
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800084c:	4b08      	ldr	r3, [pc, #32]	; (8000870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800084e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000850:	4907      	ldr	r1, [pc, #28]	; (8000870 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	4313      	orrs	r3, r2
 8000856:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000858:	4b05      	ldr	r3, [pc, #20]	; (8000870 <LL_APB1_GRP1_EnableClock+0x2c>)
 800085a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	4013      	ands	r3, r2
 8000860:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000862:	68fb      	ldr	r3, [r7, #12]
}
 8000864:	bf00      	nop
 8000866:	3714      	adds	r7, #20
 8000868:	46bd      	mov	sp, r7
 800086a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800086e:	4770      	bx	lr
 8000870:	40021000 	.word	0x40021000

08000874 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000874:	b480      	push	{r7}
 8000876:	b083      	sub	sp, #12
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
 800087c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	685b      	ldr	r3, [r3, #4]
 8000882:	f023 0210 	bic.w	r2, r3, #16
 8000886:	683b      	ldr	r3, [r7, #0]
 8000888:	431a      	orrs	r2, r3
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	605a      	str	r2, [r3, #4]
}
 800088e:	bf00      	nop
 8000890:	370c      	adds	r7, #12
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr

0800089a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800089a:	b480      	push	{r7}
 800089c:	b083      	sub	sp, #12
 800089e:	af00      	add	r7, sp, #0
 80008a0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	685b      	ldr	r3, [r3, #4]
 80008a6:	f023 0208 	bic.w	r2, r3, #8
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	605a      	str	r2, [r3, #4]
}
 80008ae:	bf00      	nop
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr
	...

080008bc <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80008bc:	b580      	push	{r7, lr}
 80008be:	b090      	sub	sp, #64	; 0x40
 80008c0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80008c2:	f107 0318 	add.w	r3, r7, #24
 80008c6:	2228      	movs	r2, #40	; 0x28
 80008c8:	2100      	movs	r1, #0
 80008ca:	4618      	mov	r0, r3
 80008cc:	f001 fc5e 	bl	800218c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008d0:	463b      	mov	r3, r7
 80008d2:	2200      	movs	r2, #0
 80008d4:	601a      	str	r2, [r3, #0]
 80008d6:	605a      	str	r2, [r3, #4]
 80008d8:	609a      	str	r2, [r3, #8]
 80008da:	60da      	str	r2, [r3, #12]
 80008dc:	611a      	str	r2, [r3, #16]
 80008de:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80008e0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80008e4:	f7ff ffae 	bl	8000844 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80008e8:	2004      	movs	r0, #4
 80008ea:	f7ff ff93 	bl	8000814 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008ee:	2002      	movs	r0, #2
 80008f0:	f7ff ff90 	bl	8000814 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80008f4:	230c      	movs	r3, #12
 80008f6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80008f8:	2302      	movs	r3, #2
 80008fa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000900:	2300      	movs	r3, #0
 8000902:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000904:	2300      	movs	r3, #0
 8000906:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000908:	2305      	movs	r3, #5
 800090a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090c:	463b      	mov	r3, r7
 800090e:	4619      	mov	r1, r3
 8000910:	481e      	ldr	r0, [pc, #120]	; (800098c <MX_SPI2_Init+0xd0>)
 8000912:	f000 fd88 	bl	8001426 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000916:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800091a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800091c:	2302      	movs	r3, #2
 800091e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000920:	2303      	movs	r3, #3
 8000922:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000928:	2300      	movs	r3, #0
 800092a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800092c:	2305      	movs	r3, #5
 800092e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000930:	463b      	mov	r3, r7
 8000932:	4619      	mov	r1, r3
 8000934:	4816      	ldr	r0, [pc, #88]	; (8000990 <MX_SPI2_Init+0xd4>)
 8000936:	f000 fd76 	bl	8001426 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800093a:	2300      	movs	r3, #0
 800093c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800093e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000942:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000944:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000948:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800094a:	2302      	movs	r3, #2
 800094c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800094e:	2301      	movs	r3, #1
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000952:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000956:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8000958:	2320      	movs	r3, #32
 800095a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800095c:	2300      	movs	r3, #0
 800095e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000960:	2300      	movs	r3, #0
 8000962:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000964:	2307      	movs	r3, #7
 8000966:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000968:	f107 0318 	add.w	r3, r7, #24
 800096c:	4619      	mov	r1, r3
 800096e:	4809      	ldr	r0, [pc, #36]	; (8000994 <MX_SPI2_Init+0xd8>)
 8000970:	f001 f9a7 	bl	8001cc2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000974:	2100      	movs	r1, #0
 8000976:	4807      	ldr	r0, [pc, #28]	; (8000994 <MX_SPI2_Init+0xd8>)
 8000978:	f7ff ff7c 	bl	8000874 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 800097c:	4805      	ldr	r0, [pc, #20]	; (8000994 <MX_SPI2_Init+0xd8>)
 800097e:	f7ff ff8c 	bl	800089a <LL_SPI_DisableNSSPulseMgt>

}
 8000982:	bf00      	nop
 8000984:	3740      	adds	r7, #64	; 0x40
 8000986:	46bd      	mov	sp, r7
 8000988:	bd80      	pop	{r7, pc}
 800098a:	bf00      	nop
 800098c:	48000800 	.word	0x48000800
 8000990:	48000400 	.word	0x48000400
 8000994:	40003800 	.word	0x40003800

08000998 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800099c:	bf00      	nop
 800099e:	46bd      	mov	sp, r7
 80009a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a4:	4770      	bx	lr

080009a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80009a6:	b480      	push	{r7}
 80009a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80009aa:	e7fe      	b.n	80009aa <HardFault_Handler+0x4>

080009ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80009ac:	b480      	push	{r7}
 80009ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <MemManage_Handler+0x4>

080009b2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80009b2:	b480      	push	{r7}
 80009b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80009b6:	e7fe      	b.n	80009b6 <BusFault_Handler+0x4>

080009b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80009bc:	e7fe      	b.n	80009bc <UsageFault_Handler+0x4>

080009be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80009be:	b480      	push	{r7}
 80009c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009c2:	bf00      	nop
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr

080009cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009cc:	b480      	push	{r7}
 80009ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr

080009da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009da:	b480      	push	{r7}
 80009dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	46bd      	mov	sp, r7
 80009e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e6:	4770      	bx	lr

080009e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009e8:	b480      	push	{r7}
 80009ea:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ec:	bf00      	nop
 80009ee:	46bd      	mov	sp, r7
 80009f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f4:	4770      	bx	lr
	...

080009f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009fc:	4b17      	ldr	r3, [pc, #92]	; (8000a5c <SystemInit+0x64>)
 80009fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a02:	4a16      	ldr	r2, [pc, #88]	; (8000a5c <SystemInit+0x64>)
 8000a04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000a0c:	4b14      	ldr	r3, [pc, #80]	; (8000a60 <SystemInit+0x68>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	4a13      	ldr	r2, [pc, #76]	; (8000a60 <SystemInit+0x68>)
 8000a12:	f043 0301 	orr.w	r3, r3, #1
 8000a16:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000a18:	4b11      	ldr	r3, [pc, #68]	; (8000a60 <SystemInit+0x68>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000a1e:	4b10      	ldr	r3, [pc, #64]	; (8000a60 <SystemInit+0x68>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4a0f      	ldr	r2, [pc, #60]	; (8000a60 <SystemInit+0x68>)
 8000a24:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000a28:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000a2c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000a2e:	4b0c      	ldr	r3, [pc, #48]	; (8000a60 <SystemInit+0x68>)
 8000a30:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000a34:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000a36:	4b0a      	ldr	r3, [pc, #40]	; (8000a60 <SystemInit+0x68>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a09      	ldr	r2, [pc, #36]	; (8000a60 <SystemInit+0x68>)
 8000a3c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a40:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000a42:	4b07      	ldr	r3, [pc, #28]	; (8000a60 <SystemInit+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a48:	4b04      	ldr	r3, [pc, #16]	; (8000a5c <SystemInit+0x64>)
 8000a4a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a4e:	609a      	str	r2, [r3, #8]
#endif
}
 8000a50:	bf00      	nop
 8000a52:	46bd      	mov	sp, r7
 8000a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000ed00 	.word	0xe000ed00
 8000a60:	40021000 	.word	0x40021000

08000a64 <LL_APB2_GRP1_EnableClock>:
{
 8000a64:	b480      	push	{r7}
 8000a66:	b085      	sub	sp, #20
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000a6c:	4b08      	ldr	r3, [pc, #32]	; (8000a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a6e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a70:	4907      	ldr	r1, [pc, #28]	; (8000a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	4313      	orrs	r3, r2
 8000a76:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000a78:	4b05      	ldr	r3, [pc, #20]	; (8000a90 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000a7a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	4013      	ands	r3, r2
 8000a80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a82:	68fb      	ldr	r3, [r7, #12]
}
 8000a84:	bf00      	nop
 8000a86:	3714      	adds	r7, #20
 8000a88:	46bd      	mov	sp, r7
 8000a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8e:	4770      	bx	lr
 8000a90:	40021000 	.word	0x40021000

08000a94 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	681b      	ldr	r3, [r3, #0]
 8000aa0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	601a      	str	r2, [r3, #0]
}
 8000aa8:	bf00      	nop
 8000aaa:	370c      	adds	r7, #12
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	689b      	ldr	r3, [r3, #8]
 8000ac2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000ac6:	f023 0307 	bic.w	r3, r3, #7
 8000aca:	683a      	ldr	r2, [r7, #0]
 8000acc:	431a      	orrs	r2, r3
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	609a      	str	r2, [r3, #8]
}
 8000ad2:	bf00      	nop
 8000ad4:	370c      	adds	r7, #12
 8000ad6:	46bd      	mov	sp, r7
 8000ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000adc:	4770      	bx	lr

08000ade <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000ade:	b480      	push	{r7}
 8000ae0:	b083      	sub	sp, #12
 8000ae2:	af00      	add	r7, sp, #0
 8000ae4:	6078      	str	r0, [r7, #4]
 8000ae6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	685b      	ldr	r3, [r3, #4]
 8000aec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000af0:	683b      	ldr	r3, [r7, #0]
 8000af2:	431a      	orrs	r2, r3
 8000af4:	687b      	ldr	r3, [r7, #4]
 8000af6:	605a      	str	r2, [r3, #4]
}
 8000af8:	bf00      	nop
 8000afa:	370c      	adds	r7, #12
 8000afc:	46bd      	mov	sp, r7
 8000afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b02:	4770      	bx	lr

08000b04 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000b04:	b480      	push	{r7}
 8000b06:	b083      	sub	sp, #12
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
 8000b0c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	685b      	ldr	r3, [r3, #4]
 8000b12:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	431a      	orrs	r2, r3
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	605a      	str	r2, [r3, #4]
}
 8000b1e:	bf00      	nop
 8000b20:	370c      	adds	r7, #12
 8000b22:	46bd      	mov	sp, r7
 8000b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b28:	4770      	bx	lr

08000b2a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000b2a:	b480      	push	{r7}
 8000b2c:	b083      	sub	sp, #12
 8000b2e:	af00      	add	r7, sp, #0
 8000b30:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	689b      	ldr	r3, [r3, #8]
 8000b36:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	609a      	str	r2, [r3, #8]
}
 8000b3e:	bf00      	nop
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000b52:	1d3b      	adds	r3, r7, #4
 8000b54:	2200      	movs	r2, #0
 8000b56:	601a      	str	r2, [r3, #0]
 8000b58:	605a      	str	r2, [r3, #4]
 8000b5a:	609a      	str	r2, [r3, #8]
 8000b5c:	60da      	str	r2, [r3, #12]
 8000b5e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000b60:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000b64:	f7ff ff7e 	bl	8000a64 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 8000b68:	233f      	movs	r3, #63	; 0x3f
 8000b6a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 115;
 8000b70:	2373      	movs	r3, #115	; 0x73
 8000b72:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000b7c:	1d3b      	adds	r3, r7, #4
 8000b7e:	4619      	mov	r1, r3
 8000b80:	480c      	ldr	r0, [pc, #48]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000b82:	f001 f927 	bl	8001dd4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000b86:	480b      	ldr	r0, [pc, #44]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000b88:	f7ff ff84 	bl	8000a94 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000b8c:	2100      	movs	r1, #0
 8000b8e:	4809      	ldr	r0, [pc, #36]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000b90:	f7ff ff90 	bl	8000ab4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000b94:	2100      	movs	r1, #0
 8000b96:	4807      	ldr	r0, [pc, #28]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000b98:	f7ff ffa1 	bl	8000ade <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	4805      	ldr	r0, [pc, #20]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000ba0:	f7ff ffb0 	bl	8000b04 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000ba4:	4803      	ldr	r0, [pc, #12]	; (8000bb4 <MX_TIM1_Init+0x68>)
 8000ba6:	f7ff ffc0 	bl	8000b2a <LL_TIM_DisableMasterSlaveMode>

}
 8000baa:	bf00      	nop
 8000bac:	3718      	adds	r7, #24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <LL_AHB2_GRP1_EnableClock>:
{
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000bc0:	4b08      	ldr	r3, [pc, #32]	; (8000be4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bc2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bc4:	4907      	ldr	r1, [pc, #28]	; (8000be4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000bcc:	4b05      	ldr	r3, [pc, #20]	; (8000be4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000bce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4013      	ands	r3, r2
 8000bd4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bd6:	68fb      	ldr	r3, [r7, #12]
}
 8000bd8:	bf00      	nop
 8000bda:	3714      	adds	r7, #20
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be2:	4770      	bx	lr
 8000be4:	40021000 	.word	0x40021000

08000be8 <LL_APB1_GRP1_EnableClock>:
{
 8000be8:	b480      	push	{r7}
 8000bea:	b085      	sub	sp, #20
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bf0:	4b08      	ldr	r3, [pc, #32]	; (8000c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bf2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bf4:	4907      	ldr	r1, [pc, #28]	; (8000c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bfc:	4b05      	ldr	r3, [pc, #20]	; (8000c14 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bfe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	4013      	ands	r3, r2
 8000c04:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c06:	68fb      	ldr	r3, [r7, #12]
}
 8000c08:	bf00      	nop
 8000c0a:	3714      	adds	r7, #20
 8000c0c:	46bd      	mov	sp, r7
 8000c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c12:	4770      	bx	lr
 8000c14:	40021000 	.word	0x40021000

08000c18 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0
 8000c1e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	f043 0201 	orr.w	r2, r3, #1
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	601a      	str	r2, [r3, #0]
}
 8000c2c:	bf00      	nop
 8000c2e:	370c      	adds	r7, #12
 8000c30:	46bd      	mov	sp, r7
 8000c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c36:	4770      	bx	lr

08000c38 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b083      	sub	sp, #12
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	609a      	str	r2, [r3, #8]
}
 8000c58:	bf00      	nop
 8000c5a:	370c      	adds	r7, #12
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr

08000c64 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000c64:	b580      	push	{r7, lr}
 8000c66:	b08e      	sub	sp, #56	; 0x38
 8000c68:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000c6a:	f107 031c 	add.w	r3, r7, #28
 8000c6e:	2200      	movs	r2, #0
 8000c70:	601a      	str	r2, [r3, #0]
 8000c72:	605a      	str	r2, [r3, #4]
 8000c74:	609a      	str	r2, [r3, #8]
 8000c76:	60da      	str	r2, [r3, #12]
 8000c78:	611a      	str	r2, [r3, #16]
 8000c7a:	615a      	str	r2, [r3, #20]
 8000c7c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c7e:	1d3b      	adds	r3, r7, #4
 8000c80:	2200      	movs	r2, #0
 8000c82:	601a      	str	r2, [r3, #0]
 8000c84:	605a      	str	r2, [r3, #4]
 8000c86:	609a      	str	r2, [r3, #8]
 8000c88:	60da      	str	r2, [r3, #12]
 8000c8a:	611a      	str	r2, [r3, #16]
 8000c8c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8000c8e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8000c92:	f7ff ffa9 	bl	8000be8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000c96:	2001      	movs	r0, #1
 8000c98:	f7ff ff8e 	bl	8000bb8 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ca4:	2303      	movs	r3, #3
 8000ca6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ca8:	2300      	movs	r3, #0
 8000caa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000cac:	2300      	movs	r3, #0
 8000cae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8000cb0:	2307      	movs	r3, #7
 8000cb2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cb4:	1d3b      	adds	r3, r7, #4
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000cbc:	f000 fbb3 	bl	8001426 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 115200;
 8000cc0:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000cc4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000cce:	2300      	movs	r3, #0
 8000cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000cd2:	230c      	movs	r3, #12
 8000cd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000cda:	2300      	movs	r3, #0
 8000cdc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8000cde:	f107 031c 	add.w	r3, r7, #28
 8000ce2:	4619      	mov	r1, r3
 8000ce4:	4806      	ldr	r0, [pc, #24]	; (8000d00 <MX_USART2_UART_Init+0x9c>)
 8000ce6:	f001 f979 	bl	8001fdc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8000cea:	4805      	ldr	r0, [pc, #20]	; (8000d00 <MX_USART2_UART_Init+0x9c>)
 8000cec:	f7ff ffa4 	bl	8000c38 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8000cf0:	4803      	ldr	r0, [pc, #12]	; (8000d00 <MX_USART2_UART_Init+0x9c>)
 8000cf2:	f7ff ff91 	bl	8000c18 <LL_USART_Enable>

}
 8000cf6:	bf00      	nop
 8000cf8:	3738      	adds	r7, #56	; 0x38
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40004400 	.word	0x40004400

08000d04 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000d04:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000d3c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d08:	f7ff fe76 	bl	80009f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8000d0c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8000d0e:	e003      	b.n	8000d18 <LoopCopyDataInit>

08000d10 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8000d10:	4b0b      	ldr	r3, [pc, #44]	; (8000d40 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8000d12:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8000d14:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8000d16:	3104      	adds	r1, #4

08000d18 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8000d18:	480a      	ldr	r0, [pc, #40]	; (8000d44 <LoopForever+0xa>)
	ldr	r3, =_edata
 8000d1a:	4b0b      	ldr	r3, [pc, #44]	; (8000d48 <LoopForever+0xe>)
	adds	r2, r0, r1
 8000d1c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8000d1e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8000d20:	d3f6      	bcc.n	8000d10 <CopyDataInit>
	ldr	r2, =_sbss
 8000d22:	4a0a      	ldr	r2, [pc, #40]	; (8000d4c <LoopForever+0x12>)
	b	LoopFillZerobss
 8000d24:	e002      	b.n	8000d2c <LoopFillZerobss>

08000d26 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8000d26:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8000d28:	f842 3b04 	str.w	r3, [r2], #4

08000d2c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8000d2c:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <LoopForever+0x16>)
	cmp	r2, r3
 8000d2e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8000d30:	d3f9      	bcc.n	8000d26 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d32:	f001 fa07 	bl	8002144 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000d36:	f7ff fd0b 	bl	8000750 <main>

08000d3a <LoopForever>:

LoopForever:
    b LoopForever
 8000d3a:	e7fe      	b.n	8000d3a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000d3c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8000d40:	08002204 	.word	0x08002204
	ldr	r0, =_sdata
 8000d44:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8000d48:	20000004 	.word	0x20000004
	ldr	r2, =_sbss
 8000d4c:	20000004 	.word	0x20000004
	ldr	r3, = _ebss
 8000d50:	20000020 	.word	0x20000020

08000d54 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000d54:	e7fe      	b.n	8000d54 <ADC1_2_IRQHandler>
	...

08000d58 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8000d60:	4b05      	ldr	r3, [pc, #20]	; (8000d78 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d62:	681a      	ldr	r2, [r3, #0]
 8000d64:	4904      	ldr	r1, [pc, #16]	; (8000d78 <LL_EXTI_EnableIT_0_31+0x20>)
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	600b      	str	r3, [r1, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	370c      	adds	r7, #12
 8000d70:	46bd      	mov	sp, r7
 8000d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d76:	4770      	bx	lr
 8000d78:	40010400 	.word	0x40010400

08000d7c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8000d84:	4b05      	ldr	r3, [pc, #20]	; (8000d9c <LL_EXTI_EnableIT_32_63+0x20>)
 8000d86:	6a1a      	ldr	r2, [r3, #32]
 8000d88:	4904      	ldr	r1, [pc, #16]	; (8000d9c <LL_EXTI_EnableIT_32_63+0x20>)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	4313      	orrs	r3, r2
 8000d8e:	620b      	str	r3, [r1, #32]
}
 8000d90:	bf00      	nop
 8000d92:	370c      	adds	r7, #12
 8000d94:	46bd      	mov	sp, r7
 8000d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9a:	4770      	bx	lr
 8000d9c:	40010400 	.word	0x40010400

08000da0 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8000da0:	b480      	push	{r7}
 8000da2:	b083      	sub	sp, #12
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8000da8:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	687b      	ldr	r3, [r7, #4]
 8000dae:	43db      	mvns	r3, r3
 8000db0:	4904      	ldr	r1, [pc, #16]	; (8000dc4 <LL_EXTI_DisableIT_0_31+0x24>)
 8000db2:	4013      	ands	r3, r2
 8000db4:	600b      	str	r3, [r1, #0]
}
 8000db6:	bf00      	nop
 8000db8:	370c      	adds	r7, #12
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	40010400 	.word	0x40010400

08000dc8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <LL_EXTI_DisableIT_32_63+0x24>)
 8000dd2:	6a1a      	ldr	r2, [r3, #32]
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	4904      	ldr	r1, [pc, #16]	; (8000dec <LL_EXTI_DisableIT_32_63+0x24>)
 8000dda:	4013      	ands	r3, r2
 8000ddc:	620b      	str	r3, [r1, #32]
}
 8000dde:	bf00      	nop
 8000de0:	370c      	adds	r7, #12
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	40010400 	.word	0x40010400

08000df0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8000df8:	4b05      	ldr	r3, [pc, #20]	; (8000e10 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000dfa:	685a      	ldr	r2, [r3, #4]
 8000dfc:	4904      	ldr	r1, [pc, #16]	; (8000e10 <LL_EXTI_EnableEvent_0_31+0x20>)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	604b      	str	r3, [r1, #4]

}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	40010400 	.word	0x40010400

08000e14 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8000e14:	b480      	push	{r7}
 8000e16:	b083      	sub	sp, #12
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8000e1c:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000e1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e20:	4904      	ldr	r1, [pc, #16]	; (8000e34 <LL_EXTI_EnableEvent_32_63+0x20>)
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	4313      	orrs	r3, r2
 8000e26:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000e28:	bf00      	nop
 8000e2a:	370c      	adds	r7, #12
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e32:	4770      	bx	lr
 8000e34:	40010400 	.word	0x40010400

08000e38 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b083      	sub	sp, #12
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8000e40:	4b06      	ldr	r3, [pc, #24]	; (8000e5c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000e42:	685a      	ldr	r2, [r3, #4]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	43db      	mvns	r3, r3
 8000e48:	4904      	ldr	r1, [pc, #16]	; (8000e5c <LL_EXTI_DisableEvent_0_31+0x24>)
 8000e4a:	4013      	ands	r3, r2
 8000e4c:	604b      	str	r3, [r1, #4]
}
 8000e4e:	bf00      	nop
 8000e50:	370c      	adds	r7, #12
 8000e52:	46bd      	mov	sp, r7
 8000e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e58:	4770      	bx	lr
 8000e5a:	bf00      	nop
 8000e5c:	40010400 	.word	0x40010400

08000e60 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8000e60:	b480      	push	{r7}
 8000e62:	b083      	sub	sp, #12
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000e6a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	43db      	mvns	r3, r3
 8000e70:	4904      	ldr	r1, [pc, #16]	; (8000e84 <LL_EXTI_DisableEvent_32_63+0x24>)
 8000e72:	4013      	ands	r3, r2
 8000e74:	624b      	str	r3, [r1, #36]	; 0x24
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
 8000e82:	bf00      	nop
 8000e84:	40010400 	.word	0x40010400

08000e88 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000e88:	b480      	push	{r7}
 8000e8a:	b083      	sub	sp, #12
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8000e90:	4b05      	ldr	r3, [pc, #20]	; (8000ea8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e92:	689a      	ldr	r2, [r3, #8]
 8000e94:	4904      	ldr	r1, [pc, #16]	; (8000ea8 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	4313      	orrs	r3, r2
 8000e9a:	608b      	str	r3, [r1, #8]

}
 8000e9c:	bf00      	nop
 8000e9e:	370c      	adds	r7, #12
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea6:	4770      	bx	lr
 8000ea8:	40010400 	.word	0x40010400

08000eac <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000eac:	b480      	push	{r7}
 8000eae:	b083      	sub	sp, #12
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8000eb4:	4b05      	ldr	r3, [pc, #20]	; (8000ecc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000eb6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eb8:	4904      	ldr	r1, [pc, #16]	; (8000ecc <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	4313      	orrs	r3, r2
 8000ebe:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40010400 	.word	0x40010400

08000ed0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8000ed0:	b480      	push	{r7}
 8000ed2:	b083      	sub	sp, #12
 8000ed4:	af00      	add	r7, sp, #0
 8000ed6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8000ed8:	4b06      	ldr	r3, [pc, #24]	; (8000ef4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000eda:	689a      	ldr	r2, [r3, #8]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	43db      	mvns	r3, r3
 8000ee0:	4904      	ldr	r1, [pc, #16]	; (8000ef4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8000ee2:	4013      	ands	r3, r2
 8000ee4:	608b      	str	r3, [r1, #8]

}
 8000ee6:	bf00      	nop
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop
 8000ef4:	40010400 	.word	0x40010400

08000ef8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	b083      	sub	sp, #12
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8000f00:	4b06      	ldr	r3, [pc, #24]	; (8000f1c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000f02:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	43db      	mvns	r3, r3
 8000f08:	4904      	ldr	r1, [pc, #16]	; (8000f1c <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	628b      	str	r3, [r1, #40]	; 0x28
}
 8000f0e:	bf00      	nop
 8000f10:	370c      	adds	r7, #12
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	40010400 	.word	0x40010400

08000f20 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8000f28:	4b05      	ldr	r3, [pc, #20]	; (8000f40 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f2a:	68da      	ldr	r2, [r3, #12]
 8000f2c:	4904      	ldr	r1, [pc, #16]	; (8000f40 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	60cb      	str	r3, [r1, #12]
}
 8000f34:	bf00      	nop
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr
 8000f40:	40010400 	.word	0x40010400

08000f44 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8000f4c:	4b05      	ldr	r3, [pc, #20]	; (8000f64 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000f4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f50:	4904      	ldr	r1, [pc, #16]	; (8000f64 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4313      	orrs	r3, r2
 8000f56:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000f58:	bf00      	nop
 8000f5a:	370c      	adds	r7, #12
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f62:	4770      	bx	lr
 8000f64:	40010400 	.word	0x40010400

08000f68 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8000f68:	b480      	push	{r7}
 8000f6a:	b083      	sub	sp, #12
 8000f6c:	af00      	add	r7, sp, #0
 8000f6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8000f70:	4b06      	ldr	r3, [pc, #24]	; (8000f8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000f72:	68da      	ldr	r2, [r3, #12]
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	43db      	mvns	r3, r3
 8000f78:	4904      	ldr	r1, [pc, #16]	; (8000f8c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8000f7a:	4013      	ands	r3, r2
 8000f7c:	60cb      	str	r3, [r1, #12]
}
 8000f7e:	bf00      	nop
 8000f80:	370c      	adds	r7, #12
 8000f82:	46bd      	mov	sp, r7
 8000f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop
 8000f8c:	40010400 	.word	0x40010400

08000f90 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8000f90:	b480      	push	{r7}
 8000f92:	b083      	sub	sp, #12
 8000f94:	af00      	add	r7, sp, #0
 8000f96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8000f98:	4b06      	ldr	r3, [pc, #24]	; (8000fb4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	43db      	mvns	r3, r3
 8000fa0:	4904      	ldr	r1, [pc, #16]	; (8000fb4 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8000fa2:	4013      	ands	r3, r2
 8000fa4:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8000fa6:	bf00      	nop
 8000fa8:	370c      	adds	r7, #12
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	40010400 	.word	0x40010400

08000fb8 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	7a1b      	ldrb	r3, [r3, #8]
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	f000 80c6 	beq.w	800115a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d05d      	beq.n	8001092 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7a5b      	ldrb	r3, [r3, #9]
 8000fda:	2b01      	cmp	r3, #1
 8000fdc:	d00e      	beq.n	8000ffc <LL_EXTI_Init+0x44>
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d017      	beq.n	8001012 <LL_EXTI_Init+0x5a>
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d120      	bne.n	8001028 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	4618      	mov	r0, r3
 8000fec:	f7ff ff24 	bl	8000e38 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4618      	mov	r0, r3
 8000ff6:	f7ff feaf 	bl	8000d58 <LL_EXTI_EnableIT_0_31>
          break;
 8000ffa:	e018      	b.n	800102e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4618      	mov	r0, r3
 8001002:	f7ff fecd 	bl	8000da0 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff fef0 	bl	8000df0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001010:	e00d      	b.n	800102e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	4618      	mov	r0, r3
 8001018:	f7ff fe9e 	bl	8000d58 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f7ff fee5 	bl	8000df0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001026:	e002      	b.n	800102e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001028:	2301      	movs	r3, #1
 800102a:	60fb      	str	r3, [r7, #12]
          break;
 800102c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	7a9b      	ldrb	r3, [r3, #10]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d02d      	beq.n	8001092 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	7a9b      	ldrb	r3, [r3, #10]
 800103a:	2b02      	cmp	r3, #2
 800103c:	d00e      	beq.n	800105c <LL_EXTI_Init+0xa4>
 800103e:	2b03      	cmp	r3, #3
 8001040:	d017      	beq.n	8001072 <LL_EXTI_Init+0xba>
 8001042:	2b01      	cmp	r3, #1
 8001044:	d120      	bne.n	8001088 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	681b      	ldr	r3, [r3, #0]
 800104a:	4618      	mov	r0, r3
 800104c:	f7ff ff8c 	bl	8000f68 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4618      	mov	r0, r3
 8001056:	f7ff ff17 	bl	8000e88 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800105a:	e01b      	b.n	8001094 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff35 	bl	8000ed0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	681b      	ldr	r3, [r3, #0]
 800106a:	4618      	mov	r0, r3
 800106c:	f7ff ff58 	bl	8000f20 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001070:	e010      	b.n	8001094 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	681b      	ldr	r3, [r3, #0]
 8001076:	4618      	mov	r0, r3
 8001078:	f7ff ff06 	bl	8000e88 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff4d 	bl	8000f20 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001086:	e005      	b.n	8001094 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	f043 0302 	orr.w	r3, r3, #2
 800108e:	60fb      	str	r3, [r7, #12]
            break;
 8001090:	e000      	b.n	8001094 <LL_EXTI_Init+0xdc>
        }
      }
 8001092:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	685b      	ldr	r3, [r3, #4]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d073      	beq.n	8001184 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	7a5b      	ldrb	r3, [r3, #9]
 80010a0:	2b01      	cmp	r3, #1
 80010a2:	d00e      	beq.n	80010c2 <LL_EXTI_Init+0x10a>
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	d017      	beq.n	80010d8 <LL_EXTI_Init+0x120>
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d120      	bne.n	80010ee <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff fed5 	bl	8000e60 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	685b      	ldr	r3, [r3, #4]
 80010ba:	4618      	mov	r0, r3
 80010bc:	f7ff fe5e 	bl	8000d7c <LL_EXTI_EnableIT_32_63>
          break;
 80010c0:	e01a      	b.n	80010f8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	685b      	ldr	r3, [r3, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fe7e 	bl	8000dc8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	4618      	mov	r0, r3
 80010d2:	f7ff fe9f 	bl	8000e14 <LL_EXTI_EnableEvent_32_63>
          break;
 80010d6:	e00f      	b.n	80010f8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	685b      	ldr	r3, [r3, #4]
 80010dc:	4618      	mov	r0, r3
 80010de:	f7ff fe4d 	bl	8000d7c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	685b      	ldr	r3, [r3, #4]
 80010e6:	4618      	mov	r0, r3
 80010e8:	f7ff fe94 	bl	8000e14 <LL_EXTI_EnableEvent_32_63>
          break;
 80010ec:	e004      	b.n	80010f8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80010ee:	68fb      	ldr	r3, [r7, #12]
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	60fb      	str	r3, [r7, #12]
          break;
 80010f6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	7a9b      	ldrb	r3, [r3, #10]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d041      	beq.n	8001184 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	7a9b      	ldrb	r3, [r3, #10]
 8001104:	2b02      	cmp	r3, #2
 8001106:	d00e      	beq.n	8001126 <LL_EXTI_Init+0x16e>
 8001108:	2b03      	cmp	r3, #3
 800110a:	d017      	beq.n	800113c <LL_EXTI_Init+0x184>
 800110c:	2b01      	cmp	r3, #1
 800110e:	d120      	bne.n	8001152 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	685b      	ldr	r3, [r3, #4]
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff3b 	bl	8000f90 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
 800111e:	4618      	mov	r0, r3
 8001120:	f7ff fec4 	bl	8000eac <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001124:	e02f      	b.n	8001186 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	4618      	mov	r0, r3
 800112c:	f7ff fee4 	bl	8000ef8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	685b      	ldr	r3, [r3, #4]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff05 	bl	8000f44 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800113a:	e024      	b.n	8001186 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	685b      	ldr	r3, [r3, #4]
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff feb3 	bl	8000eac <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	4618      	mov	r0, r3
 800114c:	f7ff fefa 	bl	8000f44 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001150:	e019      	b.n	8001186 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8001152:	2301      	movs	r3, #1
 8001154:	60fb      	str	r3, [r7, #12]
            break;
 8001156:	bf00      	nop
 8001158:	e015      	b.n	8001186 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff fe1e 	bl	8000da0 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	4618      	mov	r0, r3
 800116a:	f7ff fe65 	bl	8000e38 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	685b      	ldr	r3, [r3, #4]
 8001172:	4618      	mov	r0, r3
 8001174:	f7ff fe28 	bl	8000dc8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	4618      	mov	r0, r3
 800117e:	f7ff fe6f 	bl	8000e60 <LL_EXTI_DisableEvent_32_63>
 8001182:	e000      	b.n	8001186 <LL_EXTI_Init+0x1ce>
      }
 8001184:	bf00      	nop
  }

  return status;
 8001186:	68fb      	ldr	r3, [r7, #12]
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <LL_GPIO_SetPinMode>:
{
 8001190:	b480      	push	{r7}
 8001192:	b08b      	sub	sp, #44	; 0x2c
 8001194:	af00      	add	r7, sp, #0
 8001196:	60f8      	str	r0, [r7, #12]
 8001198:	60b9      	str	r1, [r7, #8]
 800119a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800119c:	68fb      	ldr	r3, [r7, #12]
 800119e:	681a      	ldr	r2, [r3, #0]
 80011a0:	68bb      	ldr	r3, [r7, #8]
 80011a2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	fa93 f3a3 	rbit	r3, r3
 80011aa:	613b      	str	r3, [r7, #16]
  return result;
 80011ac:	693b      	ldr	r3, [r7, #16]
 80011ae:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80011b0:	69bb      	ldr	r3, [r7, #24]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d101      	bne.n	80011ba <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80011b6:	2320      	movs	r3, #32
 80011b8:	e003      	b.n	80011c2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80011ba:	69bb      	ldr	r3, [r7, #24]
 80011bc:	fab3 f383 	clz	r3, r3
 80011c0:	b2db      	uxtb	r3, r3
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	2103      	movs	r1, #3
 80011c6:	fa01 f303 	lsl.w	r3, r1, r3
 80011ca:	43db      	mvns	r3, r3
 80011cc:	401a      	ands	r2, r3
 80011ce:	68bb      	ldr	r3, [r7, #8]
 80011d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d2:	6a3b      	ldr	r3, [r7, #32]
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	61fb      	str	r3, [r7, #28]
  return result;
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80011de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d101      	bne.n	80011e8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80011e4:	2320      	movs	r3, #32
 80011e6:	e003      	b.n	80011f0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	fab3 f383 	clz	r3, r3
 80011ee:	b2db      	uxtb	r3, r3
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	6879      	ldr	r1, [r7, #4]
 80011f4:	fa01 f303 	lsl.w	r3, r1, r3
 80011f8:	431a      	orrs	r2, r3
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	601a      	str	r2, [r3, #0]
}
 80011fe:	bf00      	nop
 8001200:	372c      	adds	r7, #44	; 0x2c
 8001202:	46bd      	mov	sp, r7
 8001204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001208:	4770      	bx	lr

0800120a <LL_GPIO_SetPinOutputType>:
{
 800120a:	b480      	push	{r7}
 800120c:	b085      	sub	sp, #20
 800120e:	af00      	add	r7, sp, #0
 8001210:	60f8      	str	r0, [r7, #12]
 8001212:	60b9      	str	r1, [r7, #8]
 8001214:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	685a      	ldr	r2, [r3, #4]
 800121a:	68bb      	ldr	r3, [r7, #8]
 800121c:	43db      	mvns	r3, r3
 800121e:	401a      	ands	r2, r3
 8001220:	68bb      	ldr	r3, [r7, #8]
 8001222:	6879      	ldr	r1, [r7, #4]
 8001224:	fb01 f303 	mul.w	r3, r1, r3
 8001228:	431a      	orrs	r2, r3
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	605a      	str	r2, [r3, #4]
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_GPIO_SetPinSpeed>:
{
 800123a:	b480      	push	{r7}
 800123c:	b08b      	sub	sp, #44	; 0x2c
 800123e:	af00      	add	r7, sp, #0
 8001240:	60f8      	str	r0, [r7, #12]
 8001242:	60b9      	str	r1, [r7, #8]
 8001244:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	689a      	ldr	r2, [r3, #8]
 800124a:	68bb      	ldr	r3, [r7, #8]
 800124c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124e:	697b      	ldr	r3, [r7, #20]
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	613b      	str	r3, [r7, #16]
  return result;
 8001256:	693b      	ldr	r3, [r7, #16]
 8001258:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d101      	bne.n	8001264 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001260:	2320      	movs	r3, #32
 8001262:	e003      	b.n	800126c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	fab3 f383 	clz	r3, r3
 800126a:	b2db      	uxtb	r3, r3
 800126c:	005b      	lsls	r3, r3, #1
 800126e:	2103      	movs	r1, #3
 8001270:	fa01 f303 	lsl.w	r3, r1, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	401a      	ands	r2, r3
 8001278:	68bb      	ldr	r3, [r7, #8]
 800127a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800127c:	6a3b      	ldr	r3, [r7, #32]
 800127e:	fa93 f3a3 	rbit	r3, r3
 8001282:	61fb      	str	r3, [r7, #28]
  return result;
 8001284:	69fb      	ldr	r3, [r7, #28]
 8001286:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800128a:	2b00      	cmp	r3, #0
 800128c:	d101      	bne.n	8001292 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800128e:	2320      	movs	r3, #32
 8001290:	e003      	b.n	800129a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001294:	fab3 f383 	clz	r3, r3
 8001298:	b2db      	uxtb	r3, r3
 800129a:	005b      	lsls	r3, r3, #1
 800129c:	6879      	ldr	r1, [r7, #4]
 800129e:	fa01 f303 	lsl.w	r3, r1, r3
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	609a      	str	r2, [r3, #8]
}
 80012a8:	bf00      	nop
 80012aa:	372c      	adds	r7, #44	; 0x2c
 80012ac:	46bd      	mov	sp, r7
 80012ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b2:	4770      	bx	lr

080012b4 <LL_GPIO_SetPinPull>:
{
 80012b4:	b480      	push	{r7}
 80012b6:	b08b      	sub	sp, #44	; 0x2c
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	60f8      	str	r0, [r7, #12]
 80012bc:	60b9      	str	r1, [r7, #8]
 80012be:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	68da      	ldr	r2, [r3, #12]
 80012c4:	68bb      	ldr	r3, [r7, #8]
 80012c6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa93 f3a3 	rbit	r3, r3
 80012ce:	613b      	str	r3, [r7, #16]
  return result;
 80012d0:	693b      	ldr	r3, [r7, #16]
 80012d2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d101      	bne.n	80012de <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80012da:	2320      	movs	r3, #32
 80012dc:	e003      	b.n	80012e6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	fab3 f383 	clz	r3, r3
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2103      	movs	r1, #3
 80012ea:	fa01 f303 	lsl.w	r3, r1, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	401a      	ands	r2, r3
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012f6:	6a3b      	ldr	r3, [r7, #32]
 80012f8:	fa93 f3a3 	rbit	r3, r3
 80012fc:	61fb      	str	r3, [r7, #28]
  return result;
 80012fe:	69fb      	ldr	r3, [r7, #28]
 8001300:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001308:	2320      	movs	r3, #32
 800130a:	e003      	b.n	8001314 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800130c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800130e:	fab3 f383 	clz	r3, r3
 8001312:	b2db      	uxtb	r3, r3
 8001314:	005b      	lsls	r3, r3, #1
 8001316:	6879      	ldr	r1, [r7, #4]
 8001318:	fa01 f303 	lsl.w	r3, r1, r3
 800131c:	431a      	orrs	r2, r3
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	60da      	str	r2, [r3, #12]
}
 8001322:	bf00      	nop
 8001324:	372c      	adds	r7, #44	; 0x2c
 8001326:	46bd      	mov	sp, r7
 8001328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132c:	4770      	bx	lr

0800132e <LL_GPIO_SetAFPin_0_7>:
{
 800132e:	b480      	push	{r7}
 8001330:	b08b      	sub	sp, #44	; 0x2c
 8001332:	af00      	add	r7, sp, #0
 8001334:	60f8      	str	r0, [r7, #12]
 8001336:	60b9      	str	r1, [r7, #8]
 8001338:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6a1a      	ldr	r2, [r3, #32]
 800133e:	68bb      	ldr	r3, [r7, #8]
 8001340:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001342:	697b      	ldr	r3, [r7, #20]
 8001344:	fa93 f3a3 	rbit	r3, r3
 8001348:	613b      	str	r3, [r7, #16]
  return result;
 800134a:	693b      	ldr	r3, [r7, #16]
 800134c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800134e:	69bb      	ldr	r3, [r7, #24]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001354:	2320      	movs	r3, #32
 8001356:	e003      	b.n	8001360 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	fab3 f383 	clz	r3, r3
 800135e:	b2db      	uxtb	r3, r3
 8001360:	009b      	lsls	r3, r3, #2
 8001362:	210f      	movs	r1, #15
 8001364:	fa01 f303 	lsl.w	r3, r1, r3
 8001368:	43db      	mvns	r3, r3
 800136a:	401a      	ands	r2, r3
 800136c:	68bb      	ldr	r3, [r7, #8]
 800136e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001370:	6a3b      	ldr	r3, [r7, #32]
 8001372:	fa93 f3a3 	rbit	r3, r3
 8001376:	61fb      	str	r3, [r7, #28]
  return result;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800137c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800137e:	2b00      	cmp	r3, #0
 8001380:	d101      	bne.n	8001386 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001382:	2320      	movs	r3, #32
 8001384:	e003      	b.n	800138e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001388:	fab3 f383 	clz	r3, r3
 800138c:	b2db      	uxtb	r3, r3
 800138e:	009b      	lsls	r3, r3, #2
 8001390:	6879      	ldr	r1, [r7, #4]
 8001392:	fa01 f303 	lsl.w	r3, r1, r3
 8001396:	431a      	orrs	r2, r3
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	621a      	str	r2, [r3, #32]
}
 800139c:	bf00      	nop
 800139e:	372c      	adds	r7, #44	; 0x2c
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <LL_GPIO_SetAFPin_8_15>:
{
 80013a8:	b480      	push	{r7}
 80013aa:	b08b      	sub	sp, #44	; 0x2c
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	60f8      	str	r0, [r7, #12]
 80013b0:	60b9      	str	r1, [r7, #8]
 80013b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80013b4:	68fb      	ldr	r3, [r7, #12]
 80013b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013b8:	68bb      	ldr	r3, [r7, #8]
 80013ba:	0a1b      	lsrs	r3, r3, #8
 80013bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013be:	697b      	ldr	r3, [r7, #20]
 80013c0:	fa93 f3a3 	rbit	r3, r3
 80013c4:	613b      	str	r3, [r7, #16]
  return result;
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80013ca:	69bb      	ldr	r3, [r7, #24]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d101      	bne.n	80013d4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80013d0:	2320      	movs	r3, #32
 80013d2:	e003      	b.n	80013dc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80013d4:	69bb      	ldr	r3, [r7, #24]
 80013d6:	fab3 f383 	clz	r3, r3
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	009b      	lsls	r3, r3, #2
 80013de:	210f      	movs	r1, #15
 80013e0:	fa01 f303 	lsl.w	r3, r1, r3
 80013e4:	43db      	mvns	r3, r3
 80013e6:	401a      	ands	r2, r3
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	0a1b      	lsrs	r3, r3, #8
 80013ec:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013ee:	6a3b      	ldr	r3, [r7, #32]
 80013f0:	fa93 f3a3 	rbit	r3, r3
 80013f4:	61fb      	str	r3, [r7, #28]
  return result;
 80013f6:	69fb      	ldr	r3, [r7, #28]
 80013f8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80013fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d101      	bne.n	8001404 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001400:	2320      	movs	r3, #32
 8001402:	e003      	b.n	800140c <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001406:	fab3 f383 	clz	r3, r3
 800140a:	b2db      	uxtb	r3, r3
 800140c:	009b      	lsls	r3, r3, #2
 800140e:	6879      	ldr	r1, [r7, #4]
 8001410:	fa01 f303 	lsl.w	r3, r1, r3
 8001414:	431a      	orrs	r2, r3
 8001416:	68fb      	ldr	r3, [r7, #12]
 8001418:	625a      	str	r2, [r3, #36]	; 0x24
}
 800141a:	bf00      	nop
 800141c:	372c      	adds	r7, #44	; 0x2c
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr

08001426 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001426:	b580      	push	{r7, lr}
 8001428:	b088      	sub	sp, #32
 800142a:	af00      	add	r7, sp, #0
 800142c:	6078      	str	r0, [r7, #4]
 800142e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001436:	693b      	ldr	r3, [r7, #16]
 8001438:	fa93 f3a3 	rbit	r3, r3
 800143c:	60fb      	str	r3, [r7, #12]
  return result;
 800143e:	68fb      	ldr	r3, [r7, #12]
 8001440:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d101      	bne.n	800144c <LL_GPIO_Init+0x26>
    return 32U;
 8001448:	2320      	movs	r3, #32
 800144a:	e003      	b.n	8001454 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800144c:	697b      	ldr	r3, [r7, #20]
 800144e:	fab3 f383 	clz	r3, r3
 8001452:	b2db      	uxtb	r3, r3
 8001454:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001456:	e040      	b.n	80014da <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681a      	ldr	r2, [r3, #0]
 800145c:	2101      	movs	r1, #1
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	fa01 f303 	lsl.w	r3, r1, r3
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001468:	69bb      	ldr	r3, [r7, #24]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d032      	beq.n	80014d4 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	461a      	mov	r2, r3
 8001474:	69b9      	ldr	r1, [r7, #24]
 8001476:	6878      	ldr	r0, [r7, #4]
 8001478:	f7ff fe8a 	bl	8001190 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d003      	beq.n	800148c <LL_GPIO_Init+0x66>
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	2b02      	cmp	r3, #2
 800148a:	d106      	bne.n	800149a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	461a      	mov	r2, r3
 8001492:	69b9      	ldr	r1, [r7, #24]
 8001494:	6878      	ldr	r0, [r7, #4]
 8001496:	f7ff fed0 	bl	800123a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	691b      	ldr	r3, [r3, #16]
 800149e:	461a      	mov	r2, r3
 80014a0:	69b9      	ldr	r1, [r7, #24]
 80014a2:	6878      	ldr	r0, [r7, #4]
 80014a4:	f7ff ff06 	bl	80012b4 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d111      	bne.n	80014d4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80014b0:	69bb      	ldr	r3, [r7, #24]
 80014b2:	2bff      	cmp	r3, #255	; 0xff
 80014b4:	d807      	bhi.n	80014c6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	695b      	ldr	r3, [r3, #20]
 80014ba:	461a      	mov	r2, r3
 80014bc:	69b9      	ldr	r1, [r7, #24]
 80014be:	6878      	ldr	r0, [r7, #4]
 80014c0:	f7ff ff35 	bl	800132e <LL_GPIO_SetAFPin_0_7>
 80014c4:	e006      	b.n	80014d4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	695b      	ldr	r3, [r3, #20]
 80014ca:	461a      	mov	r2, r3
 80014cc:	69b9      	ldr	r1, [r7, #24]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ff6a 	bl	80013a8 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80014d4:	69fb      	ldr	r3, [r7, #28]
 80014d6:	3301      	adds	r3, #1
 80014d8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	681a      	ldr	r2, [r3, #0]
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa22 f303 	lsr.w	r3, r2, r3
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d1b7      	bne.n	8001458 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80014e8:	683b      	ldr	r3, [r7, #0]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d003      	beq.n	80014f8 <LL_GPIO_Init+0xd2>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d107      	bne.n	8001508 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80014f8:	683b      	ldr	r3, [r7, #0]
 80014fa:	6819      	ldr	r1, [r3, #0]
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	461a      	mov	r2, r3
 8001502:	6878      	ldr	r0, [r7, #4]
 8001504:	f7ff fe81 	bl	800120a <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001508:	2300      	movs	r3, #0
}
 800150a:	4618      	mov	r0, r3
 800150c:	3720      	adds	r7, #32
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
	...

08001514 <LL_RCC_HSI_IsReady>:
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001518:	4b07      	ldr	r3, [pc, #28]	; (8001538 <LL_RCC_HSI_IsReady+0x24>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001520:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001524:	d101      	bne.n	800152a <LL_RCC_HSI_IsReady+0x16>
 8001526:	2301      	movs	r3, #1
 8001528:	e000      	b.n	800152c <LL_RCC_HSI_IsReady+0x18>
 800152a:	2300      	movs	r3, #0
}
 800152c:	4618      	mov	r0, r3
 800152e:	46bd      	mov	sp, r7
 8001530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001534:	4770      	bx	lr
 8001536:	bf00      	nop
 8001538:	40021000 	.word	0x40021000

0800153c <LL_RCC_LSE_IsReady>:
{
 800153c:	b480      	push	{r7}
 800153e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <LL_RCC_LSE_IsReady+0x24>)
 8001542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001546:	f003 0302 	and.w	r3, r3, #2
 800154a:	2b02      	cmp	r3, #2
 800154c:	d101      	bne.n	8001552 <LL_RCC_LSE_IsReady+0x16>
 800154e:	2301      	movs	r3, #1
 8001550:	e000      	b.n	8001554 <LL_RCC_LSE_IsReady+0x18>
 8001552:	2300      	movs	r3, #0
}
 8001554:	4618      	mov	r0, r3
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000

08001564 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001568:	4b06      	ldr	r3, [pc, #24]	; (8001584 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b08      	cmp	r3, #8
 8001572:	d101      	bne.n	8001578 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001578:	2300      	movs	r3, #0
}
 800157a:	4618      	mov	r0, r3
 800157c:	46bd      	mov	sp, r7
 800157e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001582:	4770      	bx	lr
 8001584:	40021000 	.word	0x40021000

08001588 <LL_RCC_MSI_GetRange>:
{
 8001588:	b480      	push	{r7}
 800158a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800158c:	4b04      	ldr	r3, [pc, #16]	; (80015a0 <LL_RCC_MSI_GetRange+0x18>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001594:	4618      	mov	r0, r3
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 80015a8:	4b04      	ldr	r3, [pc, #16]	; (80015bc <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80015b2:	4618      	mov	r0, r3
 80015b4:	46bd      	mov	sp, r7
 80015b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ba:	4770      	bx	lr
 80015bc:	40021000 	.word	0x40021000

080015c0 <LL_RCC_GetSysClkSource>:
{
 80015c0:	b480      	push	{r7}
 80015c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80015c4:	4b04      	ldr	r3, [pc, #16]	; (80015d8 <LL_RCC_GetSysClkSource+0x18>)
 80015c6:	689b      	ldr	r3, [r3, #8]
 80015c8:	f003 030c 	and.w	r3, r3, #12
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	46bd      	mov	sp, r7
 80015d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d4:	4770      	bx	lr
 80015d6:	bf00      	nop
 80015d8:	40021000 	.word	0x40021000

080015dc <LL_RCC_GetAHBPrescaler>:
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80015e0:	4b04      	ldr	r3, [pc, #16]	; (80015f4 <LL_RCC_GetAHBPrescaler+0x18>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80015e8:	4618      	mov	r0, r3
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40021000 	.word	0x40021000

080015f8 <LL_RCC_GetAPB1Prescaler>:
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80015fc:	4b04      	ldr	r3, [pc, #16]	; (8001610 <LL_RCC_GetAPB1Prescaler+0x18>)
 80015fe:	689b      	ldr	r3, [r3, #8]
 8001600:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001604:	4618      	mov	r0, r3
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40021000 	.word	0x40021000

08001614 <LL_RCC_GetAPB2Prescaler>:
{
 8001614:	b480      	push	{r7}
 8001616:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001618:	4b04      	ldr	r3, [pc, #16]	; (800162c <LL_RCC_GetAPB2Prescaler+0x18>)
 800161a:	689b      	ldr	r3, [r3, #8]
 800161c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001620:	4618      	mov	r0, r3
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40021000 	.word	0x40021000

08001630 <LL_RCC_GetUSARTClockSource>:
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <LL_RCC_GetUSARTClockSource+0x24>)
 800163a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	401a      	ands	r2, r3
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	041b      	lsls	r3, r3, #16
 8001646:	4313      	orrs	r3, r2
}
 8001648:	4618      	mov	r0, r3
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr
 8001654:	40021000 	.word	0x40021000

08001658 <LL_RCC_GetUARTClockSource>:
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <LL_RCC_GetUARTClockSource+0x24>)
 8001662:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	401a      	ands	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	041b      	lsls	r3, r3, #16
 800166e:	4313      	orrs	r3, r2
}
 8001670:	4618      	mov	r0, r3
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000

08001680 <LL_RCC_PLL_GetMainSource>:
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001684:	4b04      	ldr	r3, [pc, #16]	; (8001698 <LL_RCC_PLL_GetMainSource+0x18>)
 8001686:	68db      	ldr	r3, [r3, #12]
 8001688:	f003 0303 	and.w	r3, r3, #3
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	40021000 	.word	0x40021000

0800169c <LL_RCC_PLL_GetN>:
{
 800169c:	b480      	push	{r7}
 800169e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 80016a0:	4b04      	ldr	r3, [pc, #16]	; (80016b4 <LL_RCC_PLL_GetN+0x18>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	0a1b      	lsrs	r3, r3, #8
 80016a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 80016aa:	4618      	mov	r0, r3
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr
 80016b4:	40021000 	.word	0x40021000

080016b8 <LL_RCC_PLL_GetR>:
{
 80016b8:	b480      	push	{r7}
 80016ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80016bc:	4b04      	ldr	r3, [pc, #16]	; (80016d0 <LL_RCC_PLL_GetR+0x18>)
 80016be:	68db      	ldr	r3, [r3, #12]
 80016c0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80016c4:	4618      	mov	r0, r3
 80016c6:	46bd      	mov	sp, r7
 80016c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016cc:	4770      	bx	lr
 80016ce:	bf00      	nop
 80016d0:	40021000 	.word	0x40021000

080016d4 <LL_RCC_PLL_GetDivider>:
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80016d8:	4b04      	ldr	r3, [pc, #16]	; (80016ec <LL_RCC_PLL_GetDivider+0x18>)
 80016da:	68db      	ldr	r3, [r3, #12]
 80016dc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80016e0:	4618      	mov	r0, r3
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40021000 	.word	0x40021000

080016f0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d137      	bne.n	8001772 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001702:	6878      	ldr	r0, [r7, #4]
 8001704:	f7ff ff94 	bl	8001630 <LL_RCC_GetUSARTClockSource>
 8001708:	4603      	mov	r3, r0
 800170a:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 800170e:	2b03      	cmp	r3, #3
 8001710:	f200 80b2 	bhi.w	8001878 <LL_RCC_GetUSARTClockFreq+0x188>
 8001714:	a201      	add	r2, pc, #4	; (adr r2, 800171c <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001716:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800171a:	bf00      	nop
 800171c:	0800175b 	.word	0x0800175b
 8001720:	0800172d 	.word	0x0800172d
 8001724:	08001735 	.word	0x08001735
 8001728:	08001747 	.word	0x08001747
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800172c:	f000 f952 	bl	80019d4 <RCC_GetSystemClockFreq>
 8001730:	60f8      	str	r0, [r7, #12]
        break;
 8001732:	e0b2      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001734:	f7ff feee 	bl	8001514 <LL_RCC_HSI_IsReady>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	f000 809e 	beq.w	800187c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8001740:	4b58      	ldr	r3, [pc, #352]	; (80018a4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001742:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001744:	e09a      	b.n	800187c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001746:	f7ff fef9 	bl	800153c <LL_RCC_LSE_IsReady>
 800174a:	4603      	mov	r3, r0
 800174c:	2b00      	cmp	r3, #0
 800174e:	f000 8097 	beq.w	8001880 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8001752:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001756:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001758:	e092      	b.n	8001880 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800175a:	f000 f93b 	bl	80019d4 <RCC_GetSystemClockFreq>
 800175e:	4603      	mov	r3, r0
 8001760:	4618      	mov	r0, r3
 8001762:	f000 f9c7 	bl	8001af4 <RCC_GetHCLKClockFreq>
 8001766:	4603      	mov	r3, r0
 8001768:	4618      	mov	r0, r3
 800176a:	f000 f9ed 	bl	8001b48 <RCC_GetPCLK2ClockFreq>
 800176e:	60f8      	str	r0, [r7, #12]
        break;
 8001770:	e093      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2b0c      	cmp	r3, #12
 8001776:	d146      	bne.n	8001806 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001778:	6878      	ldr	r0, [r7, #4]
 800177a:	f7ff ff59 	bl	8001630 <LL_RCC_GetUSARTClockSource>
 800177e:	4603      	mov	r3, r0
 8001780:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001784:	2b0c      	cmp	r3, #12
 8001786:	d87d      	bhi.n	8001884 <LL_RCC_GetUSARTClockFreq+0x194>
 8001788:	a201      	add	r2, pc, #4	; (adr r2, 8001790 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800178a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800178e:	bf00      	nop
 8001790:	080017ef 	.word	0x080017ef
 8001794:	08001885 	.word	0x08001885
 8001798:	08001885 	.word	0x08001885
 800179c:	08001885 	.word	0x08001885
 80017a0:	080017c5 	.word	0x080017c5
 80017a4:	08001885 	.word	0x08001885
 80017a8:	08001885 	.word	0x08001885
 80017ac:	08001885 	.word	0x08001885
 80017b0:	080017cd 	.word	0x080017cd
 80017b4:	08001885 	.word	0x08001885
 80017b8:	08001885 	.word	0x08001885
 80017bc:	08001885 	.word	0x08001885
 80017c0:	080017dd 	.word	0x080017dd
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80017c4:	f000 f906 	bl	80019d4 <RCC_GetSystemClockFreq>
 80017c8:	60f8      	str	r0, [r7, #12]
        break;
 80017ca:	e066      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80017cc:	f7ff fea2 	bl	8001514 <LL_RCC_HSI_IsReady>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d058      	beq.n	8001888 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 80017d6:	4b33      	ldr	r3, [pc, #204]	; (80018a4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80017d8:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017da:	e055      	b.n	8001888 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80017dc:	f7ff feae 	bl	800153c <LL_RCC_LSE_IsReady>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d052      	beq.n	800188c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 80017e6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80017ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80017ec:	e04e      	b.n	800188c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80017ee:	f000 f8f1 	bl	80019d4 <RCC_GetSystemClockFreq>
 80017f2:	4603      	mov	r3, r0
 80017f4:	4618      	mov	r0, r3
 80017f6:	f000 f97d 	bl	8001af4 <RCC_GetHCLKClockFreq>
 80017fa:	4603      	mov	r3, r0
 80017fc:	4618      	mov	r0, r3
 80017fe:	f000 f98f 	bl	8001b20 <RCC_GetPCLK1ClockFreq>
 8001802:	60f8      	str	r0, [r7, #12]
        break;
 8001804:	e049      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	2b30      	cmp	r3, #48	; 0x30
 800180a:	d141      	bne.n	8001890 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ff0f 	bl	8001630 <LL_RCC_GetUSARTClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d00d      	beq.n	8001836 <LL_RCC_GetUSARTClockFreq+0x146>
 800181a:	4a23      	ldr	r2, [pc, #140]	; (80018a8 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800181c:	4293      	cmp	r3, r2
 800181e:	d803      	bhi.n	8001828 <LL_RCC_GetUSARTClockFreq+0x138>
 8001820:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001824:	d01c      	beq.n	8001860 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8001826:	e038      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001828:	4a20      	ldr	r2, [pc, #128]	; (80018ac <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800182a:	4293      	cmp	r3, r2
 800182c:	d007      	beq.n	800183e <LL_RCC_GetUSARTClockFreq+0x14e>
 800182e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8001832:	d00c      	beq.n	800184e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8001834:	e031      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8001836:	f000 f8cd 	bl	80019d4 <RCC_GetSystemClockFreq>
 800183a:	60f8      	str	r0, [r7, #12]
          break;
 800183c:	e02d      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 800183e:	f7ff fe69 	bl	8001514 <LL_RCC_HSI_IsReady>
 8001842:	4603      	mov	r3, r0
 8001844:	2b00      	cmp	r3, #0
 8001846:	d025      	beq.n	8001894 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8001848:	4b16      	ldr	r3, [pc, #88]	; (80018a4 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800184a:	60fb      	str	r3, [r7, #12]
          break;
 800184c:	e022      	b.n	8001894 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 800184e:	f7ff fe75 	bl	800153c <LL_RCC_LSE_IsReady>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d01f      	beq.n	8001898 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8001858:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800185c:	60fb      	str	r3, [r7, #12]
          break;
 800185e:	e01b      	b.n	8001898 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001860:	f000 f8b8 	bl	80019d4 <RCC_GetSystemClockFreq>
 8001864:	4603      	mov	r3, r0
 8001866:	4618      	mov	r0, r3
 8001868:	f000 f944 	bl	8001af4 <RCC_GetHCLKClockFreq>
 800186c:	4603      	mov	r3, r0
 800186e:	4618      	mov	r0, r3
 8001870:	f000 f956 	bl	8001b20 <RCC_GetPCLK1ClockFreq>
 8001874:	60f8      	str	r0, [r7, #12]
          break;
 8001876:	e010      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001878:	bf00      	nop
 800187a:	e00e      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800187c:	bf00      	nop
 800187e:	e00c      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001880:	bf00      	nop
 8001882:	e00a      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001884:	bf00      	nop
 8001886:	e008      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001888:	bf00      	nop
 800188a:	e006      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800188c:	bf00      	nop
 800188e:	e004      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8001890:	bf00      	nop
 8001892:	e002      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001894:	bf00      	nop
 8001896:	e000      	b.n	800189a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001898:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800189a:	68fb      	ldr	r3, [r7, #12]
}
 800189c:	4618      	mov	r0, r3
 800189e:	3710      	adds	r7, #16
 80018a0:	46bd      	mov	sp, r7
 80018a2:	bd80      	pop	{r7, pc}
 80018a4:	00f42400 	.word	0x00f42400
 80018a8:	00300010 	.word	0x00300010
 80018ac:	00300020 	.word	0x00300020

080018b0 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80018b8:	2300      	movs	r3, #0
 80018ba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	2bc0      	cmp	r3, #192	; 0xc0
 80018c0:	d135      	bne.n	800192e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80018c2:	6878      	ldr	r0, [r7, #4]
 80018c4:	f7ff fec8 	bl	8001658 <LL_RCC_GetUARTClockSource>
 80018c8:	4603      	mov	r3, r0
 80018ca:	4a3d      	ldr	r2, [pc, #244]	; (80019c0 <LL_RCC_GetUARTClockFreq+0x110>)
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d00d      	beq.n	80018ec <LL_RCC_GetUARTClockFreq+0x3c>
 80018d0:	4a3b      	ldr	r2, [pc, #236]	; (80019c0 <LL_RCC_GetUARTClockFreq+0x110>)
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d803      	bhi.n	80018de <LL_RCC_GetUARTClockFreq+0x2e>
 80018d6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80018da:	d01c      	beq.n	8001916 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80018dc:	e02c      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80018de:	4a39      	ldr	r2, [pc, #228]	; (80019c4 <LL_RCC_GetUARTClockFreq+0x114>)
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d007      	beq.n	80018f4 <LL_RCC_GetUARTClockFreq+0x44>
 80018e4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80018e8:	d00c      	beq.n	8001904 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80018ea:	e025      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80018ec:	f000 f872 	bl	80019d4 <RCC_GetSystemClockFreq>
 80018f0:	60f8      	str	r0, [r7, #12]
        break;
 80018f2:	e021      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80018f4:	f7ff fe0e 	bl	8001514 <LL_RCC_HSI_IsReady>
 80018f8:	4603      	mov	r3, r0
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d019      	beq.n	8001932 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80018fe:	4b32      	ldr	r3, [pc, #200]	; (80019c8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001900:	60fb      	str	r3, [r7, #12]
        break;
 8001902:	e016      	b.n	8001932 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001904:	f7ff fe1a 	bl	800153c <LL_RCC_LSE_IsReady>
 8001908:	4603      	mov	r3, r0
 800190a:	2b00      	cmp	r3, #0
 800190c:	d013      	beq.n	8001936 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 800190e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001912:	60fb      	str	r3, [r7, #12]
        break;
 8001914:	e00f      	b.n	8001936 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001916:	f000 f85d 	bl	80019d4 <RCC_GetSystemClockFreq>
 800191a:	4603      	mov	r3, r0
 800191c:	4618      	mov	r0, r3
 800191e:	f000 f8e9 	bl	8001af4 <RCC_GetHCLKClockFreq>
 8001922:	4603      	mov	r3, r0
 8001924:	4618      	mov	r0, r3
 8001926:	f000 f8fb 	bl	8001b20 <RCC_GetPCLK1ClockFreq>
 800192a:	60f8      	str	r0, [r7, #12]
        break;
 800192c:	e004      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 800192e:	bf00      	nop
 8001930:	e002      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001932:	bf00      	nop
 8001934:	e000      	b.n	8001938 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001936:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800193e:	d135      	bne.n	80019ac <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001940:	6878      	ldr	r0, [r7, #4]
 8001942:	f7ff fe89 	bl	8001658 <LL_RCC_GetUARTClockSource>
 8001946:	4603      	mov	r3, r0
 8001948:	4a20      	ldr	r2, [pc, #128]	; (80019cc <LL_RCC_GetUARTClockFreq+0x11c>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d00d      	beq.n	800196a <LL_RCC_GetUARTClockFreq+0xba>
 800194e:	4a1f      	ldr	r2, [pc, #124]	; (80019cc <LL_RCC_GetUARTClockFreq+0x11c>)
 8001950:	4293      	cmp	r3, r2
 8001952:	d803      	bhi.n	800195c <LL_RCC_GetUARTClockFreq+0xac>
 8001954:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001958:	d01c      	beq.n	8001994 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800195a:	e02c      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800195c:	4a1c      	ldr	r2, [pc, #112]	; (80019d0 <LL_RCC_GetUARTClockFreq+0x120>)
 800195e:	4293      	cmp	r3, r2
 8001960:	d007      	beq.n	8001972 <LL_RCC_GetUARTClockFreq+0xc2>
 8001962:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8001966:	d00c      	beq.n	8001982 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8001968:	e025      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800196a:	f000 f833 	bl	80019d4 <RCC_GetSystemClockFreq>
 800196e:	60f8      	str	r0, [r7, #12]
        break;
 8001970:	e021      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001972:	f7ff fdcf 	bl	8001514 <LL_RCC_HSI_IsReady>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d019      	beq.n	80019b0 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 800197c:	4b12      	ldr	r3, [pc, #72]	; (80019c8 <LL_RCC_GetUARTClockFreq+0x118>)
 800197e:	60fb      	str	r3, [r7, #12]
        break;
 8001980:	e016      	b.n	80019b0 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001982:	f7ff fddb 	bl	800153c <LL_RCC_LSE_IsReady>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d013      	beq.n	80019b4 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 800198c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001990:	60fb      	str	r3, [r7, #12]
        break;
 8001992:	e00f      	b.n	80019b4 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001994:	f000 f81e 	bl	80019d4 <RCC_GetSystemClockFreq>
 8001998:	4603      	mov	r3, r0
 800199a:	4618      	mov	r0, r3
 800199c:	f000 f8aa 	bl	8001af4 <RCC_GetHCLKClockFreq>
 80019a0:	4603      	mov	r3, r0
 80019a2:	4618      	mov	r0, r3
 80019a4:	f000 f8bc 	bl	8001b20 <RCC_GetPCLK1ClockFreq>
 80019a8:	60f8      	str	r0, [r7, #12]
        break;
 80019aa:	e004      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 80019ac:	bf00      	nop
 80019ae:	e002      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80019b0:	bf00      	nop
 80019b2:	e000      	b.n	80019b6 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80019b4:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80019b6:	68fb      	ldr	r3, [r7, #12]
}
 80019b8:	4618      	mov	r0, r3
 80019ba:	3710      	adds	r7, #16
 80019bc:	46bd      	mov	sp, r7
 80019be:	bd80      	pop	{r7, pc}
 80019c0:	00c00040 	.word	0x00c00040
 80019c4:	00c00080 	.word	0x00c00080
 80019c8:	00f42400 	.word	0x00f42400
 80019cc:	03000100 	.word	0x03000100
 80019d0:	03000200 	.word	0x03000200

080019d4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	b082      	sub	sp, #8
 80019d8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80019da:	f7ff fdf1 	bl	80015c0 <LL_RCC_GetSysClkSource>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b0c      	cmp	r3, #12
 80019e2:	d851      	bhi.n	8001a88 <RCC_GetSystemClockFreq+0xb4>
 80019e4:	a201      	add	r2, pc, #4	; (adr r2, 80019ec <RCC_GetSystemClockFreq+0x18>)
 80019e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019ea:	bf00      	nop
 80019ec:	08001a21 	.word	0x08001a21
 80019f0:	08001a89 	.word	0x08001a89
 80019f4:	08001a89 	.word	0x08001a89
 80019f8:	08001a89 	.word	0x08001a89
 80019fc:	08001a75 	.word	0x08001a75
 8001a00:	08001a89 	.word	0x08001a89
 8001a04:	08001a89 	.word	0x08001a89
 8001a08:	08001a89 	.word	0x08001a89
 8001a0c:	08001a7b 	.word	0x08001a7b
 8001a10:	08001a89 	.word	0x08001a89
 8001a14:	08001a89 	.word	0x08001a89
 8001a18:	08001a89 	.word	0x08001a89
 8001a1c:	08001a81 	.word	0x08001a81
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001a20:	f7ff fda0 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d111      	bne.n	8001a4e <RCC_GetSystemClockFreq+0x7a>
 8001a2a:	f7ff fd9b 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d004      	beq.n	8001a3e <RCC_GetSystemClockFreq+0x6a>
 8001a34:	f7ff fda8 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	0a1b      	lsrs	r3, r3, #8
 8001a3c:	e003      	b.n	8001a46 <RCC_GetSystemClockFreq+0x72>
 8001a3e:	f7ff fdb1 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001a42:	4603      	mov	r3, r0
 8001a44:	0a1b      	lsrs	r3, r3, #8
 8001a46:	4a28      	ldr	r2, [pc, #160]	; (8001ae8 <RCC_GetSystemClockFreq+0x114>)
 8001a48:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a4c:	e010      	b.n	8001a70 <RCC_GetSystemClockFreq+0x9c>
 8001a4e:	f7ff fd89 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a52:	4603      	mov	r3, r0
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	d004      	beq.n	8001a62 <RCC_GetSystemClockFreq+0x8e>
 8001a58:	f7ff fd96 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001a5c:	4603      	mov	r3, r0
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	e003      	b.n	8001a6a <RCC_GetSystemClockFreq+0x96>
 8001a62:	f7ff fd9f 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001a66:	4603      	mov	r3, r0
 8001a68:	091b      	lsrs	r3, r3, #4
 8001a6a:	4a1f      	ldr	r2, [pc, #124]	; (8001ae8 <RCC_GetSystemClockFreq+0x114>)
 8001a6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a70:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001a72:	e033      	b.n	8001adc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001a74:	4b1d      	ldr	r3, [pc, #116]	; (8001aec <RCC_GetSystemClockFreq+0x118>)
 8001a76:	607b      	str	r3, [r7, #4]
      break;
 8001a78:	e030      	b.n	8001adc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001a7a:	4b1d      	ldr	r3, [pc, #116]	; (8001af0 <RCC_GetSystemClockFreq+0x11c>)
 8001a7c:	607b      	str	r3, [r7, #4]
      break;
 8001a7e:	e02d      	b.n	8001adc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001a80:	f000 f876 	bl	8001b70 <RCC_PLL_GetFreqDomain_SYS>
 8001a84:	6078      	str	r0, [r7, #4]
      break;
 8001a86:	e029      	b.n	8001adc <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001a88:	f7ff fd6c 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	d111      	bne.n	8001ab6 <RCC_GetSystemClockFreq+0xe2>
 8001a92:	f7ff fd67 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d004      	beq.n	8001aa6 <RCC_GetSystemClockFreq+0xd2>
 8001a9c:	f7ff fd74 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	0a1b      	lsrs	r3, r3, #8
 8001aa4:	e003      	b.n	8001aae <RCC_GetSystemClockFreq+0xda>
 8001aa6:	f7ff fd7d 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001aaa:	4603      	mov	r3, r0
 8001aac:	0a1b      	lsrs	r3, r3, #8
 8001aae:	4a0e      	ldr	r2, [pc, #56]	; (8001ae8 <RCC_GetSystemClockFreq+0x114>)
 8001ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab4:	e010      	b.n	8001ad8 <RCC_GetSystemClockFreq+0x104>
 8001ab6:	f7ff fd55 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001aba:	4603      	mov	r3, r0
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d004      	beq.n	8001aca <RCC_GetSystemClockFreq+0xf6>
 8001ac0:	f7ff fd62 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	e003      	b.n	8001ad2 <RCC_GetSystemClockFreq+0xfe>
 8001aca:	f7ff fd6b 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	091b      	lsrs	r3, r3, #4
 8001ad2:	4a05      	ldr	r2, [pc, #20]	; (8001ae8 <RCC_GetSystemClockFreq+0x114>)
 8001ad4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ad8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001ada:	bf00      	nop
  }

  return frequency;
 8001adc:	687b      	ldr	r3, [r7, #4]
}
 8001ade:	4618      	mov	r0, r3
 8001ae0:	3708      	adds	r7, #8
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	bd80      	pop	{r7, pc}
 8001ae6:	bf00      	nop
 8001ae8:	080021cc 	.word	0x080021cc
 8001aec:	00f42400 	.word	0x00f42400
 8001af0:	007a1200 	.word	0x007a1200

08001af4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001af4:	b580      	push	{r7, lr}
 8001af6:	b082      	sub	sp, #8
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001afc:	f7ff fd6e 	bl	80015dc <LL_RCC_GetAHBPrescaler>
 8001b00:	4603      	mov	r3, r0
 8001b02:	091b      	lsrs	r3, r3, #4
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	4a04      	ldr	r2, [pc, #16]	; (8001b1c <RCC_GetHCLKClockFreq+0x28>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	461a      	mov	r2, r3
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	40d3      	lsrs	r3, r2
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3708      	adds	r7, #8
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}
 8001b1a:	bf00      	nop
 8001b1c:	080021b4 	.word	0x080021b4

08001b20 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b082      	sub	sp, #8
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001b28:	f7ff fd66 	bl	80015f8 <LL_RCC_GetAPB1Prescaler>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	0a1b      	lsrs	r3, r3, #8
 8001b30:	4a04      	ldr	r2, [pc, #16]	; (8001b44 <RCC_GetPCLK1ClockFreq+0x24>)
 8001b32:	5cd3      	ldrb	r3, [r2, r3]
 8001b34:	461a      	mov	r2, r3
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	40d3      	lsrs	r3, r2
}
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	3708      	adds	r7, #8
 8001b3e:	46bd      	mov	sp, r7
 8001b40:	bd80      	pop	{r7, pc}
 8001b42:	bf00      	nop
 8001b44:	080021c4 	.word	0x080021c4

08001b48 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001b48:	b580      	push	{r7, lr}
 8001b4a:	b082      	sub	sp, #8
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001b50:	f7ff fd60 	bl	8001614 <LL_RCC_GetAPB2Prescaler>
 8001b54:	4603      	mov	r3, r0
 8001b56:	0adb      	lsrs	r3, r3, #11
 8001b58:	4a04      	ldr	r2, [pc, #16]	; (8001b6c <RCC_GetPCLK2ClockFreq+0x24>)
 8001b5a:	5cd3      	ldrb	r3, [r2, r3]
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	40d3      	lsrs	r3, r2
}
 8001b62:	4618      	mov	r0, r3
 8001b64:	3708      	adds	r7, #8
 8001b66:	46bd      	mov	sp, r7
 8001b68:	bd80      	pop	{r7, pc}
 8001b6a:	bf00      	nop
 8001b6c:	080021c4 	.word	0x080021c4

08001b70 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001b70:	b590      	push	{r4, r7, lr}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001b76:	f7ff fd83 	bl	8001680 <LL_RCC_PLL_GetMainSource>
 8001b7a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	2b02      	cmp	r3, #2
 8001b80:	d02d      	beq.n	8001bde <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8001b82:	2b03      	cmp	r3, #3
 8001b84:	d02e      	beq.n	8001be4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d12f      	bne.n	8001bea <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001b8a:	f7ff fceb 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b8e:	4603      	mov	r3, r0
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d111      	bne.n	8001bb8 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8001b94:	f7ff fce6 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d004      	beq.n	8001ba8 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8001b9e:	f7ff fcf3 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001ba2:	4603      	mov	r3, r0
 8001ba4:	0a1b      	lsrs	r3, r3, #8
 8001ba6:	e003      	b.n	8001bb0 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001ba8:	f7ff fcfc 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bac:	4603      	mov	r3, r0
 8001bae:	0a1b      	lsrs	r3, r3, #8
 8001bb0:	4a2f      	ldr	r2, [pc, #188]	; (8001c70 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001bb2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bb6:	e010      	b.n	8001bda <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8001bb8:	f7ff fcd4 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b00      	cmp	r3, #0
 8001bc0:	d004      	beq.n	8001bcc <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8001bc2:	f7ff fce1 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	091b      	lsrs	r3, r3, #4
 8001bca:	e003      	b.n	8001bd4 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8001bcc:	f7ff fcea 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	091b      	lsrs	r3, r3, #4
 8001bd4:	4a26      	ldr	r2, [pc, #152]	; (8001c70 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001bd6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bda:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001bdc:	e02f      	b.n	8001c3e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001bde:	4b25      	ldr	r3, [pc, #148]	; (8001c74 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8001be0:	607b      	str	r3, [r7, #4]
      break;
 8001be2:	e02c      	b.n	8001c3e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001be4:	4b24      	ldr	r3, [pc, #144]	; (8001c78 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8001be6:	607b      	str	r3, [r7, #4]
      break;
 8001be8:	e029      	b.n	8001c3e <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001bea:	f7ff fcbb 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d111      	bne.n	8001c18 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8001bf4:	f7ff fcb6 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d004      	beq.n	8001c08 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8001bfe:	f7ff fcc3 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001c02:	4603      	mov	r3, r0
 8001c04:	0a1b      	lsrs	r3, r3, #8
 8001c06:	e003      	b.n	8001c10 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8001c08:	f7ff fccc 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c0c:	4603      	mov	r3, r0
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	4a17      	ldr	r2, [pc, #92]	; (8001c70 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001c12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c16:	e010      	b.n	8001c3a <RCC_PLL_GetFreqDomain_SYS+0xca>
 8001c18:	f7ff fca4 	bl	8001564 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d004      	beq.n	8001c2c <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8001c22:	f7ff fcb1 	bl	8001588 <LL_RCC_MSI_GetRange>
 8001c26:	4603      	mov	r3, r0
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	e003      	b.n	8001c34 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8001c2c:	f7ff fcba 	bl	80015a4 <LL_RCC_MSI_GetRangeAfterStandby>
 8001c30:	4603      	mov	r3, r0
 8001c32:	091b      	lsrs	r3, r3, #4
 8001c34:	4a0e      	ldr	r2, [pc, #56]	; (8001c70 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001c36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c3a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001c3c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8001c3e:	f7ff fd49 	bl	80016d4 <LL_RCC_PLL_GetDivider>
 8001c42:	4603      	mov	r3, r0
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	3301      	adds	r3, #1
 8001c48:	687a      	ldr	r2, [r7, #4]
 8001c4a:	fbb2 f4f3 	udiv	r4, r2, r3
 8001c4e:	f7ff fd25 	bl	800169c <LL_RCC_PLL_GetN>
 8001c52:	4603      	mov	r3, r0
 8001c54:	fb03 f404 	mul.w	r4, r3, r4
 8001c58:	f7ff fd2e 	bl	80016b8 <LL_RCC_PLL_GetR>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	0e5b      	lsrs	r3, r3, #25
 8001c60:	3301      	adds	r3, #1
 8001c62:	005b      	lsls	r3, r3, #1
 8001c64:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8001c68:	4618      	mov	r0, r3
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd90      	pop	{r4, r7, pc}
 8001c70:	080021cc 	.word	0x080021cc
 8001c74:	00f42400 	.word	0x00f42400
 8001c78:	007a1200 	.word	0x007a1200

08001c7c <LL_SPI_IsEnabled>:
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c8c:	2b40      	cmp	r3, #64	; 0x40
 8001c8e:	d101      	bne.n	8001c94 <LL_SPI_IsEnabled+0x18>
 8001c90:	2301      	movs	r3, #1
 8001c92:	e000      	b.n	8001c96 <LL_SPI_IsEnabled+0x1a>
 8001c94:	2300      	movs	r3, #0
}
 8001c96:	4618      	mov	r0, r3
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca0:	4770      	bx	lr

08001ca2 <LL_SPI_SetCRCPolynomial>:
{
 8001ca2:	b480      	push	{r7}
 8001ca4:	b083      	sub	sp, #12
 8001ca6:	af00      	add	r7, sp, #0
 8001ca8:	6078      	str	r0, [r7, #4]
 8001caa:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	b29b      	uxth	r3, r3
 8001cb0:	461a      	mov	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	611a      	str	r2, [r3, #16]
}
 8001cb6:	bf00      	nop
 8001cb8:	370c      	adds	r7, #12
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr

08001cc2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8001cc2:	b580      	push	{r7, lr}
 8001cc4:	b084      	sub	sp, #16
 8001cc6:	af00      	add	r7, sp, #0
 8001cc8:	6078      	str	r0, [r7, #4]
 8001cca:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001ccc:	2301      	movs	r3, #1
 8001cce:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8001cd0:	6878      	ldr	r0, [r7, #4]
 8001cd2:	f7ff ffd3 	bl	8001c7c <LL_SPI_IsEnabled>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d13b      	bne.n	8001d54 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001ce4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8001ce8:	683a      	ldr	r2, [r7, #0]
 8001cea:	6811      	ldr	r1, [r2, #0]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	6852      	ldr	r2, [r2, #4]
 8001cf0:	4311      	orrs	r1, r2
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	68d2      	ldr	r2, [r2, #12]
 8001cf6:	4311      	orrs	r1, r2
 8001cf8:	683a      	ldr	r2, [r7, #0]
 8001cfa:	6912      	ldr	r2, [r2, #16]
 8001cfc:	4311      	orrs	r1, r2
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	6952      	ldr	r2, [r2, #20]
 8001d02:	4311      	orrs	r1, r2
 8001d04:	683a      	ldr	r2, [r7, #0]
 8001d06:	6992      	ldr	r2, [r2, #24]
 8001d08:	4311      	orrs	r1, r2
 8001d0a:	683a      	ldr	r2, [r7, #0]
 8001d0c:	69d2      	ldr	r2, [r2, #28]
 8001d0e:	4311      	orrs	r1, r2
 8001d10:	683a      	ldr	r2, [r7, #0]
 8001d12:	6a12      	ldr	r2, [r2, #32]
 8001d14:	430a      	orrs	r2, r1
 8001d16:	431a      	orrs	r2, r3
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	685b      	ldr	r3, [r3, #4]
 8001d20:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001d24:	f023 0304 	bic.w	r3, r3, #4
 8001d28:	683a      	ldr	r2, [r7, #0]
 8001d2a:	6891      	ldr	r1, [r2, #8]
 8001d2c:	683a      	ldr	r2, [r7, #0]
 8001d2e:	6952      	ldr	r2, [r2, #20]
 8001d30:	0c12      	lsrs	r2, r2, #16
 8001d32:	430a      	orrs	r2, r1
 8001d34:	431a      	orrs	r2, r3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	6a1b      	ldr	r3, [r3, #32]
 8001d3e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d42:	d105      	bne.n	8001d50 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d48:	4619      	mov	r1, r3
 8001d4a:	6878      	ldr	r0, [r7, #4]
 8001d4c:	f7ff ffa9 	bl	8001ca2 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8001d50:	2300      	movs	r3, #0
 8001d52:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001d54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d56:	4618      	mov	r0, r3
 8001d58:	3710      	adds	r7, #16
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd80      	pop	{r7, pc}

08001d5e <LL_TIM_SetPrescaler>:
{
 8001d5e:	b480      	push	{r7}
 8001d60:	b083      	sub	sp, #12
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	6078      	str	r0, [r7, #4]
 8001d66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	683a      	ldr	r2, [r7, #0]
 8001d6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr

08001d7a <LL_TIM_SetAutoReload>:
{
 8001d7a:	b480      	push	{r7}
 8001d7c:	b083      	sub	sp, #12
 8001d7e:	af00      	add	r7, sp, #0
 8001d80:	6078      	str	r0, [r7, #4]
 8001d82:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	683a      	ldr	r2, [r7, #0]
 8001d88:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d94:	4770      	bx	lr

08001d96 <LL_TIM_SetRepetitionCounter>:
{
 8001d96:	b480      	push	{r7}
 8001d98:	b083      	sub	sp, #12
 8001d9a:	af00      	add	r7, sp, #0
 8001d9c:	6078      	str	r0, [r7, #4]
 8001d9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	683a      	ldr	r2, [r7, #0]
 8001da4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr

08001db2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8001db2:	b480      	push	{r7}
 8001db4:	b083      	sub	sp, #12
 8001db6:	af00      	add	r7, sp, #0
 8001db8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	695b      	ldr	r3, [r3, #20]
 8001dbe:	f043 0201 	orr.w	r2, r3, #1
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	615a      	str	r2, [r3, #20]
}
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd0:	4770      	bx	lr
	...

08001dd4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	4a3d      	ldr	r2, [pc, #244]	; (8001edc <LL_TIM_Init+0x108>)
 8001de8:	4293      	cmp	r3, r2
 8001dea:	d013      	beq.n	8001e14 <LL_TIM_Init+0x40>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001df2:	d00f      	beq.n	8001e14 <LL_TIM_Init+0x40>
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	4a3a      	ldr	r2, [pc, #232]	; (8001ee0 <LL_TIM_Init+0x10c>)
 8001df8:	4293      	cmp	r3, r2
 8001dfa:	d00b      	beq.n	8001e14 <LL_TIM_Init+0x40>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	4a39      	ldr	r2, [pc, #228]	; (8001ee4 <LL_TIM_Init+0x110>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d007      	beq.n	8001e14 <LL_TIM_Init+0x40>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	4a38      	ldr	r2, [pc, #224]	; (8001ee8 <LL_TIM_Init+0x114>)
 8001e08:	4293      	cmp	r3, r2
 8001e0a:	d003      	beq.n	8001e14 <LL_TIM_Init+0x40>
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	4a37      	ldr	r2, [pc, #220]	; (8001eec <LL_TIM_Init+0x118>)
 8001e10:	4293      	cmp	r3, r2
 8001e12:	d106      	bne.n	8001e22 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001e1a:	683b      	ldr	r3, [r7, #0]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4a2d      	ldr	r2, [pc, #180]	; (8001edc <LL_TIM_Init+0x108>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d01f      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001e30:	d01b      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	4a2a      	ldr	r2, [pc, #168]	; (8001ee0 <LL_TIM_Init+0x10c>)
 8001e36:	4293      	cmp	r3, r2
 8001e38:	d017      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	4a29      	ldr	r2, [pc, #164]	; (8001ee4 <LL_TIM_Init+0x110>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d013      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	4a28      	ldr	r2, [pc, #160]	; (8001ee8 <LL_TIM_Init+0x114>)
 8001e46:	4293      	cmp	r3, r2
 8001e48:	d00f      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	4a27      	ldr	r2, [pc, #156]	; (8001eec <LL_TIM_Init+0x118>)
 8001e4e:	4293      	cmp	r3, r2
 8001e50:	d00b      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	4a26      	ldr	r2, [pc, #152]	; (8001ef0 <LL_TIM_Init+0x11c>)
 8001e56:	4293      	cmp	r3, r2
 8001e58:	d007      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	4a25      	ldr	r2, [pc, #148]	; (8001ef4 <LL_TIM_Init+0x120>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d003      	beq.n	8001e6a <LL_TIM_Init+0x96>
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	4a24      	ldr	r2, [pc, #144]	; (8001ef8 <LL_TIM_Init+0x124>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d106      	bne.n	8001e78 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	68db      	ldr	r3, [r3, #12]
 8001e74:	4313      	orrs	r3, r2
 8001e76:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68fa      	ldr	r2, [r7, #12]
 8001e7c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	689b      	ldr	r3, [r3, #8]
 8001e82:	4619      	mov	r1, r3
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f7ff ff78 	bl	8001d7a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	881b      	ldrh	r3, [r3, #0]
 8001e8e:	4619      	mov	r1, r3
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f7ff ff64 	bl	8001d5e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	4a10      	ldr	r2, [pc, #64]	; (8001edc <LL_TIM_Init+0x108>)
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d00f      	beq.n	8001ebe <LL_TIM_Init+0xea>
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	4a12      	ldr	r2, [pc, #72]	; (8001eec <LL_TIM_Init+0x118>)
 8001ea2:	4293      	cmp	r3, r2
 8001ea4:	d00b      	beq.n	8001ebe <LL_TIM_Init+0xea>
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	4a11      	ldr	r2, [pc, #68]	; (8001ef0 <LL_TIM_Init+0x11c>)
 8001eaa:	4293      	cmp	r3, r2
 8001eac:	d007      	beq.n	8001ebe <LL_TIM_Init+0xea>
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	4a10      	ldr	r2, [pc, #64]	; (8001ef4 <LL_TIM_Init+0x120>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d003      	beq.n	8001ebe <LL_TIM_Init+0xea>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	4a0f      	ldr	r2, [pc, #60]	; (8001ef8 <LL_TIM_Init+0x124>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d105      	bne.n	8001eca <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8001ebe:	683b      	ldr	r3, [r7, #0]
 8001ec0:	691b      	ldr	r3, [r3, #16]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff66 	bl	8001d96 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8001eca:	6878      	ldr	r0, [r7, #4]
 8001ecc:	f7ff ff71 	bl	8001db2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8001ed0:	2300      	movs	r3, #0
}
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	3710      	adds	r7, #16
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}
 8001eda:	bf00      	nop
 8001edc:	40012c00 	.word	0x40012c00
 8001ee0:	40000400 	.word	0x40000400
 8001ee4:	40000800 	.word	0x40000800
 8001ee8:	40000c00 	.word	0x40000c00
 8001eec:	40013400 	.word	0x40013400
 8001ef0:	40014000 	.word	0x40014000
 8001ef4:	40014400 	.word	0x40014400
 8001ef8:	40014800 	.word	0x40014800

08001efc <LL_USART_IsEnabled>:
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0301 	and.w	r3, r3, #1
 8001f0c:	2b01      	cmp	r3, #1
 8001f0e:	d101      	bne.n	8001f14 <LL_USART_IsEnabled+0x18>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <LL_USART_IsEnabled+0x1a>
 8001f14:	2300      	movs	r3, #0
}
 8001f16:	4618      	mov	r0, r3
 8001f18:	370c      	adds	r7, #12
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f20:	4770      	bx	lr

08001f22 <LL_USART_SetStopBitsLength>:
{
 8001f22:	b480      	push	{r7}
 8001f24:	b083      	sub	sp, #12
 8001f26:	af00      	add	r7, sp, #0
 8001f28:	6078      	str	r0, [r7, #4]
 8001f2a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	685b      	ldr	r3, [r3, #4]
 8001f30:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	605a      	str	r2, [r3, #4]
}
 8001f3c:	bf00      	nop
 8001f3e:	370c      	adds	r7, #12
 8001f40:	46bd      	mov	sp, r7
 8001f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f46:	4770      	bx	lr

08001f48 <LL_USART_SetHWFlowCtrl>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	b083      	sub	sp, #12
 8001f4c:	af00      	add	r7, sp, #0
 8001f4e:	6078      	str	r0, [r7, #4]
 8001f50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	431a      	orrs	r2, r3
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	609a      	str	r2, [r3, #8]
}
 8001f62:	bf00      	nop
 8001f64:	370c      	adds	r7, #12
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <LL_USART_SetBaudRate>:
{
 8001f6e:	b480      	push	{r7}
 8001f70:	b087      	sub	sp, #28
 8001f72:	af00      	add	r7, sp, #0
 8001f74:	60f8      	str	r0, [r7, #12]
 8001f76:	60b9      	str	r1, [r7, #8]
 8001f78:	607a      	str	r2, [r7, #4]
 8001f7a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f82:	d11a      	bne.n	8001fba <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8001f84:	68bb      	ldr	r3, [r7, #8]
 8001f86:	005a      	lsls	r2, r3, #1
 8001f88:	683b      	ldr	r3, [r7, #0]
 8001f8a:	085b      	lsrs	r3, r3, #1
 8001f8c:	441a      	add	r2, r3
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f94:	b29b      	uxth	r3, r3
 8001f96:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8001f98:	697a      	ldr	r2, [r7, #20]
 8001f9a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	085b      	lsrs	r3, r3, #1
 8001fa6:	b29b      	uxth	r3, r3
 8001fa8:	f003 0307 	and.w	r3, r3, #7
 8001fac:	693a      	ldr	r2, [r7, #16]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	693a      	ldr	r2, [r7, #16]
 8001fb6:	60da      	str	r2, [r3, #12]
}
 8001fb8:	e00a      	b.n	8001fd0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8001fba:	683b      	ldr	r3, [r7, #0]
 8001fbc:	085a      	lsrs	r2, r3, #1
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	441a      	add	r2, r3
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001fc8:	b29b      	uxth	r3, r3
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	60da      	str	r2, [r3, #12]
}
 8001fd0:	bf00      	nop
 8001fd2:	371c      	adds	r7, #28
 8001fd4:	46bd      	mov	sp, r7
 8001fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fda:	4770      	bx	lr

08001fdc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b084      	sub	sp, #16
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
 8001fe4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8001fe6:	2301      	movs	r3, #1
 8001fe8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8001fea:	2300      	movs	r3, #0
 8001fec:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8001fee:	6878      	ldr	r0, [r7, #4]
 8001ff0:	f7ff ff84 	bl	8001efc <LL_USART_IsEnabled>
 8001ff4:	4603      	mov	r3, r0
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d15b      	bne.n	80020b2 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	4b2f      	ldr	r3, [pc, #188]	; (80020bc <LL_USART_Init+0xe0>)
 8002000:	4013      	ands	r3, r2
 8002002:	683a      	ldr	r2, [r7, #0]
 8002004:	6851      	ldr	r1, [r2, #4]
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	68d2      	ldr	r2, [r2, #12]
 800200a:	4311      	orrs	r1, r2
 800200c:	683a      	ldr	r2, [r7, #0]
 800200e:	6912      	ldr	r2, [r2, #16]
 8002010:	4311      	orrs	r1, r2
 8002012:	683a      	ldr	r2, [r7, #0]
 8002014:	6992      	ldr	r2, [r2, #24]
 8002016:	430a      	orrs	r2, r1
 8002018:	431a      	orrs	r2, r3
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	4619      	mov	r1, r3
 8002024:	6878      	ldr	r0, [r7, #4]
 8002026:	f7ff ff7c 	bl	8001f22 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	4619      	mov	r1, r3
 8002030:	6878      	ldr	r0, [r7, #4]
 8002032:	f7ff ff89 	bl	8001f48 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	4a21      	ldr	r2, [pc, #132]	; (80020c0 <LL_USART_Init+0xe4>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d104      	bne.n	8002048 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800203e:	2003      	movs	r0, #3
 8002040:	f7ff fb56 	bl	80016f0 <LL_RCC_GetUSARTClockFreq>
 8002044:	60b8      	str	r0, [r7, #8]
 8002046:	e023      	b.n	8002090 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	4a1e      	ldr	r2, [pc, #120]	; (80020c4 <LL_USART_Init+0xe8>)
 800204c:	4293      	cmp	r3, r2
 800204e:	d104      	bne.n	800205a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002050:	200c      	movs	r0, #12
 8002052:	f7ff fb4d 	bl	80016f0 <LL_RCC_GetUSARTClockFreq>
 8002056:	60b8      	str	r0, [r7, #8]
 8002058:	e01a      	b.n	8002090 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	4a1a      	ldr	r2, [pc, #104]	; (80020c8 <LL_USART_Init+0xec>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d104      	bne.n	800206c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002062:	2030      	movs	r0, #48	; 0x30
 8002064:	f7ff fb44 	bl	80016f0 <LL_RCC_GetUSARTClockFreq>
 8002068:	60b8      	str	r0, [r7, #8]
 800206a:	e011      	b.n	8002090 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	4a17      	ldr	r2, [pc, #92]	; (80020cc <LL_USART_Init+0xf0>)
 8002070:	4293      	cmp	r3, r2
 8002072:	d104      	bne.n	800207e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002074:	20c0      	movs	r0, #192	; 0xc0
 8002076:	f7ff fc1b 	bl	80018b0 <LL_RCC_GetUARTClockFreq>
 800207a:	60b8      	str	r0, [r7, #8]
 800207c:	e008      	b.n	8002090 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	4a13      	ldr	r2, [pc, #76]	; (80020d0 <LL_USART_Init+0xf4>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d104      	bne.n	8002090 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002086:	f44f 7040 	mov.w	r0, #768	; 0x300
 800208a:	f7ff fc11 	bl	80018b0 <LL_RCC_GetUARTClockFreq>
 800208e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	2b00      	cmp	r3, #0
 8002094:	d00d      	beq.n	80020b2 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002096:	683b      	ldr	r3, [r7, #0]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	2b00      	cmp	r3, #0
 800209c:	d009      	beq.n	80020b2 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800209e:	2300      	movs	r3, #0
 80020a0:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80020a2:	683b      	ldr	r3, [r7, #0]
 80020a4:	699a      	ldr	r2, [r3, #24]
 80020a6:	683b      	ldr	r3, [r7, #0]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	68b9      	ldr	r1, [r7, #8]
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff5e 	bl	8001f6e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80020b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b4:	4618      	mov	r0, r3
 80020b6:	3710      	adds	r7, #16
 80020b8:	46bd      	mov	sp, r7
 80020ba:	bd80      	pop	{r7, pc}
 80020bc:	efff69f3 	.word	0xefff69f3
 80020c0:	40013800 	.word	0x40013800
 80020c4:	40004400 	.word	0x40004400
 80020c8:	40004800 	.word	0x40004800
 80020cc:	40004c00 	.word	0x40004c00
 80020d0:	40005000 	.word	0x40005000

080020d4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80020d4:	b480      	push	{r7}
 80020d6:	b083      	sub	sp, #12
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
 80020dc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80020de:	687a      	ldr	r2, [r7, #4]
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020e6:	4a07      	ldr	r2, [pc, #28]	; (8002104 <LL_InitTick+0x30>)
 80020e8:	3b01      	subs	r3, #1
 80020ea:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <LL_InitTick+0x30>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	; (8002104 <LL_InitTick+0x30>)
 80020f4:	2205      	movs	r2, #5
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr
 8002104:	e000e010 	.word	0xe000e010

08002108 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002110:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f7ff ffdd 	bl	80020d4 <LL_InitTick>
}
 800211a:	bf00      	nop
 800211c:	3708      	adds	r7, #8
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002124:	b480      	push	{r7}
 8002126:	b083      	sub	sp, #12
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <LL_SetSystemCoreClock+0x1c>)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6013      	str	r3, [r2, #0]
}
 8002132:	bf00      	nop
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20000000 	.word	0x20000000

08002144 <__libc_init_array>:
 8002144:	b570      	push	{r4, r5, r6, lr}
 8002146:	4e0d      	ldr	r6, [pc, #52]	; (800217c <__libc_init_array+0x38>)
 8002148:	4c0d      	ldr	r4, [pc, #52]	; (8002180 <__libc_init_array+0x3c>)
 800214a:	1ba4      	subs	r4, r4, r6
 800214c:	10a4      	asrs	r4, r4, #2
 800214e:	2500      	movs	r5, #0
 8002150:	42a5      	cmp	r5, r4
 8002152:	d109      	bne.n	8002168 <__libc_init_array+0x24>
 8002154:	4e0b      	ldr	r6, [pc, #44]	; (8002184 <__libc_init_array+0x40>)
 8002156:	4c0c      	ldr	r4, [pc, #48]	; (8002188 <__libc_init_array+0x44>)
 8002158:	f000 f820 	bl	800219c <_init>
 800215c:	1ba4      	subs	r4, r4, r6
 800215e:	10a4      	asrs	r4, r4, #2
 8002160:	2500      	movs	r5, #0
 8002162:	42a5      	cmp	r5, r4
 8002164:	d105      	bne.n	8002172 <__libc_init_array+0x2e>
 8002166:	bd70      	pop	{r4, r5, r6, pc}
 8002168:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800216c:	4798      	blx	r3
 800216e:	3501      	adds	r5, #1
 8002170:	e7ee      	b.n	8002150 <__libc_init_array+0xc>
 8002172:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002176:	4798      	blx	r3
 8002178:	3501      	adds	r5, #1
 800217a:	e7f2      	b.n	8002162 <__libc_init_array+0x1e>
 800217c:	080021fc 	.word	0x080021fc
 8002180:	080021fc 	.word	0x080021fc
 8002184:	080021fc 	.word	0x080021fc
 8002188:	08002200 	.word	0x08002200

0800218c <memset>:
 800218c:	4402      	add	r2, r0
 800218e:	4603      	mov	r3, r0
 8002190:	4293      	cmp	r3, r2
 8002192:	d100      	bne.n	8002196 <memset+0xa>
 8002194:	4770      	bx	lr
 8002196:	f803 1b01 	strb.w	r1, [r3], #1
 800219a:	e7f9      	b.n	8002190 <memset+0x4>

0800219c <_init>:
 800219c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800219e:	bf00      	nop
 80021a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021a2:	bc08      	pop	{r3}
 80021a4:	469e      	mov	lr, r3
 80021a6:	4770      	bx	lr

080021a8 <_fini>:
 80021a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80021aa:	bf00      	nop
 80021ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80021ae:	bc08      	pop	{r3}
 80021b0:	469e      	mov	lr, r3
 80021b2:	4770      	bx	lr
