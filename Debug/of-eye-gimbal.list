
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e00  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08003f90  08003f90  00013f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043e4  080043e4  000205bc  2**0
                  CONTENTS
  4 .ARM          00000000  080043e4  080043e4  000205bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043e4  080043e4  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043e4  080043e4  000143e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043e8  080043e8  000143e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  20000000  080043ec  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  200005bc  080049a8  000205bc  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000600  080049a8  00020600  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef3f  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000250b  00000000  00000000  0002f52b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  00031a38  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  000325a0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024072  00000000  00000000  00032fe0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000993d  00000000  00000000  00057052  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000baf83  00000000  00000000  0006098f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b912  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  0011b990  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005bc 	.word	0x200005bc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f78 	.word	0x08003f78

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c0 	.word	0x200005c0
 80001cc:	08003f78 	.word	0x08003f78

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f80d 	bl	800029c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f833 	bl	80002f0 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f877 	bl	8000380 <adns2610_config>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <adns2610_configureSPI+0x14>
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <adns2610_configureSPI+0x48>)
 80002ae:	e000      	b.n	80002b2 <adns2610_configureSPI+0x16>
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <adns2610_configureSPI+0x4c>)
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b4:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <adns2610_configureSPI+0x50>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80002c4:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <adns2610_configureSPI+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <adns2610_configureSPI+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40003800 	.word	0x40003800
 80002e8:	40003c00 	.word	0x40003c00
 80002ec:	200005d8 	.word	0x200005d8

080002f0 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <adns2610_resetCOM+0x14>
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <adns2610_resetCOM+0x84>)
 8000302:	e000      	b.n	8000306 <adns2610_resetCOM+0x16>
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <adns2610_resetCOM+0x88>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <adns2610_resetCOM+0x8c>)
 8000308:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800030a:	bf00      	nop
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <adns2610_resetCOM+0x8c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <adns2610_resetCOM+0x8c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	330c      	adds	r3, #12
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000324:	bf00      	nop
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <adns2610_resetCOM+0x8c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f8      	beq.n	8000326 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <adns2610_resetCOM+0x8c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	330c      	adds	r3, #12
 800033a:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800033c:	bf00      	nop
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <adns2610_resetCOM+0x8c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <adns2610_resetCOM+0x8c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000352:	431a      	orrs	r2, r3
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <adns2610_resetCOM+0x8c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	4313      	orrs	r3, r2
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1ec      	bne.n	800033e <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f002 fe57 	bl	8003018 <LL_mDelay>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40003800 	.word	0x40003800
 8000378:	40003c00 	.word	0x40003c00
 800037c:	200005d8 	.word	0x200005d8

08000380 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <adns2610_config+0x14>
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <adns2610_config+0xc0>)
 8000392:	e000      	b.n	8000396 <adns2610_config+0x16>
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <adns2610_config+0xc4>)
 8000396:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	482b      	ldr	r0, [pc, #172]	; (8000448 <adns2610_config+0xc8>)
 800039c:	f002 fea4 	bl	80030e8 <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 80003a0:	492a      	ldr	r1, [pc, #168]	; (800044c <adns2610_config+0xcc>)
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <adns2610_config+0xd0>)
 80003a4:	f002 fea0 	bl	80030e8 <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2201      	movs	r2, #1
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f8be 	bl	8000530 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 80003b4:	4925      	ldr	r1, [pc, #148]	; (800044c <adns2610_config+0xcc>)
 80003b6:	4827      	ldr	r0, [pc, #156]	; (8000454 <adns2610_config+0xd4>)
 80003b8:	f002 fe96 	bl	80030e8 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f857 	bl	8000474 <adns2610_readRegister>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d10f      	bne.n	80003ec <adns2610_config+0x6c>
 80003cc:	4822      	ldr	r0, [pc, #136]	; (8000458 <adns2610_config+0xd8>)
 80003ce:	f002 feff 	bl	80031d0 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 80003d2:	4922      	ldr	r1, [pc, #136]	; (800045c <adns2610_config+0xdc>)
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <adns2610_config+0xe0>)
 80003d6:	f002 fe87 	bl	80030e8 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f848 	bl	8000474 <adns2610_readRegister>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d116      	bne.n	8000418 <adns2610_config+0x98>
 80003ea:	e003      	b.n	80003f4 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 80003ec:	481d      	ldr	r0, [pc, #116]	; (8000464 <adns2610_config+0xe4>)
 80003ee:	f002 feef 	bl	80031d0 <puts>
 80003f2:	e7fe      	b.n	80003f2 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003f4:	4818      	ldr	r0, [pc, #96]	; (8000458 <adns2610_config+0xd8>)
 80003f6:	f002 feeb 	bl	80031d0 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 80003fa:	491b      	ldr	r1, [pc, #108]	; (8000468 <adns2610_config+0xe8>)
 80003fc:	481b      	ldr	r0, [pc, #108]	; (800046c <adns2610_config+0xec>)
 80003fe:	f002 fe73 	bl	80030e8 <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2111      	movs	r1, #17
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f834 	bl	8000474 <adns2610_readRegister>
 800040c:	4603      	mov	r3, r0
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	2b0f      	cmp	r3, #15
 8000414:	d108      	bne.n	8000428 <adns2610_config+0xa8>
 8000416:	e003      	b.n	8000420 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <adns2610_config+0xe4>)
 800041a:	f002 fed9 	bl	80031d0 <puts>
 800041e:	e7fe      	b.n	800041e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <adns2610_config+0xd8>)
 8000422:	f002 fed5 	bl	80031d0 <puts>
 8000426:	e003      	b.n	8000430 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <adns2610_config+0xe4>)
 800042a:	f002 fed1 	bl	80031d0 <puts>
 800042e:	e7fe      	b.n	800042e <adns2610_config+0xae>

	printf("\r\n");
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <adns2610_config+0xf0>)
 8000432:	f002 fecd 	bl	80031d0 <puts>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	08003f90 	.word	0x08003f90
 8000444:	08003fa0 	.word	0x08003fa0
 8000448:	08003fb0 	.word	0x08003fb0
 800044c:	0800400c 	.word	0x0800400c
 8000450:	0800401c 	.word	0x0800401c
 8000454:	0800404c 	.word	0x0800404c
 8000458:	08004078 	.word	0x08004078
 800045c:	08004088 	.word	0x08004088
 8000460:	08004098 	.word	0x08004098
 8000464:	08004080 	.word	0x08004080
 8000468:	080040c4 	.word	0x080040c4
 800046c:	080040d8 	.word	0x080040d8
 8000470:	0800410c 	.word	0x0800410c

08000474 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <adns2610_readRegister+0x1a>
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <adns2610_readRegister+0xb0>)
 800048c:	e000      	b.n	8000490 <adns2610_readRegister+0x1c>
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <adns2610_readRegister+0xb4>)
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <adns2610_readRegister+0xb8>)
 8000492:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000494:	bf00      	nop
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <adns2610_readRegister+0xb8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f8      	beq.n	8000496 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <adns2610_readRegister+0xb8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	330c      	adds	r3, #12
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004ae:	bf00      	nop
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <adns2610_readRegister+0xb8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f8      	beq.n	80004b0 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <adns2610_readRegister+0xb8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	330c      	adds	r3, #12
 80004c4:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f002 fda6 	bl	8003018 <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <adns2610_readRegister+0xb8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	330c      	adds	r3, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004d6:	bf00      	nop
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <adns2610_readRegister+0xb8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <adns2610_readRegister+0xb8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	330c      	adds	r3, #12
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80004f0:	bf00      	nop
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <adns2610_readRegister+0xb8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <adns2610_readRegister+0xb8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000506:	431a      	orrs	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <adns2610_readRegister+0xb8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	4313      	orrs	r3, r2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1ec      	bne.n	80004f2 <adns2610_readRegister+0x7e>
	return value;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40003800 	.word	0x40003800
 8000528:	40003c00 	.word	0x40003c00
 800052c:	200005d8 	.word	0x200005d8

08000530 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	460b      	mov	r3, r1
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <adns2610_writeRegister+0x1c>
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <adns2610_writeRegister+0xb4>)
 800054a:	e000      	b.n	800054e <adns2610_writeRegister+0x1e>
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <adns2610_writeRegister+0xb8>)
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000550:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <adns2610_writeRegister+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000560:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000562:	bf00      	nop
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f8      	beq.n	8000564 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	4619      	mov	r1, r3
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800058a:	bf00      	nop
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <adns2610_writeRegister+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <adns2610_writeRegister+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80005a0:	bf00      	nop
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	4313      	orrs	r3, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1ec      	bne.n	80005a2 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005d6:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40003800 	.word	0x40003800
 80005e8:	40003c00 	.word	0x40003c00
 80005ec:	200005d8 	.word	0x200005d8

080005f0 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <adns2610_receiveByte+0x16>
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <adns2610_receiveByte+0x78>)
 8000604:	e000      	b.n	8000608 <adns2610_receiveByte+0x18>
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <adns2610_receiveByte+0x7c>)
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <adns2610_receiveByte+0x80>)
 800060a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <adns2610_receiveByte+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	330c      	adds	r3, #12
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000616:	bf00      	nop
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <adns2610_receiveByte+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f8      	beq.n	8000618 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <adns2610_receiveByte+0x80>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	330c      	adds	r3, #12
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000634:	bf00      	nop
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <adns2610_receiveByte+0x80>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <adns2610_receiveByte+0x80>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064a:	431a      	orrs	r2, r3
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <adns2610_receiveByte+0x80>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	4313      	orrs	r3, r2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40003800 	.word	0x40003800
 800066c:	40003c00 	.word	0x40003c00
 8000670:	200005d8 	.word	0x200005d8

08000674 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <adns2610_sendByte+0x1a>
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <adns2610_sendByte+0x60>)
 800068c:	e000      	b.n	8000690 <adns2610_sendByte+0x1c>
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <adns2610_sendByte+0x64>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <adns2610_sendByte+0x68>)
 8000692:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000694:	bf00      	nop
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <adns2610_sendByte+0x68>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <adns2610_sendByte+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80006ae:	bf00      	nop
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <adns2610_sendByte+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f8      	beq.n	80006b0 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <adns2610_sendByte+0x68>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	330c      	adds	r3, #12
 80006c4:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40003800 	.word	0x40003800
 80006d8:	40003c00 	.word	0x40003c00
 80006dc:	200005d8 	.word	0x200005d8

080006e0 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da01      	bge.n	8000702 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 80006fe:	2300      	movs	r3, #0
 8000700:	e009      	b.n	8000716 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000702:	2302      	movs	r3, #2
 8000704:	e007      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	da01      	bge.n	8000714 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000714:	2303      	movs	r3, #3
	}
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <__NVIC_EnableIRQ+0x38>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40020080 	.word	0x40020080

080007f4 <eyes_init>:
bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2);

/* Exported variables -------------------------------------------*/
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

void eyes_init(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 80007f8:	f000 f968 	bl	8000acc <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fd37 	bl	8000270 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000802:	2201      	movs	r2, #1
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <eyes_init+0x28>)
 8000808:	f001 f968 	bl	8001adc <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <eyes_init+0x2c>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <eyes_init+0x30>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	200005f8 	.word	0x200005f8
 8000824:	200005f9 	.word	0x200005f9

08000828 <eyes_start>:

void eyes_start(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <eyes_start+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <eyes_start+0x20>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <eyes_start+0x24>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40012c00 	.word	0x40012c00
 800084c:	200005dc 	.word	0x200005dc

08000850 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	switch(FSMstate){
 8000856:	4b8f      	ldr	r3, [pc, #572]	; (8000a94 <eyes_FSM+0x244>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b04      	cmp	r3, #4
 800085c:	f200 8111 	bhi.w	8000a82 <eyes_FSM+0x232>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <eyes_FSM+0x18>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	0800087d 	.word	0x0800087d
 800086c:	0800088f 	.word	0x0800088f
 8000870:	080009d5 	.word	0x080009d5
 8000874:	0800091b 	.word	0x0800091b
 8000878:	08000a45 	.word	0x08000a45
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;

		pixelIdx[ADNS2610_RIGHT] = 0;
 800087c:	4b86      	ldr	r3, [pc, #536]	; (8000a98 <eyes_FSM+0x248>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_RIGHT] = 0;
#endif
		eyes_stopWaitIT();
 8000882:	f000 f989 	bl	8000b98 <eyes_stopWaitIT>
		collisionFlag = 0;
 8000886:	4b85      	ldr	r3, [pc, #532]	; (8000a9c <eyes_FSM+0x24c>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
		return;
 800088c:	e0ff      	b.n	8000a8e <eyes_FSM+0x23e>
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 800088e:	f000 f983 	bl	8000b98 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000892:	4b82      	ldr	r3, [pc, #520]	; (8000a9c <eyes_FSM+0x24c>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f040 80ee 	bne.w	8000a78 <eyes_FSM+0x228>
 800089c:	4b7f      	ldr	r3, [pc, #508]	; (8000a9c <eyes_FSM+0x24c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2108      	movs	r1, #8
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe42 	bl	8000530 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 80008ac:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80008b0:	f000 f94a 	bl	8000b48 <eyes_waitIT>
		firstPixelRead = true;
 80008b4:	4b7a      	ldr	r3, [pc, #488]	; (8000aa0 <eyes_FSM+0x250>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
//		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
		FSMstate = REQ_READING_FRAME;
 80008ba:	4b76      	ldr	r3, [pc, #472]	; (8000a94 <eyes_FSM+0x244>)
 80008bc:	2203      	movs	r2, #3
 80008be:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 80008c0:	4b75      	ldr	r3, [pc, #468]	; (8000a98 <eyes_FSM+0x248>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
#endif
		frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 80008c6:	4b77      	ldr	r3, [pc, #476]	; (8000aa4 <eyes_FSM+0x254>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	1c5a      	adds	r2, r3, #1
 80008cc:	b2d1      	uxtb	r1, r2
 80008ce:	4a75      	ldr	r2, [pc, #468]	; (8000aa4 <eyes_FSM+0x254>)
 80008d0:	7011      	strb	r1, [r2, #0]
 80008d2:	4a75      	ldr	r2, [pc, #468]	; (8000aa8 <eyes_FSM+0x258>)
 80008d4:	7812      	ldrb	r2, [r2, #0]
 80008d6:	4610      	mov	r0, r2
 80008d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80008dc:	b2d9      	uxtb	r1, r3
 80008de:	4a73      	ldr	r2, [pc, #460]	; (8000aac <eyes_FSM+0x25c>)
 80008e0:	f240 23a9 	movw	r3, #681	; 0x2a9
 80008e4:	fb03 f300 	mul.w	r3, r3, r0
 80008e8:	4413      	add	r3, r2
 80008ea:	3304      	adds	r3, #4
 80008ec:	460a      	mov	r2, r1
 80008ee:	701a      	strb	r2, [r3, #0]
		transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 80008f0:	4b6d      	ldr	r3, [pc, #436]	; (8000aa8 <eyes_FSM+0x258>)
 80008f2:	781b      	ldrb	r3, [r3, #0]
 80008f4:	461a      	mov	r2, r3
 80008f6:	f240 23a9 	movw	r3, #681	; 0x2a9
 80008fa:	fb03 f302 	mul.w	r3, r3, r2
 80008fe:	4a6b      	ldr	r2, [pc, #428]	; (8000aac <eyes_FSM+0x25c>)
 8000900:	4413      	add	r3, r2
 8000902:	f240 21a9 	movw	r1, #681	; 0x2a9
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff ff54 	bl	80007b4 <transferDMA_USART2_TX>
		collisionFlag = 0;
 800090c:	4b63      	ldr	r3, [pc, #396]	; (8000a9c <eyes_FSM+0x24c>)
 800090e:	2200      	movs	r2, #0
 8000910:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000912:	4b67      	ldr	r3, [pc, #412]	; (8000ab0 <eyes_FSM+0x260>)
 8000914:	2200      	movs	r2, #0
 8000916:	801a      	strh	r2, [r3, #0]
		return;
 8000918:	e0b9      	b.n	8000a8e <eyes_FSM+0x23e>
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 800091a:	f000 f93d 	bl	8000b98 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 800091e:	4b5f      	ldr	r3, [pc, #380]	; (8000a9c <eyes_FSM+0x24c>)
 8000920:	781b      	ldrb	r3, [r3, #0]
 8000922:	2b00      	cmp	r3, #0
 8000924:	f040 80aa 	bne.w	8000a7c <eyes_FSM+0x22c>
 8000928:	4b5c      	ldr	r3, [pc, #368]	; (8000a9c <eyes_FSM+0x24c>)
 800092a:	2201      	movs	r2, #1
 800092c:	701a      	strb	r2, [r3, #0]
		adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 800092e:	2108      	movs	r1, #8
 8000930:	2000      	movs	r0, #0
 8000932:	f7ff fe9f 	bl	8000674 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
#endif
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8000936:	f44f 6016 	mov.w	r0, #2400	; 0x960
 800093a:	f000 f905 	bl	8000b48 <eyes_waitIT>
		if(!firstPixelRead){
 800093e:	4b58      	ldr	r3, [pc, #352]	; (8000aa0 <eyes_FSM+0x250>)
 8000940:	781b      	ldrb	r3, [r3, #0]
 8000942:	f083 0301 	eor.w	r3, r3, #1
 8000946:	b2db      	uxtb	r3, r3
 8000948:	2b00      	cmp	r3, #0
 800094a:	d039      	beq.n	80009c0 <eyes_FSM+0x170>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 800094c:	4b59      	ldr	r3, [pc, #356]	; (8000ab4 <eyes_FSM+0x264>)
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	4619      	mov	r1, r3
 8000952:	4b51      	ldr	r3, [pc, #324]	; (8000a98 <eyes_FSM+0x248>)
 8000954:	881b      	ldrh	r3, [r3, #0]
 8000956:	461a      	mov	r2, r3
 8000958:	f240 23a9 	movw	r3, #681	; 0x2a9
 800095c:	fb03 f301 	mul.w	r3, r3, r1
 8000960:	4413      	add	r3, r2
 8000962:	4a52      	ldr	r2, [pc, #328]	; (8000aac <eyes_FSM+0x25c>)
 8000964:	4413      	add	r3, r2
 8000966:	3305      	adds	r3, #5
 8000968:	4618      	mov	r0, r3
 800096a:	f7ff feb9 	bl	80006e0 <adns2610_checkPixel>
 800096e:	4603      	mov	r3, r0
 8000970:	461a      	mov	r2, r3
 8000972:	4b51      	ldr	r3, [pc, #324]	; (8000ab8 <eyes_FSM+0x268>)
 8000974:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000976:	4b51      	ldr	r3, [pc, #324]	; (8000abc <eyes_FSM+0x26c>)
 8000978:	4a47      	ldr	r2, [pc, #284]	; (8000a98 <eyes_FSM+0x248>)
 800097a:	4951      	ldr	r1, [pc, #324]	; (8000ac0 <eyes_FSM+0x270>)
 800097c:	484e      	ldr	r0, [pc, #312]	; (8000ab8 <eyes_FSM+0x268>)
 800097e:	f000 f91b 	bl	8000bb8 <eyes_computeIdxFromStatus>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d011      	beq.n	80009ac <eyes_FSM+0x15c>
				FSMstate = READING_FRAME;
 8000988:	4b42      	ldr	r3, [pc, #264]	; (8000a94 <eyes_FSM+0x244>)
 800098a:	2202      	movs	r2, #2
 800098c:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 800098e:	4b4a      	ldr	r3, [pc, #296]	; (8000ab8 <eyes_FSM+0x268>)
 8000990:	781b      	ldrb	r3, [r3, #0]
 8000992:	2b03      	cmp	r3, #3
 8000994:	d003      	beq.n	800099e <eyes_FSM+0x14e>
 8000996:	4b48      	ldr	r3, [pc, #288]	; (8000ab8 <eyes_FSM+0x268>)
 8000998:	781b      	ldrb	r3, [r3, #0]
 800099a:	2b01      	cmp	r3, #1
 800099c:	d116      	bne.n	80009cc <eyes_FSM+0x17c>
					errorCounter++;
 800099e:	4b44      	ldr	r3, [pc, #272]	; (8000ab0 <eyes_FSM+0x260>)
 80009a0:	881b      	ldrh	r3, [r3, #0]
 80009a2:	3301      	adds	r3, #1
 80009a4:	b29a      	uxth	r2, r3
 80009a6:	4b42      	ldr	r3, [pc, #264]	; (8000ab0 <eyes_FSM+0x260>)
 80009a8:	801a      	strh	r2, [r3, #0]
 80009aa:	e00f      	b.n	80009cc <eyes_FSM+0x17c>
				}
			}
			else{
				eyes_stopWaitIT();
 80009ac:	f000 f8f4 	bl	8000b98 <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 80009b0:	4b38      	ldr	r3, [pc, #224]	; (8000a94 <eyes_FSM+0x244>)
 80009b2:	2201      	movs	r2, #1
 80009b4:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 80009b6:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80009ba:	f000 f8c5 	bl	8000b48 <eyes_waitIT>
 80009be:	e005      	b.n	80009cc <eyes_FSM+0x17c>
			}
		}
		else{
			firstPixelRead = false;
 80009c0:	4b37      	ldr	r3, [pc, #220]	; (8000aa0 <eyes_FSM+0x250>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 80009c6:	4b33      	ldr	r3, [pc, #204]	; (8000a94 <eyes_FSM+0x244>)
 80009c8:	2202      	movs	r2, #2
 80009ca:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 80009cc:	4b33      	ldr	r3, [pc, #204]	; (8000a9c <eyes_FSM+0x24c>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	701a      	strb	r2, [r3, #0]
		return;
 80009d2:	e05c      	b.n	8000a8e <eyes_FSM+0x23e>
	case READING_FRAME:
		eyes_stopWaitIT();
 80009d4:	f000 f8e0 	bl	8000b98 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80009d8:	4b30      	ldr	r3, [pc, #192]	; (8000a9c <eyes_FSM+0x24c>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	2b00      	cmp	r3, #0
 80009de:	d14f      	bne.n	8000a80 <eyes_FSM+0x230>
 80009e0:	4b2e      	ldr	r3, [pc, #184]	; (8000a9c <eyes_FSM+0x24c>)
 80009e2:	2201      	movs	r2, #1
 80009e4:	701a      	strb	r2, [r3, #0]
		adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 80009e6:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <eyes_FSM+0x264>)
 80009e8:	781b      	ldrb	r3, [r3, #0]
 80009ea:	4619      	mov	r1, r3
 80009ec:	4b2a      	ldr	r3, [pc, #168]	; (8000a98 <eyes_FSM+0x248>)
 80009ee:	881b      	ldrh	r3, [r3, #0]
 80009f0:	461a      	mov	r2, r3
 80009f2:	f240 23a9 	movw	r3, #681	; 0x2a9
 80009f6:	fb03 f301 	mul.w	r3, r3, r1
 80009fa:	4413      	add	r3, r2
 80009fc:	4a2b      	ldr	r2, [pc, #172]	; (8000aac <eyes_FSM+0x25c>)
 80009fe:	4413      	add	r3, r2
 8000a00:	3305      	adds	r3, #5
 8000a02:	4619      	mov	r1, r3
 8000a04:	2000      	movs	r0, #0
 8000a06:	f7ff fdf3 	bl	80005f0 <adns2610_receiveByte>
		}
		else{
			FSMstate = REQ_READING_FRAME;
		}
#else
		if(pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1){
 8000a0a:	4b23      	ldr	r3, [pc, #140]	; (8000a98 <eyes_FSM+0x248>)
 8000a0c:	881b      	ldrh	r3, [r3, #0]
 8000a0e:	f240 1243 	movw	r2, #323	; 0x143
 8000a12:	4293      	cmp	r3, r2
 8000a14:	d10c      	bne.n	8000a30 <eyes_FSM+0x1e0>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000a16:	4b29      	ldr	r3, [pc, #164]	; (8000abc <eyes_FSM+0x26c>)
 8000a18:	4a1f      	ldr	r2, [pc, #124]	; (8000a98 <eyes_FSM+0x248>)
 8000a1a:	4929      	ldr	r1, [pc, #164]	; (8000ac0 <eyes_FSM+0x270>)
 8000a1c:	4826      	ldr	r0, [pc, #152]	; (8000ab8 <eyes_FSM+0x268>)
 8000a1e:	f000 f8cb 	bl	8000bb8 <eyes_computeIdxFromStatus>
 8000a22:	4603      	mov	r3, r0
 8000a24:	2b00      	cmp	r3, #0
 8000a26:	d006      	beq.n	8000a36 <eyes_FSM+0x1e6>
				FSMstate = PROCESSING;
 8000a28:	4b1a      	ldr	r3, [pc, #104]	; (8000a94 <eyes_FSM+0x244>)
 8000a2a:	2204      	movs	r2, #4
 8000a2c:	701a      	strb	r2, [r3, #0]
 8000a2e:	e002      	b.n	8000a36 <eyes_FSM+0x1e6>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000a30:	4b18      	ldr	r3, [pc, #96]	; (8000a94 <eyes_FSM+0x244>)
 8000a32:	2203      	movs	r2, #3
 8000a34:	701a      	strb	r2, [r3, #0]
		}
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a36:	20c8      	movs	r0, #200	; 0xc8
 8000a38:	f000 f886 	bl	8000b48 <eyes_waitIT>
		collisionFlag = 0;
 8000a3c:	4b17      	ldr	r3, [pc, #92]	; (8000a9c <eyes_FSM+0x24c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	701a      	strb	r2, [r3, #0]
		return;
 8000a42:	e024      	b.n	8000a8e <eyes_FSM+0x23e>
	case PROCESSING:
		eyes_stopWaitIT();
 8000a44:	f000 f8a8 	bl	8000b98 <eyes_stopWaitIT>
		if(firstFrameRead) firstFrameRead = false;
 8000a48:	4b1e      	ldr	r3, [pc, #120]	; (8000ac4 <eyes_FSM+0x274>)
 8000a4a:	781b      	ldrb	r3, [r3, #0]
 8000a4c:	2b00      	cmp	r3, #0
 8000a4e:	d002      	beq.n	8000a56 <eyes_FSM+0x206>
 8000a50:	4b1c      	ldr	r3, [pc, #112]	; (8000ac4 <eyes_FSM+0x274>)
 8000a52:	2200      	movs	r2, #0
 8000a54:	701a      	strb	r2, [r3, #0]
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <eyes_FSM+0x258>)
 8000a58:	781b      	ldrb	r3, [r3, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
 8000a5c:	4b15      	ldr	r3, [pc, #84]	; (8000ab4 <eyes_FSM+0x264>)
 8000a5e:	781a      	ldrb	r2, [r3, #0]
 8000a60:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <eyes_FSM+0x258>)
 8000a62:	701a      	strb	r2, [r3, #0]
 8000a64:	4a13      	ldr	r2, [pc, #76]	; (8000ab4 <eyes_FSM+0x264>)
 8000a66:	79fb      	ldrb	r3, [r7, #7]
 8000a68:	7013      	strb	r3, [r2, #0]
//		transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
		FSMstate = TRIGGER_FRAME;
 8000a6a:	4b0a      	ldr	r3, [pc, #40]	; (8000a94 <eyes_FSM+0x244>)
 8000a6c:	2201      	movs	r2, #1
 8000a6e:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a70:	20c8      	movs	r0, #200	; 0xc8
 8000a72:	f000 f869 	bl	8000b48 <eyes_waitIT>
		return;
 8000a76:	e00a      	b.n	8000a8e <eyes_FSM+0x23e>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a78:	bf00      	nop
 8000a7a:	e002      	b.n	8000a82 <eyes_FSM+0x232>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a7c:	bf00      	nop
 8000a7e:	e000      	b.n	8000a82 <eyes_FSM+0x232>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a80:	bf00      	nop
	}

	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8000a82:	4811      	ldr	r0, [pc, #68]	; (8000ac8 <eyes_FSM+0x278>)
 8000a84:	f002 fba4 	bl	80031d0 <puts>
		eyes_stopWaitIT();
 8000a88:	f000 f886 	bl	8000b98 <eyes_stopWaitIT>
		while(1);
 8000a8c:	e7fe      	b.n	8000a8c <eyes_FSM+0x23c>
}
 8000a8e:	3708      	adds	r7, #8
 8000a90:	46bd      	mov	sp, r7
 8000a92:	bd80      	pop	{r7, pc}
 8000a94:	200005dc 	.word	0x200005dc
 8000a98:	200005e0 	.word	0x200005e0
 8000a9c:	200005e4 	.word	0x200005e4
 8000aa0:	20000552 	.word	0x20000552
 8000aa4:	200005e5 	.word	0x200005e5
 8000aa8:	200005f9 	.word	0x200005f9
 8000aac:	20000000 	.word	0x20000000
 8000ab0:	200005e6 	.word	0x200005e6
 8000ab4:	200005f8 	.word	0x200005f8
 8000ab8:	200005e8 	.word	0x200005e8
 8000abc:	200005e2 	.word	0x200005e2
 8000ac0:	200005e9 	.word	0x200005e9
 8000ac4:	20000553 	.word	0x20000553
 8000ac8:	0800419c 	.word	0x0800419c

08000acc <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b082      	sub	sp, #8
 8000ad0:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8000ad2:	4b1c      	ldr	r3, [pc, #112]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000ad8:	4b1a      	ldr	r3, [pc, #104]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000ada:	68db      	ldr	r3, [r3, #12]
 8000adc:	4a19      	ldr	r2, [pc, #100]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000ade:	f023 0301 	bic.w	r3, r3, #1
 8000ae2:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	f003 0302 	and.w	r3, r3, #2
 8000aea:	f043 0304 	orr.w	r3, r3, #4
 8000aee:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8000af0:	4a14      	ldr	r2, [pc, #80]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000af8:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000afc:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b00:	695b      	ldr	r3, [r3, #20]
 8000b02:	4a10      	ldr	r2, [pc, #64]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b04:	f043 0301 	orr.w	r3, r3, #1
 8000b08:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b0c:	691b      	ldr	r3, [r3, #16]
 8000b0e:	4a0d      	ldr	r2, [pc, #52]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b10:	f023 0301 	bic.w	r3, r3, #1
 8000b14:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b18:	681b      	ldr	r3, [r3, #0]
 8000b1a:	4a0a      	ldr	r2, [pc, #40]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b1c:	f023 0304 	bic.w	r3, r3, #4
 8000b20:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	4a07      	ldr	r2, [pc, #28]	; (8000b44 <eyes_configureFSM_TIM+0x78>)
 8000b28:	f043 0301 	orr.w	r3, r3, #1
 8000b2c:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8000b2e:	2100      	movs	r1, #0
 8000b30:	2019      	movs	r0, #25
 8000b32:	f7ff fe15 	bl	8000760 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b36:	2019      	movs	r0, #25
 8000b38:	f7ff fdf4 	bl	8000724 <__NVIC_EnableIRQ>
}
 8000b3c:	bf00      	nop
 8000b3e:	3708      	adds	r7, #8
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}
 8000b44:	40012c00 	.word	0x40012c00

08000b48 <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8000b48:	b480      	push	{r7}
 8000b4a:	b083      	sub	sp, #12
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b50:	4b10      	ldr	r3, [pc, #64]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a0f      	ldr	r2, [pc, #60]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b56:	f043 0304 	orr.w	r3, r3, #4
 8000b5a:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8000b5c:	4a0d      	ldr	r2, [pc, #52]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b5e:	687b      	ldr	r3, [r7, #4]
 8000b60:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000b62:	4b0c      	ldr	r3, [pc, #48]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b64:	695b      	ldr	r3, [r3, #20]
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b68:	f043 0301 	orr.w	r3, r3, #1
 8000b6c:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b6e:	4b09      	ldr	r3, [pc, #36]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b70:	681b      	ldr	r3, [r3, #0]
 8000b72:	4a08      	ldr	r2, [pc, #32]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b74:	f023 0304 	bic.w	r3, r3, #4
 8000b78:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000b7a:	4b06      	ldr	r3, [pc, #24]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b7c:	681b      	ldr	r3, [r3, #0]
 8000b7e:	4a05      	ldr	r2, [pc, #20]	; (8000b94 <eyes_waitIT+0x4c>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6013      	str	r3, [r2, #0]
}
 8000b86:	bf00      	nop
 8000b88:	370c      	adds	r7, #12
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr
 8000b92:	bf00      	nop
 8000b94:	40012c00 	.word	0x40012c00

08000b98 <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000b9c:	4b05      	ldr	r3, [pc, #20]	; (8000bb4 <eyes_stopWaitIT+0x1c>)
 8000b9e:	681b      	ldr	r3, [r3, #0]
 8000ba0:	4a04      	ldr	r2, [pc, #16]	; (8000bb4 <eyes_stopWaitIT+0x1c>)
 8000ba2:	f023 0301 	bic.w	r3, r3, #1
 8000ba6:	6013      	str	r3, [r2, #0]
}
 8000ba8:	bf00      	nop
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
 8000bb2:	bf00      	nop
 8000bb4:	40012c00 	.word	0x40012c00

08000bb8 <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 8000bb8:	b480      	push	{r7}
 8000bba:	b085      	sub	sp, #20
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	60f8      	str	r0, [r7, #12]
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 8000bc6:	68fb      	ldr	r3, [r7, #12]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d10a      	bne.n	8000be4 <eyes_computeIdxFromStatus+0x2c>
 8000bce:	687b      	ldr	r3, [r7, #4]
 8000bd0:	881b      	ldrh	r3, [r3, #0]
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d106      	bne.n	8000be4 <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	881b      	ldrh	r3, [r3, #0]
 8000bda:	3301      	adds	r3, #1
 8000bdc:	b29a      	uxth	r2, r3
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	801a      	strh	r2, [r3, #0]
 8000be2:	e024      	b.n	8000c2e <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d10f      	bne.n	8000c0c <eyes_computeIdxFromStatus+0x54>
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	881b      	ldrh	r3, [r3, #0]
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	d00b      	beq.n	8000c0c <eyes_computeIdxFromStatus+0x54>
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	881b      	ldrh	r3, [r3, #0]
 8000bf8:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000bfc:	d806      	bhi.n	8000c0c <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 8000bfe:	687b      	ldr	r3, [r7, #4]
 8000c00:	881b      	ldrh	r3, [r3, #0]
 8000c02:	3301      	adds	r3, #1
 8000c04:	b29a      	uxth	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	801a      	strh	r2, [r3, #0]
 8000c0a:	e010      	b.n	8000c2e <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d10c      	bne.n	8000c2e <eyes_computeIdxFromStatus+0x76>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	881b      	ldrh	r3, [r3, #0]
 8000c18:	2b00      	cmp	r3, #0
 8000c1a:	d008      	beq.n	8000c2e <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	2200      	movs	r2, #0
 8000c20:	801a      	strh	r2, [r3, #0]
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	881a      	ldrh	r2, [r3, #0]
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	801a      	strh	r2, [r3, #0]
		return false;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	e000      	b.n	8000c30 <eyes_computeIdxFromStatus+0x78>
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
		(*idx1) = (*idx2) = 0;
		return false;
	}
#endif
	return true;
 8000c2e:	2301      	movs	r3, #1
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3714      	adds	r7, #20
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr

08000c3c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c42:	691b      	ldr	r3, [r3, #16]
 8000c44:	f003 0301 	and.w	r3, r3, #1
 8000c48:	2b00      	cmp	r3, #0
 8000c4a:	d007      	beq.n	8000c5c <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000c4c:	4b04      	ldr	r3, [pc, #16]	; (8000c60 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c4e:	691b      	ldr	r3, [r3, #16]
 8000c50:	4a03      	ldr	r2, [pc, #12]	; (8000c60 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c52:	f023 0301 	bic.w	r3, r3, #1
 8000c56:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 8000c58:	f7ff fdfa 	bl	8000850 <eyes_FSM>
	}
}
 8000c5c:	bf00      	nop
 8000c5e:	bd80      	pop	{r7, pc}
 8000c60:	40012c00 	.word	0x40012c00

08000c64 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c64:	b480      	push	{r7}
 8000c66:	b085      	sub	sp, #20
 8000c68:	af00      	add	r7, sp, #0
 8000c6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c6c:	4b08      	ldr	r3, [pc, #32]	; (8000c90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c70:	4907      	ldr	r1, [pc, #28]	; (8000c90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c78:	4b05      	ldr	r3, [pc, #20]	; (8000c90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	4013      	ands	r3, r2
 8000c80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c82:	68fb      	ldr	r3, [r7, #12]
}
 8000c84:	bf00      	nop
 8000c86:	3714      	adds	r7, #20
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c8e:	4770      	bx	lr
 8000c90:	40021000 	.word	0x40021000

08000c94 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b087      	sub	sp, #28
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000c9e:	4a17      	ldr	r2, [pc, #92]	; (8000cfc <LL_SYSCFG_SetEXTISource+0x68>)
 8000ca0:	683b      	ldr	r3, [r7, #0]
 8000ca2:	b2db      	uxtb	r3, r3
 8000ca4:	3302      	adds	r3, #2
 8000ca6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000caa:	683b      	ldr	r3, [r7, #0]
 8000cac:	0c1b      	lsrs	r3, r3, #16
 8000cae:	43db      	mvns	r3, r3
 8000cb0:	ea02 0103 	and.w	r1, r2, r3
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	0c1b      	lsrs	r3, r3, #16
 8000cb8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cba:	693b      	ldr	r3, [r7, #16]
 8000cbc:	fa93 f3a3 	rbit	r3, r3
 8000cc0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cc2:	68fb      	ldr	r3, [r7, #12]
 8000cc4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000cc6:	697b      	ldr	r3, [r7, #20]
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d101      	bne.n	8000cd0 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000ccc:	2320      	movs	r3, #32
 8000cce:	e003      	b.n	8000cd8 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	b2db      	uxtb	r3, r3
 8000cd8:	461a      	mov	r2, r3
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	fa03 f202 	lsl.w	r2, r3, r2
 8000ce0:	4806      	ldr	r0, [pc, #24]	; (8000cfc <LL_SYSCFG_SetEXTISource+0x68>)
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	b2db      	uxtb	r3, r3
 8000ce6:	430a      	orrs	r2, r1
 8000ce8:	3302      	adds	r3, #2
 8000cea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cee:	bf00      	nop
 8000cf0:	371c      	adds	r7, #28
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf8:	4770      	bx	lr
 8000cfa:	bf00      	nop
 8000cfc:	40010000 	.word	0x40010000

08000d00 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b08b      	sub	sp, #44	; 0x2c
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	60f8      	str	r0, [r7, #12]
 8000d08:	60b9      	str	r1, [r7, #8]
 8000d0a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d0c:	68fb      	ldr	r3, [r7, #12]
 8000d0e:	681a      	ldr	r2, [r3, #0]
 8000d10:	68bb      	ldr	r3, [r7, #8]
 8000d12:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d14:	697b      	ldr	r3, [r7, #20]
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	613b      	str	r3, [r7, #16]
  return result;
 8000d1c:	693b      	ldr	r3, [r7, #16]
 8000d1e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d20:	69bb      	ldr	r3, [r7, #24]
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d101      	bne.n	8000d2a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d26:	2320      	movs	r3, #32
 8000d28:	e003      	b.n	8000d32 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d2a:	69bb      	ldr	r3, [r7, #24]
 8000d2c:	fab3 f383 	clz	r3, r3
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	005b      	lsls	r3, r3, #1
 8000d34:	2103      	movs	r1, #3
 8000d36:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3a:	43db      	mvns	r3, r3
 8000d3c:	401a      	ands	r2, r3
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d42:	6a3b      	ldr	r3, [r7, #32]
 8000d44:	fa93 f3a3 	rbit	r3, r3
 8000d48:	61fb      	str	r3, [r7, #28]
  return result;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d101      	bne.n	8000d58 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d54:	2320      	movs	r3, #32
 8000d56:	e003      	b.n	8000d60 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d5a:	fab3 f383 	clz	r3, r3
 8000d5e:	b2db      	uxtb	r3, r3
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	6879      	ldr	r1, [r7, #4]
 8000d64:	fa01 f303 	lsl.w	r3, r1, r3
 8000d68:	431a      	orrs	r2, r3
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	601a      	str	r2, [r3, #0]
}
 8000d6e:	bf00      	nop
 8000d70:	372c      	adds	r7, #44	; 0x2c
 8000d72:	46bd      	mov	sp, r7
 8000d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d78:	4770      	bx	lr

08000d7a <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	b08b      	sub	sp, #44	; 0x2c
 8000d7e:	af00      	add	r7, sp, #0
 8000d80:	60f8      	str	r0, [r7, #12]
 8000d82:	60b9      	str	r1, [r7, #8]
 8000d84:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d86:	68fb      	ldr	r3, [r7, #12]
 8000d88:	68da      	ldr	r2, [r3, #12]
 8000d8a:	68bb      	ldr	r3, [r7, #8]
 8000d8c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d8e:	697b      	ldr	r3, [r7, #20]
 8000d90:	fa93 f3a3 	rbit	r3, r3
 8000d94:	613b      	str	r3, [r7, #16]
  return result;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d9a:	69bb      	ldr	r3, [r7, #24]
 8000d9c:	2b00      	cmp	r3, #0
 8000d9e:	d101      	bne.n	8000da4 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000da0:	2320      	movs	r3, #32
 8000da2:	e003      	b.n	8000dac <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000da4:	69bb      	ldr	r3, [r7, #24]
 8000da6:	fab3 f383 	clz	r3, r3
 8000daa:	b2db      	uxtb	r3, r3
 8000dac:	005b      	lsls	r3, r3, #1
 8000dae:	2103      	movs	r1, #3
 8000db0:	fa01 f303 	lsl.w	r3, r1, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	401a      	ands	r2, r3
 8000db8:	68bb      	ldr	r3, [r7, #8]
 8000dba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dbc:	6a3b      	ldr	r3, [r7, #32]
 8000dbe:	fa93 f3a3 	rbit	r3, r3
 8000dc2:	61fb      	str	r3, [r7, #28]
  return result;
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dca:	2b00      	cmp	r3, #0
 8000dcc:	d101      	bne.n	8000dd2 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000dce:	2320      	movs	r3, #32
 8000dd0:	e003      	b.n	8000dda <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dd4:	fab3 f383 	clz	r3, r3
 8000dd8:	b2db      	uxtb	r3, r3
 8000dda:	005b      	lsls	r3, r3, #1
 8000ddc:	6879      	ldr	r1, [r7, #4]
 8000dde:	fa01 f303 	lsl.w	r3, r1, r3
 8000de2:	431a      	orrs	r2, r3
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	60da      	str	r2, [r3, #12]
}
 8000de8:	bf00      	nop
 8000dea:	372c      	adds	r7, #44	; 0x2c
 8000dec:	46bd      	mov	sp, r7
 8000dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df2:	4770      	bx	lr

08000df4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b083      	sub	sp, #12
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	683a      	ldr	r2, [r7, #0]
 8000e02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr

08000e10 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b08a      	sub	sp, #40	; 0x28
 8000e14:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000e16:	f107 031c 	add.w	r3, r7, #28
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	601a      	str	r2, [r3, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
 8000e20:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	1d3b      	adds	r3, r7, #4
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]
 8000e30:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e32:	2004      	movs	r0, #4
 8000e34:	f7ff ff16 	bl	8000c64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000e38:	2080      	movs	r0, #128	; 0x80
 8000e3a:	f7ff ff13 	bl	8000c64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e3e:	2001      	movs	r0, #1
 8000e40:	f7ff ff10 	bl	8000c64 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e44:	2002      	movs	r0, #2
 8000e46:	f7ff ff0d 	bl	8000c64 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000e4a:	2120      	movs	r1, #32
 8000e4c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e50:	f7ff ffd0 	bl	8000df4 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000e54:	491b      	ldr	r1, [pc, #108]	; (8000ec4 <MX_GPIO_Init+0xb4>)
 8000e56:	2002      	movs	r0, #2
 8000e58:	f7ff ff1c 	bl	8000c94 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000e5c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e60:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e66:	2301      	movs	r3, #1
 8000e68:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e72:	2302      	movs	r3, #2
 8000e74:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e78:	f107 031c 	add.w	r3, r7, #28
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	f001 f815 	bl	8001eac <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e88:	480f      	ldr	r0, [pc, #60]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e8a:	f7ff ff76 	bl	8000d7a <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e94:	480c      	ldr	r0, [pc, #48]	; (8000ec8 <MX_GPIO_Init+0xb8>)
 8000e96:	f7ff ff33 	bl	8000d00 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e9a:	2320      	movs	r3, #32
 8000e9c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000eae:	1d3b      	adds	r3, r7, #4
 8000eb0:	4619      	mov	r1, r3
 8000eb2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eb6:	f001 fa30 	bl	800231a <LL_GPIO_Init>

}
 8000eba:	bf00      	nop
 8000ebc:	3728      	adds	r7, #40	; 0x28
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	00f00003 	.word	0x00f00003
 8000ec8:	48000800 	.word	0x48000800

08000ecc <__NVIC_SetPriorityGrouping>:
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b085      	sub	sp, #20
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000ede:	68db      	ldr	r3, [r3, #12]
 8000ee0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ee2:	68ba      	ldr	r2, [r7, #8]
 8000ee4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ee8:	4013      	ands	r3, r2
 8000eea:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ef4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ef8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000efc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000efe:	4a04      	ldr	r2, [pc, #16]	; (8000f10 <__NVIC_SetPriorityGrouping+0x44>)
 8000f00:	68bb      	ldr	r3, [r7, #8]
 8000f02:	60d3      	str	r3, [r2, #12]
}
 8000f04:	bf00      	nop
 8000f06:	3714      	adds	r7, #20
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr
 8000f10:	e000ed00 	.word	0xe000ed00

08000f14 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f14:	b480      	push	{r7}
 8000f16:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f18:	4b05      	ldr	r3, [pc, #20]	; (8000f30 <LL_RCC_HSI_Enable+0x1c>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a04      	ldr	r2, [pc, #16]	; (8000f30 <LL_RCC_HSI_Enable+0x1c>)
 8000f1e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f22:	6013      	str	r3, [r2, #0]
}
 8000f24:	bf00      	nop
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	40021000 	.word	0x40021000

08000f34 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <LL_RCC_HSI_IsReady+0x24>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f44:	d101      	bne.n	8000f4a <LL_RCC_HSI_IsReady+0x16>
 8000f46:	2301      	movs	r3, #1
 8000f48:	e000      	b.n	8000f4c <LL_RCC_HSI_IsReady+0x18>
 8000f4a:	2300      	movs	r3, #0
}
 8000f4c:	4618      	mov	r0, r3
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f64:	4b07      	ldr	r3, [pc, #28]	; (8000f84 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f66:	685b      	ldr	r3, [r3, #4]
 8000f68:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	061b      	lsls	r3, r3, #24
 8000f70:	4904      	ldr	r1, [pc, #16]	; (8000f84 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f72:	4313      	orrs	r3, r2
 8000f74:	604b      	str	r3, [r1, #4]
}
 8000f76:	bf00      	nop
 8000f78:	370c      	adds	r7, #12
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop
 8000f84:	40021000 	.word	0x40021000

08000f88 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b083      	sub	sp, #12
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f90:	4b06      	ldr	r3, [pc, #24]	; (8000fac <LL_RCC_SetSysClkSource+0x24>)
 8000f92:	689b      	ldr	r3, [r3, #8]
 8000f94:	f023 0203 	bic.w	r2, r3, #3
 8000f98:	4904      	ldr	r1, [pc, #16]	; (8000fac <LL_RCC_SetSysClkSource+0x24>)
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	608b      	str	r3, [r1, #8]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	40021000 	.word	0x40021000

08000fb0 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fb0:	b480      	push	{r7}
 8000fb2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fb4:	4b04      	ldr	r3, [pc, #16]	; (8000fc8 <LL_RCC_GetSysClkSource+0x18>)
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	f003 030c 	and.w	r3, r3, #12
}
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	40021000 	.word	0x40021000

08000fcc <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fd4:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fd6:	689b      	ldr	r3, [r3, #8]
 8000fd8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fdc:	4904      	ldr	r1, [pc, #16]	; (8000ff0 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4313      	orrs	r3, r2
 8000fe2:	608b      	str	r3, [r1, #8]
}
 8000fe4:	bf00      	nop
 8000fe6:	370c      	adds	r7, #12
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fee:	4770      	bx	lr
 8000ff0:	40021000 	.word	0x40021000

08000ff4 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	b083      	sub	sp, #12
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000ffc:	4b06      	ldr	r3, [pc, #24]	; (8001018 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001004:	4904      	ldr	r1, [pc, #16]	; (8001018 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	4313      	orrs	r3, r2
 800100a:	608b      	str	r3, [r1, #8]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	40021000 	.word	0x40021000

0800101c <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001024:	4b06      	ldr	r3, [pc, #24]	; (8001040 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001026:	689b      	ldr	r3, [r3, #8]
 8001028:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800102c:	4904      	ldr	r1, [pc, #16]	; (8001040 <LL_RCC_SetAPB2Prescaler+0x24>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	4313      	orrs	r3, r2
 8001032:	608b      	str	r3, [r1, #8]
}
 8001034:	bf00      	nop
 8001036:	370c      	adds	r7, #12
 8001038:	46bd      	mov	sp, r7
 800103a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800103e:	4770      	bx	lr
 8001040:	40021000 	.word	0x40021000

08001044 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001044:	b480      	push	{r7}
 8001046:	b083      	sub	sp, #12
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 800104c:	4b09      	ldr	r3, [pc, #36]	; (8001074 <LL_RCC_SetUSARTClockSource+0x30>)
 800104e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	0c1b      	lsrs	r3, r3, #16
 8001056:	43db      	mvns	r3, r3
 8001058:	401a      	ands	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	b29b      	uxth	r3, r3
 800105e:	4905      	ldr	r1, [pc, #20]	; (8001074 <LL_RCC_SetUSARTClockSource+0x30>)
 8001060:	4313      	orrs	r3, r2
 8001062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001066:	bf00      	nop
 8001068:	370c      	adds	r7, #12
 800106a:	46bd      	mov	sp, r7
 800106c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001070:	4770      	bx	lr
 8001072:	bf00      	nop
 8001074:	40021000 	.word	0x40021000

08001078 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <LL_RCC_PLL_Enable+0x1c>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a04      	ldr	r2, [pc, #16]	; (8001094 <LL_RCC_PLL_Enable+0x1c>)
 8001082:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001086:	6013      	str	r3, [r2, #0]
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	40021000 	.word	0x40021000

08001098 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001098:	b480      	push	{r7}
 800109a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 800109c:	4b07      	ldr	r3, [pc, #28]	; (80010bc <LL_RCC_PLL_IsReady+0x24>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010a4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010a8:	d101      	bne.n	80010ae <LL_RCC_PLL_IsReady+0x16>
 80010aa:	2301      	movs	r3, #1
 80010ac:	e000      	b.n	80010b0 <LL_RCC_PLL_IsReady+0x18>
 80010ae:	2300      	movs	r3, #0
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	40021000 	.word	0x40021000

080010c0 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	60f8      	str	r0, [r7, #12]
 80010c8:	60b9      	str	r1, [r7, #8]
 80010ca:	607a      	str	r2, [r7, #4]
 80010cc:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80010ce:	4b0a      	ldr	r3, [pc, #40]	; (80010f8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010d0:	68da      	ldr	r2, [r3, #12]
 80010d2:	4b0a      	ldr	r3, [pc, #40]	; (80010fc <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80010d4:	4013      	ands	r3, r2
 80010d6:	68f9      	ldr	r1, [r7, #12]
 80010d8:	68ba      	ldr	r2, [r7, #8]
 80010da:	4311      	orrs	r1, r2
 80010dc:	687a      	ldr	r2, [r7, #4]
 80010de:	0212      	lsls	r2, r2, #8
 80010e0:	4311      	orrs	r1, r2
 80010e2:	683a      	ldr	r2, [r7, #0]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	4904      	ldr	r1, [pc, #16]	; (80010f8 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80010ec:	bf00      	nop
 80010ee:	3714      	adds	r7, #20
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	f9ff808c 	.word	0xf9ff808c

08001100 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001104:	4b05      	ldr	r3, [pc, #20]	; (800111c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001106:	68db      	ldr	r3, [r3, #12]
 8001108:	4a04      	ldr	r2, [pc, #16]	; (800111c <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800110a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800110e:	60d3      	str	r3, [r2, #12]
}
 8001110:	bf00      	nop
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40021000 	.word	0x40021000

08001120 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001128:	4b08      	ldr	r3, [pc, #32]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 800112a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800112c:	4907      	ldr	r1, [pc, #28]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4313      	orrs	r3, r2
 8001132:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001134:	4b05      	ldr	r3, [pc, #20]	; (800114c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001136:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	4013      	ands	r3, r2
 800113c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800113e:	68fb      	ldr	r3, [r7, #12]
}
 8001140:	bf00      	nop
 8001142:	3714      	adds	r7, #20
 8001144:	46bd      	mov	sp, r7
 8001146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114a:	4770      	bx	lr
 800114c:	40021000 	.word	0x40021000

08001150 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001150:	b480      	push	{r7}
 8001152:	b085      	sub	sp, #20
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001158:	4b08      	ldr	r3, [pc, #32]	; (800117c <LL_APB2_GRP1_EnableClock+0x2c>)
 800115a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800115c:	4907      	ldr	r1, [pc, #28]	; (800117c <LL_APB2_GRP1_EnableClock+0x2c>)
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4313      	orrs	r3, r2
 8001162:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001166:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	4013      	ands	r3, r2
 800116c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800116e:	68fb      	ldr	r3, [r7, #12]
}
 8001170:	bf00      	nop
 8001172:	3714      	adds	r7, #20
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40021000 	.word	0x40021000

08001180 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <LL_FLASH_SetLatency+0x24>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f023 0207 	bic.w	r2, r3, #7
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <LL_FLASH_SetLatency+0x24>)
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	4313      	orrs	r3, r2
 8001196:	600b      	str	r3, [r1, #0]
}
 8001198:	bf00      	nop
 800119a:	370c      	adds	r7, #12
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr
 80011a4:	40022000 	.word	0x40022000

080011a8 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011ac:	4b04      	ldr	r3, [pc, #16]	; (80011c0 <LL_FLASH_GetLatency+0x18>)
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0307 	and.w	r3, r3, #7
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	40022000 	.word	0x40022000

080011c4 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011cc:	4b06      	ldr	r3, [pc, #24]	; (80011e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80011d4:	4904      	ldr	r1, [pc, #16]	; (80011e8 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	4313      	orrs	r3, r2
 80011da:	600b      	str	r3, [r1, #0]
}
 80011dc:	bf00      	nop
 80011de:	370c      	adds	r7, #12
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40007000 	.word	0x40007000

080011ec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011f0:	2001      	movs	r0, #1
 80011f2:	f7ff ffad 	bl	8001150 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011f6:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011fa:	f7ff ff91 	bl	8001120 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011fe:	2003      	movs	r0, #3
 8001200:	f7ff fe64 	bl	8000ecc <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001204:	f000 f810 	bl	8001228 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001208:	f7ff fe02 	bl	8000e10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800120c:	f000 fbc2 	bl	8001994 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001210:	f000 f8a8 	bl	8001364 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001214:	f000 fa90 	bl	8001738 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8001218:	f000 fc32 	bl	8001a80 <startupPrint>

  eyes_init();
 800121c:	f7ff faea 	bl	80007f4 <eyes_init>
  eyes_start();
 8001220:	f7ff fb02 	bl	8000828 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001224:	e7fe      	b.n	8001224 <main+0x38>
	...

08001228 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 800122c:	2003      	movs	r0, #3
 800122e:	f7ff ffa7 	bl	8001180 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001232:	bf00      	nop
 8001234:	f7ff ffb8 	bl	80011a8 <LL_FLASH_GetLatency>
 8001238:	4603      	mov	r3, r0
 800123a:	2b03      	cmp	r3, #3
 800123c:	d1fa      	bne.n	8001234 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800123e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001242:	f7ff ffbf 	bl	80011c4 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001246:	f7ff fe65 	bl	8000f14 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800124a:	bf00      	nop
 800124c:	f7ff fe72 	bl	8000f34 <LL_RCC_HSI_IsReady>
 8001250:	4603      	mov	r3, r0
 8001252:	2b01      	cmp	r3, #1
 8001254:	d1fa      	bne.n	800124c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001256:	2010      	movs	r0, #16
 8001258:	f7ff fe80 	bl	8000f5c <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 800125c:	2300      	movs	r3, #0
 800125e:	2208      	movs	r2, #8
 8001260:	2100      	movs	r1, #0
 8001262:	2002      	movs	r0, #2
 8001264:	f7ff ff2c 	bl	80010c0 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001268:	f7ff ff4a 	bl	8001100 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 800126c:	f7ff ff04 	bl	8001078 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001270:	bf00      	nop
 8001272:	f7ff ff11 	bl	8001098 <LL_RCC_PLL_IsReady>
 8001276:	4603      	mov	r3, r0
 8001278:	2b01      	cmp	r3, #1
 800127a:	d1fa      	bne.n	8001272 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 800127c:	2003      	movs	r0, #3
 800127e:	f7ff fe83 	bl	8000f88 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001282:	bf00      	nop
 8001284:	f7ff fe94 	bl	8000fb0 <LL_RCC_GetSysClkSource>
 8001288:	4603      	mov	r3, r0
 800128a:	2b0c      	cmp	r3, #12
 800128c:	d1fa      	bne.n	8001284 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff fe9c 	bl	8000fcc <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001294:	2000      	movs	r0, #0
 8001296:	f7ff fead 	bl	8000ff4 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800129a:	2000      	movs	r0, #0
 800129c:	f7ff febe 	bl	800101c <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <SystemClock_Config+0x90>)
 80012a2:	f001 feab 	bl	8002ffc <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80012a6:	4804      	ldr	r0, [pc, #16]	; (80012b8 <SystemClock_Config+0x90>)
 80012a8:	f001 fedc 	bl	8003064 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80012ac:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80012b0:	f7ff fec8 	bl	8001044 <LL_RCC_SetUSARTClockSource>
}
 80012b4:	bf00      	nop
 80012b6:	bd80      	pop	{r7, pc}
 80012b8:	03d09000 	.word	0x03d09000

080012bc <LL_AHB2_GRP1_EnableClock>:
{
 80012bc:	b480      	push	{r7}
 80012be:	b085      	sub	sp, #20
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012c4:	4b08      	ldr	r3, [pc, #32]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012c8:	4907      	ldr	r1, [pc, #28]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012d0:	4b05      	ldr	r3, [pc, #20]	; (80012e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	4013      	ands	r3, r2
 80012d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012da:	68fb      	ldr	r3, [r7, #12]
}
 80012dc:	bf00      	nop
 80012de:	3714      	adds	r7, #20
 80012e0:	46bd      	mov	sp, r7
 80012e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e6:	4770      	bx	lr
 80012e8:	40021000 	.word	0x40021000

080012ec <LL_APB1_GRP1_EnableClock>:
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012f4:	4b08      	ldr	r3, [pc, #32]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012f8:	4907      	ldr	r1, [pc, #28]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	4313      	orrs	r3, r2
 80012fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001300:	4b05      	ldr	r3, [pc, #20]	; (8001318 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001302:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	4013      	ands	r3, r2
 8001308:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800130a:	68fb      	ldr	r3, [r7, #12]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001316:	4770      	bx	lr
 8001318:	40021000 	.word	0x40021000

0800131c <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 800131c:	b480      	push	{r7}
 800131e:	b083      	sub	sp, #12
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f023 0210 	bic.w	r2, r3, #16
 800132e:	683b      	ldr	r3, [r7, #0]
 8001330:	431a      	orrs	r2, r3
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	605a      	str	r2, [r3, #4]
}
 8001336:	bf00      	nop
 8001338:	370c      	adds	r7, #12
 800133a:	46bd      	mov	sp, r7
 800133c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001340:	4770      	bx	lr

08001342 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001342:	b480      	push	{r7}
 8001344:	b083      	sub	sp, #12
 8001346:	af00      	add	r7, sp, #0
 8001348:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	685b      	ldr	r3, [r3, #4]
 800134e:	f023 0208 	bic.w	r2, r3, #8
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	605a      	str	r2, [r3, #4]
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
	...

08001364 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b090      	sub	sp, #64	; 0x40
 8001368:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800136a:	f107 0318 	add.w	r3, r7, #24
 800136e:	2228      	movs	r2, #40	; 0x28
 8001370:	2100      	movs	r1, #0
 8001372:	4618      	mov	r0, r3
 8001374:	f001 feb0 	bl	80030d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001378:	463b      	mov	r3, r7
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
 8001384:	611a      	str	r2, [r3, #16]
 8001386:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8001388:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 800138c:	f7ff ffae 	bl	80012ec <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001390:	2004      	movs	r0, #4
 8001392:	f7ff ff93 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8001396:	2002      	movs	r0, #2
 8001398:	f7ff ff90 	bl	80012bc <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 800139c:	230c      	movs	r3, #12
 800139e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013a0:	2302      	movs	r3, #2
 80013a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013a4:	2303      	movs	r3, #3
 80013a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013ac:	2300      	movs	r3, #0
 80013ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013b0:	2305      	movs	r3, #5
 80013b2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b4:	463b      	mov	r3, r7
 80013b6:	4619      	mov	r1, r3
 80013b8:	481e      	ldr	r0, [pc, #120]	; (8001434 <MX_SPI2_Init+0xd0>)
 80013ba:	f000 ffae 	bl	800231a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80013be:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013c2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013c4:	2302      	movs	r3, #2
 80013c6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013cc:	2300      	movs	r3, #0
 80013ce:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013d0:	2300      	movs	r3, #0
 80013d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013d4:	2305      	movs	r3, #5
 80013d6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	463b      	mov	r3, r7
 80013da:	4619      	mov	r1, r3
 80013dc:	4816      	ldr	r0, [pc, #88]	; (8001438 <MX_SPI2_Init+0xd4>)
 80013de:	f000 ff9c 	bl	800231a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013e2:	2300      	movs	r3, #0
 80013e4:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013e6:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013ea:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013ec:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013f0:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013f2:	2302      	movs	r3, #2
 80013f4:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013f6:	2301      	movs	r3, #1
 80013f8:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013fa:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013fe:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001400:	2320      	movs	r3, #32
 8001402:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001404:	2300      	movs	r3, #0
 8001406:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8001408:	2300      	movs	r3, #0
 800140a:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 800140c:	2307      	movs	r3, #7
 800140e:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001410:	f107 0318 	add.w	r3, r7, #24
 8001414:	4619      	mov	r1, r3
 8001416:	4809      	ldr	r0, [pc, #36]	; (800143c <MX_SPI2_Init+0xd8>)
 8001418:	f001 fbcd 	bl	8002bb6 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 800141c:	2100      	movs	r1, #0
 800141e:	4807      	ldr	r0, [pc, #28]	; (800143c <MX_SPI2_Init+0xd8>)
 8001420:	f7ff ff7c 	bl	800131c <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001424:	4805      	ldr	r0, [pc, #20]	; (800143c <MX_SPI2_Init+0xd8>)
 8001426:	f7ff ff8c 	bl	8001342 <LL_SPI_DisableNSSPulseMgt>

}
 800142a:	bf00      	nop
 800142c:	3740      	adds	r7, #64	; 0x40
 800142e:	46bd      	mov	sp, r7
 8001430:	bd80      	pop	{r7, pc}
 8001432:	bf00      	nop
 8001434:	48000800 	.word	0x48000800
 8001438:	48000400 	.word	0x48000400
 800143c:	40003800 	.word	0x40003800

08001440 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001440:	b480      	push	{r7}
 8001442:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001444:	bf00      	nop
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr

0800144e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800144e:	b480      	push	{r7}
 8001450:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001452:	e7fe      	b.n	8001452 <HardFault_Handler+0x4>

08001454 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001458:	e7fe      	b.n	8001458 <MemManage_Handler+0x4>

0800145a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800145a:	b480      	push	{r7}
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800145e:	e7fe      	b.n	800145e <BusFault_Handler+0x4>

08001460 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001460:	b480      	push	{r7}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001464:	e7fe      	b.n	8001464 <UsageFault_Handler+0x4>

08001466 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001466:	b480      	push	{r7}
 8001468:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800146a:	bf00      	nop
 800146c:	46bd      	mov	sp, r7
 800146e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001472:	4770      	bx	lr

08001474 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001478:	bf00      	nop
 800147a:	46bd      	mov	sp, r7
 800147c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001480:	4770      	bx	lr

08001482 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001482:	b480      	push	{r7}
 8001484:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001486:	bf00      	nop
 8001488:	46bd      	mov	sp, r7
 800148a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148e:	4770      	bx	lr

08001490 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001490:	b480      	push	{r7}
 8001492:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001494:	bf00      	nop
 8001496:	46bd      	mov	sp, r7
 8001498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149c:	4770      	bx	lr

0800149e <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b086      	sub	sp, #24
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	60f8      	str	r0, [r7, #12]
 80014a6:	60b9      	str	r1, [r7, #8]
 80014a8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014aa:	2300      	movs	r3, #0
 80014ac:	617b      	str	r3, [r7, #20]
 80014ae:	e00a      	b.n	80014c6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014b0:	f000 fade 	bl	8001a70 <__io_getchar>
 80014b4:	4601      	mov	r1, r0
 80014b6:	68bb      	ldr	r3, [r7, #8]
 80014b8:	1c5a      	adds	r2, r3, #1
 80014ba:	60ba      	str	r2, [r7, #8]
 80014bc:	b2ca      	uxtb	r2, r1
 80014be:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	3301      	adds	r3, #1
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	697a      	ldr	r2, [r7, #20]
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	429a      	cmp	r2, r3
 80014cc:	dbf0      	blt.n	80014b0 <_read+0x12>
	}

return len;
 80014ce:	687b      	ldr	r3, [r7, #4]
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3718      	adds	r7, #24
 80014d4:	46bd      	mov	sp, r7
 80014d6:	bd80      	pop	{r7, pc}

080014d8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b086      	sub	sp, #24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014e4:	2300      	movs	r3, #0
 80014e6:	617b      	str	r3, [r7, #20]
 80014e8:	e009      	b.n	80014fe <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014ea:	68bb      	ldr	r3, [r7, #8]
 80014ec:	1c5a      	adds	r2, r3, #1
 80014ee:	60ba      	str	r2, [r7, #8]
 80014f0:	781b      	ldrb	r3, [r3, #0]
 80014f2:	4618      	mov	r0, r3
 80014f4:	f000 fa9e 	bl	8001a34 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	3301      	adds	r3, #1
 80014fc:	617b      	str	r3, [r7, #20]
 80014fe:	697a      	ldr	r2, [r7, #20]
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	429a      	cmp	r2, r3
 8001504:	dbf1      	blt.n	80014ea <_write+0x12>
	}
	return len;
 8001506:	687b      	ldr	r3, [r7, #4]
}
 8001508:	4618      	mov	r0, r3
 800150a:	3718      	adds	r7, #24
 800150c:	46bd      	mov	sp, r7
 800150e:	bd80      	pop	{r7, pc}

08001510 <_close>:

int _close(int file)
{
 8001510:	b480      	push	{r7}
 8001512:	b083      	sub	sp, #12
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
	return -1;
 8001518:	f04f 33ff 	mov.w	r3, #4294967295
}
 800151c:	4618      	mov	r0, r3
 800151e:	370c      	adds	r7, #12
 8001520:	46bd      	mov	sp, r7
 8001522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001526:	4770      	bx	lr

08001528 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001532:	683b      	ldr	r3, [r7, #0]
 8001534:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001538:	605a      	str	r2, [r3, #4]
	return 0;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <_isatty>:

int _isatty(int file)
{
 8001548:	b480      	push	{r7}
 800154a:	b083      	sub	sp, #12
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
	return 1;
 8001550:	2301      	movs	r3, #1
}
 8001552:	4618      	mov	r0, r3
 8001554:	370c      	adds	r7, #12
 8001556:	46bd      	mov	sp, r7
 8001558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155c:	4770      	bx	lr

0800155e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800155e:	b480      	push	{r7}
 8001560:	b085      	sub	sp, #20
 8001562:	af00      	add	r7, sp, #0
 8001564:	60f8      	str	r0, [r7, #12]
 8001566:	60b9      	str	r1, [r7, #8]
 8001568:	607a      	str	r2, [r7, #4]
	return 0;
 800156a:	2300      	movs	r3, #0
}
 800156c:	4618      	mov	r0, r3
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b086      	sub	sp, #24
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001580:	4a14      	ldr	r2, [pc, #80]	; (80015d4 <_sbrk+0x5c>)
 8001582:	4b15      	ldr	r3, [pc, #84]	; (80015d8 <_sbrk+0x60>)
 8001584:	1ad3      	subs	r3, r2, r3
 8001586:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001588:	697b      	ldr	r3, [r7, #20]
 800158a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800158c:	4b13      	ldr	r3, [pc, #76]	; (80015dc <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d102      	bne.n	800159a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001594:	4b11      	ldr	r3, [pc, #68]	; (80015dc <_sbrk+0x64>)
 8001596:	4a12      	ldr	r2, [pc, #72]	; (80015e0 <_sbrk+0x68>)
 8001598:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800159a:	4b10      	ldr	r3, [pc, #64]	; (80015dc <_sbrk+0x64>)
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4413      	add	r3, r2
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	429a      	cmp	r2, r3
 80015a6:	d207      	bcs.n	80015b8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015a8:	f001 fd6c 	bl	8003084 <__errno>
 80015ac:	4602      	mov	r2, r0
 80015ae:	230c      	movs	r3, #12
 80015b0:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015b2:	f04f 33ff 	mov.w	r3, #4294967295
 80015b6:	e009      	b.n	80015cc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015b8:	4b08      	ldr	r3, [pc, #32]	; (80015dc <_sbrk+0x64>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015be:	4b07      	ldr	r3, [pc, #28]	; (80015dc <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	4a05      	ldr	r2, [pc, #20]	; (80015dc <_sbrk+0x64>)
 80015c8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ca:	68fb      	ldr	r3, [r7, #12]
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	3718      	adds	r7, #24
 80015d0:	46bd      	mov	sp, r7
 80015d2:	bd80      	pop	{r7, pc}
 80015d4:	20018000 	.word	0x20018000
 80015d8:	00000400 	.word	0x00000400
 80015dc:	200005ec 	.word	0x200005ec
 80015e0:	20000600 	.word	0x20000600

080015e4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015e8:	4b17      	ldr	r3, [pc, #92]	; (8001648 <SystemInit+0x64>)
 80015ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015ee:	4a16      	ldr	r2, [pc, #88]	; (8001648 <SystemInit+0x64>)
 80015f0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015f4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015f8:	4b14      	ldr	r3, [pc, #80]	; (800164c <SystemInit+0x68>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a13      	ldr	r2, [pc, #76]	; (800164c <SystemInit+0x68>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001604:	4b11      	ldr	r3, [pc, #68]	; (800164c <SystemInit+0x68>)
 8001606:	2200      	movs	r2, #0
 8001608:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800160a:	4b10      	ldr	r3, [pc, #64]	; (800164c <SystemInit+0x68>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a0f      	ldr	r2, [pc, #60]	; (800164c <SystemInit+0x68>)
 8001610:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001614:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001618:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800161a:	4b0c      	ldr	r3, [pc, #48]	; (800164c <SystemInit+0x68>)
 800161c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001620:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001622:	4b0a      	ldr	r3, [pc, #40]	; (800164c <SystemInit+0x68>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a09      	ldr	r2, [pc, #36]	; (800164c <SystemInit+0x68>)
 8001628:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800162c:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800162e:	4b07      	ldr	r3, [pc, #28]	; (800164c <SystemInit+0x68>)
 8001630:	2200      	movs	r2, #0
 8001632:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001634:	4b04      	ldr	r3, [pc, #16]	; (8001648 <SystemInit+0x64>)
 8001636:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800163a:	609a      	str	r2, [r3, #8]
#endif
}
 800163c:	bf00      	nop
 800163e:	46bd      	mov	sp, r7
 8001640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001644:	4770      	bx	lr
 8001646:	bf00      	nop
 8001648:	e000ed00 	.word	0xe000ed00
 800164c:	40021000 	.word	0x40021000

08001650 <LL_APB2_GRP1_EnableClock>:
{
 8001650:	b480      	push	{r7}
 8001652:	b085      	sub	sp, #20
 8001654:	af00      	add	r7, sp, #0
 8001656:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 800165a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800165c:	4907      	ldr	r1, [pc, #28]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	4313      	orrs	r3, r2
 8001662:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001664:	4b05      	ldr	r3, [pc, #20]	; (800167c <LL_APB2_GRP1_EnableClock+0x2c>)
 8001666:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	4013      	ands	r3, r2
 800166c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800166e:	68fb      	ldr	r3, [r7, #12]
}
 8001670:	bf00      	nop
 8001672:	3714      	adds	r7, #20
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr
 800167c:	40021000 	.word	0x40021000

08001680 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001680:	b480      	push	{r7}
 8001682:	b083      	sub	sp, #12
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	601a      	str	r2, [r3, #0]
}
 8001694:	bf00      	nop
 8001696:	370c      	adds	r7, #12
 8001698:	46bd      	mov	sp, r7
 800169a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169e:	4770      	bx	lr

080016a0 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80016b2:	f023 0307 	bic.w	r3, r3, #7
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	431a      	orrs	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	609a      	str	r2, [r3, #8]
}
 80016be:	bf00      	nop
 80016c0:	370c      	adds	r7, #12
 80016c2:	46bd      	mov	sp, r7
 80016c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c8:	4770      	bx	lr

080016ca <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80016ca:	b480      	push	{r7}
 80016cc:	b083      	sub	sp, #12
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	6078      	str	r0, [r7, #4]
 80016d2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	431a      	orrs	r2, r3
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	605a      	str	r2, [r3, #4]
}
 80016e4:	bf00      	nop
 80016e6:	370c      	adds	r7, #12
 80016e8:	46bd      	mov	sp, r7
 80016ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ee:	4770      	bx	lr

080016f0 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80016f0:	b480      	push	{r7}
 80016f2:	b083      	sub	sp, #12
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
 80016f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	685b      	ldr	r3, [r3, #4]
 80016fe:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001702:	683b      	ldr	r3, [r7, #0]
 8001704:	431a      	orrs	r2, r3
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	605a      	str	r2, [r3, #4]
}
 800170a:	bf00      	nop
 800170c:	370c      	adds	r7, #12
 800170e:	46bd      	mov	sp, r7
 8001710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001714:	4770      	bx	lr

08001716 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001716:	b480      	push	{r7}
 8001718:	b083      	sub	sp, #12
 800171a:	af00      	add	r7, sp, #0
 800171c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	609a      	str	r2, [r3, #8]
}
 800172a:	bf00      	nop
 800172c:	370c      	adds	r7, #12
 800172e:	46bd      	mov	sp, r7
 8001730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001734:	4770      	bx	lr
	...

08001738 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b086      	sub	sp, #24
 800173c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	2200      	movs	r2, #0
 8001742:	601a      	str	r2, [r3, #0]
 8001744:	605a      	str	r2, [r3, #4]
 8001746:	609a      	str	r2, [r3, #8]
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 800174c:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001750:	f7ff ff7e 	bl	8001650 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8001754:	230f      	movs	r3, #15
 8001756:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8001758:	2300      	movs	r3, #0
 800175a:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 800175c:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001760:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001762:	2300      	movs	r3, #0
 8001764:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001766:	2300      	movs	r3, #0
 8001768:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800176a:	1d3b      	adds	r3, r7, #4
 800176c:	4619      	mov	r1, r3
 800176e:	480c      	ldr	r0, [pc, #48]	; (80017a0 <MX_TIM1_Init+0x68>)
 8001770:	f001 faaa 	bl	8002cc8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001774:	480a      	ldr	r0, [pc, #40]	; (80017a0 <MX_TIM1_Init+0x68>)
 8001776:	f7ff ff83 	bl	8001680 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800177a:	2100      	movs	r1, #0
 800177c:	4808      	ldr	r0, [pc, #32]	; (80017a0 <MX_TIM1_Init+0x68>)
 800177e:	f7ff ff8f 	bl	80016a0 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001782:	2100      	movs	r1, #0
 8001784:	4806      	ldr	r0, [pc, #24]	; (80017a0 <MX_TIM1_Init+0x68>)
 8001786:	f7ff ffa0 	bl	80016ca <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800178a:	2100      	movs	r1, #0
 800178c:	4804      	ldr	r0, [pc, #16]	; (80017a0 <MX_TIM1_Init+0x68>)
 800178e:	f7ff ffaf 	bl	80016f0 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001792:	4803      	ldr	r0, [pc, #12]	; (80017a0 <MX_TIM1_Init+0x68>)
 8001794:	f7ff ffbf 	bl	8001716 <LL_TIM_DisableMasterSlaveMode>

}
 8001798:	bf00      	nop
 800179a:	3718      	adds	r7, #24
 800179c:	46bd      	mov	sp, r7
 800179e:	bd80      	pop	{r7, pc}
 80017a0:	40012c00 	.word	0x40012c00

080017a4 <__NVIC_GetPriorityGrouping>:
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017a8:	4b04      	ldr	r3, [pc, #16]	; (80017bc <__NVIC_GetPriorityGrouping+0x18>)
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	0a1b      	lsrs	r3, r3, #8
 80017ae:	f003 0307 	and.w	r3, r3, #7
}
 80017b2:	4618      	mov	r0, r3
 80017b4:	46bd      	mov	sp, r7
 80017b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ba:	4770      	bx	lr
 80017bc:	e000ed00 	.word	0xe000ed00

080017c0 <__NVIC_EnableIRQ>:
{
 80017c0:	b480      	push	{r7}
 80017c2:	b083      	sub	sp, #12
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	4603      	mov	r3, r0
 80017c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	db0b      	blt.n	80017ea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017d2:	79fb      	ldrb	r3, [r7, #7]
 80017d4:	f003 021f 	and.w	r2, r3, #31
 80017d8:	4907      	ldr	r1, [pc, #28]	; (80017f8 <__NVIC_EnableIRQ+0x38>)
 80017da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017de:	095b      	lsrs	r3, r3, #5
 80017e0:	2001      	movs	r0, #1
 80017e2:	fa00 f202 	lsl.w	r2, r0, r2
 80017e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017ea:	bf00      	nop
 80017ec:	370c      	adds	r7, #12
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	e000e100 	.word	0xe000e100

080017fc <__NVIC_SetPriority>:
{
 80017fc:	b480      	push	{r7}
 80017fe:	b083      	sub	sp, #12
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001808:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800180c:	2b00      	cmp	r3, #0
 800180e:	db0a      	blt.n	8001826 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	b2da      	uxtb	r2, r3
 8001814:	490c      	ldr	r1, [pc, #48]	; (8001848 <__NVIC_SetPriority+0x4c>)
 8001816:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800181a:	0112      	lsls	r2, r2, #4
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	440b      	add	r3, r1
 8001820:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001824:	e00a      	b.n	800183c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001826:	683b      	ldr	r3, [r7, #0]
 8001828:	b2da      	uxtb	r2, r3
 800182a:	4908      	ldr	r1, [pc, #32]	; (800184c <__NVIC_SetPriority+0x50>)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 030f 	and.w	r3, r3, #15
 8001832:	3b04      	subs	r3, #4
 8001834:	0112      	lsls	r2, r2, #4
 8001836:	b2d2      	uxtb	r2, r2
 8001838:	440b      	add	r3, r1
 800183a:	761a      	strb	r2, [r3, #24]
}
 800183c:	bf00      	nop
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr
 8001848:	e000e100 	.word	0xe000e100
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001850:	b480      	push	{r7}
 8001852:	b089      	sub	sp, #36	; 0x24
 8001854:	af00      	add	r7, sp, #0
 8001856:	60f8      	str	r0, [r7, #12]
 8001858:	60b9      	str	r1, [r7, #8]
 800185a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f003 0307 	and.w	r3, r3, #7
 8001862:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001864:	69fb      	ldr	r3, [r7, #28]
 8001866:	f1c3 0307 	rsb	r3, r3, #7
 800186a:	2b04      	cmp	r3, #4
 800186c:	bf28      	it	cs
 800186e:	2304      	movcs	r3, #4
 8001870:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001872:	69fb      	ldr	r3, [r7, #28]
 8001874:	3304      	adds	r3, #4
 8001876:	2b06      	cmp	r3, #6
 8001878:	d902      	bls.n	8001880 <NVIC_EncodePriority+0x30>
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3b03      	subs	r3, #3
 800187e:	e000      	b.n	8001882 <NVIC_EncodePriority+0x32>
 8001880:	2300      	movs	r3, #0
 8001882:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001884:	f04f 32ff 	mov.w	r2, #4294967295
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	fa02 f303 	lsl.w	r3, r2, r3
 800188e:	43da      	mvns	r2, r3
 8001890:	68bb      	ldr	r3, [r7, #8]
 8001892:	401a      	ands	r2, r3
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001898:	f04f 31ff 	mov.w	r1, #4294967295
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	fa01 f303 	lsl.w	r3, r1, r3
 80018a2:	43d9      	mvns	r1, r3
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018a8:	4313      	orrs	r3, r2
         );
}
 80018aa:	4618      	mov	r0, r3
 80018ac:	3724      	adds	r7, #36	; 0x24
 80018ae:	46bd      	mov	sp, r7
 80018b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b4:	4770      	bx	lr
	...

080018b8 <LL_AHB1_GRP1_EnableClock>:
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018c2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018c4:	4907      	ldr	r1, [pc, #28]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018cc:	4b05      	ldr	r3, [pc, #20]	; (80018e4 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	4013      	ands	r3, r2
 80018d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018d6:	68fb      	ldr	r3, [r7, #12]
}
 80018d8:	bf00      	nop
 80018da:	3714      	adds	r7, #20
 80018dc:	46bd      	mov	sp, r7
 80018de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e2:	4770      	bx	lr
 80018e4:	40021000 	.word	0x40021000

080018e8 <LL_AHB2_GRP1_EnableClock>:
{
 80018e8:	b480      	push	{r7}
 80018ea:	b085      	sub	sp, #20
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018f0:	4b08      	ldr	r3, [pc, #32]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018f4:	4907      	ldr	r1, [pc, #28]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	4313      	orrs	r3, r2
 80018fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	4013      	ands	r3, r2
 8001904:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001906:	68fb      	ldr	r3, [r7, #12]
}
 8001908:	bf00      	nop
 800190a:	3714      	adds	r7, #20
 800190c:	46bd      	mov	sp, r7
 800190e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001912:	4770      	bx	lr
 8001914:	40021000 	.word	0x40021000

08001918 <LL_APB1_GRP1_EnableClock>:
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 800192e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000

08001948 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f043 0201 	orr.w	r2, r3, #1
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	601a      	str	r2, [r3, #0]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001968:	b480      	push	{r7}
 800196a:	b083      	sub	sp, #12
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b08e      	sub	sp, #56	; 0x38
 8001998:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800199a:	f107 031c 	add.w	r3, r7, #28
 800199e:	2200      	movs	r2, #0
 80019a0:	601a      	str	r2, [r3, #0]
 80019a2:	605a      	str	r2, [r3, #4]
 80019a4:	609a      	str	r2, [r3, #8]
 80019a6:	60da      	str	r2, [r3, #12]
 80019a8:	611a      	str	r2, [r3, #16]
 80019aa:	615a      	str	r2, [r3, #20]
 80019ac:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80019be:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80019c2:	f7ff ffa9 	bl	8001918 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80019c6:	2001      	movs	r0, #1
 80019c8:	f7ff ff8e 	bl	80018e8 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019cc:	230c      	movs	r3, #12
 80019ce:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019d0:	2302      	movs	r3, #2
 80019d2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019d4:	2303      	movs	r3, #3
 80019d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019d8:	2300      	movs	r3, #0
 80019da:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019e0:	2307      	movs	r3, #7
 80019e2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019e4:	1d3b      	adds	r3, r7, #4
 80019e6:	4619      	mov	r1, r3
 80019e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019ec:	f000 fc95 	bl	800231a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80019f0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80019f4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019f6:	2300      	movs	r3, #0
 80019f8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019fe:	2300      	movs	r3, #0
 8001a00:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8001a02:	230c      	movs	r3, #12
 8001a04:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8001a06:	2300      	movs	r3, #0
 8001a08:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001a0e:	f107 031c 	add.w	r3, r7, #28
 8001a12:	4619      	mov	r1, r3
 8001a14:	4806      	ldr	r0, [pc, #24]	; (8001a30 <MX_USART2_UART_Init+0x9c>)
 8001a16:	f001 fa5b 	bl	8002ed0 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001a1a:	4805      	ldr	r0, [pc, #20]	; (8001a30 <MX_USART2_UART_Init+0x9c>)
 8001a1c:	f7ff ffa4 	bl	8001968 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001a20:	4803      	ldr	r0, [pc, #12]	; (8001a30 <MX_USART2_UART_Init+0x9c>)
 8001a22:	f7ff ff91 	bl	8001948 <LL_USART_Enable>

}
 8001a26:	bf00      	nop
 8001a28:	3738      	adds	r7, #56	; 0x38
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	bd80      	pop	{r7, pc}
 8001a2e:	bf00      	nop
 8001a30:	40004400 	.word	0x40004400

08001a34 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8001a34:	b480      	push	{r7}
 8001a36:	b083      	sub	sp, #12
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8001a3c:	bf00      	nop
 8001a3e:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <__io_putchar+0x38>)
 8001a40:	69db      	ldr	r3, [r3, #28]
 8001a42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d0f9      	beq.n	8001a3e <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8001a4a:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <__io_putchar+0x38>)
 8001a4c:	687a      	ldr	r2, [r7, #4]
 8001a4e:	b292      	uxth	r2, r2
 8001a50:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 8001a52:	bf00      	nop
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <__io_putchar+0x38>)
 8001a56:	69db      	ldr	r3, [r3, #28]
 8001a58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d0f9      	beq.n	8001a54 <__io_putchar+0x20>
#endif
}
 8001a60:	bf00      	nop
 8001a62:	370c      	adds	r7, #12
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr
 8001a6c:	40004400 	.word	0x40004400

08001a70 <__io_getchar>:

void __io_getchar(void){
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr
	...

08001a80 <startupPrint>:

void startupPrint(void){
 8001a80:	b580      	push	{r7, lr}
 8001a82:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001a84:	480b      	ldr	r0, [pc, #44]	; (8001ab4 <startupPrint+0x34>)
 8001a86:	f001 fba3 	bl	80031d0 <puts>
	printf("+==============================================================+\r\n");
 8001a8a:	480b      	ldr	r0, [pc, #44]	; (8001ab8 <startupPrint+0x38>)
 8001a8c:	f001 fba0 	bl	80031d0 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8001a90:	490a      	ldr	r1, [pc, #40]	; (8001abc <startupPrint+0x3c>)
 8001a92:	480b      	ldr	r0, [pc, #44]	; (8001ac0 <startupPrint+0x40>)
 8001a94:	f001 fb28 	bl	80030e8 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8001a98:	480a      	ldr	r0, [pc, #40]	; (8001ac4 <startupPrint+0x44>)
 8001a9a:	f001 fb99 	bl	80031d0 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8001a9e:	4b0a      	ldr	r3, [pc, #40]	; (8001ac8 <startupPrint+0x48>)
 8001aa0:	4a0a      	ldr	r2, [pc, #40]	; (8001acc <startupPrint+0x4c>)
 8001aa2:	490b      	ldr	r1, [pc, #44]	; (8001ad0 <startupPrint+0x50>)
 8001aa4:	480b      	ldr	r0, [pc, #44]	; (8001ad4 <startupPrint+0x54>)
 8001aa6:	f001 fb1f 	bl	80030e8 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8001aaa:	480b      	ldr	r0, [pc, #44]	; (8001ad8 <startupPrint+0x58>)
 8001aac:	f001 fb90 	bl	80031d0 <puts>
}
 8001ab0:	bf00      	nop
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	080041b0 	.word	0x080041b0
 8001ab8:	080041b4 	.word	0x080041b4
 8001abc:	080041f8 	.word	0x080041f8
 8001ac0:	08004220 	.word	0x08004220
 8001ac4:	0800422c 	.word	0x0800422c
 8001ac8:	08004270 	.word	0x08004270
 8001acc:	08004274 	.word	0x08004274
 8001ad0:	08004280 	.word	0x08004280
 8001ad4:	08004294 	.word	0x08004294
 8001ad8:	080042c0 	.word	0x080042c0

08001adc <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	460b      	mov	r3, r1
 8001ae6:	70fb      	strb	r3, [r7, #3]
 8001ae8:	4613      	mov	r3, r2
 8001aea:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8001af0:	2300      	movs	r3, #0
 8001af2:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8001af4:	78fb      	ldrb	r3, [r7, #3]
 8001af6:	029b      	lsls	r3, r3, #10
 8001af8:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 8001afa:	78fb      	ldrb	r3, [r7, #3]
 8001afc:	021b      	lsls	r3, r3, #8
 8001afe:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	4a1d      	ldr	r2, [pc, #116]	; (8001b78 <configureDMA_USART_TX+0x9c>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d132      	bne.n	8001b6e <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001b08:	2001      	movs	r0, #1
 8001b0a:	f7ff fed5 	bl	80018b8 <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	689b      	ldr	r3, [r3, #8]
 8001b12:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8001b1a:	4b18      	ldr	r3, [pc, #96]	; (8001b7c <configureDMA_USART_TX+0xa0>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a17      	ldr	r2, [pc, #92]	; (8001b7c <configureDMA_USART_TX+0xa0>)
 8001b20:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b24:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8001b26:	4b16      	ldr	r3, [pc, #88]	; (8001b80 <configureDMA_USART_TX+0xa4>)
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4a15      	ldr	r2, [pc, #84]	; (8001b80 <configureDMA_USART_TX+0xa4>)
 8001b2c:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001b30:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 8001b32:	4b14      	ldr	r3, [pc, #80]	; (8001b84 <configureDMA_USART_TX+0xa8>)
 8001b34:	4a14      	ldr	r2, [pc, #80]	; (8001b88 <configureDMA_USART_TX+0xac>)
 8001b36:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8001b38:	78ba      	ldrb	r2, [r7, #2]
 8001b3a:	697b      	ldr	r3, [r7, #20]
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8001b46:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8001b48:	4a0e      	ldr	r2, [pc, #56]	; (8001b84 <configureDMA_USART_TX+0xa8>)
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b4e:	f7ff fe29 	bl	80017a4 <__NVIC_GetPriorityGrouping>
 8001b52:	4603      	mov	r3, r0
 8001b54:	2200      	movs	r2, #0
 8001b56:	2100      	movs	r1, #0
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7ff fe79 	bl	8001850 <NVIC_EncodePriority>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	4619      	mov	r1, r3
 8001b62:	2011      	movs	r0, #17
 8001b64:	f7ff fe4a 	bl	80017fc <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001b68:	2011      	movs	r0, #17
 8001b6a:	f7ff fe29 	bl	80017c0 <__NVIC_EnableIRQ>
	}
}
 8001b6e:	bf00      	nop
 8001b70:	3718      	adds	r7, #24
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bd80      	pop	{r7, pc}
 8001b76:	bf00      	nop
 8001b78:	40004400 	.word	0x40004400
 8001b7c:	400200a8 	.word	0x400200a8
 8001b80:	40020000 	.word	0x40020000
 8001b84:	40020080 	.word	0x40020080
 8001b88:	40004428 	.word	0x40004428

08001b8c <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8001b8c:	b480      	push	{r7}
 8001b8e:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 8001b90:	4b17      	ldr	r3, [pc, #92]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8001b9c:	4b14      	ldr	r3, [pc, #80]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	4a13      	ldr	r2, [pc, #76]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001ba2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001ba6:	6053      	str	r3, [r2, #4]
		while(1);
 8001ba8:	e7fe      	b.n	8001ba8 <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8001baa:	4b11      	ldr	r3, [pc, #68]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d00b      	beq.n	8001bce <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8001bb6:	4b0e      	ldr	r3, [pc, #56]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	4a0d      	ldr	r2, [pc, #52]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001bbc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001bc0:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 8001bc2:	4b0c      	ldr	r3, [pc, #48]	; (8001bf4 <DMA1_Channel7_IRQHandler+0x68>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4a0b      	ldr	r2, [pc, #44]	; (8001bf4 <DMA1_Channel7_IRQHandler+0x68>)
 8001bc8:	f023 0301 	bic.w	r3, r3, #1
 8001bcc:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 8001bce:	4b08      	ldr	r3, [pc, #32]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d005      	beq.n	8001be6 <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 8001bda:	4b05      	ldr	r3, [pc, #20]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001bdc:	685b      	ldr	r3, [r3, #4]
 8001bde:	4a04      	ldr	r2, [pc, #16]	; (8001bf0 <DMA1_Channel7_IRQHandler+0x64>)
 8001be0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001be4:	6053      	str	r3, [r2, #4]
	}
}
 8001be6:	bf00      	nop
 8001be8:	46bd      	mov	sp, r7
 8001bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bee:	4770      	bx	lr
 8001bf0:	40020000 	.word	0x40020000
 8001bf4:	40020080 	.word	0x40020080

08001bf8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bf8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bfc:	f7ff fcf2 	bl	80015e4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001c00:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001c02:	e003      	b.n	8001c0c <LoopCopyDataInit>

08001c04 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001c04:	4b0b      	ldr	r3, [pc, #44]	; (8001c34 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001c06:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001c08:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001c0a:	3104      	adds	r1, #4

08001c0c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001c0c:	480a      	ldr	r0, [pc, #40]	; (8001c38 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001c0e:	4b0b      	ldr	r3, [pc, #44]	; (8001c3c <LoopForever+0xe>)
	adds	r2, r0, r1
 8001c10:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001c12:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001c14:	d3f6      	bcc.n	8001c04 <CopyDataInit>
	ldr	r2, =_sbss
 8001c16:	4a0a      	ldr	r2, [pc, #40]	; (8001c40 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001c18:	e002      	b.n	8001c20 <LoopFillZerobss>

08001c1a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001c1a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001c1c:	f842 3b04 	str.w	r3, [r2], #4

08001c20 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001c20:	4b08      	ldr	r3, [pc, #32]	; (8001c44 <LoopForever+0x16>)
	cmp	r2, r3
 8001c22:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001c24:	d3f9      	bcc.n	8001c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c26:	f001 fa33 	bl	8003090 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001c2a:	f7ff fadf 	bl	80011ec <main>

08001c2e <LoopForever>:

LoopForever:
    b LoopForever
 8001c2e:	e7fe      	b.n	8001c2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c30:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c34:	080043ec 	.word	0x080043ec
	ldr	r0, =_sdata
 8001c38:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c3c:	200005bc 	.word	0x200005bc
	ldr	r2, =_sbss
 8001c40:	200005bc 	.word	0x200005bc
	ldr	r3, = _ebss
 8001c44:	20000600 	.word	0x20000600

08001c48 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c48:	e7fe      	b.n	8001c48 <ADC1_2_IRQHandler>
	...

08001c4c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c54:	4b05      	ldr	r3, [pc, #20]	; (8001c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4904      	ldr	r1, [pc, #16]	; (8001c6c <LL_EXTI_EnableIT_0_31+0x20>)
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	4313      	orrs	r3, r2
 8001c5e:	600b      	str	r3, [r1, #0]
}
 8001c60:	bf00      	nop
 8001c62:	370c      	adds	r7, #12
 8001c64:	46bd      	mov	sp, r7
 8001c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6a:	4770      	bx	lr
 8001c6c:	40010400 	.word	0x40010400

08001c70 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c78:	4b05      	ldr	r3, [pc, #20]	; (8001c90 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c7a:	6a1a      	ldr	r2, [r3, #32]
 8001c7c:	4904      	ldr	r1, [pc, #16]	; (8001c90 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	4313      	orrs	r3, r2
 8001c82:	620b      	str	r3, [r1, #32]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	40010400 	.word	0x40010400

08001c94 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001c9c:	4b06      	ldr	r3, [pc, #24]	; (8001cb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	43db      	mvns	r3, r3
 8001ca4:	4904      	ldr	r1, [pc, #16]	; (8001cb8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001ca6:	4013      	ands	r3, r2
 8001ca8:	600b      	str	r3, [r1, #0]
}
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40010400 	.word	0x40010400

08001cbc <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b083      	sub	sp, #12
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001cc4:	4b06      	ldr	r3, [pc, #24]	; (8001ce0 <LL_EXTI_DisableIT_32_63+0x24>)
 8001cc6:	6a1a      	ldr	r2, [r3, #32]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	43db      	mvns	r3, r3
 8001ccc:	4904      	ldr	r1, [pc, #16]	; (8001ce0 <LL_EXTI_DisableIT_32_63+0x24>)
 8001cce:	4013      	ands	r3, r2
 8001cd0:	620b      	str	r3, [r1, #32]
}
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	40010400 	.word	0x40010400

08001ce4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001cec:	4b05      	ldr	r3, [pc, #20]	; (8001d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cee:	685a      	ldr	r2, [r3, #4]
 8001cf0:	4904      	ldr	r1, [pc, #16]	; (8001d04 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	4313      	orrs	r3, r2
 8001cf6:	604b      	str	r3, [r1, #4]

}
 8001cf8:	bf00      	nop
 8001cfa:	370c      	adds	r7, #12
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr
 8001d04:	40010400 	.word	0x40010400

08001d08 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001d10:	4b05      	ldr	r3, [pc, #20]	; (8001d28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001d12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d14:	4904      	ldr	r1, [pc, #16]	; (8001d28 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr
 8001d28:	40010400 	.word	0x40010400

08001d2c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001d34:	4b06      	ldr	r3, [pc, #24]	; (8001d50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001d36:	685a      	ldr	r2, [r3, #4]
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	43db      	mvns	r3, r3
 8001d3c:	4904      	ldr	r1, [pc, #16]	; (8001d50 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001d3e:	4013      	ands	r3, r2
 8001d40:	604b      	str	r3, [r1, #4]
}
 8001d42:	bf00      	nop
 8001d44:	370c      	adds	r7, #12
 8001d46:	46bd      	mov	sp, r7
 8001d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4c:	4770      	bx	lr
 8001d4e:	bf00      	nop
 8001d50:	40010400 	.word	0x40010400

08001d54 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001d54:	b480      	push	{r7}
 8001d56:	b083      	sub	sp, #12
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001d5c:	4b06      	ldr	r3, [pc, #24]	; (8001d78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d5e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	43db      	mvns	r3, r3
 8001d64:	4904      	ldr	r1, [pc, #16]	; (8001d78 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d66:	4013      	ands	r3, r2
 8001d68:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d6a:	bf00      	nop
 8001d6c:	370c      	adds	r7, #12
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40010400 	.word	0x40010400

08001d7c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d86:	689a      	ldr	r2, [r3, #8]
 8001d88:	4904      	ldr	r1, [pc, #16]	; (8001d9c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	608b      	str	r3, [r1, #8]

}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr
 8001d9c:	40010400 	.word	0x40010400

08001da0 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001da8:	4b05      	ldr	r3, [pc, #20]	; (8001dc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001daa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dac:	4904      	ldr	r1, [pc, #16]	; (8001dc0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001db4:	bf00      	nop
 8001db6:	370c      	adds	r7, #12
 8001db8:	46bd      	mov	sp, r7
 8001dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dbe:	4770      	bx	lr
 8001dc0:	40010400 	.word	0x40010400

08001dc4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001dcc:	4b06      	ldr	r3, [pc, #24]	; (8001de8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001dce:	689a      	ldr	r2, [r3, #8]
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	43db      	mvns	r3, r3
 8001dd4:	4904      	ldr	r1, [pc, #16]	; (8001de8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001dd6:	4013      	ands	r3, r2
 8001dd8:	608b      	str	r3, [r1, #8]

}
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	40010400 	.word	0x40010400

08001dec <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001df4:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001df6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	43db      	mvns	r3, r3
 8001dfc:	4904      	ldr	r1, [pc, #16]	; (8001e10 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001dfe:	4013      	ands	r3, r2
 8001e00:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40010400 	.word	0x40010400

08001e14 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001e14:	b480      	push	{r7}
 8001e16:	b083      	sub	sp, #12
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001e1e:	68da      	ldr	r2, [r3, #12]
 8001e20:	4904      	ldr	r1, [pc, #16]	; (8001e34 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	4313      	orrs	r3, r2
 8001e26:	60cb      	str	r3, [r1, #12]
}
 8001e28:	bf00      	nop
 8001e2a:	370c      	adds	r7, #12
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e32:	4770      	bx	lr
 8001e34:	40010400 	.word	0x40010400

08001e38 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b083      	sub	sp, #12
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001e40:	4b05      	ldr	r3, [pc, #20]	; (8001e58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001e42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e44:	4904      	ldr	r1, [pc, #16]	; (8001e58 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e4c:	bf00      	nop
 8001e4e:	370c      	adds	r7, #12
 8001e50:	46bd      	mov	sp, r7
 8001e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e56:	4770      	bx	lr
 8001e58:	40010400 	.word	0x40010400

08001e5c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b083      	sub	sp, #12
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001e64:	4b06      	ldr	r3, [pc, #24]	; (8001e80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e66:	68da      	ldr	r2, [r3, #12]
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	4904      	ldr	r1, [pc, #16]	; (8001e80 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e6e:	4013      	ands	r3, r2
 8001e70:	60cb      	str	r3, [r1, #12]
}
 8001e72:	bf00      	nop
 8001e74:	370c      	adds	r7, #12
 8001e76:	46bd      	mov	sp, r7
 8001e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e7c:	4770      	bx	lr
 8001e7e:	bf00      	nop
 8001e80:	40010400 	.word	0x40010400

08001e84 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001e84:	b480      	push	{r7}
 8001e86:	b083      	sub	sp, #12
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001e8c:	4b06      	ldr	r3, [pc, #24]	; (8001ea8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	43db      	mvns	r3, r3
 8001e94:	4904      	ldr	r1, [pc, #16]	; (8001ea8 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e96:	4013      	ands	r3, r2
 8001e98:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40010400 	.word	0x40010400

08001eac <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	7a1b      	ldrb	r3, [r3, #8]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	f000 80c6 	beq.w	800204e <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d05d      	beq.n	8001f86 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	7a5b      	ldrb	r3, [r3, #9]
 8001ece:	2b01      	cmp	r3, #1
 8001ed0:	d00e      	beq.n	8001ef0 <LL_EXTI_Init+0x44>
 8001ed2:	2b02      	cmp	r3, #2
 8001ed4:	d017      	beq.n	8001f06 <LL_EXTI_Init+0x5a>
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d120      	bne.n	8001f1c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff ff24 	bl	8001d2c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff feaf 	bl	8001c4c <LL_EXTI_EnableIT_0_31>
          break;
 8001eee:	e018      	b.n	8001f22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	f7ff fecd 	bl	8001c94 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	4618      	mov	r0, r3
 8001f00:	f7ff fef0 	bl	8001ce4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001f04:	e00d      	b.n	8001f22 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f7ff fe9e 	bl	8001c4c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4618      	mov	r0, r3
 8001f16:	f7ff fee5 	bl	8001ce4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001f1a:	e002      	b.n	8001f22 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001f1c:	2301      	movs	r3, #1
 8001f1e:	60fb      	str	r3, [r7, #12]
          break;
 8001f20:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	7a9b      	ldrb	r3, [r3, #10]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d02d      	beq.n	8001f86 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	7a9b      	ldrb	r3, [r3, #10]
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d00e      	beq.n	8001f50 <LL_EXTI_Init+0xa4>
 8001f32:	2b03      	cmp	r3, #3
 8001f34:	d017      	beq.n	8001f66 <LL_EXTI_Init+0xba>
 8001f36:	2b01      	cmp	r3, #1
 8001f38:	d120      	bne.n	8001f7c <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff8c 	bl	8001e5c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff17 	bl	8001d7c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001f4e:	e01b      	b.n	8001f88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff ff35 	bl	8001dc4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	4618      	mov	r0, r3
 8001f60:	f7ff ff58 	bl	8001e14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f64:	e010      	b.n	8001f88 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7ff ff06 	bl	8001d7c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f7ff ff4d 	bl	8001e14 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f7a:	e005      	b.n	8001f88 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	f043 0302 	orr.w	r3, r3, #2
 8001f82:	60fb      	str	r3, [r7, #12]
            break;
 8001f84:	e000      	b.n	8001f88 <LL_EXTI_Init+0xdc>
        }
      }
 8001f86:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d073      	beq.n	8002078 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	7a5b      	ldrb	r3, [r3, #9]
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d00e      	beq.n	8001fb6 <LL_EXTI_Init+0x10a>
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d017      	beq.n	8001fcc <LL_EXTI_Init+0x120>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d120      	bne.n	8001fe2 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fed5 	bl	8001d54 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe5e 	bl	8001c70 <LL_EXTI_EnableIT_32_63>
          break;
 8001fb4:	e01a      	b.n	8001fec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	685b      	ldr	r3, [r3, #4]
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f7ff fe7e 	bl	8001cbc <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	f7ff fe9f 	bl	8001d08 <LL_EXTI_EnableEvent_32_63>
          break;
 8001fca:	e00f      	b.n	8001fec <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685b      	ldr	r3, [r3, #4]
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	f7ff fe4d 	bl	8001c70 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	685b      	ldr	r3, [r3, #4]
 8001fda:	4618      	mov	r0, r3
 8001fdc:	f7ff fe94 	bl	8001d08 <LL_EXTI_EnableEvent_32_63>
          break;
 8001fe0:	e004      	b.n	8001fec <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	f043 0304 	orr.w	r3, r3, #4
 8001fe8:	60fb      	str	r3, [r7, #12]
          break;
 8001fea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	7a9b      	ldrb	r3, [r3, #10]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d041      	beq.n	8002078 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	7a9b      	ldrb	r3, [r3, #10]
 8001ff8:	2b02      	cmp	r3, #2
 8001ffa:	d00e      	beq.n	800201a <LL_EXTI_Init+0x16e>
 8001ffc:	2b03      	cmp	r3, #3
 8001ffe:	d017      	beq.n	8002030 <LL_EXTI_Init+0x184>
 8002000:	2b01      	cmp	r3, #1
 8002002:	d120      	bne.n	8002046 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff ff3b 	bl	8001e84 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fec4 	bl	8001da0 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002018:	e02f      	b.n	800207a <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	4618      	mov	r0, r3
 8002020:	f7ff fee4 	bl	8001dec <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	4618      	mov	r0, r3
 800202a:	f7ff ff05 	bl	8001e38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800202e:	e024      	b.n	800207a <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	685b      	ldr	r3, [r3, #4]
 8002034:	4618      	mov	r0, r3
 8002036:	f7ff feb3 	bl	8001da0 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	685b      	ldr	r3, [r3, #4]
 800203e:	4618      	mov	r0, r3
 8002040:	f7ff fefa 	bl	8001e38 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002044:	e019      	b.n	800207a <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8002046:	2301      	movs	r3, #1
 8002048:	60fb      	str	r3, [r7, #12]
            break;
 800204a:	bf00      	nop
 800204c:	e015      	b.n	800207a <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff fe1e 	bl	8001c94 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4618      	mov	r0, r3
 800205e:	f7ff fe65 	bl	8001d2c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff fe28 	bl	8001cbc <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4618      	mov	r0, r3
 8002072:	f7ff fe6f 	bl	8001d54 <LL_EXTI_DisableEvent_32_63>
 8002076:	e000      	b.n	800207a <LL_EXTI_Init+0x1ce>
      }
 8002078:	bf00      	nop
  }

  return status;
 800207a:	68fb      	ldr	r3, [r7, #12]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3710      	adds	r7, #16
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <LL_GPIO_SetPinMode>:
{
 8002084:	b480      	push	{r7}
 8002086:	b08b      	sub	sp, #44	; 0x2c
 8002088:	af00      	add	r7, sp, #0
 800208a:	60f8      	str	r0, [r7, #12]
 800208c:	60b9      	str	r1, [r7, #8]
 800208e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	68bb      	ldr	r3, [r7, #8]
 8002096:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	fa93 f3a3 	rbit	r3, r3
 800209e:	613b      	str	r3, [r7, #16]
  return result;
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80020a4:	69bb      	ldr	r3, [r7, #24]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d101      	bne.n	80020ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80020aa:	2320      	movs	r3, #32
 80020ac:	e003      	b.n	80020b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80020ae:	69bb      	ldr	r3, [r7, #24]
 80020b0:	fab3 f383 	clz	r3, r3
 80020b4:	b2db      	uxtb	r3, r3
 80020b6:	005b      	lsls	r3, r3, #1
 80020b8:	2103      	movs	r1, #3
 80020ba:	fa01 f303 	lsl.w	r3, r1, r3
 80020be:	43db      	mvns	r3, r3
 80020c0:	401a      	ands	r2, r3
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020c6:	6a3b      	ldr	r3, [r7, #32]
 80020c8:	fa93 f3a3 	rbit	r3, r3
 80020cc:	61fb      	str	r3, [r7, #28]
  return result;
 80020ce:	69fb      	ldr	r3, [r7, #28]
 80020d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d101      	bne.n	80020dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80020d8:	2320      	movs	r3, #32
 80020da:	e003      	b.n	80020e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80020dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020de:	fab3 f383 	clz	r3, r3
 80020e2:	b2db      	uxtb	r3, r3
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	6879      	ldr	r1, [r7, #4]
 80020e8:	fa01 f303 	lsl.w	r3, r1, r3
 80020ec:	431a      	orrs	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	601a      	str	r2, [r3, #0]
}
 80020f2:	bf00      	nop
 80020f4:	372c      	adds	r7, #44	; 0x2c
 80020f6:	46bd      	mov	sp, r7
 80020f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fc:	4770      	bx	lr

080020fe <LL_GPIO_SetPinOutputType>:
{
 80020fe:	b480      	push	{r7}
 8002100:	b085      	sub	sp, #20
 8002102:	af00      	add	r7, sp, #0
 8002104:	60f8      	str	r0, [r7, #12]
 8002106:	60b9      	str	r1, [r7, #8]
 8002108:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	685a      	ldr	r2, [r3, #4]
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	43db      	mvns	r3, r3
 8002112:	401a      	ands	r2, r3
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	fb01 f303 	mul.w	r3, r1, r3
 800211c:	431a      	orrs	r2, r3
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	605a      	str	r2, [r3, #4]
}
 8002122:	bf00      	nop
 8002124:	3714      	adds	r7, #20
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr

0800212e <LL_GPIO_SetPinSpeed>:
{
 800212e:	b480      	push	{r7}
 8002130:	b08b      	sub	sp, #44	; 0x2c
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	689a      	ldr	r2, [r3, #8]
 800213e:	68bb      	ldr	r3, [r7, #8]
 8002140:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002142:	697b      	ldr	r3, [r7, #20]
 8002144:	fa93 f3a3 	rbit	r3, r3
 8002148:	613b      	str	r3, [r7, #16]
  return result;
 800214a:	693b      	ldr	r3, [r7, #16]
 800214c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800214e:	69bb      	ldr	r3, [r7, #24]
 8002150:	2b00      	cmp	r3, #0
 8002152:	d101      	bne.n	8002158 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002154:	2320      	movs	r3, #32
 8002156:	e003      	b.n	8002160 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	fab3 f383 	clz	r3, r3
 800215e:	b2db      	uxtb	r3, r3
 8002160:	005b      	lsls	r3, r3, #1
 8002162:	2103      	movs	r1, #3
 8002164:	fa01 f303 	lsl.w	r3, r1, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	401a      	ands	r2, r3
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002170:	6a3b      	ldr	r3, [r7, #32]
 8002172:	fa93 f3a3 	rbit	r3, r3
 8002176:	61fb      	str	r3, [r7, #28]
  return result;
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800217c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800217e:	2b00      	cmp	r3, #0
 8002180:	d101      	bne.n	8002186 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002182:	2320      	movs	r3, #32
 8002184:	e003      	b.n	800218e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002188:	fab3 f383 	clz	r3, r3
 800218c:	b2db      	uxtb	r3, r3
 800218e:	005b      	lsls	r3, r3, #1
 8002190:	6879      	ldr	r1, [r7, #4]
 8002192:	fa01 f303 	lsl.w	r3, r1, r3
 8002196:	431a      	orrs	r2, r3
 8002198:	68fb      	ldr	r3, [r7, #12]
 800219a:	609a      	str	r2, [r3, #8]
}
 800219c:	bf00      	nop
 800219e:	372c      	adds	r7, #44	; 0x2c
 80021a0:	46bd      	mov	sp, r7
 80021a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a6:	4770      	bx	lr

080021a8 <LL_GPIO_SetPinPull>:
{
 80021a8:	b480      	push	{r7}
 80021aa:	b08b      	sub	sp, #44	; 0x2c
 80021ac:	af00      	add	r7, sp, #0
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	68da      	ldr	r2, [r3, #12]
 80021b8:	68bb      	ldr	r3, [r7, #8]
 80021ba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	fa93 f3a3 	rbit	r3, r3
 80021c2:	613b      	str	r3, [r7, #16]
  return result;
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80021c8:	69bb      	ldr	r3, [r7, #24]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80021ce:	2320      	movs	r3, #32
 80021d0:	e003      	b.n	80021da <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80021d2:	69bb      	ldr	r3, [r7, #24]
 80021d4:	fab3 f383 	clz	r3, r3
 80021d8:	b2db      	uxtb	r3, r3
 80021da:	005b      	lsls	r3, r3, #1
 80021dc:	2103      	movs	r1, #3
 80021de:	fa01 f303 	lsl.w	r3, r1, r3
 80021e2:	43db      	mvns	r3, r3
 80021e4:	401a      	ands	r2, r3
 80021e6:	68bb      	ldr	r3, [r7, #8]
 80021e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ea:	6a3b      	ldr	r3, [r7, #32]
 80021ec:	fa93 f3a3 	rbit	r3, r3
 80021f0:	61fb      	str	r3, [r7, #28]
  return result;
 80021f2:	69fb      	ldr	r3, [r7, #28]
 80021f4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d101      	bne.n	8002200 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80021fc:	2320      	movs	r3, #32
 80021fe:	e003      	b.n	8002208 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002202:	fab3 f383 	clz	r3, r3
 8002206:	b2db      	uxtb	r3, r3
 8002208:	005b      	lsls	r3, r3, #1
 800220a:	6879      	ldr	r1, [r7, #4]
 800220c:	fa01 f303 	lsl.w	r3, r1, r3
 8002210:	431a      	orrs	r2, r3
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	60da      	str	r2, [r3, #12]
}
 8002216:	bf00      	nop
 8002218:	372c      	adds	r7, #44	; 0x2c
 800221a:	46bd      	mov	sp, r7
 800221c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002220:	4770      	bx	lr

08002222 <LL_GPIO_SetAFPin_0_7>:
{
 8002222:	b480      	push	{r7}
 8002224:	b08b      	sub	sp, #44	; 0x2c
 8002226:	af00      	add	r7, sp, #0
 8002228:	60f8      	str	r0, [r7, #12]
 800222a:	60b9      	str	r1, [r7, #8]
 800222c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	6a1a      	ldr	r2, [r3, #32]
 8002232:	68bb      	ldr	r3, [r7, #8]
 8002234:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002236:	697b      	ldr	r3, [r7, #20]
 8002238:	fa93 f3a3 	rbit	r3, r3
 800223c:	613b      	str	r3, [r7, #16]
  return result;
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002242:	69bb      	ldr	r3, [r7, #24]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8002248:	2320      	movs	r3, #32
 800224a:	e003      	b.n	8002254 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 800224c:	69bb      	ldr	r3, [r7, #24]
 800224e:	fab3 f383 	clz	r3, r3
 8002252:	b2db      	uxtb	r3, r3
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	210f      	movs	r1, #15
 8002258:	fa01 f303 	lsl.w	r3, r1, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	401a      	ands	r2, r3
 8002260:	68bb      	ldr	r3, [r7, #8]
 8002262:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002264:	6a3b      	ldr	r3, [r7, #32]
 8002266:	fa93 f3a3 	rbit	r3, r3
 800226a:	61fb      	str	r3, [r7, #28]
  return result;
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002272:	2b00      	cmp	r3, #0
 8002274:	d101      	bne.n	800227a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8002276:	2320      	movs	r3, #32
 8002278:	e003      	b.n	8002282 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800227a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800227c:	fab3 f383 	clz	r3, r3
 8002280:	b2db      	uxtb	r3, r3
 8002282:	009b      	lsls	r3, r3, #2
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	fa01 f303 	lsl.w	r3, r1, r3
 800228a:	431a      	orrs	r2, r3
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	621a      	str	r2, [r3, #32]
}
 8002290:	bf00      	nop
 8002292:	372c      	adds	r7, #44	; 0x2c
 8002294:	46bd      	mov	sp, r7
 8002296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229a:	4770      	bx	lr

0800229c <LL_GPIO_SetAFPin_8_15>:
{
 800229c:	b480      	push	{r7}
 800229e:	b08b      	sub	sp, #44	; 0x2c
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	60f8      	str	r0, [r7, #12]
 80022a4:	60b9      	str	r1, [r7, #8]
 80022a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80022ac:	68bb      	ldr	r3, [r7, #8]
 80022ae:	0a1b      	lsrs	r3, r3, #8
 80022b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	697b      	ldr	r3, [r7, #20]
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	613b      	str	r3, [r7, #16]
  return result;
 80022ba:	693b      	ldr	r3, [r7, #16]
 80022bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80022c8:	69bb      	ldr	r3, [r7, #24]
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	210f      	movs	r1, #15
 80022d4:	fa01 f303 	lsl.w	r3, r1, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	401a      	ands	r2, r3
 80022dc:	68bb      	ldr	r3, [r7, #8]
 80022de:	0a1b      	lsrs	r3, r3, #8
 80022e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022e2:	6a3b      	ldr	r3, [r7, #32]
 80022e4:	fa93 f3a3 	rbit	r3, r3
 80022e8:	61fb      	str	r3, [r7, #28]
  return result;
 80022ea:	69fb      	ldr	r3, [r7, #28]
 80022ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80022f4:	2320      	movs	r3, #32
 80022f6:	e003      	b.n	8002300 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80022f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022fa:	fab3 f383 	clz	r3, r3
 80022fe:	b2db      	uxtb	r3, r3
 8002300:	009b      	lsls	r3, r3, #2
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	fa01 f303 	lsl.w	r3, r1, r3
 8002308:	431a      	orrs	r2, r3
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800230e:	bf00      	nop
 8002310:	372c      	adds	r7, #44	; 0x2c
 8002312:	46bd      	mov	sp, r7
 8002314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002318:	4770      	bx	lr

0800231a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800231a:	b580      	push	{r7, lr}
 800231c:	b088      	sub	sp, #32
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
 8002322:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8002324:	683b      	ldr	r3, [r7, #0]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	fa93 f3a3 	rbit	r3, r3
 8002330:	60fb      	str	r3, [r7, #12]
  return result;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002336:	697b      	ldr	r3, [r7, #20]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <LL_GPIO_Init+0x26>
    return 32U;
 800233c:	2320      	movs	r3, #32
 800233e:	e003      	b.n	8002348 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	fab3 f383 	clz	r3, r3
 8002346:	b2db      	uxtb	r3, r3
 8002348:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800234a:	e040      	b.n	80023ce <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	681a      	ldr	r2, [r3, #0]
 8002350:	2101      	movs	r1, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa01 f303 	lsl.w	r3, r1, r3
 8002358:	4013      	ands	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d032      	beq.n	80023c8 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	461a      	mov	r2, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff fe8a 	bl	8002084 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b01      	cmp	r3, #1
 8002376:	d003      	beq.n	8002380 <LL_GPIO_Init+0x66>
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	2b02      	cmp	r3, #2
 800237e:	d106      	bne.n	800238e <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	689b      	ldr	r3, [r3, #8]
 8002384:	461a      	mov	r2, r3
 8002386:	69b9      	ldr	r1, [r7, #24]
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	f7ff fed0 	bl	800212e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	461a      	mov	r2, r3
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff06 	bl	80021a8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b02      	cmp	r3, #2
 80023a2:	d111      	bne.n	80023c8 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 80023a4:	69bb      	ldr	r3, [r7, #24]
 80023a6:	2bff      	cmp	r3, #255	; 0xff
 80023a8:	d807      	bhi.n	80023ba <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	695b      	ldr	r3, [r3, #20]
 80023ae:	461a      	mov	r2, r3
 80023b0:	69b9      	ldr	r1, [r7, #24]
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ff35 	bl	8002222 <LL_GPIO_SetAFPin_0_7>
 80023b8:	e006      	b.n	80023c8 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80023ba:	683b      	ldr	r3, [r7, #0]
 80023bc:	695b      	ldr	r3, [r3, #20]
 80023be:	461a      	mov	r2, r3
 80023c0:	69b9      	ldr	r1, [r7, #24]
 80023c2:	6878      	ldr	r0, [r7, #4]
 80023c4:	f7ff ff6a 	bl	800229c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80023c8:	69fb      	ldr	r3, [r7, #28]
 80023ca:	3301      	adds	r3, #1
 80023cc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80023ce:	683b      	ldr	r3, [r7, #0]
 80023d0:	681a      	ldr	r2, [r3, #0]
 80023d2:	69fb      	ldr	r3, [r7, #28]
 80023d4:	fa22 f303 	lsr.w	r3, r2, r3
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1b7      	bne.n	800234c <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b01      	cmp	r3, #1
 80023e2:	d003      	beq.n	80023ec <LL_GPIO_Init+0xd2>
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	685b      	ldr	r3, [r3, #4]
 80023e8:	2b02      	cmp	r3, #2
 80023ea:	d107      	bne.n	80023fc <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	6819      	ldr	r1, [r3, #0]
 80023f0:	683b      	ldr	r3, [r7, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	461a      	mov	r2, r3
 80023f6:	6878      	ldr	r0, [r7, #4]
 80023f8:	f7ff fe81 	bl	80020fe <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80023fc:	2300      	movs	r3, #0
}
 80023fe:	4618      	mov	r0, r3
 8002400:	3720      	adds	r7, #32
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
	...

08002408 <LL_RCC_HSI_IsReady>:
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800240c:	4b07      	ldr	r3, [pc, #28]	; (800242c <LL_RCC_HSI_IsReady+0x24>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002414:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002418:	d101      	bne.n	800241e <LL_RCC_HSI_IsReady+0x16>
 800241a:	2301      	movs	r3, #1
 800241c:	e000      	b.n	8002420 <LL_RCC_HSI_IsReady+0x18>
 800241e:	2300      	movs	r3, #0
}
 8002420:	4618      	mov	r0, r3
 8002422:	46bd      	mov	sp, r7
 8002424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002428:	4770      	bx	lr
 800242a:	bf00      	nop
 800242c:	40021000 	.word	0x40021000

08002430 <LL_RCC_LSE_IsReady>:
{
 8002430:	b480      	push	{r7}
 8002432:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002434:	4b07      	ldr	r3, [pc, #28]	; (8002454 <LL_RCC_LSE_IsReady+0x24>)
 8002436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800243a:	f003 0302 	and.w	r3, r3, #2
 800243e:	2b02      	cmp	r3, #2
 8002440:	d101      	bne.n	8002446 <LL_RCC_LSE_IsReady+0x16>
 8002442:	2301      	movs	r3, #1
 8002444:	e000      	b.n	8002448 <LL_RCC_LSE_IsReady+0x18>
 8002446:	2300      	movs	r3, #0
}
 8002448:	4618      	mov	r0, r3
 800244a:	46bd      	mov	sp, r7
 800244c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002450:	4770      	bx	lr
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 800245c:	4b06      	ldr	r3, [pc, #24]	; (8002478 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f003 0308 	and.w	r3, r3, #8
 8002464:	2b08      	cmp	r3, #8
 8002466:	d101      	bne.n	800246c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8002468:	2301      	movs	r3, #1
 800246a:	e000      	b.n	800246e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	46bd      	mov	sp, r7
 8002472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002476:	4770      	bx	lr
 8002478:	40021000 	.word	0x40021000

0800247c <LL_RCC_MSI_GetRange>:
{
 800247c:	b480      	push	{r7}
 800247e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002480:	4b04      	ldr	r3, [pc, #16]	; (8002494 <LL_RCC_MSI_GetRange+0x18>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002488:	4618      	mov	r0, r3
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr
 8002492:	bf00      	nop
 8002494:	40021000 	.word	0x40021000

08002498 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800249c:	4b04      	ldr	r3, [pc, #16]	; (80024b0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800249e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024a2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	46bd      	mov	sp, r7
 80024aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ae:	4770      	bx	lr
 80024b0:	40021000 	.word	0x40021000

080024b4 <LL_RCC_GetSysClkSource>:
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <LL_RCC_GetSysClkSource+0x18>)
 80024ba:	689b      	ldr	r3, [r3, #8]
 80024bc:	f003 030c 	and.w	r3, r3, #12
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	40021000 	.word	0x40021000

080024d0 <LL_RCC_GetAHBPrescaler>:
{
 80024d0:	b480      	push	{r7}
 80024d2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024d4:	4b04      	ldr	r3, [pc, #16]	; (80024e8 <LL_RCC_GetAHBPrescaler+0x18>)
 80024d6:	689b      	ldr	r3, [r3, #8]
 80024d8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024dc:	4618      	mov	r0, r3
 80024de:	46bd      	mov	sp, r7
 80024e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e4:	4770      	bx	lr
 80024e6:	bf00      	nop
 80024e8:	40021000 	.word	0x40021000

080024ec <LL_RCC_GetAPB1Prescaler>:
{
 80024ec:	b480      	push	{r7}
 80024ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024f0:	4b04      	ldr	r3, [pc, #16]	; (8002504 <LL_RCC_GetAPB1Prescaler+0x18>)
 80024f2:	689b      	ldr	r3, [r3, #8]
 80024f4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	46bd      	mov	sp, r7
 80024fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002500:	4770      	bx	lr
 8002502:	bf00      	nop
 8002504:	40021000 	.word	0x40021000

08002508 <LL_RCC_GetAPB2Prescaler>:
{
 8002508:	b480      	push	{r7}
 800250a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <LL_RCC_GetAPB2Prescaler+0x18>)
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002514:	4618      	mov	r0, r3
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000

08002524 <LL_RCC_GetUSARTClockSource>:
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800252c:	4b06      	ldr	r3, [pc, #24]	; (8002548 <LL_RCC_GetUSARTClockSource+0x24>)
 800252e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	401a      	ands	r2, r3
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	041b      	lsls	r3, r3, #16
 800253a:	4313      	orrs	r3, r2
}
 800253c:	4618      	mov	r0, r3
 800253e:	370c      	adds	r7, #12
 8002540:	46bd      	mov	sp, r7
 8002542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002546:	4770      	bx	lr
 8002548:	40021000 	.word	0x40021000

0800254c <LL_RCC_GetUARTClockSource>:
{
 800254c:	b480      	push	{r7}
 800254e:	b083      	sub	sp, #12
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002554:	4b06      	ldr	r3, [pc, #24]	; (8002570 <LL_RCC_GetUARTClockSource+0x24>)
 8002556:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	401a      	ands	r2, r3
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	041b      	lsls	r3, r3, #16
 8002562:	4313      	orrs	r3, r2
}
 8002564:	4618      	mov	r0, r3
 8002566:	370c      	adds	r7, #12
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr
 8002570:	40021000 	.word	0x40021000

08002574 <LL_RCC_PLL_GetMainSource>:
{
 8002574:	b480      	push	{r7}
 8002576:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002578:	4b04      	ldr	r3, [pc, #16]	; (800258c <LL_RCC_PLL_GetMainSource+0x18>)
 800257a:	68db      	ldr	r3, [r3, #12]
 800257c:	f003 0303 	and.w	r3, r3, #3
}
 8002580:	4618      	mov	r0, r3
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	40021000 	.word	0x40021000

08002590 <LL_RCC_PLL_GetN>:
{
 8002590:	b480      	push	{r7}
 8002592:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002594:	4b04      	ldr	r3, [pc, #16]	; (80025a8 <LL_RCC_PLL_GetN+0x18>)
 8002596:	68db      	ldr	r3, [r3, #12]
 8002598:	0a1b      	lsrs	r3, r3, #8
 800259a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800259e:	4618      	mov	r0, r3
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr
 80025a8:	40021000 	.word	0x40021000

080025ac <LL_RCC_PLL_GetR>:
{
 80025ac:	b480      	push	{r7}
 80025ae:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80025b0:	4b04      	ldr	r3, [pc, #16]	; (80025c4 <LL_RCC_PLL_GetR+0x18>)
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80025b8:	4618      	mov	r0, r3
 80025ba:	46bd      	mov	sp, r7
 80025bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c0:	4770      	bx	lr
 80025c2:	bf00      	nop
 80025c4:	40021000 	.word	0x40021000

080025c8 <LL_RCC_PLL_GetDivider>:
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025cc:	4b04      	ldr	r3, [pc, #16]	; (80025e0 <LL_RCC_PLL_GetDivider+0x18>)
 80025ce:	68db      	ldr	r3, [r3, #12]
 80025d0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80025d4:	4618      	mov	r0, r3
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
 80025de:	bf00      	nop
 80025e0:	40021000 	.word	0x40021000

080025e4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	b084      	sub	sp, #16
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80025ec:	2300      	movs	r3, #0
 80025ee:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b03      	cmp	r3, #3
 80025f4:	d137      	bne.n	8002666 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80025f6:	6878      	ldr	r0, [r7, #4]
 80025f8:	f7ff ff94 	bl	8002524 <LL_RCC_GetUSARTClockSource>
 80025fc:	4603      	mov	r3, r0
 80025fe:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8002602:	2b03      	cmp	r3, #3
 8002604:	f200 80b2 	bhi.w	800276c <LL_RCC_GetUSARTClockFreq+0x188>
 8002608:	a201      	add	r2, pc, #4	; (adr r2, 8002610 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800260a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800260e:	bf00      	nop
 8002610:	0800264f 	.word	0x0800264f
 8002614:	08002621 	.word	0x08002621
 8002618:	08002629 	.word	0x08002629
 800261c:	0800263b 	.word	0x0800263b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002620:	f000 f952 	bl	80028c8 <RCC_GetSystemClockFreq>
 8002624:	60f8      	str	r0, [r7, #12]
        break;
 8002626:	e0b2      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002628:	f7ff feee 	bl	8002408 <LL_RCC_HSI_IsReady>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 809e 	beq.w	8002770 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8002634:	4b58      	ldr	r3, [pc, #352]	; (8002798 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002636:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002638:	e09a      	b.n	8002770 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800263a:	f7ff fef9 	bl	8002430 <LL_RCC_LSE_IsReady>
 800263e:	4603      	mov	r3, r0
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 8097 	beq.w	8002774 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8002646:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800264a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800264c:	e092      	b.n	8002774 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800264e:	f000 f93b 	bl	80028c8 <RCC_GetSystemClockFreq>
 8002652:	4603      	mov	r3, r0
 8002654:	4618      	mov	r0, r3
 8002656:	f000 f9c7 	bl	80029e8 <RCC_GetHCLKClockFreq>
 800265a:	4603      	mov	r3, r0
 800265c:	4618      	mov	r0, r3
 800265e:	f000 f9ed 	bl	8002a3c <RCC_GetPCLK2ClockFreq>
 8002662:	60f8      	str	r0, [r7, #12]
        break;
 8002664:	e093      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	2b0c      	cmp	r3, #12
 800266a:	d146      	bne.n	80026fa <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff ff59 	bl	8002524 <LL_RCC_GetUSARTClockSource>
 8002672:	4603      	mov	r3, r0
 8002674:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002678:	2b0c      	cmp	r3, #12
 800267a:	d87d      	bhi.n	8002778 <LL_RCC_GetUSARTClockFreq+0x194>
 800267c:	a201      	add	r2, pc, #4	; (adr r2, 8002684 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800267e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002682:	bf00      	nop
 8002684:	080026e3 	.word	0x080026e3
 8002688:	08002779 	.word	0x08002779
 800268c:	08002779 	.word	0x08002779
 8002690:	08002779 	.word	0x08002779
 8002694:	080026b9 	.word	0x080026b9
 8002698:	08002779 	.word	0x08002779
 800269c:	08002779 	.word	0x08002779
 80026a0:	08002779 	.word	0x08002779
 80026a4:	080026c1 	.word	0x080026c1
 80026a8:	08002779 	.word	0x08002779
 80026ac:	08002779 	.word	0x08002779
 80026b0:	08002779 	.word	0x08002779
 80026b4:	080026d1 	.word	0x080026d1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80026b8:	f000 f906 	bl	80028c8 <RCC_GetSystemClockFreq>
 80026bc:	60f8      	str	r0, [r7, #12]
        break;
 80026be:	e066      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80026c0:	f7ff fea2 	bl	8002408 <LL_RCC_HSI_IsReady>
 80026c4:	4603      	mov	r3, r0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d058      	beq.n	800277c <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 80026ca:	4b33      	ldr	r3, [pc, #204]	; (8002798 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80026cc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026ce:	e055      	b.n	800277c <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80026d0:	f7ff feae 	bl	8002430 <LL_RCC_LSE_IsReady>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d052      	beq.n	8002780 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 80026da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026de:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026e0:	e04e      	b.n	8002780 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026e2:	f000 f8f1 	bl	80028c8 <RCC_GetSystemClockFreq>
 80026e6:	4603      	mov	r3, r0
 80026e8:	4618      	mov	r0, r3
 80026ea:	f000 f97d 	bl	80029e8 <RCC_GetHCLKClockFreq>
 80026ee:	4603      	mov	r3, r0
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 f98f 	bl	8002a14 <RCC_GetPCLK1ClockFreq>
 80026f6:	60f8      	str	r0, [r7, #12]
        break;
 80026f8:	e049      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b30      	cmp	r3, #48	; 0x30
 80026fe:	d141      	bne.n	8002784 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f7ff ff0f 	bl	8002524 <LL_RCC_GetUSARTClockSource>
 8002706:	4603      	mov	r3, r0
 8002708:	4a24      	ldr	r2, [pc, #144]	; (800279c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800270a:	4293      	cmp	r3, r2
 800270c:	d00d      	beq.n	800272a <LL_RCC_GetUSARTClockFreq+0x146>
 800270e:	4a23      	ldr	r2, [pc, #140]	; (800279c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002710:	4293      	cmp	r3, r2
 8002712:	d803      	bhi.n	800271c <LL_RCC_GetUSARTClockFreq+0x138>
 8002714:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002718:	d01c      	beq.n	8002754 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 800271a:	e038      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800271c:	4a20      	ldr	r2, [pc, #128]	; (80027a0 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d007      	beq.n	8002732 <LL_RCC_GetUSARTClockFreq+0x14e>
 8002722:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002726:	d00c      	beq.n	8002742 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8002728:	e031      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 800272a:	f000 f8cd 	bl	80028c8 <RCC_GetSystemClockFreq>
 800272e:	60f8      	str	r0, [r7, #12]
          break;
 8002730:	e02d      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8002732:	f7ff fe69 	bl	8002408 <LL_RCC_HSI_IsReady>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d025      	beq.n	8002788 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 800273c:	4b16      	ldr	r3, [pc, #88]	; (8002798 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800273e:	60fb      	str	r3, [r7, #12]
          break;
 8002740:	e022      	b.n	8002788 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8002742:	f7ff fe75 	bl	8002430 <LL_RCC_LSE_IsReady>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d01f      	beq.n	800278c <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 800274c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002750:	60fb      	str	r3, [r7, #12]
          break;
 8002752:	e01b      	b.n	800278c <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002754:	f000 f8b8 	bl	80028c8 <RCC_GetSystemClockFreq>
 8002758:	4603      	mov	r3, r0
 800275a:	4618      	mov	r0, r3
 800275c:	f000 f944 	bl	80029e8 <RCC_GetHCLKClockFreq>
 8002760:	4603      	mov	r3, r0
 8002762:	4618      	mov	r0, r3
 8002764:	f000 f956 	bl	8002a14 <RCC_GetPCLK1ClockFreq>
 8002768:	60f8      	str	r0, [r7, #12]
          break;
 800276a:	e010      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800276c:	bf00      	nop
 800276e:	e00e      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002770:	bf00      	nop
 8002772:	e00c      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002774:	bf00      	nop
 8002776:	e00a      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002778:	bf00      	nop
 800277a:	e008      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800277c:	bf00      	nop
 800277e:	e006      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002780:	bf00      	nop
 8002782:	e004      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8002784:	bf00      	nop
 8002786:	e002      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8002788:	bf00      	nop
 800278a:	e000      	b.n	800278e <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 800278c:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800278e:	68fb      	ldr	r3, [r7, #12]
}
 8002790:	4618      	mov	r0, r3
 8002792:	3710      	adds	r7, #16
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}
 8002798:	00f42400 	.word	0x00f42400
 800279c:	00300010 	.word	0x00300010
 80027a0:	00300020 	.word	0x00300020

080027a4 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80027ac:	2300      	movs	r3, #0
 80027ae:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	2bc0      	cmp	r3, #192	; 0xc0
 80027b4:	d135      	bne.n	8002822 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f7ff fec8 	bl	800254c <LL_RCC_GetUARTClockSource>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a3d      	ldr	r2, [pc, #244]	; (80028b4 <LL_RCC_GetUARTClockFreq+0x110>)
 80027c0:	4293      	cmp	r3, r2
 80027c2:	d00d      	beq.n	80027e0 <LL_RCC_GetUARTClockFreq+0x3c>
 80027c4:	4a3b      	ldr	r2, [pc, #236]	; (80028b4 <LL_RCC_GetUARTClockFreq+0x110>)
 80027c6:	4293      	cmp	r3, r2
 80027c8:	d803      	bhi.n	80027d2 <LL_RCC_GetUARTClockFreq+0x2e>
 80027ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ce:	d01c      	beq.n	800280a <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80027d0:	e02c      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80027d2:	4a39      	ldr	r2, [pc, #228]	; (80028b8 <LL_RCC_GetUARTClockFreq+0x114>)
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d007      	beq.n	80027e8 <LL_RCC_GetUARTClockFreq+0x44>
 80027d8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80027dc:	d00c      	beq.n	80027f8 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80027de:	e025      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80027e0:	f000 f872 	bl	80028c8 <RCC_GetSystemClockFreq>
 80027e4:	60f8      	str	r0, [r7, #12]
        break;
 80027e6:	e021      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80027e8:	f7ff fe0e 	bl	8002408 <LL_RCC_HSI_IsReady>
 80027ec:	4603      	mov	r3, r0
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d019      	beq.n	8002826 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80027f2:	4b32      	ldr	r3, [pc, #200]	; (80028bc <LL_RCC_GetUARTClockFreq+0x118>)
 80027f4:	60fb      	str	r3, [r7, #12]
        break;
 80027f6:	e016      	b.n	8002826 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80027f8:	f7ff fe1a 	bl	8002430 <LL_RCC_LSE_IsReady>
 80027fc:	4603      	mov	r3, r0
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d013      	beq.n	800282a <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8002802:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002806:	60fb      	str	r3, [r7, #12]
        break;
 8002808:	e00f      	b.n	800282a <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800280a:	f000 f85d 	bl	80028c8 <RCC_GetSystemClockFreq>
 800280e:	4603      	mov	r3, r0
 8002810:	4618      	mov	r0, r3
 8002812:	f000 f8e9 	bl	80029e8 <RCC_GetHCLKClockFreq>
 8002816:	4603      	mov	r3, r0
 8002818:	4618      	mov	r0, r3
 800281a:	f000 f8fb 	bl	8002a14 <RCC_GetPCLK1ClockFreq>
 800281e:	60f8      	str	r0, [r7, #12]
        break;
 8002820:	e004      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8002822:	bf00      	nop
 8002824:	e002      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8002826:	bf00      	nop
 8002828:	e000      	b.n	800282c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800282a:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002832:	d135      	bne.n	80028a0 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7ff fe89 	bl	800254c <LL_RCC_GetUARTClockSource>
 800283a:	4603      	mov	r3, r0
 800283c:	4a20      	ldr	r2, [pc, #128]	; (80028c0 <LL_RCC_GetUARTClockFreq+0x11c>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d00d      	beq.n	800285e <LL_RCC_GetUARTClockFreq+0xba>
 8002842:	4a1f      	ldr	r2, [pc, #124]	; (80028c0 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d803      	bhi.n	8002850 <LL_RCC_GetUARTClockFreq+0xac>
 8002848:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800284c:	d01c      	beq.n	8002888 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800284e:	e02c      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002850:	4a1c      	ldr	r2, [pc, #112]	; (80028c4 <LL_RCC_GetUARTClockFreq+0x120>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d007      	beq.n	8002866 <LL_RCC_GetUARTClockFreq+0xc2>
 8002856:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800285a:	d00c      	beq.n	8002876 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 800285c:	e025      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800285e:	f000 f833 	bl	80028c8 <RCC_GetSystemClockFreq>
 8002862:	60f8      	str	r0, [r7, #12]
        break;
 8002864:	e021      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8002866:	f7ff fdcf 	bl	8002408 <LL_RCC_HSI_IsReady>
 800286a:	4603      	mov	r3, r0
 800286c:	2b00      	cmp	r3, #0
 800286e:	d019      	beq.n	80028a4 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8002870:	4b12      	ldr	r3, [pc, #72]	; (80028bc <LL_RCC_GetUARTClockFreq+0x118>)
 8002872:	60fb      	str	r3, [r7, #12]
        break;
 8002874:	e016      	b.n	80028a4 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8002876:	f7ff fddb 	bl	8002430 <LL_RCC_LSE_IsReady>
 800287a:	4603      	mov	r3, r0
 800287c:	2b00      	cmp	r3, #0
 800287e:	d013      	beq.n	80028a8 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8002880:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002884:	60fb      	str	r3, [r7, #12]
        break;
 8002886:	e00f      	b.n	80028a8 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002888:	f000 f81e 	bl	80028c8 <RCC_GetSystemClockFreq>
 800288c:	4603      	mov	r3, r0
 800288e:	4618      	mov	r0, r3
 8002890:	f000 f8aa 	bl	80029e8 <RCC_GetHCLKClockFreq>
 8002894:	4603      	mov	r3, r0
 8002896:	4618      	mov	r0, r3
 8002898:	f000 f8bc 	bl	8002a14 <RCC_GetPCLK1ClockFreq>
 800289c:	60f8      	str	r0, [r7, #12]
        break;
 800289e:	e004      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 80028a0:	bf00      	nop
 80028a2:	e002      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80028a4:	bf00      	nop
 80028a6:	e000      	b.n	80028aa <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80028a8:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80028aa:	68fb      	ldr	r3, [r7, #12]
}
 80028ac:	4618      	mov	r0, r3
 80028ae:	3710      	adds	r7, #16
 80028b0:	46bd      	mov	sp, r7
 80028b2:	bd80      	pop	{r7, pc}
 80028b4:	00c00040 	.word	0x00c00040
 80028b8:	00c00080 	.word	0x00c00080
 80028bc:	00f42400 	.word	0x00f42400
 80028c0:	03000100 	.word	0x03000100
 80028c4:	03000200 	.word	0x03000200

080028c8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b082      	sub	sp, #8
 80028cc:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028ce:	f7ff fdf1 	bl	80024b4 <LL_RCC_GetSysClkSource>
 80028d2:	4603      	mov	r3, r0
 80028d4:	2b0c      	cmp	r3, #12
 80028d6:	d851      	bhi.n	800297c <RCC_GetSystemClockFreq+0xb4>
 80028d8:	a201      	add	r2, pc, #4	; (adr r2, 80028e0 <RCC_GetSystemClockFreq+0x18>)
 80028da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028de:	bf00      	nop
 80028e0:	08002915 	.word	0x08002915
 80028e4:	0800297d 	.word	0x0800297d
 80028e8:	0800297d 	.word	0x0800297d
 80028ec:	0800297d 	.word	0x0800297d
 80028f0:	08002969 	.word	0x08002969
 80028f4:	0800297d 	.word	0x0800297d
 80028f8:	0800297d 	.word	0x0800297d
 80028fc:	0800297d 	.word	0x0800297d
 8002900:	0800296f 	.word	0x0800296f
 8002904:	0800297d 	.word	0x0800297d
 8002908:	0800297d 	.word	0x0800297d
 800290c:	0800297d 	.word	0x0800297d
 8002910:	08002975 	.word	0x08002975
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002914:	f7ff fda0 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002918:	4603      	mov	r3, r0
 800291a:	2b00      	cmp	r3, #0
 800291c:	d111      	bne.n	8002942 <RCC_GetSystemClockFreq+0x7a>
 800291e:	f7ff fd9b 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002922:	4603      	mov	r3, r0
 8002924:	2b00      	cmp	r3, #0
 8002926:	d004      	beq.n	8002932 <RCC_GetSystemClockFreq+0x6a>
 8002928:	f7ff fda8 	bl	800247c <LL_RCC_MSI_GetRange>
 800292c:	4603      	mov	r3, r0
 800292e:	0a1b      	lsrs	r3, r3, #8
 8002930:	e003      	b.n	800293a <RCC_GetSystemClockFreq+0x72>
 8002932:	f7ff fdb1 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 8002936:	4603      	mov	r3, r0
 8002938:	0a1b      	lsrs	r3, r3, #8
 800293a:	4a28      	ldr	r2, [pc, #160]	; (80029dc <RCC_GetSystemClockFreq+0x114>)
 800293c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002940:	e010      	b.n	8002964 <RCC_GetSystemClockFreq+0x9c>
 8002942:	f7ff fd89 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002946:	4603      	mov	r3, r0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d004      	beq.n	8002956 <RCC_GetSystemClockFreq+0x8e>
 800294c:	f7ff fd96 	bl	800247c <LL_RCC_MSI_GetRange>
 8002950:	4603      	mov	r3, r0
 8002952:	091b      	lsrs	r3, r3, #4
 8002954:	e003      	b.n	800295e <RCC_GetSystemClockFreq+0x96>
 8002956:	f7ff fd9f 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 800295a:	4603      	mov	r3, r0
 800295c:	091b      	lsrs	r3, r3, #4
 800295e:	4a1f      	ldr	r2, [pc, #124]	; (80029dc <RCC_GetSystemClockFreq+0x114>)
 8002960:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002964:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002966:	e033      	b.n	80029d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002968:	4b1d      	ldr	r3, [pc, #116]	; (80029e0 <RCC_GetSystemClockFreq+0x118>)
 800296a:	607b      	str	r3, [r7, #4]
      break;
 800296c:	e030      	b.n	80029d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800296e:	4b1d      	ldr	r3, [pc, #116]	; (80029e4 <RCC_GetSystemClockFreq+0x11c>)
 8002970:	607b      	str	r3, [r7, #4]
      break;
 8002972:	e02d      	b.n	80029d0 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002974:	f000 f876 	bl	8002a64 <RCC_PLL_GetFreqDomain_SYS>
 8002978:	6078      	str	r0, [r7, #4]
      break;
 800297a:	e029      	b.n	80029d0 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800297c:	f7ff fd6c 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002980:	4603      	mov	r3, r0
 8002982:	2b00      	cmp	r3, #0
 8002984:	d111      	bne.n	80029aa <RCC_GetSystemClockFreq+0xe2>
 8002986:	f7ff fd67 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 800298a:	4603      	mov	r3, r0
 800298c:	2b00      	cmp	r3, #0
 800298e:	d004      	beq.n	800299a <RCC_GetSystemClockFreq+0xd2>
 8002990:	f7ff fd74 	bl	800247c <LL_RCC_MSI_GetRange>
 8002994:	4603      	mov	r3, r0
 8002996:	0a1b      	lsrs	r3, r3, #8
 8002998:	e003      	b.n	80029a2 <RCC_GetSystemClockFreq+0xda>
 800299a:	f7ff fd7d 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 800299e:	4603      	mov	r3, r0
 80029a0:	0a1b      	lsrs	r3, r3, #8
 80029a2:	4a0e      	ldr	r2, [pc, #56]	; (80029dc <RCC_GetSystemClockFreq+0x114>)
 80029a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a8:	e010      	b.n	80029cc <RCC_GetSystemClockFreq+0x104>
 80029aa:	f7ff fd55 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 80029ae:	4603      	mov	r3, r0
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d004      	beq.n	80029be <RCC_GetSystemClockFreq+0xf6>
 80029b4:	f7ff fd62 	bl	800247c <LL_RCC_MSI_GetRange>
 80029b8:	4603      	mov	r3, r0
 80029ba:	091b      	lsrs	r3, r3, #4
 80029bc:	e003      	b.n	80029c6 <RCC_GetSystemClockFreq+0xfe>
 80029be:	f7ff fd6b 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 80029c2:	4603      	mov	r3, r0
 80029c4:	091b      	lsrs	r3, r3, #4
 80029c6:	4a05      	ldr	r2, [pc, #20]	; (80029dc <RCC_GetSystemClockFreq+0x114>)
 80029c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029cc:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80029ce:	bf00      	nop
  }

  return frequency;
 80029d0:	687b      	ldr	r3, [r7, #4]
}
 80029d2:	4618      	mov	r0, r3
 80029d4:	3708      	adds	r7, #8
 80029d6:	46bd      	mov	sp, r7
 80029d8:	bd80      	pop	{r7, pc}
 80029da:	bf00      	nop
 80029dc:	0800431c 	.word	0x0800431c
 80029e0:	00f42400 	.word	0x00f42400
 80029e4:	007a1200 	.word	0x007a1200

080029e8 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029f0:	f7ff fd6e 	bl	80024d0 <LL_RCC_GetAHBPrescaler>
 80029f4:	4603      	mov	r3, r0
 80029f6:	091b      	lsrs	r3, r3, #4
 80029f8:	f003 030f 	and.w	r3, r3, #15
 80029fc:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <RCC_GetHCLKClockFreq+0x28>)
 80029fe:	5cd3      	ldrb	r3, [r2, r3]
 8002a00:	461a      	mov	r2, r3
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	40d3      	lsrs	r3, r2
}
 8002a06:	4618      	mov	r0, r3
 8002a08:	3708      	adds	r7, #8
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	08004304 	.word	0x08004304

08002a14 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b082      	sub	sp, #8
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002a1c:	f7ff fd66 	bl	80024ec <LL_RCC_GetAPB1Prescaler>
 8002a20:	4603      	mov	r3, r0
 8002a22:	0a1b      	lsrs	r3, r3, #8
 8002a24:	4a04      	ldr	r2, [pc, #16]	; (8002a38 <RCC_GetPCLK1ClockFreq+0x24>)
 8002a26:	5cd3      	ldrb	r3, [r2, r3]
 8002a28:	461a      	mov	r2, r3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	40d3      	lsrs	r3, r2
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	3708      	adds	r7, #8
 8002a32:	46bd      	mov	sp, r7
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	08004314 	.word	0x08004314

08002a3c <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002a3c:	b580      	push	{r7, lr}
 8002a3e:	b082      	sub	sp, #8
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a44:	f7ff fd60 	bl	8002508 <LL_RCC_GetAPB2Prescaler>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	0adb      	lsrs	r3, r3, #11
 8002a4c:	4a04      	ldr	r2, [pc, #16]	; (8002a60 <RCC_GetPCLK2ClockFreq+0x24>)
 8002a4e:	5cd3      	ldrb	r3, [r2, r3]
 8002a50:	461a      	mov	r2, r3
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	40d3      	lsrs	r3, r2
}
 8002a56:	4618      	mov	r0, r3
 8002a58:	3708      	adds	r7, #8
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bd80      	pop	{r7, pc}
 8002a5e:	bf00      	nop
 8002a60:	08004314 	.word	0x08004314

08002a64 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a64:	b590      	push	{r4, r7, lr}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a6a:	f7ff fd83 	bl	8002574 <LL_RCC_PLL_GetMainSource>
 8002a6e:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d02d      	beq.n	8002ad2 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8002a76:	2b03      	cmp	r3, #3
 8002a78:	d02e      	beq.n	8002ad8 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d12f      	bne.n	8002ade <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a7e:	f7ff fceb 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a82:	4603      	mov	r3, r0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d111      	bne.n	8002aac <RCC_PLL_GetFreqDomain_SYS+0x48>
 8002a88:	f7ff fce6 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d004      	beq.n	8002a9c <RCC_PLL_GetFreqDomain_SYS+0x38>
 8002a92:	f7ff fcf3 	bl	800247c <LL_RCC_MSI_GetRange>
 8002a96:	4603      	mov	r3, r0
 8002a98:	0a1b      	lsrs	r3, r3, #8
 8002a9a:	e003      	b.n	8002aa4 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002a9c:	f7ff fcfc 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 8002aa0:	4603      	mov	r3, r0
 8002aa2:	0a1b      	lsrs	r3, r3, #8
 8002aa4:	4a2f      	ldr	r2, [pc, #188]	; (8002b64 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aaa:	e010      	b.n	8002ace <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8002aac:	f7ff fcd4 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d004      	beq.n	8002ac0 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8002ab6:	f7ff fce1 	bl	800247c <LL_RCC_MSI_GetRange>
 8002aba:	4603      	mov	r3, r0
 8002abc:	091b      	lsrs	r3, r3, #4
 8002abe:	e003      	b.n	8002ac8 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002ac0:	f7ff fcea 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	091b      	lsrs	r3, r3, #4
 8002ac8:	4a26      	ldr	r2, [pc, #152]	; (8002b64 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002aca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ace:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002ad0:	e02f      	b.n	8002b32 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002ad2:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002ad4:	607b      	str	r3, [r7, #4]
      break;
 8002ad6:	e02c      	b.n	8002b32 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002ad8:	4b24      	ldr	r3, [pc, #144]	; (8002b6c <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8002ada:	607b      	str	r3, [r7, #4]
      break;
 8002adc:	e029      	b.n	8002b32 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ade:	f7ff fcbb 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d111      	bne.n	8002b0c <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8002ae8:	f7ff fcb6 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002aec:	4603      	mov	r3, r0
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d004      	beq.n	8002afc <RCC_PLL_GetFreqDomain_SYS+0x98>
 8002af2:	f7ff fcc3 	bl	800247c <LL_RCC_MSI_GetRange>
 8002af6:	4603      	mov	r3, r0
 8002af8:	0a1b      	lsrs	r3, r3, #8
 8002afa:	e003      	b.n	8002b04 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8002afc:	f7ff fccc 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b00:	4603      	mov	r3, r0
 8002b02:	0a1b      	lsrs	r3, r3, #8
 8002b04:	4a17      	ldr	r2, [pc, #92]	; (8002b64 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002b06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b0a:	e010      	b.n	8002b2e <RCC_PLL_GetFreqDomain_SYS+0xca>
 8002b0c:	f7ff fca4 	bl	8002458 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002b10:	4603      	mov	r3, r0
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d004      	beq.n	8002b20 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002b16:	f7ff fcb1 	bl	800247c <LL_RCC_MSI_GetRange>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	091b      	lsrs	r3, r3, #4
 8002b1e:	e003      	b.n	8002b28 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8002b20:	f7ff fcba 	bl	8002498 <LL_RCC_MSI_GetRangeAfterStandby>
 8002b24:	4603      	mov	r3, r0
 8002b26:	091b      	lsrs	r3, r3, #4
 8002b28:	4a0e      	ldr	r2, [pc, #56]	; (8002b64 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002b2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b2e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002b30:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b32:	f7ff fd49 	bl	80025c8 <LL_RCC_PLL_GetDivider>
 8002b36:	4603      	mov	r3, r0
 8002b38:	091b      	lsrs	r3, r3, #4
 8002b3a:	3301      	adds	r3, #1
 8002b3c:	687a      	ldr	r2, [r7, #4]
 8002b3e:	fbb2 f4f3 	udiv	r4, r2, r3
 8002b42:	f7ff fd25 	bl	8002590 <LL_RCC_PLL_GetN>
 8002b46:	4603      	mov	r3, r0
 8002b48:	fb03 f404 	mul.w	r4, r3, r4
 8002b4c:	f7ff fd2e 	bl	80025ac <LL_RCC_PLL_GetR>
 8002b50:	4603      	mov	r3, r0
 8002b52:	0e5b      	lsrs	r3, r3, #25
 8002b54:	3301      	adds	r3, #1
 8002b56:	005b      	lsls	r3, r3, #1
 8002b58:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd90      	pop	{r4, r7, pc}
 8002b64:	0800431c 	.word	0x0800431c
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	007a1200 	.word	0x007a1200

08002b70 <LL_SPI_IsEnabled>:
{
 8002b70:	b480      	push	{r7}
 8002b72:	b083      	sub	sp, #12
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b80:	2b40      	cmp	r3, #64	; 0x40
 8002b82:	d101      	bne.n	8002b88 <LL_SPI_IsEnabled+0x18>
 8002b84:	2301      	movs	r3, #1
 8002b86:	e000      	b.n	8002b8a <LL_SPI_IsEnabled+0x1a>
 8002b88:	2300      	movs	r3, #0
}
 8002b8a:	4618      	mov	r0, r3
 8002b8c:	370c      	adds	r7, #12
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr

08002b96 <LL_SPI_SetCRCPolynomial>:
{
 8002b96:	b480      	push	{r7}
 8002b98:	b083      	sub	sp, #12
 8002b9a:	af00      	add	r7, sp, #0
 8002b9c:	6078      	str	r0, [r7, #4]
 8002b9e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	b29b      	uxth	r3, r3
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	611a      	str	r2, [r3, #16]
}
 8002baa:	bf00      	nop
 8002bac:	370c      	adds	r7, #12
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb4:	4770      	bx	lr

08002bb6 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002bb6:	b580      	push	{r7, lr}
 8002bb8:	b084      	sub	sp, #16
 8002bba:	af00      	add	r7, sp, #0
 8002bbc:	6078      	str	r0, [r7, #4]
 8002bbe:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002bc4:	6878      	ldr	r0, [r7, #4]
 8002bc6:	f7ff ffd3 	bl	8002b70 <LL_SPI_IsEnabled>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d13b      	bne.n	8002c48 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bd8:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002bdc:	683a      	ldr	r2, [r7, #0]
 8002bde:	6811      	ldr	r1, [r2, #0]
 8002be0:	683a      	ldr	r2, [r7, #0]
 8002be2:	6852      	ldr	r2, [r2, #4]
 8002be4:	4311      	orrs	r1, r2
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	68d2      	ldr	r2, [r2, #12]
 8002bea:	4311      	orrs	r1, r2
 8002bec:	683a      	ldr	r2, [r7, #0]
 8002bee:	6912      	ldr	r2, [r2, #16]
 8002bf0:	4311      	orrs	r1, r2
 8002bf2:	683a      	ldr	r2, [r7, #0]
 8002bf4:	6952      	ldr	r2, [r2, #20]
 8002bf6:	4311      	orrs	r1, r2
 8002bf8:	683a      	ldr	r2, [r7, #0]
 8002bfa:	6992      	ldr	r2, [r2, #24]
 8002bfc:	4311      	orrs	r1, r2
 8002bfe:	683a      	ldr	r2, [r7, #0]
 8002c00:	69d2      	ldr	r2, [r2, #28]
 8002c02:	4311      	orrs	r1, r2
 8002c04:	683a      	ldr	r2, [r7, #0]
 8002c06:	6a12      	ldr	r2, [r2, #32]
 8002c08:	430a      	orrs	r2, r1
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002c18:	f023 0304 	bic.w	r3, r3, #4
 8002c1c:	683a      	ldr	r2, [r7, #0]
 8002c1e:	6891      	ldr	r1, [r2, #8]
 8002c20:	683a      	ldr	r2, [r7, #0]
 8002c22:	6952      	ldr	r2, [r2, #20]
 8002c24:	0c12      	lsrs	r2, r2, #16
 8002c26:	430a      	orrs	r2, r1
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002c2e:	683b      	ldr	r3, [r7, #0]
 8002c30:	6a1b      	ldr	r3, [r3, #32]
 8002c32:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c36:	d105      	bne.n	8002c44 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002c38:	683b      	ldr	r3, [r7, #0]
 8002c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c3c:	4619      	mov	r1, r3
 8002c3e:	6878      	ldr	r0, [r7, #4]
 8002c40:	f7ff ffa9 	bl	8002b96 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002c44:	2300      	movs	r3, #0
 8002c46:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002c48:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}

08002c52 <LL_TIM_SetPrescaler>:
{
 8002c52:	b480      	push	{r7}
 8002c54:	b083      	sub	sp, #12
 8002c56:	af00      	add	r7, sp, #0
 8002c58:	6078      	str	r0, [r7, #4]
 8002c5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	683a      	ldr	r2, [r7, #0]
 8002c60:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c62:	bf00      	nop
 8002c64:	370c      	adds	r7, #12
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr

08002c6e <LL_TIM_SetAutoReload>:
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
 8002c76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	683a      	ldr	r2, [r7, #0]
 8002c7c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <LL_TIM_SetRepetitionCounter>:
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
 8002c92:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	683a      	ldr	r2, [r7, #0]
 8002c98:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c9a:	bf00      	nop
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	695b      	ldr	r3, [r3, #20]
 8002cb2:	f043 0201 	orr.w	r2, r3, #1
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	615a      	str	r2, [r3, #20]
}
 8002cba:	bf00      	nop
 8002cbc:	370c      	adds	r7, #12
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc4:	4770      	bx	lr
	...

08002cc8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a3d      	ldr	r2, [pc, #244]	; (8002dd0 <LL_TIM_Init+0x108>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d013      	beq.n	8002d08 <LL_TIM_Init+0x40>
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce6:	d00f      	beq.n	8002d08 <LL_TIM_Init+0x40>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a3a      	ldr	r2, [pc, #232]	; (8002dd4 <LL_TIM_Init+0x10c>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d00b      	beq.n	8002d08 <LL_TIM_Init+0x40>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a39      	ldr	r2, [pc, #228]	; (8002dd8 <LL_TIM_Init+0x110>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d007      	beq.n	8002d08 <LL_TIM_Init+0x40>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a38      	ldr	r2, [pc, #224]	; (8002ddc <LL_TIM_Init+0x114>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d003      	beq.n	8002d08 <LL_TIM_Init+0x40>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a37      	ldr	r2, [pc, #220]	; (8002de0 <LL_TIM_Init+0x118>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d106      	bne.n	8002d16 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	685b      	ldr	r3, [r3, #4]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	4a2d      	ldr	r2, [pc, #180]	; (8002dd0 <LL_TIM_Init+0x108>)
 8002d1a:	4293      	cmp	r3, r2
 8002d1c:	d01f      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d24:	d01b      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a2a      	ldr	r2, [pc, #168]	; (8002dd4 <LL_TIM_Init+0x10c>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d017      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	4a29      	ldr	r2, [pc, #164]	; (8002dd8 <LL_TIM_Init+0x110>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d013      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a28      	ldr	r2, [pc, #160]	; (8002ddc <LL_TIM_Init+0x114>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d00f      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a27      	ldr	r2, [pc, #156]	; (8002de0 <LL_TIM_Init+0x118>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d00b      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4a26      	ldr	r2, [pc, #152]	; (8002de4 <LL_TIM_Init+0x11c>)
 8002d4a:	4293      	cmp	r3, r2
 8002d4c:	d007      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	4a25      	ldr	r2, [pc, #148]	; (8002de8 <LL_TIM_Init+0x120>)
 8002d52:	4293      	cmp	r3, r2
 8002d54:	d003      	beq.n	8002d5e <LL_TIM_Init+0x96>
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	4a24      	ldr	r2, [pc, #144]	; (8002dec <LL_TIM_Init+0x124>)
 8002d5a:	4293      	cmp	r3, r2
 8002d5c:	d106      	bne.n	8002d6c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	68db      	ldr	r3, [r3, #12]
 8002d68:	4313      	orrs	r3, r2
 8002d6a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	68fa      	ldr	r2, [r7, #12]
 8002d70:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	4619      	mov	r1, r3
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7ff ff78 	bl	8002c6e <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	881b      	ldrh	r3, [r3, #0]
 8002d82:	4619      	mov	r1, r3
 8002d84:	6878      	ldr	r0, [r7, #4]
 8002d86:	f7ff ff64 	bl	8002c52 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a10      	ldr	r2, [pc, #64]	; (8002dd0 <LL_TIM_Init+0x108>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d00f      	beq.n	8002db2 <LL_TIM_Init+0xea>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <LL_TIM_Init+0x118>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d00b      	beq.n	8002db2 <LL_TIM_Init+0xea>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a11      	ldr	r2, [pc, #68]	; (8002de4 <LL_TIM_Init+0x11c>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d007      	beq.n	8002db2 <LL_TIM_Init+0xea>
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	4a10      	ldr	r2, [pc, #64]	; (8002de8 <LL_TIM_Init+0x120>)
 8002da6:	4293      	cmp	r3, r2
 8002da8:	d003      	beq.n	8002db2 <LL_TIM_Init+0xea>
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	4a0f      	ldr	r2, [pc, #60]	; (8002dec <LL_TIM_Init+0x124>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d105      	bne.n	8002dbe <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	4619      	mov	r1, r3
 8002db8:	6878      	ldr	r0, [r7, #4]
 8002dba:	f7ff ff66 	bl	8002c8a <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002dbe:	6878      	ldr	r0, [r7, #4]
 8002dc0:	f7ff ff71 	bl	8002ca6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	40012c00 	.word	0x40012c00
 8002dd4:	40000400 	.word	0x40000400
 8002dd8:	40000800 	.word	0x40000800
 8002ddc:	40000c00 	.word	0x40000c00
 8002de0:	40013400 	.word	0x40013400
 8002de4:	40014000 	.word	0x40014000
 8002de8:	40014400 	.word	0x40014400
 8002dec:	40014800 	.word	0x40014800

08002df0 <LL_USART_IsEnabled>:
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f003 0301 	and.w	r3, r3, #1
 8002e00:	2b01      	cmp	r3, #1
 8002e02:	d101      	bne.n	8002e08 <LL_USART_IsEnabled+0x18>
 8002e04:	2301      	movs	r3, #1
 8002e06:	e000      	b.n	8002e0a <LL_USART_IsEnabled+0x1a>
 8002e08:	2300      	movs	r3, #0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	370c      	adds	r7, #12
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e14:	4770      	bx	lr

08002e16 <LL_USART_SetStopBitsLength>:
{
 8002e16:	b480      	push	{r7}
 8002e18:	b083      	sub	sp, #12
 8002e1a:	af00      	add	r7, sp, #0
 8002e1c:	6078      	str	r0, [r7, #4]
 8002e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	685b      	ldr	r3, [r3, #4]
 8002e24:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	431a      	orrs	r2, r3
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	605a      	str	r2, [r3, #4]
}
 8002e30:	bf00      	nop
 8002e32:	370c      	adds	r7, #12
 8002e34:	46bd      	mov	sp, r7
 8002e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3a:	4770      	bx	lr

08002e3c <LL_USART_SetHWFlowCtrl>:
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b083      	sub	sp, #12
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
 8002e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	431a      	orrs	r2, r3
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	609a      	str	r2, [r3, #8]
}
 8002e56:	bf00      	nop
 8002e58:	370c      	adds	r7, #12
 8002e5a:	46bd      	mov	sp, r7
 8002e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e60:	4770      	bx	lr

08002e62 <LL_USART_SetBaudRate>:
{
 8002e62:	b480      	push	{r7}
 8002e64:	b087      	sub	sp, #28
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e76:	d11a      	bne.n	8002eae <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	005a      	lsls	r2, r3, #1
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	085b      	lsrs	r3, r3, #1
 8002e80:	441a      	add	r2, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e88:	b29b      	uxth	r3, r3
 8002e8a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002e8c:	697a      	ldr	r2, [r7, #20]
 8002e8e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002e92:	4013      	ands	r3, r2
 8002e94:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	085b      	lsrs	r3, r3, #1
 8002e9a:	b29b      	uxth	r3, r3
 8002e9c:	f003 0307 	and.w	r3, r3, #7
 8002ea0:	693a      	ldr	r2, [r7, #16]
 8002ea2:	4313      	orrs	r3, r2
 8002ea4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	60da      	str	r2, [r3, #12]
}
 8002eac:	e00a      	b.n	8002ec4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	085a      	lsrs	r2, r3, #1
 8002eb2:	68bb      	ldr	r3, [r7, #8]
 8002eb4:	441a      	add	r2, r3
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ebc:	b29b      	uxth	r3, r3
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	60da      	str	r2, [r3, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	371c      	adds	r7, #28
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eda:	2301      	movs	r3, #1
 8002edc:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002ee2:	6878      	ldr	r0, [r7, #4]
 8002ee4:	f7ff ff84 	bl	8002df0 <LL_USART_IsEnabled>
 8002ee8:	4603      	mov	r3, r0
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d15b      	bne.n	8002fa6 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681a      	ldr	r2, [r3, #0]
 8002ef2:	4b2f      	ldr	r3, [pc, #188]	; (8002fb0 <LL_USART_Init+0xe0>)
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	683a      	ldr	r2, [r7, #0]
 8002ef8:	6851      	ldr	r1, [r2, #4]
 8002efa:	683a      	ldr	r2, [r7, #0]
 8002efc:	68d2      	ldr	r2, [r2, #12]
 8002efe:	4311      	orrs	r1, r2
 8002f00:	683a      	ldr	r2, [r7, #0]
 8002f02:	6912      	ldr	r2, [r2, #16]
 8002f04:	4311      	orrs	r1, r2
 8002f06:	683a      	ldr	r2, [r7, #0]
 8002f08:	6992      	ldr	r2, [r2, #24]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	431a      	orrs	r2, r3
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002f12:	683b      	ldr	r3, [r7, #0]
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	4619      	mov	r1, r3
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7ff ff7c 	bl	8002e16 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	695b      	ldr	r3, [r3, #20]
 8002f22:	4619      	mov	r1, r3
 8002f24:	6878      	ldr	r0, [r7, #4]
 8002f26:	f7ff ff89 	bl	8002e3c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <LL_USART_Init+0xe4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d104      	bne.n	8002f3c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002f32:	2003      	movs	r0, #3
 8002f34:	f7ff fb56 	bl	80025e4 <LL_RCC_GetUSARTClockFreq>
 8002f38:	60b8      	str	r0, [r7, #8]
 8002f3a:	e023      	b.n	8002f84 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <LL_USART_Init+0xe8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d104      	bne.n	8002f4e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002f44:	200c      	movs	r0, #12
 8002f46:	f7ff fb4d 	bl	80025e4 <LL_RCC_GetUSARTClockFreq>
 8002f4a:	60b8      	str	r0, [r7, #8]
 8002f4c:	e01a      	b.n	8002f84 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a1a      	ldr	r2, [pc, #104]	; (8002fbc <LL_USART_Init+0xec>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d104      	bne.n	8002f60 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002f56:	2030      	movs	r0, #48	; 0x30
 8002f58:	f7ff fb44 	bl	80025e4 <LL_RCC_GetUSARTClockFreq>
 8002f5c:	60b8      	str	r0, [r7, #8]
 8002f5e:	e011      	b.n	8002f84 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a17      	ldr	r2, [pc, #92]	; (8002fc0 <LL_USART_Init+0xf0>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d104      	bne.n	8002f72 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002f68:	20c0      	movs	r0, #192	; 0xc0
 8002f6a:	f7ff fc1b 	bl	80027a4 <LL_RCC_GetUARTClockFreq>
 8002f6e:	60b8      	str	r0, [r7, #8]
 8002f70:	e008      	b.n	8002f84 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	4a13      	ldr	r2, [pc, #76]	; (8002fc4 <LL_USART_Init+0xf4>)
 8002f76:	4293      	cmp	r3, r2
 8002f78:	d104      	bne.n	8002f84 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002f7a:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002f7e:	f7ff fc11 	bl	80027a4 <LL_RCC_GetUARTClockFreq>
 8002f82:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d00d      	beq.n	8002fa6 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d009      	beq.n	8002fa6 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002f92:	2300      	movs	r3, #0
 8002f94:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	699a      	ldr	r2, [r3, #24]
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	68b9      	ldr	r1, [r7, #8]
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f7ff ff5e 	bl	8002e62 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3710      	adds	r7, #16
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	efff69f3 	.word	0xefff69f3
 8002fb4:	40013800 	.word	0x40013800
 8002fb8:	40004400 	.word	0x40004400
 8002fbc:	40004800 	.word	0x40004800
 8002fc0:	40004c00 	.word	0x40004c00
 8002fc4:	40005000 	.word	0x40005000

08002fc8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fda:	4a07      	ldr	r2, [pc, #28]	; (8002ff8 <LL_InitTick+0x30>)
 8002fdc:	3b01      	subs	r3, #1
 8002fde:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002fe0:	4b05      	ldr	r3, [pc, #20]	; (8002ff8 <LL_InitTick+0x30>)
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fe6:	4b04      	ldr	r3, [pc, #16]	; (8002ff8 <LL_InitTick+0x30>)
 8002fe8:	2205      	movs	r2, #5
 8002fea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002fec:	bf00      	nop
 8002fee:	370c      	adds	r7, #12
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e010 	.word	0xe000e010

08002ffc <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003004:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003008:	6878      	ldr	r0, [r7, #4]
 800300a:	f7ff ffdd 	bl	8002fc8 <LL_InitTick>
}
 800300e:	bf00      	nop
 8003010:	3708      	adds	r7, #8
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
	...

08003018 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003018:	b480      	push	{r7}
 800301a:	b085      	sub	sp, #20
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003020:	4b0f      	ldr	r3, [pc, #60]	; (8003060 <LL_mDelay+0x48>)
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800302a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003032:	d00c      	beq.n	800304e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	3301      	adds	r3, #1
 8003038:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800303a:	e008      	b.n	800304e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800303c:	4b08      	ldr	r3, [pc, #32]	; (8003060 <LL_mDelay+0x48>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003044:	2b00      	cmp	r3, #0
 8003046:	d002      	beq.n	800304e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	3b01      	subs	r3, #1
 800304c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2b00      	cmp	r3, #0
 8003052:	d1f3      	bne.n	800303c <LL_mDelay+0x24>
    }
  }
}
 8003054:	bf00      	nop
 8003056:	3714      	adds	r7, #20
 8003058:	46bd      	mov	sp, r7
 800305a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305e:	4770      	bx	lr
 8003060:	e000e010 	.word	0xe000e010

08003064 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003064:	b480      	push	{r7}
 8003066:	b083      	sub	sp, #12
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800306c:	4a04      	ldr	r2, [pc, #16]	; (8003080 <LL_SetSystemCoreClock+0x1c>)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	6013      	str	r3, [r2, #0]
}
 8003072:	bf00      	nop
 8003074:	370c      	adds	r7, #12
 8003076:	46bd      	mov	sp, r7
 8003078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307c:	4770      	bx	lr
 800307e:	bf00      	nop
 8003080:	20000554 	.word	0x20000554

08003084 <__errno>:
 8003084:	4b01      	ldr	r3, [pc, #4]	; (800308c <__errno+0x8>)
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	4770      	bx	lr
 800308a:	bf00      	nop
 800308c:	20000558 	.word	0x20000558

08003090 <__libc_init_array>:
 8003090:	b570      	push	{r4, r5, r6, lr}
 8003092:	4e0d      	ldr	r6, [pc, #52]	; (80030c8 <__libc_init_array+0x38>)
 8003094:	4c0d      	ldr	r4, [pc, #52]	; (80030cc <__libc_init_array+0x3c>)
 8003096:	1ba4      	subs	r4, r4, r6
 8003098:	10a4      	asrs	r4, r4, #2
 800309a:	2500      	movs	r5, #0
 800309c:	42a5      	cmp	r5, r4
 800309e:	d109      	bne.n	80030b4 <__libc_init_array+0x24>
 80030a0:	4e0b      	ldr	r6, [pc, #44]	; (80030d0 <__libc_init_array+0x40>)
 80030a2:	4c0c      	ldr	r4, [pc, #48]	; (80030d4 <__libc_init_array+0x44>)
 80030a4:	f000 ff68 	bl	8003f78 <_init>
 80030a8:	1ba4      	subs	r4, r4, r6
 80030aa:	10a4      	asrs	r4, r4, #2
 80030ac:	2500      	movs	r5, #0
 80030ae:	42a5      	cmp	r5, r4
 80030b0:	d105      	bne.n	80030be <__libc_init_array+0x2e>
 80030b2:	bd70      	pop	{r4, r5, r6, pc}
 80030b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030b8:	4798      	blx	r3
 80030ba:	3501      	adds	r5, #1
 80030bc:	e7ee      	b.n	800309c <__libc_init_array+0xc>
 80030be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80030c2:	4798      	blx	r3
 80030c4:	3501      	adds	r5, #1
 80030c6:	e7f2      	b.n	80030ae <__libc_init_array+0x1e>
 80030c8:	080043e4 	.word	0x080043e4
 80030cc:	080043e4 	.word	0x080043e4
 80030d0:	080043e4 	.word	0x080043e4
 80030d4:	080043e8 	.word	0x080043e8

080030d8 <memset>:
 80030d8:	4402      	add	r2, r0
 80030da:	4603      	mov	r3, r0
 80030dc:	4293      	cmp	r3, r2
 80030de:	d100      	bne.n	80030e2 <memset+0xa>
 80030e0:	4770      	bx	lr
 80030e2:	f803 1b01 	strb.w	r1, [r3], #1
 80030e6:	e7f9      	b.n	80030dc <memset+0x4>

080030e8 <iprintf>:
 80030e8:	b40f      	push	{r0, r1, r2, r3}
 80030ea:	4b0a      	ldr	r3, [pc, #40]	; (8003114 <iprintf+0x2c>)
 80030ec:	b513      	push	{r0, r1, r4, lr}
 80030ee:	681c      	ldr	r4, [r3, #0]
 80030f0:	b124      	cbz	r4, 80030fc <iprintf+0x14>
 80030f2:	69a3      	ldr	r3, [r4, #24]
 80030f4:	b913      	cbnz	r3, 80030fc <iprintf+0x14>
 80030f6:	4620      	mov	r0, r4
 80030f8:	f000 fa22 	bl	8003540 <__sinit>
 80030fc:	ab05      	add	r3, sp, #20
 80030fe:	9a04      	ldr	r2, [sp, #16]
 8003100:	68a1      	ldr	r1, [r4, #8]
 8003102:	9301      	str	r3, [sp, #4]
 8003104:	4620      	mov	r0, r4
 8003106:	f000 fbdb 	bl	80038c0 <_vfiprintf_r>
 800310a:	b002      	add	sp, #8
 800310c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003110:	b004      	add	sp, #16
 8003112:	4770      	bx	lr
 8003114:	20000558 	.word	0x20000558

08003118 <_puts_r>:
 8003118:	b570      	push	{r4, r5, r6, lr}
 800311a:	460e      	mov	r6, r1
 800311c:	4605      	mov	r5, r0
 800311e:	b118      	cbz	r0, 8003128 <_puts_r+0x10>
 8003120:	6983      	ldr	r3, [r0, #24]
 8003122:	b90b      	cbnz	r3, 8003128 <_puts_r+0x10>
 8003124:	f000 fa0c 	bl	8003540 <__sinit>
 8003128:	69ab      	ldr	r3, [r5, #24]
 800312a:	68ac      	ldr	r4, [r5, #8]
 800312c:	b913      	cbnz	r3, 8003134 <_puts_r+0x1c>
 800312e:	4628      	mov	r0, r5
 8003130:	f000 fa06 	bl	8003540 <__sinit>
 8003134:	4b23      	ldr	r3, [pc, #140]	; (80031c4 <_puts_r+0xac>)
 8003136:	429c      	cmp	r4, r3
 8003138:	d117      	bne.n	800316a <_puts_r+0x52>
 800313a:	686c      	ldr	r4, [r5, #4]
 800313c:	89a3      	ldrh	r3, [r4, #12]
 800313e:	071b      	lsls	r3, r3, #28
 8003140:	d51d      	bpl.n	800317e <_puts_r+0x66>
 8003142:	6923      	ldr	r3, [r4, #16]
 8003144:	b1db      	cbz	r3, 800317e <_puts_r+0x66>
 8003146:	3e01      	subs	r6, #1
 8003148:	68a3      	ldr	r3, [r4, #8]
 800314a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800314e:	3b01      	subs	r3, #1
 8003150:	60a3      	str	r3, [r4, #8]
 8003152:	b9e9      	cbnz	r1, 8003190 <_puts_r+0x78>
 8003154:	2b00      	cmp	r3, #0
 8003156:	da2e      	bge.n	80031b6 <_puts_r+0x9e>
 8003158:	4622      	mov	r2, r4
 800315a:	210a      	movs	r1, #10
 800315c:	4628      	mov	r0, r5
 800315e:	f000 f83f 	bl	80031e0 <__swbuf_r>
 8003162:	3001      	adds	r0, #1
 8003164:	d011      	beq.n	800318a <_puts_r+0x72>
 8003166:	200a      	movs	r0, #10
 8003168:	e011      	b.n	800318e <_puts_r+0x76>
 800316a:	4b17      	ldr	r3, [pc, #92]	; (80031c8 <_puts_r+0xb0>)
 800316c:	429c      	cmp	r4, r3
 800316e:	d101      	bne.n	8003174 <_puts_r+0x5c>
 8003170:	68ac      	ldr	r4, [r5, #8]
 8003172:	e7e3      	b.n	800313c <_puts_r+0x24>
 8003174:	4b15      	ldr	r3, [pc, #84]	; (80031cc <_puts_r+0xb4>)
 8003176:	429c      	cmp	r4, r3
 8003178:	bf08      	it	eq
 800317a:	68ec      	ldreq	r4, [r5, #12]
 800317c:	e7de      	b.n	800313c <_puts_r+0x24>
 800317e:	4621      	mov	r1, r4
 8003180:	4628      	mov	r0, r5
 8003182:	f000 f87f 	bl	8003284 <__swsetup_r>
 8003186:	2800      	cmp	r0, #0
 8003188:	d0dd      	beq.n	8003146 <_puts_r+0x2e>
 800318a:	f04f 30ff 	mov.w	r0, #4294967295
 800318e:	bd70      	pop	{r4, r5, r6, pc}
 8003190:	2b00      	cmp	r3, #0
 8003192:	da04      	bge.n	800319e <_puts_r+0x86>
 8003194:	69a2      	ldr	r2, [r4, #24]
 8003196:	429a      	cmp	r2, r3
 8003198:	dc06      	bgt.n	80031a8 <_puts_r+0x90>
 800319a:	290a      	cmp	r1, #10
 800319c:	d004      	beq.n	80031a8 <_puts_r+0x90>
 800319e:	6823      	ldr	r3, [r4, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	6022      	str	r2, [r4, #0]
 80031a4:	7019      	strb	r1, [r3, #0]
 80031a6:	e7cf      	b.n	8003148 <_puts_r+0x30>
 80031a8:	4622      	mov	r2, r4
 80031aa:	4628      	mov	r0, r5
 80031ac:	f000 f818 	bl	80031e0 <__swbuf_r>
 80031b0:	3001      	adds	r0, #1
 80031b2:	d1c9      	bne.n	8003148 <_puts_r+0x30>
 80031b4:	e7e9      	b.n	800318a <_puts_r+0x72>
 80031b6:	6823      	ldr	r3, [r4, #0]
 80031b8:	200a      	movs	r0, #10
 80031ba:	1c5a      	adds	r2, r3, #1
 80031bc:	6022      	str	r2, [r4, #0]
 80031be:	7018      	strb	r0, [r3, #0]
 80031c0:	e7e5      	b.n	800318e <_puts_r+0x76>
 80031c2:	bf00      	nop
 80031c4:	08004370 	.word	0x08004370
 80031c8:	08004390 	.word	0x08004390
 80031cc:	08004350 	.word	0x08004350

080031d0 <puts>:
 80031d0:	4b02      	ldr	r3, [pc, #8]	; (80031dc <puts+0xc>)
 80031d2:	4601      	mov	r1, r0
 80031d4:	6818      	ldr	r0, [r3, #0]
 80031d6:	f7ff bf9f 	b.w	8003118 <_puts_r>
 80031da:	bf00      	nop
 80031dc:	20000558 	.word	0x20000558

080031e0 <__swbuf_r>:
 80031e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031e2:	460e      	mov	r6, r1
 80031e4:	4614      	mov	r4, r2
 80031e6:	4605      	mov	r5, r0
 80031e8:	b118      	cbz	r0, 80031f2 <__swbuf_r+0x12>
 80031ea:	6983      	ldr	r3, [r0, #24]
 80031ec:	b90b      	cbnz	r3, 80031f2 <__swbuf_r+0x12>
 80031ee:	f000 f9a7 	bl	8003540 <__sinit>
 80031f2:	4b21      	ldr	r3, [pc, #132]	; (8003278 <__swbuf_r+0x98>)
 80031f4:	429c      	cmp	r4, r3
 80031f6:	d12a      	bne.n	800324e <__swbuf_r+0x6e>
 80031f8:	686c      	ldr	r4, [r5, #4]
 80031fa:	69a3      	ldr	r3, [r4, #24]
 80031fc:	60a3      	str	r3, [r4, #8]
 80031fe:	89a3      	ldrh	r3, [r4, #12]
 8003200:	071a      	lsls	r2, r3, #28
 8003202:	d52e      	bpl.n	8003262 <__swbuf_r+0x82>
 8003204:	6923      	ldr	r3, [r4, #16]
 8003206:	b363      	cbz	r3, 8003262 <__swbuf_r+0x82>
 8003208:	6923      	ldr	r3, [r4, #16]
 800320a:	6820      	ldr	r0, [r4, #0]
 800320c:	1ac0      	subs	r0, r0, r3
 800320e:	6963      	ldr	r3, [r4, #20]
 8003210:	b2f6      	uxtb	r6, r6
 8003212:	4283      	cmp	r3, r0
 8003214:	4637      	mov	r7, r6
 8003216:	dc04      	bgt.n	8003222 <__swbuf_r+0x42>
 8003218:	4621      	mov	r1, r4
 800321a:	4628      	mov	r0, r5
 800321c:	f000 f926 	bl	800346c <_fflush_r>
 8003220:	bb28      	cbnz	r0, 800326e <__swbuf_r+0x8e>
 8003222:	68a3      	ldr	r3, [r4, #8]
 8003224:	3b01      	subs	r3, #1
 8003226:	60a3      	str	r3, [r4, #8]
 8003228:	6823      	ldr	r3, [r4, #0]
 800322a:	1c5a      	adds	r2, r3, #1
 800322c:	6022      	str	r2, [r4, #0]
 800322e:	701e      	strb	r6, [r3, #0]
 8003230:	6963      	ldr	r3, [r4, #20]
 8003232:	3001      	adds	r0, #1
 8003234:	4283      	cmp	r3, r0
 8003236:	d004      	beq.n	8003242 <__swbuf_r+0x62>
 8003238:	89a3      	ldrh	r3, [r4, #12]
 800323a:	07db      	lsls	r3, r3, #31
 800323c:	d519      	bpl.n	8003272 <__swbuf_r+0x92>
 800323e:	2e0a      	cmp	r6, #10
 8003240:	d117      	bne.n	8003272 <__swbuf_r+0x92>
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	f000 f911 	bl	800346c <_fflush_r>
 800324a:	b190      	cbz	r0, 8003272 <__swbuf_r+0x92>
 800324c:	e00f      	b.n	800326e <__swbuf_r+0x8e>
 800324e:	4b0b      	ldr	r3, [pc, #44]	; (800327c <__swbuf_r+0x9c>)
 8003250:	429c      	cmp	r4, r3
 8003252:	d101      	bne.n	8003258 <__swbuf_r+0x78>
 8003254:	68ac      	ldr	r4, [r5, #8]
 8003256:	e7d0      	b.n	80031fa <__swbuf_r+0x1a>
 8003258:	4b09      	ldr	r3, [pc, #36]	; (8003280 <__swbuf_r+0xa0>)
 800325a:	429c      	cmp	r4, r3
 800325c:	bf08      	it	eq
 800325e:	68ec      	ldreq	r4, [r5, #12]
 8003260:	e7cb      	b.n	80031fa <__swbuf_r+0x1a>
 8003262:	4621      	mov	r1, r4
 8003264:	4628      	mov	r0, r5
 8003266:	f000 f80d 	bl	8003284 <__swsetup_r>
 800326a:	2800      	cmp	r0, #0
 800326c:	d0cc      	beq.n	8003208 <__swbuf_r+0x28>
 800326e:	f04f 37ff 	mov.w	r7, #4294967295
 8003272:	4638      	mov	r0, r7
 8003274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003276:	bf00      	nop
 8003278:	08004370 	.word	0x08004370
 800327c:	08004390 	.word	0x08004390
 8003280:	08004350 	.word	0x08004350

08003284 <__swsetup_r>:
 8003284:	4b32      	ldr	r3, [pc, #200]	; (8003350 <__swsetup_r+0xcc>)
 8003286:	b570      	push	{r4, r5, r6, lr}
 8003288:	681d      	ldr	r5, [r3, #0]
 800328a:	4606      	mov	r6, r0
 800328c:	460c      	mov	r4, r1
 800328e:	b125      	cbz	r5, 800329a <__swsetup_r+0x16>
 8003290:	69ab      	ldr	r3, [r5, #24]
 8003292:	b913      	cbnz	r3, 800329a <__swsetup_r+0x16>
 8003294:	4628      	mov	r0, r5
 8003296:	f000 f953 	bl	8003540 <__sinit>
 800329a:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <__swsetup_r+0xd0>)
 800329c:	429c      	cmp	r4, r3
 800329e:	d10f      	bne.n	80032c0 <__swsetup_r+0x3c>
 80032a0:	686c      	ldr	r4, [r5, #4]
 80032a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80032a6:	b29a      	uxth	r2, r3
 80032a8:	0715      	lsls	r5, r2, #28
 80032aa:	d42c      	bmi.n	8003306 <__swsetup_r+0x82>
 80032ac:	06d0      	lsls	r0, r2, #27
 80032ae:	d411      	bmi.n	80032d4 <__swsetup_r+0x50>
 80032b0:	2209      	movs	r2, #9
 80032b2:	6032      	str	r2, [r6, #0]
 80032b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032b8:	81a3      	strh	r3, [r4, #12]
 80032ba:	f04f 30ff 	mov.w	r0, #4294967295
 80032be:	e03e      	b.n	800333e <__swsetup_r+0xba>
 80032c0:	4b25      	ldr	r3, [pc, #148]	; (8003358 <__swsetup_r+0xd4>)
 80032c2:	429c      	cmp	r4, r3
 80032c4:	d101      	bne.n	80032ca <__swsetup_r+0x46>
 80032c6:	68ac      	ldr	r4, [r5, #8]
 80032c8:	e7eb      	b.n	80032a2 <__swsetup_r+0x1e>
 80032ca:	4b24      	ldr	r3, [pc, #144]	; (800335c <__swsetup_r+0xd8>)
 80032cc:	429c      	cmp	r4, r3
 80032ce:	bf08      	it	eq
 80032d0:	68ec      	ldreq	r4, [r5, #12]
 80032d2:	e7e6      	b.n	80032a2 <__swsetup_r+0x1e>
 80032d4:	0751      	lsls	r1, r2, #29
 80032d6:	d512      	bpl.n	80032fe <__swsetup_r+0x7a>
 80032d8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032da:	b141      	cbz	r1, 80032ee <__swsetup_r+0x6a>
 80032dc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032e0:	4299      	cmp	r1, r3
 80032e2:	d002      	beq.n	80032ea <__swsetup_r+0x66>
 80032e4:	4630      	mov	r0, r6
 80032e6:	f000 fa19 	bl	800371c <_free_r>
 80032ea:	2300      	movs	r3, #0
 80032ec:	6363      	str	r3, [r4, #52]	; 0x34
 80032ee:	89a3      	ldrh	r3, [r4, #12]
 80032f0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032f4:	81a3      	strh	r3, [r4, #12]
 80032f6:	2300      	movs	r3, #0
 80032f8:	6063      	str	r3, [r4, #4]
 80032fa:	6923      	ldr	r3, [r4, #16]
 80032fc:	6023      	str	r3, [r4, #0]
 80032fe:	89a3      	ldrh	r3, [r4, #12]
 8003300:	f043 0308 	orr.w	r3, r3, #8
 8003304:	81a3      	strh	r3, [r4, #12]
 8003306:	6923      	ldr	r3, [r4, #16]
 8003308:	b94b      	cbnz	r3, 800331e <__swsetup_r+0x9a>
 800330a:	89a3      	ldrh	r3, [r4, #12]
 800330c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8003310:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003314:	d003      	beq.n	800331e <__swsetup_r+0x9a>
 8003316:	4621      	mov	r1, r4
 8003318:	4630      	mov	r0, r6
 800331a:	f000 f9bf 	bl	800369c <__smakebuf_r>
 800331e:	89a2      	ldrh	r2, [r4, #12]
 8003320:	f012 0301 	ands.w	r3, r2, #1
 8003324:	d00c      	beq.n	8003340 <__swsetup_r+0xbc>
 8003326:	2300      	movs	r3, #0
 8003328:	60a3      	str	r3, [r4, #8]
 800332a:	6963      	ldr	r3, [r4, #20]
 800332c:	425b      	negs	r3, r3
 800332e:	61a3      	str	r3, [r4, #24]
 8003330:	6923      	ldr	r3, [r4, #16]
 8003332:	b953      	cbnz	r3, 800334a <__swsetup_r+0xc6>
 8003334:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003338:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800333c:	d1ba      	bne.n	80032b4 <__swsetup_r+0x30>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	0792      	lsls	r2, r2, #30
 8003342:	bf58      	it	pl
 8003344:	6963      	ldrpl	r3, [r4, #20]
 8003346:	60a3      	str	r3, [r4, #8]
 8003348:	e7f2      	b.n	8003330 <__swsetup_r+0xac>
 800334a:	2000      	movs	r0, #0
 800334c:	e7f7      	b.n	800333e <__swsetup_r+0xba>
 800334e:	bf00      	nop
 8003350:	20000558 	.word	0x20000558
 8003354:	08004370 	.word	0x08004370
 8003358:	08004390 	.word	0x08004390
 800335c:	08004350 	.word	0x08004350

08003360 <__sflush_r>:
 8003360:	898a      	ldrh	r2, [r1, #12]
 8003362:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003366:	4605      	mov	r5, r0
 8003368:	0710      	lsls	r0, r2, #28
 800336a:	460c      	mov	r4, r1
 800336c:	d458      	bmi.n	8003420 <__sflush_r+0xc0>
 800336e:	684b      	ldr	r3, [r1, #4]
 8003370:	2b00      	cmp	r3, #0
 8003372:	dc05      	bgt.n	8003380 <__sflush_r+0x20>
 8003374:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8003376:	2b00      	cmp	r3, #0
 8003378:	dc02      	bgt.n	8003380 <__sflush_r+0x20>
 800337a:	2000      	movs	r0, #0
 800337c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003382:	2e00      	cmp	r6, #0
 8003384:	d0f9      	beq.n	800337a <__sflush_r+0x1a>
 8003386:	2300      	movs	r3, #0
 8003388:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800338c:	682f      	ldr	r7, [r5, #0]
 800338e:	6a21      	ldr	r1, [r4, #32]
 8003390:	602b      	str	r3, [r5, #0]
 8003392:	d032      	beq.n	80033fa <__sflush_r+0x9a>
 8003394:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8003396:	89a3      	ldrh	r3, [r4, #12]
 8003398:	075a      	lsls	r2, r3, #29
 800339a:	d505      	bpl.n	80033a8 <__sflush_r+0x48>
 800339c:	6863      	ldr	r3, [r4, #4]
 800339e:	1ac0      	subs	r0, r0, r3
 80033a0:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80033a2:	b10b      	cbz	r3, 80033a8 <__sflush_r+0x48>
 80033a4:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80033a6:	1ac0      	subs	r0, r0, r3
 80033a8:	2300      	movs	r3, #0
 80033aa:	4602      	mov	r2, r0
 80033ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80033ae:	6a21      	ldr	r1, [r4, #32]
 80033b0:	4628      	mov	r0, r5
 80033b2:	47b0      	blx	r6
 80033b4:	1c43      	adds	r3, r0, #1
 80033b6:	89a3      	ldrh	r3, [r4, #12]
 80033b8:	d106      	bne.n	80033c8 <__sflush_r+0x68>
 80033ba:	6829      	ldr	r1, [r5, #0]
 80033bc:	291d      	cmp	r1, #29
 80033be:	d848      	bhi.n	8003452 <__sflush_r+0xf2>
 80033c0:	4a29      	ldr	r2, [pc, #164]	; (8003468 <__sflush_r+0x108>)
 80033c2:	40ca      	lsrs	r2, r1
 80033c4:	07d6      	lsls	r6, r2, #31
 80033c6:	d544      	bpl.n	8003452 <__sflush_r+0xf2>
 80033c8:	2200      	movs	r2, #0
 80033ca:	6062      	str	r2, [r4, #4]
 80033cc:	04d9      	lsls	r1, r3, #19
 80033ce:	6922      	ldr	r2, [r4, #16]
 80033d0:	6022      	str	r2, [r4, #0]
 80033d2:	d504      	bpl.n	80033de <__sflush_r+0x7e>
 80033d4:	1c42      	adds	r2, r0, #1
 80033d6:	d101      	bne.n	80033dc <__sflush_r+0x7c>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	b903      	cbnz	r3, 80033de <__sflush_r+0x7e>
 80033dc:	6560      	str	r0, [r4, #84]	; 0x54
 80033de:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033e0:	602f      	str	r7, [r5, #0]
 80033e2:	2900      	cmp	r1, #0
 80033e4:	d0c9      	beq.n	800337a <__sflush_r+0x1a>
 80033e6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033ea:	4299      	cmp	r1, r3
 80033ec:	d002      	beq.n	80033f4 <__sflush_r+0x94>
 80033ee:	4628      	mov	r0, r5
 80033f0:	f000 f994 	bl	800371c <_free_r>
 80033f4:	2000      	movs	r0, #0
 80033f6:	6360      	str	r0, [r4, #52]	; 0x34
 80033f8:	e7c0      	b.n	800337c <__sflush_r+0x1c>
 80033fa:	2301      	movs	r3, #1
 80033fc:	4628      	mov	r0, r5
 80033fe:	47b0      	blx	r6
 8003400:	1c41      	adds	r1, r0, #1
 8003402:	d1c8      	bne.n	8003396 <__sflush_r+0x36>
 8003404:	682b      	ldr	r3, [r5, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d0c5      	beq.n	8003396 <__sflush_r+0x36>
 800340a:	2b1d      	cmp	r3, #29
 800340c:	d001      	beq.n	8003412 <__sflush_r+0xb2>
 800340e:	2b16      	cmp	r3, #22
 8003410:	d101      	bne.n	8003416 <__sflush_r+0xb6>
 8003412:	602f      	str	r7, [r5, #0]
 8003414:	e7b1      	b.n	800337a <__sflush_r+0x1a>
 8003416:	89a3      	ldrh	r3, [r4, #12]
 8003418:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800341c:	81a3      	strh	r3, [r4, #12]
 800341e:	e7ad      	b.n	800337c <__sflush_r+0x1c>
 8003420:	690f      	ldr	r7, [r1, #16]
 8003422:	2f00      	cmp	r7, #0
 8003424:	d0a9      	beq.n	800337a <__sflush_r+0x1a>
 8003426:	0793      	lsls	r3, r2, #30
 8003428:	680e      	ldr	r6, [r1, #0]
 800342a:	bf08      	it	eq
 800342c:	694b      	ldreq	r3, [r1, #20]
 800342e:	600f      	str	r7, [r1, #0]
 8003430:	bf18      	it	ne
 8003432:	2300      	movne	r3, #0
 8003434:	eba6 0807 	sub.w	r8, r6, r7
 8003438:	608b      	str	r3, [r1, #8]
 800343a:	f1b8 0f00 	cmp.w	r8, #0
 800343e:	dd9c      	ble.n	800337a <__sflush_r+0x1a>
 8003440:	4643      	mov	r3, r8
 8003442:	463a      	mov	r2, r7
 8003444:	6a21      	ldr	r1, [r4, #32]
 8003446:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8003448:	4628      	mov	r0, r5
 800344a:	47b0      	blx	r6
 800344c:	2800      	cmp	r0, #0
 800344e:	dc06      	bgt.n	800345e <__sflush_r+0xfe>
 8003450:	89a3      	ldrh	r3, [r4, #12]
 8003452:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003456:	81a3      	strh	r3, [r4, #12]
 8003458:	f04f 30ff 	mov.w	r0, #4294967295
 800345c:	e78e      	b.n	800337c <__sflush_r+0x1c>
 800345e:	4407      	add	r7, r0
 8003460:	eba8 0800 	sub.w	r8, r8, r0
 8003464:	e7e9      	b.n	800343a <__sflush_r+0xda>
 8003466:	bf00      	nop
 8003468:	20400001 	.word	0x20400001

0800346c <_fflush_r>:
 800346c:	b538      	push	{r3, r4, r5, lr}
 800346e:	690b      	ldr	r3, [r1, #16]
 8003470:	4605      	mov	r5, r0
 8003472:	460c      	mov	r4, r1
 8003474:	b1db      	cbz	r3, 80034ae <_fflush_r+0x42>
 8003476:	b118      	cbz	r0, 8003480 <_fflush_r+0x14>
 8003478:	6983      	ldr	r3, [r0, #24]
 800347a:	b90b      	cbnz	r3, 8003480 <_fflush_r+0x14>
 800347c:	f000 f860 	bl	8003540 <__sinit>
 8003480:	4b0c      	ldr	r3, [pc, #48]	; (80034b4 <_fflush_r+0x48>)
 8003482:	429c      	cmp	r4, r3
 8003484:	d109      	bne.n	800349a <_fflush_r+0x2e>
 8003486:	686c      	ldr	r4, [r5, #4]
 8003488:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800348c:	b17b      	cbz	r3, 80034ae <_fflush_r+0x42>
 800348e:	4621      	mov	r1, r4
 8003490:	4628      	mov	r0, r5
 8003492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003496:	f7ff bf63 	b.w	8003360 <__sflush_r>
 800349a:	4b07      	ldr	r3, [pc, #28]	; (80034b8 <_fflush_r+0x4c>)
 800349c:	429c      	cmp	r4, r3
 800349e:	d101      	bne.n	80034a4 <_fflush_r+0x38>
 80034a0:	68ac      	ldr	r4, [r5, #8]
 80034a2:	e7f1      	b.n	8003488 <_fflush_r+0x1c>
 80034a4:	4b05      	ldr	r3, [pc, #20]	; (80034bc <_fflush_r+0x50>)
 80034a6:	429c      	cmp	r4, r3
 80034a8:	bf08      	it	eq
 80034aa:	68ec      	ldreq	r4, [r5, #12]
 80034ac:	e7ec      	b.n	8003488 <_fflush_r+0x1c>
 80034ae:	2000      	movs	r0, #0
 80034b0:	bd38      	pop	{r3, r4, r5, pc}
 80034b2:	bf00      	nop
 80034b4:	08004370 	.word	0x08004370
 80034b8:	08004390 	.word	0x08004390
 80034bc:	08004350 	.word	0x08004350

080034c0 <std>:
 80034c0:	2300      	movs	r3, #0
 80034c2:	b510      	push	{r4, lr}
 80034c4:	4604      	mov	r4, r0
 80034c6:	e9c0 3300 	strd	r3, r3, [r0]
 80034ca:	6083      	str	r3, [r0, #8]
 80034cc:	8181      	strh	r1, [r0, #12]
 80034ce:	6643      	str	r3, [r0, #100]	; 0x64
 80034d0:	81c2      	strh	r2, [r0, #14]
 80034d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034d6:	6183      	str	r3, [r0, #24]
 80034d8:	4619      	mov	r1, r3
 80034da:	2208      	movs	r2, #8
 80034dc:	305c      	adds	r0, #92	; 0x5c
 80034de:	f7ff fdfb 	bl	80030d8 <memset>
 80034e2:	4b05      	ldr	r3, [pc, #20]	; (80034f8 <std+0x38>)
 80034e4:	6263      	str	r3, [r4, #36]	; 0x24
 80034e6:	4b05      	ldr	r3, [pc, #20]	; (80034fc <std+0x3c>)
 80034e8:	62a3      	str	r3, [r4, #40]	; 0x28
 80034ea:	4b05      	ldr	r3, [pc, #20]	; (8003500 <std+0x40>)
 80034ec:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034ee:	4b05      	ldr	r3, [pc, #20]	; (8003504 <std+0x44>)
 80034f0:	6224      	str	r4, [r4, #32]
 80034f2:	6323      	str	r3, [r4, #48]	; 0x30
 80034f4:	bd10      	pop	{r4, pc}
 80034f6:	bf00      	nop
 80034f8:	08003e1d 	.word	0x08003e1d
 80034fc:	08003e3f 	.word	0x08003e3f
 8003500:	08003e77 	.word	0x08003e77
 8003504:	08003e9b 	.word	0x08003e9b

08003508 <_cleanup_r>:
 8003508:	4901      	ldr	r1, [pc, #4]	; (8003510 <_cleanup_r+0x8>)
 800350a:	f000 b885 	b.w	8003618 <_fwalk_reent>
 800350e:	bf00      	nop
 8003510:	0800346d 	.word	0x0800346d

08003514 <__sfmoreglue>:
 8003514:	b570      	push	{r4, r5, r6, lr}
 8003516:	1e4a      	subs	r2, r1, #1
 8003518:	2568      	movs	r5, #104	; 0x68
 800351a:	4355      	muls	r5, r2
 800351c:	460e      	mov	r6, r1
 800351e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8003522:	f000 f949 	bl	80037b8 <_malloc_r>
 8003526:	4604      	mov	r4, r0
 8003528:	b140      	cbz	r0, 800353c <__sfmoreglue+0x28>
 800352a:	2100      	movs	r1, #0
 800352c:	e9c0 1600 	strd	r1, r6, [r0]
 8003530:	300c      	adds	r0, #12
 8003532:	60a0      	str	r0, [r4, #8]
 8003534:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8003538:	f7ff fdce 	bl	80030d8 <memset>
 800353c:	4620      	mov	r0, r4
 800353e:	bd70      	pop	{r4, r5, r6, pc}

08003540 <__sinit>:
 8003540:	6983      	ldr	r3, [r0, #24]
 8003542:	b510      	push	{r4, lr}
 8003544:	4604      	mov	r4, r0
 8003546:	bb33      	cbnz	r3, 8003596 <__sinit+0x56>
 8003548:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800354c:	6503      	str	r3, [r0, #80]	; 0x50
 800354e:	4b12      	ldr	r3, [pc, #72]	; (8003598 <__sinit+0x58>)
 8003550:	4a12      	ldr	r2, [pc, #72]	; (800359c <__sinit+0x5c>)
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	6282      	str	r2, [r0, #40]	; 0x28
 8003556:	4298      	cmp	r0, r3
 8003558:	bf04      	itt	eq
 800355a:	2301      	moveq	r3, #1
 800355c:	6183      	streq	r3, [r0, #24]
 800355e:	f000 f81f 	bl	80035a0 <__sfp>
 8003562:	6060      	str	r0, [r4, #4]
 8003564:	4620      	mov	r0, r4
 8003566:	f000 f81b 	bl	80035a0 <__sfp>
 800356a:	60a0      	str	r0, [r4, #8]
 800356c:	4620      	mov	r0, r4
 800356e:	f000 f817 	bl	80035a0 <__sfp>
 8003572:	2200      	movs	r2, #0
 8003574:	60e0      	str	r0, [r4, #12]
 8003576:	2104      	movs	r1, #4
 8003578:	6860      	ldr	r0, [r4, #4]
 800357a:	f7ff ffa1 	bl	80034c0 <std>
 800357e:	2201      	movs	r2, #1
 8003580:	2109      	movs	r1, #9
 8003582:	68a0      	ldr	r0, [r4, #8]
 8003584:	f7ff ff9c 	bl	80034c0 <std>
 8003588:	2202      	movs	r2, #2
 800358a:	2112      	movs	r1, #18
 800358c:	68e0      	ldr	r0, [r4, #12]
 800358e:	f7ff ff97 	bl	80034c0 <std>
 8003592:	2301      	movs	r3, #1
 8003594:	61a3      	str	r3, [r4, #24]
 8003596:	bd10      	pop	{r4, pc}
 8003598:	0800434c 	.word	0x0800434c
 800359c:	08003509 	.word	0x08003509

080035a0 <__sfp>:
 80035a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80035a2:	4b1b      	ldr	r3, [pc, #108]	; (8003610 <__sfp+0x70>)
 80035a4:	681e      	ldr	r6, [r3, #0]
 80035a6:	69b3      	ldr	r3, [r6, #24]
 80035a8:	4607      	mov	r7, r0
 80035aa:	b913      	cbnz	r3, 80035b2 <__sfp+0x12>
 80035ac:	4630      	mov	r0, r6
 80035ae:	f7ff ffc7 	bl	8003540 <__sinit>
 80035b2:	3648      	adds	r6, #72	; 0x48
 80035b4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80035b8:	3b01      	subs	r3, #1
 80035ba:	d503      	bpl.n	80035c4 <__sfp+0x24>
 80035bc:	6833      	ldr	r3, [r6, #0]
 80035be:	b133      	cbz	r3, 80035ce <__sfp+0x2e>
 80035c0:	6836      	ldr	r6, [r6, #0]
 80035c2:	e7f7      	b.n	80035b4 <__sfp+0x14>
 80035c4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80035c8:	b16d      	cbz	r5, 80035e6 <__sfp+0x46>
 80035ca:	3468      	adds	r4, #104	; 0x68
 80035cc:	e7f4      	b.n	80035b8 <__sfp+0x18>
 80035ce:	2104      	movs	r1, #4
 80035d0:	4638      	mov	r0, r7
 80035d2:	f7ff ff9f 	bl	8003514 <__sfmoreglue>
 80035d6:	6030      	str	r0, [r6, #0]
 80035d8:	2800      	cmp	r0, #0
 80035da:	d1f1      	bne.n	80035c0 <__sfp+0x20>
 80035dc:	230c      	movs	r3, #12
 80035de:	603b      	str	r3, [r7, #0]
 80035e0:	4604      	mov	r4, r0
 80035e2:	4620      	mov	r0, r4
 80035e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035e6:	4b0b      	ldr	r3, [pc, #44]	; (8003614 <__sfp+0x74>)
 80035e8:	6665      	str	r5, [r4, #100]	; 0x64
 80035ea:	e9c4 5500 	strd	r5, r5, [r4]
 80035ee:	60a5      	str	r5, [r4, #8]
 80035f0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035f4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035f8:	2208      	movs	r2, #8
 80035fa:	4629      	mov	r1, r5
 80035fc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8003600:	f7ff fd6a 	bl	80030d8 <memset>
 8003604:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8003608:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800360c:	e7e9      	b.n	80035e2 <__sfp+0x42>
 800360e:	bf00      	nop
 8003610:	0800434c 	.word	0x0800434c
 8003614:	ffff0001 	.word	0xffff0001

08003618 <_fwalk_reent>:
 8003618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800361c:	4680      	mov	r8, r0
 800361e:	4689      	mov	r9, r1
 8003620:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8003624:	2600      	movs	r6, #0
 8003626:	b914      	cbnz	r4, 800362e <_fwalk_reent+0x16>
 8003628:	4630      	mov	r0, r6
 800362a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800362e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003632:	3f01      	subs	r7, #1
 8003634:	d501      	bpl.n	800363a <_fwalk_reent+0x22>
 8003636:	6824      	ldr	r4, [r4, #0]
 8003638:	e7f5      	b.n	8003626 <_fwalk_reent+0xe>
 800363a:	89ab      	ldrh	r3, [r5, #12]
 800363c:	2b01      	cmp	r3, #1
 800363e:	d907      	bls.n	8003650 <_fwalk_reent+0x38>
 8003640:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003644:	3301      	adds	r3, #1
 8003646:	d003      	beq.n	8003650 <_fwalk_reent+0x38>
 8003648:	4629      	mov	r1, r5
 800364a:	4640      	mov	r0, r8
 800364c:	47c8      	blx	r9
 800364e:	4306      	orrs	r6, r0
 8003650:	3568      	adds	r5, #104	; 0x68
 8003652:	e7ee      	b.n	8003632 <_fwalk_reent+0x1a>

08003654 <__swhatbuf_r>:
 8003654:	b570      	push	{r4, r5, r6, lr}
 8003656:	460e      	mov	r6, r1
 8003658:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800365c:	2900      	cmp	r1, #0
 800365e:	b096      	sub	sp, #88	; 0x58
 8003660:	4614      	mov	r4, r2
 8003662:	461d      	mov	r5, r3
 8003664:	da07      	bge.n	8003676 <__swhatbuf_r+0x22>
 8003666:	2300      	movs	r3, #0
 8003668:	602b      	str	r3, [r5, #0]
 800366a:	89b3      	ldrh	r3, [r6, #12]
 800366c:	061a      	lsls	r2, r3, #24
 800366e:	d410      	bmi.n	8003692 <__swhatbuf_r+0x3e>
 8003670:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003674:	e00e      	b.n	8003694 <__swhatbuf_r+0x40>
 8003676:	466a      	mov	r2, sp
 8003678:	f000 fc36 	bl	8003ee8 <_fstat_r>
 800367c:	2800      	cmp	r0, #0
 800367e:	dbf2      	blt.n	8003666 <__swhatbuf_r+0x12>
 8003680:	9a01      	ldr	r2, [sp, #4]
 8003682:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8003686:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800368a:	425a      	negs	r2, r3
 800368c:	415a      	adcs	r2, r3
 800368e:	602a      	str	r2, [r5, #0]
 8003690:	e7ee      	b.n	8003670 <__swhatbuf_r+0x1c>
 8003692:	2340      	movs	r3, #64	; 0x40
 8003694:	2000      	movs	r0, #0
 8003696:	6023      	str	r3, [r4, #0]
 8003698:	b016      	add	sp, #88	; 0x58
 800369a:	bd70      	pop	{r4, r5, r6, pc}

0800369c <__smakebuf_r>:
 800369c:	898b      	ldrh	r3, [r1, #12]
 800369e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80036a0:	079d      	lsls	r5, r3, #30
 80036a2:	4606      	mov	r6, r0
 80036a4:	460c      	mov	r4, r1
 80036a6:	d507      	bpl.n	80036b8 <__smakebuf_r+0x1c>
 80036a8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80036ac:	6023      	str	r3, [r4, #0]
 80036ae:	6123      	str	r3, [r4, #16]
 80036b0:	2301      	movs	r3, #1
 80036b2:	6163      	str	r3, [r4, #20]
 80036b4:	b002      	add	sp, #8
 80036b6:	bd70      	pop	{r4, r5, r6, pc}
 80036b8:	ab01      	add	r3, sp, #4
 80036ba:	466a      	mov	r2, sp
 80036bc:	f7ff ffca 	bl	8003654 <__swhatbuf_r>
 80036c0:	9900      	ldr	r1, [sp, #0]
 80036c2:	4605      	mov	r5, r0
 80036c4:	4630      	mov	r0, r6
 80036c6:	f000 f877 	bl	80037b8 <_malloc_r>
 80036ca:	b948      	cbnz	r0, 80036e0 <__smakebuf_r+0x44>
 80036cc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036d0:	059a      	lsls	r2, r3, #22
 80036d2:	d4ef      	bmi.n	80036b4 <__smakebuf_r+0x18>
 80036d4:	f023 0303 	bic.w	r3, r3, #3
 80036d8:	f043 0302 	orr.w	r3, r3, #2
 80036dc:	81a3      	strh	r3, [r4, #12]
 80036de:	e7e3      	b.n	80036a8 <__smakebuf_r+0xc>
 80036e0:	4b0d      	ldr	r3, [pc, #52]	; (8003718 <__smakebuf_r+0x7c>)
 80036e2:	62b3      	str	r3, [r6, #40]	; 0x28
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	6020      	str	r0, [r4, #0]
 80036e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036ec:	81a3      	strh	r3, [r4, #12]
 80036ee:	9b00      	ldr	r3, [sp, #0]
 80036f0:	6163      	str	r3, [r4, #20]
 80036f2:	9b01      	ldr	r3, [sp, #4]
 80036f4:	6120      	str	r0, [r4, #16]
 80036f6:	b15b      	cbz	r3, 8003710 <__smakebuf_r+0x74>
 80036f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036fc:	4630      	mov	r0, r6
 80036fe:	f000 fc05 	bl	8003f0c <_isatty_r>
 8003702:	b128      	cbz	r0, 8003710 <__smakebuf_r+0x74>
 8003704:	89a3      	ldrh	r3, [r4, #12]
 8003706:	f023 0303 	bic.w	r3, r3, #3
 800370a:	f043 0301 	orr.w	r3, r3, #1
 800370e:	81a3      	strh	r3, [r4, #12]
 8003710:	89a3      	ldrh	r3, [r4, #12]
 8003712:	431d      	orrs	r5, r3
 8003714:	81a5      	strh	r5, [r4, #12]
 8003716:	e7cd      	b.n	80036b4 <__smakebuf_r+0x18>
 8003718:	08003509 	.word	0x08003509

0800371c <_free_r>:
 800371c:	b538      	push	{r3, r4, r5, lr}
 800371e:	4605      	mov	r5, r0
 8003720:	2900      	cmp	r1, #0
 8003722:	d045      	beq.n	80037b0 <_free_r+0x94>
 8003724:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003728:	1f0c      	subs	r4, r1, #4
 800372a:	2b00      	cmp	r3, #0
 800372c:	bfb8      	it	lt
 800372e:	18e4      	addlt	r4, r4, r3
 8003730:	f000 fc0e 	bl	8003f50 <__malloc_lock>
 8003734:	4a1f      	ldr	r2, [pc, #124]	; (80037b4 <_free_r+0x98>)
 8003736:	6813      	ldr	r3, [r2, #0]
 8003738:	4610      	mov	r0, r2
 800373a:	b933      	cbnz	r3, 800374a <_free_r+0x2e>
 800373c:	6063      	str	r3, [r4, #4]
 800373e:	6014      	str	r4, [r2, #0]
 8003740:	4628      	mov	r0, r5
 8003742:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003746:	f000 bc04 	b.w	8003f52 <__malloc_unlock>
 800374a:	42a3      	cmp	r3, r4
 800374c:	d90c      	bls.n	8003768 <_free_r+0x4c>
 800374e:	6821      	ldr	r1, [r4, #0]
 8003750:	1862      	adds	r2, r4, r1
 8003752:	4293      	cmp	r3, r2
 8003754:	bf04      	itt	eq
 8003756:	681a      	ldreq	r2, [r3, #0]
 8003758:	685b      	ldreq	r3, [r3, #4]
 800375a:	6063      	str	r3, [r4, #4]
 800375c:	bf04      	itt	eq
 800375e:	1852      	addeq	r2, r2, r1
 8003760:	6022      	streq	r2, [r4, #0]
 8003762:	6004      	str	r4, [r0, #0]
 8003764:	e7ec      	b.n	8003740 <_free_r+0x24>
 8003766:	4613      	mov	r3, r2
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	b10a      	cbz	r2, 8003770 <_free_r+0x54>
 800376c:	42a2      	cmp	r2, r4
 800376e:	d9fa      	bls.n	8003766 <_free_r+0x4a>
 8003770:	6819      	ldr	r1, [r3, #0]
 8003772:	1858      	adds	r0, r3, r1
 8003774:	42a0      	cmp	r0, r4
 8003776:	d10b      	bne.n	8003790 <_free_r+0x74>
 8003778:	6820      	ldr	r0, [r4, #0]
 800377a:	4401      	add	r1, r0
 800377c:	1858      	adds	r0, r3, r1
 800377e:	4282      	cmp	r2, r0
 8003780:	6019      	str	r1, [r3, #0]
 8003782:	d1dd      	bne.n	8003740 <_free_r+0x24>
 8003784:	6810      	ldr	r0, [r2, #0]
 8003786:	6852      	ldr	r2, [r2, #4]
 8003788:	605a      	str	r2, [r3, #4]
 800378a:	4401      	add	r1, r0
 800378c:	6019      	str	r1, [r3, #0]
 800378e:	e7d7      	b.n	8003740 <_free_r+0x24>
 8003790:	d902      	bls.n	8003798 <_free_r+0x7c>
 8003792:	230c      	movs	r3, #12
 8003794:	602b      	str	r3, [r5, #0]
 8003796:	e7d3      	b.n	8003740 <_free_r+0x24>
 8003798:	6820      	ldr	r0, [r4, #0]
 800379a:	1821      	adds	r1, r4, r0
 800379c:	428a      	cmp	r2, r1
 800379e:	bf04      	itt	eq
 80037a0:	6811      	ldreq	r1, [r2, #0]
 80037a2:	6852      	ldreq	r2, [r2, #4]
 80037a4:	6062      	str	r2, [r4, #4]
 80037a6:	bf04      	itt	eq
 80037a8:	1809      	addeq	r1, r1, r0
 80037aa:	6021      	streq	r1, [r4, #0]
 80037ac:	605c      	str	r4, [r3, #4]
 80037ae:	e7c7      	b.n	8003740 <_free_r+0x24>
 80037b0:	bd38      	pop	{r3, r4, r5, pc}
 80037b2:	bf00      	nop
 80037b4:	200005f0 	.word	0x200005f0

080037b8 <_malloc_r>:
 80037b8:	b570      	push	{r4, r5, r6, lr}
 80037ba:	1ccd      	adds	r5, r1, #3
 80037bc:	f025 0503 	bic.w	r5, r5, #3
 80037c0:	3508      	adds	r5, #8
 80037c2:	2d0c      	cmp	r5, #12
 80037c4:	bf38      	it	cc
 80037c6:	250c      	movcc	r5, #12
 80037c8:	2d00      	cmp	r5, #0
 80037ca:	4606      	mov	r6, r0
 80037cc:	db01      	blt.n	80037d2 <_malloc_r+0x1a>
 80037ce:	42a9      	cmp	r1, r5
 80037d0:	d903      	bls.n	80037da <_malloc_r+0x22>
 80037d2:	230c      	movs	r3, #12
 80037d4:	6033      	str	r3, [r6, #0]
 80037d6:	2000      	movs	r0, #0
 80037d8:	bd70      	pop	{r4, r5, r6, pc}
 80037da:	f000 fbb9 	bl	8003f50 <__malloc_lock>
 80037de:	4a21      	ldr	r2, [pc, #132]	; (8003864 <_malloc_r+0xac>)
 80037e0:	6814      	ldr	r4, [r2, #0]
 80037e2:	4621      	mov	r1, r4
 80037e4:	b991      	cbnz	r1, 800380c <_malloc_r+0x54>
 80037e6:	4c20      	ldr	r4, [pc, #128]	; (8003868 <_malloc_r+0xb0>)
 80037e8:	6823      	ldr	r3, [r4, #0]
 80037ea:	b91b      	cbnz	r3, 80037f4 <_malloc_r+0x3c>
 80037ec:	4630      	mov	r0, r6
 80037ee:	f000 fb05 	bl	8003dfc <_sbrk_r>
 80037f2:	6020      	str	r0, [r4, #0]
 80037f4:	4629      	mov	r1, r5
 80037f6:	4630      	mov	r0, r6
 80037f8:	f000 fb00 	bl	8003dfc <_sbrk_r>
 80037fc:	1c43      	adds	r3, r0, #1
 80037fe:	d124      	bne.n	800384a <_malloc_r+0x92>
 8003800:	230c      	movs	r3, #12
 8003802:	6033      	str	r3, [r6, #0]
 8003804:	4630      	mov	r0, r6
 8003806:	f000 fba4 	bl	8003f52 <__malloc_unlock>
 800380a:	e7e4      	b.n	80037d6 <_malloc_r+0x1e>
 800380c:	680b      	ldr	r3, [r1, #0]
 800380e:	1b5b      	subs	r3, r3, r5
 8003810:	d418      	bmi.n	8003844 <_malloc_r+0x8c>
 8003812:	2b0b      	cmp	r3, #11
 8003814:	d90f      	bls.n	8003836 <_malloc_r+0x7e>
 8003816:	600b      	str	r3, [r1, #0]
 8003818:	50cd      	str	r5, [r1, r3]
 800381a:	18cc      	adds	r4, r1, r3
 800381c:	4630      	mov	r0, r6
 800381e:	f000 fb98 	bl	8003f52 <__malloc_unlock>
 8003822:	f104 000b 	add.w	r0, r4, #11
 8003826:	1d23      	adds	r3, r4, #4
 8003828:	f020 0007 	bic.w	r0, r0, #7
 800382c:	1ac3      	subs	r3, r0, r3
 800382e:	d0d3      	beq.n	80037d8 <_malloc_r+0x20>
 8003830:	425a      	negs	r2, r3
 8003832:	50e2      	str	r2, [r4, r3]
 8003834:	e7d0      	b.n	80037d8 <_malloc_r+0x20>
 8003836:	428c      	cmp	r4, r1
 8003838:	684b      	ldr	r3, [r1, #4]
 800383a:	bf16      	itet	ne
 800383c:	6063      	strne	r3, [r4, #4]
 800383e:	6013      	streq	r3, [r2, #0]
 8003840:	460c      	movne	r4, r1
 8003842:	e7eb      	b.n	800381c <_malloc_r+0x64>
 8003844:	460c      	mov	r4, r1
 8003846:	6849      	ldr	r1, [r1, #4]
 8003848:	e7cc      	b.n	80037e4 <_malloc_r+0x2c>
 800384a:	1cc4      	adds	r4, r0, #3
 800384c:	f024 0403 	bic.w	r4, r4, #3
 8003850:	42a0      	cmp	r0, r4
 8003852:	d005      	beq.n	8003860 <_malloc_r+0xa8>
 8003854:	1a21      	subs	r1, r4, r0
 8003856:	4630      	mov	r0, r6
 8003858:	f000 fad0 	bl	8003dfc <_sbrk_r>
 800385c:	3001      	adds	r0, #1
 800385e:	d0cf      	beq.n	8003800 <_malloc_r+0x48>
 8003860:	6025      	str	r5, [r4, #0]
 8003862:	e7db      	b.n	800381c <_malloc_r+0x64>
 8003864:	200005f0 	.word	0x200005f0
 8003868:	200005f4 	.word	0x200005f4

0800386c <__sfputc_r>:
 800386c:	6893      	ldr	r3, [r2, #8]
 800386e:	3b01      	subs	r3, #1
 8003870:	2b00      	cmp	r3, #0
 8003872:	b410      	push	{r4}
 8003874:	6093      	str	r3, [r2, #8]
 8003876:	da08      	bge.n	800388a <__sfputc_r+0x1e>
 8003878:	6994      	ldr	r4, [r2, #24]
 800387a:	42a3      	cmp	r3, r4
 800387c:	db01      	blt.n	8003882 <__sfputc_r+0x16>
 800387e:	290a      	cmp	r1, #10
 8003880:	d103      	bne.n	800388a <__sfputc_r+0x1e>
 8003882:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003886:	f7ff bcab 	b.w	80031e0 <__swbuf_r>
 800388a:	6813      	ldr	r3, [r2, #0]
 800388c:	1c58      	adds	r0, r3, #1
 800388e:	6010      	str	r0, [r2, #0]
 8003890:	7019      	strb	r1, [r3, #0]
 8003892:	4608      	mov	r0, r1
 8003894:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003898:	4770      	bx	lr

0800389a <__sfputs_r>:
 800389a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800389c:	4606      	mov	r6, r0
 800389e:	460f      	mov	r7, r1
 80038a0:	4614      	mov	r4, r2
 80038a2:	18d5      	adds	r5, r2, r3
 80038a4:	42ac      	cmp	r4, r5
 80038a6:	d101      	bne.n	80038ac <__sfputs_r+0x12>
 80038a8:	2000      	movs	r0, #0
 80038aa:	e007      	b.n	80038bc <__sfputs_r+0x22>
 80038ac:	463a      	mov	r2, r7
 80038ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80038b2:	4630      	mov	r0, r6
 80038b4:	f7ff ffda 	bl	800386c <__sfputc_r>
 80038b8:	1c43      	adds	r3, r0, #1
 80038ba:	d1f3      	bne.n	80038a4 <__sfputs_r+0xa>
 80038bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080038c0 <_vfiprintf_r>:
 80038c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80038c4:	460c      	mov	r4, r1
 80038c6:	b09d      	sub	sp, #116	; 0x74
 80038c8:	4617      	mov	r7, r2
 80038ca:	461d      	mov	r5, r3
 80038cc:	4606      	mov	r6, r0
 80038ce:	b118      	cbz	r0, 80038d8 <_vfiprintf_r+0x18>
 80038d0:	6983      	ldr	r3, [r0, #24]
 80038d2:	b90b      	cbnz	r3, 80038d8 <_vfiprintf_r+0x18>
 80038d4:	f7ff fe34 	bl	8003540 <__sinit>
 80038d8:	4b7c      	ldr	r3, [pc, #496]	; (8003acc <_vfiprintf_r+0x20c>)
 80038da:	429c      	cmp	r4, r3
 80038dc:	d158      	bne.n	8003990 <_vfiprintf_r+0xd0>
 80038de:	6874      	ldr	r4, [r6, #4]
 80038e0:	89a3      	ldrh	r3, [r4, #12]
 80038e2:	0718      	lsls	r0, r3, #28
 80038e4:	d55e      	bpl.n	80039a4 <_vfiprintf_r+0xe4>
 80038e6:	6923      	ldr	r3, [r4, #16]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05b      	beq.n	80039a4 <_vfiprintf_r+0xe4>
 80038ec:	2300      	movs	r3, #0
 80038ee:	9309      	str	r3, [sp, #36]	; 0x24
 80038f0:	2320      	movs	r3, #32
 80038f2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038f6:	2330      	movs	r3, #48	; 0x30
 80038f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038fc:	9503      	str	r5, [sp, #12]
 80038fe:	f04f 0b01 	mov.w	fp, #1
 8003902:	46b8      	mov	r8, r7
 8003904:	4645      	mov	r5, r8
 8003906:	f815 3b01 	ldrb.w	r3, [r5], #1
 800390a:	b10b      	cbz	r3, 8003910 <_vfiprintf_r+0x50>
 800390c:	2b25      	cmp	r3, #37	; 0x25
 800390e:	d154      	bne.n	80039ba <_vfiprintf_r+0xfa>
 8003910:	ebb8 0a07 	subs.w	sl, r8, r7
 8003914:	d00b      	beq.n	800392e <_vfiprintf_r+0x6e>
 8003916:	4653      	mov	r3, sl
 8003918:	463a      	mov	r2, r7
 800391a:	4621      	mov	r1, r4
 800391c:	4630      	mov	r0, r6
 800391e:	f7ff ffbc 	bl	800389a <__sfputs_r>
 8003922:	3001      	adds	r0, #1
 8003924:	f000 80c2 	beq.w	8003aac <_vfiprintf_r+0x1ec>
 8003928:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800392a:	4453      	add	r3, sl
 800392c:	9309      	str	r3, [sp, #36]	; 0x24
 800392e:	f898 3000 	ldrb.w	r3, [r8]
 8003932:	2b00      	cmp	r3, #0
 8003934:	f000 80ba 	beq.w	8003aac <_vfiprintf_r+0x1ec>
 8003938:	2300      	movs	r3, #0
 800393a:	f04f 32ff 	mov.w	r2, #4294967295
 800393e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003942:	9304      	str	r3, [sp, #16]
 8003944:	9307      	str	r3, [sp, #28]
 8003946:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800394a:	931a      	str	r3, [sp, #104]	; 0x68
 800394c:	46a8      	mov	r8, r5
 800394e:	2205      	movs	r2, #5
 8003950:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003954:	485e      	ldr	r0, [pc, #376]	; (8003ad0 <_vfiprintf_r+0x210>)
 8003956:	f7fc fc3b 	bl	80001d0 <memchr>
 800395a:	9b04      	ldr	r3, [sp, #16]
 800395c:	bb78      	cbnz	r0, 80039be <_vfiprintf_r+0xfe>
 800395e:	06d9      	lsls	r1, r3, #27
 8003960:	bf44      	itt	mi
 8003962:	2220      	movmi	r2, #32
 8003964:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003968:	071a      	lsls	r2, r3, #28
 800396a:	bf44      	itt	mi
 800396c:	222b      	movmi	r2, #43	; 0x2b
 800396e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003972:	782a      	ldrb	r2, [r5, #0]
 8003974:	2a2a      	cmp	r2, #42	; 0x2a
 8003976:	d02a      	beq.n	80039ce <_vfiprintf_r+0x10e>
 8003978:	9a07      	ldr	r2, [sp, #28]
 800397a:	46a8      	mov	r8, r5
 800397c:	2000      	movs	r0, #0
 800397e:	250a      	movs	r5, #10
 8003980:	4641      	mov	r1, r8
 8003982:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003986:	3b30      	subs	r3, #48	; 0x30
 8003988:	2b09      	cmp	r3, #9
 800398a:	d969      	bls.n	8003a60 <_vfiprintf_r+0x1a0>
 800398c:	b360      	cbz	r0, 80039e8 <_vfiprintf_r+0x128>
 800398e:	e024      	b.n	80039da <_vfiprintf_r+0x11a>
 8003990:	4b50      	ldr	r3, [pc, #320]	; (8003ad4 <_vfiprintf_r+0x214>)
 8003992:	429c      	cmp	r4, r3
 8003994:	d101      	bne.n	800399a <_vfiprintf_r+0xda>
 8003996:	68b4      	ldr	r4, [r6, #8]
 8003998:	e7a2      	b.n	80038e0 <_vfiprintf_r+0x20>
 800399a:	4b4f      	ldr	r3, [pc, #316]	; (8003ad8 <_vfiprintf_r+0x218>)
 800399c:	429c      	cmp	r4, r3
 800399e:	bf08      	it	eq
 80039a0:	68f4      	ldreq	r4, [r6, #12]
 80039a2:	e79d      	b.n	80038e0 <_vfiprintf_r+0x20>
 80039a4:	4621      	mov	r1, r4
 80039a6:	4630      	mov	r0, r6
 80039a8:	f7ff fc6c 	bl	8003284 <__swsetup_r>
 80039ac:	2800      	cmp	r0, #0
 80039ae:	d09d      	beq.n	80038ec <_vfiprintf_r+0x2c>
 80039b0:	f04f 30ff 	mov.w	r0, #4294967295
 80039b4:	b01d      	add	sp, #116	; 0x74
 80039b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80039ba:	46a8      	mov	r8, r5
 80039bc:	e7a2      	b.n	8003904 <_vfiprintf_r+0x44>
 80039be:	4a44      	ldr	r2, [pc, #272]	; (8003ad0 <_vfiprintf_r+0x210>)
 80039c0:	1a80      	subs	r0, r0, r2
 80039c2:	fa0b f000 	lsl.w	r0, fp, r0
 80039c6:	4318      	orrs	r0, r3
 80039c8:	9004      	str	r0, [sp, #16]
 80039ca:	4645      	mov	r5, r8
 80039cc:	e7be      	b.n	800394c <_vfiprintf_r+0x8c>
 80039ce:	9a03      	ldr	r2, [sp, #12]
 80039d0:	1d11      	adds	r1, r2, #4
 80039d2:	6812      	ldr	r2, [r2, #0]
 80039d4:	9103      	str	r1, [sp, #12]
 80039d6:	2a00      	cmp	r2, #0
 80039d8:	db01      	blt.n	80039de <_vfiprintf_r+0x11e>
 80039da:	9207      	str	r2, [sp, #28]
 80039dc:	e004      	b.n	80039e8 <_vfiprintf_r+0x128>
 80039de:	4252      	negs	r2, r2
 80039e0:	f043 0302 	orr.w	r3, r3, #2
 80039e4:	9207      	str	r2, [sp, #28]
 80039e6:	9304      	str	r3, [sp, #16]
 80039e8:	f898 3000 	ldrb.w	r3, [r8]
 80039ec:	2b2e      	cmp	r3, #46	; 0x2e
 80039ee:	d10e      	bne.n	8003a0e <_vfiprintf_r+0x14e>
 80039f0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039f4:	2b2a      	cmp	r3, #42	; 0x2a
 80039f6:	d138      	bne.n	8003a6a <_vfiprintf_r+0x1aa>
 80039f8:	9b03      	ldr	r3, [sp, #12]
 80039fa:	1d1a      	adds	r2, r3, #4
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	9203      	str	r2, [sp, #12]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	bfb8      	it	lt
 8003a04:	f04f 33ff 	movlt.w	r3, #4294967295
 8003a08:	f108 0802 	add.w	r8, r8, #2
 8003a0c:	9305      	str	r3, [sp, #20]
 8003a0e:	4d33      	ldr	r5, [pc, #204]	; (8003adc <_vfiprintf_r+0x21c>)
 8003a10:	f898 1000 	ldrb.w	r1, [r8]
 8003a14:	2203      	movs	r2, #3
 8003a16:	4628      	mov	r0, r5
 8003a18:	f7fc fbda 	bl	80001d0 <memchr>
 8003a1c:	b140      	cbz	r0, 8003a30 <_vfiprintf_r+0x170>
 8003a1e:	2340      	movs	r3, #64	; 0x40
 8003a20:	1b40      	subs	r0, r0, r5
 8003a22:	fa03 f000 	lsl.w	r0, r3, r0
 8003a26:	9b04      	ldr	r3, [sp, #16]
 8003a28:	4303      	orrs	r3, r0
 8003a2a:	f108 0801 	add.w	r8, r8, #1
 8003a2e:	9304      	str	r3, [sp, #16]
 8003a30:	f898 1000 	ldrb.w	r1, [r8]
 8003a34:	482a      	ldr	r0, [pc, #168]	; (8003ae0 <_vfiprintf_r+0x220>)
 8003a36:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a3a:	2206      	movs	r2, #6
 8003a3c:	f108 0701 	add.w	r7, r8, #1
 8003a40:	f7fc fbc6 	bl	80001d0 <memchr>
 8003a44:	2800      	cmp	r0, #0
 8003a46:	d037      	beq.n	8003ab8 <_vfiprintf_r+0x1f8>
 8003a48:	4b26      	ldr	r3, [pc, #152]	; (8003ae4 <_vfiprintf_r+0x224>)
 8003a4a:	bb1b      	cbnz	r3, 8003a94 <_vfiprintf_r+0x1d4>
 8003a4c:	9b03      	ldr	r3, [sp, #12]
 8003a4e:	3307      	adds	r3, #7
 8003a50:	f023 0307 	bic.w	r3, r3, #7
 8003a54:	3308      	adds	r3, #8
 8003a56:	9303      	str	r3, [sp, #12]
 8003a58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a5a:	444b      	add	r3, r9
 8003a5c:	9309      	str	r3, [sp, #36]	; 0x24
 8003a5e:	e750      	b.n	8003902 <_vfiprintf_r+0x42>
 8003a60:	fb05 3202 	mla	r2, r5, r2, r3
 8003a64:	2001      	movs	r0, #1
 8003a66:	4688      	mov	r8, r1
 8003a68:	e78a      	b.n	8003980 <_vfiprintf_r+0xc0>
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	f108 0801 	add.w	r8, r8, #1
 8003a70:	9305      	str	r3, [sp, #20]
 8003a72:	4619      	mov	r1, r3
 8003a74:	250a      	movs	r5, #10
 8003a76:	4640      	mov	r0, r8
 8003a78:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a7c:	3a30      	subs	r2, #48	; 0x30
 8003a7e:	2a09      	cmp	r2, #9
 8003a80:	d903      	bls.n	8003a8a <_vfiprintf_r+0x1ca>
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d0c3      	beq.n	8003a0e <_vfiprintf_r+0x14e>
 8003a86:	9105      	str	r1, [sp, #20]
 8003a88:	e7c1      	b.n	8003a0e <_vfiprintf_r+0x14e>
 8003a8a:	fb05 2101 	mla	r1, r5, r1, r2
 8003a8e:	2301      	movs	r3, #1
 8003a90:	4680      	mov	r8, r0
 8003a92:	e7f0      	b.n	8003a76 <_vfiprintf_r+0x1b6>
 8003a94:	ab03      	add	r3, sp, #12
 8003a96:	9300      	str	r3, [sp, #0]
 8003a98:	4622      	mov	r2, r4
 8003a9a:	4b13      	ldr	r3, [pc, #76]	; (8003ae8 <_vfiprintf_r+0x228>)
 8003a9c:	a904      	add	r1, sp, #16
 8003a9e:	4630      	mov	r0, r6
 8003aa0:	f3af 8000 	nop.w
 8003aa4:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003aa8:	4681      	mov	r9, r0
 8003aaa:	d1d5      	bne.n	8003a58 <_vfiprintf_r+0x198>
 8003aac:	89a3      	ldrh	r3, [r4, #12]
 8003aae:	065b      	lsls	r3, r3, #25
 8003ab0:	f53f af7e 	bmi.w	80039b0 <_vfiprintf_r+0xf0>
 8003ab4:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003ab6:	e77d      	b.n	80039b4 <_vfiprintf_r+0xf4>
 8003ab8:	ab03      	add	r3, sp, #12
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	4622      	mov	r2, r4
 8003abe:	4b0a      	ldr	r3, [pc, #40]	; (8003ae8 <_vfiprintf_r+0x228>)
 8003ac0:	a904      	add	r1, sp, #16
 8003ac2:	4630      	mov	r0, r6
 8003ac4:	f000 f888 	bl	8003bd8 <_printf_i>
 8003ac8:	e7ec      	b.n	8003aa4 <_vfiprintf_r+0x1e4>
 8003aca:	bf00      	nop
 8003acc:	08004370 	.word	0x08004370
 8003ad0:	080043b0 	.word	0x080043b0
 8003ad4:	08004390 	.word	0x08004390
 8003ad8:	08004350 	.word	0x08004350
 8003adc:	080043b6 	.word	0x080043b6
 8003ae0:	080043ba 	.word	0x080043ba
 8003ae4:	00000000 	.word	0x00000000
 8003ae8:	0800389b 	.word	0x0800389b

08003aec <_printf_common>:
 8003aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003af0:	4691      	mov	r9, r2
 8003af2:	461f      	mov	r7, r3
 8003af4:	688a      	ldr	r2, [r1, #8]
 8003af6:	690b      	ldr	r3, [r1, #16]
 8003af8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003afc:	4293      	cmp	r3, r2
 8003afe:	bfb8      	it	lt
 8003b00:	4613      	movlt	r3, r2
 8003b02:	f8c9 3000 	str.w	r3, [r9]
 8003b06:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003b0a:	4606      	mov	r6, r0
 8003b0c:	460c      	mov	r4, r1
 8003b0e:	b112      	cbz	r2, 8003b16 <_printf_common+0x2a>
 8003b10:	3301      	adds	r3, #1
 8003b12:	f8c9 3000 	str.w	r3, [r9]
 8003b16:	6823      	ldr	r3, [r4, #0]
 8003b18:	0699      	lsls	r1, r3, #26
 8003b1a:	bf42      	ittt	mi
 8003b1c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003b20:	3302      	addmi	r3, #2
 8003b22:	f8c9 3000 	strmi.w	r3, [r9]
 8003b26:	6825      	ldr	r5, [r4, #0]
 8003b28:	f015 0506 	ands.w	r5, r5, #6
 8003b2c:	d107      	bne.n	8003b3e <_printf_common+0x52>
 8003b2e:	f104 0a19 	add.w	sl, r4, #25
 8003b32:	68e3      	ldr	r3, [r4, #12]
 8003b34:	f8d9 2000 	ldr.w	r2, [r9]
 8003b38:	1a9b      	subs	r3, r3, r2
 8003b3a:	42ab      	cmp	r3, r5
 8003b3c:	dc28      	bgt.n	8003b90 <_printf_common+0xa4>
 8003b3e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	3300      	adds	r3, #0
 8003b46:	bf18      	it	ne
 8003b48:	2301      	movne	r3, #1
 8003b4a:	0692      	lsls	r2, r2, #26
 8003b4c:	d42d      	bmi.n	8003baa <_printf_common+0xbe>
 8003b4e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b52:	4639      	mov	r1, r7
 8003b54:	4630      	mov	r0, r6
 8003b56:	47c0      	blx	r8
 8003b58:	3001      	adds	r0, #1
 8003b5a:	d020      	beq.n	8003b9e <_printf_common+0xb2>
 8003b5c:	6823      	ldr	r3, [r4, #0]
 8003b5e:	68e5      	ldr	r5, [r4, #12]
 8003b60:	f8d9 2000 	ldr.w	r2, [r9]
 8003b64:	f003 0306 	and.w	r3, r3, #6
 8003b68:	2b04      	cmp	r3, #4
 8003b6a:	bf08      	it	eq
 8003b6c:	1aad      	subeq	r5, r5, r2
 8003b6e:	68a3      	ldr	r3, [r4, #8]
 8003b70:	6922      	ldr	r2, [r4, #16]
 8003b72:	bf0c      	ite	eq
 8003b74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b78:	2500      	movne	r5, #0
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	bfc4      	itt	gt
 8003b7e:	1a9b      	subgt	r3, r3, r2
 8003b80:	18ed      	addgt	r5, r5, r3
 8003b82:	f04f 0900 	mov.w	r9, #0
 8003b86:	341a      	adds	r4, #26
 8003b88:	454d      	cmp	r5, r9
 8003b8a:	d11a      	bne.n	8003bc2 <_printf_common+0xd6>
 8003b8c:	2000      	movs	r0, #0
 8003b8e:	e008      	b.n	8003ba2 <_printf_common+0xb6>
 8003b90:	2301      	movs	r3, #1
 8003b92:	4652      	mov	r2, sl
 8003b94:	4639      	mov	r1, r7
 8003b96:	4630      	mov	r0, r6
 8003b98:	47c0      	blx	r8
 8003b9a:	3001      	adds	r0, #1
 8003b9c:	d103      	bne.n	8003ba6 <_printf_common+0xba>
 8003b9e:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ba6:	3501      	adds	r5, #1
 8003ba8:	e7c3      	b.n	8003b32 <_printf_common+0x46>
 8003baa:	18e1      	adds	r1, r4, r3
 8003bac:	1c5a      	adds	r2, r3, #1
 8003bae:	2030      	movs	r0, #48	; 0x30
 8003bb0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003bb4:	4422      	add	r2, r4
 8003bb6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003bba:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003bbe:	3302      	adds	r3, #2
 8003bc0:	e7c5      	b.n	8003b4e <_printf_common+0x62>
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	4622      	mov	r2, r4
 8003bc6:	4639      	mov	r1, r7
 8003bc8:	4630      	mov	r0, r6
 8003bca:	47c0      	blx	r8
 8003bcc:	3001      	adds	r0, #1
 8003bce:	d0e6      	beq.n	8003b9e <_printf_common+0xb2>
 8003bd0:	f109 0901 	add.w	r9, r9, #1
 8003bd4:	e7d8      	b.n	8003b88 <_printf_common+0x9c>
	...

08003bd8 <_printf_i>:
 8003bd8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bdc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003be0:	460c      	mov	r4, r1
 8003be2:	7e09      	ldrb	r1, [r1, #24]
 8003be4:	b085      	sub	sp, #20
 8003be6:	296e      	cmp	r1, #110	; 0x6e
 8003be8:	4617      	mov	r7, r2
 8003bea:	4606      	mov	r6, r0
 8003bec:	4698      	mov	r8, r3
 8003bee:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bf0:	f000 80b3 	beq.w	8003d5a <_printf_i+0x182>
 8003bf4:	d822      	bhi.n	8003c3c <_printf_i+0x64>
 8003bf6:	2963      	cmp	r1, #99	; 0x63
 8003bf8:	d036      	beq.n	8003c68 <_printf_i+0x90>
 8003bfa:	d80a      	bhi.n	8003c12 <_printf_i+0x3a>
 8003bfc:	2900      	cmp	r1, #0
 8003bfe:	f000 80b9 	beq.w	8003d74 <_printf_i+0x19c>
 8003c02:	2958      	cmp	r1, #88	; 0x58
 8003c04:	f000 8083 	beq.w	8003d0e <_printf_i+0x136>
 8003c08:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c0c:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003c10:	e032      	b.n	8003c78 <_printf_i+0xa0>
 8003c12:	2964      	cmp	r1, #100	; 0x64
 8003c14:	d001      	beq.n	8003c1a <_printf_i+0x42>
 8003c16:	2969      	cmp	r1, #105	; 0x69
 8003c18:	d1f6      	bne.n	8003c08 <_printf_i+0x30>
 8003c1a:	6820      	ldr	r0, [r4, #0]
 8003c1c:	6813      	ldr	r3, [r2, #0]
 8003c1e:	0605      	lsls	r5, r0, #24
 8003c20:	f103 0104 	add.w	r1, r3, #4
 8003c24:	d52a      	bpl.n	8003c7c <_printf_i+0xa4>
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6011      	str	r1, [r2, #0]
 8003c2a:	2b00      	cmp	r3, #0
 8003c2c:	da03      	bge.n	8003c36 <_printf_i+0x5e>
 8003c2e:	222d      	movs	r2, #45	; 0x2d
 8003c30:	425b      	negs	r3, r3
 8003c32:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c36:	486f      	ldr	r0, [pc, #444]	; (8003df4 <_printf_i+0x21c>)
 8003c38:	220a      	movs	r2, #10
 8003c3a:	e039      	b.n	8003cb0 <_printf_i+0xd8>
 8003c3c:	2973      	cmp	r1, #115	; 0x73
 8003c3e:	f000 809d 	beq.w	8003d7c <_printf_i+0x1a4>
 8003c42:	d808      	bhi.n	8003c56 <_printf_i+0x7e>
 8003c44:	296f      	cmp	r1, #111	; 0x6f
 8003c46:	d020      	beq.n	8003c8a <_printf_i+0xb2>
 8003c48:	2970      	cmp	r1, #112	; 0x70
 8003c4a:	d1dd      	bne.n	8003c08 <_printf_i+0x30>
 8003c4c:	6823      	ldr	r3, [r4, #0]
 8003c4e:	f043 0320 	orr.w	r3, r3, #32
 8003c52:	6023      	str	r3, [r4, #0]
 8003c54:	e003      	b.n	8003c5e <_printf_i+0x86>
 8003c56:	2975      	cmp	r1, #117	; 0x75
 8003c58:	d017      	beq.n	8003c8a <_printf_i+0xb2>
 8003c5a:	2978      	cmp	r1, #120	; 0x78
 8003c5c:	d1d4      	bne.n	8003c08 <_printf_i+0x30>
 8003c5e:	2378      	movs	r3, #120	; 0x78
 8003c60:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c64:	4864      	ldr	r0, [pc, #400]	; (8003df8 <_printf_i+0x220>)
 8003c66:	e055      	b.n	8003d14 <_printf_i+0x13c>
 8003c68:	6813      	ldr	r3, [r2, #0]
 8003c6a:	1d19      	adds	r1, r3, #4
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	6011      	str	r1, [r2, #0]
 8003c70:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c74:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c78:	2301      	movs	r3, #1
 8003c7a:	e08c      	b.n	8003d96 <_printf_i+0x1be>
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	6011      	str	r1, [r2, #0]
 8003c80:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c84:	bf18      	it	ne
 8003c86:	b21b      	sxthne	r3, r3
 8003c88:	e7cf      	b.n	8003c2a <_printf_i+0x52>
 8003c8a:	6813      	ldr	r3, [r2, #0]
 8003c8c:	6825      	ldr	r5, [r4, #0]
 8003c8e:	1d18      	adds	r0, r3, #4
 8003c90:	6010      	str	r0, [r2, #0]
 8003c92:	0628      	lsls	r0, r5, #24
 8003c94:	d501      	bpl.n	8003c9a <_printf_i+0xc2>
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	e002      	b.n	8003ca0 <_printf_i+0xc8>
 8003c9a:	0668      	lsls	r0, r5, #25
 8003c9c:	d5fb      	bpl.n	8003c96 <_printf_i+0xbe>
 8003c9e:	881b      	ldrh	r3, [r3, #0]
 8003ca0:	4854      	ldr	r0, [pc, #336]	; (8003df4 <_printf_i+0x21c>)
 8003ca2:	296f      	cmp	r1, #111	; 0x6f
 8003ca4:	bf14      	ite	ne
 8003ca6:	220a      	movne	r2, #10
 8003ca8:	2208      	moveq	r2, #8
 8003caa:	2100      	movs	r1, #0
 8003cac:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003cb0:	6865      	ldr	r5, [r4, #4]
 8003cb2:	60a5      	str	r5, [r4, #8]
 8003cb4:	2d00      	cmp	r5, #0
 8003cb6:	f2c0 8095 	blt.w	8003de4 <_printf_i+0x20c>
 8003cba:	6821      	ldr	r1, [r4, #0]
 8003cbc:	f021 0104 	bic.w	r1, r1, #4
 8003cc0:	6021      	str	r1, [r4, #0]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d13d      	bne.n	8003d42 <_printf_i+0x16a>
 8003cc6:	2d00      	cmp	r5, #0
 8003cc8:	f040 808e 	bne.w	8003de8 <_printf_i+0x210>
 8003ccc:	4665      	mov	r5, ip
 8003cce:	2a08      	cmp	r2, #8
 8003cd0:	d10b      	bne.n	8003cea <_printf_i+0x112>
 8003cd2:	6823      	ldr	r3, [r4, #0]
 8003cd4:	07db      	lsls	r3, r3, #31
 8003cd6:	d508      	bpl.n	8003cea <_printf_i+0x112>
 8003cd8:	6923      	ldr	r3, [r4, #16]
 8003cda:	6862      	ldr	r2, [r4, #4]
 8003cdc:	429a      	cmp	r2, r3
 8003cde:	bfde      	ittt	le
 8003ce0:	2330      	movle	r3, #48	; 0x30
 8003ce2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003ce6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cea:	ebac 0305 	sub.w	r3, ip, r5
 8003cee:	6123      	str	r3, [r4, #16]
 8003cf0:	f8cd 8000 	str.w	r8, [sp]
 8003cf4:	463b      	mov	r3, r7
 8003cf6:	aa03      	add	r2, sp, #12
 8003cf8:	4621      	mov	r1, r4
 8003cfa:	4630      	mov	r0, r6
 8003cfc:	f7ff fef6 	bl	8003aec <_printf_common>
 8003d00:	3001      	adds	r0, #1
 8003d02:	d14d      	bne.n	8003da0 <_printf_i+0x1c8>
 8003d04:	f04f 30ff 	mov.w	r0, #4294967295
 8003d08:	b005      	add	sp, #20
 8003d0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003d0e:	4839      	ldr	r0, [pc, #228]	; (8003df4 <_printf_i+0x21c>)
 8003d10:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003d14:	6813      	ldr	r3, [r2, #0]
 8003d16:	6821      	ldr	r1, [r4, #0]
 8003d18:	1d1d      	adds	r5, r3, #4
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	6015      	str	r5, [r2, #0]
 8003d1e:	060a      	lsls	r2, r1, #24
 8003d20:	d50b      	bpl.n	8003d3a <_printf_i+0x162>
 8003d22:	07ca      	lsls	r2, r1, #31
 8003d24:	bf44      	itt	mi
 8003d26:	f041 0120 	orrmi.w	r1, r1, #32
 8003d2a:	6021      	strmi	r1, [r4, #0]
 8003d2c:	b91b      	cbnz	r3, 8003d36 <_printf_i+0x15e>
 8003d2e:	6822      	ldr	r2, [r4, #0]
 8003d30:	f022 0220 	bic.w	r2, r2, #32
 8003d34:	6022      	str	r2, [r4, #0]
 8003d36:	2210      	movs	r2, #16
 8003d38:	e7b7      	b.n	8003caa <_printf_i+0xd2>
 8003d3a:	064d      	lsls	r5, r1, #25
 8003d3c:	bf48      	it	mi
 8003d3e:	b29b      	uxthmi	r3, r3
 8003d40:	e7ef      	b.n	8003d22 <_printf_i+0x14a>
 8003d42:	4665      	mov	r5, ip
 8003d44:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d48:	fb02 3311 	mls	r3, r2, r1, r3
 8003d4c:	5cc3      	ldrb	r3, [r0, r3]
 8003d4e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d52:	460b      	mov	r3, r1
 8003d54:	2900      	cmp	r1, #0
 8003d56:	d1f5      	bne.n	8003d44 <_printf_i+0x16c>
 8003d58:	e7b9      	b.n	8003cce <_printf_i+0xf6>
 8003d5a:	6813      	ldr	r3, [r2, #0]
 8003d5c:	6825      	ldr	r5, [r4, #0]
 8003d5e:	6961      	ldr	r1, [r4, #20]
 8003d60:	1d18      	adds	r0, r3, #4
 8003d62:	6010      	str	r0, [r2, #0]
 8003d64:	0628      	lsls	r0, r5, #24
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	d501      	bpl.n	8003d6e <_printf_i+0x196>
 8003d6a:	6019      	str	r1, [r3, #0]
 8003d6c:	e002      	b.n	8003d74 <_printf_i+0x19c>
 8003d6e:	066a      	lsls	r2, r5, #25
 8003d70:	d5fb      	bpl.n	8003d6a <_printf_i+0x192>
 8003d72:	8019      	strh	r1, [r3, #0]
 8003d74:	2300      	movs	r3, #0
 8003d76:	6123      	str	r3, [r4, #16]
 8003d78:	4665      	mov	r5, ip
 8003d7a:	e7b9      	b.n	8003cf0 <_printf_i+0x118>
 8003d7c:	6813      	ldr	r3, [r2, #0]
 8003d7e:	1d19      	adds	r1, r3, #4
 8003d80:	6011      	str	r1, [r2, #0]
 8003d82:	681d      	ldr	r5, [r3, #0]
 8003d84:	6862      	ldr	r2, [r4, #4]
 8003d86:	2100      	movs	r1, #0
 8003d88:	4628      	mov	r0, r5
 8003d8a:	f7fc fa21 	bl	80001d0 <memchr>
 8003d8e:	b108      	cbz	r0, 8003d94 <_printf_i+0x1bc>
 8003d90:	1b40      	subs	r0, r0, r5
 8003d92:	6060      	str	r0, [r4, #4]
 8003d94:	6863      	ldr	r3, [r4, #4]
 8003d96:	6123      	str	r3, [r4, #16]
 8003d98:	2300      	movs	r3, #0
 8003d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d9e:	e7a7      	b.n	8003cf0 <_printf_i+0x118>
 8003da0:	6923      	ldr	r3, [r4, #16]
 8003da2:	462a      	mov	r2, r5
 8003da4:	4639      	mov	r1, r7
 8003da6:	4630      	mov	r0, r6
 8003da8:	47c0      	blx	r8
 8003daa:	3001      	adds	r0, #1
 8003dac:	d0aa      	beq.n	8003d04 <_printf_i+0x12c>
 8003dae:	6823      	ldr	r3, [r4, #0]
 8003db0:	079b      	lsls	r3, r3, #30
 8003db2:	d413      	bmi.n	8003ddc <_printf_i+0x204>
 8003db4:	68e0      	ldr	r0, [r4, #12]
 8003db6:	9b03      	ldr	r3, [sp, #12]
 8003db8:	4298      	cmp	r0, r3
 8003dba:	bfb8      	it	lt
 8003dbc:	4618      	movlt	r0, r3
 8003dbe:	e7a3      	b.n	8003d08 <_printf_i+0x130>
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	464a      	mov	r2, r9
 8003dc4:	4639      	mov	r1, r7
 8003dc6:	4630      	mov	r0, r6
 8003dc8:	47c0      	blx	r8
 8003dca:	3001      	adds	r0, #1
 8003dcc:	d09a      	beq.n	8003d04 <_printf_i+0x12c>
 8003dce:	3501      	adds	r5, #1
 8003dd0:	68e3      	ldr	r3, [r4, #12]
 8003dd2:	9a03      	ldr	r2, [sp, #12]
 8003dd4:	1a9b      	subs	r3, r3, r2
 8003dd6:	42ab      	cmp	r3, r5
 8003dd8:	dcf2      	bgt.n	8003dc0 <_printf_i+0x1e8>
 8003dda:	e7eb      	b.n	8003db4 <_printf_i+0x1dc>
 8003ddc:	2500      	movs	r5, #0
 8003dde:	f104 0919 	add.w	r9, r4, #25
 8003de2:	e7f5      	b.n	8003dd0 <_printf_i+0x1f8>
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d1ac      	bne.n	8003d42 <_printf_i+0x16a>
 8003de8:	7803      	ldrb	r3, [r0, #0]
 8003dea:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dee:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003df2:	e76c      	b.n	8003cce <_printf_i+0xf6>
 8003df4:	080043c1 	.word	0x080043c1
 8003df8:	080043d2 	.word	0x080043d2

08003dfc <_sbrk_r>:
 8003dfc:	b538      	push	{r3, r4, r5, lr}
 8003dfe:	4c06      	ldr	r4, [pc, #24]	; (8003e18 <_sbrk_r+0x1c>)
 8003e00:	2300      	movs	r3, #0
 8003e02:	4605      	mov	r5, r0
 8003e04:	4608      	mov	r0, r1
 8003e06:	6023      	str	r3, [r4, #0]
 8003e08:	f7fd fbb6 	bl	8001578 <_sbrk>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_sbrk_r+0x1a>
 8003e10:	6823      	ldr	r3, [r4, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_sbrk_r+0x1a>
 8003e14:	602b      	str	r3, [r5, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	200005fc 	.word	0x200005fc

08003e1c <__sread>:
 8003e1c:	b510      	push	{r4, lr}
 8003e1e:	460c      	mov	r4, r1
 8003e20:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e24:	f000 f896 	bl	8003f54 <_read_r>
 8003e28:	2800      	cmp	r0, #0
 8003e2a:	bfab      	itete	ge
 8003e2c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e2e:	89a3      	ldrhlt	r3, [r4, #12]
 8003e30:	181b      	addge	r3, r3, r0
 8003e32:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e36:	bfac      	ite	ge
 8003e38:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e3a:	81a3      	strhlt	r3, [r4, #12]
 8003e3c:	bd10      	pop	{r4, pc}

08003e3e <__swrite>:
 8003e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e42:	461f      	mov	r7, r3
 8003e44:	898b      	ldrh	r3, [r1, #12]
 8003e46:	05db      	lsls	r3, r3, #23
 8003e48:	4605      	mov	r5, r0
 8003e4a:	460c      	mov	r4, r1
 8003e4c:	4616      	mov	r6, r2
 8003e4e:	d505      	bpl.n	8003e5c <__swrite+0x1e>
 8003e50:	2302      	movs	r3, #2
 8003e52:	2200      	movs	r2, #0
 8003e54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e58:	f000 f868 	bl	8003f2c <_lseek_r>
 8003e5c:	89a3      	ldrh	r3, [r4, #12]
 8003e5e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e62:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e66:	81a3      	strh	r3, [r4, #12]
 8003e68:	4632      	mov	r2, r6
 8003e6a:	463b      	mov	r3, r7
 8003e6c:	4628      	mov	r0, r5
 8003e6e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e72:	f000 b817 	b.w	8003ea4 <_write_r>

08003e76 <__sseek>:
 8003e76:	b510      	push	{r4, lr}
 8003e78:	460c      	mov	r4, r1
 8003e7a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e7e:	f000 f855 	bl	8003f2c <_lseek_r>
 8003e82:	1c43      	adds	r3, r0, #1
 8003e84:	89a3      	ldrh	r3, [r4, #12]
 8003e86:	bf15      	itete	ne
 8003e88:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e8a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e8e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e92:	81a3      	strheq	r3, [r4, #12]
 8003e94:	bf18      	it	ne
 8003e96:	81a3      	strhne	r3, [r4, #12]
 8003e98:	bd10      	pop	{r4, pc}

08003e9a <__sclose>:
 8003e9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e9e:	f000 b813 	b.w	8003ec8 <_close_r>
	...

08003ea4 <_write_r>:
 8003ea4:	b538      	push	{r3, r4, r5, lr}
 8003ea6:	4c07      	ldr	r4, [pc, #28]	; (8003ec4 <_write_r+0x20>)
 8003ea8:	4605      	mov	r5, r0
 8003eaa:	4608      	mov	r0, r1
 8003eac:	4611      	mov	r1, r2
 8003eae:	2200      	movs	r2, #0
 8003eb0:	6022      	str	r2, [r4, #0]
 8003eb2:	461a      	mov	r2, r3
 8003eb4:	f7fd fb10 	bl	80014d8 <_write>
 8003eb8:	1c43      	adds	r3, r0, #1
 8003eba:	d102      	bne.n	8003ec2 <_write_r+0x1e>
 8003ebc:	6823      	ldr	r3, [r4, #0]
 8003ebe:	b103      	cbz	r3, 8003ec2 <_write_r+0x1e>
 8003ec0:	602b      	str	r3, [r5, #0]
 8003ec2:	bd38      	pop	{r3, r4, r5, pc}
 8003ec4:	200005fc 	.word	0x200005fc

08003ec8 <_close_r>:
 8003ec8:	b538      	push	{r3, r4, r5, lr}
 8003eca:	4c06      	ldr	r4, [pc, #24]	; (8003ee4 <_close_r+0x1c>)
 8003ecc:	2300      	movs	r3, #0
 8003ece:	4605      	mov	r5, r0
 8003ed0:	4608      	mov	r0, r1
 8003ed2:	6023      	str	r3, [r4, #0]
 8003ed4:	f7fd fb1c 	bl	8001510 <_close>
 8003ed8:	1c43      	adds	r3, r0, #1
 8003eda:	d102      	bne.n	8003ee2 <_close_r+0x1a>
 8003edc:	6823      	ldr	r3, [r4, #0]
 8003ede:	b103      	cbz	r3, 8003ee2 <_close_r+0x1a>
 8003ee0:	602b      	str	r3, [r5, #0]
 8003ee2:	bd38      	pop	{r3, r4, r5, pc}
 8003ee4:	200005fc 	.word	0x200005fc

08003ee8 <_fstat_r>:
 8003ee8:	b538      	push	{r3, r4, r5, lr}
 8003eea:	4c07      	ldr	r4, [pc, #28]	; (8003f08 <_fstat_r+0x20>)
 8003eec:	2300      	movs	r3, #0
 8003eee:	4605      	mov	r5, r0
 8003ef0:	4608      	mov	r0, r1
 8003ef2:	4611      	mov	r1, r2
 8003ef4:	6023      	str	r3, [r4, #0]
 8003ef6:	f7fd fb17 	bl	8001528 <_fstat>
 8003efa:	1c43      	adds	r3, r0, #1
 8003efc:	d102      	bne.n	8003f04 <_fstat_r+0x1c>
 8003efe:	6823      	ldr	r3, [r4, #0]
 8003f00:	b103      	cbz	r3, 8003f04 <_fstat_r+0x1c>
 8003f02:	602b      	str	r3, [r5, #0]
 8003f04:	bd38      	pop	{r3, r4, r5, pc}
 8003f06:	bf00      	nop
 8003f08:	200005fc 	.word	0x200005fc

08003f0c <_isatty_r>:
 8003f0c:	b538      	push	{r3, r4, r5, lr}
 8003f0e:	4c06      	ldr	r4, [pc, #24]	; (8003f28 <_isatty_r+0x1c>)
 8003f10:	2300      	movs	r3, #0
 8003f12:	4605      	mov	r5, r0
 8003f14:	4608      	mov	r0, r1
 8003f16:	6023      	str	r3, [r4, #0]
 8003f18:	f7fd fb16 	bl	8001548 <_isatty>
 8003f1c:	1c43      	adds	r3, r0, #1
 8003f1e:	d102      	bne.n	8003f26 <_isatty_r+0x1a>
 8003f20:	6823      	ldr	r3, [r4, #0]
 8003f22:	b103      	cbz	r3, 8003f26 <_isatty_r+0x1a>
 8003f24:	602b      	str	r3, [r5, #0]
 8003f26:	bd38      	pop	{r3, r4, r5, pc}
 8003f28:	200005fc 	.word	0x200005fc

08003f2c <_lseek_r>:
 8003f2c:	b538      	push	{r3, r4, r5, lr}
 8003f2e:	4c07      	ldr	r4, [pc, #28]	; (8003f4c <_lseek_r+0x20>)
 8003f30:	4605      	mov	r5, r0
 8003f32:	4608      	mov	r0, r1
 8003f34:	4611      	mov	r1, r2
 8003f36:	2200      	movs	r2, #0
 8003f38:	6022      	str	r2, [r4, #0]
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f7fd fb0f 	bl	800155e <_lseek>
 8003f40:	1c43      	adds	r3, r0, #1
 8003f42:	d102      	bne.n	8003f4a <_lseek_r+0x1e>
 8003f44:	6823      	ldr	r3, [r4, #0]
 8003f46:	b103      	cbz	r3, 8003f4a <_lseek_r+0x1e>
 8003f48:	602b      	str	r3, [r5, #0]
 8003f4a:	bd38      	pop	{r3, r4, r5, pc}
 8003f4c:	200005fc 	.word	0x200005fc

08003f50 <__malloc_lock>:
 8003f50:	4770      	bx	lr

08003f52 <__malloc_unlock>:
 8003f52:	4770      	bx	lr

08003f54 <_read_r>:
 8003f54:	b538      	push	{r3, r4, r5, lr}
 8003f56:	4c07      	ldr	r4, [pc, #28]	; (8003f74 <_read_r+0x20>)
 8003f58:	4605      	mov	r5, r0
 8003f5a:	4608      	mov	r0, r1
 8003f5c:	4611      	mov	r1, r2
 8003f5e:	2200      	movs	r2, #0
 8003f60:	6022      	str	r2, [r4, #0]
 8003f62:	461a      	mov	r2, r3
 8003f64:	f7fd fa9b 	bl	800149e <_read>
 8003f68:	1c43      	adds	r3, r0, #1
 8003f6a:	d102      	bne.n	8003f72 <_read_r+0x1e>
 8003f6c:	6823      	ldr	r3, [r4, #0]
 8003f6e:	b103      	cbz	r3, 8003f72 <_read_r+0x1e>
 8003f70:	602b      	str	r3, [r5, #0]
 8003f72:	bd38      	pop	{r3, r4, r5, pc}
 8003f74:	200005fc 	.word	0x200005fc

08003f78 <_init>:
 8003f78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f7a:	bf00      	nop
 8003f7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f7e:	bc08      	pop	{r3}
 8003f80:	469e      	mov	lr, r3
 8003f82:	4770      	bx	lr

08003f84 <_fini>:
 8003f84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f86:	bf00      	nop
 8003f88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f8a:	bc08      	pop	{r3}
 8003f8c:	469e      	mov	lr, r3
 8003f8e:	4770      	bx	lr
