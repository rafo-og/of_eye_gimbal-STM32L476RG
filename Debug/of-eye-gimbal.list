
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006654  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ff4  080067e4  080067e4  000167e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080077d8  080077d8  000205c8  2**0
                  CONTENTS
  4 .ARM          00000008  080077d8  080077d8  000177d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080077e0  080077e0  000205c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080077e0  080077e0  000177e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080077e4  080077e4  000177e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c8  20000000  080077e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  200005c8  08007db0  000205c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000920  08007db0  00020920  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011364  00000000  00000000  000205f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002a70  00000000  00000000  0003195c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c88  00000000  00000000  000343d0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000b40  00000000  00000000  00035058  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002488d  00000000  00000000  00035b98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000afd3  00000000  00000000  0005a425  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb5fc  00000000  00000000  000653f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001209f4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ac4  00000000  00000000  00120a70  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c8 	.word	0x200005c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080067cc 	.word	0x080067cc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005cc 	.word	0x200005cc
 80001cc:	080067cc 	.word	0x080067cc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_drsub>:
 8000270:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000274:	e002      	b.n	800027c <__adddf3>
 8000276:	bf00      	nop

08000278 <__aeabi_dsub>:
 8000278:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800027c <__adddf3>:
 800027c:	b530      	push	{r4, r5, lr}
 800027e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000282:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000286:	ea94 0f05 	teq	r4, r5
 800028a:	bf08      	it	eq
 800028c:	ea90 0f02 	teqeq	r0, r2
 8000290:	bf1f      	itttt	ne
 8000292:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000296:	ea55 0c02 	orrsne.w	ip, r5, r2
 800029a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800029e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002a2:	f000 80e2 	beq.w	800046a <__adddf3+0x1ee>
 80002a6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002aa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ae:	bfb8      	it	lt
 80002b0:	426d      	neglt	r5, r5
 80002b2:	dd0c      	ble.n	80002ce <__adddf3+0x52>
 80002b4:	442c      	add	r4, r5
 80002b6:	ea80 0202 	eor.w	r2, r0, r2
 80002ba:	ea81 0303 	eor.w	r3, r1, r3
 80002be:	ea82 0000 	eor.w	r0, r2, r0
 80002c2:	ea83 0101 	eor.w	r1, r3, r1
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	2d36      	cmp	r5, #54	; 0x36
 80002d0:	bf88      	it	hi
 80002d2:	bd30      	pophi	{r4, r5, pc}
 80002d4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002dc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002e0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002e4:	d002      	beq.n	80002ec <__adddf3+0x70>
 80002e6:	4240      	negs	r0, r0
 80002e8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002ec:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002f4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002f8:	d002      	beq.n	8000300 <__adddf3+0x84>
 80002fa:	4252      	negs	r2, r2
 80002fc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000300:	ea94 0f05 	teq	r4, r5
 8000304:	f000 80a7 	beq.w	8000456 <__adddf3+0x1da>
 8000308:	f1a4 0401 	sub.w	r4, r4, #1
 800030c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000310:	db0d      	blt.n	800032e <__adddf3+0xb2>
 8000312:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000316:	fa22 f205 	lsr.w	r2, r2, r5
 800031a:	1880      	adds	r0, r0, r2
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	fa03 f20e 	lsl.w	r2, r3, lr
 8000324:	1880      	adds	r0, r0, r2
 8000326:	fa43 f305 	asr.w	r3, r3, r5
 800032a:	4159      	adcs	r1, r3
 800032c:	e00e      	b.n	800034c <__adddf3+0xd0>
 800032e:	f1a5 0520 	sub.w	r5, r5, #32
 8000332:	f10e 0e20 	add.w	lr, lr, #32
 8000336:	2a01      	cmp	r2, #1
 8000338:	fa03 fc0e 	lsl.w	ip, r3, lr
 800033c:	bf28      	it	cs
 800033e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000342:	fa43 f305 	asr.w	r3, r3, r5
 8000346:	18c0      	adds	r0, r0, r3
 8000348:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800034c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000350:	d507      	bpl.n	8000362 <__adddf3+0xe6>
 8000352:	f04f 0e00 	mov.w	lr, #0
 8000356:	f1dc 0c00 	rsbs	ip, ip, #0
 800035a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800035e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000362:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000366:	d31b      	bcc.n	80003a0 <__adddf3+0x124>
 8000368:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800036c:	d30c      	bcc.n	8000388 <__adddf3+0x10c>
 800036e:	0849      	lsrs	r1, r1, #1
 8000370:	ea5f 0030 	movs.w	r0, r0, rrx
 8000374:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000378:	f104 0401 	add.w	r4, r4, #1
 800037c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000380:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000384:	f080 809a 	bcs.w	80004bc <__adddf3+0x240>
 8000388:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800038c:	bf08      	it	eq
 800038e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000392:	f150 0000 	adcs.w	r0, r0, #0
 8000396:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800039a:	ea41 0105 	orr.w	r1, r1, r5
 800039e:	bd30      	pop	{r4, r5, pc}
 80003a0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003a4:	4140      	adcs	r0, r0
 80003a6:	eb41 0101 	adc.w	r1, r1, r1
 80003aa:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80003ae:	f1a4 0401 	sub.w	r4, r4, #1
 80003b2:	d1e9      	bne.n	8000388 <__adddf3+0x10c>
 80003b4:	f091 0f00 	teq	r1, #0
 80003b8:	bf04      	itt	eq
 80003ba:	4601      	moveq	r1, r0
 80003bc:	2000      	moveq	r0, #0
 80003be:	fab1 f381 	clz	r3, r1
 80003c2:	bf08      	it	eq
 80003c4:	3320      	addeq	r3, #32
 80003c6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ca:	f1b3 0220 	subs.w	r2, r3, #32
 80003ce:	da0c      	bge.n	80003ea <__adddf3+0x16e>
 80003d0:	320c      	adds	r2, #12
 80003d2:	dd08      	ble.n	80003e6 <__adddf3+0x16a>
 80003d4:	f102 0c14 	add.w	ip, r2, #20
 80003d8:	f1c2 020c 	rsb	r2, r2, #12
 80003dc:	fa01 f00c 	lsl.w	r0, r1, ip
 80003e0:	fa21 f102 	lsr.w	r1, r1, r2
 80003e4:	e00c      	b.n	8000400 <__adddf3+0x184>
 80003e6:	f102 0214 	add.w	r2, r2, #20
 80003ea:	bfd8      	it	le
 80003ec:	f1c2 0c20 	rsble	ip, r2, #32
 80003f0:	fa01 f102 	lsl.w	r1, r1, r2
 80003f4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003f8:	bfdc      	itt	le
 80003fa:	ea41 010c 	orrle.w	r1, r1, ip
 80003fe:	4090      	lslle	r0, r2
 8000400:	1ae4      	subs	r4, r4, r3
 8000402:	bfa2      	ittt	ge
 8000404:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000408:	4329      	orrge	r1, r5
 800040a:	bd30      	popge	{r4, r5, pc}
 800040c:	ea6f 0404 	mvn.w	r4, r4
 8000410:	3c1f      	subs	r4, #31
 8000412:	da1c      	bge.n	800044e <__adddf3+0x1d2>
 8000414:	340c      	adds	r4, #12
 8000416:	dc0e      	bgt.n	8000436 <__adddf3+0x1ba>
 8000418:	f104 0414 	add.w	r4, r4, #20
 800041c:	f1c4 0220 	rsb	r2, r4, #32
 8000420:	fa20 f004 	lsr.w	r0, r0, r4
 8000424:	fa01 f302 	lsl.w	r3, r1, r2
 8000428:	ea40 0003 	orr.w	r0, r0, r3
 800042c:	fa21 f304 	lsr.w	r3, r1, r4
 8000430:	ea45 0103 	orr.w	r1, r5, r3
 8000434:	bd30      	pop	{r4, r5, pc}
 8000436:	f1c4 040c 	rsb	r4, r4, #12
 800043a:	f1c4 0220 	rsb	r2, r4, #32
 800043e:	fa20 f002 	lsr.w	r0, r0, r2
 8000442:	fa01 f304 	lsl.w	r3, r1, r4
 8000446:	ea40 0003 	orr.w	r0, r0, r3
 800044a:	4629      	mov	r1, r5
 800044c:	bd30      	pop	{r4, r5, pc}
 800044e:	fa21 f004 	lsr.w	r0, r1, r4
 8000452:	4629      	mov	r1, r5
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f094 0f00 	teq	r4, #0
 800045a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800045e:	bf06      	itte	eq
 8000460:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000464:	3401      	addeq	r4, #1
 8000466:	3d01      	subne	r5, #1
 8000468:	e74e      	b.n	8000308 <__adddf3+0x8c>
 800046a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800046e:	bf18      	it	ne
 8000470:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000474:	d029      	beq.n	80004ca <__adddf3+0x24e>
 8000476:	ea94 0f05 	teq	r4, r5
 800047a:	bf08      	it	eq
 800047c:	ea90 0f02 	teqeq	r0, r2
 8000480:	d005      	beq.n	800048e <__adddf3+0x212>
 8000482:	ea54 0c00 	orrs.w	ip, r4, r0
 8000486:	bf04      	itt	eq
 8000488:	4619      	moveq	r1, r3
 800048a:	4610      	moveq	r0, r2
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	ea91 0f03 	teq	r1, r3
 8000492:	bf1e      	ittt	ne
 8000494:	2100      	movne	r1, #0
 8000496:	2000      	movne	r0, #0
 8000498:	bd30      	popne	{r4, r5, pc}
 800049a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800049e:	d105      	bne.n	80004ac <__adddf3+0x230>
 80004a0:	0040      	lsls	r0, r0, #1
 80004a2:	4149      	adcs	r1, r1
 80004a4:	bf28      	it	cs
 80004a6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004aa:	bd30      	pop	{r4, r5, pc}
 80004ac:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004b0:	bf3c      	itt	cc
 80004b2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004b6:	bd30      	popcc	{r4, r5, pc}
 80004b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004bc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004c4:	f04f 0000 	mov.w	r0, #0
 80004c8:	bd30      	pop	{r4, r5, pc}
 80004ca:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ce:	bf1a      	itte	ne
 80004d0:	4619      	movne	r1, r3
 80004d2:	4610      	movne	r0, r2
 80004d4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004d8:	bf1c      	itt	ne
 80004da:	460b      	movne	r3, r1
 80004dc:	4602      	movne	r2, r0
 80004de:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004e2:	bf06      	itte	eq
 80004e4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004e8:	ea91 0f03 	teqeq	r1, r3
 80004ec:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004f0:	bd30      	pop	{r4, r5, pc}
 80004f2:	bf00      	nop

080004f4 <__aeabi_ui2d>:
 80004f4:	f090 0f00 	teq	r0, #0
 80004f8:	bf04      	itt	eq
 80004fa:	2100      	moveq	r1, #0
 80004fc:	4770      	bxeq	lr
 80004fe:	b530      	push	{r4, r5, lr}
 8000500:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000504:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000508:	f04f 0500 	mov.w	r5, #0
 800050c:	f04f 0100 	mov.w	r1, #0
 8000510:	e750      	b.n	80003b4 <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_i2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800052c:	bf48      	it	mi
 800052e:	4240      	negmi	r0, r0
 8000530:	f04f 0100 	mov.w	r1, #0
 8000534:	e73e      	b.n	80003b4 <__adddf3+0x138>
 8000536:	bf00      	nop

08000538 <__aeabi_f2d>:
 8000538:	0042      	lsls	r2, r0, #1
 800053a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800053e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000542:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000546:	bf1f      	itttt	ne
 8000548:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800054c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000550:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000554:	4770      	bxne	lr
 8000556:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800055a:	bf08      	it	eq
 800055c:	4770      	bxeq	lr
 800055e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000562:	bf04      	itt	eq
 8000564:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000568:	4770      	bxeq	lr
 800056a:	b530      	push	{r4, r5, lr}
 800056c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000570:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000574:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000578:	e71c      	b.n	80003b4 <__adddf3+0x138>
 800057a:	bf00      	nop

0800057c <__aeabi_ul2d>:
 800057c:	ea50 0201 	orrs.w	r2, r0, r1
 8000580:	bf08      	it	eq
 8000582:	4770      	bxeq	lr
 8000584:	b530      	push	{r4, r5, lr}
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	e00a      	b.n	80005a2 <__aeabi_l2d+0x16>

0800058c <__aeabi_l2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800059a:	d502      	bpl.n	80005a2 <__aeabi_l2d+0x16>
 800059c:	4240      	negs	r0, r0
 800059e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005a2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005aa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ae:	f43f aed8 	beq.w	8000362 <__adddf3+0xe6>
 80005b2:	f04f 0203 	mov.w	r2, #3
 80005b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ba:	bf18      	it	ne
 80005bc:	3203      	addne	r2, #3
 80005be:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005c2:	bf18      	it	ne
 80005c4:	3203      	addne	r2, #3
 80005c6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ca:	f1c2 0320 	rsb	r3, r2, #32
 80005ce:	fa00 fc03 	lsl.w	ip, r0, r3
 80005d2:	fa20 f002 	lsr.w	r0, r0, r2
 80005d6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005da:	ea40 000e 	orr.w	r0, r0, lr
 80005de:	fa21 f102 	lsr.w	r1, r1, r2
 80005e2:	4414      	add	r4, r2
 80005e4:	e6bd      	b.n	8000362 <__adddf3+0xe6>
 80005e6:	bf00      	nop

080005e8 <__aeabi_dmul>:
 80005e8:	b570      	push	{r4, r5, r6, lr}
 80005ea:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005ee:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005f2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005f6:	bf1d      	ittte	ne
 80005f8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005fc:	ea94 0f0c 	teqne	r4, ip
 8000600:	ea95 0f0c 	teqne	r5, ip
 8000604:	f000 f8de 	bleq	80007c4 <__aeabi_dmul+0x1dc>
 8000608:	442c      	add	r4, r5
 800060a:	ea81 0603 	eor.w	r6, r1, r3
 800060e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000612:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000616:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800061a:	bf18      	it	ne
 800061c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000620:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000624:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000628:	d038      	beq.n	800069c <__aeabi_dmul+0xb4>
 800062a:	fba0 ce02 	umull	ip, lr, r0, r2
 800062e:	f04f 0500 	mov.w	r5, #0
 8000632:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000636:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800063a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800063e:	f04f 0600 	mov.w	r6, #0
 8000642:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000646:	f09c 0f00 	teq	ip, #0
 800064a:	bf18      	it	ne
 800064c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000650:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000654:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000658:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800065c:	d204      	bcs.n	8000668 <__aeabi_dmul+0x80>
 800065e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000662:	416d      	adcs	r5, r5
 8000664:	eb46 0606 	adc.w	r6, r6, r6
 8000668:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800066c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000670:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000674:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000678:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800067c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000680:	bf88      	it	hi
 8000682:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000686:	d81e      	bhi.n	80006c6 <__aeabi_dmul+0xde>
 8000688:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800068c:	bf08      	it	eq
 800068e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000692:	f150 0000 	adcs.w	r0, r0, #0
 8000696:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006a0:	ea46 0101 	orr.w	r1, r6, r1
 80006a4:	ea40 0002 	orr.w	r0, r0, r2
 80006a8:	ea81 0103 	eor.w	r1, r1, r3
 80006ac:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006b0:	bfc2      	ittt	gt
 80006b2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006b6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	popgt	{r4, r5, r6, pc}
 80006bc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006c0:	f04f 0e00 	mov.w	lr, #0
 80006c4:	3c01      	subs	r4, #1
 80006c6:	f300 80ab 	bgt.w	8000820 <__aeabi_dmul+0x238>
 80006ca:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ce:	bfde      	ittt	le
 80006d0:	2000      	movle	r0, #0
 80006d2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006d6:	bd70      	pople	{r4, r5, r6, pc}
 80006d8:	f1c4 0400 	rsb	r4, r4, #0
 80006dc:	3c20      	subs	r4, #32
 80006de:	da35      	bge.n	800074c <__aeabi_dmul+0x164>
 80006e0:	340c      	adds	r4, #12
 80006e2:	dc1b      	bgt.n	800071c <__aeabi_dmul+0x134>
 80006e4:	f104 0414 	add.w	r4, r4, #20
 80006e8:	f1c4 0520 	rsb	r5, r4, #32
 80006ec:	fa00 f305 	lsl.w	r3, r0, r5
 80006f0:	fa20 f004 	lsr.w	r0, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea40 0002 	orr.w	r0, r0, r2
 80006fc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000700:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000704:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000708:	fa21 f604 	lsr.w	r6, r1, r4
 800070c:	eb42 0106 	adc.w	r1, r2, r6
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f1c4 040c 	rsb	r4, r4, #12
 8000720:	f1c4 0520 	rsb	r5, r4, #32
 8000724:	fa00 f304 	lsl.w	r3, r0, r4
 8000728:	fa20 f005 	lsr.w	r0, r0, r5
 800072c:	fa01 f204 	lsl.w	r2, r1, r4
 8000730:	ea40 0002 	orr.w	r0, r0, r2
 8000734:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000738:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800073c:	f141 0100 	adc.w	r1, r1, #0
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 0520 	rsb	r5, r4, #32
 8000750:	fa00 f205 	lsl.w	r2, r0, r5
 8000754:	ea4e 0e02 	orr.w	lr, lr, r2
 8000758:	fa20 f304 	lsr.w	r3, r0, r4
 800075c:	fa01 f205 	lsl.w	r2, r1, r5
 8000760:	ea43 0302 	orr.w	r3, r3, r2
 8000764:	fa21 f004 	lsr.w	r0, r1, r4
 8000768:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800076c:	fa21 f204 	lsr.w	r2, r1, r4
 8000770:	ea20 0002 	bic.w	r0, r0, r2
 8000774:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000778:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800077c:	bf08      	it	eq
 800077e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000782:	bd70      	pop	{r4, r5, r6, pc}
 8000784:	f094 0f00 	teq	r4, #0
 8000788:	d10f      	bne.n	80007aa <__aeabi_dmul+0x1c2>
 800078a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800078e:	0040      	lsls	r0, r0, #1
 8000790:	eb41 0101 	adc.w	r1, r1, r1
 8000794:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000798:	bf08      	it	eq
 800079a:	3c01      	subeq	r4, #1
 800079c:	d0f7      	beq.n	800078e <__aeabi_dmul+0x1a6>
 800079e:	ea41 0106 	orr.w	r1, r1, r6
 80007a2:	f095 0f00 	teq	r5, #0
 80007a6:	bf18      	it	ne
 80007a8:	4770      	bxne	lr
 80007aa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ae:	0052      	lsls	r2, r2, #1
 80007b0:	eb43 0303 	adc.w	r3, r3, r3
 80007b4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3d01      	subeq	r5, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1c6>
 80007be:	ea43 0306 	orr.w	r3, r3, r6
 80007c2:	4770      	bx	lr
 80007c4:	ea94 0f0c 	teq	r4, ip
 80007c8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007cc:	bf18      	it	ne
 80007ce:	ea95 0f0c 	teqne	r5, ip
 80007d2:	d00c      	beq.n	80007ee <__aeabi_dmul+0x206>
 80007d4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007d8:	bf18      	it	ne
 80007da:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007de:	d1d1      	bne.n	8000784 <__aeabi_dmul+0x19c>
 80007e0:	ea81 0103 	eor.w	r1, r1, r3
 80007e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007e8:	f04f 0000 	mov.w	r0, #0
 80007ec:	bd70      	pop	{r4, r5, r6, pc}
 80007ee:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f2:	bf06      	itte	eq
 80007f4:	4610      	moveq	r0, r2
 80007f6:	4619      	moveq	r1, r3
 80007f8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fc:	d019      	beq.n	8000832 <__aeabi_dmul+0x24a>
 80007fe:	ea94 0f0c 	teq	r4, ip
 8000802:	d102      	bne.n	800080a <__aeabi_dmul+0x222>
 8000804:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000808:	d113      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800080a:	ea95 0f0c 	teq	r5, ip
 800080e:	d105      	bne.n	800081c <__aeabi_dmul+0x234>
 8000810:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000814:	bf1c      	itt	ne
 8000816:	4610      	movne	r0, r2
 8000818:	4619      	movne	r1, r3
 800081a:	d10a      	bne.n	8000832 <__aeabi_dmul+0x24a>
 800081c:	ea81 0103 	eor.w	r1, r1, r3
 8000820:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000824:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000828:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800082c:	f04f 0000 	mov.w	r0, #0
 8000830:	bd70      	pop	{r4, r5, r6, pc}
 8000832:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000836:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800083a:	bd70      	pop	{r4, r5, r6, pc}

0800083c <__aeabi_ddiv>:
 800083c:	b570      	push	{r4, r5, r6, lr}
 800083e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000842:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000846:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800084a:	bf1d      	ittte	ne
 800084c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000850:	ea94 0f0c 	teqne	r4, ip
 8000854:	ea95 0f0c 	teqne	r5, ip
 8000858:	f000 f8a7 	bleq	80009aa <__aeabi_ddiv+0x16e>
 800085c:	eba4 0405 	sub.w	r4, r4, r5
 8000860:	ea81 0e03 	eor.w	lr, r1, r3
 8000864:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000868:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800086c:	f000 8088 	beq.w	8000980 <__aeabi_ddiv+0x144>
 8000870:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000874:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000878:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800087c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000880:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000884:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000888:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800088c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000890:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000894:	429d      	cmp	r5, r3
 8000896:	bf08      	it	eq
 8000898:	4296      	cmpeq	r6, r2
 800089a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800089e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008a2:	d202      	bcs.n	80008aa <__aeabi_ddiv+0x6e>
 80008a4:	085b      	lsrs	r3, r3, #1
 80008a6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008aa:	1ab6      	subs	r6, r6, r2
 80008ac:	eb65 0503 	sbc.w	r5, r5, r3
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ba:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008be:	ebb6 0e02 	subs.w	lr, r6, r2
 80008c2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008c6:	bf22      	ittt	cs
 80008c8:	1ab6      	subcs	r6, r6, r2
 80008ca:	4675      	movcs	r5, lr
 80008cc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008da:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008de:	bf22      	ittt	cs
 80008e0:	1ab6      	subcs	r6, r6, r2
 80008e2:	4675      	movcs	r5, lr
 80008e4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008e8:	085b      	lsrs	r3, r3, #1
 80008ea:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000918:	ea55 0e06 	orrs.w	lr, r5, r6
 800091c:	d018      	beq.n	8000950 <__aeabi_ddiv+0x114>
 800091e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000922:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000926:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800092a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800092e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000932:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000936:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800093a:	d1c0      	bne.n	80008be <__aeabi_ddiv+0x82>
 800093c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000940:	d10b      	bne.n	800095a <__aeabi_ddiv+0x11e>
 8000942:	ea41 0100 	orr.w	r1, r1, r0
 8000946:	f04f 0000 	mov.w	r0, #0
 800094a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800094e:	e7b6      	b.n	80008be <__aeabi_ddiv+0x82>
 8000950:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000954:	bf04      	itt	eq
 8000956:	4301      	orreq	r1, r0
 8000958:	2000      	moveq	r0, #0
 800095a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800095e:	bf88      	it	hi
 8000960:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000964:	f63f aeaf 	bhi.w	80006c6 <__aeabi_dmul+0xde>
 8000968:	ebb5 0c03 	subs.w	ip, r5, r3
 800096c:	bf04      	itt	eq
 800096e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000972:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000976:	f150 0000 	adcs.w	r0, r0, #0
 800097a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800097e:	bd70      	pop	{r4, r5, r6, pc}
 8000980:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000984:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000988:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800098c:	bfc2      	ittt	gt
 800098e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000992:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000996:	bd70      	popgt	{r4, r5, r6, pc}
 8000998:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800099c:	f04f 0e00 	mov.w	lr, #0
 80009a0:	3c01      	subs	r4, #1
 80009a2:	e690      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009a4:	ea45 0e06 	orr.w	lr, r5, r6
 80009a8:	e68d      	b.n	80006c6 <__aeabi_dmul+0xde>
 80009aa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ae:	ea94 0f0c 	teq	r4, ip
 80009b2:	bf08      	it	eq
 80009b4:	ea95 0f0c 	teqeq	r5, ip
 80009b8:	f43f af3b 	beq.w	8000832 <__aeabi_dmul+0x24a>
 80009bc:	ea94 0f0c 	teq	r4, ip
 80009c0:	d10a      	bne.n	80009d8 <__aeabi_ddiv+0x19c>
 80009c2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009c6:	f47f af34 	bne.w	8000832 <__aeabi_dmul+0x24a>
 80009ca:	ea95 0f0c 	teq	r5, ip
 80009ce:	f47f af25 	bne.w	800081c <__aeabi_dmul+0x234>
 80009d2:	4610      	mov	r0, r2
 80009d4:	4619      	mov	r1, r3
 80009d6:	e72c      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009d8:	ea95 0f0c 	teq	r5, ip
 80009dc:	d106      	bne.n	80009ec <__aeabi_ddiv+0x1b0>
 80009de:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009e2:	f43f aefd 	beq.w	80007e0 <__aeabi_dmul+0x1f8>
 80009e6:	4610      	mov	r0, r2
 80009e8:	4619      	mov	r1, r3
 80009ea:	e722      	b.n	8000832 <__aeabi_dmul+0x24a>
 80009ec:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009f0:	bf18      	it	ne
 80009f2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009f6:	f47f aec5 	bne.w	8000784 <__aeabi_dmul+0x19c>
 80009fa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009fe:	f47f af0d 	bne.w	800081c <__aeabi_dmul+0x234>
 8000a02:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a06:	f47f aeeb 	bne.w	80007e0 <__aeabi_dmul+0x1f8>
 8000a0a:	e712      	b.n	8000832 <__aeabi_dmul+0x24a>

08000a0c <__aeabi_d2f>:
 8000a0c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a10:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a14:	bf24      	itt	cs
 8000a16:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a1a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a1e:	d90d      	bls.n	8000a3c <__aeabi_d2f+0x30>
 8000a20:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a24:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a28:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a2c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a30:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a34:	bf08      	it	eq
 8000a36:	f020 0001 	biceq.w	r0, r0, #1
 8000a3a:	4770      	bx	lr
 8000a3c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a40:	d121      	bne.n	8000a86 <__aeabi_d2f+0x7a>
 8000a42:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a46:	bfbc      	itt	lt
 8000a48:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a4c:	4770      	bxlt	lr
 8000a4e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a52:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a56:	f1c2 0218 	rsb	r2, r2, #24
 8000a5a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a5e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a62:	fa20 f002 	lsr.w	r0, r0, r2
 8000a66:	bf18      	it	ne
 8000a68:	f040 0001 	orrne.w	r0, r0, #1
 8000a6c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a70:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a74:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a78:	ea40 000c 	orr.w	r0, r0, ip
 8000a7c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a80:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a84:	e7cc      	b.n	8000a20 <__aeabi_d2f+0x14>
 8000a86:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a8a:	d107      	bne.n	8000a9c <__aeabi_d2f+0x90>
 8000a8c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a90:	bf1e      	ittt	ne
 8000a92:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a96:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a9a:	4770      	bxne	lr
 8000a9c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000aa0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000aa4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000aa8:	4770      	bx	lr
 8000aaa:	bf00      	nop

08000aac <__aeabi_ldivmod>:
 8000aac:	b97b      	cbnz	r3, 8000ace <__aeabi_ldivmod+0x22>
 8000aae:	b972      	cbnz	r2, 8000ace <__aeabi_ldivmod+0x22>
 8000ab0:	2900      	cmp	r1, #0
 8000ab2:	bfbe      	ittt	lt
 8000ab4:	2000      	movlt	r0, #0
 8000ab6:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 8000aba:	e006      	blt.n	8000aca <__aeabi_ldivmod+0x1e>
 8000abc:	bf08      	it	eq
 8000abe:	2800      	cmpeq	r0, #0
 8000ac0:	bf1c      	itt	ne
 8000ac2:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 8000ac6:	f04f 30ff 	movne.w	r0, #4294967295
 8000aca:	f000 b9a5 	b.w	8000e18 <__aeabi_idiv0>
 8000ace:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ad2:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad6:	2900      	cmp	r1, #0
 8000ad8:	db09      	blt.n	8000aee <__aeabi_ldivmod+0x42>
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	db1a      	blt.n	8000b14 <__aeabi_ldivmod+0x68>
 8000ade:	f000 f835 	bl	8000b4c <__udivmoddi4>
 8000ae2:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ae6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000aea:	b004      	add	sp, #16
 8000aec:	4770      	bx	lr
 8000aee:	4240      	negs	r0, r0
 8000af0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	db1b      	blt.n	8000b30 <__aeabi_ldivmod+0x84>
 8000af8:	f000 f828 	bl	8000b4c <__udivmoddi4>
 8000afc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b00:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b04:	b004      	add	sp, #16
 8000b06:	4240      	negs	r0, r0
 8000b08:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b0c:	4252      	negs	r2, r2
 8000b0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b12:	4770      	bx	lr
 8000b14:	4252      	negs	r2, r2
 8000b16:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b1a:	f000 f817 	bl	8000b4c <__udivmoddi4>
 8000b1e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b26:	b004      	add	sp, #16
 8000b28:	4240      	negs	r0, r0
 8000b2a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b2e:	4770      	bx	lr
 8000b30:	4252      	negs	r2, r2
 8000b32:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b36:	f000 f809 	bl	8000b4c <__udivmoddi4>
 8000b3a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b42:	b004      	add	sp, #16
 8000b44:	4252      	negs	r2, r2
 8000b46:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9e08      	ldr	r6, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	4688      	mov	r8, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14b      	bne.n	8000bf2 <__udivmoddi4+0xa6>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4615      	mov	r5, r2
 8000b5e:	d967      	bls.n	8000c30 <__udivmoddi4+0xe4>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b14a      	cbz	r2, 8000b7a <__udivmoddi4+0x2e>
 8000b66:	f1c2 0720 	rsb	r7, r2, #32
 8000b6a:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6e:	fa20 f707 	lsr.w	r7, r0, r7
 8000b72:	4095      	lsls	r5, r2
 8000b74:	ea47 0803 	orr.w	r8, r7, r3
 8000b78:	4094      	lsls	r4, r2
 8000b7a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b7e:	0c23      	lsrs	r3, r4, #16
 8000b80:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b84:	fa1f fc85 	uxth.w	ip, r5
 8000b88:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b8c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b90:	fb07 f10c 	mul.w	r1, r7, ip
 8000b94:	4299      	cmp	r1, r3
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x60>
 8000b98:	18eb      	adds	r3, r5, r3
 8000b9a:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b9e:	f080 811b 	bcs.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba2:	4299      	cmp	r1, r3
 8000ba4:	f240 8118 	bls.w	8000dd8 <__udivmoddi4+0x28c>
 8000ba8:	3f02      	subs	r7, #2
 8000baa:	442b      	add	r3, r5
 8000bac:	1a5b      	subs	r3, r3, r1
 8000bae:	b2a4      	uxth	r4, r4
 8000bb0:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bb4:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bb8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bbc:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bc0:	45a4      	cmp	ip, r4
 8000bc2:	d909      	bls.n	8000bd8 <__udivmoddi4+0x8c>
 8000bc4:	192c      	adds	r4, r5, r4
 8000bc6:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bca:	f080 8107 	bcs.w	8000ddc <__udivmoddi4+0x290>
 8000bce:	45a4      	cmp	ip, r4
 8000bd0:	f240 8104 	bls.w	8000ddc <__udivmoddi4+0x290>
 8000bd4:	3802      	subs	r0, #2
 8000bd6:	442c      	add	r4, r5
 8000bd8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bdc:	eba4 040c 	sub.w	r4, r4, ip
 8000be0:	2700      	movs	r7, #0
 8000be2:	b11e      	cbz	r6, 8000bec <__udivmoddi4+0xa0>
 8000be4:	40d4      	lsrs	r4, r2
 8000be6:	2300      	movs	r3, #0
 8000be8:	e9c6 4300 	strd	r4, r3, [r6]
 8000bec:	4639      	mov	r1, r7
 8000bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf2:	428b      	cmp	r3, r1
 8000bf4:	d909      	bls.n	8000c0a <__udivmoddi4+0xbe>
 8000bf6:	2e00      	cmp	r6, #0
 8000bf8:	f000 80eb 	beq.w	8000dd2 <__udivmoddi4+0x286>
 8000bfc:	2700      	movs	r7, #0
 8000bfe:	e9c6 0100 	strd	r0, r1, [r6]
 8000c02:	4638      	mov	r0, r7
 8000c04:	4639      	mov	r1, r7
 8000c06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0a:	fab3 f783 	clz	r7, r3
 8000c0e:	2f00      	cmp	r7, #0
 8000c10:	d147      	bne.n	8000ca2 <__udivmoddi4+0x156>
 8000c12:	428b      	cmp	r3, r1
 8000c14:	d302      	bcc.n	8000c1c <__udivmoddi4+0xd0>
 8000c16:	4282      	cmp	r2, r0
 8000c18:	f200 80fa 	bhi.w	8000e10 <__udivmoddi4+0x2c4>
 8000c1c:	1a84      	subs	r4, r0, r2
 8000c1e:	eb61 0303 	sbc.w	r3, r1, r3
 8000c22:	2001      	movs	r0, #1
 8000c24:	4698      	mov	r8, r3
 8000c26:	2e00      	cmp	r6, #0
 8000c28:	d0e0      	beq.n	8000bec <__udivmoddi4+0xa0>
 8000c2a:	e9c6 4800 	strd	r4, r8, [r6]
 8000c2e:	e7dd      	b.n	8000bec <__udivmoddi4+0xa0>
 8000c30:	b902      	cbnz	r2, 8000c34 <__udivmoddi4+0xe8>
 8000c32:	deff      	udf	#255	; 0xff
 8000c34:	fab2 f282 	clz	r2, r2
 8000c38:	2a00      	cmp	r2, #0
 8000c3a:	f040 808f 	bne.w	8000d5c <__udivmoddi4+0x210>
 8000c3e:	1b49      	subs	r1, r1, r5
 8000c40:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c44:	fa1f f885 	uxth.w	r8, r5
 8000c48:	2701      	movs	r7, #1
 8000c4a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c4e:	0c23      	lsrs	r3, r4, #16
 8000c50:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c54:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c58:	fb08 f10c 	mul.w	r1, r8, ip
 8000c5c:	4299      	cmp	r1, r3
 8000c5e:	d907      	bls.n	8000c70 <__udivmoddi4+0x124>
 8000c60:	18eb      	adds	r3, r5, r3
 8000c62:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c66:	d202      	bcs.n	8000c6e <__udivmoddi4+0x122>
 8000c68:	4299      	cmp	r1, r3
 8000c6a:	f200 80cd 	bhi.w	8000e08 <__udivmoddi4+0x2bc>
 8000c6e:	4684      	mov	ip, r0
 8000c70:	1a59      	subs	r1, r3, r1
 8000c72:	b2a3      	uxth	r3, r4
 8000c74:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c78:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c7c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c80:	fb08 f800 	mul.w	r8, r8, r0
 8000c84:	45a0      	cmp	r8, r4
 8000c86:	d907      	bls.n	8000c98 <__udivmoddi4+0x14c>
 8000c88:	192c      	adds	r4, r5, r4
 8000c8a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c8e:	d202      	bcs.n	8000c96 <__udivmoddi4+0x14a>
 8000c90:	45a0      	cmp	r8, r4
 8000c92:	f200 80b6 	bhi.w	8000e02 <__udivmoddi4+0x2b6>
 8000c96:	4618      	mov	r0, r3
 8000c98:	eba4 0408 	sub.w	r4, r4, r8
 8000c9c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000ca0:	e79f      	b.n	8000be2 <__udivmoddi4+0x96>
 8000ca2:	f1c7 0c20 	rsb	ip, r7, #32
 8000ca6:	40bb      	lsls	r3, r7
 8000ca8:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cac:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cb0:	fa01 f407 	lsl.w	r4, r1, r7
 8000cb4:	fa20 f50c 	lsr.w	r5, r0, ip
 8000cb8:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cbc:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cc0:	4325      	orrs	r5, r4
 8000cc2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cc6:	0c2c      	lsrs	r4, r5, #16
 8000cc8:	fb08 3319 	mls	r3, r8, r9, r3
 8000ccc:	fa1f fa8e 	uxth.w	sl, lr
 8000cd0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000cd4:	fb09 f40a 	mul.w	r4, r9, sl
 8000cd8:	429c      	cmp	r4, r3
 8000cda:	fa02 f207 	lsl.w	r2, r2, r7
 8000cde:	fa00 f107 	lsl.w	r1, r0, r7
 8000ce2:	d90b      	bls.n	8000cfc <__udivmoddi4+0x1b0>
 8000ce4:	eb1e 0303 	adds.w	r3, lr, r3
 8000ce8:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cec:	f080 8087 	bcs.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf0:	429c      	cmp	r4, r3
 8000cf2:	f240 8084 	bls.w	8000dfe <__udivmoddi4+0x2b2>
 8000cf6:	f1a9 0902 	sub.w	r9, r9, #2
 8000cfa:	4473      	add	r3, lr
 8000cfc:	1b1b      	subs	r3, r3, r4
 8000cfe:	b2ad      	uxth	r5, r5
 8000d00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d04:	fb08 3310 	mls	r3, r8, r0, r3
 8000d08:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d0c:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d10:	45a2      	cmp	sl, r4
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x1da>
 8000d14:	eb1e 0404 	adds.w	r4, lr, r4
 8000d18:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d1c:	d26b      	bcs.n	8000df6 <__udivmoddi4+0x2aa>
 8000d1e:	45a2      	cmp	sl, r4
 8000d20:	d969      	bls.n	8000df6 <__udivmoddi4+0x2aa>
 8000d22:	3802      	subs	r0, #2
 8000d24:	4474      	add	r4, lr
 8000d26:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d2a:	fba0 8902 	umull	r8, r9, r0, r2
 8000d2e:	eba4 040a 	sub.w	r4, r4, sl
 8000d32:	454c      	cmp	r4, r9
 8000d34:	46c2      	mov	sl, r8
 8000d36:	464b      	mov	r3, r9
 8000d38:	d354      	bcc.n	8000de4 <__udivmoddi4+0x298>
 8000d3a:	d051      	beq.n	8000de0 <__udivmoddi4+0x294>
 8000d3c:	2e00      	cmp	r6, #0
 8000d3e:	d069      	beq.n	8000e14 <__udivmoddi4+0x2c8>
 8000d40:	ebb1 050a 	subs.w	r5, r1, sl
 8000d44:	eb64 0403 	sbc.w	r4, r4, r3
 8000d48:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d4c:	40fd      	lsrs	r5, r7
 8000d4e:	40fc      	lsrs	r4, r7
 8000d50:	ea4c 0505 	orr.w	r5, ip, r5
 8000d54:	e9c6 5400 	strd	r5, r4, [r6]
 8000d58:	2700      	movs	r7, #0
 8000d5a:	e747      	b.n	8000bec <__udivmoddi4+0xa0>
 8000d5c:	f1c2 0320 	rsb	r3, r2, #32
 8000d60:	fa20 f703 	lsr.w	r7, r0, r3
 8000d64:	4095      	lsls	r5, r2
 8000d66:	fa01 f002 	lsl.w	r0, r1, r2
 8000d6a:	fa21 f303 	lsr.w	r3, r1, r3
 8000d6e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d72:	4338      	orrs	r0, r7
 8000d74:	0c01      	lsrs	r1, r0, #16
 8000d76:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d7a:	fa1f f885 	uxth.w	r8, r5
 8000d7e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb07 f308 	mul.w	r3, r7, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	fa04 f402 	lsl.w	r4, r4, r2
 8000d90:	d907      	bls.n	8000da2 <__udivmoddi4+0x256>
 8000d92:	1869      	adds	r1, r5, r1
 8000d94:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d98:	d22f      	bcs.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	d92d      	bls.n	8000dfa <__udivmoddi4+0x2ae>
 8000d9e:	3f02      	subs	r7, #2
 8000da0:	4429      	add	r1, r5
 8000da2:	1acb      	subs	r3, r1, r3
 8000da4:	b281      	uxth	r1, r0
 8000da6:	fbb3 f0fe 	udiv	r0, r3, lr
 8000daa:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dae:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000db2:	fb00 f308 	mul.w	r3, r0, r8
 8000db6:	428b      	cmp	r3, r1
 8000db8:	d907      	bls.n	8000dca <__udivmoddi4+0x27e>
 8000dba:	1869      	adds	r1, r5, r1
 8000dbc:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dc0:	d217      	bcs.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d915      	bls.n	8000df2 <__udivmoddi4+0x2a6>
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	4429      	add	r1, r5
 8000dca:	1ac9      	subs	r1, r1, r3
 8000dcc:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000dd0:	e73b      	b.n	8000c4a <__udivmoddi4+0xfe>
 8000dd2:	4637      	mov	r7, r6
 8000dd4:	4630      	mov	r0, r6
 8000dd6:	e709      	b.n	8000bec <__udivmoddi4+0xa0>
 8000dd8:	4607      	mov	r7, r0
 8000dda:	e6e7      	b.n	8000bac <__udivmoddi4+0x60>
 8000ddc:	4618      	mov	r0, r3
 8000dde:	e6fb      	b.n	8000bd8 <__udivmoddi4+0x8c>
 8000de0:	4541      	cmp	r1, r8
 8000de2:	d2ab      	bcs.n	8000d3c <__udivmoddi4+0x1f0>
 8000de4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000de8:	eb69 020e 	sbc.w	r2, r9, lr
 8000dec:	3801      	subs	r0, #1
 8000dee:	4613      	mov	r3, r2
 8000df0:	e7a4      	b.n	8000d3c <__udivmoddi4+0x1f0>
 8000df2:	4660      	mov	r0, ip
 8000df4:	e7e9      	b.n	8000dca <__udivmoddi4+0x27e>
 8000df6:	4618      	mov	r0, r3
 8000df8:	e795      	b.n	8000d26 <__udivmoddi4+0x1da>
 8000dfa:	4667      	mov	r7, ip
 8000dfc:	e7d1      	b.n	8000da2 <__udivmoddi4+0x256>
 8000dfe:	4681      	mov	r9, r0
 8000e00:	e77c      	b.n	8000cfc <__udivmoddi4+0x1b0>
 8000e02:	3802      	subs	r0, #2
 8000e04:	442c      	add	r4, r5
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0x14c>
 8000e08:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e0c:	442b      	add	r3, r5
 8000e0e:	e72f      	b.n	8000c70 <__udivmoddi4+0x124>
 8000e10:	4638      	mov	r0, r7
 8000e12:	e708      	b.n	8000c26 <__udivmoddi4+0xda>
 8000e14:	4637      	mov	r7, r6
 8000e16:	e6e9      	b.n	8000bec <__udivmoddi4+0xa0>

08000e18 <__aeabi_idiv0>:
 8000e18:	4770      	bx	lr
 8000e1a:	bf00      	nop

08000e1c <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 8000e26:	79fb      	ldrb	r3, [r7, #7]
 8000e28:	4618      	mov	r0, r3
 8000e2a:	f000 f80d 	bl	8000e48 <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 8000e2e:	79fb      	ldrb	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f000 f833 	bl	8000e9c <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 8000e36:	79fb      	ldrb	r3, [r7, #7]
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f000 f877 	bl	8000f2c <adns2610_config>
}
 8000e3e:	bf00      	nop
 8000e40:	3708      	adds	r7, #8
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
	...

08000e48 <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	4603      	mov	r3, r0
 8000e50:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	2b00      	cmp	r3, #0
 8000e56:	d101      	bne.n	8000e5c <adns2610_configureSPI+0x14>
 8000e58:	4b0d      	ldr	r3, [pc, #52]	; (8000e90 <adns2610_configureSPI+0x48>)
 8000e5a:	e000      	b.n	8000e5e <adns2610_configureSPI+0x16>
 8000e5c:	4b0d      	ldr	r3, [pc, #52]	; (8000e94 <adns2610_configureSPI+0x4c>)
 8000e5e:	4a0e      	ldr	r2, [pc, #56]	; (8000e98 <adns2610_configureSPI+0x50>)
 8000e60:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000e62:	4b0d      	ldr	r3, [pc, #52]	; (8000e98 <adns2610_configureSPI+0x50>)
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	685a      	ldr	r2, [r3, #4]
 8000e68:	4b0b      	ldr	r3, [pc, #44]	; (8000e98 <adns2610_configureSPI+0x50>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000e70:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000e72:	4b09      	ldr	r3, [pc, #36]	; (8000e98 <adns2610_configureSPI+0x50>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	681a      	ldr	r2, [r3, #0]
 8000e78:	4b07      	ldr	r3, [pc, #28]	; (8000e98 <adns2610_configureSPI+0x50>)
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000e80:	601a      	str	r2, [r3, #0]
}
 8000e82:	bf00      	nop
 8000e84:	370c      	adds	r7, #12
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
 8000e8e:	bf00      	nop
 8000e90:	40003800 	.word	0x40003800
 8000e94:	40003c00 	.word	0x40003c00
 8000e98:	200005e4 	.word	0x200005e4

08000e9c <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b082      	sub	sp, #8
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 8000ea6:	79fb      	ldrb	r3, [r7, #7]
 8000ea8:	2b00      	cmp	r3, #0
 8000eaa:	d101      	bne.n	8000eb0 <adns2610_resetCOM+0x14>
 8000eac:	4b1c      	ldr	r3, [pc, #112]	; (8000f20 <adns2610_resetCOM+0x84>)
 8000eae:	e000      	b.n	8000eb2 <adns2610_resetCOM+0x16>
 8000eb0:	4b1c      	ldr	r3, [pc, #112]	; (8000f24 <adns2610_resetCOM+0x88>)
 8000eb2:	4a1d      	ldr	r2, [pc, #116]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000eb4:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000eb6:	bf00      	nop
 8000eb8:	4b1b      	ldr	r3, [pc, #108]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689b      	ldr	r3, [r3, #8]
 8000ebe:	f003 0302 	and.w	r3, r3, #2
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d0f8      	beq.n	8000eb8 <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 8000ec6:	4b18      	ldr	r3, [pc, #96]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	330c      	adds	r3, #12
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000ed0:	bf00      	nop
 8000ed2:	4b15      	ldr	r3, [pc, #84]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689b      	ldr	r3, [r3, #8]
 8000ed8:	f003 0301 	and.w	r3, r3, #1
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d0f8      	beq.n	8000ed2 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000ee0:	4b11      	ldr	r3, [pc, #68]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	330c      	adds	r3, #12
 8000ee6:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000ee8:	bf00      	nop
 8000eea:	4b0f      	ldr	r3, [pc, #60]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	689b      	ldr	r3, [r3, #8]
 8000ef0:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000ef4:	4b0c      	ldr	r3, [pc, #48]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	689b      	ldr	r3, [r3, #8]
 8000efa:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000efe:	431a      	orrs	r2, r3
 8000f00:	4b09      	ldr	r3, [pc, #36]	; (8000f28 <adns2610_resetCOM+0x8c>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	689b      	ldr	r3, [r3, #8]
 8000f06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d1ec      	bne.n	8000eea <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 8000f10:	2064      	movs	r0, #100	; 0x64
 8000f12:	f004 fc99 	bl	8005848 <LL_mDelay>
}
 8000f16:	bf00      	nop
 8000f18:	3708      	adds	r7, #8
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	bd80      	pop	{r7, pc}
 8000f1e:	bf00      	nop
 8000f20:	40003800 	.word	0x40003800
 8000f24:	40003c00 	.word	0x40003c00
 8000f28:	200005e4 	.word	0x200005e4

08000f2c <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	4603      	mov	r3, r0
 8000f34:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 8000f36:	79fb      	ldrb	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d101      	bne.n	8000f40 <adns2610_config+0x14>
 8000f3c:	4b2b      	ldr	r3, [pc, #172]	; (8000fec <adns2610_config+0xc0>)
 8000f3e:	e000      	b.n	8000f42 <adns2610_config+0x16>
 8000f40:	4b2b      	ldr	r3, [pc, #172]	; (8000ff0 <adns2610_config+0xc4>)
 8000f42:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000f44:	68f9      	ldr	r1, [r7, #12]
 8000f46:	482b      	ldr	r0, [pc, #172]	; (8000ff4 <adns2610_config+0xc8>)
 8000f48:	f004 fce6 	bl	8005918 <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 8000f4c:	492a      	ldr	r1, [pc, #168]	; (8000ff8 <adns2610_config+0xcc>)
 8000f4e:	482b      	ldr	r0, [pc, #172]	; (8000ffc <adns2610_config+0xd0>)
 8000f50:	f004 fce2 	bl	8005918 <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 8000f54:	79fb      	ldrb	r3, [r7, #7]
 8000f56:	2201      	movs	r2, #1
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f000 f8be 	bl	80010dc <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 8000f60:	4925      	ldr	r1, [pc, #148]	; (8000ff8 <adns2610_config+0xcc>)
 8000f62:	4827      	ldr	r0, [pc, #156]	; (8001000 <adns2610_config+0xd4>)
 8000f64:	f004 fcd8 	bl	8005918 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 8000f68:	79fb      	ldrb	r3, [r7, #7]
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	f000 f857 	bl	8001020 <adns2610_readRegister>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b01      	cmp	r3, #1
 8000f76:	d10f      	bne.n	8000f98 <adns2610_config+0x6c>
 8000f78:	4822      	ldr	r0, [pc, #136]	; (8001004 <adns2610_config+0xd8>)
 8000f7a:	f004 fd41 	bl	8005a00 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 8000f7e:	4922      	ldr	r1, [pc, #136]	; (8001008 <adns2610_config+0xdc>)
 8000f80:	4822      	ldr	r0, [pc, #136]	; (800100c <adns2610_config+0xe0>)
 8000f82:	f004 fcc9 	bl	8005918 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	2101      	movs	r1, #1
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 f848 	bl	8001020 <adns2610_readRegister>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b01      	cmp	r3, #1
 8000f94:	d116      	bne.n	8000fc4 <adns2610_config+0x98>
 8000f96:	e003      	b.n	8000fa0 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 8000f98:	481d      	ldr	r0, [pc, #116]	; (8001010 <adns2610_config+0xe4>)
 8000f9a:	f004 fd31 	bl	8005a00 <puts>
 8000f9e:	e7fe      	b.n	8000f9e <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000fa0:	4818      	ldr	r0, [pc, #96]	; (8001004 <adns2610_config+0xd8>)
 8000fa2:	f004 fd2d 	bl	8005a00 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 8000fa6:	491b      	ldr	r1, [pc, #108]	; (8001014 <adns2610_config+0xe8>)
 8000fa8:	481b      	ldr	r0, [pc, #108]	; (8001018 <adns2610_config+0xec>)
 8000faa:	f004 fcb5 	bl	8005918 <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	2111      	movs	r1, #17
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f000 f834 	bl	8001020 <adns2610_readRegister>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	f003 030f 	and.w	r3, r3, #15
 8000fbe:	2b0f      	cmp	r3, #15
 8000fc0:	d108      	bne.n	8000fd4 <adns2610_config+0xa8>
 8000fc2:	e003      	b.n	8000fcc <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000fc4:	4812      	ldr	r0, [pc, #72]	; (8001010 <adns2610_config+0xe4>)
 8000fc6:	f004 fd1b 	bl	8005a00 <puts>
 8000fca:	e7fe      	b.n	8000fca <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000fcc:	480d      	ldr	r0, [pc, #52]	; (8001004 <adns2610_config+0xd8>)
 8000fce:	f004 fd17 	bl	8005a00 <puts>
 8000fd2:	e003      	b.n	8000fdc <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000fd4:	480e      	ldr	r0, [pc, #56]	; (8001010 <adns2610_config+0xe4>)
 8000fd6:	f004 fd13 	bl	8005a00 <puts>
 8000fda:	e7fe      	b.n	8000fda <adns2610_config+0xae>

	printf("\r\n");
 8000fdc:	480f      	ldr	r0, [pc, #60]	; (800101c <adns2610_config+0xf0>)
 8000fde:	f004 fd0f 	bl	8005a00 <puts>
}
 8000fe2:	bf00      	nop
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	080067e4 	.word	0x080067e4
 8000ff0:	080067f4 	.word	0x080067f4
 8000ff4:	08006804 	.word	0x08006804
 8000ff8:	08006860 	.word	0x08006860
 8000ffc:	08006870 	.word	0x08006870
 8001000:	080068a0 	.word	0x080068a0
 8001004:	080068cc 	.word	0x080068cc
 8001008:	080068dc 	.word	0x080068dc
 800100c:	080068ec 	.word	0x080068ec
 8001010:	080068d4 	.word	0x080068d4
 8001014:	08006918 	.word	0x08006918
 8001018:	0800692c 	.word	0x0800692c
 800101c:	08006960 	.word	0x08006960

08001020 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 8001020:	b580      	push	{r7, lr}
 8001022:	b084      	sub	sp, #16
 8001024:	af00      	add	r7, sp, #0
 8001026:	4603      	mov	r3, r0
 8001028:	460a      	mov	r2, r1
 800102a:	71fb      	strb	r3, [r7, #7]
 800102c:	4613      	mov	r3, r2
 800102e:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	2b00      	cmp	r3, #0
 8001034:	d101      	bne.n	800103a <adns2610_readRegister+0x1a>
 8001036:	4b26      	ldr	r3, [pc, #152]	; (80010d0 <adns2610_readRegister+0xb0>)
 8001038:	e000      	b.n	800103c <adns2610_readRegister+0x1c>
 800103a:	4b26      	ldr	r3, [pc, #152]	; (80010d4 <adns2610_readRegister+0xb4>)
 800103c:	4a26      	ldr	r2, [pc, #152]	; (80010d8 <adns2610_readRegister+0xb8>)
 800103e:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8001040:	bf00      	nop
 8001042:	4b25      	ldr	r3, [pc, #148]	; (80010d8 <adns2610_readRegister+0xb8>)
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	689b      	ldr	r3, [r3, #8]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d0f8      	beq.n	8001042 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8001050:	4b21      	ldr	r3, [pc, #132]	; (80010d8 <adns2610_readRegister+0xb8>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	330c      	adds	r3, #12
 8001056:	79ba      	ldrb	r2, [r7, #6]
 8001058:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800105a:	bf00      	nop
 800105c:	4b1e      	ldr	r3, [pc, #120]	; (80010d8 <adns2610_readRegister+0xb8>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	689b      	ldr	r3, [r3, #8]
 8001062:	f003 0301 	and.w	r3, r3, #1
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f8      	beq.n	800105c <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800106a:	4b1b      	ldr	r3, [pc, #108]	; (80010d8 <adns2610_readRegister+0xb8>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	330c      	adds	r3, #12
 8001070:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8001072:	2001      	movs	r0, #1
 8001074:	f004 fbe8 	bl	8005848 <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 8001078:	4b17      	ldr	r3, [pc, #92]	; (80010d8 <adns2610_readRegister+0xb8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	330c      	adds	r3, #12
 800107e:	2200      	movs	r2, #0
 8001080:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8001082:	bf00      	nop
 8001084:	4b14      	ldr	r3, [pc, #80]	; (80010d8 <adns2610_readRegister+0xb8>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 0301 	and.w	r3, r3, #1
 800108e:	2b00      	cmp	r3, #0
 8001090:	d0f8      	beq.n	8001084 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8001092:	4b11      	ldr	r3, [pc, #68]	; (80010d8 <adns2610_readRegister+0xb8>)
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	330c      	adds	r3, #12
 8001098:	781b      	ldrb	r3, [r3, #0]
 800109a:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800109c:	bf00      	nop
 800109e:	4b0e      	ldr	r3, [pc, #56]	; (80010d8 <adns2610_readRegister+0xb8>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	689b      	ldr	r3, [r3, #8]
 80010a4:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80010a8:	4b0b      	ldr	r3, [pc, #44]	; (80010d8 <adns2610_readRegister+0xb8>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	689b      	ldr	r3, [r3, #8]
 80010ae:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010b2:	431a      	orrs	r2, r3
 80010b4:	4b08      	ldr	r3, [pc, #32]	; (80010d8 <adns2610_readRegister+0xb8>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010be:	4313      	orrs	r3, r2
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d1ec      	bne.n	800109e <adns2610_readRegister+0x7e>
	return value;
 80010c4:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3710      	adds	r7, #16
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	40003800 	.word	0x40003800
 80010d4:	40003c00 	.word	0x40003c00
 80010d8:	200005e4 	.word	0x200005e4

080010dc <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80010dc:	b480      	push	{r7}
 80010de:	b083      	sub	sp, #12
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	4603      	mov	r3, r0
 80010e4:	71fb      	strb	r3, [r7, #7]
 80010e6:	460b      	mov	r3, r1
 80010e8:	71bb      	strb	r3, [r7, #6]
 80010ea:	4613      	mov	r3, r2
 80010ec:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 80010ee:	79fb      	ldrb	r3, [r7, #7]
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d101      	bne.n	80010f8 <adns2610_writeRegister+0x1c>
 80010f4:	4b26      	ldr	r3, [pc, #152]	; (8001190 <adns2610_writeRegister+0xb4>)
 80010f6:	e000      	b.n	80010fa <adns2610_writeRegister+0x1e>
 80010f8:	4b26      	ldr	r3, [pc, #152]	; (8001194 <adns2610_writeRegister+0xb8>)
 80010fa:	4a27      	ldr	r2, [pc, #156]	; (8001198 <adns2610_writeRegister+0xbc>)
 80010fc:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80010fe:	4b26      	ldr	r3, [pc, #152]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	685a      	ldr	r2, [r3, #4]
 8001104:	4b24      	ldr	r3, [pc, #144]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800110c:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800110e:	bf00      	nop
 8001110:	4b21      	ldr	r3, [pc, #132]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	2b00      	cmp	r3, #0
 800111c:	d0f8      	beq.n	8001110 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 800111e:	797b      	ldrb	r3, [r7, #5]
 8001120:	021b      	lsls	r3, r3, #8
 8001122:	4619      	mov	r1, r3
 8001124:	79bb      	ldrb	r3, [r7, #6]
 8001126:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800112a:	b2db      	uxtb	r3, r3
 800112c:	461a      	mov	r2, r3
 800112e:	4b1a      	ldr	r3, [pc, #104]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	430a      	orrs	r2, r1
 8001134:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8001136:	bf00      	nop
 8001138:	4b17      	ldr	r3, [pc, #92]	; (8001198 <adns2610_writeRegister+0xbc>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	f003 0301 	and.w	r3, r3, #1
 8001142:	2b00      	cmp	r3, #0
 8001144:	d0f8      	beq.n	8001138 <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 8001146:	4b14      	ldr	r3, [pc, #80]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800114c:	bf00      	nop
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	689b      	ldr	r3, [r3, #8]
 8001154:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8001158:	4b0f      	ldr	r3, [pc, #60]	; (8001198 <adns2610_writeRegister+0xbc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	689b      	ldr	r3, [r3, #8]
 800115e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001162:	431a      	orrs	r2, r3
 8001164:	4b0c      	ldr	r3, [pc, #48]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	689b      	ldr	r3, [r3, #8]
 800116a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800116e:	4313      	orrs	r3, r2
 8001170:	2b00      	cmp	r3, #0
 8001172:	d1ec      	bne.n	800114e <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8001174:	4b08      	ldr	r3, [pc, #32]	; (8001198 <adns2610_writeRegister+0xbc>)
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	4b07      	ldr	r3, [pc, #28]	; (8001198 <adns2610_writeRegister+0xbc>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001182:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8001184:	bf00      	nop
 8001186:	370c      	adds	r7, #12
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40003800 	.word	0x40003800
 8001194:	40003c00 	.word	0x40003c00
 8001198:	200005e4 	.word	0x200005e4

0800119c <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	4603      	mov	r3, r0
 80011a4:	6039      	str	r1, [r7, #0]
 80011a6:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80011a8:	79fb      	ldrb	r3, [r7, #7]
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d101      	bne.n	80011b2 <adns2610_receiveByte+0x16>
 80011ae:	4b19      	ldr	r3, [pc, #100]	; (8001214 <adns2610_receiveByte+0x78>)
 80011b0:	e000      	b.n	80011b4 <adns2610_receiveByte+0x18>
 80011b2:	4b19      	ldr	r3, [pc, #100]	; (8001218 <adns2610_receiveByte+0x7c>)
 80011b4:	4a19      	ldr	r2, [pc, #100]	; (800121c <adns2610_receiveByte+0x80>)
 80011b6:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 80011b8:	4b18      	ldr	r3, [pc, #96]	; (800121c <adns2610_receiveByte+0x80>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	330c      	adds	r3, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80011c2:	bf00      	nop
 80011c4:	4b15      	ldr	r3, [pc, #84]	; (800121c <adns2610_receiveByte+0x80>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	689b      	ldr	r3, [r3, #8]
 80011ca:	f003 0301 	and.w	r3, r3, #1
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d0f8      	beq.n	80011c4 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80011d2:	4b12      	ldr	r3, [pc, #72]	; (800121c <adns2610_receiveByte+0x80>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	330c      	adds	r3, #12
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80011e0:	bf00      	nop
 80011e2:	4b0e      	ldr	r3, [pc, #56]	; (800121c <adns2610_receiveByte+0x80>)
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80011ec:	4b0b      	ldr	r3, [pc, #44]	; (800121c <adns2610_receiveByte+0x80>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f6:	431a      	orrs	r2, r3
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <adns2610_receiveByte+0x80>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689b      	ldr	r3, [r3, #8]
 80011fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001202:	4313      	orrs	r3, r2
 8001204:	2b00      	cmp	r3, #0
 8001206:	d1ec      	bne.n	80011e2 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40003800 	.word	0x40003800
 8001218:	40003c00 	.word	0x40003c00
 800121c:	200005e4 	.word	0x200005e4

08001220 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 8001220:	b480      	push	{r7}
 8001222:	b083      	sub	sp, #12
 8001224:	af00      	add	r7, sp, #0
 8001226:	4603      	mov	r3, r0
 8001228:	460a      	mov	r2, r1
 800122a:	71fb      	strb	r3, [r7, #7]
 800122c:	4613      	mov	r3, r2
 800122e:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	2b00      	cmp	r3, #0
 8001234:	d101      	bne.n	800123a <adns2610_sendByte+0x1a>
 8001236:	4b12      	ldr	r3, [pc, #72]	; (8001280 <adns2610_sendByte+0x60>)
 8001238:	e000      	b.n	800123c <adns2610_sendByte+0x1c>
 800123a:	4b12      	ldr	r3, [pc, #72]	; (8001284 <adns2610_sendByte+0x64>)
 800123c:	4a12      	ldr	r2, [pc, #72]	; (8001288 <adns2610_sendByte+0x68>)
 800123e:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8001240:	bf00      	nop
 8001242:	4b11      	ldr	r3, [pc, #68]	; (8001288 <adns2610_sendByte+0x68>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	f003 0302 	and.w	r3, r3, #2
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f8      	beq.n	8001242 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 8001250:	4b0d      	ldr	r3, [pc, #52]	; (8001288 <adns2610_sendByte+0x68>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	330c      	adds	r3, #12
 8001256:	79ba      	ldrb	r2, [r7, #6]
 8001258:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800125a:	bf00      	nop
 800125c:	4b0a      	ldr	r3, [pc, #40]	; (8001288 <adns2610_sendByte+0x68>)
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	689b      	ldr	r3, [r3, #8]
 8001262:	f003 0301 	and.w	r3, r3, #1
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f8      	beq.n	800125c <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800126a:	4b07      	ldr	r3, [pc, #28]	; (8001288 <adns2610_sendByte+0x68>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	330c      	adds	r3, #12
 8001270:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	40003800 	.word	0x40003800
 8001284:	40003c00 	.word	0x40003c00
 8001288:	200005e4 	.word	0x200005e4

0800128c <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	781b      	ldrb	r3, [r3, #0]
 8001298:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800129c:	2b00      	cmp	r3, #0
 800129e:	d008      	beq.n	80012b2 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	da01      	bge.n	80012ae <adns2610_checkPixel+0x22>
			return VALID_SOF;
 80012aa:	2300      	movs	r3, #0
 80012ac:	e009      	b.n	80012c2 <adns2610_checkPixel+0x36>
		}
		return VALID;
 80012ae:	2302      	movs	r3, #2
 80012b0:	e007      	b.n	80012c2 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	b25b      	sxtb	r3, r3
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	da01      	bge.n	80012c0 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 80012bc:	2301      	movs	r3, #1
 80012be:	e000      	b.n	80012c2 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 80012c0:	2303      	movs	r3, #3
	}
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	db0b      	blt.n	80012fa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012e2:	79fb      	ldrb	r3, [r7, #7]
 80012e4:	f003 021f 	and.w	r2, r3, #31
 80012e8:	4907      	ldr	r1, [pc, #28]	; (8001308 <__NVIC_EnableIRQ+0x38>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	095b      	lsrs	r3, r3, #5
 80012f0:	2001      	movs	r0, #1
 80012f2:	fa00 f202 	lsl.w	r2, r0, r2
 80012f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80012fa:	bf00      	nop
 80012fc:	370c      	adds	r7, #12
 80012fe:	46bd      	mov	sp, r7
 8001300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001304:	4770      	bx	lr
 8001306:	bf00      	nop
 8001308:	e000e100 	.word	0xe000e100

0800130c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800130c:	b480      	push	{r7}
 800130e:	b083      	sub	sp, #12
 8001310:	af00      	add	r7, sp, #0
 8001312:	4603      	mov	r3, r0
 8001314:	6039      	str	r1, [r7, #0]
 8001316:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001318:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800131c:	2b00      	cmp	r3, #0
 800131e:	db0a      	blt.n	8001336 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	b2da      	uxtb	r2, r3
 8001324:	490c      	ldr	r1, [pc, #48]	; (8001358 <__NVIC_SetPriority+0x4c>)
 8001326:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800132a:	0112      	lsls	r2, r2, #4
 800132c:	b2d2      	uxtb	r2, r2
 800132e:	440b      	add	r3, r1
 8001330:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001334:	e00a      	b.n	800134c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001336:	683b      	ldr	r3, [r7, #0]
 8001338:	b2da      	uxtb	r2, r3
 800133a:	4908      	ldr	r1, [pc, #32]	; (800135c <__NVIC_SetPriority+0x50>)
 800133c:	79fb      	ldrb	r3, [r7, #7]
 800133e:	f003 030f 	and.w	r3, r3, #15
 8001342:	3b04      	subs	r3, #4
 8001344:	0112      	lsls	r2, r2, #4
 8001346:	b2d2      	uxtb	r2, r2
 8001348:	440b      	add	r3, r1
 800134a:	761a      	strb	r2, [r3, #24]
}
 800134c:	bf00      	nop
 800134e:	370c      	adds	r7, #12
 8001350:	46bd      	mov	sp, r7
 8001352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001356:	4770      	bx	lr
 8001358:	e000e100 	.word	0xe000e100
 800135c:	e000ed00 	.word	0xe000ed00

08001360 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 8001360:	b480      	push	{r7}
 8001362:	b085      	sub	sp, #20
 8001364:	af00      	add	r7, sp, #0
 8001366:	6078      	str	r0, [r7, #4]
 8001368:	460b      	mov	r3, r1
 800136a:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 800136c:	2300      	movs	r3, #0
 800136e:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 8001370:	4a0a      	ldr	r2, [pc, #40]	; (800139c <transferDMA_USART2_TX+0x3c>)
 8001372:	687b      	ldr	r3, [r7, #4]
 8001374:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 8001376:	4a09      	ldr	r2, [pc, #36]	; (800139c <transferDMA_USART2_TX+0x3c>)
 8001378:	887b      	ldrh	r3, [r7, #2]
 800137a:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 800137c:	4b07      	ldr	r3, [pc, #28]	; (800139c <transferDMA_USART2_TX+0x3c>)
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 800138a:	4a04      	ldr	r2, [pc, #16]	; (800139c <transferDMA_USART2_TX+0x3c>)
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	6013      	str	r3, [r2, #0]
}
 8001390:	bf00      	nop
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40020080 	.word	0x40020080

080013a0 <eyes_init>:
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

/**
 * @brief It initializes and it sets up the system.
 */
void eyes_init(){
 80013a0:	b580      	push	{r7, lr}
 80013a2:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 80013a4:	f000 fb2e 	bl	8001a04 <eyes_configureFSM_TIM>
	eyes_configureControl_TIM();
 80013a8:	f000 fba2 	bl	8001af0 <eyes_configureControl_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 80013ac:	2000      	movs	r0, #0
 80013ae:	f7ff fd35 	bl	8000e1c <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
 80013b2:	2001      	movs	r0, #1
 80013b4:	f7ff fd32 	bl	8000e1c <adns2610_init>
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 80013b8:	2201      	movs	r2, #1
 80013ba:	2100      	movs	r1, #0
 80013bc:	4806      	ldr	r0, [pc, #24]	; (80013d8 <eyes_init+0x38>)
 80013be:	f002 fc29 	bl	8003c14 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 80013c2:	4b06      	ldr	r3, [pc, #24]	; (80013dc <eyes_init+0x3c>)
 80013c4:	2200      	movs	r2, #0
 80013c6:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 80013c8:	4b05      	ldr	r3, [pc, #20]	; (80013e0 <eyes_init+0x40>)
 80013ca:	2201      	movs	r2, #1
 80013cc:	701a      	strb	r2, [r3, #0]

	// Initialization done
	initialized = true;
 80013ce:	4b05      	ldr	r3, [pc, #20]	; (80013e4 <eyes_init+0x44>)
 80013d0:	2201      	movs	r2, #1
 80013d2:	701a      	strb	r2, [r3, #0]
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	40004400 	.word	0x40004400
 80013dc:	20000914 	.word	0x20000914
 80013e0:	20000915 	.word	0x20000915
 80013e4:	200005e9 	.word	0x200005e9

080013e8 <eyes_start>:

/**
 * @brief It starts the system operation.
 */
void eyes_start(){
 80013e8:	b580      	push	{r7, lr}
 80013ea:	af00      	add	r7, sp, #0

	if(!initialized) eyes_init();
 80013ec:	4b09      	ldr	r3, [pc, #36]	; (8001414 <eyes_start+0x2c>)
 80013ee:	781b      	ldrb	r3, [r3, #0]
 80013f0:	f083 0301 	eor.w	r3, r3, #1
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d001      	beq.n	80013fe <eyes_start+0x16>
 80013fa:	f7ff ffd1 	bl	80013a0 <eyes_init>

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 80013fe:	4b06      	ldr	r3, [pc, #24]	; (8001418 <eyes_start+0x30>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a05      	ldr	r2, [pc, #20]	; (8001418 <eyes_start+0x30>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 800140a:	4b04      	ldr	r3, [pc, #16]	; (800141c <eyes_start+0x34>)
 800140c:	2201      	movs	r2, #1
 800140e:	701a      	strb	r2, [r3, #0]
}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200005e9 	.word	0x200005e9
 8001418:	40012c00 	.word	0x40012c00
 800141c:	200005e8 	.word	0x200005e8

08001420 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/**
 *  @brief Compute the FSM (Finite State Machine) for image acquisition, optical flow computation and control loop.
 */
void eyes_FSM(void){
 8001420:	b580      	push	{r7, lr}
 8001422:	b082      	sub	sp, #8
 8001424:	af00      	add	r7, sp, #0
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	static bool refSet = false;

	switch(FSMstate){
 8001426:	4bb9      	ldr	r3, [pc, #740]	; (800170c <eyes_FSM+0x2ec>)
 8001428:	781b      	ldrb	r3, [r3, #0]
 800142a:	2b04      	cmp	r3, #4
 800142c:	f200 82c2 	bhi.w	80019b4 <eyes_FSM+0x594>
 8001430:	a201      	add	r2, pc, #4	; (adr r2, 8001438 <eyes_FSM+0x18>)
 8001432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001436:	bf00      	nop
 8001438:	0800144d 	.word	0x0800144d
 800143c:	0800149b 	.word	0x0800149b
 8001440:	08001779 	.word	0x08001779
 8001444:	0800154d 	.word	0x0800154d
 8001448:	08001839 	.word	0x08001839
	/* SENSOR_RESET state --------------------------------------------------------- */
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;
		pixelIdx[ADNS2610_RIGHT] = 0;
 800144c:	4bb0      	ldr	r3, [pc, #704]	; (8001710 <eyes_FSM+0x2f0>)
 800144e:	2200      	movs	r2, #0
 8001450:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8001452:	4baf      	ldr	r3, [pc, #700]	; (8001710 <eyes_FSM+0x2f0>)
 8001454:	2200      	movs	r2, #0
 8001456:	805a      	strh	r2, [r3, #2]
#endif
		/* Stop the interrupt timer and reset all the relevant values */
		eyes_stopWaitIT();
 8001458:	f000 fb3a 	bl	8001ad0 <eyes_stopWaitIT>
		eyes_stopWaitControlTIM_IT();
 800145c:	f000 fbae 	bl	8001bbc <eyes_stopWaitControlTIM_IT>

		pixelIdx[0] = pixelIdx[1] = 0;
 8001460:	4bab      	ldr	r3, [pc, #684]	; (8001710 <eyes_FSM+0x2f0>)
 8001462:	2200      	movs	r2, #0
 8001464:	805a      	strh	r2, [r3, #2]
 8001466:	4baa      	ldr	r3, [pc, #680]	; (8001710 <eyes_FSM+0x2f0>)
 8001468:	885a      	ldrh	r2, [r3, #2]
 800146a:	4ba9      	ldr	r3, [pc, #676]	; (8001710 <eyes_FSM+0x2f0>)
 800146c:	801a      	strh	r2, [r3, #0]
		pixelStatus[0] = pixelIdx[1] = 0;
 800146e:	4ba8      	ldr	r3, [pc, #672]	; (8001710 <eyes_FSM+0x2f0>)
 8001470:	2200      	movs	r2, #0
 8001472:	805a      	strh	r2, [r3, #2]
 8001474:	4ba7      	ldr	r3, [pc, #668]	; (8001714 <eyes_FSM+0x2f4>)
 8001476:	2200      	movs	r2, #0
 8001478:	701a      	strb	r2, [r3, #0]
		firstPixelRead = true;
 800147a:	4ba7      	ldr	r3, [pc, #668]	; (8001718 <eyes_FSM+0x2f8>)
 800147c:	2201      	movs	r2, #1
 800147e:	701a      	strb	r2, [r3, #0]
		firstFrameRead = true;
 8001480:	4ba6      	ldr	r3, [pc, #664]	; (800171c <eyes_FSM+0x2fc>)
 8001482:	2201      	movs	r2, #1
 8001484:	701a      	strb	r2, [r3, #0]
		seqTemp = 0;
 8001486:	4ba6      	ldr	r3, [pc, #664]	; (8001720 <eyes_FSM+0x300>)
 8001488:	2200      	movs	r2, #0
 800148a:	701a      	strb	r2, [r3, #0]
		initialized = false;
 800148c:	4ba5      	ldr	r3, [pc, #660]	; (8001724 <eyes_FSM+0x304>)
 800148e:	2200      	movs	r2, #0
 8001490:	701a      	strb	r2, [r3, #0]
		collisionFlag = 0;
 8001492:	4ba5      	ldr	r3, [pc, #660]	; (8001728 <eyes_FSM+0x308>)
 8001494:	2200      	movs	r2, #0
 8001496:	701a      	strb	r2, [r3, #0]
		return;
 8001498:	e292      	b.n	80019c0 <eyes_FSM+0x5a0>
	/* TRIGGER_FRAME state --------------------------------------------------------- */
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 800149a:	f000 fb19 	bl	8001ad0 <eyes_stopWaitIT>
		eyes_stopWaitControlTIM_IT();
 800149e:	f000 fb8d 	bl	8001bbc <eyes_stopWaitControlTIM_IT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80014a2:	4ba1      	ldr	r3, [pc, #644]	; (8001728 <eyes_FSM+0x308>)
 80014a4:	781b      	ldrb	r3, [r3, #0]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	f040 827f 	bne.w	80019aa <eyes_FSM+0x58a>
 80014ac:	4b9e      	ldr	r3, [pc, #632]	; (8001728 <eyes_FSM+0x308>)
 80014ae:	2201      	movs	r2, #1
 80014b0:	701a      	strb	r2, [r3, #0]
		/* Write pixel data register to reset the HW */
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 80014b2:	2201      	movs	r2, #1
 80014b4:	2108      	movs	r1, #8
 80014b6:	2000      	movs	r0, #0
 80014b8:	f7ff fe10 	bl	80010dc <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
 80014bc:	2201      	movs	r2, #1
 80014be:	2108      	movs	r1, #8
 80014c0:	2001      	movs	r0, #1
 80014c2:	f7ff fe0b 	bl	80010dc <adns2610_writeRegister>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Increasing the SEQ number
		 * 	- Transfer all data by means of DMA
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 80014c6:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80014ca:	f000 fad9 	bl	8001a80 <eyes_waitIT>
		firstPixelRead = true;
 80014ce:	4b92      	ldr	r3, [pc, #584]	; (8001718 <eyes_FSM+0x2f8>)
 80014d0:	2201      	movs	r2, #1
 80014d2:	701a      	strb	r2, [r3, #0]
		FSMstate = REQ_READING_FRAME;
 80014d4:	4b8d      	ldr	r3, [pc, #564]	; (800170c <eyes_FSM+0x2ec>)
 80014d6:	2203      	movs	r2, #3
 80014d8:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 80014da:	4b8d      	ldr	r3, [pc, #564]	; (8001710 <eyes_FSM+0x2f0>)
 80014dc:	2200      	movs	r2, #0
 80014de:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 80014e0:	4b8b      	ldr	r3, [pc, #556]	; (8001710 <eyes_FSM+0x2f0>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	805a      	strh	r2, [r3, #2]
#endif
		if(!firstFrameRead){
 80014e6:	4b8d      	ldr	r3, [pc, #564]	; (800171c <eyes_FSM+0x2fc>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	f083 0301 	eor.w	r3, r3, #1
 80014ee:	b2db      	uxtb	r3, r3
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d024      	beq.n	800153e <eyes_FSM+0x11e>
			frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 80014f4:	4b8a      	ldr	r3, [pc, #552]	; (8001720 <eyes_FSM+0x300>)
 80014f6:	781b      	ldrb	r3, [r3, #0]
 80014f8:	1c5a      	adds	r2, r3, #1
 80014fa:	b2d1      	uxtb	r1, r2
 80014fc:	4a88      	ldr	r2, [pc, #544]	; (8001720 <eyes_FSM+0x300>)
 80014fe:	7011      	strb	r1, [r2, #0]
 8001500:	4a8a      	ldr	r2, [pc, #552]	; (800172c <eyes_FSM+0x30c>)
 8001502:	7812      	ldrb	r2, [r2, #0]
 8001504:	4610      	mov	r0, r2
 8001506:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800150a:	b2d9      	uxtb	r1, r3
 800150c:	4a88      	ldr	r2, [pc, #544]	; (8001730 <eyes_FSM+0x310>)
 800150e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001512:	fb03 f300 	mul.w	r3, r3, r0
 8001516:	4413      	add	r3, r2
 8001518:	3304      	adds	r3, #4
 800151a:	460a      	mov	r2, r1
 800151c:	701a      	strb	r2, [r3, #0]
			transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 800151e:	4b83      	ldr	r3, [pc, #524]	; (800172c <eyes_FSM+0x30c>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	461a      	mov	r2, r3
 8001524:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001528:	fb03 f302 	mul.w	r3, r3, r2
 800152c:	4a80      	ldr	r2, [pc, #512]	; (8001730 <eyes_FSM+0x310>)
 800152e:	4413      	add	r3, r2
 8001530:	f240 21a9 	movw	r1, #681	; 0x2a9
 8001534:	4618      	mov	r0, r3
 8001536:	f7ff ff13 	bl	8001360 <transferDMA_USART2_TX>
			OF_ResetCoefficients();
 800153a:	f001 fa89 	bl	8002a50 <OF_ResetCoefficients>
		}
		collisionFlag = 0;
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <eyes_FSM+0x308>)
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8001544:	4b7b      	ldr	r3, [pc, #492]	; (8001734 <eyes_FSM+0x314>)
 8001546:	2200      	movs	r2, #0
 8001548:	801a      	strh	r2, [r3, #0]
		return;
 800154a:	e239      	b.n	80019c0 <eyes_FSM+0x5a0>
	/* REQ_READING_FRAME state --------------------------------------------------------- */
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 800154c:	f000 fac0 	bl	8001ad0 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001550:	4b75      	ldr	r3, [pc, #468]	; (8001728 <eyes_FSM+0x308>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	f040 822a 	bne.w	80019ae <eyes_FSM+0x58e>
 800155a:	4b73      	ldr	r3, [pc, #460]	; (8001728 <eyes_FSM+0x308>)
 800155c:	2201      	movs	r2, #1
 800155e:	701a      	strb	r2, [r3, #0]
		/* Send a pixel data read request if there are pixels to read*/
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8001560:	4b6b      	ldr	r3, [pc, #428]	; (8001710 <eyes_FSM+0x2f0>)
 8001562:	881b      	ldrh	r3, [r3, #0]
 8001564:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001568:	d203      	bcs.n	8001572 <eyes_FSM+0x152>
 800156a:	2108      	movs	r1, #8
 800156c:	2000      	movs	r0, #0
 800156e:	f7ff fe57 	bl	8001220 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
 8001572:	4b67      	ldr	r3, [pc, #412]	; (8001710 <eyes_FSM+0x2f0>)
 8001574:	885b      	ldrh	r3, [r3, #2]
 8001576:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 800157a:	d203      	bcs.n	8001584 <eyes_FSM+0x164>
 800157c:	2108      	movs	r1, #8
 800157e:	2001      	movs	r0, #1
 8001580:	f7ff fe4e 	bl	8001220 <adns2610_sendByte>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Check the last received pixel status and take decision related to it
		 * 	- Compute OF coefficients when it was possible
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8001584:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8001588:	f000 fa7a 	bl	8001a80 <eyes_waitIT>
		if(!firstPixelRead){
 800158c:	4b62      	ldr	r3, [pc, #392]	; (8001718 <eyes_FSM+0x2f8>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	f083 0301 	eor.w	r3, r3, #1
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	f000 80e4 	beq.w	8001764 <eyes_FSM+0x344>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 800159c:	4b66      	ldr	r3, [pc, #408]	; (8001738 <eyes_FSM+0x318>)
 800159e:	781b      	ldrb	r3, [r3, #0]
 80015a0:	4619      	mov	r1, r3
 80015a2:	4b5b      	ldr	r3, [pc, #364]	; (8001710 <eyes_FSM+0x2f0>)
 80015a4:	881b      	ldrh	r3, [r3, #0]
 80015a6:	461a      	mov	r2, r3
 80015a8:	f240 23a9 	movw	r3, #681	; 0x2a9
 80015ac:	fb03 f301 	mul.w	r3, r3, r1
 80015b0:	4413      	add	r3, r2
 80015b2:	4a5f      	ldr	r2, [pc, #380]	; (8001730 <eyes_FSM+0x310>)
 80015b4:	4413      	add	r3, r2
 80015b6:	3305      	adds	r3, #5
 80015b8:	4618      	mov	r0, r3
 80015ba:	f7ff fe67 	bl	800128c <adns2610_checkPixel>
 80015be:	4603      	mov	r3, r0
 80015c0:	461a      	mov	r2, r3
 80015c2:	4b54      	ldr	r3, [pc, #336]	; (8001714 <eyes_FSM+0x2f4>)
 80015c4:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 80015c6:	4b5c      	ldr	r3, [pc, #368]	; (8001738 <eyes_FSM+0x318>)
 80015c8:	781b      	ldrb	r3, [r3, #0]
 80015ca:	4619      	mov	r1, r3
 80015cc:	4b50      	ldr	r3, [pc, #320]	; (8001710 <eyes_FSM+0x2f0>)
 80015ce:	885b      	ldrh	r3, [r3, #2]
 80015d0:	461a      	mov	r2, r3
 80015d2:	f240 23a9 	movw	r3, #681	; 0x2a9
 80015d6:	fb03 f301 	mul.w	r3, r3, r1
 80015da:	4413      	add	r3, r2
 80015dc:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80015e0:	4a53      	ldr	r2, [pc, #332]	; (8001730 <eyes_FSM+0x310>)
 80015e2:	4413      	add	r3, r2
 80015e4:	3305      	adds	r3, #5
 80015e6:	4618      	mov	r0, r3
 80015e8:	f7ff fe50 	bl	800128c <adns2610_checkPixel>
 80015ec:	4603      	mov	r3, r0
 80015ee:	461a      	mov	r2, r3
 80015f0:	4b48      	ldr	r3, [pc, #288]	; (8001714 <eyes_FSM+0x2f4>)
 80015f2:	705a      	strb	r2, [r3, #1]
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 80015f4:	4b51      	ldr	r3, [pc, #324]	; (800173c <eyes_FSM+0x31c>)
 80015f6:	4a46      	ldr	r2, [pc, #280]	; (8001710 <eyes_FSM+0x2f0>)
 80015f8:	4951      	ldr	r1, [pc, #324]	; (8001740 <eyes_FSM+0x320>)
 80015fa:	4846      	ldr	r0, [pc, #280]	; (8001714 <eyes_FSM+0x2f4>)
 80015fc:	f000 faee 	bl	8001bdc <eyes_computeIdxFromStatus>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 80a4 	beq.w	8001750 <eyes_FSM+0x330>
				FSMstate = READING_FRAME;
 8001608:	4b40      	ldr	r3, [pc, #256]	; (800170c <eyes_FSM+0x2ec>)
 800160a:	2202      	movs	r2, #2
 800160c:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 800160e:	4b41      	ldr	r3, [pc, #260]	; (8001714 <eyes_FSM+0x2f4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
 8001612:	2b03      	cmp	r3, #3
 8001614:	d003      	beq.n	800161e <eyes_FSM+0x1fe>
 8001616:	4b3f      	ldr	r3, [pc, #252]	; (8001714 <eyes_FSM+0x2f4>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	2b01      	cmp	r3, #1
 800161c:	d105      	bne.n	800162a <eyes_FSM+0x20a>
					errorCounter++;
 800161e:	4b45      	ldr	r3, [pc, #276]	; (8001734 <eyes_FSM+0x314>)
 8001620:	881b      	ldrh	r3, [r3, #0]
 8001622:	3301      	adds	r3, #1
 8001624:	b29a      	uxth	r2, r3
 8001626:	4b43      	ldr	r3, [pc, #268]	; (8001734 <eyes_FSM+0x314>)
 8001628:	801a      	strh	r2, [r3, #0]
				}
				if(!firstFrameRead){
 800162a:	4b3c      	ldr	r3, [pc, #240]	; (800171c <eyes_FSM+0x2fc>)
 800162c:	781b      	ldrb	r3, [r3, #0]
 800162e:	f083 0301 	eor.w	r3, r3, #1
 8001632:	b2db      	uxtb	r3, r3
 8001634:	2b00      	cmp	r3, #0
 8001636:	f000 809b 	beq.w	8001770 <eyes_FSM+0x350>
					if(!IsCalibrationModeEnable() || !refSet){
 800163a:	f000 fe0b 	bl	8002254 <IsCalibrationModeEnable>
 800163e:	4603      	mov	r3, r0
 8001640:	f083 0301 	eor.w	r3, r3, #1
 8001644:	b2db      	uxtb	r3, r3
 8001646:	2b00      	cmp	r3, #0
 8001648:	d106      	bne.n	8001658 <eyes_FSM+0x238>
 800164a:	4b3e      	ldr	r3, [pc, #248]	; (8001744 <eyes_FSM+0x324>)
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	f083 0301 	eor.w	r3, r3, #1
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b00      	cmp	r3, #0
 8001656:	d036      	beq.n	80016c6 <eyes_FSM+0x2a6>
						OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 8001658:	4b37      	ldr	r3, [pc, #220]	; (8001738 <eyes_FSM+0x318>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	461a      	mov	r2, r3
 800165e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001662:	fb03 f302 	mul.w	r3, r3, r2
 8001666:	4a32      	ldr	r2, [pc, #200]	; (8001730 <eyes_FSM+0x310>)
 8001668:	4413      	add	r3, r2
 800166a:	1d59      	adds	r1, r3, #5
 800166c:	4b2f      	ldr	r3, [pc, #188]	; (800172c <eyes_FSM+0x30c>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001676:	fb03 f302 	mul.w	r3, r3, r2
 800167a:	4a2d      	ldr	r2, [pc, #180]	; (8001730 <eyes_FSM+0x310>)
 800167c:	4413      	add	r3, r2
 800167e:	1d5a      	adds	r2, r3, #5
 8001680:	4b23      	ldr	r3, [pc, #140]	; (8001710 <eyes_FSM+0x2f0>)
 8001682:	881b      	ldrh	r3, [r3, #0]
 8001684:	2000      	movs	r0, #0
 8001686:	f001 fa37 	bl	8002af8 <OF_ComputeCoefficients>
#if SECOND_SENSOR_IMPLEMENTED
						OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_LEFT], frames[lastFrameIdx].frame[ADNS2610_LEFT], pixelIdx[ADNS2610_LEFT]);
 800168a:	4b2b      	ldr	r3, [pc, #172]	; (8001738 <eyes_FSM+0x318>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	461a      	mov	r2, r3
 8001690:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001694:	fb03 f302 	mul.w	r3, r3, r2
 8001698:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 800169c:	4a24      	ldr	r2, [pc, #144]	; (8001730 <eyes_FSM+0x310>)
 800169e:	4413      	add	r3, r2
 80016a0:	1d59      	adds	r1, r3, #5
 80016a2:	4b22      	ldr	r3, [pc, #136]	; (800172c <eyes_FSM+0x30c>)
 80016a4:	781b      	ldrb	r3, [r3, #0]
 80016a6:	461a      	mov	r2, r3
 80016a8:	f240 23a9 	movw	r3, #681	; 0x2a9
 80016ac:	fb03 f302 	mul.w	r3, r3, r2
 80016b0:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80016b4:	4a1e      	ldr	r2, [pc, #120]	; (8001730 <eyes_FSM+0x310>)
 80016b6:	4413      	add	r3, r2
 80016b8:	1d5a      	adds	r2, r3, #5
 80016ba:	4b15      	ldr	r3, [pc, #84]	; (8001710 <eyes_FSM+0x2f0>)
 80016bc:	885b      	ldrh	r3, [r3, #2]
 80016be:	2001      	movs	r0, #1
 80016c0:	f001 fa1a 	bl	8002af8 <OF_ComputeCoefficients>
 80016c4:	e054      	b.n	8001770 <eyes_FSM+0x350>
#endif
					}
					else{
						OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], refFrameCal[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 80016c6:	4b1c      	ldr	r3, [pc, #112]	; (8001738 <eyes_FSM+0x318>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	461a      	mov	r2, r3
 80016cc:	f240 23a9 	movw	r3, #681	; 0x2a9
 80016d0:	fb03 f302 	mul.w	r3, r3, r2
 80016d4:	4a16      	ldr	r2, [pc, #88]	; (8001730 <eyes_FSM+0x310>)
 80016d6:	4413      	add	r3, r2
 80016d8:	1d59      	adds	r1, r3, #5
 80016da:	4b0d      	ldr	r3, [pc, #52]	; (8001710 <eyes_FSM+0x2f0>)
 80016dc:	881b      	ldrh	r3, [r3, #0]
 80016de:	4a1a      	ldr	r2, [pc, #104]	; (8001748 <eyes_FSM+0x328>)
 80016e0:	2000      	movs	r0, #0
 80016e2:	f001 fa09 	bl	8002af8 <OF_ComputeCoefficients>
#if SECOND_SENSOR_IMPLEMENTED
						OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_LEFT], refFrameCal[ADNS2610_LEFT], pixelIdx[ADNS2610_LEFT]);
 80016e6:	4b14      	ldr	r3, [pc, #80]	; (8001738 <eyes_FSM+0x318>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	461a      	mov	r2, r3
 80016ec:	f240 23a9 	movw	r3, #681	; 0x2a9
 80016f0:	fb03 f302 	mul.w	r3, r3, r2
 80016f4:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80016f8:	4a0d      	ldr	r2, [pc, #52]	; (8001730 <eyes_FSM+0x310>)
 80016fa:	4413      	add	r3, r2
 80016fc:	1d59      	adds	r1, r3, #5
 80016fe:	4b04      	ldr	r3, [pc, #16]	; (8001710 <eyes_FSM+0x2f0>)
 8001700:	885b      	ldrh	r3, [r3, #2]
 8001702:	4a12      	ldr	r2, [pc, #72]	; (800174c <eyes_FSM+0x32c>)
 8001704:	2001      	movs	r0, #1
 8001706:	f001 f9f7 	bl	8002af8 <OF_ComputeCoefficients>
 800170a:	e031      	b.n	8001770 <eyes_FSM+0x350>
 800170c:	200005e8 	.word	0x200005e8
 8001710:	20000874 	.word	0x20000874
 8001714:	20000878 	.word	0x20000878
 8001718:	20000552 	.word	0x20000552
 800171c:	20000553 	.word	0x20000553
 8001720:	2000087a 	.word	0x2000087a
 8001724:	200005e9 	.word	0x200005e9
 8001728:	2000087b 	.word	0x2000087b
 800172c:	20000915 	.word	0x20000915
 8001730:	20000000 	.word	0x20000000
 8001734:	2000087c 	.word	0x2000087c
 8001738:	20000914 	.word	0x20000914
 800173c:	20000876 	.word	0x20000876
 8001740:	20000879 	.word	0x20000879
 8001744:	2000087e 	.word	0x2000087e
 8001748:	200005ec 	.word	0x200005ec
 800174c:	20000730 	.word	0x20000730
#endif
					}
				}
			}
			else{
				eyes_stopWaitIT();
 8001750:	f000 f9be 	bl	8001ad0 <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8001754:	4b9c      	ldr	r3, [pc, #624]	; (80019c8 <eyes_FSM+0x5a8>)
 8001756:	2201      	movs	r2, #1
 8001758:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 800175a:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 800175e:	f000 f98f 	bl	8001a80 <eyes_waitIT>
 8001762:	e005      	b.n	8001770 <eyes_FSM+0x350>
			}
		}
		else{
			firstPixelRead = false;
 8001764:	4b99      	ldr	r3, [pc, #612]	; (80019cc <eyes_FSM+0x5ac>)
 8001766:	2200      	movs	r2, #0
 8001768:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 800176a:	4b97      	ldr	r3, [pc, #604]	; (80019c8 <eyes_FSM+0x5a8>)
 800176c:	2202      	movs	r2, #2
 800176e:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 8001770:	4b97      	ldr	r3, [pc, #604]	; (80019d0 <eyes_FSM+0x5b0>)
 8001772:	2200      	movs	r2, #0
 8001774:	701a      	strb	r2, [r3, #0]
		return;
 8001776:	e123      	b.n	80019c0 <eyes_FSM+0x5a0>
	/* READING_FRAME state ---------------------------------------------------------------- */
	case READING_FRAME:
		eyes_stopWaitIT();
 8001778:	f000 f9aa 	bl	8001ad0 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 800177c:	4b94      	ldr	r3, [pc, #592]	; (80019d0 <eyes_FSM+0x5b0>)
 800177e:	781b      	ldrb	r3, [r3, #0]
 8001780:	2b00      	cmp	r3, #0
 8001782:	f040 8116 	bne.w	80019b2 <eyes_FSM+0x592>
 8001786:	4b92      	ldr	r3, [pc, #584]	; (80019d0 <eyes_FSM+0x5b0>)
 8001788:	2201      	movs	r2, #1
 800178a:	701a      	strb	r2, [r3, #0]
		/* Read pixel data register */
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 800178c:	4b91      	ldr	r3, [pc, #580]	; (80019d4 <eyes_FSM+0x5b4>)
 800178e:	881b      	ldrh	r3, [r3, #0]
 8001790:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8001794:	d211      	bcs.n	80017ba <eyes_FSM+0x39a>
 8001796:	4b90      	ldr	r3, [pc, #576]	; (80019d8 <eyes_FSM+0x5b8>)
 8001798:	781b      	ldrb	r3, [r3, #0]
 800179a:	4619      	mov	r1, r3
 800179c:	4b8d      	ldr	r3, [pc, #564]	; (80019d4 <eyes_FSM+0x5b4>)
 800179e:	881b      	ldrh	r3, [r3, #0]
 80017a0:	461a      	mov	r2, r3
 80017a2:	f240 23a9 	movw	r3, #681	; 0x2a9
 80017a6:	fb03 f301 	mul.w	r3, r3, r1
 80017aa:	4413      	add	r3, r2
 80017ac:	4a8b      	ldr	r2, [pc, #556]	; (80019dc <eyes_FSM+0x5bc>)
 80017ae:	4413      	add	r3, r2
 80017b0:	3305      	adds	r3, #5
 80017b2:	4619      	mov	r1, r3
 80017b4:	2000      	movs	r0, #0
 80017b6:	f7ff fcf1 	bl	800119c <adns2610_receiveByte>
		/* Check the last pixel status. This is done because if all is good, the next state is PROCESSING, not REQ_READING_FRAME state */
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_LEFT, &frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 80017ba:	4b86      	ldr	r3, [pc, #536]	; (80019d4 <eyes_FSM+0x5b4>)
 80017bc:	885b      	ldrh	r3, [r3, #2]
 80017be:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 80017c2:	d213      	bcs.n	80017ec <eyes_FSM+0x3cc>
 80017c4:	4b84      	ldr	r3, [pc, #528]	; (80019d8 <eyes_FSM+0x5b8>)
 80017c6:	781b      	ldrb	r3, [r3, #0]
 80017c8:	4619      	mov	r1, r3
 80017ca:	4b82      	ldr	r3, [pc, #520]	; (80019d4 <eyes_FSM+0x5b4>)
 80017cc:	885b      	ldrh	r3, [r3, #2]
 80017ce:	461a      	mov	r2, r3
 80017d0:	f240 23a9 	movw	r3, #681	; 0x2a9
 80017d4:	fb03 f301 	mul.w	r3, r3, r1
 80017d8:	4413      	add	r3, r2
 80017da:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 80017de:	4a7f      	ldr	r2, [pc, #508]	; (80019dc <eyes_FSM+0x5bc>)
 80017e0:	4413      	add	r3, r2
 80017e2:	3305      	adds	r3, #5
 80017e4:	4619      	mov	r1, r3
 80017e6:	2001      	movs	r0, #1
 80017e8:	f7ff fcd8 	bl	800119c <adns2610_receiveByte>

		if((pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1) && pixelIdx[ADNS2610_LEFT] == PIXEL_QTY-1){
 80017ec:	4b79      	ldr	r3, [pc, #484]	; (80019d4 <eyes_FSM+0x5b4>)
 80017ee:	881b      	ldrh	r3, [r3, #0]
 80017f0:	f240 1243 	movw	r2, #323	; 0x143
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d112      	bne.n	800181e <eyes_FSM+0x3fe>
 80017f8:	4b76      	ldr	r3, [pc, #472]	; (80019d4 <eyes_FSM+0x5b4>)
 80017fa:	885b      	ldrh	r3, [r3, #2]
 80017fc:	f240 1243 	movw	r2, #323	; 0x143
 8001800:	4293      	cmp	r3, r2
 8001802:	d10c      	bne.n	800181e <eyes_FSM+0x3fe>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8001804:	4b76      	ldr	r3, [pc, #472]	; (80019e0 <eyes_FSM+0x5c0>)
 8001806:	4a73      	ldr	r2, [pc, #460]	; (80019d4 <eyes_FSM+0x5b4>)
 8001808:	4976      	ldr	r1, [pc, #472]	; (80019e4 <eyes_FSM+0x5c4>)
 800180a:	4877      	ldr	r0, [pc, #476]	; (80019e8 <eyes_FSM+0x5c8>)
 800180c:	f000 f9e6 	bl	8001bdc <eyes_computeIdxFromStatus>
 8001810:	4603      	mov	r3, r0
 8001812:	2b00      	cmp	r3, #0
 8001814:	d00d      	beq.n	8001832 <eyes_FSM+0x412>
				FSMstate = PROCESSING;
 8001816:	4b6c      	ldr	r3, [pc, #432]	; (80019c8 <eyes_FSM+0x5a8>)
 8001818:	2204      	movs	r2, #4
 800181a:	701a      	strb	r2, [r3, #0]
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 800181c:	e009      	b.n	8001832 <eyes_FSM+0x412>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 800181e:	4b6a      	ldr	r3, [pc, #424]	; (80019c8 <eyes_FSM+0x5a8>)
 8001820:	2203      	movs	r2, #3
 8001822:	701a      	strb	r2, [r3, #0]
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8001824:	20c8      	movs	r0, #200	; 0xc8
 8001826:	f000 f92b 	bl	8001a80 <eyes_waitIT>
			collisionFlag = 0;
 800182a:	4b69      	ldr	r3, [pc, #420]	; (80019d0 <eyes_FSM+0x5b0>)
 800182c:	2200      	movs	r2, #0
 800182e:	701a      	strb	r2, [r3, #0]
			return;
 8001830:	e0c6      	b.n	80019c0 <eyes_FSM+0x5a0>
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
			collisionFlag = 0;
			return;
		}
#endif
		collisionFlag = 0;
 8001832:	4b67      	ldr	r3, [pc, #412]	; (80019d0 <eyes_FSM+0x5b0>)
 8001834:	2200      	movs	r2, #0
 8001836:	701a      	strb	r2, [r3, #0]
	/* PROCESSING state ---------------------------------------------------------------- */
	case PROCESSING:
		/* Check if it's the first frame read */
		if(firstFrameRead){
 8001838:	4b6c      	ldr	r3, [pc, #432]	; (80019ec <eyes_FSM+0x5cc>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	2b00      	cmp	r3, #0
 800183e:	d003      	beq.n	8001848 <eyes_FSM+0x428>
			firstFrameRead = false;
 8001840:	4b6a      	ldr	r3, [pc, #424]	; (80019ec <eyes_FSM+0x5cc>)
 8001842:	2200      	movs	r2, #0
 8001844:	701a      	strb	r2, [r3, #0]
 8001846:	e05e      	b.n	8001906 <eyes_FSM+0x4e6>
		}
		else{
			/* Compute the Optical Flow from the previous computed coefficients */
			OF_Compute(ADNS2610_RIGHT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
 8001848:	4b63      	ldr	r3, [pc, #396]	; (80019d8 <eyes_FSM+0x5b8>)
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	461a      	mov	r2, r3
 800184e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001852:	fb03 f302 	mul.w	r3, r3, r2
 8001856:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800185a:	4a60      	ldr	r2, [pc, #384]	; (80019dc <eyes_FSM+0x5bc>)
 800185c:	4413      	add	r3, r2
 800185e:	1d59      	adds	r1, r3, #5
 8001860:	4b5d      	ldr	r3, [pc, #372]	; (80019d8 <eyes_FSM+0x5b8>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	461a      	mov	r2, r3
 8001866:	f240 23a9 	movw	r3, #681	; 0x2a9
 800186a:	fb03 f302 	mul.w	r3, r3, r2
 800186e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001872:	4a5a      	ldr	r2, [pc, #360]	; (80019dc <eyes_FSM+0x5bc>)
 8001874:	4413      	add	r3, r2
 8001876:	3309      	adds	r3, #9
 8001878:	461a      	mov	r2, r3
 800187a:	2000      	movs	r0, #0
 800187c:	f001 fa50 	bl	8002d20 <OF_Compute>
#if SECOND_SENSOR_IMPLEMENTED
			OF_Compute(ADNS2610_LEFT, &(frames[currentFrameIdx].oFLeft.x), &(frames[currentFrameIdx].oFLeft.y));
 8001880:	4b55      	ldr	r3, [pc, #340]	; (80019d8 <eyes_FSM+0x5b8>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	461a      	mov	r2, r3
 8001886:	f240 23a9 	movw	r3, #681	; 0x2a9
 800188a:	fb03 f302 	mul.w	r3, r3, r2
 800188e:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001892:	4a52      	ldr	r2, [pc, #328]	; (80019dc <eyes_FSM+0x5bc>)
 8001894:	4413      	add	r3, r2
 8001896:	1d59      	adds	r1, r3, #5
 8001898:	4b4f      	ldr	r3, [pc, #316]	; (80019d8 <eyes_FSM+0x5b8>)
 800189a:	781b      	ldrb	r3, [r3, #0]
 800189c:	461a      	mov	r2, r3
 800189e:	f240 23a9 	movw	r3, #681	; 0x2a9
 80018a2:	fb03 f302 	mul.w	r3, r3, r2
 80018a6:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80018aa:	4a4c      	ldr	r2, [pc, #304]	; (80019dc <eyes_FSM+0x5bc>)
 80018ac:	4413      	add	r3, r2
 80018ae:	3309      	adds	r3, #9
 80018b0:	461a      	mov	r2, r3
 80018b2:	2001      	movs	r0, #1
 80018b4:	f001 fa34 	bl	8002d20 <OF_Compute>
			OF_ComputeFused(&frames[currentFrameIdx].oFRight, &frames[currentFrameIdx].oFLeft, &frames[currentFrameIdx].oFFused);
 80018b8:	4b47      	ldr	r3, [pc, #284]	; (80019d8 <eyes_FSM+0x5b8>)
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	461a      	mov	r2, r3
 80018be:	f240 23a9 	movw	r3, #681	; 0x2a9
 80018c2:	fb03 f302 	mul.w	r3, r3, r2
 80018c6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80018ca:	4a44      	ldr	r2, [pc, #272]	; (80019dc <eyes_FSM+0x5bc>)
 80018cc:	4413      	add	r3, r2
 80018ce:	1d58      	adds	r0, r3, #5
 80018d0:	4b41      	ldr	r3, [pc, #260]	; (80019d8 <eyes_FSM+0x5b8>)
 80018d2:	781b      	ldrb	r3, [r3, #0]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f240 23a9 	movw	r3, #681	; 0x2a9
 80018da:	fb03 f302 	mul.w	r3, r3, r2
 80018de:	f503 7324 	add.w	r3, r3, #656	; 0x290
 80018e2:	4a3e      	ldr	r2, [pc, #248]	; (80019dc <eyes_FSM+0x5bc>)
 80018e4:	4413      	add	r3, r2
 80018e6:	1d59      	adds	r1, r3, #5
 80018e8:	4b3b      	ldr	r3, [pc, #236]	; (80019d8 <eyes_FSM+0x5b8>)
 80018ea:	781b      	ldrb	r3, [r3, #0]
 80018ec:	461a      	mov	r2, r3
 80018ee:	f240 23a9 	movw	r3, #681	; 0x2a9
 80018f2:	fb03 f302 	mul.w	r3, r3, r2
 80018f6:	f503 7326 	add.w	r3, r3, #664	; 0x298
 80018fa:	4a38      	ldr	r2, [pc, #224]	; (80019dc <eyes_FSM+0x5bc>)
 80018fc:	4413      	add	r3, r2
 80018fe:	3305      	adds	r3, #5
 8001900:	461a      	mov	r2, r3
 8001902:	f001 faf1 	bl	8002ee8 <OF_ComputeFused>
#endif
		}

		/* Copy current frames to reference frame */
		if(IsCalibrationModeEnable() && !refSet){
 8001906:	f000 fca5 	bl	8002254 <IsCalibrationModeEnable>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d011      	beq.n	8001934 <eyes_FSM+0x514>
 8001910:	4b37      	ldr	r3, [pc, #220]	; (80019f0 <eyes_FSM+0x5d0>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	f083 0301 	eor.w	r3, r3, #1
 8001918:	b2db      	uxtb	r3, r3
 800191a:	2b00      	cmp	r3, #0
 800191c:	d00a      	beq.n	8001934 <eyes_FSM+0x514>
			SetRefFrame(frames->frame[ADNS2610_RIGHT], refFrameCal[ADNS2610_RIGHT], 2*PIXEL_QTY);
 800191e:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <eyes_FSM+0x5d4>)
 8001920:	f44f 7222 	mov.w	r2, #648	; 0x288
 8001924:	4934      	ldr	r1, [pc, #208]	; (80019f8 <eyes_FSM+0x5d8>)
 8001926:	4618      	mov	r0, r3
 8001928:	f000 f9ce 	bl	8001cc8 <SetRefFrame>
			refSet = true;
 800192c:	4b30      	ldr	r3, [pc, #192]	; (80019f0 <eyes_FSM+0x5d0>)
 800192e:	2201      	movs	r2, #1
 8001930:	701a      	strb	r2, [r3, #0]
 8001932:	e00a      	b.n	800194a <eyes_FSM+0x52a>
		}
		else if(!IsCalibrationModeEnable()){
 8001934:	f000 fc8e 	bl	8002254 <IsCalibrationModeEnable>
 8001938:	4603      	mov	r3, r0
 800193a:	f083 0301 	eor.w	r3, r3, #1
 800193e:	b2db      	uxtb	r3, r3
 8001940:	2b00      	cmp	r3, #0
 8001942:	d002      	beq.n	800194a <eyes_FSM+0x52a>
			refSet = false;
 8001944:	4b2a      	ldr	r3, [pc, #168]	; (80019f0 <eyes_FSM+0x5d0>)
 8001946:	2200      	movs	r2, #0
 8001948:	701a      	strb	r2, [r3, #0]
		}

		/* Switch the frame structures to store the new frame in the "oldest" data buffer */
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 800194a:	4b2c      	ldr	r3, [pc, #176]	; (80019fc <eyes_FSM+0x5dc>)
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	71fb      	strb	r3, [r7, #7]
 8001950:	4b21      	ldr	r3, [pc, #132]	; (80019d8 <eyes_FSM+0x5b8>)
 8001952:	781a      	ldrb	r2, [r3, #0]
 8001954:	4b29      	ldr	r3, [pc, #164]	; (80019fc <eyes_FSM+0x5dc>)
 8001956:	701a      	strb	r2, [r3, #0]
 8001958:	4a1f      	ldr	r2, [pc, #124]	; (80019d8 <eyes_FSM+0x5b8>)
 800195a:	79fb      	ldrb	r3, [r7, #7]
 800195c:	7013      	strb	r3, [r2, #0]
		FSMstate = TRIGGER_FRAME;
 800195e:	4b1a      	ldr	r3, [pc, #104]	; (80019c8 <eyes_FSM+0x5a8>)
 8001960:	2201      	movs	r2, #1
 8001962:	701a      	strb	r2, [r3, #0]

		if(IsTrackingEnable() && !IsCalibrationModeEnable()){
 8001964:	f000 fc6a 	bl	800223c <IsTrackingEnable>
 8001968:	4603      	mov	r3, r0
 800196a:	2b00      	cmp	r3, #0
 800196c:	d019      	beq.n	80019a2 <eyes_FSM+0x582>
 800196e:	f000 fc71 	bl	8002254 <IsCalibrationModeEnable>
 8001972:	4603      	mov	r3, r0
 8001974:	f083 0301 	eor.w	r3, r3, #1
 8001978:	b2db      	uxtb	r3, r3
 800197a:	2b00      	cmp	r3, #0
 800197c:	d011      	beq.n	80019a2 <eyes_FSM+0x582>
			applyControlLaw(&frames[currentFrameIdx], ALL);
 800197e:	4b16      	ldr	r3, [pc, #88]	; (80019d8 <eyes_FSM+0x5b8>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	461a      	mov	r2, r3
 8001984:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001988:	fb03 f302 	mul.w	r3, r3, r2
 800198c:	4a13      	ldr	r2, [pc, #76]	; (80019dc <eyes_FSM+0x5bc>)
 800198e:	4413      	add	r3, r2
 8001990:	2102      	movs	r1, #2
 8001992:	4618      	mov	r0, r3
 8001994:	f000 fb58 	bl	8002048 <applyControlLaw>
			eyes_waitControlTIM_IT(TIME_TO_POSITION);
 8001998:	f44f 70e1 	mov.w	r0, #450	; 0x1c2
 800199c:	f000 f8e6 	bl	8001b6c <eyes_waitControlTIM_IT>
		}
		else{
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
		}
		return;
 80019a0:	e00e      	b.n	80019c0 <eyes_FSM+0x5a0>
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 80019a2:	20c8      	movs	r0, #200	; 0xc8
 80019a4:	f000 f86c 	bl	8001a80 <eyes_waitIT>
		return;
 80019a8:	e00a      	b.n	80019c0 <eyes_FSM+0x5a0>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80019aa:	bf00      	nop
 80019ac:	e002      	b.n	80019b4 <eyes_FSM+0x594>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80019ae:	bf00      	nop
 80019b0:	e000      	b.n	80019b4 <eyes_FSM+0x594>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80019b2:	bf00      	nop
	}

	// Check for collisions between interrupts callings
	collisionError:
		printf("COLISSION ERROR!!\r\n");
 80019b4:	4812      	ldr	r0, [pc, #72]	; (8001a00 <eyes_FSM+0x5e0>)
 80019b6:	f004 f823 	bl	8005a00 <puts>
		eyes_stopWaitIT();
 80019ba:	f000 f889 	bl	8001ad0 <eyes_stopWaitIT>
		while(1);
 80019be:	e7fe      	b.n	80019be <eyes_FSM+0x59e>
}
 80019c0:	3708      	adds	r7, #8
 80019c2:	46bd      	mov	sp, r7
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	200005e8 	.word	0x200005e8
 80019cc:	20000552 	.word	0x20000552
 80019d0:	2000087b 	.word	0x2000087b
 80019d4:	20000874 	.word	0x20000874
 80019d8:	20000914 	.word	0x20000914
 80019dc:	20000000 	.word	0x20000000
 80019e0:	20000876 	.word	0x20000876
 80019e4:	20000879 	.word	0x20000879
 80019e8:	20000878 	.word	0x20000878
 80019ec:	20000553 	.word	0x20000553
 80019f0:	2000087e 	.word	0x2000087e
 80019f4:	20000005 	.word	0x20000005
 80019f8:	200005ec 	.word	0x200005ec
 80019fc:	20000915 	.word	0x20000915
 8001a00:	080069f0 	.word	0x080069f0

08001a04 <eyes_configureFSM_TIM>:

/**
 * It sets up a TIMER to wait the required times by the ADNS2610 sensor through an interrupt.
 * The TIMER pre-scaler is configured to increase its count each 250ns.
 */
void eyes_configureFSM_TIM(void){
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b082      	sub	sp, #8
 8001a08:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8001a0a:	4b1c      	ldr	r3, [pc, #112]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8001a10:	4b1a      	ldr	r3, [pc, #104]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a12:	68db      	ldr	r3, [r3, #12]
 8001a14:	4a19      	ldr	r2, [pc, #100]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	f003 0302 	and.w	r3, r3, #2
 8001a22:	f043 0304 	orr.w	r3, r3, #4
 8001a26:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8001a28:	4a14      	ldr	r2, [pc, #80]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 8001a2e:	4b13      	ldr	r3, [pc, #76]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a30:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8001a36:	4b11      	ldr	r3, [pc, #68]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a38:	695b      	ldr	r3, [r3, #20]
 8001a3a:	4a10      	ldr	r2, [pc, #64]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a3c:	f043 0301 	orr.w	r3, r3, #1
 8001a40:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8001a42:	4b0e      	ldr	r3, [pc, #56]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a44:	691b      	ldr	r3, [r3, #16]
 8001a46:	4a0d      	ldr	r2, [pc, #52]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a48:	f023 0301 	bic.w	r3, r3, #1
 8001a4c:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	4a0a      	ldr	r2, [pc, #40]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a54:	f023 0304 	bic.w	r3, r3, #4
 8001a58:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8001a5a:	4b08      	ldr	r3, [pc, #32]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a5c:	68db      	ldr	r3, [r3, #12]
 8001a5e:	4a07      	ldr	r2, [pc, #28]	; (8001a7c <eyes_configureFSM_TIM+0x78>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 1);
 8001a66:	2101      	movs	r1, #1
 8001a68:	2019      	movs	r0, #25
 8001a6a:	f7ff fc4f 	bl	800130c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001a6e:	2019      	movs	r0, #25
 8001a70:	f7ff fc2e 	bl	80012d0 <__NVIC_EnableIRQ>
}
 8001a74:	bf00      	nop
 8001a76:	3708      	adds	r7, #8
 8001a78:	46bd      	mov	sp, r7
 8001a7a:	bd80      	pop	{r7, pc}
 8001a7c:	40012c00 	.word	0x40012c00

08001a80 <eyes_waitIT>:

/**
 * It sets up the TIMER interval and it starts the count until the interrupt launch.
 * @param Count250ns	The interval to wait expressed as 250ns multiples
 */
void eyes_waitIT(uint32_t Count250ns){
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8001a88:	4b10      	ldr	r3, [pc, #64]	; (8001acc <eyes_waitIT+0x4c>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a0f      	ldr	r2, [pc, #60]	; (8001acc <eyes_waitIT+0x4c>)
 8001a8e:	f043 0304 	orr.w	r3, r3, #4
 8001a92:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8001a94:	4a0d      	ldr	r2, [pc, #52]	; (8001acc <eyes_waitIT+0x4c>)
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	; (8001acc <eyes_waitIT+0x4c>)
 8001a9c:	695b      	ldr	r3, [r3, #20]
 8001a9e:	4a0b      	ldr	r2, [pc, #44]	; (8001acc <eyes_waitIT+0x4c>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8001aa6:	4b09      	ldr	r3, [pc, #36]	; (8001acc <eyes_waitIT+0x4c>)
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	4a08      	ldr	r2, [pc, #32]	; (8001acc <eyes_waitIT+0x4c>)
 8001aac:	f023 0304 	bic.w	r3, r3, #4
 8001ab0:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001ab2:	4b06      	ldr	r3, [pc, #24]	; (8001acc <eyes_waitIT+0x4c>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a05      	ldr	r2, [pc, #20]	; (8001acc <eyes_waitIT+0x4c>)
 8001ab8:	f043 0301 	orr.w	r3, r3, #1
 8001abc:	6013      	str	r3, [r2, #0]
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40012c00 	.word	0x40012c00

08001ad0 <eyes_stopWaitIT>:

/**
 * It stops the TIMER count to avoid the TIMER continues launching interrupts each configured interval time.
 */
void eyes_stopWaitIT(){
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001ad4:	4b05      	ldr	r3, [pc, #20]	; (8001aec <eyes_stopWaitIT+0x1c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <eyes_stopWaitIT+0x1c>)
 8001ada:	f023 0301 	bic.w	r3, r3, #1
 8001ade:	6013      	str	r3, [r2, #0]
}
 8001ae0:	bf00      	nop
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40012c00 	.word	0x40012c00

08001af0 <eyes_configureControl_TIM>:

/**
 * It sets up a TIMER to wait the required time to move the platform to the new position through an interrupt.
 * The TIMER pre-scaler is configured to increase its count each millisecond.
 */
void eyes_configureControl_TIM(void){
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b082      	sub	sp, #8
 8001af4:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM4->CR1;
 8001af6:	4b1c      	ldr	r3, [pc, #112]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM4->DIER, TIM_DIER_UIE);
 8001afc:	4b1a      	ldr	r3, [pc, #104]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a19      	ldr	r2, [pc, #100]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b02:	f023 0301 	bic.w	r3, r3, #1
 8001b06:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	f003 0302 	and.w	r3, r3, #2
 8001b0e:	f043 0304 	orr.w	r3, r3, #4
 8001b12:	607b      	str	r3, [r7, #4]
	TIM4->CR1 = temp;
 8001b14:	4a14      	ldr	r2, [pc, #80]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM4->ARR = 1;
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM4->EGR, TIM_EGR_UG);
 8001b20:	4b11      	ldr	r3, [pc, #68]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b22:	695b      	ldr	r3, [r3, #20]
 8001b24:	4a10      	ldr	r2, [pc, #64]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b26:	f043 0301 	orr.w	r3, r3, #1
 8001b2a:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8001b2c:	4b0e      	ldr	r3, [pc, #56]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b2e:	691b      	ldr	r3, [r3, #16]
 8001b30:	4a0d      	ldr	r2, [pc, #52]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b32:	f023 0301 	bic.w	r3, r3, #1
 8001b36:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM4->CR1, TIM_CR1_URS);
 8001b38:	4b0b      	ldr	r3, [pc, #44]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	4a0a      	ldr	r2, [pc, #40]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b3e:	f023 0304 	bic.w	r3, r3, #4
 8001b42:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM4->DIER, TIM_DIER_UIE);
 8001b44:	4b08      	ldr	r3, [pc, #32]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	4a07      	ldr	r2, [pc, #28]	; (8001b68 <eyes_configureControl_TIM+0x78>)
 8001b4a:	f043 0301 	orr.w	r3, r3, #1
 8001b4e:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM4_IRQn, 1);
 8001b50:	2101      	movs	r1, #1
 8001b52:	201e      	movs	r0, #30
 8001b54:	f7ff fbda 	bl	800130c <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM4_IRQn);
 8001b58:	201e      	movs	r0, #30
 8001b5a:	f7ff fbb9 	bl	80012d0 <__NVIC_EnableIRQ>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	40000800 	.word	0x40000800

08001b6c <eyes_waitControlTIM_IT>:

/**
 * It sets up the TIMER interval and it starts the count until the interrupt launch
 * @param millis	The interval to wait expressed in milliseconds
 */
void eyes_waitControlTIM_IT(uint32_t millis){
 8001b6c:	b480      	push	{r7}
 8001b6e:	b083      	sub	sp, #12
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM4->CR1, TIM_CR1_URS);
 8001b74:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b7a:	f043 0304 	orr.w	r3, r3, #4
 8001b7e:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM4->ARR = millis;
 8001b80:	4a0d      	ldr	r2, [pc, #52]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM4->EGR, TIM_EGR_UG);
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b88:	695b      	ldr	r3, [r3, #20]
 8001b8a:	4a0b      	ldr	r2, [pc, #44]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b8c:	f043 0301 	orr.w	r3, r3, #1
 8001b90:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM4->CR1, TIM_CR1_URS);
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a08      	ldr	r2, [pc, #32]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001b98:	f023 0304 	bic.w	r3, r3, #4
 8001b9c:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM4->CR1, TIM_CR1_CEN);
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4a05      	ldr	r2, [pc, #20]	; (8001bb8 <eyes_waitControlTIM_IT+0x4c>)
 8001ba4:	f043 0301 	orr.w	r3, r3, #1
 8001ba8:	6013      	str	r3, [r2, #0]
}
 8001baa:	bf00      	nop
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	40000800 	.word	0x40000800

08001bbc <eyes_stopWaitControlTIM_IT>:

/**
 * It stops the TIMER count to avoid the TIMER continues launching interrupts each configured interval time.
 */
void eyes_stopWaitControlTIM_IT(){
 8001bbc:	b480      	push	{r7}
 8001bbe:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM4->CR1, TIM_CR1_CEN);
 8001bc0:	4b05      	ldr	r3, [pc, #20]	; (8001bd8 <eyes_stopWaitControlTIM_IT+0x1c>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4a04      	ldr	r2, [pc, #16]	; (8001bd8 <eyes_stopWaitControlTIM_IT+0x1c>)
 8001bc6:	f023 0301 	bic.w	r3, r3, #1
 8001bca:	6013      	str	r3, [r2, #0]
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	40000800 	.word	0x40000800

08001bdc <eyes_computeIdxFromStatus>:
 * @param status2	Pointer to pixel status type pixel status from one of the two devices
 * @param idx1		Pointer to index for the next acquired pixel
 * @param idx2		Poniter to index for the next acquired pixel
 * @return	True if pixels status are good, false if not
 */
bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 8001bdc:	b480      	push	{r7}
 8001bde:	b085      	sub	sp, #20
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d10a      	bne.n	8001c08 <eyes_computeIdxFromStatus+0x2c>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	881b      	ldrh	r3, [r3, #0]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d106      	bne.n	8001c08 <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	881b      	ldrh	r3, [r3, #0]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	b29a      	uxth	r2, r3
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	801a      	strh	r2, [r3, #0]
 8001c06:	e024      	b.n	8001c52 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	781b      	ldrb	r3, [r3, #0]
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d10f      	bne.n	8001c30 <eyes_computeIdxFromStatus+0x54>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	881b      	ldrh	r3, [r3, #0]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d00b      	beq.n	8001c30 <eyes_computeIdxFromStatus+0x54>
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	881b      	ldrh	r3, [r3, #0]
 8001c1c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8001c20:	d806      	bhi.n	8001c30 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29a      	uxth	r2, r3
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	801a      	strh	r2, [r3, #0]
 8001c2e:	e010      	b.n	8001c52 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d10c      	bne.n	8001c52 <eyes_computeIdxFromStatus+0x76>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	881b      	ldrh	r3, [r3, #0]
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d008      	beq.n	8001c52 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	2200      	movs	r2, #0
 8001c44:	801a      	strh	r2, [r3, #0]
 8001c46:	683b      	ldr	r3, [r7, #0]
 8001c48:	881a      	ldrh	r2, [r3, #0]
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	801a      	strh	r2, [r3, #0]
		return false;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	e034      	b.n	8001cbc <eyes_computeIdxFromStatus+0xe0>
	}
#if SECOND_SENSOR_IMPLEMENTED
	if((*status2 == VALID_SOF) && (*idx2 == 0)){
 8001c52:	68bb      	ldr	r3, [r7, #8]
 8001c54:	781b      	ldrb	r3, [r3, #0]
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d10a      	bne.n	8001c70 <eyes_computeIdxFromStatus+0x94>
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	881b      	ldrh	r3, [r3, #0]
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d106      	bne.n	8001c70 <eyes_computeIdxFromStatus+0x94>
		(*idx2)++;
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	881b      	ldrh	r3, [r3, #0]
 8001c66:	3301      	adds	r3, #1
 8001c68:	b29a      	uxth	r2, r3
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	801a      	strh	r2, [r3, #0]
 8001c6e:	e024      	b.n	8001cba <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID) && (*idx2 != 0) && (*idx2 < PIXEL_QTY-1)){
 8001c70:	68bb      	ldr	r3, [r7, #8]
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d10f      	bne.n	8001c98 <eyes_computeIdxFromStatus+0xbc>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	881b      	ldrh	r3, [r3, #0]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d00b      	beq.n	8001c98 <eyes_computeIdxFromStatus+0xbc>
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	881b      	ldrh	r3, [r3, #0]
 8001c84:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8001c88:	d806      	bhi.n	8001c98 <eyes_computeIdxFromStatus+0xbc>
		(*idx2)++;
 8001c8a:	683b      	ldr	r3, [r7, #0]
 8001c8c:	881b      	ldrh	r3, [r3, #0]
 8001c8e:	3301      	adds	r3, #1
 8001c90:	b29a      	uxth	r2, r3
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	801a      	strh	r2, [r3, #0]
 8001c96:	e010      	b.n	8001cba <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
 8001c98:	68bb      	ldr	r3, [r7, #8]
 8001c9a:	781b      	ldrb	r3, [r3, #0]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d10c      	bne.n	8001cba <eyes_computeIdxFromStatus+0xde>
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	881b      	ldrh	r3, [r3, #0]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d008      	beq.n	8001cba <eyes_computeIdxFromStatus+0xde>
		(*idx1) = (*idx2) = 0;
 8001ca8:	683b      	ldr	r3, [r7, #0]
 8001caa:	2200      	movs	r2, #0
 8001cac:	801a      	strh	r2, [r3, #0]
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	881a      	ldrh	r2, [r3, #0]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	801a      	strh	r2, [r3, #0]
		return false;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	e000      	b.n	8001cbc <eyes_computeIdxFromStatus+0xe0>
	}
#endif
	return true;
 8001cba:	2301      	movs	r3, #1
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3714      	adds	r7, #20
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <SetRefFrame>:

void SetRefFrame(pixelTypeDef* srcFrame, pixelTypeDef* dstFrame, int length){
 8001cc8:	b480      	push	{r7}
 8001cca:	b087      	sub	sp, #28
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	60f8      	str	r0, [r7, #12]
 8001cd0:	60b9      	str	r1, [r7, #8]
 8001cd2:	607a      	str	r2, [r7, #4]

	int i = 0;
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	617b      	str	r3, [r7, #20]

	while(i < length){
 8001cd8:	e00c      	b.n	8001cf4 <SetRefFrame+0x2c>
		*dstFrame = *srcFrame;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	781a      	ldrb	r2, [r3, #0]
 8001cde:	68bb      	ldr	r3, [r7, #8]
 8001ce0:	701a      	strb	r2, [r3, #0]
		dstFrame++;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	60bb      	str	r3, [r7, #8]
		srcFrame++;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	3301      	adds	r3, #1
 8001cec:	60fb      	str	r3, [r7, #12]
		i++;
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	3301      	adds	r3, #1
 8001cf2:	617b      	str	r3, [r7, #20]
	while(i < length){
 8001cf4:	697a      	ldr	r2, [r7, #20]
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	dbee      	blt.n	8001cda <SetRefFrame+0x12>
	}
}
 8001cfc:	bf00      	nop
 8001cfe:	371c      	adds	r7, #28
 8001d00:	46bd      	mov	sp, r7
 8001d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d06:	4770      	bx	lr

08001d08 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001d0e:	691b      	ldr	r3, [r3, #16]
 8001d10:	f003 0301 	and.w	r3, r3, #1
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d007      	beq.n	8001d28 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	4a03      	ldr	r2, [pc, #12]	; (8001d2c <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001d1e:	f023 0301 	bic.w	r3, r3, #1
 8001d22:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 8001d24:	f7ff fb7c 	bl	8001420 <eyes_FSM>
	}
}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	40012c00 	.word	0x40012c00

08001d30 <TIM4_IRQHandler>:

void TIM4_IRQHandler(void){
 8001d30:	b580      	push	{r7, lr}
 8001d32:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM4->SR, TIM_SR_UIF)){
 8001d34:	4b07      	ldr	r3, [pc, #28]	; (8001d54 <TIM4_IRQHandler+0x24>)
 8001d36:	691b      	ldr	r3, [r3, #16]
 8001d38:	f003 0301 	and.w	r3, r3, #1
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d007      	beq.n	8001d50 <TIM4_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM4->SR, TIM_SR_UIF);
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <TIM4_IRQHandler+0x24>)
 8001d42:	691b      	ldr	r3, [r3, #16]
 8001d44:	4a03      	ldr	r2, [pc, #12]	; (8001d54 <TIM4_IRQHandler+0x24>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 8001d4c:	f7ff fb68 	bl	8001420 <eyes_FSM>
	}
}
 8001d50:	bf00      	nop
 8001d52:	bd80      	pop	{r7, pc}
 8001d54:	40000800 	.word	0x40000800

08001d58 <gimbalControlInit>:

/**
 * @brief Setting up all the peripherals (UART and TIMER) needed
 * to control the gimbal position
 */
void gimbalControlInit(void){
 8001d58:	b580      	push	{r7, lr}
 8001d5a:	af00      	add	r7, sp, #0
	// Configure UART2 interrupt to receive data from PC
	configure_IRQ_USART_RX();
 8001d5c:	f001 ffb2 	bl	8003cc4 <configure_IRQ_USART_RX>

	// Flag to know PWM signal state
	pwmEn = false;
 8001d60:	4b05      	ldr	r3, [pc, #20]	; (8001d78 <gimbalControlInit+0x20>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	701a      	strb	r2, [r3, #0]

	// Flag to know if tracking function is enable/disable
	trackingEn = false;
 8001d66:	4b05      	ldr	r3, [pc, #20]	; (8001d7c <gimbalControlInit+0x24>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	701a      	strb	r2, [r3, #0]

	// Calibration not active
	calibrationEn = false;
 8001d6c:	4b04      	ldr	r3, [pc, #16]	; (8001d80 <gimbalControlInit+0x28>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
}
 8001d72:	bf00      	nop
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	20000918 	.word	0x20000918
 8001d7c:	20000916 	.word	0x20000916
 8001d80:	20000917 	.word	0x20000917

08001d84 <decodeCmd>:
 * @brief Receive a string and decode the command type related to it
 * @param cmdString	The command in string format
 * @param length	The length of the command
 * @return	The command type in cmdTypeDef format
 */
cmdTypeDef decodeCmd(char const * cmdString, int length){
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b082      	sub	sp, #8
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
 8001d8c:	6039      	str	r1, [r7, #0]

	static int deltaPos = DELTA_POS;

	// Enable PWM if it was disabled
	if(!pwmEn)	enablePWM();
 8001d8e:	4b9d      	ldr	r3, [pc, #628]	; (8002004 <decodeCmd+0x280>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	f083 0301 	eor.w	r3, r3, #1
 8001d96:	b2db      	uxtb	r3, r3
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d001      	beq.n	8001da0 <decodeCmd+0x1c>
 8001d9c:	f000 fa66 	bl	800226c <enablePWM>

	// Tracking enable command
	if(strncmp(cmdString, "TRON\n", length) == 0){
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	461a      	mov	r2, r3
 8001da4:	4998      	ldr	r1, [pc, #608]	; (8002008 <decodeCmd+0x284>)
 8001da6:	6878      	ldr	r0, [r7, #4]
 8001da8:	f003 fe32 	bl	8005a10 <strncmp>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d104      	bne.n	8001dbc <decodeCmd+0x38>
		trackingEn = true;
 8001db2:	4b96      	ldr	r3, [pc, #600]	; (800200c <decodeCmd+0x288>)
 8001db4:	2201      	movs	r2, #1
 8001db6:	701a      	strb	r2, [r3, #0]
		return TRACKING_ON;
 8001db8:	2307      	movs	r3, #7
 8001dba:	e11f      	b.n	8001ffc <decodeCmd+0x278>
	}
	if(strncmp(cmdString, "TROFF\n", length) == 0){
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	461a      	mov	r2, r3
 8001dc0:	4993      	ldr	r1, [pc, #588]	; (8002010 <decodeCmd+0x28c>)
 8001dc2:	6878      	ldr	r0, [r7, #4]
 8001dc4:	f003 fe24 	bl	8005a10 <strncmp>
 8001dc8:	4603      	mov	r3, r0
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d104      	bne.n	8001dd8 <decodeCmd+0x54>
		trackingEn = false;
 8001dce:	4b8f      	ldr	r3, [pc, #572]	; (800200c <decodeCmd+0x288>)
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	701a      	strb	r2, [r3, #0]
		return TRACKING_OFF;
 8001dd4:	2308      	movs	r3, #8
 8001dd6:	e111      	b.n	8001ffc <decodeCmd+0x278>
	}

	if(strncmp(cmdString, "CALON\n", length) == 0){
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	461a      	mov	r2, r3
 8001ddc:	498d      	ldr	r1, [pc, #564]	; (8002014 <decodeCmd+0x290>)
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f003 fe16 	bl	8005a10 <strncmp>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d107      	bne.n	8001dfa <decodeCmd+0x76>
		calibrationEn = true;
 8001dea:	4b8b      	ldr	r3, [pc, #556]	; (8002018 <decodeCmd+0x294>)
 8001dec:	2201      	movs	r2, #1
 8001dee:	701a      	strb	r2, [r3, #0]
		deltaPos = CALDELTA_POS;
 8001df0:	4b8a      	ldr	r3, [pc, #552]	; (800201c <decodeCmd+0x298>)
 8001df2:	220a      	movs	r2, #10
 8001df4:	601a      	str	r2, [r3, #0]
		return CALIBRATION_MODE_ON;
 8001df6:	2309      	movs	r3, #9
 8001df8:	e100      	b.n	8001ffc <decodeCmd+0x278>
	}

	if(strncmp(cmdString, "CALOFF\n", length) == 0){
 8001dfa:	683b      	ldr	r3, [r7, #0]
 8001dfc:	461a      	mov	r2, r3
 8001dfe:	4988      	ldr	r1, [pc, #544]	; (8002020 <decodeCmd+0x29c>)
 8001e00:	6878      	ldr	r0, [r7, #4]
 8001e02:	f003 fe05 	bl	8005a10 <strncmp>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d107      	bne.n	8001e1c <decodeCmd+0x98>
		calibrationEn = false;
 8001e0c:	4b82      	ldr	r3, [pc, #520]	; (8002018 <decodeCmd+0x294>)
 8001e0e:	2200      	movs	r2, #0
 8001e10:	701a      	strb	r2, [r3, #0]
		deltaPos = DELTA_POS;
 8001e12:	4b82      	ldr	r3, [pc, #520]	; (800201c <decodeCmd+0x298>)
 8001e14:	2246      	movs	r2, #70	; 0x46
 8001e16:	601a      	str	r2, [r3, #0]
		return CALIBRATION_MODE_OFF;
 8001e18:	230a      	movs	r3, #10
 8001e1a:	e0ef      	b.n	8001ffc <decodeCmd+0x278>
	}

	// Tracking enable so It isn't able to perform any command
	if(trackingEn) return NA;
 8001e1c:	4b7b      	ldr	r3, [pc, #492]	; (800200c <decodeCmd+0x288>)
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d001      	beq.n	8001e28 <decodeCmd+0xa4>
 8001e24:	230b      	movs	r3, #11
 8001e26:	e0e9      	b.n	8001ffc <decodeCmd+0x278>

	// Center command
	if(strncmp(cmdString, "CN\n", length) == 0){
 8001e28:	683b      	ldr	r3, [r7, #0]
 8001e2a:	461a      	mov	r2, r3
 8001e2c:	497d      	ldr	r1, [pc, #500]	; (8002024 <decodeCmd+0x2a0>)
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f003 fdee 	bl	8005a10 <strncmp>
 8001e34:	4603      	mov	r3, r0
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d119      	bne.n	8001e6e <decodeCmd+0xea>

		motorPos.pitchPos = CENTER_POS;
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	; (8002028 <decodeCmd+0x2a4>)
 8001e3c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001e40:	801a      	strh	r2, [r3, #0]
		motorPos.rollPos = CENTER_POS;
 8001e42:	4b79      	ldr	r3, [pc, #484]	; (8002028 <decodeCmd+0x2a4>)
 8001e44:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001e48:	805a      	strh	r2, [r3, #2]
		motorPos.yawPos = CENTER_POS;
 8001e4a:	4b77      	ldr	r3, [pc, #476]	; (8002028 <decodeCmd+0x2a4>)
 8001e4c:	f241 22bf 	movw	r2, #4799	; 0x12bf
 8001e50:	809a      	strh	r2, [r3, #4]

		TIM3->CCR1 = motorPos.pitchPos;
 8001e52:	4b75      	ldr	r3, [pc, #468]	; (8002028 <decodeCmd+0x2a4>)
 8001e54:	881a      	ldrh	r2, [r3, #0]
 8001e56:	4b75      	ldr	r3, [pc, #468]	; (800202c <decodeCmd+0x2a8>)
 8001e58:	635a      	str	r2, [r3, #52]	; 0x34
		TIM3->CCR2 = motorPos.rollPos;
 8001e5a:	4b73      	ldr	r3, [pc, #460]	; (8002028 <decodeCmd+0x2a4>)
 8001e5c:	885a      	ldrh	r2, [r3, #2]
 8001e5e:	4b73      	ldr	r3, [pc, #460]	; (800202c <decodeCmd+0x2a8>)
 8001e60:	639a      	str	r2, [r3, #56]	; 0x38
		TIM3->CCR4 = motorPos.yawPos;
 8001e62:	4b71      	ldr	r3, [pc, #452]	; (8002028 <decodeCmd+0x2a4>)
 8001e64:	889a      	ldrh	r2, [r3, #4]
 8001e66:	4b71      	ldr	r3, [pc, #452]	; (800202c <decodeCmd+0x2a8>)
 8001e68:	641a      	str	r2, [r3, #64]	; 0x40

		return CENTER;
 8001e6a:	2306      	movs	r3, #6
 8001e6c:	e0c6      	b.n	8001ffc <decodeCmd+0x278>
	}

	// Up command
	if(strncmp(cmdString, "UP\n", length) == 0){
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	461a      	mov	r2, r3
 8001e72:	496f      	ldr	r1, [pc, #444]	; (8002030 <decodeCmd+0x2ac>)
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	f003 fdcb 	bl	8005a10 <strncmp>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d117      	bne.n	8001eb0 <decodeCmd+0x12c>

//		if(!calibrationEn) motorPos.pitchPos -= DELTA_POS;
//		else motorPos.pitchPos -= CALDELTA_POS;
		motorPos.pitchPos -= deltaPos;
 8001e80:	4b69      	ldr	r3, [pc, #420]	; (8002028 <decodeCmd+0x2a4>)
 8001e82:	881a      	ldrh	r2, [r3, #0]
 8001e84:	4b65      	ldr	r3, [pc, #404]	; (800201c <decodeCmd+0x298>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	b29b      	uxth	r3, r3
 8001e8a:	1ad3      	subs	r3, r2, r3
 8001e8c:	b29a      	uxth	r2, r3
 8001e8e:	4b66      	ldr	r3, [pc, #408]	; (8002028 <decodeCmd+0x2a4>)
 8001e90:	801a      	strh	r2, [r3, #0]

		NormalizeRange(motorPos.pitchPos, MAX_POS, MIN_POS);
 8001e92:	4b65      	ldr	r3, [pc, #404]	; (8002028 <decodeCmd+0x2a4>)
 8001e94:	881b      	ldrh	r3, [r3, #0]
 8001e96:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001e9a:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 fa0a 	bl	80022b8 <NormalizeRange>
		TIM3->CCR2 = motorPos.pitchPos;
 8001ea4:	4b60      	ldr	r3, [pc, #384]	; (8002028 <decodeCmd+0x2a4>)
 8001ea6:	881a      	ldrh	r2, [r3, #0]
 8001ea8:	4b60      	ldr	r3, [pc, #384]	; (800202c <decodeCmd+0x2a8>)
 8001eaa:	639a      	str	r2, [r3, #56]	; 0x38
		return UP;
 8001eac:	2300      	movs	r3, #0
 8001eae:	e0a5      	b.n	8001ffc <decodeCmd+0x278>
	}
	// Down command
	if(strncmp(cmdString, "DW\n", length) == 0){
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	495f      	ldr	r1, [pc, #380]	; (8002034 <decodeCmd+0x2b0>)
 8001eb6:	6878      	ldr	r0, [r7, #4]
 8001eb8:	f003 fdaa 	bl	8005a10 <strncmp>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d117      	bne.n	8001ef2 <decodeCmd+0x16e>

//		if(!calibrationEn) motorPos.pitchPos += DELTA_POS;
//		else	motorPos.pitchPos += CALDELTA_POS;
		motorPos.pitchPos += deltaPos;
 8001ec2:	4b59      	ldr	r3, [pc, #356]	; (8002028 <decodeCmd+0x2a4>)
 8001ec4:	881a      	ldrh	r2, [r3, #0]
 8001ec6:	4b55      	ldr	r3, [pc, #340]	; (800201c <decodeCmd+0x298>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	4413      	add	r3, r2
 8001ece:	b29a      	uxth	r2, r3
 8001ed0:	4b55      	ldr	r3, [pc, #340]	; (8002028 <decodeCmd+0x2a4>)
 8001ed2:	801a      	strh	r2, [r3, #0]

		NormalizeRange(motorPos.pitchPos, MAX_POS, MIN_POS);
 8001ed4:	4b54      	ldr	r3, [pc, #336]	; (8002028 <decodeCmd+0x2a4>)
 8001ed6:	881b      	ldrh	r3, [r3, #0]
 8001ed8:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001edc:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001ee0:	4618      	mov	r0, r3
 8001ee2:	f000 f9e9 	bl	80022b8 <NormalizeRange>
		TIM3->CCR2 = motorPos.pitchPos;
 8001ee6:	4b50      	ldr	r3, [pc, #320]	; (8002028 <decodeCmd+0x2a4>)
 8001ee8:	881a      	ldrh	r2, [r3, #0]
 8001eea:	4b50      	ldr	r3, [pc, #320]	; (800202c <decodeCmd+0x2a8>)
 8001eec:	639a      	str	r2, [r3, #56]	; 0x38
		return DOWN;
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e084      	b.n	8001ffc <decodeCmd+0x278>
	}
	// Left command
	if(strncmp(cmdString, "LF\n", length) == 0){
 8001ef2:	683b      	ldr	r3, [r7, #0]
 8001ef4:	461a      	mov	r2, r3
 8001ef6:	4950      	ldr	r1, [pc, #320]	; (8002038 <decodeCmd+0x2b4>)
 8001ef8:	6878      	ldr	r0, [r7, #4]
 8001efa:	f003 fd89 	bl	8005a10 <strncmp>
 8001efe:	4603      	mov	r3, r0
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d117      	bne.n	8001f34 <decodeCmd+0x1b0>

//		if(!calibrationEn) motorPos.yawPos -= DELTA_POS;
//		else motorPos.yawPos -= CALDELTA_POS;
		motorPos.yawPos -= deltaPos;
 8001f04:	4b48      	ldr	r3, [pc, #288]	; (8002028 <decodeCmd+0x2a4>)
 8001f06:	889a      	ldrh	r2, [r3, #4]
 8001f08:	4b44      	ldr	r3, [pc, #272]	; (800201c <decodeCmd+0x298>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	b29b      	uxth	r3, r3
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	b29a      	uxth	r2, r3
 8001f12:	4b45      	ldr	r3, [pc, #276]	; (8002028 <decodeCmd+0x2a4>)
 8001f14:	809a      	strh	r2, [r3, #4]

		NormalizeRange(motorPos.yawPos, MAX_POS, MIN_POS);
 8001f16:	4b44      	ldr	r3, [pc, #272]	; (8002028 <decodeCmd+0x2a4>)
 8001f18:	889b      	ldrh	r3, [r3, #4]
 8001f1a:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001f1e:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001f22:	4618      	mov	r0, r3
 8001f24:	f000 f9c8 	bl	80022b8 <NormalizeRange>
		TIM3->CCR4 = motorPos.yawPos;
 8001f28:	4b3f      	ldr	r3, [pc, #252]	; (8002028 <decodeCmd+0x2a4>)
 8001f2a:	889a      	ldrh	r2, [r3, #4]
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <decodeCmd+0x2a8>)
 8001f2e:	641a      	str	r2, [r3, #64]	; 0x40
		return LEFT;
 8001f30:	2302      	movs	r3, #2
 8001f32:	e063      	b.n	8001ffc <decodeCmd+0x278>
	}
	// Right command
	if(strncmp(cmdString, "RH\n", length) == 0){
 8001f34:	683b      	ldr	r3, [r7, #0]
 8001f36:	461a      	mov	r2, r3
 8001f38:	4940      	ldr	r1, [pc, #256]	; (800203c <decodeCmd+0x2b8>)
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f003 fd68 	bl	8005a10 <strncmp>
 8001f40:	4603      	mov	r3, r0
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d117      	bne.n	8001f76 <decodeCmd+0x1f2>

//		if(!calibrationEn) motorPos.yawPos += DELTA_POS;
//		else motorPos.yawPos += CALDELTA_POS;
		motorPos.yawPos += deltaPos;
 8001f46:	4b38      	ldr	r3, [pc, #224]	; (8002028 <decodeCmd+0x2a4>)
 8001f48:	889a      	ldrh	r2, [r3, #4]
 8001f4a:	4b34      	ldr	r3, [pc, #208]	; (800201c <decodeCmd+0x298>)
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	b29b      	uxth	r3, r3
 8001f50:	4413      	add	r3, r2
 8001f52:	b29a      	uxth	r2, r3
 8001f54:	4b34      	ldr	r3, [pc, #208]	; (8002028 <decodeCmd+0x2a4>)
 8001f56:	809a      	strh	r2, [r3, #4]

		NormalizeRange(motorPos.yawPos, MAX_POS, MIN_POS);
 8001f58:	4b33      	ldr	r3, [pc, #204]	; (8002028 <decodeCmd+0x2a4>)
 8001f5a:	889b      	ldrh	r3, [r3, #4]
 8001f5c:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001f60:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001f64:	4618      	mov	r0, r3
 8001f66:	f000 f9a7 	bl	80022b8 <NormalizeRange>
		TIM3->CCR4 = motorPos.yawPos;
 8001f6a:	4b2f      	ldr	r3, [pc, #188]	; (8002028 <decodeCmd+0x2a4>)
 8001f6c:	889a      	ldrh	r2, [r3, #4]
 8001f6e:	4b2f      	ldr	r3, [pc, #188]	; (800202c <decodeCmd+0x2a8>)
 8001f70:	641a      	str	r2, [r3, #64]	; 0x40
		return RIGHT;
 8001f72:	2303      	movs	r3, #3
 8001f74:	e042      	b.n	8001ffc <decodeCmd+0x278>
	}

	// Rotate left command
	if(strncmp(cmdString, "RLF\n", length) == 0){
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	461a      	mov	r2, r3
 8001f7a:	4931      	ldr	r1, [pc, #196]	; (8002040 <decodeCmd+0x2bc>)
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f003 fd47 	bl	8005a10 <strncmp>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d117      	bne.n	8001fb8 <decodeCmd+0x234>

//		if(!calibrationEn) motorPos.rollPos += DELTA_POS;
//		else motorPos.rollPos += CALDELTA_POS;
		motorPos.rollPos += deltaPos;
 8001f88:	4b27      	ldr	r3, [pc, #156]	; (8002028 <decodeCmd+0x2a4>)
 8001f8a:	885a      	ldrh	r2, [r3, #2]
 8001f8c:	4b23      	ldr	r3, [pc, #140]	; (800201c <decodeCmd+0x298>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	b29b      	uxth	r3, r3
 8001f92:	4413      	add	r3, r2
 8001f94:	b29a      	uxth	r2, r3
 8001f96:	4b24      	ldr	r3, [pc, #144]	; (8002028 <decodeCmd+0x2a4>)
 8001f98:	805a      	strh	r2, [r3, #2]

		NormalizeRange(motorPos.rollPos, MAX_POS, MIN_POS);
 8001f9a:	4b23      	ldr	r3, [pc, #140]	; (8002028 <decodeCmd+0x2a4>)
 8001f9c:	885b      	ldrh	r3, [r3, #2]
 8001f9e:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001fa2:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f986 	bl	80022b8 <NormalizeRange>
		TIM3->CCR1 = motorPos.rollPos;
 8001fac:	4b1e      	ldr	r3, [pc, #120]	; (8002028 <decodeCmd+0x2a4>)
 8001fae:	885a      	ldrh	r2, [r3, #2]
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <decodeCmd+0x2a8>)
 8001fb2:	635a      	str	r2, [r3, #52]	; 0x34
		return ROTATE_LEFT;
 8001fb4:	2304      	movs	r3, #4
 8001fb6:	e021      	b.n	8001ffc <decodeCmd+0x278>
	}
	// Rotate right command
	if(strncmp(cmdString, "RRH\n", length) == 0){
 8001fb8:	683b      	ldr	r3, [r7, #0]
 8001fba:	461a      	mov	r2, r3
 8001fbc:	4921      	ldr	r1, [pc, #132]	; (8002044 <decodeCmd+0x2c0>)
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f003 fd26 	bl	8005a10 <strncmp>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d117      	bne.n	8001ffa <decodeCmd+0x276>

//		if(!calibrationEn) motorPos.rollPos -= DELTA_POS;
//		else motorPos.rollPos -= CALDELTA_POS;
		motorPos.rollPos -= deltaPos;
 8001fca:	4b17      	ldr	r3, [pc, #92]	; (8002028 <decodeCmd+0x2a4>)
 8001fcc:	885a      	ldrh	r2, [r3, #2]
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <decodeCmd+0x298>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	b29b      	uxth	r3, r3
 8001fd4:	1ad3      	subs	r3, r2, r3
 8001fd6:	b29a      	uxth	r2, r3
 8001fd8:	4b13      	ldr	r3, [pc, #76]	; (8002028 <decodeCmd+0x2a4>)
 8001fda:	805a      	strh	r2, [r3, #2]

		NormalizeRange(motorPos.rollPos, MAX_POS, MIN_POS);
 8001fdc:	4b12      	ldr	r3, [pc, #72]	; (8002028 <decodeCmd+0x2a4>)
 8001fde:	885b      	ldrh	r3, [r3, #2]
 8001fe0:	f640 427f 	movw	r2, #3199	; 0xc7f
 8001fe4:	f641 01ff 	movw	r1, #6399	; 0x18ff
 8001fe8:	4618      	mov	r0, r3
 8001fea:	f000 f965 	bl	80022b8 <NormalizeRange>
		TIM3->CCR1 = motorPos.rollPos;
 8001fee:	4b0e      	ldr	r3, [pc, #56]	; (8002028 <decodeCmd+0x2a4>)
 8001ff0:	885a      	ldrh	r2, [r3, #2]
 8001ff2:	4b0e      	ldr	r3, [pc, #56]	; (800202c <decodeCmd+0x2a8>)
 8001ff4:	635a      	str	r2, [r3, #52]	; 0x34
		return ROTATE_RIGHT;
 8001ff6:	2305      	movs	r3, #5
 8001ff8:	e000      	b.n	8001ffc <decodeCmd+0x278>
	}
	return NA;
 8001ffa:	230b      	movs	r3, #11
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000918 	.word	0x20000918
 8002008:	08006a04 	.word	0x08006a04
 800200c:	20000916 	.word	0x20000916
 8002010:	08006a0c 	.word	0x08006a0c
 8002014:	08006a14 	.word	0x08006a14
 8002018:	20000917 	.word	0x20000917
 800201c:	2000055c 	.word	0x2000055c
 8002020:	08006a1c 	.word	0x08006a1c
 8002024:	08006a24 	.word	0x08006a24
 8002028:	20000554 	.word	0x20000554
 800202c:	40000400 	.word	0x40000400
 8002030:	08006a28 	.word	0x08006a28
 8002034:	08006a2c 	.word	0x08006a2c
 8002038:	08006a30 	.word	0x08006a30
 800203c:	08006a34 	.word	0x08006a34
 8002040:	08006a38 	.word	0x08006a38
 8002044:	08006a40 	.word	0x08006a40

08002048 <applyControlLaw>:
 * arguments
 * @param x	Optical flow value in horizontal direction
 * @param y Optical flow value in vertical direction
 * @param rotation	Optical flow value which indicates the rotation
 */
void applyControlLaw(frameStruct * frame, ControlLawModeTypeDef mode){
 8002048:	b590      	push	{r4, r7, lr}
 800204a:	b089      	sub	sp, #36	; 0x24
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
 8002050:	460b      	mov	r3, r1
 8002052:	70fb      	strb	r3, [r7, #3]
	int x, y, rotation;
	int deltaPitch, deltaRoll, deltaYaw;

	if(!trackingEn) return;
 8002054:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <applyControlLaw+0x1c8>)
 8002056:	781b      	ldrb	r3, [r3, #0]
 8002058:	f083 0301 	eor.w	r3, r3, #1
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	f040 80d1 	bne.w	8002206 <applyControlLaw+0x1be>

	// Integrate values
	switch(mode){
 8002064:	78fb      	ldrb	r3, [r7, #3]
 8002066:	2b01      	cmp	r3, #1
 8002068:	d00e      	beq.n	8002088 <applyControlLaw+0x40>
 800206a:	2b02      	cmp	r3, #2
 800206c:	d017      	beq.n	800209e <applyControlLaw+0x56>
 800206e:	2b00      	cmp	r3, #0
 8002070:	d122      	bne.n	80020b8 <applyControlLaw+0x70>
	case LEFT_ONLY:
		x = frame->oFLeft.x;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	f8d3 3295 	ldr.w	r3, [r3, #661]	; 0x295
 8002078:	613b      	str	r3, [r7, #16]
		y = frame->oFLeft.y;
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	f8d3 3299 	ldr.w	r3, [r3, #665]	; 0x299
 8002080:	60fb      	str	r3, [r7, #12]
		rotation = 0;
 8002082:	2300      	movs	r3, #0
 8002084:	60bb      	str	r3, [r7, #8]
		break;
 8002086:	e017      	b.n	80020b8 <applyControlLaw+0x70>
	case RIGHT_ONLY:
		x = frame->oFRight.x;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8d3 328d 	ldr.w	r3, [r3, #653]	; 0x28d
 800208e:	613b      	str	r3, [r7, #16]
		y = frame->oFRight.y;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	f8d3 3291 	ldr.w	r3, [r3, #657]	; 0x291
 8002096:	60fb      	str	r3, [r7, #12]
		rotation = 0;
 8002098:	2300      	movs	r3, #0
 800209a:	60bb      	str	r3, [r7, #8]
		break;
 800209c:	e00c      	b.n	80020b8 <applyControlLaw+0x70>
	case ALL:
		x = frame->oFFused.x;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f8d3 329d 	ldr.w	r3, [r3, #669]	; 0x29d
 80020a4:	613b      	str	r3, [r7, #16]
		y = frame->oFFused.y;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	f8d3 32a1 	ldr.w	r3, [r3, #673]	; 0x2a1
 80020ac:	60fb      	str	r3, [r7, #12]
		rotation = frame->oFFused.theta;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f8d3 32a5 	ldr.w	r3, [r3, #677]	; 0x2a5
 80020b4:	60bb      	str	r3, [r7, #8]
		break;
 80020b6:	bf00      	nop
	}

	RemoveNoise(&x, &y, &rotation);
 80020b8:	f107 0208 	add.w	r2, r7, #8
 80020bc:	f107 010c 	add.w	r1, r7, #12
 80020c0:	f107 0310 	add.w	r3, r7, #16
 80020c4:	4618      	mov	r0, r3
 80020c6:	f000 f910 	bl	80022ea <RemoveNoise>

	xSum += x;
 80020ca:	4b52      	ldr	r3, [pc, #328]	; (8002214 <applyControlLaw+0x1cc>)
 80020cc:	681a      	ldr	r2, [r3, #0]
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	4413      	add	r3, r2
 80020d2:	4a50      	ldr	r2, [pc, #320]	; (8002214 <applyControlLaw+0x1cc>)
 80020d4:	6013      	str	r3, [r2, #0]
	ySum += y;
 80020d6:	4b50      	ldr	r3, [pc, #320]	; (8002218 <applyControlLaw+0x1d0>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	4413      	add	r3, r2
 80020de:	4a4e      	ldr	r2, [pc, #312]	; (8002218 <applyControlLaw+0x1d0>)
 80020e0:	6013      	str	r3, [r2, #0]
	rotationSum += rotation;
 80020e2:	4b4e      	ldr	r3, [pc, #312]	; (800221c <applyControlLaw+0x1d4>)
 80020e4:	681a      	ldr	r2, [r3, #0]
 80020e6:	68bb      	ldr	r3, [r7, #8]
 80020e8:	4413      	add	r3, r2
 80020ea:	4a4c      	ldr	r2, [pc, #304]	; (800221c <applyControlLaw+0x1d4>)
 80020ec:	6013      	str	r3, [r2, #0]

	// Integral windup
	if(abs(ySum) > PITCH_WINDUP) ySum = 0;
 80020ee:	4b4a      	ldr	r3, [pc, #296]	; (8002218 <applyControlLaw+0x1d0>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	bfb8      	it	lt
 80020f6:	425b      	neglt	r3, r3
 80020f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80020fc:	dd02      	ble.n	8002104 <applyControlLaw+0xbc>
 80020fe:	4b46      	ldr	r3, [pc, #280]	; (8002218 <applyControlLaw+0x1d0>)
 8002100:	2200      	movs	r2, #0
 8002102:	601a      	str	r2, [r3, #0]
	if(abs(rotationSum) > ROLL_WINDUP) rotationSum = 0;
 8002104:	4b45      	ldr	r3, [pc, #276]	; (800221c <applyControlLaw+0x1d4>)
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	2b00      	cmp	r3, #0
 800210a:	bfb8      	it	lt
 800210c:	425b      	neglt	r3, r3
 800210e:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002112:	dd02      	ble.n	800211a <applyControlLaw+0xd2>
 8002114:	4b41      	ldr	r3, [pc, #260]	; (800221c <applyControlLaw+0x1d4>)
 8002116:	2200      	movs	r2, #0
 8002118:	601a      	str	r2, [r3, #0]
	if(abs(xSum) > YAW_WINDUP) xSum = 0;
 800211a:	4b3e      	ldr	r3, [pc, #248]	; (8002214 <applyControlLaw+0x1cc>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	2b00      	cmp	r3, #0
 8002120:	bfb8      	it	lt
 8002122:	425b      	neglt	r3, r3
 8002124:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 8002128:	dd02      	ble.n	8002130 <applyControlLaw+0xe8>
 800212a:	4b3a      	ldr	r3, [pc, #232]	; (8002214 <applyControlLaw+0x1cc>)
 800212c:	2200      	movs	r2, #0
 800212e:	601a      	str	r2, [r3, #0]

	// PID implementation
	deltaYaw = (float)(x * YAW_P) + (float)(xSum * YAW_I) + (float)((x - xLast) * YAW_D);
 8002130:	693b      	ldr	r3, [r7, #16]
 8002132:	4618      	mov	r0, r3
 8002134:	f7fe f9ee 	bl	8000514 <__aeabi_i2d>
 8002138:	f04f 0200 	mov.w	r2, #0
 800213c:	4b38      	ldr	r3, [pc, #224]	; (8002220 <applyControlLaw+0x1d8>)
 800213e:	f7fe fa53 	bl	80005e8 <__aeabi_dmul>
 8002142:	4603      	mov	r3, r0
 8002144:	460c      	mov	r4, r1
 8002146:	4618      	mov	r0, r3
 8002148:	4621      	mov	r1, r4
 800214a:	f7fe fc5f 	bl	8000a0c <__aeabi_d2f>
 800214e:	ee07 0a10 	vmov	s14, r0
 8002152:	eddf 7a34 	vldr	s15, [pc, #208]	; 8002224 <applyControlLaw+0x1dc>
 8002156:	ee77 7a27 	vadd.f32	s15, s14, s15
 800215a:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002224 <applyControlLaw+0x1dc>
 800215e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002166:	ee17 3a90 	vmov	r3, s15
 800216a:	61fb      	str	r3, [r7, #28]
	deltaPitch = y * PITCH_P + ySum * PITCH_I + (y - yLast) * PITCH_D;
 800216c:	2300      	movs	r3, #0
 800216e:	61bb      	str	r3, [r7, #24]
	deltaRoll = rotation * ROLL_P + rotationSum *  ROLL_I +
 8002170:	2300      	movs	r3, #0
 8002172:	617b      	str	r3, [r7, #20]

	// Avoid small changes in computed values
//	if(abs(deltaYaw)>=DELTALIMIT) motorPos.yawPos +=deltaYaw;
//	if(abs(deltaPitch)>=DELTALIMIT) motorPos.pitchPos +=deltaPitch;
//	if(abs(deltaRoll)>=DELTALIMIT) motorPos.rollPos +=deltaRoll;
	motorPos.yawPos +=deltaYaw;
 8002174:	4b2c      	ldr	r3, [pc, #176]	; (8002228 <applyControlLaw+0x1e0>)
 8002176:	889a      	ldrh	r2, [r3, #4]
 8002178:	69fb      	ldr	r3, [r7, #28]
 800217a:	b29b      	uxth	r3, r3
 800217c:	4413      	add	r3, r2
 800217e:	b29a      	uxth	r2, r3
 8002180:	4b29      	ldr	r3, [pc, #164]	; (8002228 <applyControlLaw+0x1e0>)
 8002182:	809a      	strh	r2, [r3, #4]
	motorPos.pitchPos +=deltaPitch;
 8002184:	4b28      	ldr	r3, [pc, #160]	; (8002228 <applyControlLaw+0x1e0>)
 8002186:	881a      	ldrh	r2, [r3, #0]
 8002188:	69bb      	ldr	r3, [r7, #24]
 800218a:	b29b      	uxth	r3, r3
 800218c:	4413      	add	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b25      	ldr	r3, [pc, #148]	; (8002228 <applyControlLaw+0x1e0>)
 8002192:	801a      	strh	r2, [r3, #0]
	motorPos.rollPos +=deltaRoll;
 8002194:	4b24      	ldr	r3, [pc, #144]	; (8002228 <applyControlLaw+0x1e0>)
 8002196:	885a      	ldrh	r2, [r3, #2]
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	b29b      	uxth	r3, r3
 800219c:	4413      	add	r3, r2
 800219e:	b29a      	uxth	r2, r3
 80021a0:	4b21      	ldr	r3, [pc, #132]	; (8002228 <applyControlLaw+0x1e0>)
 80021a2:	805a      	strh	r2, [r3, #2]

	// Check the signals are in the proper range
	NormalizeRange(motorPos.pitchPos, MAX_POS, MIN_POS);
 80021a4:	4b20      	ldr	r3, [pc, #128]	; (8002228 <applyControlLaw+0x1e0>)
 80021a6:	881b      	ldrh	r3, [r3, #0]
 80021a8:	f640 427f 	movw	r2, #3199	; 0xc7f
 80021ac:	f641 01ff 	movw	r1, #6399	; 0x18ff
 80021b0:	4618      	mov	r0, r3
 80021b2:	f000 f881 	bl	80022b8 <NormalizeRange>
	NormalizeRange(motorPos.rollPos, MAX_POS, MIN_POS);
 80021b6:	4b1c      	ldr	r3, [pc, #112]	; (8002228 <applyControlLaw+0x1e0>)
 80021b8:	885b      	ldrh	r3, [r3, #2]
 80021ba:	f640 427f 	movw	r2, #3199	; 0xc7f
 80021be:	f641 01ff 	movw	r1, #6399	; 0x18ff
 80021c2:	4618      	mov	r0, r3
 80021c4:	f000 f878 	bl	80022b8 <NormalizeRange>
	NormalizeRange(motorPos.yawPos, MAX_POS, MIN_POS);
 80021c8:	4b17      	ldr	r3, [pc, #92]	; (8002228 <applyControlLaw+0x1e0>)
 80021ca:	889b      	ldrh	r3, [r3, #4]
 80021cc:	f640 427f 	movw	r2, #3199	; 0xc7f
 80021d0:	f641 01ff 	movw	r1, #6399	; 0x18ff
 80021d4:	4618      	mov	r0, r3
 80021d6:	f000 f86f 	bl	80022b8 <NormalizeRange>

	// RC control signals generation
	TIM3->CCR1 = motorPos.rollPos;
 80021da:	4b13      	ldr	r3, [pc, #76]	; (8002228 <applyControlLaw+0x1e0>)
 80021dc:	885a      	ldrh	r2, [r3, #2]
 80021de:	4b13      	ldr	r3, [pc, #76]	; (800222c <applyControlLaw+0x1e4>)
 80021e0:	635a      	str	r2, [r3, #52]	; 0x34
	TIM3->CCR2 = motorPos.pitchPos;
 80021e2:	4b11      	ldr	r3, [pc, #68]	; (8002228 <applyControlLaw+0x1e0>)
 80021e4:	881a      	ldrh	r2, [r3, #0]
 80021e6:	4b11      	ldr	r3, [pc, #68]	; (800222c <applyControlLaw+0x1e4>)
 80021e8:	639a      	str	r2, [r3, #56]	; 0x38
	TIM3->CCR4 = motorPos.yawPos;
 80021ea:	4b0f      	ldr	r3, [pc, #60]	; (8002228 <applyControlLaw+0x1e0>)
 80021ec:	889a      	ldrh	r2, [r3, #4]
 80021ee:	4b0f      	ldr	r3, [pc, #60]	; (800222c <applyControlLaw+0x1e4>)
 80021f0:	641a      	str	r2, [r3, #64]	; 0x40

	// Save values to differentiation
	xLast = x;
 80021f2:	693b      	ldr	r3, [r7, #16]
 80021f4:	4a0e      	ldr	r2, [pc, #56]	; (8002230 <applyControlLaw+0x1e8>)
 80021f6:	6013      	str	r3, [r2, #0]
	yLast = y;
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	4a0e      	ldr	r2, [pc, #56]	; (8002234 <applyControlLaw+0x1ec>)
 80021fc:	6013      	str	r3, [r2, #0]
	rotationLast = rotation;
 80021fe:	68bb      	ldr	r3, [r7, #8]
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <applyControlLaw+0x1f0>)
 8002202:	6013      	str	r3, [r2, #0]
 8002204:	e000      	b.n	8002208 <applyControlLaw+0x1c0>
	if(!trackingEn) return;
 8002206:	bf00      	nop
}
 8002208:	3724      	adds	r7, #36	; 0x24
 800220a:	46bd      	mov	sp, r7
 800220c:	bd90      	pop	{r4, r7, pc}
 800220e:	bf00      	nop
 8002210:	20000916 	.word	0x20000916
 8002214:	20000880 	.word	0x20000880
 8002218:	20000884 	.word	0x20000884
 800221c:	20000888 	.word	0x20000888
 8002220:	3fd00000 	.word	0x3fd00000
 8002224:	00000000 	.word	0x00000000
 8002228:	20000554 	.word	0x20000554
 800222c:	40000400 	.word	0x40000400
 8002230:	2000088c 	.word	0x2000088c
 8002234:	20000890 	.word	0x20000890
 8002238:	20000894 	.word	0x20000894

0800223c <IsTrackingEnable>:

/**
 * @brief	Check if tracking function is enable/disable
 * @return	True if the tracking function is enable, False if it is disable
 */
bool IsTrackingEnable(){
 800223c:	b480      	push	{r7}
 800223e:	af00      	add	r7, sp, #0
	return trackingEn;
 8002240:	4b03      	ldr	r3, [pc, #12]	; (8002250 <IsTrackingEnable+0x14>)
 8002242:	781b      	ldrb	r3, [r3, #0]
}
 8002244:	4618      	mov	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	20000916 	.word	0x20000916

08002254 <IsCalibrationModeEnable>:

/**
 * @brief	Check if calibration mode is enable/disable
 * @return	True if the calibration function is enable, False if it is disable
 */
bool IsCalibrationModeEnable(){
 8002254:	b480      	push	{r7}
 8002256:	af00      	add	r7, sp, #0
	return calibrationEn;
 8002258:	4b03      	ldr	r3, [pc, #12]	; (8002268 <IsCalibrationModeEnable+0x14>)
 800225a:	781b      	ldrb	r3, [r3, #0]
}
 800225c:	4618      	mov	r0, r3
 800225e:	46bd      	mov	sp, r7
 8002260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002264:	4770      	bx	lr
 8002266:	bf00      	nop
 8002268:	20000917 	.word	0x20000917

0800226c <enablePWM>:

/**
 * @brief	Enable RC (PWM) signal generation
 */
void enablePWM(){
 800226c:	b480      	push	{r7}
 800226e:	af00      	add	r7, sp, #0
	// Enable output compare OCx channels
	//SET_BIT(TIM3->CCER, TIM_CCER_CC4E);
	MODIFY_REG(TIM3->CCER, ~(TIM_CCER_CC1NE | TIM_CCER_CC2NE),
 8002270:	4b0f      	ldr	r3, [pc, #60]	; (80022b0 <enablePWM+0x44>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8002278:	4a0d      	ldr	r2, [pc, #52]	; (80022b0 <enablePWM+0x44>)
 800227a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800227e:	f043 0311 	orr.w	r3, r3, #17
 8002282:	6213      	str	r3, [r2, #32]
			(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC4E));

	// Enable master output
	MODIFY_REG(TIM3->BDTR, ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR), TIM_BDTR_MOE);
 8002284:	4b0a      	ldr	r3, [pc, #40]	; (80022b0 <enablePWM+0x44>)
 8002286:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002288:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800228c:	4a08      	ldr	r2, [pc, #32]	; (80022b0 <enablePWM+0x44>)
 800228e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002292:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable counter
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8002294:	4b06      	ldr	r3, [pc, #24]	; (80022b0 <enablePWM+0x44>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a05      	ldr	r2, [pc, #20]	; (80022b0 <enablePWM+0x44>)
 800229a:	f043 0301 	orr.w	r3, r3, #1
 800229e:	6013      	str	r3, [r2, #0]

	pwmEn = true;
 80022a0:	4b04      	ldr	r3, [pc, #16]	; (80022b4 <enablePWM+0x48>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	701a      	strb	r2, [r3, #0]
}
 80022a6:	bf00      	nop
 80022a8:	46bd      	mov	sp, r7
 80022aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ae:	4770      	bx	lr
 80022b0:	40000400 	.word	0x40000400
 80022b4:	20000918 	.word	0x20000918

080022b8 <NormalizeRange>:
 * @brief	Avoid out of range values in RC signals
 * @param value	Current value of signal
 * @param MaxRange	Maximum value for signal
 * @param MinRange	Minimum value for signal
 */
void NormalizeRange(int value, int MaxRange, int MinRange){
 80022b8:	b480      	push	{r7}
 80022ba:	b085      	sub	sp, #20
 80022bc:	af00      	add	r7, sp, #0
 80022be:	60f8      	str	r0, [r7, #12]
 80022c0:	60b9      	str	r1, [r7, #8]
 80022c2:	607a      	str	r2, [r7, #4]
	if(value > MaxRange){
 80022c4:	68fa      	ldr	r2, [r7, #12]
 80022c6:	68bb      	ldr	r3, [r7, #8]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	dd02      	ble.n	80022d2 <NormalizeRange+0x1a>
		value = MaxRange;
 80022cc:	68bb      	ldr	r3, [r7, #8]
 80022ce:	60fb      	str	r3, [r7, #12]
	}
	else if(value < MinRange){
		value = MinRange;
	}
}
 80022d0:	e005      	b.n	80022de <NormalizeRange+0x26>
	else if(value < MinRange){
 80022d2:	68fa      	ldr	r2, [r7, #12]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	da01      	bge.n	80022de <NormalizeRange+0x26>
		value = MinRange;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	60fb      	str	r3, [r7, #12]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr

080022ea <RemoveNoise>:
 * Remove signal noise in OF signal
 * @param y
 * @param y
 * @param rotation
 */
void RemoveNoise(int * x, int *y, int * rotation){
 80022ea:	b480      	push	{r7}
 80022ec:	b085      	sub	sp, #20
 80022ee:	af00      	add	r7, sp, #0
 80022f0:	60f8      	str	r0, [r7, #12]
 80022f2:	60b9      	str	r1, [r7, #8]
 80022f4:	607a      	str	r2, [r7, #4]
	if(abs(*x)<=DELTALIMIT) *x=0;
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	f113 0f1e 	cmn.w	r3, #30
 80022fe:	db06      	blt.n	800230e <RemoveNoise+0x24>
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	2b1e      	cmp	r3, #30
 8002306:	dc02      	bgt.n	800230e <RemoveNoise+0x24>
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2200      	movs	r2, #0
 800230c:	601a      	str	r2, [r3, #0]
	if(abs(*y)<=DELTALIMIT) *y=0;
 800230e:	68bb      	ldr	r3, [r7, #8]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f113 0f1e 	cmn.w	r3, #30
 8002316:	db06      	blt.n	8002326 <RemoveNoise+0x3c>
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2b1e      	cmp	r3, #30
 800231e:	dc02      	bgt.n	8002326 <RemoveNoise+0x3c>
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	2200      	movs	r2, #0
 8002324:	601a      	str	r2, [r3, #0]
	if(abs(*rotation)<=DELTALIMIT) *rotation=0;
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f113 0f1e 	cmn.w	r3, #30
 800232e:	db06      	blt.n	800233e <RemoveNoise+0x54>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	2b1e      	cmp	r3, #30
 8002336:	dc02      	bgt.n	800233e <RemoveNoise+0x54>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2200      	movs	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
}
 800233e:	bf00      	nop
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 800234c:	b580      	push	{r7, lr}
 800234e:	af00      	add	r7, sp, #0
	static char bufferIn[BUFFER_SIZE];
	static int i = 0;

	if(READ_BIT(USART2->ISR, USART_ISR_ORE)){
 8002350:	4b22      	ldr	r3, [pc, #136]	; (80023dc <USART2_IRQHandler+0x90>)
 8002352:	69db      	ldr	r3, [r3, #28]
 8002354:	f003 0308 	and.w	r3, r3, #8
 8002358:	2b00      	cmp	r3, #0
 800235a:	d00d      	beq.n	8002378 <USART2_IRQHandler+0x2c>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);
 800235c:	4b1f      	ldr	r3, [pc, #124]	; (80023dc <USART2_IRQHandler+0x90>)
 800235e:	6a1b      	ldr	r3, [r3, #32]
 8002360:	4a1e      	ldr	r2, [pc, #120]	; (80023dc <USART2_IRQHandler+0x90>)
 8002362:	f043 0308 	orr.w	r3, r3, #8
 8002366:	6213      	str	r3, [r2, #32]
		// Flush all data in USART RX
		SET_BIT(USART2->RQR, USART_RQR_RXFRQ);
 8002368:	4b1c      	ldr	r3, [pc, #112]	; (80023dc <USART2_IRQHandler+0x90>)
 800236a:	8b1b      	ldrh	r3, [r3, #24]
 800236c:	b29b      	uxth	r3, r3
 800236e:	4a1b      	ldr	r2, [pc, #108]	; (80023dc <USART2_IRQHandler+0x90>)
 8002370:	f043 0308 	orr.w	r3, r3, #8
 8002374:	b29b      	uxth	r3, r3
 8002376:	8313      	strh	r3, [r2, #24]
	}
	if(READ_BIT(USART2->ISR, USART_ISR_RXNE)){
 8002378:	4b18      	ldr	r3, [pc, #96]	; (80023dc <USART2_IRQHandler+0x90>)
 800237a:	69db      	ldr	r3, [r3, #28]
 800237c:	f003 0320 	and.w	r3, r3, #32
 8002380:	2b00      	cmp	r3, #0
 8002382:	d029      	beq.n	80023d8 <USART2_IRQHandler+0x8c>
		bufferIn[i] = READ_REG(USART2->RDR);
 8002384:	4b15      	ldr	r3, [pc, #84]	; (80023dc <USART2_IRQHandler+0x90>)
 8002386:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002388:	b29a      	uxth	r2, r3
 800238a:	4b15      	ldr	r3, [pc, #84]	; (80023e0 <USART2_IRQHandler+0x94>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	b2d1      	uxtb	r1, r2
 8002390:	4a14      	ldr	r2, [pc, #80]	; (80023e4 <USART2_IRQHandler+0x98>)
 8002392:	54d1      	strb	r1, [r2, r3]

		if(bufferIn[i] == TAIL_CHAR){
 8002394:	4b12      	ldr	r3, [pc, #72]	; (80023e0 <USART2_IRQHandler+0x94>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <USART2_IRQHandler+0x98>)
 800239a:	5cd3      	ldrb	r3, [r2, r3]
 800239c:	2b0a      	cmp	r3, #10
 800239e:	d10e      	bne.n	80023be <USART2_IRQHandler+0x72>
			i++;
 80023a0:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	3301      	adds	r3, #1
 80023a6:	4a0e      	ldr	r2, [pc, #56]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023a8:	6013      	str	r3, [r2, #0]
			decodeCmd(bufferIn, i);
 80023aa:	4b0d      	ldr	r3, [pc, #52]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4619      	mov	r1, r3
 80023b0:	480c      	ldr	r0, [pc, #48]	; (80023e4 <USART2_IRQHandler+0x98>)
 80023b2:	f7ff fce7 	bl	8001d84 <decodeCmd>
			i = 0;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	601a      	str	r2, [r3, #0]
		else{
			i++;
		}
	}

}
 80023bc:	e00c      	b.n	80023d8 <USART2_IRQHandler+0x8c>
		else if(i ==  BUFFER_SIZE){
 80023be:	4b08      	ldr	r3, [pc, #32]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	2b0a      	cmp	r3, #10
 80023c4:	d103      	bne.n	80023ce <USART2_IRQHandler+0x82>
			i = 0;
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023c8:	2200      	movs	r2, #0
 80023ca:	601a      	str	r2, [r3, #0]
}
 80023cc:	e004      	b.n	80023d8 <USART2_IRQHandler+0x8c>
			i++;
 80023ce:	4b04      	ldr	r3, [pc, #16]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	3301      	adds	r3, #1
 80023d4:	4a02      	ldr	r2, [pc, #8]	; (80023e0 <USART2_IRQHandler+0x94>)
 80023d6:	6013      	str	r3, [r2, #0]
}
 80023d8:	bf00      	nop
 80023da:	bd80      	pop	{r7, pc}
 80023dc:	40004400 	.word	0x40004400
 80023e0:	20000898 	.word	0x20000898
 80023e4:	2000089c 	.word	0x2000089c

080023e8 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b085      	sub	sp, #20
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80023f0:	4b08      	ldr	r3, [pc, #32]	; (8002414 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023f2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80023f4:	4907      	ldr	r1, [pc, #28]	; (8002414 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	4313      	orrs	r3, r2
 80023fa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80023fc:	4b05      	ldr	r3, [pc, #20]	; (8002414 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80023fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	4013      	ands	r3, r2
 8002404:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002406:	68fb      	ldr	r3, [r7, #12]
}
 8002408:	bf00      	nop
 800240a:	3714      	adds	r7, #20
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr
 8002414:	40021000 	.word	0x40021000

08002418 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8002418:	b480      	push	{r7}
 800241a:	b087      	sub	sp, #28
 800241c:	af00      	add	r7, sp, #0
 800241e:	6078      	str	r0, [r7, #4]
 8002420:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8002422:	4a17      	ldr	r2, [pc, #92]	; (8002480 <LL_SYSCFG_SetEXTISource+0x68>)
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	b2db      	uxtb	r3, r3
 8002428:	3302      	adds	r3, #2
 800242a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	43db      	mvns	r3, r3
 8002434:	ea02 0103 	and.w	r1, r2, r3
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	0c1b      	lsrs	r3, r3, #16
 800243c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243e:	693b      	ldr	r3, [r7, #16]
 8002440:	fa93 f3a3 	rbit	r3, r3
 8002444:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800244a:	697b      	ldr	r3, [r7, #20]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d101      	bne.n	8002454 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8002450:	2320      	movs	r3, #32
 8002452:	e003      	b.n	800245c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	fab3 f383 	clz	r3, r3
 800245a:	b2db      	uxtb	r3, r3
 800245c:	461a      	mov	r2, r3
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	fa03 f202 	lsl.w	r2, r3, r2
 8002464:	4806      	ldr	r0, [pc, #24]	; (8002480 <LL_SYSCFG_SetEXTISource+0x68>)
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2db      	uxtb	r3, r3
 800246a:	430a      	orrs	r2, r1
 800246c:	3302      	adds	r3, #2
 800246e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8002472:	bf00      	nop
 8002474:	371c      	adds	r7, #28
 8002476:	46bd      	mov	sp, r7
 8002478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800247c:	4770      	bx	lr
 800247e:	bf00      	nop
 8002480:	40010000 	.word	0x40010000

08002484 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8002484:	b480      	push	{r7}
 8002486:	b08b      	sub	sp, #44	; 0x2c
 8002488:	af00      	add	r7, sp, #0
 800248a:	60f8      	str	r0, [r7, #12]
 800248c:	60b9      	str	r1, [r7, #8]
 800248e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68bb      	ldr	r3, [r7, #8]
 8002496:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002498:	697b      	ldr	r3, [r7, #20]
 800249a:	fa93 f3a3 	rbit	r3, r3
 800249e:	613b      	str	r3, [r7, #16]
  return result;
 80024a0:	693b      	ldr	r3, [r7, #16]
 80024a2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80024a4:	69bb      	ldr	r3, [r7, #24]
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d101      	bne.n	80024ae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80024aa:	2320      	movs	r3, #32
 80024ac:	e003      	b.n	80024b6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80024ae:	69bb      	ldr	r3, [r7, #24]
 80024b0:	fab3 f383 	clz	r3, r3
 80024b4:	b2db      	uxtb	r3, r3
 80024b6:	005b      	lsls	r3, r3, #1
 80024b8:	2103      	movs	r1, #3
 80024ba:	fa01 f303 	lsl.w	r3, r1, r3
 80024be:	43db      	mvns	r3, r3
 80024c0:	401a      	ands	r2, r3
 80024c2:	68bb      	ldr	r3, [r7, #8]
 80024c4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024c6:	6a3b      	ldr	r3, [r7, #32]
 80024c8:	fa93 f3a3 	rbit	r3, r3
 80024cc:	61fb      	str	r3, [r7, #28]
  return result;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80024d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d4:	2b00      	cmp	r3, #0
 80024d6:	d101      	bne.n	80024dc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80024d8:	2320      	movs	r3, #32
 80024da:	e003      	b.n	80024e4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	fab3 f383 	clz	r3, r3
 80024e2:	b2db      	uxtb	r3, r3
 80024e4:	005b      	lsls	r3, r3, #1
 80024e6:	6879      	ldr	r1, [r7, #4]
 80024e8:	fa01 f303 	lsl.w	r3, r1, r3
 80024ec:	431a      	orrs	r2, r3
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	601a      	str	r2, [r3, #0]
}
 80024f2:	bf00      	nop
 80024f4:	372c      	adds	r7, #44	; 0x2c
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr

080024fe <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80024fe:	b480      	push	{r7}
 8002500:	b08b      	sub	sp, #44	; 0x2c
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	68da      	ldr	r2, [r3, #12]
 800250e:	68bb      	ldr	r3, [r7, #8]
 8002510:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	fa93 f3a3 	rbit	r3, r3
 8002518:	613b      	str	r3, [r7, #16]
  return result;
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800251e:	69bb      	ldr	r3, [r7, #24]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d101      	bne.n	8002528 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002524:	2320      	movs	r3, #32
 8002526:	e003      	b.n	8002530 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	fab3 f383 	clz	r3, r3
 800252e:	b2db      	uxtb	r3, r3
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	2103      	movs	r1, #3
 8002534:	fa01 f303 	lsl.w	r3, r1, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	401a      	ands	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002540:	6a3b      	ldr	r3, [r7, #32]
 8002542:	fa93 f3a3 	rbit	r3, r3
 8002546:	61fb      	str	r3, [r7, #28]
  return result;
 8002548:	69fb      	ldr	r3, [r7, #28]
 800254a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800254c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254e:	2b00      	cmp	r3, #0
 8002550:	d101      	bne.n	8002556 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002552:	2320      	movs	r3, #32
 8002554:	e003      	b.n	800255e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	fab3 f383 	clz	r3, r3
 800255c:	b2db      	uxtb	r3, r3
 800255e:	005b      	lsls	r3, r3, #1
 8002560:	6879      	ldr	r1, [r7, #4]
 8002562:	fa01 f303 	lsl.w	r3, r1, r3
 8002566:	431a      	orrs	r2, r3
 8002568:	68fb      	ldr	r3, [r7, #12]
 800256a:	60da      	str	r2, [r3, #12]
}
 800256c:	bf00      	nop
 800256e:	372c      	adds	r7, #44	; 0x2c
 8002570:	46bd      	mov	sp, r7
 8002572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002576:	4770      	bx	lr

08002578 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
 8002580:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	683a      	ldr	r2, [r7, #0]
 8002586:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002588:	bf00      	nop
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr

08002594 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800259a:	f107 031c 	add.w	r3, r7, #28
 800259e:	2200      	movs	r2, #0
 80025a0:	601a      	str	r2, [r3, #0]
 80025a2:	605a      	str	r2, [r3, #4]
 80025a4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	2200      	movs	r2, #0
 80025aa:	601a      	str	r2, [r3, #0]
 80025ac:	605a      	str	r2, [r3, #4]
 80025ae:	609a      	str	r2, [r3, #8]
 80025b0:	60da      	str	r2, [r3, #12]
 80025b2:	611a      	str	r2, [r3, #16]
 80025b4:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80025b6:	2004      	movs	r0, #4
 80025b8:	f7ff ff16 	bl	80023e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80025bc:	2080      	movs	r0, #128	; 0x80
 80025be:	f7ff ff13 	bl	80023e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f7ff ff10 	bl	80023e8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80025c8:	2002      	movs	r0, #2
 80025ca:	f7ff ff0d 	bl	80023e8 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80025ce:	2120      	movs	r1, #32
 80025d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80025d4:	f7ff ffd0 	bl	8002578 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80025d8:	491b      	ldr	r1, [pc, #108]	; (8002648 <MX_GPIO_Init+0xb4>)
 80025da:	2002      	movs	r0, #2
 80025dc:	f7ff ff1c 	bl	8002418 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80025e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025e4:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80025e6:	2300      	movs	r3, #0
 80025e8:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80025ea:	2301      	movs	r3, #1
 80025ec:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80025f0:	2300      	movs	r3, #0
 80025f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80025f6:	2302      	movs	r3, #2
 80025f8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80025fc:	f107 031c 	add.w	r3, r7, #28
 8002600:	4618      	mov	r0, r3
 8002602:	f001 fd0b 	bl	800401c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8002606:	2200      	movs	r2, #0
 8002608:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800260c:	480f      	ldr	r0, [pc, #60]	; (800264c <MX_GPIO_Init+0xb8>)
 800260e:	f7ff ff76 	bl	80024fe <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8002612:	2200      	movs	r2, #0
 8002614:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002618:	480c      	ldr	r0, [pc, #48]	; (800264c <MX_GPIO_Init+0xb8>)
 800261a:	f7ff ff33 	bl	8002484 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800261e:	2320      	movs	r3, #32
 8002620:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8002622:	2301      	movs	r3, #1
 8002624:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002626:	2300      	movs	r3, #0
 8002628:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800262a:	2300      	movs	r3, #0
 800262c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800262e:	2300      	movs	r3, #0
 8002630:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8002632:	1d3b      	adds	r3, r7, #4
 8002634:	4619      	mov	r1, r3
 8002636:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800263a:	f001 ff26 	bl	800448a <LL_GPIO_Init>

}
 800263e:	bf00      	nop
 8002640:	3728      	adds	r7, #40	; 0x28
 8002642:	46bd      	mov	sp, r7
 8002644:	bd80      	pop	{r7, pc}
 8002646:	bf00      	nop
 8002648:	00f00003 	.word	0x00f00003
 800264c:	48000800 	.word	0x48000800

08002650 <__NVIC_SetPriorityGrouping>:
{
 8002650:	b480      	push	{r7}
 8002652:	b085      	sub	sp, #20
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f003 0307 	and.w	r3, r3, #7
 800265e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002660:	4b0c      	ldr	r3, [pc, #48]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002662:	68db      	ldr	r3, [r3, #12]
 8002664:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002666:	68ba      	ldr	r2, [r7, #8]
 8002668:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800266c:	4013      	ands	r3, r2
 800266e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002678:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800267c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002680:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002682:	4a04      	ldr	r2, [pc, #16]	; (8002694 <__NVIC_SetPriorityGrouping+0x44>)
 8002684:	68bb      	ldr	r3, [r7, #8]
 8002686:	60d3      	str	r3, [r2, #12]
}
 8002688:	bf00      	nop
 800268a:	3714      	adds	r7, #20
 800268c:	46bd      	mov	sp, r7
 800268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002692:	4770      	bx	lr
 8002694:	e000ed00 	.word	0xe000ed00

08002698 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8002698:	b480      	push	{r7}
 800269a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800269c:	4b05      	ldr	r3, [pc, #20]	; (80026b4 <LL_RCC_HSI_Enable+0x1c>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4a04      	ldr	r2, [pc, #16]	; (80026b4 <LL_RCC_HSI_Enable+0x1c>)
 80026a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a6:	6013      	str	r3, [r2, #0]
}
 80026a8:	bf00      	nop
 80026aa:	46bd      	mov	sp, r7
 80026ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b0:	4770      	bx	lr
 80026b2:	bf00      	nop
 80026b4:	40021000 	.word	0x40021000

080026b8 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80026bc:	4b07      	ldr	r3, [pc, #28]	; (80026dc <LL_RCC_HSI_IsReady+0x24>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026c8:	d101      	bne.n	80026ce <LL_RCC_HSI_IsReady+0x16>
 80026ca:	2301      	movs	r3, #1
 80026cc:	e000      	b.n	80026d0 <LL_RCC_HSI_IsReady+0x18>
 80026ce:	2300      	movs	r3, #0
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	46bd      	mov	sp, r7
 80026d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d8:	4770      	bx	lr
 80026da:	bf00      	nop
 80026dc:	40021000 	.word	0x40021000

080026e0 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80026e0:	b480      	push	{r7}
 80026e2:	b083      	sub	sp, #12
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80026e8:	4b07      	ldr	r3, [pc, #28]	; (8002708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	061b      	lsls	r3, r3, #24
 80026f4:	4904      	ldr	r1, [pc, #16]	; (8002708 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80026f6:	4313      	orrs	r3, r2
 80026f8:	604b      	str	r3, [r1, #4]
}
 80026fa:	bf00      	nop
 80026fc:	370c      	adds	r7, #12
 80026fe:	46bd      	mov	sp, r7
 8002700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002704:	4770      	bx	lr
 8002706:	bf00      	nop
 8002708:	40021000 	.word	0x40021000

0800270c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8002714:	4b06      	ldr	r3, [pc, #24]	; (8002730 <LL_RCC_SetSysClkSource+0x24>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f023 0203 	bic.w	r2, r3, #3
 800271c:	4904      	ldr	r1, [pc, #16]	; (8002730 <LL_RCC_SetSysClkSource+0x24>)
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4313      	orrs	r3, r2
 8002722:	608b      	str	r3, [r1, #8]
}
 8002724:	bf00      	nop
 8002726:	370c      	adds	r7, #12
 8002728:	46bd      	mov	sp, r7
 800272a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800272e:	4770      	bx	lr
 8002730:	40021000 	.word	0x40021000

08002734 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8002738:	4b04      	ldr	r3, [pc, #16]	; (800274c <LL_RCC_GetSysClkSource+0x18>)
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f003 030c 	and.w	r3, r3, #12
}
 8002740:	4618      	mov	r0, r3
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40021000 	.word	0x40021000

08002750 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8002750:	b480      	push	{r7}
 8002752:	b083      	sub	sp, #12
 8002754:	af00      	add	r7, sp, #0
 8002756:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8002758:	4b06      	ldr	r3, [pc, #24]	; (8002774 <LL_RCC_SetAHBPrescaler+0x24>)
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002760:	4904      	ldr	r1, [pc, #16]	; (8002774 <LL_RCC_SetAHBPrescaler+0x24>)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	4313      	orrs	r3, r2
 8002766:	608b      	str	r3, [r1, #8]
}
 8002768:	bf00      	nop
 800276a:	370c      	adds	r7, #12
 800276c:	46bd      	mov	sp, r7
 800276e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002772:	4770      	bx	lr
 8002774:	40021000 	.word	0x40021000

08002778 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8002780:	4b06      	ldr	r3, [pc, #24]	; (800279c <LL_RCC_SetAPB1Prescaler+0x24>)
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002788:	4904      	ldr	r1, [pc, #16]	; (800279c <LL_RCC_SetAPB1Prescaler+0x24>)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	4313      	orrs	r3, r2
 800278e:	608b      	str	r3, [r1, #8]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr
 800279c:	40021000 	.word	0x40021000

080027a0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b083      	sub	sp, #12
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 80027a8:	4b06      	ldr	r3, [pc, #24]	; (80027c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80027aa:	689b      	ldr	r3, [r3, #8]
 80027ac:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80027b0:	4904      	ldr	r1, [pc, #16]	; (80027c4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	608b      	str	r3, [r1, #8]
}
 80027b8:	bf00      	nop
 80027ba:	370c      	adds	r7, #12
 80027bc:	46bd      	mov	sp, r7
 80027be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c2:	4770      	bx	lr
 80027c4:	40021000 	.word	0x40021000

080027c8 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 80027d0:	4b09      	ldr	r3, [pc, #36]	; (80027f8 <LL_RCC_SetUSARTClockSource+0x30>)
 80027d2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	0c1b      	lsrs	r3, r3, #16
 80027da:	43db      	mvns	r3, r3
 80027dc:	401a      	ands	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	4905      	ldr	r1, [pc, #20]	; (80027f8 <LL_RCC_SetUSARTClockSource+0x30>)
 80027e4:	4313      	orrs	r3, r2
 80027e6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80027ea:	bf00      	nop
 80027ec:	370c      	adds	r7, #12
 80027ee:	46bd      	mov	sp, r7
 80027f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f4:	4770      	bx	lr
 80027f6:	bf00      	nop
 80027f8:	40021000 	.word	0x40021000

080027fc <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8002800:	4b05      	ldr	r3, [pc, #20]	; (8002818 <LL_RCC_PLL_Enable+0x1c>)
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	4a04      	ldr	r2, [pc, #16]	; (8002818 <LL_RCC_PLL_Enable+0x1c>)
 8002806:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800280a:	6013      	str	r3, [r2, #0]
}
 800280c:	bf00      	nop
 800280e:	46bd      	mov	sp, r7
 8002810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002814:	4770      	bx	lr
 8002816:	bf00      	nop
 8002818:	40021000 	.word	0x40021000

0800281c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8002820:	4b07      	ldr	r3, [pc, #28]	; (8002840 <LL_RCC_PLL_IsReady+0x24>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002828:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800282c:	d101      	bne.n	8002832 <LL_RCC_PLL_IsReady+0x16>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <LL_RCC_PLL_IsReady+0x18>
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	40021000 	.word	0x40021000

08002844 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8002844:	b480      	push	{r7}
 8002846:	b085      	sub	sp, #20
 8002848:	af00      	add	r7, sp, #0
 800284a:	60f8      	str	r0, [r7, #12]
 800284c:	60b9      	str	r1, [r7, #8]
 800284e:	607a      	str	r2, [r7, #4]
 8002850:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8002852:	4b0a      	ldr	r3, [pc, #40]	; (800287c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8002854:	68da      	ldr	r2, [r3, #12]
 8002856:	4b0a      	ldr	r3, [pc, #40]	; (8002880 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8002858:	4013      	ands	r3, r2
 800285a:	68f9      	ldr	r1, [r7, #12]
 800285c:	68ba      	ldr	r2, [r7, #8]
 800285e:	4311      	orrs	r1, r2
 8002860:	687a      	ldr	r2, [r7, #4]
 8002862:	0212      	lsls	r2, r2, #8
 8002864:	4311      	orrs	r1, r2
 8002866:	683a      	ldr	r2, [r7, #0]
 8002868:	430a      	orrs	r2, r1
 800286a:	4904      	ldr	r1, [pc, #16]	; (800287c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800286c:	4313      	orrs	r3, r2
 800286e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8002870:	bf00      	nop
 8002872:	3714      	adds	r7, #20
 8002874:	46bd      	mov	sp, r7
 8002876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287a:	4770      	bx	lr
 800287c:	40021000 	.word	0x40021000
 8002880:	f9ff808c 	.word	0xf9ff808c

08002884 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8002884:	b480      	push	{r7}
 8002886:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800288a:	68db      	ldr	r3, [r3, #12]
 800288c:	4a04      	ldr	r2, [pc, #16]	; (80028a0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800288e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002892:	60d3      	str	r3, [r2, #12]
}
 8002894:	bf00      	nop
 8002896:	46bd      	mov	sp, r7
 8002898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289c:	4770      	bx	lr
 800289e:	bf00      	nop
 80028a0:	40021000 	.word	0x40021000

080028a4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80028a4:	b480      	push	{r7}
 80028a6:	b085      	sub	sp, #20
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80028ac:	4b08      	ldr	r3, [pc, #32]	; (80028d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028b0:	4907      	ldr	r1, [pc, #28]	; (80028d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	4313      	orrs	r3, r2
 80028b6:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80028b8:	4b05      	ldr	r3, [pc, #20]	; (80028d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80028ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	4013      	ands	r3, r2
 80028c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028c2:	68fb      	ldr	r3, [r7, #12]
}
 80028c4:	bf00      	nop
 80028c6:	3714      	adds	r7, #20
 80028c8:	46bd      	mov	sp, r7
 80028ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ce:	4770      	bx	lr
 80028d0:	40021000 	.word	0x40021000

080028d4 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 80028d4:	b480      	push	{r7}
 80028d6:	b085      	sub	sp, #20
 80028d8:	af00      	add	r7, sp, #0
 80028da:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80028dc:	4b08      	ldr	r3, [pc, #32]	; (8002900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028e0:	4907      	ldr	r1, [pc, #28]	; (8002900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4313      	orrs	r3, r2
 80028e6:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80028e8:	4b05      	ldr	r3, [pc, #20]	; (8002900 <LL_APB2_GRP1_EnableClock+0x2c>)
 80028ea:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	4013      	ands	r3, r2
 80028f0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80028f2:	68fb      	ldr	r3, [r7, #12]
}
 80028f4:	bf00      	nop
 80028f6:	3714      	adds	r7, #20
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr
 8002900:	40021000 	.word	0x40021000

08002904 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8002904:	b480      	push	{r7}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800290c:	4b06      	ldr	r3, [pc, #24]	; (8002928 <LL_FLASH_SetLatency+0x24>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f023 0207 	bic.w	r2, r3, #7
 8002914:	4904      	ldr	r1, [pc, #16]	; (8002928 <LL_FLASH_SetLatency+0x24>)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
}
 800291c:	bf00      	nop
 800291e:	370c      	adds	r7, #12
 8002920:	46bd      	mov	sp, r7
 8002922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002926:	4770      	bx	lr
 8002928:	40022000 	.word	0x40022000

0800292c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8002930:	4b04      	ldr	r3, [pc, #16]	; (8002944 <LL_FLASH_GetLatency+0x18>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0307 	and.w	r3, r3, #7
}
 8002938:	4618      	mov	r0, r3
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	40022000 	.word	0x40022000

08002948 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8002950:	4b06      	ldr	r3, [pc, #24]	; (800296c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8002958:	4904      	ldr	r1, [pc, #16]	; (800296c <LL_PWR_SetRegulVoltageScaling+0x24>)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	4313      	orrs	r3, r2
 800295e:	600b      	str	r3, [r1, #0]
}
 8002960:	bf00      	nop
 8002962:	370c      	adds	r7, #12
 8002964:	46bd      	mov	sp, r7
 8002966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296a:	4770      	bx	lr
 800296c:	40007000 	.word	0x40007000

08002970 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8002974:	2001      	movs	r0, #1
 8002976:	f7ff ffad 	bl	80028d4 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800297a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800297e:	f7ff ff91 	bl	80028a4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002982:	2003      	movs	r0, #3
 8002984:	f7ff fe64 	bl	8002650 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002988:	f000 f818 	bl	80029bc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800298c:	f7ff fe02 	bl	8002594 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002990:	f001 f89c 	bl	8003acc <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8002994:	f000 fb30 	bl	8002ff8 <MX_SPI2_Init>
  MX_TIM1_Init();
 8002998:	f000 fe7e 	bl	8003698 <MX_TIM1_Init>
  MX_SPI3_Init();
 800299c:	f000 fb9a 	bl	80030d4 <MX_SPI3_Init>
  MX_TIM3_Init();
 80029a0:	f000 feb0 	bl	8003704 <MX_TIM3_Init>
  MX_TIM4_Init();
 80029a4:	f000 ff6a 	bl	800387c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 80029a8:	f001 f906 	bl	8003bb8 <startupPrint>

  gimbalControlInit();
 80029ac:	f7ff f9d4 	bl	8001d58 <gimbalControlInit>

  eyes_init();
 80029b0:	f7fe fcf6 	bl	80013a0 <eyes_init>
  eyes_start();
 80029b4:	f7fe fd18 	bl	80013e8 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80029b8:	e7fe      	b.n	80029b8 <main+0x48>
	...

080029bc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 80029c0:	2003      	movs	r0, #3
 80029c2:	f7ff ff9f 	bl	8002904 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 80029c6:	bf00      	nop
 80029c8:	f7ff ffb0 	bl	800292c <LL_FLASH_GetLatency>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b03      	cmp	r3, #3
 80029d0:	d1fa      	bne.n	80029c8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 80029d2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80029d6:	f7ff ffb7 	bl	8002948 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 80029da:	f7ff fe5d 	bl	8002698 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 80029de:	bf00      	nop
 80029e0:	f7ff fe6a 	bl	80026b8 <LL_RCC_HSI_IsReady>
 80029e4:	4603      	mov	r3, r0
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d1fa      	bne.n	80029e0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80029ea:	2010      	movs	r0, #16
 80029ec:	f7ff fe78 	bl	80026e0 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80029f0:	2300      	movs	r3, #0
 80029f2:	2208      	movs	r2, #8
 80029f4:	2100      	movs	r1, #0
 80029f6:	2002      	movs	r0, #2
 80029f8:	f7ff ff24 	bl	8002844 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80029fc:	f7ff ff42 	bl	8002884 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8002a00:	f7ff fefc 	bl	80027fc <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8002a04:	bf00      	nop
 8002a06:	f7ff ff09 	bl	800281c <LL_RCC_PLL_IsReady>
 8002a0a:	4603      	mov	r3, r0
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d1fa      	bne.n	8002a06 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8002a10:	2003      	movs	r0, #3
 8002a12:	f7ff fe7b 	bl	800270c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8002a16:	bf00      	nop
 8002a18:	f7ff fe8c 	bl	8002734 <LL_RCC_GetSysClkSource>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	2b0c      	cmp	r3, #12
 8002a20:	d1fa      	bne.n	8002a18 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8002a22:	2000      	movs	r0, #0
 8002a24:	f7ff fe94 	bl	8002750 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8002a28:	2000      	movs	r0, #0
 8002a2a:	f7ff fea5 	bl	8002778 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8002a2e:	2000      	movs	r0, #0
 8002a30:	f7ff feb6 	bl	80027a0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8002a34:	4805      	ldr	r0, [pc, #20]	; (8002a4c <SystemClock_Config+0x90>)
 8002a36:	f002 fef9 	bl	800582c <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8002a3a:	4804      	ldr	r0, [pc, #16]	; (8002a4c <SystemClock_Config+0x90>)
 8002a3c:	f002 ff2a 	bl	8005894 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8002a40:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8002a44:	f7ff fec0 	bl	80027c8 <LL_RCC_SetUSARTClockSource>
}
 8002a48:	bf00      	nop
 8002a4a:	bd80      	pop	{r7, pc}
 8002a4c:	03d09000 	.word	0x03d09000

08002a50 <OF_ResetCoefficients>:
static int16_t frameIdx;

/**
 * @brief Reset the coefficient values and the frame's pixel index to zero
 */
void OF_ResetCoefficients(){
 8002a50:	b490      	push	{r4, r7}
 8002a52:	af00      	add	r7, sp, #0
	A[0] = B[0] = C[0] = D[0] = E[0] = 0;
 8002a54:	4a22      	ldr	r2, [pc, #136]	; (8002ae0 <OF_ResetCoefficients+0x90>)
 8002a56:	f04f 0300 	mov.w	r3, #0
 8002a5a:	f04f 0400 	mov.w	r4, #0
 8002a5e:	e9c2 3400 	strd	r3, r4, [r2]
 8002a62:	4b1f      	ldr	r3, [pc, #124]	; (8002ae0 <OF_ResetCoefficients+0x90>)
 8002a64:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a68:	4a1e      	ldr	r2, [pc, #120]	; (8002ae4 <OF_ResetCoefficients+0x94>)
 8002a6a:	e9c2 3400 	strd	r3, r4, [r2]
 8002a6e:	4b1d      	ldr	r3, [pc, #116]	; (8002ae4 <OF_ResetCoefficients+0x94>)
 8002a70:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a74:	4a1c      	ldr	r2, [pc, #112]	; (8002ae8 <OF_ResetCoefficients+0x98>)
 8002a76:	e9c2 3400 	strd	r3, r4, [r2]
 8002a7a:	4b1b      	ldr	r3, [pc, #108]	; (8002ae8 <OF_ResetCoefficients+0x98>)
 8002a7c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a80:	4a1a      	ldr	r2, [pc, #104]	; (8002aec <OF_ResetCoefficients+0x9c>)
 8002a82:	e9c2 3400 	strd	r3, r4, [r2]
 8002a86:	4b19      	ldr	r3, [pc, #100]	; (8002aec <OF_ResetCoefficients+0x9c>)
 8002a88:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002a8c:	4a18      	ldr	r2, [pc, #96]	; (8002af0 <OF_ResetCoefficients+0xa0>)
 8002a8e:	e9c2 3400 	strd	r3, r4, [r2]
	A[1] = B[1] = C[1] = D[1] = E[1] = 0;
 8002a92:	4a13      	ldr	r2, [pc, #76]	; (8002ae0 <OF_ResetCoefficients+0x90>)
 8002a94:	f04f 0300 	mov.w	r3, #0
 8002a98:	f04f 0400 	mov.w	r4, #0
 8002a9c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002aa0:	4b0f      	ldr	r3, [pc, #60]	; (8002ae0 <OF_ResetCoefficients+0x90>)
 8002aa2:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002aa6:	4a0f      	ldr	r2, [pc, #60]	; (8002ae4 <OF_ResetCoefficients+0x94>)
 8002aa8:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002aac:	4b0d      	ldr	r3, [pc, #52]	; (8002ae4 <OF_ResetCoefficients+0x94>)
 8002aae:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002ab2:	4a0d      	ldr	r2, [pc, #52]	; (8002ae8 <OF_ResetCoefficients+0x98>)
 8002ab4:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002ab8:	4b0b      	ldr	r3, [pc, #44]	; (8002ae8 <OF_ResetCoefficients+0x98>)
 8002aba:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002abe:	4a0b      	ldr	r2, [pc, #44]	; (8002aec <OF_ResetCoefficients+0x9c>)
 8002ac0:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8002ac4:	4b09      	ldr	r3, [pc, #36]	; (8002aec <OF_ResetCoefficients+0x9c>)
 8002ac6:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8002aca:	4a09      	ldr	r2, [pc, #36]	; (8002af0 <OF_ResetCoefficients+0xa0>)
 8002acc:	e9c2 3402 	strd	r3, r4, [r2, #8]
	frameIdx = 0;
 8002ad0:	4b08      	ldr	r3, [pc, #32]	; (8002af4 <OF_ResetCoefficients+0xa4>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	801a      	strh	r2, [r3, #0]
}
 8002ad6:	bf00      	nop
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	bc90      	pop	{r4, r7}
 8002adc:	4770      	bx	lr
 8002ade:	bf00      	nop
 8002ae0:	200008e8 	.word	0x200008e8
 8002ae4:	200008d8 	.word	0x200008d8
 8002ae8:	200008c8 	.word	0x200008c8
 8002aec:	200008b8 	.word	0x200008b8
 8002af0:	200008a8 	.word	0x200008a8
 8002af4:	20000904 	.word	0x20000904

08002af8 <OF_ComputeCoefficients>:
 * @param dev	The device where the frames from
 * @param currentFrame	The current frame to process the optical flow
 * @param lastFrame		The reference frame to process the optical flow
 * @param idx			The frame's pixel index which is going to be processed
 */
void OF_ComputeCoefficients(Device dev, uint8_t currentFrame[], uint8_t lastFrame[], int32_t idx){
 8002af8:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8002afc:	b085      	sub	sp, #20
 8002afe:	af00      	add	r7, sp, #0
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
 8002b06:	4603      	mov	r3, r0
 8002b08:	73fb      	strb	r3, [r7, #15]

	if(fSelect[idx]){
 8002b0a:	4a76      	ldr	r2, [pc, #472]	; (8002ce4 <OF_ComputeCoefficients+0x1ec>)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	4413      	add	r3, r2
 8002b10:	781b      	ldrb	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 80e0 	beq.w	8002cd8 <OF_ComputeCoefficients+0x1e0>
		deltaX = (lastFrame[f2[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f1[frameIdx]] & ADNS2610_PIXEL_DATA);
 8002b18:	4b73      	ldr	r3, [pc, #460]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002b1a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b1e:	461a      	mov	r2, r3
 8002b20:	4b72      	ldr	r3, [pc, #456]	; (8002cec <OF_ComputeCoefficients+0x1f4>)
 8002b22:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b26:	461a      	mov	r2, r3
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	4413      	add	r3, r2
 8002b2c:	781b      	ldrb	r3, [r3, #0]
 8002b2e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b32:	4b6d      	ldr	r3, [pc, #436]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002b34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4b6d      	ldr	r3, [pc, #436]	; (8002cf0 <OF_ComputeCoefficients+0x1f8>)
 8002b3c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002b40:	4619      	mov	r1, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	440b      	add	r3, r1
 8002b46:	781b      	ldrb	r3, [r3, #0]
 8002b48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	461a      	mov	r2, r3
 8002b50:	4b68      	ldr	r3, [pc, #416]	; (8002cf4 <OF_ComputeCoefficients+0x1fc>)
 8002b52:	601a      	str	r2, [r3, #0]
		deltaY = (lastFrame[f4[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f3[frameIdx]] & ADNS2610_PIXEL_DATA);
 8002b54:	4b64      	ldr	r3, [pc, #400]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002b56:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b5a:	461a      	mov	r2, r3
 8002b5c:	4b66      	ldr	r3, [pc, #408]	; (8002cf8 <OF_ComputeCoefficients+0x200>)
 8002b5e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b62:	461a      	mov	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4413      	add	r3, r2
 8002b68:	781b      	ldrb	r3, [r3, #0]
 8002b6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002b6e:	4b5e      	ldr	r3, [pc, #376]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002b70:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b74:	4619      	mov	r1, r3
 8002b76:	4b61      	ldr	r3, [pc, #388]	; (8002cfc <OF_ComputeCoefficients+0x204>)
 8002b78:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002b7c:	4619      	mov	r1, r3
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	440b      	add	r3, r1
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b88:	1ad3      	subs	r3, r2, r3
 8002b8a:	461a      	mov	r2, r3
 8002b8c:	4b5c      	ldr	r3, [pc, #368]	; (8002d00 <OF_ComputeCoefficients+0x208>)
 8002b8e:	601a      	str	r2, [r3, #0]
		deltaT = (currentFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA);
 8002b90:	4b55      	ldr	r3, [pc, #340]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002b92:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002b96:	461a      	mov	r2, r3
 8002b98:	4b5a      	ldr	r3, [pc, #360]	; (8002d04 <OF_ComputeCoefficients+0x20c>)
 8002b9a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8002b9e:	461a      	mov	r2, r3
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	781b      	ldrb	r3, [r3, #0]
 8002ba6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002baa:	4b4f      	ldr	r3, [pc, #316]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002bac:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002bb0:	4619      	mov	r1, r3
 8002bb2:	4b54      	ldr	r3, [pc, #336]	; (8002d04 <OF_ComputeCoefficients+0x20c>)
 8002bb4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8002bb8:	4619      	mov	r1, r3
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	440b      	add	r3, r1
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	461a      	mov	r2, r3
 8002bc8:	4b4f      	ldr	r3, [pc, #316]	; (8002d08 <OF_ComputeCoefficients+0x210>)
 8002bca:	601a      	str	r2, [r3, #0]

		A[dev] += deltaX * deltaX;
 8002bcc:	7bfb      	ldrb	r3, [r7, #15]
 8002bce:	4a4f      	ldr	r2, [pc, #316]	; (8002d0c <OF_ComputeCoefficients+0x214>)
 8002bd0:	00db      	lsls	r3, r3, #3
 8002bd2:	4413      	add	r3, r2
 8002bd4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002bd8:	4b46      	ldr	r3, [pc, #280]	; (8002cf4 <OF_ComputeCoefficients+0x1fc>)
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	4845      	ldr	r0, [pc, #276]	; (8002cf4 <OF_ComputeCoefficients+0x1fc>)
 8002bde:	6800      	ldr	r0, [r0, #0]
 8002be0:	fb00 f303 	mul.w	r3, r0, r3
 8002be4:	469b      	mov	fp, r3
 8002be6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002bea:	7bf8      	ldrb	r0, [r7, #15]
 8002bec:	eb1b 0301 	adds.w	r3, fp, r1
 8002bf0:	eb4c 0402 	adc.w	r4, ip, r2
 8002bf4:	4945      	ldr	r1, [pc, #276]	; (8002d0c <OF_ComputeCoefficients+0x214>)
 8002bf6:	00c2      	lsls	r2, r0, #3
 8002bf8:	440a      	add	r2, r1
 8002bfa:	e9c2 3400 	strd	r3, r4, [r2]
		B[dev] += deltaY * deltaX;
 8002bfe:	7bfb      	ldrb	r3, [r7, #15]
 8002c00:	4a43      	ldr	r2, [pc, #268]	; (8002d10 <OF_ComputeCoefficients+0x218>)
 8002c02:	00db      	lsls	r3, r3, #3
 8002c04:	4413      	add	r3, r2
 8002c06:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002c0a:	4b3d      	ldr	r3, [pc, #244]	; (8002d00 <OF_ComputeCoefficients+0x208>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	4839      	ldr	r0, [pc, #228]	; (8002cf4 <OF_ComputeCoefficients+0x1fc>)
 8002c10:	6800      	ldr	r0, [r0, #0]
 8002c12:	fb00 f303 	mul.w	r3, r0, r3
 8002c16:	469b      	mov	fp, r3
 8002c18:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002c1c:	7bf8      	ldrb	r0, [r7, #15]
 8002c1e:	eb1b 0301 	adds.w	r3, fp, r1
 8002c22:	eb4c 0402 	adc.w	r4, ip, r2
 8002c26:	493a      	ldr	r1, [pc, #232]	; (8002d10 <OF_ComputeCoefficients+0x218>)
 8002c28:	00c2      	lsls	r2, r0, #3
 8002c2a:	440a      	add	r2, r1
 8002c2c:	e9c2 3400 	strd	r3, r4, [r2]
		C[dev] += deltaT * deltaX;
 8002c30:	7bfb      	ldrb	r3, [r7, #15]
 8002c32:	4a38      	ldr	r2, [pc, #224]	; (8002d14 <OF_ComputeCoefficients+0x21c>)
 8002c34:	00db      	lsls	r3, r3, #3
 8002c36:	4413      	add	r3, r2
 8002c38:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002c3c:	4b32      	ldr	r3, [pc, #200]	; (8002d08 <OF_ComputeCoefficients+0x210>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	482c      	ldr	r0, [pc, #176]	; (8002cf4 <OF_ComputeCoefficients+0x1fc>)
 8002c42:	6800      	ldr	r0, [r0, #0]
 8002c44:	fb00 f303 	mul.w	r3, r0, r3
 8002c48:	469b      	mov	fp, r3
 8002c4a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002c4e:	7bf8      	ldrb	r0, [r7, #15]
 8002c50:	eb1b 0301 	adds.w	r3, fp, r1
 8002c54:	eb4c 0402 	adc.w	r4, ip, r2
 8002c58:	492e      	ldr	r1, [pc, #184]	; (8002d14 <OF_ComputeCoefficients+0x21c>)
 8002c5a:	00c2      	lsls	r2, r0, #3
 8002c5c:	440a      	add	r2, r1
 8002c5e:	e9c2 3400 	strd	r3, r4, [r2]
		D[dev] += deltaY * deltaY;
 8002c62:	7bfb      	ldrb	r3, [r7, #15]
 8002c64:	4a2c      	ldr	r2, [pc, #176]	; (8002d18 <OF_ComputeCoefficients+0x220>)
 8002c66:	00db      	lsls	r3, r3, #3
 8002c68:	4413      	add	r3, r2
 8002c6a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002c6e:	4b24      	ldr	r3, [pc, #144]	; (8002d00 <OF_ComputeCoefficients+0x208>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4823      	ldr	r0, [pc, #140]	; (8002d00 <OF_ComputeCoefficients+0x208>)
 8002c74:	6800      	ldr	r0, [r0, #0]
 8002c76:	fb00 f303 	mul.w	r3, r0, r3
 8002c7a:	469b      	mov	fp, r3
 8002c7c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002c80:	7bf8      	ldrb	r0, [r7, #15]
 8002c82:	eb1b 0301 	adds.w	r3, fp, r1
 8002c86:	eb4c 0402 	adc.w	r4, ip, r2
 8002c8a:	4923      	ldr	r1, [pc, #140]	; (8002d18 <OF_ComputeCoefficients+0x220>)
 8002c8c:	00c2      	lsls	r2, r0, #3
 8002c8e:	440a      	add	r2, r1
 8002c90:	e9c2 3400 	strd	r3, r4, [r2]
		E[dev] += deltaT * deltaY;
 8002c94:	7bfb      	ldrb	r3, [r7, #15]
 8002c96:	4a21      	ldr	r2, [pc, #132]	; (8002d1c <OF_ComputeCoefficients+0x224>)
 8002c98:	00db      	lsls	r3, r3, #3
 8002c9a:	4413      	add	r3, r2
 8002c9c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002ca0:	4b19      	ldr	r3, [pc, #100]	; (8002d08 <OF_ComputeCoefficients+0x210>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4816      	ldr	r0, [pc, #88]	; (8002d00 <OF_ComputeCoefficients+0x208>)
 8002ca6:	6800      	ldr	r0, [r0, #0]
 8002ca8:	fb00 f303 	mul.w	r3, r0, r3
 8002cac:	469b      	mov	fp, r3
 8002cae:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8002cb2:	7bf8      	ldrb	r0, [r7, #15]
 8002cb4:	eb1b 0301 	adds.w	r3, fp, r1
 8002cb8:	eb4c 0402 	adc.w	r4, ip, r2
 8002cbc:	4917      	ldr	r1, [pc, #92]	; (8002d1c <OF_ComputeCoefficients+0x224>)
 8002cbe:	00c2      	lsls	r2, r0, #3
 8002cc0:	440a      	add	r2, r1
 8002cc2:	e9c2 3400 	strd	r3, r4, [r2]

		frameIdx++;
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002cc8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002ccc:	b29b      	uxth	r3, r3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	b29b      	uxth	r3, r3
 8002cd2:	b21a      	sxth	r2, r3
 8002cd4:	4b04      	ldr	r3, [pc, #16]	; (8002ce8 <OF_ComputeCoefficients+0x1f0>)
 8002cd6:	801a      	strh	r2, [r3, #0]
	}
}
 8002cd8:	bf00      	nop
 8002cda:	3714      	adds	r7, #20
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8002ce2:	4770      	bx	lr
 8002ce4:	0800759c 	.word	0x0800759c
 8002ce8:	20000904 	.word	0x20000904
 8002cec:	08006f9c 	.word	0x08006f9c
 8002cf0:	08006d9c 	.word	0x08006d9c
 8002cf4:	200008f8 	.word	0x200008f8
 8002cf8:	0800739c 	.word	0x0800739c
 8002cfc:	0800719c 	.word	0x0800719c
 8002d00:	200008fc 	.word	0x200008fc
 8002d04:	08006b9c 	.word	0x08006b9c
 8002d08:	20000900 	.word	0x20000900
 8002d0c:	200008a8 	.word	0x200008a8
 8002d10:	200008b8 	.word	0x200008b8
 8002d14:	200008c8 	.word	0x200008c8
 8002d18:	200008d8 	.word	0x200008d8
 8002d1c:	200008e8 	.word	0x200008e8

08002d20 <OF_Compute>:
 * @brief It computes the optical flow value from the coefficients computed in the last iterations
 * @param dev	The device where the frames from
 * @param ofX	Pointer to the variable where the optical flow value in X direction is going to be stored
 * @param ofY	Pointer to the variable where the optical flow value in Y direction is going to be stored
 */
void OF_Compute(Device dev, int32_t* ofX, int32_t* ofY){
 8002d20:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8002d24:	b088      	sub	sp, #32
 8002d26:	af00      	add	r7, sp, #0
 8002d28:	4603      	mov	r3, r0
 8002d2a:	60b9      	str	r1, [r7, #8]
 8002d2c:	607a      	str	r2, [r7, #4]
 8002d2e:	73fb      	strb	r3, [r7, #15]
	int64_t num, den;

	den = A[dev] * D[dev] - B[dev] * B[dev];
 8002d30:	7bfb      	ldrb	r3, [r7, #15]
 8002d32:	4a68      	ldr	r2, [pc, #416]	; (8002ed4 <OF_Compute+0x1b4>)
 8002d34:	00db      	lsls	r3, r3, #3
 8002d36:	4413      	add	r3, r2
 8002d38:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d3c:	7bfb      	ldrb	r3, [r7, #15]
 8002d3e:	4866      	ldr	r0, [pc, #408]	; (8002ed8 <OF_Compute+0x1b8>)
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	4403      	add	r3, r0
 8002d44:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d48:	fb03 f502 	mul.w	r5, r3, r2
 8002d4c:	fb01 f004 	mul.w	r0, r1, r4
 8002d50:	4428      	add	r0, r5
 8002d52:	fba1 5603 	umull	r5, r6, r1, r3
 8002d56:	1983      	adds	r3, r0, r6
 8002d58:	461e      	mov	r6, r3
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
 8002d5c:	4a5f      	ldr	r2, [pc, #380]	; (8002edc <OF_Compute+0x1bc>)
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	4413      	add	r3, r2
 8002d62:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002d66:	7bfb      	ldrb	r3, [r7, #15]
 8002d68:	485c      	ldr	r0, [pc, #368]	; (8002edc <OF_Compute+0x1bc>)
 8002d6a:	00db      	lsls	r3, r3, #3
 8002d6c:	4403      	add	r3, r0
 8002d6e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002d72:	fb03 fc02 	mul.w	ip, r3, r2
 8002d76:	fb01 f004 	mul.w	r0, r1, r4
 8002d7a:	4460      	add	r0, ip
 8002d7c:	fba1 bc03 	umull	fp, ip, r1, r3
 8002d80:	eb00 020c 	add.w	r2, r0, ip
 8002d84:	4694      	mov	ip, r2
 8002d86:	462b      	mov	r3, r5
 8002d88:	4634      	mov	r4, r6
 8002d8a:	ebb3 030b 	subs.w	r3, r3, fp
 8002d8e:	eb64 040c 	sbc.w	r4, r4, ip
 8002d92:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(den != 0){
 8002d96:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002d9a:	4323      	orrs	r3, r4
 8002d9c:	f000 808d 	beq.w	8002eba <OF_Compute+0x19a>
		num = (C[dev]*D[dev]) - (B[dev]*E[dev]);
 8002da0:	7bfb      	ldrb	r3, [r7, #15]
 8002da2:	4a4f      	ldr	r2, [pc, #316]	; (8002ee0 <OF_Compute+0x1c0>)
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	4413      	add	r3, r2
 8002da8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
 8002dae:	484a      	ldr	r0, [pc, #296]	; (8002ed8 <OF_Compute+0x1b8>)
 8002db0:	00db      	lsls	r3, r3, #3
 8002db2:	4403      	add	r3, r0
 8002db4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002db8:	fb03 f502 	mul.w	r5, r3, r2
 8002dbc:	fb01 f004 	mul.w	r0, r1, r4
 8002dc0:	4428      	add	r0, r5
 8002dc2:	fba1 5603 	umull	r5, r6, r1, r3
 8002dc6:	1983      	adds	r3, r0, r6
 8002dc8:	461e      	mov	r6, r3
 8002dca:	7bfb      	ldrb	r3, [r7, #15]
 8002dcc:	4a43      	ldr	r2, [pc, #268]	; (8002edc <OF_Compute+0x1bc>)
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	4413      	add	r3, r2
 8002dd2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002dd6:	7bfb      	ldrb	r3, [r7, #15]
 8002dd8:	4842      	ldr	r0, [pc, #264]	; (8002ee4 <OF_Compute+0x1c4>)
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4403      	add	r3, r0
 8002dde:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002de2:	fb03 fc02 	mul.w	ip, r3, r2
 8002de6:	fb01 f004 	mul.w	r0, r1, r4
 8002dea:	4460      	add	r0, ip
 8002dec:	fba1 bc03 	umull	fp, ip, r1, r3
 8002df0:	eb00 020c 	add.w	r2, r0, ip
 8002df4:	4694      	mov	ip, r2
 8002df6:	462b      	mov	r3, r5
 8002df8:	4634      	mov	r4, r6
 8002dfa:	ebb3 030b 	subs.w	r3, r3, fp
 8002dfe:	eb64 040c 	sbc.w	r4, r4, ip
 8002e02:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofX = (num << bitsOfResolution)  / den;
 8002e06:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e0a:	f04f 0000 	mov.w	r0, #0
 8002e0e:	f04f 0100 	mov.w	r1, #0
 8002e12:	0261      	lsls	r1, r4, #9
 8002e14:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8002e18:	0258      	lsls	r0, r3, #9
 8002e1a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002e1e:	f7fd fe45 	bl	8000aac <__aeabi_ldivmod>
 8002e22:	4603      	mov	r3, r0
 8002e24:	460c      	mov	r4, r1
 8002e26:	461a      	mov	r2, r3
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	601a      	str	r2, [r3, #0]
		num = (A[dev]*E[dev]) - (B[dev]*C[dev]);
 8002e2c:	7bfb      	ldrb	r3, [r7, #15]
 8002e2e:	4a29      	ldr	r2, [pc, #164]	; (8002ed4 <OF_Compute+0x1b4>)
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4413      	add	r3, r2
 8002e34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e38:	7bfb      	ldrb	r3, [r7, #15]
 8002e3a:	482a      	ldr	r0, [pc, #168]	; (8002ee4 <OF_Compute+0x1c4>)
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	4403      	add	r3, r0
 8002e40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e44:	fb03 f502 	mul.w	r5, r3, r2
 8002e48:	fb01 f004 	mul.w	r0, r1, r4
 8002e4c:	4428      	add	r0, r5
 8002e4e:	fba1 5603 	umull	r5, r6, r1, r3
 8002e52:	1983      	adds	r3, r0, r6
 8002e54:	461e      	mov	r6, r3
 8002e56:	7bfb      	ldrb	r3, [r7, #15]
 8002e58:	4a20      	ldr	r2, [pc, #128]	; (8002edc <OF_Compute+0x1bc>)
 8002e5a:	00db      	lsls	r3, r3, #3
 8002e5c:	4413      	add	r3, r2
 8002e5e:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002e62:	7bfb      	ldrb	r3, [r7, #15]
 8002e64:	481e      	ldr	r0, [pc, #120]	; (8002ee0 <OF_Compute+0x1c0>)
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	4403      	add	r3, r0
 8002e6a:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002e6e:	fb03 fc02 	mul.w	ip, r3, r2
 8002e72:	fb01 f004 	mul.w	r0, r1, r4
 8002e76:	4460      	add	r0, ip
 8002e78:	fba1 bc03 	umull	fp, ip, r1, r3
 8002e7c:	eb00 020c 	add.w	r2, r0, ip
 8002e80:	4694      	mov	ip, r2
 8002e82:	462b      	mov	r3, r5
 8002e84:	4634      	mov	r4, r6
 8002e86:	ebb3 030b 	subs.w	r3, r3, fp
 8002e8a:	eb64 040c 	sbc.w	r4, r4, ip
 8002e8e:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofY = (num << bitsOfResolution) / den;
 8002e92:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e96:	f04f 0000 	mov.w	r0, #0
 8002e9a:	f04f 0100 	mov.w	r1, #0
 8002e9e:	0261      	lsls	r1, r4, #9
 8002ea0:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8002ea4:	0258      	lsls	r0, r3, #9
 8002ea6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002eaa:	f7fd fdff 	bl	8000aac <__aeabi_ldivmod>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	460c      	mov	r4, r1
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	601a      	str	r2, [r3, #0]
	}
	else{
		*ofX = *ofY = 0;
	}
}
 8002eb8:	e006      	b.n	8002ec8 <OF_Compute+0x1a8>
		*ofX = *ofY = 0;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	601a      	str	r2, [r3, #0]
}
 8002ec8:	bf00      	nop
 8002eca:	3720      	adds	r7, #32
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002ed2:	bf00      	nop
 8002ed4:	200008a8 	.word	0x200008a8
 8002ed8:	200008d8 	.word	0x200008d8
 8002edc:	200008b8 	.word	0x200008b8
 8002ee0:	200008c8 	.word	0x200008c8
 8002ee4:	200008e8 	.word	0x200008e8

08002ee8 <OF_ComputeFused>:
 * @brief It computes the optical flow fusion from the optical flow values computed for the two connected devices
 * @param right	Pointer to the struct which contains the optical flow values computed from the right positioned device
 * @param left	Pointer to the struct which contains the optical flow values computed from the left positioned device
 * @param fused	Pointer to the struct where the fused values are going to be stored
 */
void OF_ComputeFused(optical2DFlowStruct* right, optical2DFlowStruct* left, optical2DandRotateFlowStruct* fused){
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
	fused->x = (right->x + left->x) >> 1;
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	68bb      	ldr	r3, [r7, #8]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	4413      	add	r3, r2
 8002efe:	105a      	asrs	r2, r3, #1
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	601a      	str	r2, [r3, #0]
	fused->y = (right->y + left->y) >> 1;
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	685a      	ldr	r2, [r3, #4]
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	685b      	ldr	r3, [r3, #4]
 8002f0c:	4413      	add	r3, r2
 8002f0e:	105a      	asrs	r2, r3, #1
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	605a      	str	r2, [r3, #4]
	if((right->y < 0 && left->y > 0) || (right->y > 0 && left->y < 0))
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	da03      	bge.n	8002f24 <OF_ComputeFused+0x3c>
 8002f1c:	68bb      	ldr	r3, [r7, #8]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	dc07      	bgt.n	8002f34 <OF_ComputeFused+0x4c>
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	dd0a      	ble.n	8002f42 <OF_ComputeFused+0x5a>
 8002f2c:	68bb      	ldr	r3, [r7, #8]
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	2b00      	cmp	r3, #0
 8002f32:	da06      	bge.n	8002f42 <OF_ComputeFused+0x5a>
		fused->theta = (right->y - left->y);
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	685a      	ldr	r2, [r3, #4]
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	1ad2      	subs	r2, r2, r3
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	609a      	str	r2, [r3, #8]
}
 8002f42:	bf00      	nop
 8002f44:	3714      	adds	r7, #20
 8002f46:	46bd      	mov	sp, r7
 8002f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4c:	4770      	bx	lr
	...

08002f50 <LL_AHB2_GRP1_EnableClock>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b085      	sub	sp, #20
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002f58:	4b08      	ldr	r3, [pc, #32]	; (8002f7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f5a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f5c:	4907      	ldr	r1, [pc, #28]	; (8002f7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002f64:	4b05      	ldr	r3, [pc, #20]	; (8002f7c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002f66:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4013      	ands	r3, r2
 8002f6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
}
 8002f70:	bf00      	nop
 8002f72:	3714      	adds	r7, #20
 8002f74:	46bd      	mov	sp, r7
 8002f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7a:	4770      	bx	lr
 8002f7c:	40021000 	.word	0x40021000

08002f80 <LL_APB1_GRP1_EnableClock>:
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002f88:	4b08      	ldr	r3, [pc, #32]	; (8002fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f8a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f8c:	4907      	ldr	r1, [pc, #28]	; (8002fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	4313      	orrs	r3, r2
 8002f92:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002f94:	4b05      	ldr	r3, [pc, #20]	; (8002fac <LL_APB1_GRP1_EnableClock+0x2c>)
 8002f96:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	4013      	ands	r3, r2
 8002f9c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002f9e:	68fb      	ldr	r3, [r7, #12]
}
 8002fa0:	bf00      	nop
 8002fa2:	3714      	adds	r7, #20
 8002fa4:	46bd      	mov	sp, r7
 8002fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002faa:	4770      	bx	lr
 8002fac:	40021000 	.word	0x40021000

08002fb0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b083      	sub	sp, #12
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	f023 0210 	bic.w	r2, r3, #16
 8002fc2:	683b      	ldr	r3, [r7, #0]
 8002fc4:	431a      	orrs	r2, r3
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	605a      	str	r2, [r3, #4]
}
 8002fca:	bf00      	nop
 8002fcc:	370c      	adds	r7, #12
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd4:	4770      	bx	lr

08002fd6 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002fd6:	b480      	push	{r7}
 8002fd8:	b083      	sub	sp, #12
 8002fda:	af00      	add	r7, sp, #0
 8002fdc:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f023 0208 	bic.w	r2, r3, #8
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	605a      	str	r2, [r3, #4]
}
 8002fea:	bf00      	nop
 8002fec:	370c      	adds	r7, #12
 8002fee:	46bd      	mov	sp, r7
 8002ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff4:	4770      	bx	lr
	...

08002ff8 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b090      	sub	sp, #64	; 0x40
 8002ffc:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002ffe:	f107 0318 	add.w	r3, r7, #24
 8003002:	2228      	movs	r2, #40	; 0x28
 8003004:	2100      	movs	r1, #0
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fc7e 	bl	8005908 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800300c:	463b      	mov	r3, r7
 800300e:	2200      	movs	r2, #0
 8003010:	601a      	str	r2, [r3, #0]
 8003012:	605a      	str	r2, [r3, #4]
 8003014:	609a      	str	r2, [r3, #8]
 8003016:	60da      	str	r2, [r3, #12]
 8003018:	611a      	str	r2, [r3, #16]
 800301a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800301c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8003020:	f7ff ffae 	bl	8002f80 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8003024:	2004      	movs	r0, #4
 8003026:	f7ff ff93 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800302a:	2002      	movs	r0, #2
 800302c:	f7ff ff90 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8003030:	230c      	movs	r3, #12
 8003032:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003034:	2302      	movs	r3, #2
 8003036:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003038:	2303      	movs	r3, #3
 800303a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800303c:	2300      	movs	r3, #0
 800303e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003040:	2300      	movs	r3, #0
 8003042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003044:	2305      	movs	r3, #5
 8003046:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003048:	463b      	mov	r3, r7
 800304a:	4619      	mov	r1, r3
 800304c:	481e      	ldr	r0, [pc, #120]	; (80030c8 <MX_SPI2_Init+0xd0>)
 800304e:	f001 fa1c 	bl	800448a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8003052:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003056:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003058:	2302      	movs	r3, #2
 800305a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800305c:	2303      	movs	r3, #3
 800305e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003060:	2300      	movs	r3, #0
 8003062:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003064:	2300      	movs	r3, #0
 8003066:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8003068:	2305      	movs	r3, #5
 800306a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800306c:	463b      	mov	r3, r7
 800306e:	4619      	mov	r1, r3
 8003070:	4816      	ldr	r0, [pc, #88]	; (80030cc <MX_SPI2_Init+0xd4>)
 8003072:	f001 fa0a 	bl	800448a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8003076:	2300      	movs	r3, #0
 8003078:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800307a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800307e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003080:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003084:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8003086:	2302      	movs	r3, #2
 8003088:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800308a:	2301      	movs	r3, #1
 800308c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800308e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003092:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8003094:	2320      	movs	r3, #32
 8003096:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8003098:	2300      	movs	r3, #0
 800309a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800309c:	2300      	movs	r3, #0
 800309e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80030a0:	2307      	movs	r3, #7
 80030a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80030a4:	f107 0318 	add.w	r3, r7, #24
 80030a8:	4619      	mov	r1, r3
 80030aa:	4809      	ldr	r0, [pc, #36]	; (80030d0 <MX_SPI2_Init+0xd8>)
 80030ac:	f001 fe3b 	bl	8004d26 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80030b0:	2100      	movs	r1, #0
 80030b2:	4807      	ldr	r0, [pc, #28]	; (80030d0 <MX_SPI2_Init+0xd8>)
 80030b4:	f7ff ff7c 	bl	8002fb0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80030b8:	4805      	ldr	r0, [pc, #20]	; (80030d0 <MX_SPI2_Init+0xd8>)
 80030ba:	f7ff ff8c 	bl	8002fd6 <LL_SPI_DisableNSSPulseMgt>

}
 80030be:	bf00      	nop
 80030c0:	3740      	adds	r7, #64	; 0x40
 80030c2:	46bd      	mov	sp, r7
 80030c4:	bd80      	pop	{r7, pc}
 80030c6:	bf00      	nop
 80030c8:	48000800 	.word	0x48000800
 80030cc:	48000400 	.word	0x48000400
 80030d0:	40003800 	.word	0x40003800

080030d4 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b090      	sub	sp, #64	; 0x40
 80030d8:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80030da:	f107 0318 	add.w	r3, r7, #24
 80030de:	2228      	movs	r2, #40	; 0x28
 80030e0:	2100      	movs	r1, #0
 80030e2:	4618      	mov	r0, r3
 80030e4:	f002 fc10 	bl	8005908 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030e8:	463b      	mov	r3, r7
 80030ea:	2200      	movs	r2, #0
 80030ec:	601a      	str	r2, [r3, #0]
 80030ee:	605a      	str	r2, [r3, #4]
 80030f0:	609a      	str	r2, [r3, #8]
 80030f2:	60da      	str	r2, [r3, #12]
 80030f4:	611a      	str	r2, [r3, #16]
 80030f6:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 80030f8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80030fc:	f7ff ff40 	bl	8002f80 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8003100:	2004      	movs	r0, #4
 8003102:	f7ff ff25 	bl	8002f50 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8003106:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800310a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800310c:	2302      	movs	r3, #2
 800310e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003110:	2303      	movs	r3, #3
 8003112:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003114:	2300      	movs	r3, #0
 8003116:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003118:	2300      	movs	r3, #0
 800311a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800311c:	2306      	movs	r3, #6
 800311e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003120:	463b      	mov	r3, r7
 8003122:	4619      	mov	r1, r3
 8003124:	4815      	ldr	r0, [pc, #84]	; (800317c <MX_SPI3_Init+0xa8>)
 8003126:	f001 f9b0 	bl	800448a <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800312a:	2300      	movs	r3, #0
 800312c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800312e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8003132:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8003134:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8003138:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800313a:	2302      	movs	r3, #2
 800313c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800313e:	2301      	movs	r3, #1
 8003140:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8003142:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003146:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8003148:	2320      	movs	r3, #32
 800314a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800314c:	2300      	movs	r3, #0
 800314e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8003150:	2300      	movs	r3, #0
 8003152:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8003154:	2307      	movs	r3, #7
 8003156:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 8003158:	f107 0318 	add.w	r3, r7, #24
 800315c:	4619      	mov	r1, r3
 800315e:	4808      	ldr	r0, [pc, #32]	; (8003180 <MX_SPI3_Init+0xac>)
 8003160:	f001 fde1 	bl	8004d26 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8003164:	2100      	movs	r1, #0
 8003166:	4806      	ldr	r0, [pc, #24]	; (8003180 <MX_SPI3_Init+0xac>)
 8003168:	f7ff ff22 	bl	8002fb0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 800316c:	4804      	ldr	r0, [pc, #16]	; (8003180 <MX_SPI3_Init+0xac>)
 800316e:	f7ff ff32 	bl	8002fd6 <LL_SPI_DisableNSSPulseMgt>

}
 8003172:	bf00      	nop
 8003174:	3740      	adds	r7, #64	; 0x40
 8003176:	46bd      	mov	sp, r7
 8003178:	bd80      	pop	{r7, pc}
 800317a:	bf00      	nop
 800317c:	48000800 	.word	0x48000800
 8003180:	40003c00 	.word	0x40003c00

08003184 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003196:	e7fe      	b.n	8003196 <HardFault_Handler+0x4>

08003198 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003198:	b480      	push	{r7}
 800319a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800319c:	e7fe      	b.n	800319c <MemManage_Handler+0x4>

0800319e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800319e:	b480      	push	{r7}
 80031a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80031a2:	e7fe      	b.n	80031a2 <BusFault_Handler+0x4>

080031a4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80031a8:	e7fe      	b.n	80031a8 <UsageFault_Handler+0x4>

080031aa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80031aa:	b480      	push	{r7}
 80031ac:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80031ae:	bf00      	nop
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80031b8:	b480      	push	{r7}
 80031ba:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80031bc:	bf00      	nop
 80031be:	46bd      	mov	sp, r7
 80031c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c4:	4770      	bx	lr

080031c6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80031c6:	b480      	push	{r7}
 80031c8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80031ca:	bf00      	nop
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr

080031d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031d8:	bf00      	nop
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr

080031e2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80031e2:	b580      	push	{r7, lr}
 80031e4:	b086      	sub	sp, #24
 80031e6:	af00      	add	r7, sp, #0
 80031e8:	60f8      	str	r0, [r7, #12]
 80031ea:	60b9      	str	r1, [r7, #8]
 80031ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80031ee:	2300      	movs	r3, #0
 80031f0:	617b      	str	r3, [r7, #20]
 80031f2:	e00a      	b.n	800320a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80031f4:	f000 fcd8 	bl	8003ba8 <__io_getchar>
 80031f8:	4601      	mov	r1, r0
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	1c5a      	adds	r2, r3, #1
 80031fe:	60ba      	str	r2, [r7, #8]
 8003200:	b2ca      	uxtb	r2, r1
 8003202:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3301      	adds	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	429a      	cmp	r2, r3
 8003210:	dbf0      	blt.n	80031f4 <_read+0x12>
	}

return len;
 8003212:	687b      	ldr	r3, [r7, #4]
}
 8003214:	4618      	mov	r0, r3
 8003216:	3718      	adds	r7, #24
 8003218:	46bd      	mov	sp, r7
 800321a:	bd80      	pop	{r7, pc}

0800321c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800321c:	b580      	push	{r7, lr}
 800321e:	b086      	sub	sp, #24
 8003220:	af00      	add	r7, sp, #0
 8003222:	60f8      	str	r0, [r7, #12]
 8003224:	60b9      	str	r1, [r7, #8]
 8003226:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003228:	2300      	movs	r3, #0
 800322a:	617b      	str	r3, [r7, #20]
 800322c:	e009      	b.n	8003242 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800322e:	68bb      	ldr	r3, [r7, #8]
 8003230:	1c5a      	adds	r2, r3, #1
 8003232:	60ba      	str	r2, [r7, #8]
 8003234:	781b      	ldrb	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f000 fc98 	bl	8003b6c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800323c:	697b      	ldr	r3, [r7, #20]
 800323e:	3301      	adds	r3, #1
 8003240:	617b      	str	r3, [r7, #20]
 8003242:	697a      	ldr	r2, [r7, #20]
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	429a      	cmp	r2, r3
 8003248:	dbf1      	blt.n	800322e <_write+0x12>
	}
	return len;
 800324a:	687b      	ldr	r3, [r7, #4]
}
 800324c:	4618      	mov	r0, r3
 800324e:	3718      	adds	r7, #24
 8003250:	46bd      	mov	sp, r7
 8003252:	bd80      	pop	{r7, pc}

08003254 <_close>:

int _close(int file)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
	return -1;
 800325c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800327c:	605a      	str	r2, [r3, #4]
	return 0;
 800327e:	2300      	movs	r3, #0
}
 8003280:	4618      	mov	r0, r3
 8003282:	370c      	adds	r7, #12
 8003284:	46bd      	mov	sp, r7
 8003286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328a:	4770      	bx	lr

0800328c <_isatty>:

int _isatty(int file)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
	return 1;
 8003294:	2301      	movs	r3, #1
}
 8003296:	4618      	mov	r0, r3
 8003298:	370c      	adds	r7, #12
 800329a:	46bd      	mov	sp, r7
 800329c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a0:	4770      	bx	lr

080032a2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80032a2:	b480      	push	{r7}
 80032a4:	b085      	sub	sp, #20
 80032a6:	af00      	add	r7, sp, #0
 80032a8:	60f8      	str	r0, [r7, #12]
 80032aa:	60b9      	str	r1, [r7, #8]
 80032ac:	607a      	str	r2, [r7, #4]
	return 0;
 80032ae:	2300      	movs	r3, #0
}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3714      	adds	r7, #20
 80032b4:	46bd      	mov	sp, r7
 80032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ba:	4770      	bx	lr

080032bc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b086      	sub	sp, #24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80032c4:	4a14      	ldr	r2, [pc, #80]	; (8003318 <_sbrk+0x5c>)
 80032c6:	4b15      	ldr	r3, [pc, #84]	; (800331c <_sbrk+0x60>)
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80032cc:	697b      	ldr	r3, [r7, #20]
 80032ce:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80032d0:	4b13      	ldr	r3, [pc, #76]	; (8003320 <_sbrk+0x64>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d102      	bne.n	80032de <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80032d8:	4b11      	ldr	r3, [pc, #68]	; (8003320 <_sbrk+0x64>)
 80032da:	4a12      	ldr	r2, [pc, #72]	; (8003324 <_sbrk+0x68>)
 80032dc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80032de:	4b10      	ldr	r3, [pc, #64]	; (8003320 <_sbrk+0x64>)
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4413      	add	r3, r2
 80032e6:	693a      	ldr	r2, [r7, #16]
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d207      	bcs.n	80032fc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80032ec:	f002 fae2 	bl	80058b4 <__errno>
 80032f0:	4602      	mov	r2, r0
 80032f2:	230c      	movs	r3, #12
 80032f4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80032f6:	f04f 33ff 	mov.w	r3, #4294967295
 80032fa:	e009      	b.n	8003310 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80032fc:	4b08      	ldr	r3, [pc, #32]	; (8003320 <_sbrk+0x64>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003302:	4b07      	ldr	r3, [pc, #28]	; (8003320 <_sbrk+0x64>)
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4413      	add	r3, r2
 800330a:	4a05      	ldr	r2, [pc, #20]	; (8003320 <_sbrk+0x64>)
 800330c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800330e:	68fb      	ldr	r3, [r7, #12]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}
 8003318:	20018000 	.word	0x20018000
 800331c:	00000400 	.word	0x00000400
 8003320:	20000908 	.word	0x20000908
 8003324:	20000920 	.word	0x20000920

08003328 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800332c:	4b17      	ldr	r3, [pc, #92]	; (800338c <SystemInit+0x64>)
 800332e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003332:	4a16      	ldr	r2, [pc, #88]	; (800338c <SystemInit+0x64>)
 8003334:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003338:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800333c:	4b14      	ldr	r3, [pc, #80]	; (8003390 <SystemInit+0x68>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	4a13      	ldr	r2, [pc, #76]	; (8003390 <SystemInit+0x68>)
 8003342:	f043 0301 	orr.w	r3, r3, #1
 8003346:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003348:	4b11      	ldr	r3, [pc, #68]	; (8003390 <SystemInit+0x68>)
 800334a:	2200      	movs	r2, #0
 800334c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800334e:	4b10      	ldr	r3, [pc, #64]	; (8003390 <SystemInit+0x68>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a0f      	ldr	r2, [pc, #60]	; (8003390 <SystemInit+0x68>)
 8003354:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003358:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800335c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800335e:	4b0c      	ldr	r3, [pc, #48]	; (8003390 <SystemInit+0x68>)
 8003360:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003364:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003366:	4b0a      	ldr	r3, [pc, #40]	; (8003390 <SystemInit+0x68>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a09      	ldr	r2, [pc, #36]	; (8003390 <SystemInit+0x68>)
 800336c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003370:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003372:	4b07      	ldr	r3, [pc, #28]	; (8003390 <SystemInit+0x68>)
 8003374:	2200      	movs	r2, #0
 8003376:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003378:	4b04      	ldr	r3, [pc, #16]	; (800338c <SystemInit+0x64>)
 800337a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800337e:	609a      	str	r2, [r3, #8]
#endif
}
 8003380:	bf00      	nop
 8003382:	46bd      	mov	sp, r7
 8003384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003388:	4770      	bx	lr
 800338a:	bf00      	nop
 800338c:	e000ed00 	.word	0xe000ed00
 8003390:	40021000 	.word	0x40021000

08003394 <LL_AHB2_GRP1_EnableClock>:
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800339c:	4b08      	ldr	r3, [pc, #32]	; (80033c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800339e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033a0:	4907      	ldr	r1, [pc, #28]	; (80033c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	4313      	orrs	r3, r2
 80033a6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80033a8:	4b05      	ldr	r3, [pc, #20]	; (80033c0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80033aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	4013      	ands	r3, r2
 80033b0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033b2:	68fb      	ldr	r3, [r7, #12]
}
 80033b4:	bf00      	nop
 80033b6:	3714      	adds	r7, #20
 80033b8:	46bd      	mov	sp, r7
 80033ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033be:	4770      	bx	lr
 80033c0:	40021000 	.word	0x40021000

080033c4 <LL_APB1_GRP1_EnableClock>:
{
 80033c4:	b480      	push	{r7}
 80033c6:	b085      	sub	sp, #20
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80033cc:	4b08      	ldr	r3, [pc, #32]	; (80033f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033ce:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033d0:	4907      	ldr	r1, [pc, #28]	; (80033f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4313      	orrs	r3, r2
 80033d6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80033d8:	4b05      	ldr	r3, [pc, #20]	; (80033f0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80033da:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	4013      	ands	r3, r2
 80033e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80033e2:	68fb      	ldr	r3, [r7, #12]
}
 80033e4:	bf00      	nop
 80033e6:	3714      	adds	r7, #20
 80033e8:	46bd      	mov	sp, r7
 80033ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ee:	4770      	bx	lr
 80033f0:	40021000 	.word	0x40021000

080033f4 <LL_APB2_GRP1_EnableClock>:
{
 80033f4:	b480      	push	{r7}
 80033f6:	b085      	sub	sp, #20
 80033f8:	af00      	add	r7, sp, #0
 80033fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80033fc:	4b08      	ldr	r3, [pc, #32]	; (8003420 <LL_APB2_GRP1_EnableClock+0x2c>)
 80033fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003400:	4907      	ldr	r1, [pc, #28]	; (8003420 <LL_APB2_GRP1_EnableClock+0x2c>)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	4313      	orrs	r3, r2
 8003406:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8003408:	4b05      	ldr	r3, [pc, #20]	; (8003420 <LL_APB2_GRP1_EnableClock+0x2c>)
 800340a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	4013      	ands	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003412:	68fb      	ldr	r3, [r7, #12]
}
 8003414:	bf00      	nop
 8003416:	3714      	adds	r7, #20
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr
 8003420:	40021000 	.word	0x40021000

08003424 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8003424:	b480      	push	{r7}
 8003426:	b083      	sub	sp, #12
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	601a      	str	r2, [r3, #0]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 8003444:	b480      	push	{r7}
 8003446:	b085      	sub	sp, #20
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
 800344c:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	2b01      	cmp	r3, #1
 8003452:	d028      	beq.n	80034a6 <LL_TIM_OC_DisableFast+0x62>
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	2b04      	cmp	r3, #4
 8003458:	d023      	beq.n	80034a2 <LL_TIM_OC_DisableFast+0x5e>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	2b10      	cmp	r3, #16
 800345e:	d01e      	beq.n	800349e <LL_TIM_OC_DisableFast+0x5a>
 8003460:	683b      	ldr	r3, [r7, #0]
 8003462:	2b40      	cmp	r3, #64	; 0x40
 8003464:	d019      	beq.n	800349a <LL_TIM_OC_DisableFast+0x56>
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800346c:	d013      	beq.n	8003496 <LL_TIM_OC_DisableFast+0x52>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003474:	d00d      	beq.n	8003492 <LL_TIM_OC_DisableFast+0x4e>
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800347c:	d007      	beq.n	800348e <LL_TIM_OC_DisableFast+0x4a>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003484:	d101      	bne.n	800348a <LL_TIM_OC_DisableFast+0x46>
 8003486:	2307      	movs	r3, #7
 8003488:	e00e      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 800348a:	2308      	movs	r3, #8
 800348c:	e00c      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 800348e:	2306      	movs	r3, #6
 8003490:	e00a      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 8003492:	2305      	movs	r3, #5
 8003494:	e008      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 8003496:	2304      	movs	r3, #4
 8003498:	e006      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 800349a:	2303      	movs	r3, #3
 800349c:	e004      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 800349e:	2302      	movs	r3, #2
 80034a0:	e002      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 80034a2:	2301      	movs	r3, #1
 80034a4:	e000      	b.n	80034a8 <LL_TIM_OC_DisableFast+0x64>
 80034a6:	2300      	movs	r3, #0
 80034a8:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3318      	adds	r3, #24
 80034ae:	4619      	mov	r1, r3
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	4a0b      	ldr	r2, [pc, #44]	; (80034e0 <LL_TIM_OC_DisableFast+0x9c>)
 80034b4:	5cd3      	ldrb	r3, [r2, r3]
 80034b6:	440b      	add	r3, r1
 80034b8:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 80034ba:	68bb      	ldr	r3, [r7, #8]
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	7bfb      	ldrb	r3, [r7, #15]
 80034c0:	4908      	ldr	r1, [pc, #32]	; (80034e4 <LL_TIM_OC_DisableFast+0xa0>)
 80034c2:	5ccb      	ldrb	r3, [r1, r3]
 80034c4:	4619      	mov	r1, r3
 80034c6:	2304      	movs	r3, #4
 80034c8:	408b      	lsls	r3, r1
 80034ca:	43db      	mvns	r3, r3
 80034cc:	401a      	ands	r2, r3
 80034ce:	68bb      	ldr	r3, [r7, #8]
 80034d0:	601a      	str	r2, [r3, #0]

}
 80034d2:	bf00      	nop
 80034d4:	3714      	adds	r7, #20
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	08007728 	.word	0x08007728
 80034e4:	08007734 	.word	0x08007734

080034e8 <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80034e8:	b480      	push	{r7}
 80034ea:	b085      	sub	sp, #20
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d028      	beq.n	800354a <LL_TIM_OC_EnablePreload+0x62>
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b04      	cmp	r3, #4
 80034fc:	d023      	beq.n	8003546 <LL_TIM_OC_EnablePreload+0x5e>
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	2b10      	cmp	r3, #16
 8003502:	d01e      	beq.n	8003542 <LL_TIM_OC_EnablePreload+0x5a>
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	2b40      	cmp	r3, #64	; 0x40
 8003508:	d019      	beq.n	800353e <LL_TIM_OC_EnablePreload+0x56>
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003510:	d013      	beq.n	800353a <LL_TIM_OC_EnablePreload+0x52>
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003518:	d00d      	beq.n	8003536 <LL_TIM_OC_EnablePreload+0x4e>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003520:	d007      	beq.n	8003532 <LL_TIM_OC_EnablePreload+0x4a>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003528:	d101      	bne.n	800352e <LL_TIM_OC_EnablePreload+0x46>
 800352a:	2307      	movs	r3, #7
 800352c:	e00e      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 800352e:	2308      	movs	r3, #8
 8003530:	e00c      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 8003532:	2306      	movs	r3, #6
 8003534:	e00a      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 8003536:	2305      	movs	r3, #5
 8003538:	e008      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 800353a:	2304      	movs	r3, #4
 800353c:	e006      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 800353e:	2303      	movs	r3, #3
 8003540:	e004      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 8003542:	2302      	movs	r3, #2
 8003544:	e002      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <LL_TIM_OC_EnablePreload+0x64>
 800354a:	2300      	movs	r3, #0
 800354c:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	3318      	adds	r3, #24
 8003552:	4619      	mov	r1, r3
 8003554:	7bfb      	ldrb	r3, [r7, #15]
 8003556:	4a0a      	ldr	r2, [pc, #40]	; (8003580 <LL_TIM_OC_EnablePreload+0x98>)
 8003558:	5cd3      	ldrb	r3, [r2, r3]
 800355a:	440b      	add	r3, r1
 800355c:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800355e:	68bb      	ldr	r3, [r7, #8]
 8003560:	681a      	ldr	r2, [r3, #0]
 8003562:	7bfb      	ldrb	r3, [r7, #15]
 8003564:	4907      	ldr	r1, [pc, #28]	; (8003584 <LL_TIM_OC_EnablePreload+0x9c>)
 8003566:	5ccb      	ldrb	r3, [r1, r3]
 8003568:	4619      	mov	r1, r3
 800356a:	2308      	movs	r3, #8
 800356c:	408b      	lsls	r3, r1
 800356e:	431a      	orrs	r2, r3
 8003570:	68bb      	ldr	r3, [r7, #8]
 8003572:	601a      	str	r2, [r3, #0]
}
 8003574:	bf00      	nop
 8003576:	3714      	adds	r7, #20
 8003578:	46bd      	mov	sp, r7
 800357a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357e:	4770      	bx	lr
 8003580:	08007728 	.word	0x08007728
 8003584:	08007734 	.word	0x08007734

08003588 <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	609a      	str	r2, [r3, #8]
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a6:	4770      	bx	lr

080035a8 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
 80035b0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	689b      	ldr	r3, [r3, #8]
 80035b6:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80035ba:	f023 0307 	bic.w	r3, r3, #7
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	431a      	orrs	r2, r3
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	609a      	str	r2, [r3, #8]
}
 80035c6:	bf00      	nop
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
 80035da:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	685b      	ldr	r3, [r3, #4]
 80035e0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	431a      	orrs	r2, r3
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	605a      	str	r2, [r3, #4]
}
 80035ec:	bf00      	nop
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800360a:	683b      	ldr	r3, [r7, #0]
 800360c:	431a      	orrs	r2, r3
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	605a      	str	r2, [r3, #4]
}
 8003612:	bf00      	nop
 8003614:	370c      	adds	r7, #12
 8003616:	46bd      	mov	sp, r7
 8003618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361c:	4770      	bx	lr

0800361e <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800361e:	b480      	push	{r7}
 8003620:	b083      	sub	sp, #12
 8003622:	af00      	add	r7, sp, #0
 8003624:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	689b      	ldr	r3, [r3, #8]
 800362a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	609a      	str	r2, [r3, #8]
}
 8003632:	bf00      	nop
 8003634:	370c      	adds	r7, #12
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr

0800363e <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 800363e:	b480      	push	{r7}
 8003640:	b085      	sub	sp, #20
 8003642:	af00      	add	r7, sp, #0
 8003644:	60f8      	str	r0, [r7, #12]
 8003646:	60b9      	str	r1, [r7, #8]
 8003648:	607a      	str	r2, [r7, #4]
 800364a:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	689b      	ldr	r3, [r3, #8]
 8003650:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 8003654:	68b9      	ldr	r1, [r7, #8]
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4319      	orrs	r1, r3
 800365a:	683b      	ldr	r3, [r7, #0]
 800365c:	430b      	orrs	r3, r1
 800365e:	431a      	orrs	r2, r3
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	609a      	str	r2, [r3, #8]
}
 8003664:	bf00      	nop
 8003666:	3714      	adds	r7, #20
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr

08003670 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8003670:	b480      	push	{r7}
 8003672:	b083      	sub	sp, #12
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
 8003678:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	689b      	ldr	r3, [r3, #8]
 800367e:	f023 0208 	bic.w	r2, r3, #8
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	431a      	orrs	r2, r3
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	bf00      	nop
 800368c:	370c      	adds	r7, #12
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
	...

08003698 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8003698:	b580      	push	{r7, lr}
 800369a:	b086      	sub	sp, #24
 800369c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800369e:	1d3b      	adds	r3, r7, #4
 80036a0:	2200      	movs	r2, #0
 80036a2:	601a      	str	r2, [r3, #0]
 80036a4:	605a      	str	r2, [r3, #4]
 80036a6:	609a      	str	r2, [r3, #8]
 80036a8:	60da      	str	r2, [r3, #12]
 80036aa:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80036ac:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80036b0:	f7ff fea0 	bl	80033f4 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 80036b4:	230f      	movs	r3, #15
 80036b6:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80036b8:	2300      	movs	r3, #0
 80036ba:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 80036bc:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80036c0:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80036c2:	2300      	movs	r3, #0
 80036c4:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80036c6:	2300      	movs	r3, #0
 80036c8:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80036ca:	1d3b      	adds	r3, r7, #4
 80036cc:	4619      	mov	r1, r3
 80036ce:	480c      	ldr	r0, [pc, #48]	; (8003700 <MX_TIM1_Init+0x68>)
 80036d0:	f001 fc08 	bl	8004ee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80036d4:	480a      	ldr	r0, [pc, #40]	; (8003700 <MX_TIM1_Init+0x68>)
 80036d6:	f7ff fea5 	bl	8003424 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80036da:	2100      	movs	r1, #0
 80036dc:	4808      	ldr	r0, [pc, #32]	; (8003700 <MX_TIM1_Init+0x68>)
 80036de:	f7ff ff63 	bl	80035a8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80036e2:	2100      	movs	r1, #0
 80036e4:	4806      	ldr	r0, [pc, #24]	; (8003700 <MX_TIM1_Init+0x68>)
 80036e6:	f7ff ff74 	bl	80035d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80036ea:	2100      	movs	r1, #0
 80036ec:	4804      	ldr	r0, [pc, #16]	; (8003700 <MX_TIM1_Init+0x68>)
 80036ee:	f7ff ff83 	bl	80035f8 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80036f2:	4803      	ldr	r0, [pc, #12]	; (8003700 <MX_TIM1_Init+0x68>)
 80036f4:	f7ff ff93 	bl	800361e <LL_TIM_DisableMasterSlaveMode>

}
 80036f8:	bf00      	nop
 80036fa:	3718      	adds	r7, #24
 80036fc:	46bd      	mov	sp, r7
 80036fe:	bd80      	pop	{r7, pc}
 8003700:	40012c00 	.word	0x40012c00

08003704 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8003704:	b580      	push	{r7, lr}
 8003706:	b094      	sub	sp, #80	; 0x50
 8003708:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800370a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800370e:	2200      	movs	r2, #0
 8003710:	601a      	str	r2, [r3, #0]
 8003712:	605a      	str	r2, [r3, #4]
 8003714:	609a      	str	r2, [r3, #8]
 8003716:	60da      	str	r2, [r3, #12]
 8003718:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800371a:	f107 031c 	add.w	r3, r7, #28
 800371e:	2220      	movs	r2, #32
 8003720:	2100      	movs	r1, #0
 8003722:	4618      	mov	r0, r3
 8003724:	f002 f8f0 	bl	8005908 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	2200      	movs	r2, #0
 800372c:	601a      	str	r2, [r3, #0]
 800372e:	605a      	str	r2, [r3, #4]
 8003730:	609a      	str	r2, [r3, #8]
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	611a      	str	r2, [r3, #16]
 8003736:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 8003738:	2002      	movs	r0, #2
 800373a:	f7ff fe43 	bl	80033c4 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 19;
 800373e:	2313      	movs	r3, #19
 8003740:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8003742:	2300      	movs	r3, #0
 8003744:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 63999;
 8003746:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800374a:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 800374c:	2300      	movs	r3, #0
 800374e:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 8003750:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003754:	4619      	mov	r1, r3
 8003756:	4847      	ldr	r0, [pc, #284]	; (8003874 <MX_TIM3_Init+0x170>)
 8003758:	f001 fbc4 	bl	8004ee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 800375c:	4845      	ldr	r0, [pc, #276]	; (8003874 <MX_TIM3_Init+0x170>)
 800375e:	f7ff fe61 	bl	8003424 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8003762:	2100      	movs	r1, #0
 8003764:	4843      	ldr	r0, [pc, #268]	; (8003874 <MX_TIM3_Init+0x170>)
 8003766:	f7ff ff1f 	bl	80035a8 <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800376a:	2101      	movs	r1, #1
 800376c:	4841      	ldr	r0, [pc, #260]	; (8003874 <MX_TIM3_Init+0x170>)
 800376e:	f7ff febb 	bl	80034e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8003772:	2360      	movs	r3, #96	; 0x60
 8003774:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8003776:	2300      	movs	r3, #0
 8003778:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800377a:	2300      	movs	r3, #0
 800377c:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 4799;
 800377e:	f241 23bf 	movw	r3, #4799	; 0x12bf
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8003784:	2300      	movs	r3, #0
 8003786:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 8003788:	f107 031c 	add.w	r3, r7, #28
 800378c:	461a      	mov	r2, r3
 800378e:	2101      	movs	r1, #1
 8003790:	4838      	ldr	r0, [pc, #224]	; (8003874 <MX_TIM3_Init+0x170>)
 8003792:	f001 fc3b 	bl	800500c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 8003796:	2101      	movs	r1, #1
 8003798:	4836      	ldr	r0, [pc, #216]	; (8003874 <MX_TIM3_Init+0x170>)
 800379a:	f7ff fe53 	bl	8003444 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 800379e:	2110      	movs	r1, #16
 80037a0:	4834      	ldr	r0, [pc, #208]	; (8003874 <MX_TIM3_Init+0x170>)
 80037a2:	f7ff fea1 	bl	80034e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80037a6:	2300      	movs	r3, #0
 80037a8:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80037aa:	2300      	movs	r3, #0
 80037ac:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 80037ae:	f107 031c 	add.w	r3, r7, #28
 80037b2:	461a      	mov	r2, r3
 80037b4:	2110      	movs	r1, #16
 80037b6:	482f      	ldr	r0, [pc, #188]	; (8003874 <MX_TIM3_Init+0x170>)
 80037b8:	f001 fc28 	bl	800500c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 80037bc:	2110      	movs	r1, #16
 80037be:	482d      	ldr	r0, [pc, #180]	; (8003874 <MX_TIM3_Init+0x170>)
 80037c0:	f7ff fe40 	bl	8003444 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 80037c4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037c8:	482a      	ldr	r0, [pc, #168]	; (8003874 <MX_TIM3_Init+0x170>)
 80037ca:	f7ff fe8d 	bl	80034e8 <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80037ce:	2300      	movs	r3, #0
 80037d0:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80037d2:	2300      	movs	r3, #0
 80037d4:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 80037d6:	f107 031c 	add.w	r3, r7, #28
 80037da:	461a      	mov	r2, r3
 80037dc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037e0:	4824      	ldr	r0, [pc, #144]	; (8003874 <MX_TIM3_Init+0x170>)
 80037e2:	f001 fc13 	bl	800500c <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 80037e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80037ea:	4822      	ldr	r0, [pc, #136]	; (8003874 <MX_TIM3_Init+0x170>)
 80037ec:	f7ff fe2a 	bl	8003444 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 80037f0:	2100      	movs	r1, #0
 80037f2:	4820      	ldr	r0, [pc, #128]	; (8003874 <MX_TIM3_Init+0x170>)
 80037f4:	f7ff ff3c 	bl	8003670 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 80037f8:	481e      	ldr	r0, [pc, #120]	; (8003874 <MX_TIM3_Init+0x170>)
 80037fa:	f7ff fec5 	bl	8003588 <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 80037fe:	2300      	movs	r3, #0
 8003800:	2200      	movs	r2, #0
 8003802:	2100      	movs	r1, #0
 8003804:	481b      	ldr	r0, [pc, #108]	; (8003874 <MX_TIM3_Init+0x170>)
 8003806:	f7ff ff1a 	bl	800363e <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800380a:	2100      	movs	r1, #0
 800380c:	4819      	ldr	r0, [pc, #100]	; (8003874 <MX_TIM3_Init+0x170>)
 800380e:	f7ff fee0 	bl	80035d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8003812:	4818      	ldr	r0, [pc, #96]	; (8003874 <MX_TIM3_Init+0x170>)
 8003814:	f7ff ff03 	bl	800361e <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003818:	2001      	movs	r0, #1
 800381a:	f7ff fdbb 	bl	8003394 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800381e:	2002      	movs	r0, #2
 8003820:	f7ff fdb8 	bl	8003394 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8003824:	23c0      	movs	r3, #192	; 0xc0
 8003826:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003828:	2302      	movs	r3, #2
 800382a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800382c:	2300      	movs	r3, #0
 800382e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003830:	2300      	movs	r3, #0
 8003832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003834:	2300      	movs	r3, #0
 8003836:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8003838:	2302      	movs	r3, #2
 800383a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800383c:	1d3b      	adds	r3, r7, #4
 800383e:	4619      	mov	r1, r3
 8003840:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003844:	f000 fe21 	bl	800448a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 8003848:	2302      	movs	r3, #2
 800384a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800384c:	2302      	movs	r3, #2
 800384e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8003850:	2300      	movs	r3, #0
 8003852:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800385c:	2302      	movs	r3, #2
 800385e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003860:	1d3b      	adds	r3, r7, #4
 8003862:	4619      	mov	r1, r3
 8003864:	4804      	ldr	r0, [pc, #16]	; (8003878 <MX_TIM3_Init+0x174>)
 8003866:	f000 fe10 	bl	800448a <LL_GPIO_Init>

}
 800386a:	bf00      	nop
 800386c:	3750      	adds	r7, #80	; 0x50
 800386e:	46bd      	mov	sp, r7
 8003870:	bd80      	pop	{r7, pc}
 8003872:	bf00      	nop
 8003874:	40000400 	.word	0x40000400
 8003878:	48000400 	.word	0x48000400

0800387c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8003882:	1d3b      	adds	r3, r7, #4
 8003884:	2200      	movs	r2, #0
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	605a      	str	r2, [r3, #4]
 800388a:	609a      	str	r2, [r3, #8]
 800388c:	60da      	str	r2, [r3, #12]
 800388e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM4);
 8003890:	2004      	movs	r0, #4
 8003892:	f7ff fd97 	bl	80033c4 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63999;
 8003896:	f64f 13ff 	movw	r3, #63999	; 0xf9ff
 800389a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800389c:	2300      	movs	r3, #0
 800389e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 65535;
 80038a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80038a4:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80038a6:	2300      	movs	r3, #0
 80038a8:	613b      	str	r3, [r7, #16]
  LL_TIM_Init(TIM4, &TIM_InitStruct);
 80038aa:	1d3b      	adds	r3, r7, #4
 80038ac:	4619      	mov	r1, r3
 80038ae:	480a      	ldr	r0, [pc, #40]	; (80038d8 <MX_TIM4_Init+0x5c>)
 80038b0:	f001 fb18 	bl	8004ee4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM4);
 80038b4:	4808      	ldr	r0, [pc, #32]	; (80038d8 <MX_TIM4_Init+0x5c>)
 80038b6:	f7ff fdb5 	bl	8003424 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM4, LL_TIM_CLOCKSOURCE_INTERNAL);
 80038ba:	2100      	movs	r1, #0
 80038bc:	4806      	ldr	r0, [pc, #24]	; (80038d8 <MX_TIM4_Init+0x5c>)
 80038be:	f7ff fe73 	bl	80035a8 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM4, LL_TIM_TRGO_RESET);
 80038c2:	2100      	movs	r1, #0
 80038c4:	4804      	ldr	r0, [pc, #16]	; (80038d8 <MX_TIM4_Init+0x5c>)
 80038c6:	f7ff fe84 	bl	80035d2 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM4);
 80038ca:	4803      	ldr	r0, [pc, #12]	; (80038d8 <MX_TIM4_Init+0x5c>)
 80038cc:	f7ff fea7 	bl	800361e <LL_TIM_DisableMasterSlaveMode>

}
 80038d0:	bf00      	nop
 80038d2:	3718      	adds	r7, #24
 80038d4:	46bd      	mov	sp, r7
 80038d6:	bd80      	pop	{r7, pc}
 80038d8:	40000800 	.word	0x40000800

080038dc <__NVIC_GetPriorityGrouping>:
{
 80038dc:	b480      	push	{r7}
 80038de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80038e0:	4b04      	ldr	r3, [pc, #16]	; (80038f4 <__NVIC_GetPriorityGrouping+0x18>)
 80038e2:	68db      	ldr	r3, [r3, #12]
 80038e4:	0a1b      	lsrs	r3, r3, #8
 80038e6:	f003 0307 	and.w	r3, r3, #7
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	46bd      	mov	sp, r7
 80038ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f2:	4770      	bx	lr
 80038f4:	e000ed00 	.word	0xe000ed00

080038f8 <__NVIC_EnableIRQ>:
{
 80038f8:	b480      	push	{r7}
 80038fa:	b083      	sub	sp, #12
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	4603      	mov	r3, r0
 8003900:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003902:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003906:	2b00      	cmp	r3, #0
 8003908:	db0b      	blt.n	8003922 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	f003 021f 	and.w	r2, r3, #31
 8003910:	4907      	ldr	r1, [pc, #28]	; (8003930 <__NVIC_EnableIRQ+0x38>)
 8003912:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003916:	095b      	lsrs	r3, r3, #5
 8003918:	2001      	movs	r0, #1
 800391a:	fa00 f202 	lsl.w	r2, r0, r2
 800391e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003922:	bf00      	nop
 8003924:	370c      	adds	r7, #12
 8003926:	46bd      	mov	sp, r7
 8003928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800392c:	4770      	bx	lr
 800392e:	bf00      	nop
 8003930:	e000e100 	.word	0xe000e100

08003934 <__NVIC_SetPriority>:
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	4603      	mov	r3, r0
 800393c:	6039      	str	r1, [r7, #0]
 800393e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003940:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003944:	2b00      	cmp	r3, #0
 8003946:	db0a      	blt.n	800395e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	b2da      	uxtb	r2, r3
 800394c:	490c      	ldr	r1, [pc, #48]	; (8003980 <__NVIC_SetPriority+0x4c>)
 800394e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003952:	0112      	lsls	r2, r2, #4
 8003954:	b2d2      	uxtb	r2, r2
 8003956:	440b      	add	r3, r1
 8003958:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800395c:	e00a      	b.n	8003974 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	b2da      	uxtb	r2, r3
 8003962:	4908      	ldr	r1, [pc, #32]	; (8003984 <__NVIC_SetPriority+0x50>)
 8003964:	79fb      	ldrb	r3, [r7, #7]
 8003966:	f003 030f 	and.w	r3, r3, #15
 800396a:	3b04      	subs	r3, #4
 800396c:	0112      	lsls	r2, r2, #4
 800396e:	b2d2      	uxtb	r2, r2
 8003970:	440b      	add	r3, r1
 8003972:	761a      	strb	r2, [r3, #24]
}
 8003974:	bf00      	nop
 8003976:	370c      	adds	r7, #12
 8003978:	46bd      	mov	sp, r7
 800397a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397e:	4770      	bx	lr
 8003980:	e000e100 	.word	0xe000e100
 8003984:	e000ed00 	.word	0xe000ed00

08003988 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003988:	b480      	push	{r7}
 800398a:	b089      	sub	sp, #36	; 0x24
 800398c:	af00      	add	r7, sp, #0
 800398e:	60f8      	str	r0, [r7, #12]
 8003990:	60b9      	str	r1, [r7, #8]
 8003992:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 0307 	and.w	r3, r3, #7
 800399a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800399c:	69fb      	ldr	r3, [r7, #28]
 800399e:	f1c3 0307 	rsb	r3, r3, #7
 80039a2:	2b04      	cmp	r3, #4
 80039a4:	bf28      	it	cs
 80039a6:	2304      	movcs	r3, #4
 80039a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039aa:	69fb      	ldr	r3, [r7, #28]
 80039ac:	3304      	adds	r3, #4
 80039ae:	2b06      	cmp	r3, #6
 80039b0:	d902      	bls.n	80039b8 <NVIC_EncodePriority+0x30>
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	3b03      	subs	r3, #3
 80039b6:	e000      	b.n	80039ba <NVIC_EncodePriority+0x32>
 80039b8:	2300      	movs	r3, #0
 80039ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039bc:	f04f 32ff 	mov.w	r2, #4294967295
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43da      	mvns	r2, r3
 80039c8:	68bb      	ldr	r3, [r7, #8]
 80039ca:	401a      	ands	r2, r3
 80039cc:	697b      	ldr	r3, [r7, #20]
 80039ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039d0:	f04f 31ff 	mov.w	r1, #4294967295
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	fa01 f303 	lsl.w	r3, r1, r3
 80039da:	43d9      	mvns	r1, r3
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039e0:	4313      	orrs	r3, r2
         );
}
 80039e2:	4618      	mov	r0, r3
 80039e4:	3724      	adds	r7, #36	; 0x24
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr
	...

080039f0 <LL_AHB1_GRP1_EnableClock>:
{
 80039f0:	b480      	push	{r7}
 80039f2:	b085      	sub	sp, #20
 80039f4:	af00      	add	r7, sp, #0
 80039f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 80039f8:	4b08      	ldr	r3, [pc, #32]	; (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80039fc:	4907      	ldr	r1, [pc, #28]	; (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8003a04:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <LL_AHB1_GRP1_EnableClock+0x2c>)
 8003a06:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
}
 8003a10:	bf00      	nop
 8003a12:	3714      	adds	r7, #20
 8003a14:	46bd      	mov	sp, r7
 8003a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a1a:	4770      	bx	lr
 8003a1c:	40021000 	.word	0x40021000

08003a20 <LL_AHB2_GRP1_EnableClock>:
{
 8003a20:	b480      	push	{r7}
 8003a22:	b085      	sub	sp, #20
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8003a28:	4b08      	ldr	r3, [pc, #32]	; (8003a4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003a2a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a2c:	4907      	ldr	r1, [pc, #28]	; (8003a4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8003a34:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8003a36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	4013      	ands	r3, r2
 8003a3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	40021000 	.word	0x40021000

08003a50 <LL_APB1_GRP1_EnableClock>:
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8003a58:	4b08      	ldr	r3, [pc, #32]	; (8003a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a5a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a5c:	4907      	ldr	r1, [pc, #28]	; (8003a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	4313      	orrs	r3, r2
 8003a62:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8003a64:	4b05      	ldr	r3, [pc, #20]	; (8003a7c <LL_APB1_GRP1_EnableClock+0x2c>)
 8003a66:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr
 8003a7c:	40021000 	.word	0x40021000

08003a80 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f043 0201 	orr.w	r2, r3, #1
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	601a      	str	r2, [r3, #0]
}
 8003a94:	bf00      	nop
 8003a96:	370c      	adds	r7, #12
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b083      	sub	sp, #12
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	685b      	ldr	r3, [r3, #4]
 8003aac:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	609a      	str	r2, [r3, #8]
}
 8003ac0:	bf00      	nop
 8003ac2:	370c      	adds	r7, #12
 8003ac4:	46bd      	mov	sp, r7
 8003ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aca:	4770      	bx	lr

08003acc <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8003acc:	b580      	push	{r7, lr}
 8003ace:	b08e      	sub	sp, #56	; 0x38
 8003ad0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8003ad2:	f107 031c 	add.w	r3, r7, #28
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	601a      	str	r2, [r3, #0]
 8003ada:	605a      	str	r2, [r3, #4]
 8003adc:	609a      	str	r2, [r3, #8]
 8003ade:	60da      	str	r2, [r3, #12]
 8003ae0:	611a      	str	r2, [r3, #16]
 8003ae2:	615a      	str	r2, [r3, #20]
 8003ae4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ae6:	1d3b      	adds	r3, r7, #4
 8003ae8:	2200      	movs	r2, #0
 8003aea:	601a      	str	r2, [r3, #0]
 8003aec:	605a      	str	r2, [r3, #4]
 8003aee:	609a      	str	r2, [r3, #8]
 8003af0:	60da      	str	r2, [r3, #12]
 8003af2:	611a      	str	r2, [r3, #16]
 8003af4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8003af6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8003afa:	f7ff ffa9 	bl	8003a50 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8003afe:	2001      	movs	r0, #1
 8003b00:	f7ff ff8e 	bl	8003a20 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003b04:	230c      	movs	r3, #12
 8003b06:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8003b08:	2302      	movs	r3, #2
 8003b0a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8003b0c:	2303      	movs	r3, #3
 8003b0e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8003b10:	2300      	movs	r3, #0
 8003b12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8003b14:	2300      	movs	r3, #0
 8003b16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8003b18:	2307      	movs	r3, #7
 8003b1a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b1c:	1d3b      	adds	r3, r7, #4
 8003b1e:	4619      	mov	r1, r3
 8003b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b24:	f000 fcb1 	bl	800448a <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 8003b28:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8003b2c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8003b2e:	2300      	movs	r3, #0
 8003b30:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8003b32:	2300      	movs	r3, #0
 8003b34:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8003b36:	2300      	movs	r3, #0
 8003b38:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8003b3a:	230c      	movs	r3, #12
 8003b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8003b3e:	2300      	movs	r3, #0
 8003b40:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8003b42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b46:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8003b48:	f107 031c 	add.w	r3, r7, #28
 8003b4c:	4619      	mov	r1, r3
 8003b4e:	4806      	ldr	r0, [pc, #24]	; (8003b68 <MX_USART2_UART_Init+0x9c>)
 8003b50:	f001 fdd6 	bl	8005700 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8003b54:	4804      	ldr	r0, [pc, #16]	; (8003b68 <MX_USART2_UART_Init+0x9c>)
 8003b56:	f7ff ffa3 	bl	8003aa0 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8003b5a:	4803      	ldr	r0, [pc, #12]	; (8003b68 <MX_USART2_UART_Init+0x9c>)
 8003b5c:	f7ff ff90 	bl	8003a80 <LL_USART_Enable>

}
 8003b60:	bf00      	nop
 8003b62:	3738      	adds	r7, #56	; 0x38
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	40004400 	.word	0x40004400

08003b6c <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8003b6c:	b480      	push	{r7}
 8003b6e:	b083      	sub	sp, #12
 8003b70:	af00      	add	r7, sp, #0
 8003b72:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8003b74:	bf00      	nop
 8003b76:	4b0b      	ldr	r3, [pc, #44]	; (8003ba4 <__io_putchar+0x38>)
 8003b78:	69db      	ldr	r3, [r3, #28]
 8003b7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d0f9      	beq.n	8003b76 <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8003b82:	4b08      	ldr	r3, [pc, #32]	; (8003ba4 <__io_putchar+0x38>)
 8003b84:	687a      	ldr	r2, [r7, #4]
 8003b86:	b292      	uxth	r2, r2
 8003b88:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 8003b8a:	bf00      	nop
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <__io_putchar+0x38>)
 8003b8e:	69db      	ldr	r3, [r3, #28]
 8003b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d0f9      	beq.n	8003b8c <__io_putchar+0x20>
#endif
}
 8003b98:	bf00      	nop
 8003b9a:	370c      	adds	r7, #12
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba2:	4770      	bx	lr
 8003ba4:	40004400 	.word	0x40004400

08003ba8 <__io_getchar>:

void __io_getchar(void){
 8003ba8:	b480      	push	{r7}
 8003baa:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8003bac:	bf00      	nop
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb4:	4770      	bx	lr
	...

08003bb8 <startupPrint>:

void startupPrint(void){
 8003bb8:	b580      	push	{r7, lr}
 8003bba:	af00      	add	r7, sp, #0
	printf("\r\n");
 8003bbc:	480b      	ldr	r0, [pc, #44]	; (8003bec <startupPrint+0x34>)
 8003bbe:	f001 ff1f 	bl	8005a00 <puts>
	printf("+==============================================================+\r\n");
 8003bc2:	480b      	ldr	r0, [pc, #44]	; (8003bf0 <startupPrint+0x38>)
 8003bc4:	f001 ff1c 	bl	8005a00 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8003bc8:	490a      	ldr	r1, [pc, #40]	; (8003bf4 <startupPrint+0x3c>)
 8003bca:	480b      	ldr	r0, [pc, #44]	; (8003bf8 <startupPrint+0x40>)
 8003bcc:	f001 fea4 	bl	8005918 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8003bd0:	480a      	ldr	r0, [pc, #40]	; (8003bfc <startupPrint+0x44>)
 8003bd2:	f001 ff15 	bl	8005a00 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8003bd6:	4b0a      	ldr	r3, [pc, #40]	; (8003c00 <startupPrint+0x48>)
 8003bd8:	4a0a      	ldr	r2, [pc, #40]	; (8003c04 <startupPrint+0x4c>)
 8003bda:	490b      	ldr	r1, [pc, #44]	; (8003c08 <startupPrint+0x50>)
 8003bdc:	480b      	ldr	r0, [pc, #44]	; (8003c0c <startupPrint+0x54>)
 8003bde:	f001 fe9b 	bl	8005918 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8003be2:	480b      	ldr	r0, [pc, #44]	; (8003c10 <startupPrint+0x58>)
 8003be4:	f001 ff0c 	bl	8005a00 <puts>
}
 8003be8:	bf00      	nop
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	08006a48 	.word	0x08006a48
 8003bf0:	08006a4c 	.word	0x08006a4c
 8003bf4:	08006a90 	.word	0x08006a90
 8003bf8:	08006ab8 	.word	0x08006ab8
 8003bfc:	08006ac4 	.word	0x08006ac4
 8003c00:	08006b08 	.word	0x08006b08
 8003c04:	08006b0c 	.word	0x08006b0c
 8003c08:	08006b18 	.word	0x08006b18
 8003c0c:	08006b2c 	.word	0x08006b2c
 8003c10:	08006b58 	.word	0x08006b58

08003c14 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8003c14:	b580      	push	{r7, lr}
 8003c16:	b086      	sub	sp, #24
 8003c18:	af00      	add	r7, sp, #0
 8003c1a:	6078      	str	r0, [r7, #4]
 8003c1c:	460b      	mov	r3, r1
 8003c1e:	70fb      	strb	r3, [r7, #3]
 8003c20:	4613      	mov	r3, r2
 8003c22:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8003c24:	2300      	movs	r3, #0
 8003c26:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8003c28:	2300      	movs	r3, #0
 8003c2a:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8003c2c:	78fb      	ldrb	r3, [r7, #3]
 8003c2e:	029b      	lsls	r3, r3, #10
 8003c30:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 8003c32:	78fb      	ldrb	r3, [r7, #3]
 8003c34:	021b      	lsls	r3, r3, #8
 8003c36:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	4a1d      	ldr	r2, [pc, #116]	; (8003cb0 <configureDMA_USART_TX+0x9c>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d132      	bne.n	8003ca6 <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8003c40:	2001      	movs	r0, #1
 8003c42:	f7ff fed5 	bl	80039f0 <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	689b      	ldr	r3, [r3, #8]
 8003c4a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8003c52:	4b18      	ldr	r3, [pc, #96]	; (8003cb4 <configureDMA_USART_TX+0xa0>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4a17      	ldr	r2, [pc, #92]	; (8003cb4 <configureDMA_USART_TX+0xa0>)
 8003c58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003c5c:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8003c5e:	4b16      	ldr	r3, [pc, #88]	; (8003cb8 <configureDMA_USART_TX+0xa4>)
 8003c60:	685b      	ldr	r3, [r3, #4]
 8003c62:	4a15      	ldr	r2, [pc, #84]	; (8003cb8 <configureDMA_USART_TX+0xa4>)
 8003c64:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8003c68:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 8003c6a:	4b14      	ldr	r3, [pc, #80]	; (8003cbc <configureDMA_USART_TX+0xa8>)
 8003c6c:	4a14      	ldr	r2, [pc, #80]	; (8003cc0 <configureDMA_USART_TX+0xac>)
 8003c6e:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8003c70:	78ba      	ldrb	r2, [r7, #2]
 8003c72:	697b      	ldr	r3, [r7, #20]
 8003c74:	431a      	orrs	r2, r3
 8003c76:	693b      	ldr	r3, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8003c7e:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8003c80:	4a0e      	ldr	r2, [pc, #56]	; (8003cbc <configureDMA_USART_TX+0xa8>)
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8003c86:	f7ff fe29 	bl	80038dc <__NVIC_GetPriorityGrouping>
 8003c8a:	4603      	mov	r3, r0
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	2100      	movs	r1, #0
 8003c90:	4618      	mov	r0, r3
 8003c92:	f7ff fe79 	bl	8003988 <NVIC_EncodePriority>
 8003c96:	4603      	mov	r3, r0
 8003c98:	4619      	mov	r1, r3
 8003c9a:	2011      	movs	r0, #17
 8003c9c:	f7ff fe4a 	bl	8003934 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8003ca0:	2011      	movs	r0, #17
 8003ca2:	f7ff fe29 	bl	80038f8 <__NVIC_EnableIRQ>
	}
}
 8003ca6:	bf00      	nop
 8003ca8:	3718      	adds	r7, #24
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	40004400 	.word	0x40004400
 8003cb4:	400200a8 	.word	0x400200a8
 8003cb8:	40020000 	.word	0x40020000
 8003cbc:	40020080 	.word	0x40020080
 8003cc0:	40004428 	.word	0x40004428

08003cc4 <configure_IRQ_USART_RX>:

void configure_IRQ_USART_RX(){
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	af00      	add	r7, sp, #0
	// Set RXNEIE to enable the RX interrupt
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8003cc8:	4b0b      	ldr	r3, [pc, #44]	; (8003cf8 <configure_IRQ_USART_RX+0x34>)
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	4a0a      	ldr	r2, [pc, #40]	; (8003cf8 <configure_IRQ_USART_RX+0x34>)
 8003cce:	f043 0320 	orr.w	r3, r3, #32
 8003cd2:	6013      	str	r3, [r2, #0]

	// Enable global interrupt for UART2
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 0, 0));
 8003cd4:	f7ff fe02 	bl	80038dc <__NVIC_GetPriorityGrouping>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	2200      	movs	r2, #0
 8003cdc:	2100      	movs	r1, #0
 8003cde:	4618      	mov	r0, r3
 8003ce0:	f7ff fe52 	bl	8003988 <NVIC_EncodePriority>
 8003ce4:	4603      	mov	r3, r0
 8003ce6:	4619      	mov	r1, r3
 8003ce8:	2026      	movs	r0, #38	; 0x26
 8003cea:	f7ff fe23 	bl	8003934 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8003cee:	2026      	movs	r0, #38	; 0x26
 8003cf0:	f7ff fe02 	bl	80038f8 <__NVIC_EnableIRQ>
}
 8003cf4:	bf00      	nop
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40004400 	.word	0x40004400

08003cfc <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 8003d00:	4b17      	ldr	r3, [pc, #92]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d006      	beq.n	8003d1a <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8003d0c:	4b14      	ldr	r3, [pc, #80]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	4a13      	ldr	r2, [pc, #76]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d12:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d16:	6053      	str	r3, [r2, #4]
		while(1);
 8003d18:	e7fe      	b.n	8003d18 <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8003d1a:	4b11      	ldr	r3, [pc, #68]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00b      	beq.n	8003d3e <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8003d26:	4b0e      	ldr	r3, [pc, #56]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	4a0d      	ldr	r2, [pc, #52]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d30:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 8003d32:	4b0c      	ldr	r3, [pc, #48]	; (8003d64 <DMA1_Channel7_IRQHandler+0x68>)
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a0b      	ldr	r2, [pc, #44]	; (8003d64 <DMA1_Channel7_IRQHandler+0x68>)
 8003d38:	f023 0301 	bic.w	r3, r3, #1
 8003d3c:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 8003d3e:	4b08      	ldr	r3, [pc, #32]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d005      	beq.n	8003d56 <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 8003d4a:	4b05      	ldr	r3, [pc, #20]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	4a04      	ldr	r2, [pc, #16]	; (8003d60 <DMA1_Channel7_IRQHandler+0x64>)
 8003d50:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003d54:	6053      	str	r3, [r2, #4]
	}
}
 8003d56:	bf00      	nop
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d5e:	4770      	bx	lr
 8003d60:	40020000 	.word	0x40020000
 8003d64:	40020080 	.word	0x40020080

08003d68 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003d68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003da0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003d6c:	f7ff fadc 	bl	8003328 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003d70:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003d72:	e003      	b.n	8003d7c <LoopCopyDataInit>

08003d74 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003d74:	4b0b      	ldr	r3, [pc, #44]	; (8003da4 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003d76:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003d78:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8003d7a:	3104      	adds	r1, #4

08003d7c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8003d7c:	480a      	ldr	r0, [pc, #40]	; (8003da8 <LoopForever+0xa>)
	ldr	r3, =_edata
 8003d7e:	4b0b      	ldr	r3, [pc, #44]	; (8003dac <LoopForever+0xe>)
	adds	r2, r0, r1
 8003d80:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003d82:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003d84:	d3f6      	bcc.n	8003d74 <CopyDataInit>
	ldr	r2, =_sbss
 8003d86:	4a0a      	ldr	r2, [pc, #40]	; (8003db0 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003d88:	e002      	b.n	8003d90 <LoopFillZerobss>

08003d8a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8003d8a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8003d8c:	f842 3b04 	str.w	r3, [r2], #4

08003d90 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003d90:	4b08      	ldr	r3, [pc, #32]	; (8003db4 <LoopForever+0x16>)
	cmp	r2, r3
 8003d92:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003d94:	d3f9      	bcc.n	8003d8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003d96:	f001 fd93 	bl	80058c0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003d9a:	f7fe fde9 	bl	8002970 <main>

08003d9e <LoopForever>:

LoopForever:
    b LoopForever
 8003d9e:	e7fe      	b.n	8003d9e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003da0:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003da4:	080077e8 	.word	0x080077e8
	ldr	r0, =_sdata
 8003da8:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003dac:	200005c8 	.word	0x200005c8
	ldr	r2, =_sbss
 8003db0:	200005c8 	.word	0x200005c8
	ldr	r3, = _ebss
 8003db4:	20000920 	.word	0x20000920

08003db8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003db8:	e7fe      	b.n	8003db8 <ADC1_2_IRQHandler>
	...

08003dbc <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8003dbc:	b480      	push	{r7}
 8003dbe:	b083      	sub	sp, #12
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8003dc4:	4b05      	ldr	r3, [pc, #20]	; (8003ddc <LL_EXTI_EnableIT_0_31+0x20>)
 8003dc6:	681a      	ldr	r2, [r3, #0]
 8003dc8:	4904      	ldr	r1, [pc, #16]	; (8003ddc <LL_EXTI_EnableIT_0_31+0x20>)
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	600b      	str	r3, [r1, #0]
}
 8003dd0:	bf00      	nop
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dda:	4770      	bx	lr
 8003ddc:	40010400 	.word	0x40010400

08003de0 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b083      	sub	sp, #12
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8003de8:	4b05      	ldr	r3, [pc, #20]	; (8003e00 <LL_EXTI_EnableIT_32_63+0x20>)
 8003dea:	6a1a      	ldr	r2, [r3, #32]
 8003dec:	4904      	ldr	r1, [pc, #16]	; (8003e00 <LL_EXTI_EnableIT_32_63+0x20>)
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	620b      	str	r3, [r1, #32]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	40010400 	.word	0x40010400

08003e04 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8003e0c:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <LL_EXTI_DisableIT_0_31+0x24>)
 8003e0e:	681a      	ldr	r2, [r3, #0]
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	43db      	mvns	r3, r3
 8003e14:	4904      	ldr	r1, [pc, #16]	; (8003e28 <LL_EXTI_DisableIT_0_31+0x24>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	600b      	str	r3, [r1, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	370c      	adds	r7, #12
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e24:	4770      	bx	lr
 8003e26:	bf00      	nop
 8003e28:	40010400 	.word	0x40010400

08003e2c <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8003e34:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <LL_EXTI_DisableIT_32_63+0x24>)
 8003e36:	6a1a      	ldr	r2, [r3, #32]
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	43db      	mvns	r3, r3
 8003e3c:	4904      	ldr	r1, [pc, #16]	; (8003e50 <LL_EXTI_DisableIT_32_63+0x24>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	620b      	str	r3, [r1, #32]
}
 8003e42:	bf00      	nop
 8003e44:	370c      	adds	r7, #12
 8003e46:	46bd      	mov	sp, r7
 8003e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4c:	4770      	bx	lr
 8003e4e:	bf00      	nop
 8003e50:	40010400 	.word	0x40010400

08003e54 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8003e5c:	4b05      	ldr	r3, [pc, #20]	; (8003e74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e5e:	685a      	ldr	r2, [r3, #4]
 8003e60:	4904      	ldr	r1, [pc, #16]	; (8003e74 <LL_EXTI_EnableEvent_0_31+0x20>)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	4313      	orrs	r3, r2
 8003e66:	604b      	str	r3, [r1, #4]

}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr
 8003e74:	40010400 	.word	0x40010400

08003e78 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b083      	sub	sp, #12
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003e82:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e84:	4904      	ldr	r1, [pc, #16]	; (8003e98 <LL_EXTI_EnableEvent_32_63+0x20>)
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	4313      	orrs	r3, r2
 8003e8a:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003e8c:	bf00      	nop
 8003e8e:	370c      	adds	r7, #12
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	40010400 	.word	0x40010400

08003e9c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b083      	sub	sp, #12
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8003ea4:	4b06      	ldr	r3, [pc, #24]	; (8003ec0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003ea6:	685a      	ldr	r2, [r3, #4]
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	43db      	mvns	r3, r3
 8003eac:	4904      	ldr	r1, [pc, #16]	; (8003ec0 <LL_EXTI_DisableEvent_0_31+0x24>)
 8003eae:	4013      	ands	r3, r2
 8003eb0:	604b      	str	r3, [r1, #4]
}
 8003eb2:	bf00      	nop
 8003eb4:	370c      	adds	r7, #12
 8003eb6:	46bd      	mov	sp, r7
 8003eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ebc:	4770      	bx	lr
 8003ebe:	bf00      	nop
 8003ec0:	40010400 	.word	0x40010400

08003ec4 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b083      	sub	sp, #12
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003ecc:	4b06      	ldr	r3, [pc, #24]	; (8003ee8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003ece:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	43db      	mvns	r3, r3
 8003ed4:	4904      	ldr	r1, [pc, #16]	; (8003ee8 <LL_EXTI_DisableEvent_32_63+0x24>)
 8003ed6:	4013      	ands	r3, r2
 8003ed8:	624b      	str	r3, [r1, #36]	; 0x24
}
 8003eda:	bf00      	nop
 8003edc:	370c      	adds	r7, #12
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee4:	4770      	bx	lr
 8003ee6:	bf00      	nop
 8003ee8:	40010400 	.word	0x40010400

08003eec <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003ef4:	4b05      	ldr	r3, [pc, #20]	; (8003f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003ef6:	689a      	ldr	r2, [r3, #8]
 8003ef8:	4904      	ldr	r1, [pc, #16]	; (8003f0c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	608b      	str	r3, [r1, #8]

}
 8003f00:	bf00      	nop
 8003f02:	370c      	adds	r7, #12
 8003f04:	46bd      	mov	sp, r7
 8003f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0a:	4770      	bx	lr
 8003f0c:	40010400 	.word	0x40010400

08003f10 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003f10:	b480      	push	{r7}
 8003f12:	b083      	sub	sp, #12
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8003f18:	4b05      	ldr	r3, [pc, #20]	; (8003f30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003f1a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f1c:	4904      	ldr	r1, [pc, #16]	; (8003f30 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4313      	orrs	r3, r2
 8003f22:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003f24:	bf00      	nop
 8003f26:	370c      	adds	r7, #12
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	40010400 	.word	0x40010400

08003f34 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003f34:	b480      	push	{r7}
 8003f36:	b083      	sub	sp, #12
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003f3c:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003f3e:	689a      	ldr	r2, [r3, #8]
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	43db      	mvns	r3, r3
 8003f44:	4904      	ldr	r1, [pc, #16]	; (8003f58 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003f46:	4013      	ands	r3, r2
 8003f48:	608b      	str	r3, [r1, #8]

}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40010400 	.word	0x40010400

08003f5c <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003f5c:	b480      	push	{r7}
 8003f5e:	b083      	sub	sp, #12
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003f64:	4b06      	ldr	r3, [pc, #24]	; (8003f80 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003f66:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	43db      	mvns	r3, r3
 8003f6c:	4904      	ldr	r1, [pc, #16]	; (8003f80 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003f6e:	4013      	ands	r3, r2
 8003f70:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003f72:	bf00      	nop
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
 8003f7e:	bf00      	nop
 8003f80:	40010400 	.word	0x40010400

08003f84 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003f8c:	4b05      	ldr	r3, [pc, #20]	; (8003fa4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f8e:	68da      	ldr	r2, [r3, #12]
 8003f90:	4904      	ldr	r1, [pc, #16]	; (8003fa4 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	4313      	orrs	r3, r2
 8003f96:	60cb      	str	r3, [r1, #12]
}
 8003f98:	bf00      	nop
 8003f9a:	370c      	adds	r7, #12
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa2:	4770      	bx	lr
 8003fa4:	40010400 	.word	0x40010400

08003fa8 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b083      	sub	sp, #12
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003fb4:	4904      	ldr	r1, [pc, #16]	; (8003fc8 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	4313      	orrs	r3, r2
 8003fba:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003fbc:	bf00      	nop
 8003fbe:	370c      	adds	r7, #12
 8003fc0:	46bd      	mov	sp, r7
 8003fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc6:	4770      	bx	lr
 8003fc8:	40010400 	.word	0x40010400

08003fcc <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003fd4:	4b06      	ldr	r3, [pc, #24]	; (8003ff0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003fd6:	68da      	ldr	r2, [r3, #12]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	43db      	mvns	r3, r3
 8003fdc:	4904      	ldr	r1, [pc, #16]	; (8003ff0 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003fde:	4013      	ands	r3, r2
 8003fe0:	60cb      	str	r3, [r1, #12]
}
 8003fe2:	bf00      	nop
 8003fe4:	370c      	adds	r7, #12
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40010400 	.word	0x40010400

08003ff4 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003ffc:	4b06      	ldr	r3, [pc, #24]	; (8004018 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003ffe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	43db      	mvns	r3, r3
 8004004:	4904      	ldr	r1, [pc, #16]	; (8004018 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8004006:	4013      	ands	r3, r2
 8004008:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800400a:	bf00      	nop
 800400c:	370c      	adds	r7, #12
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	40010400 	.word	0x40010400

0800401c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	7a1b      	ldrb	r3, [r3, #8]
 800402c:	2b00      	cmp	r3, #0
 800402e:	f000 80c6 	beq.w	80041be <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d05d      	beq.n	80040f6 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	7a5b      	ldrb	r3, [r3, #9]
 800403e:	2b01      	cmp	r3, #1
 8004040:	d00e      	beq.n	8004060 <LL_EXTI_Init+0x44>
 8004042:	2b02      	cmp	r3, #2
 8004044:	d017      	beq.n	8004076 <LL_EXTI_Init+0x5a>
 8004046:	2b00      	cmp	r3, #0
 8004048:	d120      	bne.n	800408c <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4618      	mov	r0, r3
 8004050:	f7ff ff24 	bl	8003e9c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	4618      	mov	r0, r3
 800405a:	f7ff feaf 	bl	8003dbc <LL_EXTI_EnableIT_0_31>
          break;
 800405e:	e018      	b.n	8004092 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7ff fecd 	bl	8003e04 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4618      	mov	r0, r3
 8004070:	f7ff fef0 	bl	8003e54 <LL_EXTI_EnableEvent_0_31>
          break;
 8004074:	e00d      	b.n	8004092 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff fe9e 	bl	8003dbc <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7ff fee5 	bl	8003e54 <LL_EXTI_EnableEvent_0_31>
          break;
 800408a:	e002      	b.n	8004092 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 800408c:	2301      	movs	r3, #1
 800408e:	60fb      	str	r3, [r7, #12]
          break;
 8004090:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	7a9b      	ldrb	r3, [r3, #10]
 8004096:	2b00      	cmp	r3, #0
 8004098:	d02d      	beq.n	80040f6 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	7a9b      	ldrb	r3, [r3, #10]
 800409e:	2b02      	cmp	r3, #2
 80040a0:	d00e      	beq.n	80040c0 <LL_EXTI_Init+0xa4>
 80040a2:	2b03      	cmp	r3, #3
 80040a4:	d017      	beq.n	80040d6 <LL_EXTI_Init+0xba>
 80040a6:	2b01      	cmp	r3, #1
 80040a8:	d120      	bne.n	80040ec <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4618      	mov	r0, r3
 80040b0:	f7ff ff8c 	bl	8003fcc <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4618      	mov	r0, r3
 80040ba:	f7ff ff17 	bl	8003eec <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80040be:	e01b      	b.n	80040f8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4618      	mov	r0, r3
 80040c6:	f7ff ff35 	bl	8003f34 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	4618      	mov	r0, r3
 80040d0:	f7ff ff58 	bl	8003f84 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80040d4:	e010      	b.n	80040f8 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	4618      	mov	r0, r3
 80040dc:	f7ff ff06 	bl	8003eec <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	4618      	mov	r0, r3
 80040e6:	f7ff ff4d 	bl	8003f84 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80040ea:	e005      	b.n	80040f8 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f043 0302 	orr.w	r3, r3, #2
 80040f2:	60fb      	str	r3, [r7, #12]
            break;
 80040f4:	e000      	b.n	80040f8 <LL_EXTI_Init+0xdc>
        }
      }
 80040f6:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	685b      	ldr	r3, [r3, #4]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d073      	beq.n	80041e8 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	7a5b      	ldrb	r3, [r3, #9]
 8004104:	2b01      	cmp	r3, #1
 8004106:	d00e      	beq.n	8004126 <LL_EXTI_Init+0x10a>
 8004108:	2b02      	cmp	r3, #2
 800410a:	d017      	beq.n	800413c <LL_EXTI_Init+0x120>
 800410c:	2b00      	cmp	r3, #0
 800410e:	d120      	bne.n	8004152 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	685b      	ldr	r3, [r3, #4]
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff fed5 	bl	8003ec4 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	685b      	ldr	r3, [r3, #4]
 800411e:	4618      	mov	r0, r3
 8004120:	f7ff fe5e 	bl	8003de0 <LL_EXTI_EnableIT_32_63>
          break;
 8004124:	e01a      	b.n	800415c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff fe7e 	bl	8003e2c <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	685b      	ldr	r3, [r3, #4]
 8004134:	4618      	mov	r0, r3
 8004136:	f7ff fe9f 	bl	8003e78 <LL_EXTI_EnableEvent_32_63>
          break;
 800413a:	e00f      	b.n	800415c <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	685b      	ldr	r3, [r3, #4]
 8004140:	4618      	mov	r0, r3
 8004142:	f7ff fe4d 	bl	8003de0 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	685b      	ldr	r3, [r3, #4]
 800414a:	4618      	mov	r0, r3
 800414c:	f7ff fe94 	bl	8003e78 <LL_EXTI_EnableEvent_32_63>
          break;
 8004150:	e004      	b.n	800415c <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	f043 0304 	orr.w	r3, r3, #4
 8004158:	60fb      	str	r3, [r7, #12]
          break;
 800415a:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	7a9b      	ldrb	r3, [r3, #10]
 8004160:	2b00      	cmp	r3, #0
 8004162:	d041      	beq.n	80041e8 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	7a9b      	ldrb	r3, [r3, #10]
 8004168:	2b02      	cmp	r3, #2
 800416a:	d00e      	beq.n	800418a <LL_EXTI_Init+0x16e>
 800416c:	2b03      	cmp	r3, #3
 800416e:	d017      	beq.n	80041a0 <LL_EXTI_Init+0x184>
 8004170:	2b01      	cmp	r3, #1
 8004172:	d120      	bne.n	80041b6 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	685b      	ldr	r3, [r3, #4]
 8004178:	4618      	mov	r0, r3
 800417a:	f7ff ff3b 	bl	8003ff4 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	685b      	ldr	r3, [r3, #4]
 8004182:	4618      	mov	r0, r3
 8004184:	f7ff fec4 	bl	8003f10 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8004188:	e02f      	b.n	80041ea <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	685b      	ldr	r3, [r3, #4]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff fee4 	bl	8003f5c <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	685b      	ldr	r3, [r3, #4]
 8004198:	4618      	mov	r0, r3
 800419a:	f7ff ff05 	bl	8003fa8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800419e:	e024      	b.n	80041ea <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	4618      	mov	r0, r3
 80041a6:	f7ff feb3 	bl	8003f10 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	685b      	ldr	r3, [r3, #4]
 80041ae:	4618      	mov	r0, r3
 80041b0:	f7ff fefa 	bl	8003fa8 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80041b4:	e019      	b.n	80041ea <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 80041b6:	2301      	movs	r3, #1
 80041b8:	60fb      	str	r3, [r7, #12]
            break;
 80041ba:	bf00      	nop
 80041bc:	e015      	b.n	80041ea <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	4618      	mov	r0, r3
 80041c4:	f7ff fe1e 	bl	8003e04 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7ff fe65 	bl	8003e9c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	685b      	ldr	r3, [r3, #4]
 80041d6:	4618      	mov	r0, r3
 80041d8:	f7ff fe28 	bl	8003e2c <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	4618      	mov	r0, r3
 80041e2:	f7ff fe6f 	bl	8003ec4 <LL_EXTI_DisableEvent_32_63>
 80041e6:	e000      	b.n	80041ea <LL_EXTI_Init+0x1ce>
      }
 80041e8:	bf00      	nop
  }

  return status;
 80041ea:	68fb      	ldr	r3, [r7, #12]
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	bd80      	pop	{r7, pc}

080041f4 <LL_GPIO_SetPinMode>:
{
 80041f4:	b480      	push	{r7}
 80041f6:	b08b      	sub	sp, #44	; 0x2c
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	613b      	str	r3, [r7, #16]
  return result;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800421a:	2320      	movs	r3, #32
 800421c:	e003      	b.n	8004226 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800421e:	69bb      	ldr	r3, [r7, #24]
 8004220:	fab3 f383 	clz	r3, r3
 8004224:	b2db      	uxtb	r3, r3
 8004226:	005b      	lsls	r3, r3, #1
 8004228:	2103      	movs	r1, #3
 800422a:	fa01 f303 	lsl.w	r3, r1, r3
 800422e:	43db      	mvns	r3, r3
 8004230:	401a      	ands	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004236:	6a3b      	ldr	r3, [r7, #32]
 8004238:	fa93 f3a3 	rbit	r3, r3
 800423c:	61fb      	str	r3, [r7, #28]
  return result;
 800423e:	69fb      	ldr	r3, [r7, #28]
 8004240:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004242:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004244:	2b00      	cmp	r3, #0
 8004246:	d101      	bne.n	800424c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8004248:	2320      	movs	r3, #32
 800424a:	e003      	b.n	8004254 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800424c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800424e:	fab3 f383 	clz	r3, r3
 8004252:	b2db      	uxtb	r3, r3
 8004254:	005b      	lsls	r3, r3, #1
 8004256:	6879      	ldr	r1, [r7, #4]
 8004258:	fa01 f303 	lsl.w	r3, r1, r3
 800425c:	431a      	orrs	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	601a      	str	r2, [r3, #0]
}
 8004262:	bf00      	nop
 8004264:	372c      	adds	r7, #44	; 0x2c
 8004266:	46bd      	mov	sp, r7
 8004268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426c:	4770      	bx	lr

0800426e <LL_GPIO_SetPinOutputType>:
{
 800426e:	b480      	push	{r7}
 8004270:	b085      	sub	sp, #20
 8004272:	af00      	add	r7, sp, #0
 8004274:	60f8      	str	r0, [r7, #12]
 8004276:	60b9      	str	r1, [r7, #8]
 8004278:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	685a      	ldr	r2, [r3, #4]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	43db      	mvns	r3, r3
 8004282:	401a      	ands	r2, r3
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	6879      	ldr	r1, [r7, #4]
 8004288:	fb01 f303 	mul.w	r3, r1, r3
 800428c:	431a      	orrs	r2, r3
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	605a      	str	r2, [r3, #4]
}
 8004292:	bf00      	nop
 8004294:	3714      	adds	r7, #20
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <LL_GPIO_SetPinSpeed>:
{
 800429e:	b480      	push	{r7}
 80042a0:	b08b      	sub	sp, #44	; 0x2c
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	60f8      	str	r0, [r7, #12]
 80042a6:	60b9      	str	r1, [r7, #8]
 80042a8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	689a      	ldr	r2, [r3, #8]
 80042ae:	68bb      	ldr	r3, [r7, #8]
 80042b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	fa93 f3a3 	rbit	r3, r3
 80042b8:	613b      	str	r3, [r7, #16]
  return result;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d101      	bne.n	80042c8 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80042c4:	2320      	movs	r3, #32
 80042c6:	e003      	b.n	80042d0 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	fab3 f383 	clz	r3, r3
 80042ce:	b2db      	uxtb	r3, r3
 80042d0:	005b      	lsls	r3, r3, #1
 80042d2:	2103      	movs	r1, #3
 80042d4:	fa01 f303 	lsl.w	r3, r1, r3
 80042d8:	43db      	mvns	r3, r3
 80042da:	401a      	ands	r2, r3
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042e0:	6a3b      	ldr	r3, [r7, #32]
 80042e2:	fa93 f3a3 	rbit	r3, r3
 80042e6:	61fb      	str	r3, [r7, #28]
  return result;
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80042ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d101      	bne.n	80042f6 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80042f2:	2320      	movs	r3, #32
 80042f4:	e003      	b.n	80042fe <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80042f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f8:	fab3 f383 	clz	r3, r3
 80042fc:	b2db      	uxtb	r3, r3
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	6879      	ldr	r1, [r7, #4]
 8004302:	fa01 f303 	lsl.w	r3, r1, r3
 8004306:	431a      	orrs	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	609a      	str	r2, [r3, #8]
}
 800430c:	bf00      	nop
 800430e:	372c      	adds	r7, #44	; 0x2c
 8004310:	46bd      	mov	sp, r7
 8004312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004316:	4770      	bx	lr

08004318 <LL_GPIO_SetPinPull>:
{
 8004318:	b480      	push	{r7}
 800431a:	b08b      	sub	sp, #44	; 0x2c
 800431c:	af00      	add	r7, sp, #0
 800431e:	60f8      	str	r0, [r7, #12]
 8004320:	60b9      	str	r1, [r7, #8]
 8004322:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	68da      	ldr	r2, [r3, #12]
 8004328:	68bb      	ldr	r3, [r7, #8]
 800432a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800432c:	697b      	ldr	r3, [r7, #20]
 800432e:	fa93 f3a3 	rbit	r3, r3
 8004332:	613b      	str	r3, [r7, #16]
  return result;
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004338:	69bb      	ldr	r3, [r7, #24]
 800433a:	2b00      	cmp	r3, #0
 800433c:	d101      	bne.n	8004342 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800433e:	2320      	movs	r3, #32
 8004340:	e003      	b.n	800434a <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	fab3 f383 	clz	r3, r3
 8004348:	b2db      	uxtb	r3, r3
 800434a:	005b      	lsls	r3, r3, #1
 800434c:	2103      	movs	r1, #3
 800434e:	fa01 f303 	lsl.w	r3, r1, r3
 8004352:	43db      	mvns	r3, r3
 8004354:	401a      	ands	r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	fa93 f3a3 	rbit	r3, r3
 8004360:	61fb      	str	r3, [r7, #28]
  return result;
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004368:	2b00      	cmp	r3, #0
 800436a:	d101      	bne.n	8004370 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800436c:	2320      	movs	r3, #32
 800436e:	e003      	b.n	8004378 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8004370:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004372:	fab3 f383 	clz	r3, r3
 8004376:	b2db      	uxtb	r3, r3
 8004378:	005b      	lsls	r3, r3, #1
 800437a:	6879      	ldr	r1, [r7, #4]
 800437c:	fa01 f303 	lsl.w	r3, r1, r3
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	60da      	str	r2, [r3, #12]
}
 8004386:	bf00      	nop
 8004388:	372c      	adds	r7, #44	; 0x2c
 800438a:	46bd      	mov	sp, r7
 800438c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004390:	4770      	bx	lr

08004392 <LL_GPIO_SetAFPin_0_7>:
{
 8004392:	b480      	push	{r7}
 8004394:	b08b      	sub	sp, #44	; 0x2c
 8004396:	af00      	add	r7, sp, #0
 8004398:	60f8      	str	r0, [r7, #12]
 800439a:	60b9      	str	r1, [r7, #8]
 800439c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6a1a      	ldr	r2, [r3, #32]
 80043a2:	68bb      	ldr	r3, [r7, #8]
 80043a4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	fa93 f3a3 	rbit	r3, r3
 80043ac:	613b      	str	r3, [r7, #16]
  return result;
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80043b8:	2320      	movs	r3, #32
 80043ba:	e003      	b.n	80043c4 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	fab3 f383 	clz	r3, r3
 80043c2:	b2db      	uxtb	r3, r3
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	210f      	movs	r1, #15
 80043c8:	fa01 f303 	lsl.w	r3, r1, r3
 80043cc:	43db      	mvns	r3, r3
 80043ce:	401a      	ands	r2, r3
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043d4:	6a3b      	ldr	r3, [r7, #32]
 80043d6:	fa93 f3a3 	rbit	r3, r3
 80043da:	61fb      	str	r3, [r7, #28]
  return result;
 80043dc:	69fb      	ldr	r3, [r7, #28]
 80043de:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d101      	bne.n	80043ea <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80043e6:	2320      	movs	r3, #32
 80043e8:	e003      	b.n	80043f2 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80043ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ec:	fab3 f383 	clz	r3, r3
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	009b      	lsls	r3, r3, #2
 80043f4:	6879      	ldr	r1, [r7, #4]
 80043f6:	fa01 f303 	lsl.w	r3, r1, r3
 80043fa:	431a      	orrs	r2, r3
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	621a      	str	r2, [r3, #32]
}
 8004400:	bf00      	nop
 8004402:	372c      	adds	r7, #44	; 0x2c
 8004404:	46bd      	mov	sp, r7
 8004406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440a:	4770      	bx	lr

0800440c <LL_GPIO_SetAFPin_8_15>:
{
 800440c:	b480      	push	{r7}
 800440e:	b08b      	sub	sp, #44	; 0x2c
 8004410:	af00      	add	r7, sp, #0
 8004412:	60f8      	str	r0, [r7, #12]
 8004414:	60b9      	str	r1, [r7, #8]
 8004416:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	0a1b      	lsrs	r3, r3, #8
 8004420:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	fa93 f3a3 	rbit	r3, r3
 8004428:	613b      	str	r3, [r7, #16]
  return result;
 800442a:	693b      	ldr	r3, [r7, #16]
 800442c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8004434:	2320      	movs	r3, #32
 8004436:	e003      	b.n	8004440 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8004438:	69bb      	ldr	r3, [r7, #24]
 800443a:	fab3 f383 	clz	r3, r3
 800443e:	b2db      	uxtb	r3, r3
 8004440:	009b      	lsls	r3, r3, #2
 8004442:	210f      	movs	r1, #15
 8004444:	fa01 f303 	lsl.w	r3, r1, r3
 8004448:	43db      	mvns	r3, r3
 800444a:	401a      	ands	r2, r3
 800444c:	68bb      	ldr	r3, [r7, #8]
 800444e:	0a1b      	lsrs	r3, r3, #8
 8004450:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004452:	6a3b      	ldr	r3, [r7, #32]
 8004454:	fa93 f3a3 	rbit	r3, r3
 8004458:	61fb      	str	r3, [r7, #28]
  return result;
 800445a:	69fb      	ldr	r3, [r7, #28]
 800445c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800445e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004460:	2b00      	cmp	r3, #0
 8004462:	d101      	bne.n	8004468 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8004464:	2320      	movs	r3, #32
 8004466:	e003      	b.n	8004470 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8004468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800446a:	fab3 f383 	clz	r3, r3
 800446e:	b2db      	uxtb	r3, r3
 8004470:	009b      	lsls	r3, r3, #2
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	fa01 f303 	lsl.w	r3, r1, r3
 8004478:	431a      	orrs	r2, r3
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	625a      	str	r2, [r3, #36]	; 0x24
}
 800447e:	bf00      	nop
 8004480:	372c      	adds	r7, #44	; 0x2c
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr

0800448a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800448a:	b580      	push	{r7, lr}
 800448c:	b088      	sub	sp, #32
 800448e:	af00      	add	r7, sp, #0
 8004490:	6078      	str	r0, [r7, #4]
 8004492:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	fa93 f3a3 	rbit	r3, r3
 80044a0:	60fb      	str	r3, [r7, #12]
  return result;
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d101      	bne.n	80044b0 <LL_GPIO_Init+0x26>
    return 32U;
 80044ac:	2320      	movs	r3, #32
 80044ae:	e003      	b.n	80044b8 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	fab3 f383 	clz	r3, r3
 80044b6:	b2db      	uxtb	r3, r3
 80044b8:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80044ba:	e040      	b.n	800453e <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80044bc:	683b      	ldr	r3, [r7, #0]
 80044be:	681a      	ldr	r2, [r3, #0]
 80044c0:	2101      	movs	r1, #1
 80044c2:	69fb      	ldr	r3, [r7, #28]
 80044c4:	fa01 f303 	lsl.w	r3, r1, r3
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80044cc:	69bb      	ldr	r3, [r7, #24]
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d032      	beq.n	8004538 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80044d2:	683b      	ldr	r3, [r7, #0]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	461a      	mov	r2, r3
 80044d8:	69b9      	ldr	r1, [r7, #24]
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff fe8a 	bl	80041f4 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	2b01      	cmp	r3, #1
 80044e6:	d003      	beq.n	80044f0 <LL_GPIO_Init+0x66>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	685b      	ldr	r3, [r3, #4]
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d106      	bne.n	80044fe <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80044f0:	683b      	ldr	r3, [r7, #0]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	461a      	mov	r2, r3
 80044f6:	69b9      	ldr	r1, [r7, #24]
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f7ff fed0 	bl	800429e <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	691b      	ldr	r3, [r3, #16]
 8004502:	461a      	mov	r2, r3
 8004504:	69b9      	ldr	r1, [r7, #24]
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	f7ff ff06 	bl	8004318 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	685b      	ldr	r3, [r3, #4]
 8004510:	2b02      	cmp	r3, #2
 8004512:	d111      	bne.n	8004538 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8004514:	69bb      	ldr	r3, [r7, #24]
 8004516:	2bff      	cmp	r3, #255	; 0xff
 8004518:	d807      	bhi.n	800452a <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800451a:	683b      	ldr	r3, [r7, #0]
 800451c:	695b      	ldr	r3, [r3, #20]
 800451e:	461a      	mov	r2, r3
 8004520:	69b9      	ldr	r1, [r7, #24]
 8004522:	6878      	ldr	r0, [r7, #4]
 8004524:	f7ff ff35 	bl	8004392 <LL_GPIO_SetAFPin_0_7>
 8004528:	e006      	b.n	8004538 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	461a      	mov	r2, r3
 8004530:	69b9      	ldr	r1, [r7, #24]
 8004532:	6878      	ldr	r0, [r7, #4]
 8004534:	f7ff ff6a 	bl	800440c <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8004538:	69fb      	ldr	r3, [r7, #28]
 800453a:	3301      	adds	r3, #1
 800453c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	681a      	ldr	r2, [r3, #0]
 8004542:	69fb      	ldr	r3, [r7, #28]
 8004544:	fa22 f303 	lsr.w	r3, r2, r3
 8004548:	2b00      	cmp	r3, #0
 800454a:	d1b7      	bne.n	80044bc <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	685b      	ldr	r3, [r3, #4]
 8004550:	2b01      	cmp	r3, #1
 8004552:	d003      	beq.n	800455c <LL_GPIO_Init+0xd2>
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	2b02      	cmp	r3, #2
 800455a:	d107      	bne.n	800456c <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	6819      	ldr	r1, [r3, #0]
 8004560:	683b      	ldr	r3, [r7, #0]
 8004562:	68db      	ldr	r3, [r3, #12]
 8004564:	461a      	mov	r2, r3
 8004566:	6878      	ldr	r0, [r7, #4]
 8004568:	f7ff fe81 	bl	800426e <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 800456c:	2300      	movs	r3, #0
}
 800456e:	4618      	mov	r0, r3
 8004570:	3720      	adds	r7, #32
 8004572:	46bd      	mov	sp, r7
 8004574:	bd80      	pop	{r7, pc}
	...

08004578 <LL_RCC_HSI_IsReady>:
{
 8004578:	b480      	push	{r7}
 800457a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800457c:	4b07      	ldr	r3, [pc, #28]	; (800459c <LL_RCC_HSI_IsReady+0x24>)
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004584:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004588:	d101      	bne.n	800458e <LL_RCC_HSI_IsReady+0x16>
 800458a:	2301      	movs	r3, #1
 800458c:	e000      	b.n	8004590 <LL_RCC_HSI_IsReady+0x18>
 800458e:	2300      	movs	r3, #0
}
 8004590:	4618      	mov	r0, r3
 8004592:	46bd      	mov	sp, r7
 8004594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004598:	4770      	bx	lr
 800459a:	bf00      	nop
 800459c:	40021000 	.word	0x40021000

080045a0 <LL_RCC_LSE_IsReady>:
{
 80045a0:	b480      	push	{r7}
 80045a2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80045a4:	4b07      	ldr	r3, [pc, #28]	; (80045c4 <LL_RCC_LSE_IsReady+0x24>)
 80045a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045aa:	f003 0302 	and.w	r3, r3, #2
 80045ae:	2b02      	cmp	r3, #2
 80045b0:	d101      	bne.n	80045b6 <LL_RCC_LSE_IsReady+0x16>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <LL_RCC_LSE_IsReady+0x18>
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40021000 	.word	0x40021000

080045c8 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80045c8:	b480      	push	{r7}
 80045ca:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80045cc:	4b06      	ldr	r3, [pc, #24]	; (80045e8 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f003 0308 	and.w	r3, r3, #8
 80045d4:	2b08      	cmp	r3, #8
 80045d6:	d101      	bne.n	80045dc <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80045d8:	2301      	movs	r3, #1
 80045da:	e000      	b.n	80045de <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80045dc:	2300      	movs	r3, #0
}
 80045de:	4618      	mov	r0, r3
 80045e0:	46bd      	mov	sp, r7
 80045e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045e6:	4770      	bx	lr
 80045e8:	40021000 	.word	0x40021000

080045ec <LL_RCC_MSI_GetRange>:
{
 80045ec:	b480      	push	{r7}
 80045ee:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80045f0:	4b04      	ldr	r3, [pc, #16]	; (8004604 <LL_RCC_MSI_GetRange+0x18>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80045f8:	4618      	mov	r0, r3
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr
 8004602:	bf00      	nop
 8004604:	40021000 	.word	0x40021000

08004608 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8004608:	b480      	push	{r7}
 800460a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 800460c:	4b04      	ldr	r3, [pc, #16]	; (8004620 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800460e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004612:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8004616:	4618      	mov	r0, r3
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr
 8004620:	40021000 	.word	0x40021000

08004624 <LL_RCC_GetSysClkSource>:
{
 8004624:	b480      	push	{r7}
 8004626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8004628:	4b04      	ldr	r3, [pc, #16]	; (800463c <LL_RCC_GetSysClkSource+0x18>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
}
 8004630:	4618      	mov	r0, r3
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000

08004640 <LL_RCC_GetAHBPrescaler>:
{
 8004640:	b480      	push	{r7}
 8004642:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8004644:	4b04      	ldr	r3, [pc, #16]	; (8004658 <LL_RCC_GetAHBPrescaler+0x18>)
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800464c:	4618      	mov	r0, r3
 800464e:	46bd      	mov	sp, r7
 8004650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004654:	4770      	bx	lr
 8004656:	bf00      	nop
 8004658:	40021000 	.word	0x40021000

0800465c <LL_RCC_GetAPB1Prescaler>:
{
 800465c:	b480      	push	{r7}
 800465e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8004660:	4b04      	ldr	r3, [pc, #16]	; (8004674 <LL_RCC_GetAPB1Prescaler+0x18>)
 8004662:	689b      	ldr	r3, [r3, #8]
 8004664:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8004668:	4618      	mov	r0, r3
 800466a:	46bd      	mov	sp, r7
 800466c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004670:	4770      	bx	lr
 8004672:	bf00      	nop
 8004674:	40021000 	.word	0x40021000

08004678 <LL_RCC_GetAPB2Prescaler>:
{
 8004678:	b480      	push	{r7}
 800467a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 800467c:	4b04      	ldr	r3, [pc, #16]	; (8004690 <LL_RCC_GetAPB2Prescaler+0x18>)
 800467e:	689b      	ldr	r3, [r3, #8]
 8004680:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8004684:	4618      	mov	r0, r3
 8004686:	46bd      	mov	sp, r7
 8004688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468c:	4770      	bx	lr
 800468e:	bf00      	nop
 8004690:	40021000 	.word	0x40021000

08004694 <LL_RCC_GetUSARTClockSource>:
{
 8004694:	b480      	push	{r7}
 8004696:	b083      	sub	sp, #12
 8004698:	af00      	add	r7, sp, #0
 800469a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800469c:	4b06      	ldr	r3, [pc, #24]	; (80046b8 <LL_RCC_GetUSARTClockSource+0x24>)
 800469e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	401a      	ands	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	041b      	lsls	r3, r3, #16
 80046aa:	4313      	orrs	r3, r2
}
 80046ac:	4618      	mov	r0, r3
 80046ae:	370c      	adds	r7, #12
 80046b0:	46bd      	mov	sp, r7
 80046b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b6:	4770      	bx	lr
 80046b8:	40021000 	.word	0x40021000

080046bc <LL_RCC_GetUARTClockSource>:
{
 80046bc:	b480      	push	{r7}
 80046be:	b083      	sub	sp, #12
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80046c4:	4b06      	ldr	r3, [pc, #24]	; (80046e0 <LL_RCC_GetUARTClockSource+0x24>)
 80046c6:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	401a      	ands	r2, r3
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	041b      	lsls	r3, r3, #16
 80046d2:	4313      	orrs	r3, r2
}
 80046d4:	4618      	mov	r0, r3
 80046d6:	370c      	adds	r7, #12
 80046d8:	46bd      	mov	sp, r7
 80046da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046de:	4770      	bx	lr
 80046e0:	40021000 	.word	0x40021000

080046e4 <LL_RCC_PLL_GetMainSource>:
{
 80046e4:	b480      	push	{r7}
 80046e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80046e8:	4b04      	ldr	r3, [pc, #16]	; (80046fc <LL_RCC_PLL_GetMainSource+0x18>)
 80046ea:	68db      	ldr	r3, [r3, #12]
 80046ec:	f003 0303 	and.w	r3, r3, #3
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	46bd      	mov	sp, r7
 80046f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f8:	4770      	bx	lr
 80046fa:	bf00      	nop
 80046fc:	40021000 	.word	0x40021000

08004700 <LL_RCC_PLL_GetN>:
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004704:	4b04      	ldr	r3, [pc, #16]	; (8004718 <LL_RCC_PLL_GetN+0x18>)
 8004706:	68db      	ldr	r3, [r3, #12]
 8004708:	0a1b      	lsrs	r3, r3, #8
 800470a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800470e:	4618      	mov	r0, r3
 8004710:	46bd      	mov	sp, r7
 8004712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004716:	4770      	bx	lr
 8004718:	40021000 	.word	0x40021000

0800471c <LL_RCC_PLL_GetR>:
{
 800471c:	b480      	push	{r7}
 800471e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004720:	4b04      	ldr	r3, [pc, #16]	; (8004734 <LL_RCC_PLL_GetR+0x18>)
 8004722:	68db      	ldr	r3, [r3, #12]
 8004724:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8004728:	4618      	mov	r0, r3
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	40021000 	.word	0x40021000

08004738 <LL_RCC_PLL_GetDivider>:
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <LL_RCC_PLL_GetDivider+0x18>)
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8004744:	4618      	mov	r0, r3
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr
 800474e:	bf00      	nop
 8004750:	40021000 	.word	0x40021000

08004754 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800475c:	2300      	movs	r3, #0
 800475e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	2b03      	cmp	r3, #3
 8004764:	d137      	bne.n	80047d6 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004766:	6878      	ldr	r0, [r7, #4]
 8004768:	f7ff ff94 	bl	8004694 <LL_RCC_GetUSARTClockSource>
 800476c:	4603      	mov	r3, r0
 800476e:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8004772:	2b03      	cmp	r3, #3
 8004774:	f200 80b2 	bhi.w	80048dc <LL_RCC_GetUSARTClockFreq+0x188>
 8004778:	a201      	add	r2, pc, #4	; (adr r2, 8004780 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800477a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477e:	bf00      	nop
 8004780:	080047bf 	.word	0x080047bf
 8004784:	08004791 	.word	0x08004791
 8004788:	08004799 	.word	0x08004799
 800478c:	080047ab 	.word	0x080047ab
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004790:	f000 f952 	bl	8004a38 <RCC_GetSystemClockFreq>
 8004794:	60f8      	str	r0, [r7, #12]
        break;
 8004796:	e0b2      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004798:	f7ff feee 	bl	8004578 <LL_RCC_HSI_IsReady>
 800479c:	4603      	mov	r3, r0
 800479e:	2b00      	cmp	r3, #0
 80047a0:	f000 809e 	beq.w	80048e0 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80047a4:	4b58      	ldr	r3, [pc, #352]	; (8004908 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80047a6:	60fb      	str	r3, [r7, #12]
        }
        break;
 80047a8:	e09a      	b.n	80048e0 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80047aa:	f7ff fef9 	bl	80045a0 <LL_RCC_LSE_IsReady>
 80047ae:	4603      	mov	r3, r0
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	f000 8097 	beq.w	80048e4 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80047b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80047ba:	60fb      	str	r3, [r7, #12]
        }
        break;
 80047bc:	e092      	b.n	80048e4 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80047be:	f000 f93b 	bl	8004a38 <RCC_GetSystemClockFreq>
 80047c2:	4603      	mov	r3, r0
 80047c4:	4618      	mov	r0, r3
 80047c6:	f000 f9c7 	bl	8004b58 <RCC_GetHCLKClockFreq>
 80047ca:	4603      	mov	r3, r0
 80047cc:	4618      	mov	r0, r3
 80047ce:	f000 f9ed 	bl	8004bac <RCC_GetPCLK2ClockFreq>
 80047d2:	60f8      	str	r0, [r7, #12]
        break;
 80047d4:	e093      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2b0c      	cmp	r3, #12
 80047da:	d146      	bne.n	800486a <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f7ff ff59 	bl	8004694 <LL_RCC_GetUSARTClockSource>
 80047e2:	4603      	mov	r3, r0
 80047e4:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80047e8:	2b0c      	cmp	r3, #12
 80047ea:	d87d      	bhi.n	80048e8 <LL_RCC_GetUSARTClockFreq+0x194>
 80047ec:	a201      	add	r2, pc, #4	; (adr r2, 80047f4 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80047ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047f2:	bf00      	nop
 80047f4:	08004853 	.word	0x08004853
 80047f8:	080048e9 	.word	0x080048e9
 80047fc:	080048e9 	.word	0x080048e9
 8004800:	080048e9 	.word	0x080048e9
 8004804:	08004829 	.word	0x08004829
 8004808:	080048e9 	.word	0x080048e9
 800480c:	080048e9 	.word	0x080048e9
 8004810:	080048e9 	.word	0x080048e9
 8004814:	08004831 	.word	0x08004831
 8004818:	080048e9 	.word	0x080048e9
 800481c:	080048e9 	.word	0x080048e9
 8004820:	080048e9 	.word	0x080048e9
 8004824:	08004841 	.word	0x08004841
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8004828:	f000 f906 	bl	8004a38 <RCC_GetSystemClockFreq>
 800482c:	60f8      	str	r0, [r7, #12]
        break;
 800482e:	e066      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8004830:	f7ff fea2 	bl	8004578 <LL_RCC_HSI_IsReady>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d058      	beq.n	80048ec <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800483a:	4b33      	ldr	r3, [pc, #204]	; (8004908 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800483c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800483e:	e055      	b.n	80048ec <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8004840:	f7ff feae 	bl	80045a0 <LL_RCC_LSE_IsReady>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d052      	beq.n	80048f0 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800484a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800484e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8004850:	e04e      	b.n	80048f0 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8004852:	f000 f8f1 	bl	8004a38 <RCC_GetSystemClockFreq>
 8004856:	4603      	mov	r3, r0
 8004858:	4618      	mov	r0, r3
 800485a:	f000 f97d 	bl	8004b58 <RCC_GetHCLKClockFreq>
 800485e:	4603      	mov	r3, r0
 8004860:	4618      	mov	r0, r3
 8004862:	f000 f98f 	bl	8004b84 <RCC_GetPCLK1ClockFreq>
 8004866:	60f8      	str	r0, [r7, #12]
        break;
 8004868:	e049      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	2b30      	cmp	r3, #48	; 0x30
 800486e:	d141      	bne.n	80048f4 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f7ff ff0f 	bl	8004694 <LL_RCC_GetUSARTClockSource>
 8004876:	4603      	mov	r3, r0
 8004878:	4a24      	ldr	r2, [pc, #144]	; (800490c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d00d      	beq.n	800489a <LL_RCC_GetUSARTClockFreq+0x146>
 800487e:	4a23      	ldr	r2, [pc, #140]	; (800490c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8004880:	4293      	cmp	r3, r2
 8004882:	d803      	bhi.n	800488c <LL_RCC_GetUSARTClockFreq+0x138>
 8004884:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004888:	d01c      	beq.n	80048c4 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 800488a:	e038      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800488c:	4a20      	ldr	r2, [pc, #128]	; (8004910 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d007      	beq.n	80048a2 <LL_RCC_GetUSARTClockFreq+0x14e>
 8004892:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8004896:	d00c      	beq.n	80048b2 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8004898:	e031      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 800489a:	f000 f8cd 	bl	8004a38 <RCC_GetSystemClockFreq>
 800489e:	60f8      	str	r0, [r7, #12]
          break;
 80048a0:	e02d      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80048a2:	f7ff fe69 	bl	8004578 <LL_RCC_HSI_IsReady>
 80048a6:	4603      	mov	r3, r0
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d025      	beq.n	80048f8 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 80048ac:	4b16      	ldr	r3, [pc, #88]	; (8004908 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80048ae:	60fb      	str	r3, [r7, #12]
          break;
 80048b0:	e022      	b.n	80048f8 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 80048b2:	f7ff fe75 	bl	80045a0 <LL_RCC_LSE_IsReady>
 80048b6:	4603      	mov	r3, r0
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d01f      	beq.n	80048fc <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 80048bc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80048c0:	60fb      	str	r3, [r7, #12]
          break;
 80048c2:	e01b      	b.n	80048fc <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80048c4:	f000 f8b8 	bl	8004a38 <RCC_GetSystemClockFreq>
 80048c8:	4603      	mov	r3, r0
 80048ca:	4618      	mov	r0, r3
 80048cc:	f000 f944 	bl	8004b58 <RCC_GetHCLKClockFreq>
 80048d0:	4603      	mov	r3, r0
 80048d2:	4618      	mov	r0, r3
 80048d4:	f000 f956 	bl	8004b84 <RCC_GetPCLK1ClockFreq>
 80048d8:	60f8      	str	r0, [r7, #12]
          break;
 80048da:	e010      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048dc:	bf00      	nop
 80048de:	e00e      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048e0:	bf00      	nop
 80048e2:	e00c      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048e4:	bf00      	nop
 80048e6:	e00a      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048e8:	bf00      	nop
 80048ea:	e008      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048ec:	bf00      	nop
 80048ee:	e006      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80048f0:	bf00      	nop
 80048f2:	e004      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 80048f4:	bf00      	nop
 80048f6:	e002      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80048f8:	bf00      	nop
 80048fa:	e000      	b.n	80048fe <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80048fc:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 80048fe:	68fb      	ldr	r3, [r7, #12]
}
 8004900:	4618      	mov	r0, r3
 8004902:	3710      	adds	r7, #16
 8004904:	46bd      	mov	sp, r7
 8004906:	bd80      	pop	{r7, pc}
 8004908:	00f42400 	.word	0x00f42400
 800490c:	00300010 	.word	0x00300010
 8004910:	00300020 	.word	0x00300020

08004914 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 800491c:	2300      	movs	r3, #0
 800491e:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2bc0      	cmp	r3, #192	; 0xc0
 8004924:	d135      	bne.n	8004992 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7ff fec8 	bl	80046bc <LL_RCC_GetUARTClockSource>
 800492c:	4603      	mov	r3, r0
 800492e:	4a3d      	ldr	r2, [pc, #244]	; (8004a24 <LL_RCC_GetUARTClockFreq+0x110>)
 8004930:	4293      	cmp	r3, r2
 8004932:	d00d      	beq.n	8004950 <LL_RCC_GetUARTClockFreq+0x3c>
 8004934:	4a3b      	ldr	r2, [pc, #236]	; (8004a24 <LL_RCC_GetUARTClockFreq+0x110>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d803      	bhi.n	8004942 <LL_RCC_GetUARTClockFreq+0x2e>
 800493a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800493e:	d01c      	beq.n	800497a <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8004940:	e02c      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8004942:	4a39      	ldr	r2, [pc, #228]	; (8004a28 <LL_RCC_GetUARTClockFreq+0x114>)
 8004944:	4293      	cmp	r3, r2
 8004946:	d007      	beq.n	8004958 <LL_RCC_GetUARTClockFreq+0x44>
 8004948:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 800494c:	d00c      	beq.n	8004968 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 800494e:	e025      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8004950:	f000 f872 	bl	8004a38 <RCC_GetSystemClockFreq>
 8004954:	60f8      	str	r0, [r7, #12]
        break;
 8004956:	e021      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8004958:	f7ff fe0e 	bl	8004578 <LL_RCC_HSI_IsReady>
 800495c:	4603      	mov	r3, r0
 800495e:	2b00      	cmp	r3, #0
 8004960:	d019      	beq.n	8004996 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8004962:	4b32      	ldr	r3, [pc, #200]	; (8004a2c <LL_RCC_GetUARTClockFreq+0x118>)
 8004964:	60fb      	str	r3, [r7, #12]
        break;
 8004966:	e016      	b.n	8004996 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8004968:	f7ff fe1a 	bl	80045a0 <LL_RCC_LSE_IsReady>
 800496c:	4603      	mov	r3, r0
 800496e:	2b00      	cmp	r3, #0
 8004970:	d013      	beq.n	800499a <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8004972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004976:	60fb      	str	r3, [r7, #12]
        break;
 8004978:	e00f      	b.n	800499a <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800497a:	f000 f85d 	bl	8004a38 <RCC_GetSystemClockFreq>
 800497e:	4603      	mov	r3, r0
 8004980:	4618      	mov	r0, r3
 8004982:	f000 f8e9 	bl	8004b58 <RCC_GetHCLKClockFreq>
 8004986:	4603      	mov	r3, r0
 8004988:	4618      	mov	r0, r3
 800498a:	f000 f8fb 	bl	8004b84 <RCC_GetPCLK1ClockFreq>
 800498e:	60f8      	str	r0, [r7, #12]
        break;
 8004990:	e004      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8004992:	bf00      	nop
 8004994:	e002      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8004996:	bf00      	nop
 8004998:	e000      	b.n	800499c <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800499a:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80049a2:	d135      	bne.n	8004a10 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80049a4:	6878      	ldr	r0, [r7, #4]
 80049a6:	f7ff fe89 	bl	80046bc <LL_RCC_GetUARTClockSource>
 80049aa:	4603      	mov	r3, r0
 80049ac:	4a20      	ldr	r2, [pc, #128]	; (8004a30 <LL_RCC_GetUARTClockFreq+0x11c>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d00d      	beq.n	80049ce <LL_RCC_GetUARTClockFreq+0xba>
 80049b2:	4a1f      	ldr	r2, [pc, #124]	; (8004a30 <LL_RCC_GetUARTClockFreq+0x11c>)
 80049b4:	4293      	cmp	r3, r2
 80049b6:	d803      	bhi.n	80049c0 <LL_RCC_GetUARTClockFreq+0xac>
 80049b8:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80049bc:	d01c      	beq.n	80049f8 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80049be:	e02c      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80049c0:	4a1c      	ldr	r2, [pc, #112]	; (8004a34 <LL_RCC_GetUARTClockFreq+0x120>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d007      	beq.n	80049d6 <LL_RCC_GetUARTClockFreq+0xc2>
 80049c6:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 80049ca:	d00c      	beq.n	80049e6 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 80049cc:	e025      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 80049ce:	f000 f833 	bl	8004a38 <RCC_GetSystemClockFreq>
 80049d2:	60f8      	str	r0, [r7, #12]
        break;
 80049d4:	e021      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 80049d6:	f7ff fdcf 	bl	8004578 <LL_RCC_HSI_IsReady>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d019      	beq.n	8004a14 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 80049e0:	4b12      	ldr	r3, [pc, #72]	; (8004a2c <LL_RCC_GetUARTClockFreq+0x118>)
 80049e2:	60fb      	str	r3, [r7, #12]
        break;
 80049e4:	e016      	b.n	8004a14 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 80049e6:	f7ff fddb 	bl	80045a0 <LL_RCC_LSE_IsReady>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d013      	beq.n	8004a18 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 80049f0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049f4:	60fb      	str	r3, [r7, #12]
        break;
 80049f6:	e00f      	b.n	8004a18 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80049f8:	f000 f81e 	bl	8004a38 <RCC_GetSystemClockFreq>
 80049fc:	4603      	mov	r3, r0
 80049fe:	4618      	mov	r0, r3
 8004a00:	f000 f8aa 	bl	8004b58 <RCC_GetHCLKClockFreq>
 8004a04:	4603      	mov	r3, r0
 8004a06:	4618      	mov	r0, r3
 8004a08:	f000 f8bc 	bl	8004b84 <RCC_GetPCLK1ClockFreq>
 8004a0c:	60f8      	str	r0, [r7, #12]
        break;
 8004a0e:	e004      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8004a10:	bf00      	nop
 8004a12:	e002      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8004a14:	bf00      	nop
 8004a16:	e000      	b.n	8004a1a <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8004a18:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3710      	adds	r7, #16
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}
 8004a24:	00c00040 	.word	0x00c00040
 8004a28:	00c00080 	.word	0x00c00080
 8004a2c:	00f42400 	.word	0x00f42400
 8004a30:	03000100 	.word	0x03000100
 8004a34:	03000200 	.word	0x03000200

08004a38 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8004a3e:	f7ff fdf1 	bl	8004624 <LL_RCC_GetSysClkSource>
 8004a42:	4603      	mov	r3, r0
 8004a44:	2b0c      	cmp	r3, #12
 8004a46:	d851      	bhi.n	8004aec <RCC_GetSystemClockFreq+0xb4>
 8004a48:	a201      	add	r2, pc, #4	; (adr r2, 8004a50 <RCC_GetSystemClockFreq+0x18>)
 8004a4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a4e:	bf00      	nop
 8004a50:	08004a85 	.word	0x08004a85
 8004a54:	08004aed 	.word	0x08004aed
 8004a58:	08004aed 	.word	0x08004aed
 8004a5c:	08004aed 	.word	0x08004aed
 8004a60:	08004ad9 	.word	0x08004ad9
 8004a64:	08004aed 	.word	0x08004aed
 8004a68:	08004aed 	.word	0x08004aed
 8004a6c:	08004aed 	.word	0x08004aed
 8004a70:	08004adf 	.word	0x08004adf
 8004a74:	08004aed 	.word	0x08004aed
 8004a78:	08004aed 	.word	0x08004aed
 8004a7c:	08004aed 	.word	0x08004aed
 8004a80:	08004ae5 	.word	0x08004ae5
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004a84:	f7ff fda0 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d111      	bne.n	8004ab2 <RCC_GetSystemClockFreq+0x7a>
 8004a8e:	f7ff fd9b 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d004      	beq.n	8004aa2 <RCC_GetSystemClockFreq+0x6a>
 8004a98:	f7ff fda8 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004a9c:	4603      	mov	r3, r0
 8004a9e:	0a1b      	lsrs	r3, r3, #8
 8004aa0:	e003      	b.n	8004aaa <RCC_GetSystemClockFreq+0x72>
 8004aa2:	f7ff fdb1 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004aa6:	4603      	mov	r3, r0
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	4a28      	ldr	r2, [pc, #160]	; (8004b4c <RCC_GetSystemClockFreq+0x114>)
 8004aac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab0:	e010      	b.n	8004ad4 <RCC_GetSystemClockFreq+0x9c>
 8004ab2:	f7ff fd89 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d004      	beq.n	8004ac6 <RCC_GetSystemClockFreq+0x8e>
 8004abc:	f7ff fd96 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004ac0:	4603      	mov	r3, r0
 8004ac2:	091b      	lsrs	r3, r3, #4
 8004ac4:	e003      	b.n	8004ace <RCC_GetSystemClockFreq+0x96>
 8004ac6:	f7ff fd9f 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004aca:	4603      	mov	r3, r0
 8004acc:	091b      	lsrs	r3, r3, #4
 8004ace:	4a1f      	ldr	r2, [pc, #124]	; (8004b4c <RCC_GetSystemClockFreq+0x114>)
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004ad6:	e033      	b.n	8004b40 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004ad8:	4b1d      	ldr	r3, [pc, #116]	; (8004b50 <RCC_GetSystemClockFreq+0x118>)
 8004ada:	607b      	str	r3, [r7, #4]
      break;
 8004adc:	e030      	b.n	8004b40 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8004ade:	4b1d      	ldr	r3, [pc, #116]	; (8004b54 <RCC_GetSystemClockFreq+0x11c>)
 8004ae0:	607b      	str	r3, [r7, #4]
      break;
 8004ae2:	e02d      	b.n	8004b40 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8004ae4:	f000 f876 	bl	8004bd4 <RCC_PLL_GetFreqDomain_SYS>
 8004ae8:	6078      	str	r0, [r7, #4]
      break;
 8004aea:	e029      	b.n	8004b40 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004aec:	f7ff fd6c 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d111      	bne.n	8004b1a <RCC_GetSystemClockFreq+0xe2>
 8004af6:	f7ff fd67 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004afa:	4603      	mov	r3, r0
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d004      	beq.n	8004b0a <RCC_GetSystemClockFreq+0xd2>
 8004b00:	f7ff fd74 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004b04:	4603      	mov	r3, r0
 8004b06:	0a1b      	lsrs	r3, r3, #8
 8004b08:	e003      	b.n	8004b12 <RCC_GetSystemClockFreq+0xda>
 8004b0a:	f7ff fd7d 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b0e:	4603      	mov	r3, r0
 8004b10:	0a1b      	lsrs	r3, r3, #8
 8004b12:	4a0e      	ldr	r2, [pc, #56]	; (8004b4c <RCC_GetSystemClockFreq+0x114>)
 8004b14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b18:	e010      	b.n	8004b3c <RCC_GetSystemClockFreq+0x104>
 8004b1a:	f7ff fd55 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004b1e:	4603      	mov	r3, r0
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d004      	beq.n	8004b2e <RCC_GetSystemClockFreq+0xf6>
 8004b24:	f7ff fd62 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004b28:	4603      	mov	r3, r0
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	e003      	b.n	8004b36 <RCC_GetSystemClockFreq+0xfe>
 8004b2e:	f7ff fd6b 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004b32:	4603      	mov	r3, r0
 8004b34:	091b      	lsrs	r3, r3, #4
 8004b36:	4a05      	ldr	r2, [pc, #20]	; (8004b4c <RCC_GetSystemClockFreq+0x114>)
 8004b38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b3c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004b3e:	bf00      	nop
  }

  return frequency;
 8004b40:	687b      	ldr	r3, [r7, #4]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	080076f8 	.word	0x080076f8
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	007a1200 	.word	0x007a1200

08004b58 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004b58:	b580      	push	{r7, lr}
 8004b5a:	b082      	sub	sp, #8
 8004b5c:	af00      	add	r7, sp, #0
 8004b5e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004b60:	f7ff fd6e 	bl	8004640 <LL_RCC_GetAHBPrescaler>
 8004b64:	4603      	mov	r3, r0
 8004b66:	091b      	lsrs	r3, r3, #4
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	4a04      	ldr	r2, [pc, #16]	; (8004b80 <RCC_GetHCLKClockFreq+0x28>)
 8004b6e:	5cd3      	ldrb	r3, [r2, r3]
 8004b70:	461a      	mov	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	40d3      	lsrs	r3, r2
}
 8004b76:	4618      	mov	r0, r3
 8004b78:	3708      	adds	r7, #8
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	bd80      	pop	{r7, pc}
 8004b7e:	bf00      	nop
 8004b80:	080076e0 	.word	0x080076e0

08004b84 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	b082      	sub	sp, #8
 8004b88:	af00      	add	r7, sp, #0
 8004b8a:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8004b8c:	f7ff fd66 	bl	800465c <LL_RCC_GetAPB1Prescaler>
 8004b90:	4603      	mov	r3, r0
 8004b92:	0a1b      	lsrs	r3, r3, #8
 8004b94:	4a04      	ldr	r2, [pc, #16]	; (8004ba8 <RCC_GetPCLK1ClockFreq+0x24>)
 8004b96:	5cd3      	ldrb	r3, [r2, r3]
 8004b98:	461a      	mov	r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	40d3      	lsrs	r3, r2
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	080076f0 	.word	0x080076f0

08004bac <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	b082      	sub	sp, #8
 8004bb0:	af00      	add	r7, sp, #0
 8004bb2:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8004bb4:	f7ff fd60 	bl	8004678 <LL_RCC_GetAPB2Prescaler>
 8004bb8:	4603      	mov	r3, r0
 8004bba:	0adb      	lsrs	r3, r3, #11
 8004bbc:	4a04      	ldr	r2, [pc, #16]	; (8004bd0 <RCC_GetPCLK2ClockFreq+0x24>)
 8004bbe:	5cd3      	ldrb	r3, [r2, r3]
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	40d3      	lsrs	r3, r2
}
 8004bc6:	4618      	mov	r0, r3
 8004bc8:	3708      	adds	r7, #8
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	080076f0 	.word	0x080076f0

08004bd4 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8004bd4:	b590      	push	{r4, r7, lr}
 8004bd6:	b083      	sub	sp, #12
 8004bd8:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004bda:	f7ff fd83 	bl	80046e4 <LL_RCC_PLL_GetMainSource>
 8004bde:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8004be0:	683b      	ldr	r3, [r7, #0]
 8004be2:	2b02      	cmp	r3, #2
 8004be4:	d02d      	beq.n	8004c42 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8004be6:	2b03      	cmp	r3, #3
 8004be8:	d02e      	beq.n	8004c48 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d12f      	bne.n	8004c4e <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004bee:	f7ff fceb 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bf2:	4603      	mov	r3, r0
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d111      	bne.n	8004c1c <RCC_PLL_GetFreqDomain_SYS+0x48>
 8004bf8:	f7ff fce6 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d004      	beq.n	8004c0c <RCC_PLL_GetFreqDomain_SYS+0x38>
 8004c02:	f7ff fcf3 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004c06:	4603      	mov	r3, r0
 8004c08:	0a1b      	lsrs	r3, r3, #8
 8004c0a:	e003      	b.n	8004c14 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8004c0c:	f7ff fcfc 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c10:	4603      	mov	r3, r0
 8004c12:	0a1b      	lsrs	r3, r3, #8
 8004c14:	4a2f      	ldr	r2, [pc, #188]	; (8004cd4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8004c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c1a:	e010      	b.n	8004c3e <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8004c1c:	f7ff fcd4 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d004      	beq.n	8004c30 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8004c26:	f7ff fce1 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004c2a:	4603      	mov	r3, r0
 8004c2c:	091b      	lsrs	r3, r3, #4
 8004c2e:	e003      	b.n	8004c38 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8004c30:	f7ff fcea 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c34:	4603      	mov	r3, r0
 8004c36:	091b      	lsrs	r3, r3, #4
 8004c38:	4a26      	ldr	r2, [pc, #152]	; (8004cd4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8004c3a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c3e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004c40:	e02f      	b.n	8004ca2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004c42:	4b25      	ldr	r3, [pc, #148]	; (8004cd8 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8004c44:	607b      	str	r3, [r7, #4]
      break;
 8004c46:	e02c      	b.n	8004ca2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8004c48:	4b24      	ldr	r3, [pc, #144]	; (8004cdc <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8004c4a:	607b      	str	r3, [r7, #4]
      break;
 8004c4c:	e029      	b.n	8004ca2 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8004c4e:	f7ff fcbb 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c52:	4603      	mov	r3, r0
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d111      	bne.n	8004c7c <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8004c58:	f7ff fcb6 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c5c:	4603      	mov	r3, r0
 8004c5e:	2b00      	cmp	r3, #0
 8004c60:	d004      	beq.n	8004c6c <RCC_PLL_GetFreqDomain_SYS+0x98>
 8004c62:	f7ff fcc3 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004c66:	4603      	mov	r3, r0
 8004c68:	0a1b      	lsrs	r3, r3, #8
 8004c6a:	e003      	b.n	8004c74 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8004c6c:	f7ff fccc 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c70:	4603      	mov	r3, r0
 8004c72:	0a1b      	lsrs	r3, r3, #8
 8004c74:	4a17      	ldr	r2, [pc, #92]	; (8004cd4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8004c76:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c7a:	e010      	b.n	8004c9e <RCC_PLL_GetFreqDomain_SYS+0xca>
 8004c7c:	f7ff fca4 	bl	80045c8 <LL_RCC_MSI_IsEnabledRangeSelect>
 8004c80:	4603      	mov	r3, r0
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d004      	beq.n	8004c90 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8004c86:	f7ff fcb1 	bl	80045ec <LL_RCC_MSI_GetRange>
 8004c8a:	4603      	mov	r3, r0
 8004c8c:	091b      	lsrs	r3, r3, #4
 8004c8e:	e003      	b.n	8004c98 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8004c90:	f7ff fcba 	bl	8004608 <LL_RCC_MSI_GetRangeAfterStandby>
 8004c94:	4603      	mov	r3, r0
 8004c96:	091b      	lsrs	r3, r3, #4
 8004c98:	4a0e      	ldr	r2, [pc, #56]	; (8004cd4 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8004c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c9e:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8004ca0:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004ca2:	f7ff fd49 	bl	8004738 <LL_RCC_PLL_GetDivider>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	091b      	lsrs	r3, r3, #4
 8004caa:	3301      	adds	r3, #1
 8004cac:	687a      	ldr	r2, [r7, #4]
 8004cae:	fbb2 f4f3 	udiv	r4, r2, r3
 8004cb2:	f7ff fd25 	bl	8004700 <LL_RCC_PLL_GetN>
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	fb03 f404 	mul.w	r4, r3, r4
 8004cbc:	f7ff fd2e 	bl	800471c <LL_RCC_PLL_GetR>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	0e5b      	lsrs	r3, r3, #25
 8004cc4:	3301      	adds	r3, #1
 8004cc6:	005b      	lsls	r3, r3, #1
 8004cc8:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	370c      	adds	r7, #12
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	bd90      	pop	{r4, r7, pc}
 8004cd4:	080076f8 	.word	0x080076f8
 8004cd8:	00f42400 	.word	0x00f42400
 8004cdc:	007a1200 	.word	0x007a1200

08004ce0 <LL_SPI_IsEnabled>:
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	b083      	sub	sp, #12
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cf0:	2b40      	cmp	r3, #64	; 0x40
 8004cf2:	d101      	bne.n	8004cf8 <LL_SPI_IsEnabled+0x18>
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e000      	b.n	8004cfa <LL_SPI_IsEnabled+0x1a>
 8004cf8:	2300      	movs	r3, #0
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr

08004d06 <LL_SPI_SetCRCPolynomial>:
{
 8004d06:	b480      	push	{r7}
 8004d08:	b083      	sub	sp, #12
 8004d0a:	af00      	add	r7, sp, #0
 8004d0c:	6078      	str	r0, [r7, #4]
 8004d0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	b29b      	uxth	r3, r3
 8004d14:	461a      	mov	r2, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	611a      	str	r2, [r3, #16]
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8004d26:	b580      	push	{r7, lr}
 8004d28:	b084      	sub	sp, #16
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004d30:	2301      	movs	r3, #1
 8004d32:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8004d34:	6878      	ldr	r0, [r7, #4]
 8004d36:	f7ff ffd3 	bl	8004ce0 <LL_SPI_IsEnabled>
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d13b      	bne.n	8004db8 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d48:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8004d4c:	683a      	ldr	r2, [r7, #0]
 8004d4e:	6811      	ldr	r1, [r2, #0]
 8004d50:	683a      	ldr	r2, [r7, #0]
 8004d52:	6852      	ldr	r2, [r2, #4]
 8004d54:	4311      	orrs	r1, r2
 8004d56:	683a      	ldr	r2, [r7, #0]
 8004d58:	68d2      	ldr	r2, [r2, #12]
 8004d5a:	4311      	orrs	r1, r2
 8004d5c:	683a      	ldr	r2, [r7, #0]
 8004d5e:	6912      	ldr	r2, [r2, #16]
 8004d60:	4311      	orrs	r1, r2
 8004d62:	683a      	ldr	r2, [r7, #0]
 8004d64:	6952      	ldr	r2, [r2, #20]
 8004d66:	4311      	orrs	r1, r2
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	6992      	ldr	r2, [r2, #24]
 8004d6c:	4311      	orrs	r1, r2
 8004d6e:	683a      	ldr	r2, [r7, #0]
 8004d70:	69d2      	ldr	r2, [r2, #28]
 8004d72:	4311      	orrs	r1, r2
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	6a12      	ldr	r2, [r2, #32]
 8004d78:	430a      	orrs	r2, r1
 8004d7a:	431a      	orrs	r2, r3
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	685b      	ldr	r3, [r3, #4]
 8004d84:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004d88:	f023 0304 	bic.w	r3, r3, #4
 8004d8c:	683a      	ldr	r2, [r7, #0]
 8004d8e:	6891      	ldr	r1, [r2, #8]
 8004d90:	683a      	ldr	r2, [r7, #0]
 8004d92:	6952      	ldr	r2, [r2, #20]
 8004d94:	0c12      	lsrs	r2, r2, #16
 8004d96:	430a      	orrs	r2, r1
 8004d98:	431a      	orrs	r2, r3
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8004d9e:	683b      	ldr	r3, [r7, #0]
 8004da0:	6a1b      	ldr	r3, [r3, #32]
 8004da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004da6:	d105      	bne.n	8004db4 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dac:	4619      	mov	r1, r3
 8004dae:	6878      	ldr	r0, [r7, #4]
 8004db0:	f7ff ffa9 	bl	8004d06 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8004db4:	2300      	movs	r3, #0
 8004db6:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8004db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004dba:	4618      	mov	r0, r3
 8004dbc:	3710      	adds	r7, #16
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	bd80      	pop	{r7, pc}

08004dc2 <LL_TIM_SetPrescaler>:
{
 8004dc2:	b480      	push	{r7}
 8004dc4:	b083      	sub	sp, #12
 8004dc6:	af00      	add	r7, sp, #0
 8004dc8:	6078      	str	r0, [r7, #4]
 8004dca:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	683a      	ldr	r2, [r7, #0]
 8004dd0:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004dd2:	bf00      	nop
 8004dd4:	370c      	adds	r7, #12
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ddc:	4770      	bx	lr

08004dde <LL_TIM_SetAutoReload>:
{
 8004dde:	b480      	push	{r7}
 8004de0:	b083      	sub	sp, #12
 8004de2:	af00      	add	r7, sp, #0
 8004de4:	6078      	str	r0, [r7, #4]
 8004de6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dee:	bf00      	nop
 8004df0:	370c      	adds	r7, #12
 8004df2:	46bd      	mov	sp, r7
 8004df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df8:	4770      	bx	lr

08004dfa <LL_TIM_SetRepetitionCounter>:
{
 8004dfa:	b480      	push	{r7}
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	af00      	add	r7, sp, #0
 8004e00:	6078      	str	r0, [r7, #4]
 8004e02:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	683a      	ldr	r2, [r7, #0]
 8004e08:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004e0a:	bf00      	nop
 8004e0c:	370c      	adds	r7, #12
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e14:	4770      	bx	lr

08004e16 <LL_TIM_OC_SetCompareCH1>:
{
 8004e16:	b480      	push	{r7}
 8004e18:	b083      	sub	sp, #12
 8004e1a:	af00      	add	r7, sp, #0
 8004e1c:	6078      	str	r0, [r7, #4]
 8004e1e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	683a      	ldr	r2, [r7, #0]
 8004e24:	635a      	str	r2, [r3, #52]	; 0x34
}
 8004e26:	bf00      	nop
 8004e28:	370c      	adds	r7, #12
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e30:	4770      	bx	lr

08004e32 <LL_TIM_OC_SetCompareCH2>:
{
 8004e32:	b480      	push	{r7}
 8004e34:	b083      	sub	sp, #12
 8004e36:	af00      	add	r7, sp, #0
 8004e38:	6078      	str	r0, [r7, #4]
 8004e3a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	639a      	str	r2, [r3, #56]	; 0x38
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr

08004e4e <LL_TIM_OC_SetCompareCH3>:
{
 8004e4e:	b480      	push	{r7}
 8004e50:	b083      	sub	sp, #12
 8004e52:	af00      	add	r7, sp, #0
 8004e54:	6078      	str	r0, [r7, #4]
 8004e56:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	683a      	ldr	r2, [r7, #0]
 8004e5c:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8004e5e:	bf00      	nop
 8004e60:	370c      	adds	r7, #12
 8004e62:	46bd      	mov	sp, r7
 8004e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e68:	4770      	bx	lr

08004e6a <LL_TIM_OC_SetCompareCH4>:
{
 8004e6a:	b480      	push	{r7}
 8004e6c:	b083      	sub	sp, #12
 8004e6e:	af00      	add	r7, sp, #0
 8004e70:	6078      	str	r0, [r7, #4]
 8004e72:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	683a      	ldr	r2, [r7, #0]
 8004e78:	641a      	str	r2, [r3, #64]	; 0x40
}
 8004e7a:	bf00      	nop
 8004e7c:	370c      	adds	r7, #12
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e84:	4770      	bx	lr

08004e86 <LL_TIM_OC_SetCompareCH5>:
{
 8004e86:	b480      	push	{r7}
 8004e88:	b083      	sub	sp, #12
 8004e8a:	af00      	add	r7, sp, #0
 8004e8c:	6078      	str	r0, [r7, #4]
 8004e8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	659a      	str	r2, [r3, #88]	; 0x58
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <LL_TIM_OC_SetCompareCH6>:
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	683a      	ldr	r2, [r7, #0]
 8004eb4:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004eb6:	bf00      	nop
 8004eb8:	370c      	adds	r7, #12
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec0:	4770      	bx	lr

08004ec2 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004ec2:	b480      	push	{r7}
 8004ec4:	b083      	sub	sp, #12
 8004ec6:	af00      	add	r7, sp, #0
 8004ec8:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	695b      	ldr	r3, [r3, #20]
 8004ece:	f043 0201 	orr.w	r2, r3, #1
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	615a      	str	r2, [r3, #20]
}
 8004ed6:	bf00      	nop
 8004ed8:	370c      	adds	r7, #12
 8004eda:	46bd      	mov	sp, r7
 8004edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee0:	4770      	bx	lr
	...

08004ee4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004ee4:	b580      	push	{r7, lr}
 8004ee6:	b084      	sub	sp, #16
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	4a3d      	ldr	r2, [pc, #244]	; (8004fec <LL_TIM_Init+0x108>)
 8004ef8:	4293      	cmp	r3, r2
 8004efa:	d013      	beq.n	8004f24 <LL_TIM_Init+0x40>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f02:	d00f      	beq.n	8004f24 <LL_TIM_Init+0x40>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	4a3a      	ldr	r2, [pc, #232]	; (8004ff0 <LL_TIM_Init+0x10c>)
 8004f08:	4293      	cmp	r3, r2
 8004f0a:	d00b      	beq.n	8004f24 <LL_TIM_Init+0x40>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	4a39      	ldr	r2, [pc, #228]	; (8004ff4 <LL_TIM_Init+0x110>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d007      	beq.n	8004f24 <LL_TIM_Init+0x40>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	4a38      	ldr	r2, [pc, #224]	; (8004ff8 <LL_TIM_Init+0x114>)
 8004f18:	4293      	cmp	r3, r2
 8004f1a:	d003      	beq.n	8004f24 <LL_TIM_Init+0x40>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	4a37      	ldr	r2, [pc, #220]	; (8004ffc <LL_TIM_Init+0x118>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d106      	bne.n	8004f32 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	4a2d      	ldr	r2, [pc, #180]	; (8004fec <LL_TIM_Init+0x108>)
 8004f36:	4293      	cmp	r3, r2
 8004f38:	d01f      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f40:	d01b      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	4a2a      	ldr	r2, [pc, #168]	; (8004ff0 <LL_TIM_Init+0x10c>)
 8004f46:	4293      	cmp	r3, r2
 8004f48:	d017      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	4a29      	ldr	r2, [pc, #164]	; (8004ff4 <LL_TIM_Init+0x110>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d013      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a28      	ldr	r2, [pc, #160]	; (8004ff8 <LL_TIM_Init+0x114>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00f      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a27      	ldr	r2, [pc, #156]	; (8004ffc <LL_TIM_Init+0x118>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d00b      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a26      	ldr	r2, [pc, #152]	; (8005000 <LL_TIM_Init+0x11c>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d007      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a25      	ldr	r2, [pc, #148]	; (8005004 <LL_TIM_Init+0x120>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d003      	beq.n	8004f7a <LL_TIM_Init+0x96>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	4a24      	ldr	r2, [pc, #144]	; (8005008 <LL_TIM_Init+0x124>)
 8004f76:	4293      	cmp	r3, r2
 8004f78:	d106      	bne.n	8004f88 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	68db      	ldr	r3, [r3, #12]
 8004f84:	4313      	orrs	r3, r2
 8004f86:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68fa      	ldr	r2, [r7, #12]
 8004f8c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	689b      	ldr	r3, [r3, #8]
 8004f92:	4619      	mov	r1, r3
 8004f94:	6878      	ldr	r0, [r7, #4]
 8004f96:	f7ff ff22 	bl	8004dde <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	881b      	ldrh	r3, [r3, #0]
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	6878      	ldr	r0, [r7, #4]
 8004fa2:	f7ff ff0e 	bl	8004dc2 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	4a10      	ldr	r2, [pc, #64]	; (8004fec <LL_TIM_Init+0x108>)
 8004faa:	4293      	cmp	r3, r2
 8004fac:	d00f      	beq.n	8004fce <LL_TIM_Init+0xea>
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	4a12      	ldr	r2, [pc, #72]	; (8004ffc <LL_TIM_Init+0x118>)
 8004fb2:	4293      	cmp	r3, r2
 8004fb4:	d00b      	beq.n	8004fce <LL_TIM_Init+0xea>
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a11      	ldr	r2, [pc, #68]	; (8005000 <LL_TIM_Init+0x11c>)
 8004fba:	4293      	cmp	r3, r2
 8004fbc:	d007      	beq.n	8004fce <LL_TIM_Init+0xea>
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	4a10      	ldr	r2, [pc, #64]	; (8005004 <LL_TIM_Init+0x120>)
 8004fc2:	4293      	cmp	r3, r2
 8004fc4:	d003      	beq.n	8004fce <LL_TIM_Init+0xea>
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	4a0f      	ldr	r2, [pc, #60]	; (8005008 <LL_TIM_Init+0x124>)
 8004fca:	4293      	cmp	r3, r2
 8004fcc:	d105      	bne.n	8004fda <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004fce:	683b      	ldr	r3, [r7, #0]
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	4619      	mov	r1, r3
 8004fd4:	6878      	ldr	r0, [r7, #4]
 8004fd6:	f7ff ff10 	bl	8004dfa <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff ff71 	bl	8004ec2 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3710      	adds	r7, #16
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	40012c00 	.word	0x40012c00
 8004ff0:	40000400 	.word	0x40000400
 8004ff4:	40000800 	.word	0x40000800
 8004ff8:	40000c00 	.word	0x40000c00
 8004ffc:	40013400 	.word	0x40013400
 8005000:	40014000 	.word	0x40014000
 8005004:	40014400 	.word	0x40014400
 8005008:	40014800 	.word	0x40014800

0800500c <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 800500c:	b580      	push	{r7, lr}
 800500e:	b086      	sub	sp, #24
 8005010:	af00      	add	r7, sp, #0
 8005012:	60f8      	str	r0, [r7, #12]
 8005014:	60b9      	str	r1, [r7, #8]
 8005016:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 8005018:	2301      	movs	r3, #1
 800501a:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 800501c:	68bb      	ldr	r3, [r7, #8]
 800501e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005022:	d01f      	beq.n	8005064 <LL_TIM_OC_Init+0x58>
 8005024:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005028:	d804      	bhi.n	8005034 <LL_TIM_OC_Init+0x28>
 800502a:	2b01      	cmp	r3, #1
 800502c:	d00c      	beq.n	8005048 <LL_TIM_OC_Init+0x3c>
 800502e:	2b10      	cmp	r3, #16
 8005030:	d011      	beq.n	8005056 <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8005032:	e033      	b.n	800509c <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8005034:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005038:	d022      	beq.n	8005080 <LL_TIM_OC_Init+0x74>
 800503a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800503e:	d026      	beq.n	800508e <LL_TIM_OC_Init+0x82>
 8005040:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005044:	d015      	beq.n	8005072 <LL_TIM_OC_Init+0x66>
      break;
 8005046:	e029      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 8005048:	6879      	ldr	r1, [r7, #4]
 800504a:	68f8      	ldr	r0, [r7, #12]
 800504c:	f000 f82c 	bl	80050a8 <OC1Config>
 8005050:	4603      	mov	r3, r0
 8005052:	75fb      	strb	r3, [r7, #23]
      break;
 8005054:	e022      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 8005056:	6879      	ldr	r1, [r7, #4]
 8005058:	68f8      	ldr	r0, [r7, #12]
 800505a:	f000 f8a5 	bl	80051a8 <OC2Config>
 800505e:	4603      	mov	r3, r0
 8005060:	75fb      	strb	r3, [r7, #23]
      break;
 8005062:	e01b      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8005064:	6879      	ldr	r1, [r7, #4]
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f922 	bl	80052b0 <OC3Config>
 800506c:	4603      	mov	r3, r0
 800506e:	75fb      	strb	r3, [r7, #23]
      break;
 8005070:	e014      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8005072:	6879      	ldr	r1, [r7, #4]
 8005074:	68f8      	ldr	r0, [r7, #12]
 8005076:	f000 f99f 	bl	80053b8 <OC4Config>
 800507a:	4603      	mov	r3, r0
 800507c:	75fb      	strb	r3, [r7, #23]
      break;
 800507e:	e00d      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8005080:	6879      	ldr	r1, [r7, #4]
 8005082:	68f8      	ldr	r0, [r7, #12]
 8005084:	f000 fa04 	bl	8005490 <OC5Config>
 8005088:	4603      	mov	r3, r0
 800508a:	75fb      	strb	r3, [r7, #23]
      break;
 800508c:	e006      	b.n	800509c <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 800508e:	6879      	ldr	r1, [r7, #4]
 8005090:	68f8      	ldr	r0, [r7, #12]
 8005092:	f000 fa61 	bl	8005558 <OC6Config>
 8005096:	4603      	mov	r3, r0
 8005098:	75fb      	strb	r3, [r7, #23]
      break;
 800509a:	bf00      	nop
  }

  return result;
 800509c:	7dfb      	ldrb	r3, [r7, #23]
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}
	...

080050a8 <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b086      	sub	sp, #24
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	6a1b      	ldr	r3, [r3, #32]
 80050b6:	f023 0201 	bic.w	r2, r3, #1
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	6a1b      	ldr	r3, [r3, #32]
 80050c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	699b      	ldr	r3, [r3, #24]
 80050ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	f023 0303 	bic.w	r3, r3, #3
 80050d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050de:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	6812      	ldr	r2, [r2, #0]
 80050e6:	4313      	orrs	r3, r2
 80050e8:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	f023 0202 	bic.w	r2, r3, #2
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	691b      	ldr	r3, [r3, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	f023 0201 	bic.w	r2, r3, #1
 80050fe:	683b      	ldr	r3, [r7, #0]
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	4313      	orrs	r3, r2
 8005104:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	4a22      	ldr	r2, [pc, #136]	; (8005194 <OC1Config+0xec>)
 800510a:	4293      	cmp	r3, r2
 800510c:	d00f      	beq.n	800512e <OC1Config+0x86>
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	4a21      	ldr	r2, [pc, #132]	; (8005198 <OC1Config+0xf0>)
 8005112:	4293      	cmp	r3, r2
 8005114:	d00b      	beq.n	800512e <OC1Config+0x86>
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	4a20      	ldr	r2, [pc, #128]	; (800519c <OC1Config+0xf4>)
 800511a:	4293      	cmp	r3, r2
 800511c:	d007      	beq.n	800512e <OC1Config+0x86>
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	4a1f      	ldr	r2, [pc, #124]	; (80051a0 <OC1Config+0xf8>)
 8005122:	4293      	cmp	r3, r2
 8005124:	d003      	beq.n	800512e <OC1Config+0x86>
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	4a1e      	ldr	r2, [pc, #120]	; (80051a4 <OC1Config+0xfc>)
 800512a:	4293      	cmp	r3, r2
 800512c:	d11e      	bne.n	800516c <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	f023 0208 	bic.w	r2, r3, #8
 8005134:	683b      	ldr	r3, [r7, #0]
 8005136:	695b      	ldr	r3, [r3, #20]
 8005138:	009b      	lsls	r3, r3, #2
 800513a:	4313      	orrs	r3, r2
 800513c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 800513e:	697b      	ldr	r3, [r7, #20]
 8005140:	f023 0204 	bic.w	r2, r3, #4
 8005144:	683b      	ldr	r3, [r7, #0]
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	009b      	lsls	r3, r3, #2
 800514a:	4313      	orrs	r3, r2
 800514c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 800514e:	693b      	ldr	r3, [r7, #16]
 8005150:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005154:	683b      	ldr	r3, [r7, #0]
 8005156:	699b      	ldr	r3, [r3, #24]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 800515c:	693b      	ldr	r3, [r7, #16]
 800515e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	69db      	ldr	r3, [r3, #28]
 8005166:	005b      	lsls	r3, r3, #1
 8005168:	4313      	orrs	r3, r2
 800516a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	693a      	ldr	r2, [r7, #16]
 8005170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	68fa      	ldr	r2, [r7, #12]
 8005176:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	68db      	ldr	r3, [r3, #12]
 800517c:	4619      	mov	r1, r3
 800517e:	6878      	ldr	r0, [r7, #4]
 8005180:	f7ff fe49 	bl	8004e16 <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	697a      	ldr	r2, [r7, #20]
 8005188:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800518a:	2300      	movs	r3, #0
}
 800518c:	4618      	mov	r0, r3
 800518e:	3718      	adds	r7, #24
 8005190:	46bd      	mov	sp, r7
 8005192:	bd80      	pop	{r7, pc}
 8005194:	40012c00 	.word	0x40012c00
 8005198:	40013400 	.word	0x40013400
 800519c:	40014000 	.word	0x40014000
 80051a0:	40014400 	.word	0x40014400
 80051a4:	40014800 	.word	0x40014800

080051a8 <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b086      	sub	sp, #24
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	6a1b      	ldr	r3, [r3, #32]
 80051b6:	f023 0210 	bic.w	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a1b      	ldr	r3, [r3, #32]
 80051c2:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	685b      	ldr	r3, [r3, #4]
 80051c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	699b      	ldr	r3, [r3, #24]
 80051ce:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051e2:	683a      	ldr	r2, [r7, #0]
 80051e4:	6812      	ldr	r2, [r2, #0]
 80051e6:	0212      	lsls	r2, r2, #8
 80051e8:	4313      	orrs	r3, r2
 80051ea:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80051ec:	697b      	ldr	r3, [r7, #20]
 80051ee:	f023 0220 	bic.w	r2, r3, #32
 80051f2:	683b      	ldr	r3, [r7, #0]
 80051f4:	691b      	ldr	r3, [r3, #16]
 80051f6:	011b      	lsls	r3, r3, #4
 80051f8:	4313      	orrs	r3, r2
 80051fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 80051fc:	697b      	ldr	r3, [r7, #20]
 80051fe:	f023 0210 	bic.w	r2, r3, #16
 8005202:	683b      	ldr	r3, [r7, #0]
 8005204:	685b      	ldr	r3, [r3, #4]
 8005206:	011b      	lsls	r3, r3, #4
 8005208:	4313      	orrs	r3, r2
 800520a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a23      	ldr	r2, [pc, #140]	; (800529c <OC2Config+0xf4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d00f      	beq.n	8005234 <OC2Config+0x8c>
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a22      	ldr	r2, [pc, #136]	; (80052a0 <OC2Config+0xf8>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d00b      	beq.n	8005234 <OC2Config+0x8c>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a21      	ldr	r2, [pc, #132]	; (80052a4 <OC2Config+0xfc>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d007      	beq.n	8005234 <OC2Config+0x8c>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a20      	ldr	r2, [pc, #128]	; (80052a8 <OC2Config+0x100>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d003      	beq.n	8005234 <OC2Config+0x8c>
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	4a1f      	ldr	r2, [pc, #124]	; (80052ac <OC2Config+0x104>)
 8005230:	4293      	cmp	r3, r2
 8005232:	d11f      	bne.n	8005274 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8005234:	697b      	ldr	r3, [r7, #20]
 8005236:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	019b      	lsls	r3, r3, #6
 8005240:	4313      	orrs	r3, r2
 8005242:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8005244:	697b      	ldr	r3, [r7, #20]
 8005246:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	019b      	lsls	r3, r3, #6
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	009b      	lsls	r3, r3, #2
 8005260:	4313      	orrs	r3, r2
 8005262:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8005264:	693b      	ldr	r3, [r7, #16]
 8005266:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	69db      	ldr	r3, [r3, #28]
 800526e:	00db      	lsls	r3, r3, #3
 8005270:	4313      	orrs	r3, r2
 8005272:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	693a      	ldr	r2, [r7, #16]
 8005278:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	68db      	ldr	r3, [r3, #12]
 8005284:	4619      	mov	r1, r3
 8005286:	6878      	ldr	r0, [r7, #4]
 8005288:	f7ff fdd3 	bl	8004e32 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005292:	2300      	movs	r3, #0
}
 8005294:	4618      	mov	r0, r3
 8005296:	3718      	adds	r7, #24
 8005298:	46bd      	mov	sp, r7
 800529a:	bd80      	pop	{r7, pc}
 800529c:	40012c00 	.word	0x40012c00
 80052a0:	40013400 	.word	0x40013400
 80052a4:	40014000 	.word	0x40014000
 80052a8:	40014400 	.word	0x40014400
 80052ac:	40014800 	.word	0x40014800

080052b0 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	6a1b      	ldr	r3, [r3, #32]
 80052be:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6a1b      	ldr	r3, [r3, #32]
 80052ca:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	685b      	ldr	r3, [r3, #4]
 80052d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	69db      	ldr	r3, [r3, #28]
 80052d6:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	f023 0303 	bic.w	r3, r3, #3
 80052de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052ea:	683a      	ldr	r2, [r7, #0]
 80052ec:	6812      	ldr	r2, [r2, #0]
 80052ee:	4313      	orrs	r3, r2
 80052f0:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	021b      	lsls	r3, r3, #8
 80052fe:	4313      	orrs	r3, r2
 8005300:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	021b      	lsls	r3, r3, #8
 800530e:	4313      	orrs	r3, r2
 8005310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	4a23      	ldr	r2, [pc, #140]	; (80053a4 <OC3Config+0xf4>)
 8005316:	4293      	cmp	r3, r2
 8005318:	d00f      	beq.n	800533a <OC3Config+0x8a>
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	4a22      	ldr	r2, [pc, #136]	; (80053a8 <OC3Config+0xf8>)
 800531e:	4293      	cmp	r3, r2
 8005320:	d00b      	beq.n	800533a <OC3Config+0x8a>
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	4a21      	ldr	r2, [pc, #132]	; (80053ac <OC3Config+0xfc>)
 8005326:	4293      	cmp	r3, r2
 8005328:	d007      	beq.n	800533a <OC3Config+0x8a>
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	4a20      	ldr	r2, [pc, #128]	; (80053b0 <OC3Config+0x100>)
 800532e:	4293      	cmp	r3, r2
 8005330:	d003      	beq.n	800533a <OC3Config+0x8a>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a1f      	ldr	r2, [pc, #124]	; (80053b4 <OC3Config+0x104>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d11f      	bne.n	800537a <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	695b      	ldr	r3, [r3, #20]
 8005344:	029b      	lsls	r3, r3, #10
 8005346:	4313      	orrs	r3, r2
 8005348:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800534a:	697b      	ldr	r3, [r7, #20]
 800534c:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005350:	683b      	ldr	r3, [r7, #0]
 8005352:	689b      	ldr	r3, [r3, #8]
 8005354:	029b      	lsls	r3, r3, #10
 8005356:	4313      	orrs	r3, r2
 8005358:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005360:	683b      	ldr	r3, [r7, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	011b      	lsls	r3, r3, #4
 8005366:	4313      	orrs	r3, r2
 8005368:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005370:	683b      	ldr	r3, [r7, #0]
 8005372:	69db      	ldr	r3, [r3, #28]
 8005374:	015b      	lsls	r3, r3, #5
 8005376:	4313      	orrs	r3, r2
 8005378:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	68fa      	ldr	r2, [r7, #12]
 8005384:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	68db      	ldr	r3, [r3, #12]
 800538a:	4619      	mov	r1, r3
 800538c:	6878      	ldr	r0, [r7, #4]
 800538e:	f7ff fd5e 	bl	8004e4e <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	697a      	ldr	r2, [r7, #20]
 8005396:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3718      	adds	r7, #24
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}
 80053a2:	bf00      	nop
 80053a4:	40012c00 	.word	0x40012c00
 80053a8:	40013400 	.word	0x40013400
 80053ac:	40014000 	.word	0x40014000
 80053b0:	40014400 	.word	0x40014400
 80053b4:	40014800 	.word	0x40014800

080053b8 <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80053b8:	b580      	push	{r7, lr}
 80053ba:	b086      	sub	sp, #24
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
 80053c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a1b      	ldr	r3, [r3, #32]
 80053c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	685b      	ldr	r3, [r3, #4]
 80053d8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	69db      	ldr	r3, [r3, #28]
 80053de:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053f2:	683a      	ldr	r2, [r7, #0]
 80053f4:	6812      	ldr	r2, [r2, #0]
 80053f6:	0212      	lsls	r2, r2, #8
 80053f8:	4313      	orrs	r3, r2
 80053fa:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005402:	683b      	ldr	r3, [r7, #0]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	031b      	lsls	r3, r3, #12
 8005408:	4313      	orrs	r3, r2
 800540a:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005412:	683b      	ldr	r3, [r7, #0]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	031b      	lsls	r3, r3, #12
 8005418:	4313      	orrs	r3, r2
 800541a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	4a17      	ldr	r2, [pc, #92]	; (800547c <OC4Config+0xc4>)
 8005420:	4293      	cmp	r3, r2
 8005422:	d00f      	beq.n	8005444 <OC4Config+0x8c>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	4a16      	ldr	r2, [pc, #88]	; (8005480 <OC4Config+0xc8>)
 8005428:	4293      	cmp	r3, r2
 800542a:	d00b      	beq.n	8005444 <OC4Config+0x8c>
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	4a15      	ldr	r2, [pc, #84]	; (8005484 <OC4Config+0xcc>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d007      	beq.n	8005444 <OC4Config+0x8c>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	4a14      	ldr	r2, [pc, #80]	; (8005488 <OC4Config+0xd0>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d003      	beq.n	8005444 <OC4Config+0x8c>
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	4a13      	ldr	r2, [pc, #76]	; (800548c <OC4Config+0xd4>)
 8005440:	4293      	cmp	r3, r2
 8005442:	d107      	bne.n	8005454 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8005444:	697b      	ldr	r3, [r7, #20]
 8005446:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800544a:	683b      	ldr	r3, [r7, #0]
 800544c:	699b      	ldr	r3, [r3, #24]
 800544e:	019b      	lsls	r3, r3, #6
 8005450:	4313      	orrs	r3, r2
 8005452:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	697a      	ldr	r2, [r7, #20]
 8005458:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	68fa      	ldr	r2, [r7, #12]
 800545e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	68db      	ldr	r3, [r3, #12]
 8005464:	4619      	mov	r1, r3
 8005466:	6878      	ldr	r0, [r7, #4]
 8005468:	f7ff fcff 	bl	8004e6a <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	693a      	ldr	r2, [r7, #16]
 8005470:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005472:	2300      	movs	r3, #0
}
 8005474:	4618      	mov	r0, r3
 8005476:	3718      	adds	r7, #24
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	40012c00 	.word	0x40012c00
 8005480:	40013400 	.word	0x40013400
 8005484:	40014000 	.word	0x40014000
 8005488:	40014400 	.word	0x40014400
 800548c:	40014800 	.word	0x40014800

08005490 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b084      	sub	sp, #16
 8005494:	af00      	add	r7, sp, #0
 8005496:	6078      	str	r0, [r7, #4]
 8005498:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	6a1b      	ldr	r3, [r3, #32]
 80054aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054b0:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80054b2:	68bb      	ldr	r3, [r7, #8]
 80054b4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80054b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80054bc:	683a      	ldr	r2, [r7, #0]
 80054be:	6812      	ldr	r2, [r2, #0]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80054ca:	683b      	ldr	r3, [r7, #0]
 80054cc:	691b      	ldr	r3, [r3, #16]
 80054ce:	041b      	lsls	r3, r3, #16
 80054d0:	4313      	orrs	r3, r2
 80054d2:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685b      	ldr	r3, [r3, #4]
 80054de:	041b      	lsls	r3, r3, #16
 80054e0:	4313      	orrs	r3, r2
 80054e2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	4a17      	ldr	r2, [pc, #92]	; (8005544 <OC5Config+0xb4>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d00f      	beq.n	800550c <OC5Config+0x7c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	4a16      	ldr	r2, [pc, #88]	; (8005548 <OC5Config+0xb8>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d00b      	beq.n	800550c <OC5Config+0x7c>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	4a15      	ldr	r2, [pc, #84]	; (800554c <OC5Config+0xbc>)
 80054f8:	4293      	cmp	r3, r2
 80054fa:	d007      	beq.n	800550c <OC5Config+0x7c>
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	4a14      	ldr	r2, [pc, #80]	; (8005550 <OC5Config+0xc0>)
 8005500:	4293      	cmp	r3, r2
 8005502:	d003      	beq.n	800550c <OC5Config+0x7c>
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	4a13      	ldr	r2, [pc, #76]	; (8005554 <OC5Config+0xc4>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d109      	bne.n	8005520 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	685b      	ldr	r3, [r3, #4]
 8005510:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	699b      	ldr	r3, [r3, #24]
 8005518:	021b      	lsls	r3, r3, #8
 800551a:	431a      	orrs	r2, r3
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68ba      	ldr	r2, [r7, #8]
 8005524:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	68db      	ldr	r3, [r3, #12]
 800552a:	4619      	mov	r1, r3
 800552c:	6878      	ldr	r0, [r7, #4]
 800552e:	f7ff fcaa 	bl	8004e86 <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	68fa      	ldr	r2, [r7, #12]
 8005536:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005538:	2300      	movs	r3, #0
}
 800553a:	4618      	mov	r0, r3
 800553c:	3710      	adds	r7, #16
 800553e:	46bd      	mov	sp, r7
 8005540:	bd80      	pop	{r7, pc}
 8005542:	bf00      	nop
 8005544:	40012c00 	.word	0x40012c00
 8005548:	40013400 	.word	0x40013400
 800554c:	40014000 	.word	0x40014000
 8005550:	40014400 	.word	0x40014400
 8005554:	40014800 	.word	0x40014800

08005558 <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b084      	sub	sp, #16
 800555c:	af00      	add	r7, sp, #0
 800555e:	6078      	str	r0, [r7, #4]
 8005560:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a1b      	ldr	r3, [r3, #32]
 8005566:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	6a1b      	ldr	r3, [r3, #32]
 8005572:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005578:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005580:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	6812      	ldr	r2, [r2, #0]
 8005588:	0212      	lsls	r2, r2, #8
 800558a:	4313      	orrs	r3, r2
 800558c:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	691b      	ldr	r3, [r3, #16]
 8005598:	051b      	lsls	r3, r3, #20
 800559a:	4313      	orrs	r3, r2
 800559c:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	051b      	lsls	r3, r3, #20
 80055aa:	4313      	orrs	r3, r2
 80055ac:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	4a16      	ldr	r2, [pc, #88]	; (800560c <OC6Config+0xb4>)
 80055b2:	4293      	cmp	r3, r2
 80055b4:	d00f      	beq.n	80055d6 <OC6Config+0x7e>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	4a15      	ldr	r2, [pc, #84]	; (8005610 <OC6Config+0xb8>)
 80055ba:	4293      	cmp	r3, r2
 80055bc:	d00b      	beq.n	80055d6 <OC6Config+0x7e>
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	4a14      	ldr	r2, [pc, #80]	; (8005614 <OC6Config+0xbc>)
 80055c2:	4293      	cmp	r3, r2
 80055c4:	d007      	beq.n	80055d6 <OC6Config+0x7e>
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	4a13      	ldr	r2, [pc, #76]	; (8005618 <OC6Config+0xc0>)
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d003      	beq.n	80055d6 <OC6Config+0x7e>
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	4a12      	ldr	r2, [pc, #72]	; (800561c <OC6Config+0xc4>)
 80055d2:	4293      	cmp	r3, r2
 80055d4:	d109      	bne.n	80055ea <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	699b      	ldr	r3, [r3, #24]
 80055e2:	029b      	lsls	r3, r3, #10
 80055e4:	431a      	orrs	r2, r3
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80055f0:	683b      	ldr	r3, [r7, #0]
 80055f2:	68db      	ldr	r3, [r3, #12]
 80055f4:	4619      	mov	r1, r3
 80055f6:	6878      	ldr	r0, [r7, #4]
 80055f8:	f7ff fc55 	bl	8004ea6 <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8005602:	2300      	movs	r3, #0
}
 8005604:	4618      	mov	r0, r3
 8005606:	3710      	adds	r7, #16
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}
 800560c:	40012c00 	.word	0x40012c00
 8005610:	40013400 	.word	0x40013400
 8005614:	40014000 	.word	0x40014000
 8005618:	40014400 	.word	0x40014400
 800561c:	40014800 	.word	0x40014800

08005620 <LL_USART_IsEnabled>:
{
 8005620:	b480      	push	{r7}
 8005622:	b083      	sub	sp, #12
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 0301 	and.w	r3, r3, #1
 8005630:	2b01      	cmp	r3, #1
 8005632:	d101      	bne.n	8005638 <LL_USART_IsEnabled+0x18>
 8005634:	2301      	movs	r3, #1
 8005636:	e000      	b.n	800563a <LL_USART_IsEnabled+0x1a>
 8005638:	2300      	movs	r3, #0
}
 800563a:	4618      	mov	r0, r3
 800563c:	370c      	adds	r7, #12
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr

08005646 <LL_USART_SetStopBitsLength>:
{
 8005646:	b480      	push	{r7}
 8005648:	b083      	sub	sp, #12
 800564a:	af00      	add	r7, sp, #0
 800564c:	6078      	str	r0, [r7, #4]
 800564e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	685b      	ldr	r3, [r3, #4]
 8005654:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	431a      	orrs	r2, r3
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	605a      	str	r2, [r3, #4]
}
 8005660:	bf00      	nop
 8005662:	370c      	adds	r7, #12
 8005664:	46bd      	mov	sp, r7
 8005666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566a:	4770      	bx	lr

0800566c <LL_USART_SetHWFlowCtrl>:
{
 800566c:	b480      	push	{r7}
 800566e:	b083      	sub	sp, #12
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	689b      	ldr	r3, [r3, #8]
 800567a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	431a      	orrs	r2, r3
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	609a      	str	r2, [r3, #8]
}
 8005686:	bf00      	nop
 8005688:	370c      	adds	r7, #12
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr

08005692 <LL_USART_SetBaudRate>:
{
 8005692:	b480      	push	{r7}
 8005694:	b087      	sub	sp, #28
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80056a6:	d11a      	bne.n	80056de <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80056a8:	68bb      	ldr	r3, [r7, #8]
 80056aa:	005a      	lsls	r2, r3, #1
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	085b      	lsrs	r3, r3, #1
 80056b0:	441a      	add	r2, r3
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80056b8:	b29b      	uxth	r3, r3
 80056ba:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80056bc:	697a      	ldr	r2, [r7, #20]
 80056be:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80056c2:	4013      	ands	r3, r2
 80056c4:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	085b      	lsrs	r3, r3, #1
 80056ca:	b29b      	uxth	r3, r3
 80056cc:	f003 0307 	and.w	r3, r3, #7
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	4313      	orrs	r3, r2
 80056d4:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	693a      	ldr	r2, [r7, #16]
 80056da:	60da      	str	r2, [r3, #12]
}
 80056dc:	e00a      	b.n	80056f4 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	085a      	lsrs	r2, r3, #1
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	441a      	add	r2, r3
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	461a      	mov	r2, r3
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	60da      	str	r2, [r3, #12]
}
 80056f4:	bf00      	nop
 80056f6:	371c      	adds	r7, #28
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800570a:	2301      	movs	r3, #1
 800570c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800570e:	2300      	movs	r3, #0
 8005710:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8005712:	6878      	ldr	r0, [r7, #4]
 8005714:	f7ff ff84 	bl	8005620 <LL_USART_IsEnabled>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d15b      	bne.n	80057d6 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681a      	ldr	r2, [r3, #0]
 8005722:	4b2f      	ldr	r3, [pc, #188]	; (80057e0 <LL_USART_Init+0xe0>)
 8005724:	4013      	ands	r3, r2
 8005726:	683a      	ldr	r2, [r7, #0]
 8005728:	6851      	ldr	r1, [r2, #4]
 800572a:	683a      	ldr	r2, [r7, #0]
 800572c:	68d2      	ldr	r2, [r2, #12]
 800572e:	4311      	orrs	r1, r2
 8005730:	683a      	ldr	r2, [r7, #0]
 8005732:	6912      	ldr	r2, [r2, #16]
 8005734:	4311      	orrs	r1, r2
 8005736:	683a      	ldr	r2, [r7, #0]
 8005738:	6992      	ldr	r2, [r2, #24]
 800573a:	430a      	orrs	r2, r1
 800573c:	431a      	orrs	r2, r3
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	689b      	ldr	r3, [r3, #8]
 8005746:	4619      	mov	r1, r3
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff7c 	bl	8005646 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800574e:	683b      	ldr	r3, [r7, #0]
 8005750:	695b      	ldr	r3, [r3, #20]
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f7ff ff89 	bl	800566c <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	4a21      	ldr	r2, [pc, #132]	; (80057e4 <LL_USART_Init+0xe4>)
 800575e:	4293      	cmp	r3, r2
 8005760:	d104      	bne.n	800576c <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8005762:	2003      	movs	r0, #3
 8005764:	f7fe fff6 	bl	8004754 <LL_RCC_GetUSARTClockFreq>
 8005768:	60b8      	str	r0, [r7, #8]
 800576a:	e023      	b.n	80057b4 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	4a1e      	ldr	r2, [pc, #120]	; (80057e8 <LL_USART_Init+0xe8>)
 8005770:	4293      	cmp	r3, r2
 8005772:	d104      	bne.n	800577e <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8005774:	200c      	movs	r0, #12
 8005776:	f7fe ffed 	bl	8004754 <LL_RCC_GetUSARTClockFreq>
 800577a:	60b8      	str	r0, [r7, #8]
 800577c:	e01a      	b.n	80057b4 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	4a1a      	ldr	r2, [pc, #104]	; (80057ec <LL_USART_Init+0xec>)
 8005782:	4293      	cmp	r3, r2
 8005784:	d104      	bne.n	8005790 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8005786:	2030      	movs	r0, #48	; 0x30
 8005788:	f7fe ffe4 	bl	8004754 <LL_RCC_GetUSARTClockFreq>
 800578c:	60b8      	str	r0, [r7, #8]
 800578e:	e011      	b.n	80057b4 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a17      	ldr	r2, [pc, #92]	; (80057f0 <LL_USART_Init+0xf0>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d104      	bne.n	80057a2 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8005798:	20c0      	movs	r0, #192	; 0xc0
 800579a:	f7ff f8bb 	bl	8004914 <LL_RCC_GetUARTClockFreq>
 800579e:	60b8      	str	r0, [r7, #8]
 80057a0:	e008      	b.n	80057b4 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	4a13      	ldr	r2, [pc, #76]	; (80057f4 <LL_USART_Init+0xf4>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d104      	bne.n	80057b4 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80057aa:	f44f 7040 	mov.w	r0, #768	; 0x300
 80057ae:	f7ff f8b1 	bl	8004914 <LL_RCC_GetUARTClockFreq>
 80057b2:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d00d      	beq.n	80057d6 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80057ba:	683b      	ldr	r3, [r7, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d009      	beq.n	80057d6 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80057c2:	2300      	movs	r3, #0
 80057c4:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80057c6:	683b      	ldr	r3, [r7, #0]
 80057c8:	699a      	ldr	r2, [r3, #24]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	68b9      	ldr	r1, [r7, #8]
 80057d0:	6878      	ldr	r0, [r7, #4]
 80057d2:	f7ff ff5e 	bl	8005692 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80057d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	3710      	adds	r7, #16
 80057dc:	46bd      	mov	sp, r7
 80057de:	bd80      	pop	{r7, pc}
 80057e0:	efff69f3 	.word	0xefff69f3
 80057e4:	40013800 	.word	0x40013800
 80057e8:	40004400 	.word	0x40004400
 80057ec:	40004800 	.word	0x40004800
 80057f0:	40004c00 	.word	0x40004c00
 80057f4:	40005000 	.word	0x40005000

080057f8 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8005802:	687a      	ldr	r2, [r7, #4]
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	fbb2 f3f3 	udiv	r3, r2, r3
 800580a:	4a07      	ldr	r2, [pc, #28]	; (8005828 <LL_InitTick+0x30>)
 800580c:	3b01      	subs	r3, #1
 800580e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8005810:	4b05      	ldr	r3, [pc, #20]	; (8005828 <LL_InitTick+0x30>)
 8005812:	2200      	movs	r2, #0
 8005814:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005816:	4b04      	ldr	r3, [pc, #16]	; (8005828 <LL_InitTick+0x30>)
 8005818:	2205      	movs	r2, #5
 800581a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800581c:	bf00      	nop
 800581e:	370c      	adds	r7, #12
 8005820:	46bd      	mov	sp, r7
 8005822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005826:	4770      	bx	lr
 8005828:	e000e010 	.word	0xe000e010

0800582c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800582c:	b580      	push	{r7, lr}
 800582e:	b082      	sub	sp, #8
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8005834:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8005838:	6878      	ldr	r0, [r7, #4]
 800583a:	f7ff ffdd 	bl	80057f8 <LL_InitTick>
}
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
	...

08005848 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8005848:	b480      	push	{r7}
 800584a:	b085      	sub	sp, #20
 800584c:	af00      	add	r7, sp, #0
 800584e:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8005850:	4b0f      	ldr	r3, [pc, #60]	; (8005890 <LL_mDelay+0x48>)
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800585a:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005862:	d00c      	beq.n	800587e <LL_mDelay+0x36>
  {
    tmpDelay++;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	3301      	adds	r3, #1
 8005868:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800586a:	e008      	b.n	800587e <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800586c:	4b08      	ldr	r3, [pc, #32]	; (8005890 <LL_mDelay+0x48>)
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005874:	2b00      	cmp	r3, #0
 8005876:	d002      	beq.n	800587e <LL_mDelay+0x36>
    {
      tmpDelay--;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	3b01      	subs	r3, #1
 800587c:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f3      	bne.n	800586c <LL_mDelay+0x24>
    }
  }
}
 8005884:	bf00      	nop
 8005886:	3714      	adds	r7, #20
 8005888:	46bd      	mov	sp, r7
 800588a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588e:	4770      	bx	lr
 8005890:	e000e010 	.word	0xe000e010

08005894 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8005894:	b480      	push	{r7}
 8005896:	b083      	sub	sp, #12
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800589c:	4a04      	ldr	r2, [pc, #16]	; (80058b0 <LL_SetSystemCoreClock+0x1c>)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6013      	str	r3, [r2, #0]
}
 80058a2:	bf00      	nop
 80058a4:	370c      	adds	r7, #12
 80058a6:	46bd      	mov	sp, r7
 80058a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ac:	4770      	bx	lr
 80058ae:	bf00      	nop
 80058b0:	20000560 	.word	0x20000560

080058b4 <__errno>:
 80058b4:	4b01      	ldr	r3, [pc, #4]	; (80058bc <__errno+0x8>)
 80058b6:	6818      	ldr	r0, [r3, #0]
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	20000564 	.word	0x20000564

080058c0 <__libc_init_array>:
 80058c0:	b570      	push	{r4, r5, r6, lr}
 80058c2:	4e0d      	ldr	r6, [pc, #52]	; (80058f8 <__libc_init_array+0x38>)
 80058c4:	4c0d      	ldr	r4, [pc, #52]	; (80058fc <__libc_init_array+0x3c>)
 80058c6:	1ba4      	subs	r4, r4, r6
 80058c8:	10a4      	asrs	r4, r4, #2
 80058ca:	2500      	movs	r5, #0
 80058cc:	42a5      	cmp	r5, r4
 80058ce:	d109      	bne.n	80058e4 <__libc_init_array+0x24>
 80058d0:	4e0b      	ldr	r6, [pc, #44]	; (8005900 <__libc_init_array+0x40>)
 80058d2:	4c0c      	ldr	r4, [pc, #48]	; (8005904 <__libc_init_array+0x44>)
 80058d4:	f000 ff7a 	bl	80067cc <_init>
 80058d8:	1ba4      	subs	r4, r4, r6
 80058da:	10a4      	asrs	r4, r4, #2
 80058dc:	2500      	movs	r5, #0
 80058de:	42a5      	cmp	r5, r4
 80058e0:	d105      	bne.n	80058ee <__libc_init_array+0x2e>
 80058e2:	bd70      	pop	{r4, r5, r6, pc}
 80058e4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058e8:	4798      	blx	r3
 80058ea:	3501      	adds	r5, #1
 80058ec:	e7ee      	b.n	80058cc <__libc_init_array+0xc>
 80058ee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058f2:	4798      	blx	r3
 80058f4:	3501      	adds	r5, #1
 80058f6:	e7f2      	b.n	80058de <__libc_init_array+0x1e>
 80058f8:	080077e0 	.word	0x080077e0
 80058fc:	080077e0 	.word	0x080077e0
 8005900:	080077e0 	.word	0x080077e0
 8005904:	080077e4 	.word	0x080077e4

08005908 <memset>:
 8005908:	4402      	add	r2, r0
 800590a:	4603      	mov	r3, r0
 800590c:	4293      	cmp	r3, r2
 800590e:	d100      	bne.n	8005912 <memset+0xa>
 8005910:	4770      	bx	lr
 8005912:	f803 1b01 	strb.w	r1, [r3], #1
 8005916:	e7f9      	b.n	800590c <memset+0x4>

08005918 <iprintf>:
 8005918:	b40f      	push	{r0, r1, r2, r3}
 800591a:	4b0a      	ldr	r3, [pc, #40]	; (8005944 <iprintf+0x2c>)
 800591c:	b513      	push	{r0, r1, r4, lr}
 800591e:	681c      	ldr	r4, [r3, #0]
 8005920:	b124      	cbz	r4, 800592c <iprintf+0x14>
 8005922:	69a3      	ldr	r3, [r4, #24]
 8005924:	b913      	cbnz	r3, 800592c <iprintf+0x14>
 8005926:	4620      	mov	r0, r4
 8005928:	f000 fa34 	bl	8005d94 <__sinit>
 800592c:	ab05      	add	r3, sp, #20
 800592e:	9a04      	ldr	r2, [sp, #16]
 8005930:	68a1      	ldr	r1, [r4, #8]
 8005932:	9301      	str	r3, [sp, #4]
 8005934:	4620      	mov	r0, r4
 8005936:	f000 fbed 	bl	8006114 <_vfiprintf_r>
 800593a:	b002      	add	sp, #8
 800593c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005940:	b004      	add	sp, #16
 8005942:	4770      	bx	lr
 8005944:	20000564 	.word	0x20000564

08005948 <_puts_r>:
 8005948:	b570      	push	{r4, r5, r6, lr}
 800594a:	460e      	mov	r6, r1
 800594c:	4605      	mov	r5, r0
 800594e:	b118      	cbz	r0, 8005958 <_puts_r+0x10>
 8005950:	6983      	ldr	r3, [r0, #24]
 8005952:	b90b      	cbnz	r3, 8005958 <_puts_r+0x10>
 8005954:	f000 fa1e 	bl	8005d94 <__sinit>
 8005958:	69ab      	ldr	r3, [r5, #24]
 800595a:	68ac      	ldr	r4, [r5, #8]
 800595c:	b913      	cbnz	r3, 8005964 <_puts_r+0x1c>
 800595e:	4628      	mov	r0, r5
 8005960:	f000 fa18 	bl	8005d94 <__sinit>
 8005964:	4b23      	ldr	r3, [pc, #140]	; (80059f4 <_puts_r+0xac>)
 8005966:	429c      	cmp	r4, r3
 8005968:	d117      	bne.n	800599a <_puts_r+0x52>
 800596a:	686c      	ldr	r4, [r5, #4]
 800596c:	89a3      	ldrh	r3, [r4, #12]
 800596e:	071b      	lsls	r3, r3, #28
 8005970:	d51d      	bpl.n	80059ae <_puts_r+0x66>
 8005972:	6923      	ldr	r3, [r4, #16]
 8005974:	b1db      	cbz	r3, 80059ae <_puts_r+0x66>
 8005976:	3e01      	subs	r6, #1
 8005978:	68a3      	ldr	r3, [r4, #8]
 800597a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800597e:	3b01      	subs	r3, #1
 8005980:	60a3      	str	r3, [r4, #8]
 8005982:	b9e9      	cbnz	r1, 80059c0 <_puts_r+0x78>
 8005984:	2b00      	cmp	r3, #0
 8005986:	da2e      	bge.n	80059e6 <_puts_r+0x9e>
 8005988:	4622      	mov	r2, r4
 800598a:	210a      	movs	r1, #10
 800598c:	4628      	mov	r0, r5
 800598e:	f000 f851 	bl	8005a34 <__swbuf_r>
 8005992:	3001      	adds	r0, #1
 8005994:	d011      	beq.n	80059ba <_puts_r+0x72>
 8005996:	200a      	movs	r0, #10
 8005998:	e011      	b.n	80059be <_puts_r+0x76>
 800599a:	4b17      	ldr	r3, [pc, #92]	; (80059f8 <_puts_r+0xb0>)
 800599c:	429c      	cmp	r4, r3
 800599e:	d101      	bne.n	80059a4 <_puts_r+0x5c>
 80059a0:	68ac      	ldr	r4, [r5, #8]
 80059a2:	e7e3      	b.n	800596c <_puts_r+0x24>
 80059a4:	4b15      	ldr	r3, [pc, #84]	; (80059fc <_puts_r+0xb4>)
 80059a6:	429c      	cmp	r4, r3
 80059a8:	bf08      	it	eq
 80059aa:	68ec      	ldreq	r4, [r5, #12]
 80059ac:	e7de      	b.n	800596c <_puts_r+0x24>
 80059ae:	4621      	mov	r1, r4
 80059b0:	4628      	mov	r0, r5
 80059b2:	f000 f891 	bl	8005ad8 <__swsetup_r>
 80059b6:	2800      	cmp	r0, #0
 80059b8:	d0dd      	beq.n	8005976 <_puts_r+0x2e>
 80059ba:	f04f 30ff 	mov.w	r0, #4294967295
 80059be:	bd70      	pop	{r4, r5, r6, pc}
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	da04      	bge.n	80059ce <_puts_r+0x86>
 80059c4:	69a2      	ldr	r2, [r4, #24]
 80059c6:	429a      	cmp	r2, r3
 80059c8:	dc06      	bgt.n	80059d8 <_puts_r+0x90>
 80059ca:	290a      	cmp	r1, #10
 80059cc:	d004      	beq.n	80059d8 <_puts_r+0x90>
 80059ce:	6823      	ldr	r3, [r4, #0]
 80059d0:	1c5a      	adds	r2, r3, #1
 80059d2:	6022      	str	r2, [r4, #0]
 80059d4:	7019      	strb	r1, [r3, #0]
 80059d6:	e7cf      	b.n	8005978 <_puts_r+0x30>
 80059d8:	4622      	mov	r2, r4
 80059da:	4628      	mov	r0, r5
 80059dc:	f000 f82a 	bl	8005a34 <__swbuf_r>
 80059e0:	3001      	adds	r0, #1
 80059e2:	d1c9      	bne.n	8005978 <_puts_r+0x30>
 80059e4:	e7e9      	b.n	80059ba <_puts_r+0x72>
 80059e6:	6823      	ldr	r3, [r4, #0]
 80059e8:	200a      	movs	r0, #10
 80059ea:	1c5a      	adds	r2, r3, #1
 80059ec:	6022      	str	r2, [r4, #0]
 80059ee:	7018      	strb	r0, [r3, #0]
 80059f0:	e7e5      	b.n	80059be <_puts_r+0x76>
 80059f2:	bf00      	nop
 80059f4:	08007764 	.word	0x08007764
 80059f8:	08007784 	.word	0x08007784
 80059fc:	08007744 	.word	0x08007744

08005a00 <puts>:
 8005a00:	4b02      	ldr	r3, [pc, #8]	; (8005a0c <puts+0xc>)
 8005a02:	4601      	mov	r1, r0
 8005a04:	6818      	ldr	r0, [r3, #0]
 8005a06:	f7ff bf9f 	b.w	8005948 <_puts_r>
 8005a0a:	bf00      	nop
 8005a0c:	20000564 	.word	0x20000564

08005a10 <strncmp>:
 8005a10:	b510      	push	{r4, lr}
 8005a12:	b16a      	cbz	r2, 8005a30 <strncmp+0x20>
 8005a14:	3901      	subs	r1, #1
 8005a16:	1884      	adds	r4, r0, r2
 8005a18:	f810 3b01 	ldrb.w	r3, [r0], #1
 8005a1c:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d103      	bne.n	8005a2c <strncmp+0x1c>
 8005a24:	42a0      	cmp	r0, r4
 8005a26:	d001      	beq.n	8005a2c <strncmp+0x1c>
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d1f5      	bne.n	8005a18 <strncmp+0x8>
 8005a2c:	1a98      	subs	r0, r3, r2
 8005a2e:	bd10      	pop	{r4, pc}
 8005a30:	4610      	mov	r0, r2
 8005a32:	e7fc      	b.n	8005a2e <strncmp+0x1e>

08005a34 <__swbuf_r>:
 8005a34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a36:	460e      	mov	r6, r1
 8005a38:	4614      	mov	r4, r2
 8005a3a:	4605      	mov	r5, r0
 8005a3c:	b118      	cbz	r0, 8005a46 <__swbuf_r+0x12>
 8005a3e:	6983      	ldr	r3, [r0, #24]
 8005a40:	b90b      	cbnz	r3, 8005a46 <__swbuf_r+0x12>
 8005a42:	f000 f9a7 	bl	8005d94 <__sinit>
 8005a46:	4b21      	ldr	r3, [pc, #132]	; (8005acc <__swbuf_r+0x98>)
 8005a48:	429c      	cmp	r4, r3
 8005a4a:	d12a      	bne.n	8005aa2 <__swbuf_r+0x6e>
 8005a4c:	686c      	ldr	r4, [r5, #4]
 8005a4e:	69a3      	ldr	r3, [r4, #24]
 8005a50:	60a3      	str	r3, [r4, #8]
 8005a52:	89a3      	ldrh	r3, [r4, #12]
 8005a54:	071a      	lsls	r2, r3, #28
 8005a56:	d52e      	bpl.n	8005ab6 <__swbuf_r+0x82>
 8005a58:	6923      	ldr	r3, [r4, #16]
 8005a5a:	b363      	cbz	r3, 8005ab6 <__swbuf_r+0x82>
 8005a5c:	6923      	ldr	r3, [r4, #16]
 8005a5e:	6820      	ldr	r0, [r4, #0]
 8005a60:	1ac0      	subs	r0, r0, r3
 8005a62:	6963      	ldr	r3, [r4, #20]
 8005a64:	b2f6      	uxtb	r6, r6
 8005a66:	4283      	cmp	r3, r0
 8005a68:	4637      	mov	r7, r6
 8005a6a:	dc04      	bgt.n	8005a76 <__swbuf_r+0x42>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4628      	mov	r0, r5
 8005a70:	f000 f926 	bl	8005cc0 <_fflush_r>
 8005a74:	bb28      	cbnz	r0, 8005ac2 <__swbuf_r+0x8e>
 8005a76:	68a3      	ldr	r3, [r4, #8]
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	60a3      	str	r3, [r4, #8]
 8005a7c:	6823      	ldr	r3, [r4, #0]
 8005a7e:	1c5a      	adds	r2, r3, #1
 8005a80:	6022      	str	r2, [r4, #0]
 8005a82:	701e      	strb	r6, [r3, #0]
 8005a84:	6963      	ldr	r3, [r4, #20]
 8005a86:	3001      	adds	r0, #1
 8005a88:	4283      	cmp	r3, r0
 8005a8a:	d004      	beq.n	8005a96 <__swbuf_r+0x62>
 8005a8c:	89a3      	ldrh	r3, [r4, #12]
 8005a8e:	07db      	lsls	r3, r3, #31
 8005a90:	d519      	bpl.n	8005ac6 <__swbuf_r+0x92>
 8005a92:	2e0a      	cmp	r6, #10
 8005a94:	d117      	bne.n	8005ac6 <__swbuf_r+0x92>
 8005a96:	4621      	mov	r1, r4
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 f911 	bl	8005cc0 <_fflush_r>
 8005a9e:	b190      	cbz	r0, 8005ac6 <__swbuf_r+0x92>
 8005aa0:	e00f      	b.n	8005ac2 <__swbuf_r+0x8e>
 8005aa2:	4b0b      	ldr	r3, [pc, #44]	; (8005ad0 <__swbuf_r+0x9c>)
 8005aa4:	429c      	cmp	r4, r3
 8005aa6:	d101      	bne.n	8005aac <__swbuf_r+0x78>
 8005aa8:	68ac      	ldr	r4, [r5, #8]
 8005aaa:	e7d0      	b.n	8005a4e <__swbuf_r+0x1a>
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <__swbuf_r+0xa0>)
 8005aae:	429c      	cmp	r4, r3
 8005ab0:	bf08      	it	eq
 8005ab2:	68ec      	ldreq	r4, [r5, #12]
 8005ab4:	e7cb      	b.n	8005a4e <__swbuf_r+0x1a>
 8005ab6:	4621      	mov	r1, r4
 8005ab8:	4628      	mov	r0, r5
 8005aba:	f000 f80d 	bl	8005ad8 <__swsetup_r>
 8005abe:	2800      	cmp	r0, #0
 8005ac0:	d0cc      	beq.n	8005a5c <__swbuf_r+0x28>
 8005ac2:	f04f 37ff 	mov.w	r7, #4294967295
 8005ac6:	4638      	mov	r0, r7
 8005ac8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005aca:	bf00      	nop
 8005acc:	08007764 	.word	0x08007764
 8005ad0:	08007784 	.word	0x08007784
 8005ad4:	08007744 	.word	0x08007744

08005ad8 <__swsetup_r>:
 8005ad8:	4b32      	ldr	r3, [pc, #200]	; (8005ba4 <__swsetup_r+0xcc>)
 8005ada:	b570      	push	{r4, r5, r6, lr}
 8005adc:	681d      	ldr	r5, [r3, #0]
 8005ade:	4606      	mov	r6, r0
 8005ae0:	460c      	mov	r4, r1
 8005ae2:	b125      	cbz	r5, 8005aee <__swsetup_r+0x16>
 8005ae4:	69ab      	ldr	r3, [r5, #24]
 8005ae6:	b913      	cbnz	r3, 8005aee <__swsetup_r+0x16>
 8005ae8:	4628      	mov	r0, r5
 8005aea:	f000 f953 	bl	8005d94 <__sinit>
 8005aee:	4b2e      	ldr	r3, [pc, #184]	; (8005ba8 <__swsetup_r+0xd0>)
 8005af0:	429c      	cmp	r4, r3
 8005af2:	d10f      	bne.n	8005b14 <__swsetup_r+0x3c>
 8005af4:	686c      	ldr	r4, [r5, #4]
 8005af6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005afa:	b29a      	uxth	r2, r3
 8005afc:	0715      	lsls	r5, r2, #28
 8005afe:	d42c      	bmi.n	8005b5a <__swsetup_r+0x82>
 8005b00:	06d0      	lsls	r0, r2, #27
 8005b02:	d411      	bmi.n	8005b28 <__swsetup_r+0x50>
 8005b04:	2209      	movs	r2, #9
 8005b06:	6032      	str	r2, [r6, #0]
 8005b08:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005b0c:	81a3      	strh	r3, [r4, #12]
 8005b0e:	f04f 30ff 	mov.w	r0, #4294967295
 8005b12:	e03e      	b.n	8005b92 <__swsetup_r+0xba>
 8005b14:	4b25      	ldr	r3, [pc, #148]	; (8005bac <__swsetup_r+0xd4>)
 8005b16:	429c      	cmp	r4, r3
 8005b18:	d101      	bne.n	8005b1e <__swsetup_r+0x46>
 8005b1a:	68ac      	ldr	r4, [r5, #8]
 8005b1c:	e7eb      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <__swsetup_r+0xd8>)
 8005b20:	429c      	cmp	r4, r3
 8005b22:	bf08      	it	eq
 8005b24:	68ec      	ldreq	r4, [r5, #12]
 8005b26:	e7e6      	b.n	8005af6 <__swsetup_r+0x1e>
 8005b28:	0751      	lsls	r1, r2, #29
 8005b2a:	d512      	bpl.n	8005b52 <__swsetup_r+0x7a>
 8005b2c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b2e:	b141      	cbz	r1, 8005b42 <__swsetup_r+0x6a>
 8005b30:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b34:	4299      	cmp	r1, r3
 8005b36:	d002      	beq.n	8005b3e <__swsetup_r+0x66>
 8005b38:	4630      	mov	r0, r6
 8005b3a:	f000 fa19 	bl	8005f70 <_free_r>
 8005b3e:	2300      	movs	r3, #0
 8005b40:	6363      	str	r3, [r4, #52]	; 0x34
 8005b42:	89a3      	ldrh	r3, [r4, #12]
 8005b44:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8005b48:	81a3      	strh	r3, [r4, #12]
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	6063      	str	r3, [r4, #4]
 8005b4e:	6923      	ldr	r3, [r4, #16]
 8005b50:	6023      	str	r3, [r4, #0]
 8005b52:	89a3      	ldrh	r3, [r4, #12]
 8005b54:	f043 0308 	orr.w	r3, r3, #8
 8005b58:	81a3      	strh	r3, [r4, #12]
 8005b5a:	6923      	ldr	r3, [r4, #16]
 8005b5c:	b94b      	cbnz	r3, 8005b72 <__swsetup_r+0x9a>
 8005b5e:	89a3      	ldrh	r3, [r4, #12]
 8005b60:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8005b64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b68:	d003      	beq.n	8005b72 <__swsetup_r+0x9a>
 8005b6a:	4621      	mov	r1, r4
 8005b6c:	4630      	mov	r0, r6
 8005b6e:	f000 f9bf 	bl	8005ef0 <__smakebuf_r>
 8005b72:	89a2      	ldrh	r2, [r4, #12]
 8005b74:	f012 0301 	ands.w	r3, r2, #1
 8005b78:	d00c      	beq.n	8005b94 <__swsetup_r+0xbc>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	60a3      	str	r3, [r4, #8]
 8005b7e:	6963      	ldr	r3, [r4, #20]
 8005b80:	425b      	negs	r3, r3
 8005b82:	61a3      	str	r3, [r4, #24]
 8005b84:	6923      	ldr	r3, [r4, #16]
 8005b86:	b953      	cbnz	r3, 8005b9e <__swsetup_r+0xc6>
 8005b88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b8c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8005b90:	d1ba      	bne.n	8005b08 <__swsetup_r+0x30>
 8005b92:	bd70      	pop	{r4, r5, r6, pc}
 8005b94:	0792      	lsls	r2, r2, #30
 8005b96:	bf58      	it	pl
 8005b98:	6963      	ldrpl	r3, [r4, #20]
 8005b9a:	60a3      	str	r3, [r4, #8]
 8005b9c:	e7f2      	b.n	8005b84 <__swsetup_r+0xac>
 8005b9e:	2000      	movs	r0, #0
 8005ba0:	e7f7      	b.n	8005b92 <__swsetup_r+0xba>
 8005ba2:	bf00      	nop
 8005ba4:	20000564 	.word	0x20000564
 8005ba8:	08007764 	.word	0x08007764
 8005bac:	08007784 	.word	0x08007784
 8005bb0:	08007744 	.word	0x08007744

08005bb4 <__sflush_r>:
 8005bb4:	898a      	ldrh	r2, [r1, #12]
 8005bb6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005bba:	4605      	mov	r5, r0
 8005bbc:	0710      	lsls	r0, r2, #28
 8005bbe:	460c      	mov	r4, r1
 8005bc0:	d458      	bmi.n	8005c74 <__sflush_r+0xc0>
 8005bc2:	684b      	ldr	r3, [r1, #4]
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	dc05      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bc8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	dc02      	bgt.n	8005bd4 <__sflush_r+0x20>
 8005bce:	2000      	movs	r0, #0
 8005bd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005bd4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005bd6:	2e00      	cmp	r6, #0
 8005bd8:	d0f9      	beq.n	8005bce <__sflush_r+0x1a>
 8005bda:	2300      	movs	r3, #0
 8005bdc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8005be0:	682f      	ldr	r7, [r5, #0]
 8005be2:	6a21      	ldr	r1, [r4, #32]
 8005be4:	602b      	str	r3, [r5, #0]
 8005be6:	d032      	beq.n	8005c4e <__sflush_r+0x9a>
 8005be8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8005bea:	89a3      	ldrh	r3, [r4, #12]
 8005bec:	075a      	lsls	r2, r3, #29
 8005bee:	d505      	bpl.n	8005bfc <__sflush_r+0x48>
 8005bf0:	6863      	ldr	r3, [r4, #4]
 8005bf2:	1ac0      	subs	r0, r0, r3
 8005bf4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8005bf6:	b10b      	cbz	r3, 8005bfc <__sflush_r+0x48>
 8005bf8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005bfa:	1ac0      	subs	r0, r0, r3
 8005bfc:	2300      	movs	r3, #0
 8005bfe:	4602      	mov	r2, r0
 8005c00:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8005c02:	6a21      	ldr	r1, [r4, #32]
 8005c04:	4628      	mov	r0, r5
 8005c06:	47b0      	blx	r6
 8005c08:	1c43      	adds	r3, r0, #1
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	d106      	bne.n	8005c1c <__sflush_r+0x68>
 8005c0e:	6829      	ldr	r1, [r5, #0]
 8005c10:	291d      	cmp	r1, #29
 8005c12:	d848      	bhi.n	8005ca6 <__sflush_r+0xf2>
 8005c14:	4a29      	ldr	r2, [pc, #164]	; (8005cbc <__sflush_r+0x108>)
 8005c16:	40ca      	lsrs	r2, r1
 8005c18:	07d6      	lsls	r6, r2, #31
 8005c1a:	d544      	bpl.n	8005ca6 <__sflush_r+0xf2>
 8005c1c:	2200      	movs	r2, #0
 8005c1e:	6062      	str	r2, [r4, #4]
 8005c20:	04d9      	lsls	r1, r3, #19
 8005c22:	6922      	ldr	r2, [r4, #16]
 8005c24:	6022      	str	r2, [r4, #0]
 8005c26:	d504      	bpl.n	8005c32 <__sflush_r+0x7e>
 8005c28:	1c42      	adds	r2, r0, #1
 8005c2a:	d101      	bne.n	8005c30 <__sflush_r+0x7c>
 8005c2c:	682b      	ldr	r3, [r5, #0]
 8005c2e:	b903      	cbnz	r3, 8005c32 <__sflush_r+0x7e>
 8005c30:	6560      	str	r0, [r4, #84]	; 0x54
 8005c32:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c34:	602f      	str	r7, [r5, #0]
 8005c36:	2900      	cmp	r1, #0
 8005c38:	d0c9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c3a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005c3e:	4299      	cmp	r1, r3
 8005c40:	d002      	beq.n	8005c48 <__sflush_r+0x94>
 8005c42:	4628      	mov	r0, r5
 8005c44:	f000 f994 	bl	8005f70 <_free_r>
 8005c48:	2000      	movs	r0, #0
 8005c4a:	6360      	str	r0, [r4, #52]	; 0x34
 8005c4c:	e7c0      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c4e:	2301      	movs	r3, #1
 8005c50:	4628      	mov	r0, r5
 8005c52:	47b0      	blx	r6
 8005c54:	1c41      	adds	r1, r0, #1
 8005c56:	d1c8      	bne.n	8005bea <__sflush_r+0x36>
 8005c58:	682b      	ldr	r3, [r5, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	d0c5      	beq.n	8005bea <__sflush_r+0x36>
 8005c5e:	2b1d      	cmp	r3, #29
 8005c60:	d001      	beq.n	8005c66 <__sflush_r+0xb2>
 8005c62:	2b16      	cmp	r3, #22
 8005c64:	d101      	bne.n	8005c6a <__sflush_r+0xb6>
 8005c66:	602f      	str	r7, [r5, #0]
 8005c68:	e7b1      	b.n	8005bce <__sflush_r+0x1a>
 8005c6a:	89a3      	ldrh	r3, [r4, #12]
 8005c6c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005c70:	81a3      	strh	r3, [r4, #12]
 8005c72:	e7ad      	b.n	8005bd0 <__sflush_r+0x1c>
 8005c74:	690f      	ldr	r7, [r1, #16]
 8005c76:	2f00      	cmp	r7, #0
 8005c78:	d0a9      	beq.n	8005bce <__sflush_r+0x1a>
 8005c7a:	0793      	lsls	r3, r2, #30
 8005c7c:	680e      	ldr	r6, [r1, #0]
 8005c7e:	bf08      	it	eq
 8005c80:	694b      	ldreq	r3, [r1, #20]
 8005c82:	600f      	str	r7, [r1, #0]
 8005c84:	bf18      	it	ne
 8005c86:	2300      	movne	r3, #0
 8005c88:	eba6 0807 	sub.w	r8, r6, r7
 8005c8c:	608b      	str	r3, [r1, #8]
 8005c8e:	f1b8 0f00 	cmp.w	r8, #0
 8005c92:	dd9c      	ble.n	8005bce <__sflush_r+0x1a>
 8005c94:	4643      	mov	r3, r8
 8005c96:	463a      	mov	r2, r7
 8005c98:	6a21      	ldr	r1, [r4, #32]
 8005c9a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8005c9c:	4628      	mov	r0, r5
 8005c9e:	47b0      	blx	r6
 8005ca0:	2800      	cmp	r0, #0
 8005ca2:	dc06      	bgt.n	8005cb2 <__sflush_r+0xfe>
 8005ca4:	89a3      	ldrh	r3, [r4, #12]
 8005ca6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005caa:	81a3      	strh	r3, [r4, #12]
 8005cac:	f04f 30ff 	mov.w	r0, #4294967295
 8005cb0:	e78e      	b.n	8005bd0 <__sflush_r+0x1c>
 8005cb2:	4407      	add	r7, r0
 8005cb4:	eba8 0800 	sub.w	r8, r8, r0
 8005cb8:	e7e9      	b.n	8005c8e <__sflush_r+0xda>
 8005cba:	bf00      	nop
 8005cbc:	20400001 	.word	0x20400001

08005cc0 <_fflush_r>:
 8005cc0:	b538      	push	{r3, r4, r5, lr}
 8005cc2:	690b      	ldr	r3, [r1, #16]
 8005cc4:	4605      	mov	r5, r0
 8005cc6:	460c      	mov	r4, r1
 8005cc8:	b1db      	cbz	r3, 8005d02 <_fflush_r+0x42>
 8005cca:	b118      	cbz	r0, 8005cd4 <_fflush_r+0x14>
 8005ccc:	6983      	ldr	r3, [r0, #24]
 8005cce:	b90b      	cbnz	r3, 8005cd4 <_fflush_r+0x14>
 8005cd0:	f000 f860 	bl	8005d94 <__sinit>
 8005cd4:	4b0c      	ldr	r3, [pc, #48]	; (8005d08 <_fflush_r+0x48>)
 8005cd6:	429c      	cmp	r4, r3
 8005cd8:	d109      	bne.n	8005cee <_fflush_r+0x2e>
 8005cda:	686c      	ldr	r4, [r5, #4]
 8005cdc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ce0:	b17b      	cbz	r3, 8005d02 <_fflush_r+0x42>
 8005ce2:	4621      	mov	r1, r4
 8005ce4:	4628      	mov	r0, r5
 8005ce6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005cea:	f7ff bf63 	b.w	8005bb4 <__sflush_r>
 8005cee:	4b07      	ldr	r3, [pc, #28]	; (8005d0c <_fflush_r+0x4c>)
 8005cf0:	429c      	cmp	r4, r3
 8005cf2:	d101      	bne.n	8005cf8 <_fflush_r+0x38>
 8005cf4:	68ac      	ldr	r4, [r5, #8]
 8005cf6:	e7f1      	b.n	8005cdc <_fflush_r+0x1c>
 8005cf8:	4b05      	ldr	r3, [pc, #20]	; (8005d10 <_fflush_r+0x50>)
 8005cfa:	429c      	cmp	r4, r3
 8005cfc:	bf08      	it	eq
 8005cfe:	68ec      	ldreq	r4, [r5, #12]
 8005d00:	e7ec      	b.n	8005cdc <_fflush_r+0x1c>
 8005d02:	2000      	movs	r0, #0
 8005d04:	bd38      	pop	{r3, r4, r5, pc}
 8005d06:	bf00      	nop
 8005d08:	08007764 	.word	0x08007764
 8005d0c:	08007784 	.word	0x08007784
 8005d10:	08007744 	.word	0x08007744

08005d14 <std>:
 8005d14:	2300      	movs	r3, #0
 8005d16:	b510      	push	{r4, lr}
 8005d18:	4604      	mov	r4, r0
 8005d1a:	e9c0 3300 	strd	r3, r3, [r0]
 8005d1e:	6083      	str	r3, [r0, #8]
 8005d20:	8181      	strh	r1, [r0, #12]
 8005d22:	6643      	str	r3, [r0, #100]	; 0x64
 8005d24:	81c2      	strh	r2, [r0, #14]
 8005d26:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005d2a:	6183      	str	r3, [r0, #24]
 8005d2c:	4619      	mov	r1, r3
 8005d2e:	2208      	movs	r2, #8
 8005d30:	305c      	adds	r0, #92	; 0x5c
 8005d32:	f7ff fde9 	bl	8005908 <memset>
 8005d36:	4b05      	ldr	r3, [pc, #20]	; (8005d4c <std+0x38>)
 8005d38:	6263      	str	r3, [r4, #36]	; 0x24
 8005d3a:	4b05      	ldr	r3, [pc, #20]	; (8005d50 <std+0x3c>)
 8005d3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8005d3e:	4b05      	ldr	r3, [pc, #20]	; (8005d54 <std+0x40>)
 8005d40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8005d42:	4b05      	ldr	r3, [pc, #20]	; (8005d58 <std+0x44>)
 8005d44:	6224      	str	r4, [r4, #32]
 8005d46:	6323      	str	r3, [r4, #48]	; 0x30
 8005d48:	bd10      	pop	{r4, pc}
 8005d4a:	bf00      	nop
 8005d4c:	08006671 	.word	0x08006671
 8005d50:	08006693 	.word	0x08006693
 8005d54:	080066cb 	.word	0x080066cb
 8005d58:	080066ef 	.word	0x080066ef

08005d5c <_cleanup_r>:
 8005d5c:	4901      	ldr	r1, [pc, #4]	; (8005d64 <_cleanup_r+0x8>)
 8005d5e:	f000 b885 	b.w	8005e6c <_fwalk_reent>
 8005d62:	bf00      	nop
 8005d64:	08005cc1 	.word	0x08005cc1

08005d68 <__sfmoreglue>:
 8005d68:	b570      	push	{r4, r5, r6, lr}
 8005d6a:	1e4a      	subs	r2, r1, #1
 8005d6c:	2568      	movs	r5, #104	; 0x68
 8005d6e:	4355      	muls	r5, r2
 8005d70:	460e      	mov	r6, r1
 8005d72:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8005d76:	f000 f949 	bl	800600c <_malloc_r>
 8005d7a:	4604      	mov	r4, r0
 8005d7c:	b140      	cbz	r0, 8005d90 <__sfmoreglue+0x28>
 8005d7e:	2100      	movs	r1, #0
 8005d80:	e9c0 1600 	strd	r1, r6, [r0]
 8005d84:	300c      	adds	r0, #12
 8005d86:	60a0      	str	r0, [r4, #8]
 8005d88:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8005d8c:	f7ff fdbc 	bl	8005908 <memset>
 8005d90:	4620      	mov	r0, r4
 8005d92:	bd70      	pop	{r4, r5, r6, pc}

08005d94 <__sinit>:
 8005d94:	6983      	ldr	r3, [r0, #24]
 8005d96:	b510      	push	{r4, lr}
 8005d98:	4604      	mov	r4, r0
 8005d9a:	bb33      	cbnz	r3, 8005dea <__sinit+0x56>
 8005d9c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8005da0:	6503      	str	r3, [r0, #80]	; 0x50
 8005da2:	4b12      	ldr	r3, [pc, #72]	; (8005dec <__sinit+0x58>)
 8005da4:	4a12      	ldr	r2, [pc, #72]	; (8005df0 <__sinit+0x5c>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	6282      	str	r2, [r0, #40]	; 0x28
 8005daa:	4298      	cmp	r0, r3
 8005dac:	bf04      	itt	eq
 8005dae:	2301      	moveq	r3, #1
 8005db0:	6183      	streq	r3, [r0, #24]
 8005db2:	f000 f81f 	bl	8005df4 <__sfp>
 8005db6:	6060      	str	r0, [r4, #4]
 8005db8:	4620      	mov	r0, r4
 8005dba:	f000 f81b 	bl	8005df4 <__sfp>
 8005dbe:	60a0      	str	r0, [r4, #8]
 8005dc0:	4620      	mov	r0, r4
 8005dc2:	f000 f817 	bl	8005df4 <__sfp>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	60e0      	str	r0, [r4, #12]
 8005dca:	2104      	movs	r1, #4
 8005dcc:	6860      	ldr	r0, [r4, #4]
 8005dce:	f7ff ffa1 	bl	8005d14 <std>
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	2109      	movs	r1, #9
 8005dd6:	68a0      	ldr	r0, [r4, #8]
 8005dd8:	f7ff ff9c 	bl	8005d14 <std>
 8005ddc:	2202      	movs	r2, #2
 8005dde:	2112      	movs	r1, #18
 8005de0:	68e0      	ldr	r0, [r4, #12]
 8005de2:	f7ff ff97 	bl	8005d14 <std>
 8005de6:	2301      	movs	r3, #1
 8005de8:	61a3      	str	r3, [r4, #24]
 8005dea:	bd10      	pop	{r4, pc}
 8005dec:	08007740 	.word	0x08007740
 8005df0:	08005d5d 	.word	0x08005d5d

08005df4 <__sfp>:
 8005df4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005df6:	4b1b      	ldr	r3, [pc, #108]	; (8005e64 <__sfp+0x70>)
 8005df8:	681e      	ldr	r6, [r3, #0]
 8005dfa:	69b3      	ldr	r3, [r6, #24]
 8005dfc:	4607      	mov	r7, r0
 8005dfe:	b913      	cbnz	r3, 8005e06 <__sfp+0x12>
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7ff ffc7 	bl	8005d94 <__sinit>
 8005e06:	3648      	adds	r6, #72	; 0x48
 8005e08:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8005e0c:	3b01      	subs	r3, #1
 8005e0e:	d503      	bpl.n	8005e18 <__sfp+0x24>
 8005e10:	6833      	ldr	r3, [r6, #0]
 8005e12:	b133      	cbz	r3, 8005e22 <__sfp+0x2e>
 8005e14:	6836      	ldr	r6, [r6, #0]
 8005e16:	e7f7      	b.n	8005e08 <__sfp+0x14>
 8005e18:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8005e1c:	b16d      	cbz	r5, 8005e3a <__sfp+0x46>
 8005e1e:	3468      	adds	r4, #104	; 0x68
 8005e20:	e7f4      	b.n	8005e0c <__sfp+0x18>
 8005e22:	2104      	movs	r1, #4
 8005e24:	4638      	mov	r0, r7
 8005e26:	f7ff ff9f 	bl	8005d68 <__sfmoreglue>
 8005e2a:	6030      	str	r0, [r6, #0]
 8005e2c:	2800      	cmp	r0, #0
 8005e2e:	d1f1      	bne.n	8005e14 <__sfp+0x20>
 8005e30:	230c      	movs	r3, #12
 8005e32:	603b      	str	r3, [r7, #0]
 8005e34:	4604      	mov	r4, r0
 8005e36:	4620      	mov	r0, r4
 8005e38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005e3a:	4b0b      	ldr	r3, [pc, #44]	; (8005e68 <__sfp+0x74>)
 8005e3c:	6665      	str	r5, [r4, #100]	; 0x64
 8005e3e:	e9c4 5500 	strd	r5, r5, [r4]
 8005e42:	60a5      	str	r5, [r4, #8]
 8005e44:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8005e48:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8005e4c:	2208      	movs	r2, #8
 8005e4e:	4629      	mov	r1, r5
 8005e50:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8005e54:	f7ff fd58 	bl	8005908 <memset>
 8005e58:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8005e5c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8005e60:	e7e9      	b.n	8005e36 <__sfp+0x42>
 8005e62:	bf00      	nop
 8005e64:	08007740 	.word	0x08007740
 8005e68:	ffff0001 	.word	0xffff0001

08005e6c <_fwalk_reent>:
 8005e6c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e70:	4680      	mov	r8, r0
 8005e72:	4689      	mov	r9, r1
 8005e74:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8005e78:	2600      	movs	r6, #0
 8005e7a:	b914      	cbnz	r4, 8005e82 <_fwalk_reent+0x16>
 8005e7c:	4630      	mov	r0, r6
 8005e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e82:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8005e86:	3f01      	subs	r7, #1
 8005e88:	d501      	bpl.n	8005e8e <_fwalk_reent+0x22>
 8005e8a:	6824      	ldr	r4, [r4, #0]
 8005e8c:	e7f5      	b.n	8005e7a <_fwalk_reent+0xe>
 8005e8e:	89ab      	ldrh	r3, [r5, #12]
 8005e90:	2b01      	cmp	r3, #1
 8005e92:	d907      	bls.n	8005ea4 <_fwalk_reent+0x38>
 8005e94:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e98:	3301      	adds	r3, #1
 8005e9a:	d003      	beq.n	8005ea4 <_fwalk_reent+0x38>
 8005e9c:	4629      	mov	r1, r5
 8005e9e:	4640      	mov	r0, r8
 8005ea0:	47c8      	blx	r9
 8005ea2:	4306      	orrs	r6, r0
 8005ea4:	3568      	adds	r5, #104	; 0x68
 8005ea6:	e7ee      	b.n	8005e86 <_fwalk_reent+0x1a>

08005ea8 <__swhatbuf_r>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	460e      	mov	r6, r1
 8005eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eb0:	2900      	cmp	r1, #0
 8005eb2:	b096      	sub	sp, #88	; 0x58
 8005eb4:	4614      	mov	r4, r2
 8005eb6:	461d      	mov	r5, r3
 8005eb8:	da07      	bge.n	8005eca <__swhatbuf_r+0x22>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	602b      	str	r3, [r5, #0]
 8005ebe:	89b3      	ldrh	r3, [r6, #12]
 8005ec0:	061a      	lsls	r2, r3, #24
 8005ec2:	d410      	bmi.n	8005ee6 <__swhatbuf_r+0x3e>
 8005ec4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005ec8:	e00e      	b.n	8005ee8 <__swhatbuf_r+0x40>
 8005eca:	466a      	mov	r2, sp
 8005ecc:	f000 fc36 	bl	800673c <_fstat_r>
 8005ed0:	2800      	cmp	r0, #0
 8005ed2:	dbf2      	blt.n	8005eba <__swhatbuf_r+0x12>
 8005ed4:	9a01      	ldr	r2, [sp, #4]
 8005ed6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8005eda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005ede:	425a      	negs	r2, r3
 8005ee0:	415a      	adcs	r2, r3
 8005ee2:	602a      	str	r2, [r5, #0]
 8005ee4:	e7ee      	b.n	8005ec4 <__swhatbuf_r+0x1c>
 8005ee6:	2340      	movs	r3, #64	; 0x40
 8005ee8:	2000      	movs	r0, #0
 8005eea:	6023      	str	r3, [r4, #0]
 8005eec:	b016      	add	sp, #88	; 0x58
 8005eee:	bd70      	pop	{r4, r5, r6, pc}

08005ef0 <__smakebuf_r>:
 8005ef0:	898b      	ldrh	r3, [r1, #12]
 8005ef2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005ef4:	079d      	lsls	r5, r3, #30
 8005ef6:	4606      	mov	r6, r0
 8005ef8:	460c      	mov	r4, r1
 8005efa:	d507      	bpl.n	8005f0c <__smakebuf_r+0x1c>
 8005efc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005f00:	6023      	str	r3, [r4, #0]
 8005f02:	6123      	str	r3, [r4, #16]
 8005f04:	2301      	movs	r3, #1
 8005f06:	6163      	str	r3, [r4, #20]
 8005f08:	b002      	add	sp, #8
 8005f0a:	bd70      	pop	{r4, r5, r6, pc}
 8005f0c:	ab01      	add	r3, sp, #4
 8005f0e:	466a      	mov	r2, sp
 8005f10:	f7ff ffca 	bl	8005ea8 <__swhatbuf_r>
 8005f14:	9900      	ldr	r1, [sp, #0]
 8005f16:	4605      	mov	r5, r0
 8005f18:	4630      	mov	r0, r6
 8005f1a:	f000 f877 	bl	800600c <_malloc_r>
 8005f1e:	b948      	cbnz	r0, 8005f34 <__smakebuf_r+0x44>
 8005f20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f24:	059a      	lsls	r2, r3, #22
 8005f26:	d4ef      	bmi.n	8005f08 <__smakebuf_r+0x18>
 8005f28:	f023 0303 	bic.w	r3, r3, #3
 8005f2c:	f043 0302 	orr.w	r3, r3, #2
 8005f30:	81a3      	strh	r3, [r4, #12]
 8005f32:	e7e3      	b.n	8005efc <__smakebuf_r+0xc>
 8005f34:	4b0d      	ldr	r3, [pc, #52]	; (8005f6c <__smakebuf_r+0x7c>)
 8005f36:	62b3      	str	r3, [r6, #40]	; 0x28
 8005f38:	89a3      	ldrh	r3, [r4, #12]
 8005f3a:	6020      	str	r0, [r4, #0]
 8005f3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005f40:	81a3      	strh	r3, [r4, #12]
 8005f42:	9b00      	ldr	r3, [sp, #0]
 8005f44:	6163      	str	r3, [r4, #20]
 8005f46:	9b01      	ldr	r3, [sp, #4]
 8005f48:	6120      	str	r0, [r4, #16]
 8005f4a:	b15b      	cbz	r3, 8005f64 <__smakebuf_r+0x74>
 8005f4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005f50:	4630      	mov	r0, r6
 8005f52:	f000 fc05 	bl	8006760 <_isatty_r>
 8005f56:	b128      	cbz	r0, 8005f64 <__smakebuf_r+0x74>
 8005f58:	89a3      	ldrh	r3, [r4, #12]
 8005f5a:	f023 0303 	bic.w	r3, r3, #3
 8005f5e:	f043 0301 	orr.w	r3, r3, #1
 8005f62:	81a3      	strh	r3, [r4, #12]
 8005f64:	89a3      	ldrh	r3, [r4, #12]
 8005f66:	431d      	orrs	r5, r3
 8005f68:	81a5      	strh	r5, [r4, #12]
 8005f6a:	e7cd      	b.n	8005f08 <__smakebuf_r+0x18>
 8005f6c:	08005d5d 	.word	0x08005d5d

08005f70 <_free_r>:
 8005f70:	b538      	push	{r3, r4, r5, lr}
 8005f72:	4605      	mov	r5, r0
 8005f74:	2900      	cmp	r1, #0
 8005f76:	d045      	beq.n	8006004 <_free_r+0x94>
 8005f78:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005f7c:	1f0c      	subs	r4, r1, #4
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	bfb8      	it	lt
 8005f82:	18e4      	addlt	r4, r4, r3
 8005f84:	f000 fc0e 	bl	80067a4 <__malloc_lock>
 8005f88:	4a1f      	ldr	r2, [pc, #124]	; (8006008 <_free_r+0x98>)
 8005f8a:	6813      	ldr	r3, [r2, #0]
 8005f8c:	4610      	mov	r0, r2
 8005f8e:	b933      	cbnz	r3, 8005f9e <_free_r+0x2e>
 8005f90:	6063      	str	r3, [r4, #4]
 8005f92:	6014      	str	r4, [r2, #0]
 8005f94:	4628      	mov	r0, r5
 8005f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005f9a:	f000 bc04 	b.w	80067a6 <__malloc_unlock>
 8005f9e:	42a3      	cmp	r3, r4
 8005fa0:	d90c      	bls.n	8005fbc <_free_r+0x4c>
 8005fa2:	6821      	ldr	r1, [r4, #0]
 8005fa4:	1862      	adds	r2, r4, r1
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	bf04      	itt	eq
 8005faa:	681a      	ldreq	r2, [r3, #0]
 8005fac:	685b      	ldreq	r3, [r3, #4]
 8005fae:	6063      	str	r3, [r4, #4]
 8005fb0:	bf04      	itt	eq
 8005fb2:	1852      	addeq	r2, r2, r1
 8005fb4:	6022      	streq	r2, [r4, #0]
 8005fb6:	6004      	str	r4, [r0, #0]
 8005fb8:	e7ec      	b.n	8005f94 <_free_r+0x24>
 8005fba:	4613      	mov	r3, r2
 8005fbc:	685a      	ldr	r2, [r3, #4]
 8005fbe:	b10a      	cbz	r2, 8005fc4 <_free_r+0x54>
 8005fc0:	42a2      	cmp	r2, r4
 8005fc2:	d9fa      	bls.n	8005fba <_free_r+0x4a>
 8005fc4:	6819      	ldr	r1, [r3, #0]
 8005fc6:	1858      	adds	r0, r3, r1
 8005fc8:	42a0      	cmp	r0, r4
 8005fca:	d10b      	bne.n	8005fe4 <_free_r+0x74>
 8005fcc:	6820      	ldr	r0, [r4, #0]
 8005fce:	4401      	add	r1, r0
 8005fd0:	1858      	adds	r0, r3, r1
 8005fd2:	4282      	cmp	r2, r0
 8005fd4:	6019      	str	r1, [r3, #0]
 8005fd6:	d1dd      	bne.n	8005f94 <_free_r+0x24>
 8005fd8:	6810      	ldr	r0, [r2, #0]
 8005fda:	6852      	ldr	r2, [r2, #4]
 8005fdc:	605a      	str	r2, [r3, #4]
 8005fde:	4401      	add	r1, r0
 8005fe0:	6019      	str	r1, [r3, #0]
 8005fe2:	e7d7      	b.n	8005f94 <_free_r+0x24>
 8005fe4:	d902      	bls.n	8005fec <_free_r+0x7c>
 8005fe6:	230c      	movs	r3, #12
 8005fe8:	602b      	str	r3, [r5, #0]
 8005fea:	e7d3      	b.n	8005f94 <_free_r+0x24>
 8005fec:	6820      	ldr	r0, [r4, #0]
 8005fee:	1821      	adds	r1, r4, r0
 8005ff0:	428a      	cmp	r2, r1
 8005ff2:	bf04      	itt	eq
 8005ff4:	6811      	ldreq	r1, [r2, #0]
 8005ff6:	6852      	ldreq	r2, [r2, #4]
 8005ff8:	6062      	str	r2, [r4, #4]
 8005ffa:	bf04      	itt	eq
 8005ffc:	1809      	addeq	r1, r1, r0
 8005ffe:	6021      	streq	r1, [r4, #0]
 8006000:	605c      	str	r4, [r3, #4]
 8006002:	e7c7      	b.n	8005f94 <_free_r+0x24>
 8006004:	bd38      	pop	{r3, r4, r5, pc}
 8006006:	bf00      	nop
 8006008:	2000090c 	.word	0x2000090c

0800600c <_malloc_r>:
 800600c:	b570      	push	{r4, r5, r6, lr}
 800600e:	1ccd      	adds	r5, r1, #3
 8006010:	f025 0503 	bic.w	r5, r5, #3
 8006014:	3508      	adds	r5, #8
 8006016:	2d0c      	cmp	r5, #12
 8006018:	bf38      	it	cc
 800601a:	250c      	movcc	r5, #12
 800601c:	2d00      	cmp	r5, #0
 800601e:	4606      	mov	r6, r0
 8006020:	db01      	blt.n	8006026 <_malloc_r+0x1a>
 8006022:	42a9      	cmp	r1, r5
 8006024:	d903      	bls.n	800602e <_malloc_r+0x22>
 8006026:	230c      	movs	r3, #12
 8006028:	6033      	str	r3, [r6, #0]
 800602a:	2000      	movs	r0, #0
 800602c:	bd70      	pop	{r4, r5, r6, pc}
 800602e:	f000 fbb9 	bl	80067a4 <__malloc_lock>
 8006032:	4a21      	ldr	r2, [pc, #132]	; (80060b8 <_malloc_r+0xac>)
 8006034:	6814      	ldr	r4, [r2, #0]
 8006036:	4621      	mov	r1, r4
 8006038:	b991      	cbnz	r1, 8006060 <_malloc_r+0x54>
 800603a:	4c20      	ldr	r4, [pc, #128]	; (80060bc <_malloc_r+0xb0>)
 800603c:	6823      	ldr	r3, [r4, #0]
 800603e:	b91b      	cbnz	r3, 8006048 <_malloc_r+0x3c>
 8006040:	4630      	mov	r0, r6
 8006042:	f000 fb05 	bl	8006650 <_sbrk_r>
 8006046:	6020      	str	r0, [r4, #0]
 8006048:	4629      	mov	r1, r5
 800604a:	4630      	mov	r0, r6
 800604c:	f000 fb00 	bl	8006650 <_sbrk_r>
 8006050:	1c43      	adds	r3, r0, #1
 8006052:	d124      	bne.n	800609e <_malloc_r+0x92>
 8006054:	230c      	movs	r3, #12
 8006056:	6033      	str	r3, [r6, #0]
 8006058:	4630      	mov	r0, r6
 800605a:	f000 fba4 	bl	80067a6 <__malloc_unlock>
 800605e:	e7e4      	b.n	800602a <_malloc_r+0x1e>
 8006060:	680b      	ldr	r3, [r1, #0]
 8006062:	1b5b      	subs	r3, r3, r5
 8006064:	d418      	bmi.n	8006098 <_malloc_r+0x8c>
 8006066:	2b0b      	cmp	r3, #11
 8006068:	d90f      	bls.n	800608a <_malloc_r+0x7e>
 800606a:	600b      	str	r3, [r1, #0]
 800606c:	50cd      	str	r5, [r1, r3]
 800606e:	18cc      	adds	r4, r1, r3
 8006070:	4630      	mov	r0, r6
 8006072:	f000 fb98 	bl	80067a6 <__malloc_unlock>
 8006076:	f104 000b 	add.w	r0, r4, #11
 800607a:	1d23      	adds	r3, r4, #4
 800607c:	f020 0007 	bic.w	r0, r0, #7
 8006080:	1ac3      	subs	r3, r0, r3
 8006082:	d0d3      	beq.n	800602c <_malloc_r+0x20>
 8006084:	425a      	negs	r2, r3
 8006086:	50e2      	str	r2, [r4, r3]
 8006088:	e7d0      	b.n	800602c <_malloc_r+0x20>
 800608a:	428c      	cmp	r4, r1
 800608c:	684b      	ldr	r3, [r1, #4]
 800608e:	bf16      	itet	ne
 8006090:	6063      	strne	r3, [r4, #4]
 8006092:	6013      	streq	r3, [r2, #0]
 8006094:	460c      	movne	r4, r1
 8006096:	e7eb      	b.n	8006070 <_malloc_r+0x64>
 8006098:	460c      	mov	r4, r1
 800609a:	6849      	ldr	r1, [r1, #4]
 800609c:	e7cc      	b.n	8006038 <_malloc_r+0x2c>
 800609e:	1cc4      	adds	r4, r0, #3
 80060a0:	f024 0403 	bic.w	r4, r4, #3
 80060a4:	42a0      	cmp	r0, r4
 80060a6:	d005      	beq.n	80060b4 <_malloc_r+0xa8>
 80060a8:	1a21      	subs	r1, r4, r0
 80060aa:	4630      	mov	r0, r6
 80060ac:	f000 fad0 	bl	8006650 <_sbrk_r>
 80060b0:	3001      	adds	r0, #1
 80060b2:	d0cf      	beq.n	8006054 <_malloc_r+0x48>
 80060b4:	6025      	str	r5, [r4, #0]
 80060b6:	e7db      	b.n	8006070 <_malloc_r+0x64>
 80060b8:	2000090c 	.word	0x2000090c
 80060bc:	20000910 	.word	0x20000910

080060c0 <__sfputc_r>:
 80060c0:	6893      	ldr	r3, [r2, #8]
 80060c2:	3b01      	subs	r3, #1
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	b410      	push	{r4}
 80060c8:	6093      	str	r3, [r2, #8]
 80060ca:	da08      	bge.n	80060de <__sfputc_r+0x1e>
 80060cc:	6994      	ldr	r4, [r2, #24]
 80060ce:	42a3      	cmp	r3, r4
 80060d0:	db01      	blt.n	80060d6 <__sfputc_r+0x16>
 80060d2:	290a      	cmp	r1, #10
 80060d4:	d103      	bne.n	80060de <__sfputc_r+0x1e>
 80060d6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060da:	f7ff bcab 	b.w	8005a34 <__swbuf_r>
 80060de:	6813      	ldr	r3, [r2, #0]
 80060e0:	1c58      	adds	r0, r3, #1
 80060e2:	6010      	str	r0, [r2, #0]
 80060e4:	7019      	strb	r1, [r3, #0]
 80060e6:	4608      	mov	r0, r1
 80060e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <__sfputs_r>:
 80060ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80060f0:	4606      	mov	r6, r0
 80060f2:	460f      	mov	r7, r1
 80060f4:	4614      	mov	r4, r2
 80060f6:	18d5      	adds	r5, r2, r3
 80060f8:	42ac      	cmp	r4, r5
 80060fa:	d101      	bne.n	8006100 <__sfputs_r+0x12>
 80060fc:	2000      	movs	r0, #0
 80060fe:	e007      	b.n	8006110 <__sfputs_r+0x22>
 8006100:	463a      	mov	r2, r7
 8006102:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006106:	4630      	mov	r0, r6
 8006108:	f7ff ffda 	bl	80060c0 <__sfputc_r>
 800610c:	1c43      	adds	r3, r0, #1
 800610e:	d1f3      	bne.n	80060f8 <__sfputs_r+0xa>
 8006110:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006114 <_vfiprintf_r>:
 8006114:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006118:	460c      	mov	r4, r1
 800611a:	b09d      	sub	sp, #116	; 0x74
 800611c:	4617      	mov	r7, r2
 800611e:	461d      	mov	r5, r3
 8006120:	4606      	mov	r6, r0
 8006122:	b118      	cbz	r0, 800612c <_vfiprintf_r+0x18>
 8006124:	6983      	ldr	r3, [r0, #24]
 8006126:	b90b      	cbnz	r3, 800612c <_vfiprintf_r+0x18>
 8006128:	f7ff fe34 	bl	8005d94 <__sinit>
 800612c:	4b7c      	ldr	r3, [pc, #496]	; (8006320 <_vfiprintf_r+0x20c>)
 800612e:	429c      	cmp	r4, r3
 8006130:	d158      	bne.n	80061e4 <_vfiprintf_r+0xd0>
 8006132:	6874      	ldr	r4, [r6, #4]
 8006134:	89a3      	ldrh	r3, [r4, #12]
 8006136:	0718      	lsls	r0, r3, #28
 8006138:	d55e      	bpl.n	80061f8 <_vfiprintf_r+0xe4>
 800613a:	6923      	ldr	r3, [r4, #16]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d05b      	beq.n	80061f8 <_vfiprintf_r+0xe4>
 8006140:	2300      	movs	r3, #0
 8006142:	9309      	str	r3, [sp, #36]	; 0x24
 8006144:	2320      	movs	r3, #32
 8006146:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800614a:	2330      	movs	r3, #48	; 0x30
 800614c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006150:	9503      	str	r5, [sp, #12]
 8006152:	f04f 0b01 	mov.w	fp, #1
 8006156:	46b8      	mov	r8, r7
 8006158:	4645      	mov	r5, r8
 800615a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800615e:	b10b      	cbz	r3, 8006164 <_vfiprintf_r+0x50>
 8006160:	2b25      	cmp	r3, #37	; 0x25
 8006162:	d154      	bne.n	800620e <_vfiprintf_r+0xfa>
 8006164:	ebb8 0a07 	subs.w	sl, r8, r7
 8006168:	d00b      	beq.n	8006182 <_vfiprintf_r+0x6e>
 800616a:	4653      	mov	r3, sl
 800616c:	463a      	mov	r2, r7
 800616e:	4621      	mov	r1, r4
 8006170:	4630      	mov	r0, r6
 8006172:	f7ff ffbc 	bl	80060ee <__sfputs_r>
 8006176:	3001      	adds	r0, #1
 8006178:	f000 80c2 	beq.w	8006300 <_vfiprintf_r+0x1ec>
 800617c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800617e:	4453      	add	r3, sl
 8006180:	9309      	str	r3, [sp, #36]	; 0x24
 8006182:	f898 3000 	ldrb.w	r3, [r8]
 8006186:	2b00      	cmp	r3, #0
 8006188:	f000 80ba 	beq.w	8006300 <_vfiprintf_r+0x1ec>
 800618c:	2300      	movs	r3, #0
 800618e:	f04f 32ff 	mov.w	r2, #4294967295
 8006192:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006196:	9304      	str	r3, [sp, #16]
 8006198:	9307      	str	r3, [sp, #28]
 800619a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800619e:	931a      	str	r3, [sp, #104]	; 0x68
 80061a0:	46a8      	mov	r8, r5
 80061a2:	2205      	movs	r2, #5
 80061a4:	f818 1b01 	ldrb.w	r1, [r8], #1
 80061a8:	485e      	ldr	r0, [pc, #376]	; (8006324 <_vfiprintf_r+0x210>)
 80061aa:	f7fa f811 	bl	80001d0 <memchr>
 80061ae:	9b04      	ldr	r3, [sp, #16]
 80061b0:	bb78      	cbnz	r0, 8006212 <_vfiprintf_r+0xfe>
 80061b2:	06d9      	lsls	r1, r3, #27
 80061b4:	bf44      	itt	mi
 80061b6:	2220      	movmi	r2, #32
 80061b8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061bc:	071a      	lsls	r2, r3, #28
 80061be:	bf44      	itt	mi
 80061c0:	222b      	movmi	r2, #43	; 0x2b
 80061c2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80061c6:	782a      	ldrb	r2, [r5, #0]
 80061c8:	2a2a      	cmp	r2, #42	; 0x2a
 80061ca:	d02a      	beq.n	8006222 <_vfiprintf_r+0x10e>
 80061cc:	9a07      	ldr	r2, [sp, #28]
 80061ce:	46a8      	mov	r8, r5
 80061d0:	2000      	movs	r0, #0
 80061d2:	250a      	movs	r5, #10
 80061d4:	4641      	mov	r1, r8
 80061d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80061da:	3b30      	subs	r3, #48	; 0x30
 80061dc:	2b09      	cmp	r3, #9
 80061de:	d969      	bls.n	80062b4 <_vfiprintf_r+0x1a0>
 80061e0:	b360      	cbz	r0, 800623c <_vfiprintf_r+0x128>
 80061e2:	e024      	b.n	800622e <_vfiprintf_r+0x11a>
 80061e4:	4b50      	ldr	r3, [pc, #320]	; (8006328 <_vfiprintf_r+0x214>)
 80061e6:	429c      	cmp	r4, r3
 80061e8:	d101      	bne.n	80061ee <_vfiprintf_r+0xda>
 80061ea:	68b4      	ldr	r4, [r6, #8]
 80061ec:	e7a2      	b.n	8006134 <_vfiprintf_r+0x20>
 80061ee:	4b4f      	ldr	r3, [pc, #316]	; (800632c <_vfiprintf_r+0x218>)
 80061f0:	429c      	cmp	r4, r3
 80061f2:	bf08      	it	eq
 80061f4:	68f4      	ldreq	r4, [r6, #12]
 80061f6:	e79d      	b.n	8006134 <_vfiprintf_r+0x20>
 80061f8:	4621      	mov	r1, r4
 80061fa:	4630      	mov	r0, r6
 80061fc:	f7ff fc6c 	bl	8005ad8 <__swsetup_r>
 8006200:	2800      	cmp	r0, #0
 8006202:	d09d      	beq.n	8006140 <_vfiprintf_r+0x2c>
 8006204:	f04f 30ff 	mov.w	r0, #4294967295
 8006208:	b01d      	add	sp, #116	; 0x74
 800620a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800620e:	46a8      	mov	r8, r5
 8006210:	e7a2      	b.n	8006158 <_vfiprintf_r+0x44>
 8006212:	4a44      	ldr	r2, [pc, #272]	; (8006324 <_vfiprintf_r+0x210>)
 8006214:	1a80      	subs	r0, r0, r2
 8006216:	fa0b f000 	lsl.w	r0, fp, r0
 800621a:	4318      	orrs	r0, r3
 800621c:	9004      	str	r0, [sp, #16]
 800621e:	4645      	mov	r5, r8
 8006220:	e7be      	b.n	80061a0 <_vfiprintf_r+0x8c>
 8006222:	9a03      	ldr	r2, [sp, #12]
 8006224:	1d11      	adds	r1, r2, #4
 8006226:	6812      	ldr	r2, [r2, #0]
 8006228:	9103      	str	r1, [sp, #12]
 800622a:	2a00      	cmp	r2, #0
 800622c:	db01      	blt.n	8006232 <_vfiprintf_r+0x11e>
 800622e:	9207      	str	r2, [sp, #28]
 8006230:	e004      	b.n	800623c <_vfiprintf_r+0x128>
 8006232:	4252      	negs	r2, r2
 8006234:	f043 0302 	orr.w	r3, r3, #2
 8006238:	9207      	str	r2, [sp, #28]
 800623a:	9304      	str	r3, [sp, #16]
 800623c:	f898 3000 	ldrb.w	r3, [r8]
 8006240:	2b2e      	cmp	r3, #46	; 0x2e
 8006242:	d10e      	bne.n	8006262 <_vfiprintf_r+0x14e>
 8006244:	f898 3001 	ldrb.w	r3, [r8, #1]
 8006248:	2b2a      	cmp	r3, #42	; 0x2a
 800624a:	d138      	bne.n	80062be <_vfiprintf_r+0x1aa>
 800624c:	9b03      	ldr	r3, [sp, #12]
 800624e:	1d1a      	adds	r2, r3, #4
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	9203      	str	r2, [sp, #12]
 8006254:	2b00      	cmp	r3, #0
 8006256:	bfb8      	it	lt
 8006258:	f04f 33ff 	movlt.w	r3, #4294967295
 800625c:	f108 0802 	add.w	r8, r8, #2
 8006260:	9305      	str	r3, [sp, #20]
 8006262:	4d33      	ldr	r5, [pc, #204]	; (8006330 <_vfiprintf_r+0x21c>)
 8006264:	f898 1000 	ldrb.w	r1, [r8]
 8006268:	2203      	movs	r2, #3
 800626a:	4628      	mov	r0, r5
 800626c:	f7f9 ffb0 	bl	80001d0 <memchr>
 8006270:	b140      	cbz	r0, 8006284 <_vfiprintf_r+0x170>
 8006272:	2340      	movs	r3, #64	; 0x40
 8006274:	1b40      	subs	r0, r0, r5
 8006276:	fa03 f000 	lsl.w	r0, r3, r0
 800627a:	9b04      	ldr	r3, [sp, #16]
 800627c:	4303      	orrs	r3, r0
 800627e:	f108 0801 	add.w	r8, r8, #1
 8006282:	9304      	str	r3, [sp, #16]
 8006284:	f898 1000 	ldrb.w	r1, [r8]
 8006288:	482a      	ldr	r0, [pc, #168]	; (8006334 <_vfiprintf_r+0x220>)
 800628a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800628e:	2206      	movs	r2, #6
 8006290:	f108 0701 	add.w	r7, r8, #1
 8006294:	f7f9 ff9c 	bl	80001d0 <memchr>
 8006298:	2800      	cmp	r0, #0
 800629a:	d037      	beq.n	800630c <_vfiprintf_r+0x1f8>
 800629c:	4b26      	ldr	r3, [pc, #152]	; (8006338 <_vfiprintf_r+0x224>)
 800629e:	bb1b      	cbnz	r3, 80062e8 <_vfiprintf_r+0x1d4>
 80062a0:	9b03      	ldr	r3, [sp, #12]
 80062a2:	3307      	adds	r3, #7
 80062a4:	f023 0307 	bic.w	r3, r3, #7
 80062a8:	3308      	adds	r3, #8
 80062aa:	9303      	str	r3, [sp, #12]
 80062ac:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80062ae:	444b      	add	r3, r9
 80062b0:	9309      	str	r3, [sp, #36]	; 0x24
 80062b2:	e750      	b.n	8006156 <_vfiprintf_r+0x42>
 80062b4:	fb05 3202 	mla	r2, r5, r2, r3
 80062b8:	2001      	movs	r0, #1
 80062ba:	4688      	mov	r8, r1
 80062bc:	e78a      	b.n	80061d4 <_vfiprintf_r+0xc0>
 80062be:	2300      	movs	r3, #0
 80062c0:	f108 0801 	add.w	r8, r8, #1
 80062c4:	9305      	str	r3, [sp, #20]
 80062c6:	4619      	mov	r1, r3
 80062c8:	250a      	movs	r5, #10
 80062ca:	4640      	mov	r0, r8
 80062cc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80062d0:	3a30      	subs	r2, #48	; 0x30
 80062d2:	2a09      	cmp	r2, #9
 80062d4:	d903      	bls.n	80062de <_vfiprintf_r+0x1ca>
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d0c3      	beq.n	8006262 <_vfiprintf_r+0x14e>
 80062da:	9105      	str	r1, [sp, #20]
 80062dc:	e7c1      	b.n	8006262 <_vfiprintf_r+0x14e>
 80062de:	fb05 2101 	mla	r1, r5, r1, r2
 80062e2:	2301      	movs	r3, #1
 80062e4:	4680      	mov	r8, r0
 80062e6:	e7f0      	b.n	80062ca <_vfiprintf_r+0x1b6>
 80062e8:	ab03      	add	r3, sp, #12
 80062ea:	9300      	str	r3, [sp, #0]
 80062ec:	4622      	mov	r2, r4
 80062ee:	4b13      	ldr	r3, [pc, #76]	; (800633c <_vfiprintf_r+0x228>)
 80062f0:	a904      	add	r1, sp, #16
 80062f2:	4630      	mov	r0, r6
 80062f4:	f3af 8000 	nop.w
 80062f8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80062fc:	4681      	mov	r9, r0
 80062fe:	d1d5      	bne.n	80062ac <_vfiprintf_r+0x198>
 8006300:	89a3      	ldrh	r3, [r4, #12]
 8006302:	065b      	lsls	r3, r3, #25
 8006304:	f53f af7e 	bmi.w	8006204 <_vfiprintf_r+0xf0>
 8006308:	9809      	ldr	r0, [sp, #36]	; 0x24
 800630a:	e77d      	b.n	8006208 <_vfiprintf_r+0xf4>
 800630c:	ab03      	add	r3, sp, #12
 800630e:	9300      	str	r3, [sp, #0]
 8006310:	4622      	mov	r2, r4
 8006312:	4b0a      	ldr	r3, [pc, #40]	; (800633c <_vfiprintf_r+0x228>)
 8006314:	a904      	add	r1, sp, #16
 8006316:	4630      	mov	r0, r6
 8006318:	f000 f888 	bl	800642c <_printf_i>
 800631c:	e7ec      	b.n	80062f8 <_vfiprintf_r+0x1e4>
 800631e:	bf00      	nop
 8006320:	08007764 	.word	0x08007764
 8006324:	080077a4 	.word	0x080077a4
 8006328:	08007784 	.word	0x08007784
 800632c:	08007744 	.word	0x08007744
 8006330:	080077aa 	.word	0x080077aa
 8006334:	080077ae 	.word	0x080077ae
 8006338:	00000000 	.word	0x00000000
 800633c:	080060ef 	.word	0x080060ef

08006340 <_printf_common>:
 8006340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006344:	4691      	mov	r9, r2
 8006346:	461f      	mov	r7, r3
 8006348:	688a      	ldr	r2, [r1, #8]
 800634a:	690b      	ldr	r3, [r1, #16]
 800634c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006350:	4293      	cmp	r3, r2
 8006352:	bfb8      	it	lt
 8006354:	4613      	movlt	r3, r2
 8006356:	f8c9 3000 	str.w	r3, [r9]
 800635a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800635e:	4606      	mov	r6, r0
 8006360:	460c      	mov	r4, r1
 8006362:	b112      	cbz	r2, 800636a <_printf_common+0x2a>
 8006364:	3301      	adds	r3, #1
 8006366:	f8c9 3000 	str.w	r3, [r9]
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	0699      	lsls	r1, r3, #26
 800636e:	bf42      	ittt	mi
 8006370:	f8d9 3000 	ldrmi.w	r3, [r9]
 8006374:	3302      	addmi	r3, #2
 8006376:	f8c9 3000 	strmi.w	r3, [r9]
 800637a:	6825      	ldr	r5, [r4, #0]
 800637c:	f015 0506 	ands.w	r5, r5, #6
 8006380:	d107      	bne.n	8006392 <_printf_common+0x52>
 8006382:	f104 0a19 	add.w	sl, r4, #25
 8006386:	68e3      	ldr	r3, [r4, #12]
 8006388:	f8d9 2000 	ldr.w	r2, [r9]
 800638c:	1a9b      	subs	r3, r3, r2
 800638e:	42ab      	cmp	r3, r5
 8006390:	dc28      	bgt.n	80063e4 <_printf_common+0xa4>
 8006392:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8006396:	6822      	ldr	r2, [r4, #0]
 8006398:	3300      	adds	r3, #0
 800639a:	bf18      	it	ne
 800639c:	2301      	movne	r3, #1
 800639e:	0692      	lsls	r2, r2, #26
 80063a0:	d42d      	bmi.n	80063fe <_printf_common+0xbe>
 80063a2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80063a6:	4639      	mov	r1, r7
 80063a8:	4630      	mov	r0, r6
 80063aa:	47c0      	blx	r8
 80063ac:	3001      	adds	r0, #1
 80063ae:	d020      	beq.n	80063f2 <_printf_common+0xb2>
 80063b0:	6823      	ldr	r3, [r4, #0]
 80063b2:	68e5      	ldr	r5, [r4, #12]
 80063b4:	f8d9 2000 	ldr.w	r2, [r9]
 80063b8:	f003 0306 	and.w	r3, r3, #6
 80063bc:	2b04      	cmp	r3, #4
 80063be:	bf08      	it	eq
 80063c0:	1aad      	subeq	r5, r5, r2
 80063c2:	68a3      	ldr	r3, [r4, #8]
 80063c4:	6922      	ldr	r2, [r4, #16]
 80063c6:	bf0c      	ite	eq
 80063c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80063cc:	2500      	movne	r5, #0
 80063ce:	4293      	cmp	r3, r2
 80063d0:	bfc4      	itt	gt
 80063d2:	1a9b      	subgt	r3, r3, r2
 80063d4:	18ed      	addgt	r5, r5, r3
 80063d6:	f04f 0900 	mov.w	r9, #0
 80063da:	341a      	adds	r4, #26
 80063dc:	454d      	cmp	r5, r9
 80063de:	d11a      	bne.n	8006416 <_printf_common+0xd6>
 80063e0:	2000      	movs	r0, #0
 80063e2:	e008      	b.n	80063f6 <_printf_common+0xb6>
 80063e4:	2301      	movs	r3, #1
 80063e6:	4652      	mov	r2, sl
 80063e8:	4639      	mov	r1, r7
 80063ea:	4630      	mov	r0, r6
 80063ec:	47c0      	blx	r8
 80063ee:	3001      	adds	r0, #1
 80063f0:	d103      	bne.n	80063fa <_printf_common+0xba>
 80063f2:	f04f 30ff 	mov.w	r0, #4294967295
 80063f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80063fa:	3501      	adds	r5, #1
 80063fc:	e7c3      	b.n	8006386 <_printf_common+0x46>
 80063fe:	18e1      	adds	r1, r4, r3
 8006400:	1c5a      	adds	r2, r3, #1
 8006402:	2030      	movs	r0, #48	; 0x30
 8006404:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006408:	4422      	add	r2, r4
 800640a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800640e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006412:	3302      	adds	r3, #2
 8006414:	e7c5      	b.n	80063a2 <_printf_common+0x62>
 8006416:	2301      	movs	r3, #1
 8006418:	4622      	mov	r2, r4
 800641a:	4639      	mov	r1, r7
 800641c:	4630      	mov	r0, r6
 800641e:	47c0      	blx	r8
 8006420:	3001      	adds	r0, #1
 8006422:	d0e6      	beq.n	80063f2 <_printf_common+0xb2>
 8006424:	f109 0901 	add.w	r9, r9, #1
 8006428:	e7d8      	b.n	80063dc <_printf_common+0x9c>
	...

0800642c <_printf_i>:
 800642c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8006430:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8006434:	460c      	mov	r4, r1
 8006436:	7e09      	ldrb	r1, [r1, #24]
 8006438:	b085      	sub	sp, #20
 800643a:	296e      	cmp	r1, #110	; 0x6e
 800643c:	4617      	mov	r7, r2
 800643e:	4606      	mov	r6, r0
 8006440:	4698      	mov	r8, r3
 8006442:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8006444:	f000 80b3 	beq.w	80065ae <_printf_i+0x182>
 8006448:	d822      	bhi.n	8006490 <_printf_i+0x64>
 800644a:	2963      	cmp	r1, #99	; 0x63
 800644c:	d036      	beq.n	80064bc <_printf_i+0x90>
 800644e:	d80a      	bhi.n	8006466 <_printf_i+0x3a>
 8006450:	2900      	cmp	r1, #0
 8006452:	f000 80b9 	beq.w	80065c8 <_printf_i+0x19c>
 8006456:	2958      	cmp	r1, #88	; 0x58
 8006458:	f000 8083 	beq.w	8006562 <_printf_i+0x136>
 800645c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006460:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8006464:	e032      	b.n	80064cc <_printf_i+0xa0>
 8006466:	2964      	cmp	r1, #100	; 0x64
 8006468:	d001      	beq.n	800646e <_printf_i+0x42>
 800646a:	2969      	cmp	r1, #105	; 0x69
 800646c:	d1f6      	bne.n	800645c <_printf_i+0x30>
 800646e:	6820      	ldr	r0, [r4, #0]
 8006470:	6813      	ldr	r3, [r2, #0]
 8006472:	0605      	lsls	r5, r0, #24
 8006474:	f103 0104 	add.w	r1, r3, #4
 8006478:	d52a      	bpl.n	80064d0 <_printf_i+0xa4>
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	6011      	str	r1, [r2, #0]
 800647e:	2b00      	cmp	r3, #0
 8006480:	da03      	bge.n	800648a <_printf_i+0x5e>
 8006482:	222d      	movs	r2, #45	; 0x2d
 8006484:	425b      	negs	r3, r3
 8006486:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800648a:	486f      	ldr	r0, [pc, #444]	; (8006648 <_printf_i+0x21c>)
 800648c:	220a      	movs	r2, #10
 800648e:	e039      	b.n	8006504 <_printf_i+0xd8>
 8006490:	2973      	cmp	r1, #115	; 0x73
 8006492:	f000 809d 	beq.w	80065d0 <_printf_i+0x1a4>
 8006496:	d808      	bhi.n	80064aa <_printf_i+0x7e>
 8006498:	296f      	cmp	r1, #111	; 0x6f
 800649a:	d020      	beq.n	80064de <_printf_i+0xb2>
 800649c:	2970      	cmp	r1, #112	; 0x70
 800649e:	d1dd      	bne.n	800645c <_printf_i+0x30>
 80064a0:	6823      	ldr	r3, [r4, #0]
 80064a2:	f043 0320 	orr.w	r3, r3, #32
 80064a6:	6023      	str	r3, [r4, #0]
 80064a8:	e003      	b.n	80064b2 <_printf_i+0x86>
 80064aa:	2975      	cmp	r1, #117	; 0x75
 80064ac:	d017      	beq.n	80064de <_printf_i+0xb2>
 80064ae:	2978      	cmp	r1, #120	; 0x78
 80064b0:	d1d4      	bne.n	800645c <_printf_i+0x30>
 80064b2:	2378      	movs	r3, #120	; 0x78
 80064b4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80064b8:	4864      	ldr	r0, [pc, #400]	; (800664c <_printf_i+0x220>)
 80064ba:	e055      	b.n	8006568 <_printf_i+0x13c>
 80064bc:	6813      	ldr	r3, [r2, #0]
 80064be:	1d19      	adds	r1, r3, #4
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	6011      	str	r1, [r2, #0]
 80064c4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80064c8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80064cc:	2301      	movs	r3, #1
 80064ce:	e08c      	b.n	80065ea <_printf_i+0x1be>
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	6011      	str	r1, [r2, #0]
 80064d4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80064d8:	bf18      	it	ne
 80064da:	b21b      	sxthne	r3, r3
 80064dc:	e7cf      	b.n	800647e <_printf_i+0x52>
 80064de:	6813      	ldr	r3, [r2, #0]
 80064e0:	6825      	ldr	r5, [r4, #0]
 80064e2:	1d18      	adds	r0, r3, #4
 80064e4:	6010      	str	r0, [r2, #0]
 80064e6:	0628      	lsls	r0, r5, #24
 80064e8:	d501      	bpl.n	80064ee <_printf_i+0xc2>
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	e002      	b.n	80064f4 <_printf_i+0xc8>
 80064ee:	0668      	lsls	r0, r5, #25
 80064f0:	d5fb      	bpl.n	80064ea <_printf_i+0xbe>
 80064f2:	881b      	ldrh	r3, [r3, #0]
 80064f4:	4854      	ldr	r0, [pc, #336]	; (8006648 <_printf_i+0x21c>)
 80064f6:	296f      	cmp	r1, #111	; 0x6f
 80064f8:	bf14      	ite	ne
 80064fa:	220a      	movne	r2, #10
 80064fc:	2208      	moveq	r2, #8
 80064fe:	2100      	movs	r1, #0
 8006500:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006504:	6865      	ldr	r5, [r4, #4]
 8006506:	60a5      	str	r5, [r4, #8]
 8006508:	2d00      	cmp	r5, #0
 800650a:	f2c0 8095 	blt.w	8006638 <_printf_i+0x20c>
 800650e:	6821      	ldr	r1, [r4, #0]
 8006510:	f021 0104 	bic.w	r1, r1, #4
 8006514:	6021      	str	r1, [r4, #0]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d13d      	bne.n	8006596 <_printf_i+0x16a>
 800651a:	2d00      	cmp	r5, #0
 800651c:	f040 808e 	bne.w	800663c <_printf_i+0x210>
 8006520:	4665      	mov	r5, ip
 8006522:	2a08      	cmp	r2, #8
 8006524:	d10b      	bne.n	800653e <_printf_i+0x112>
 8006526:	6823      	ldr	r3, [r4, #0]
 8006528:	07db      	lsls	r3, r3, #31
 800652a:	d508      	bpl.n	800653e <_printf_i+0x112>
 800652c:	6923      	ldr	r3, [r4, #16]
 800652e:	6862      	ldr	r2, [r4, #4]
 8006530:	429a      	cmp	r2, r3
 8006532:	bfde      	ittt	le
 8006534:	2330      	movle	r3, #48	; 0x30
 8006536:	f805 3c01 	strble.w	r3, [r5, #-1]
 800653a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800653e:	ebac 0305 	sub.w	r3, ip, r5
 8006542:	6123      	str	r3, [r4, #16]
 8006544:	f8cd 8000 	str.w	r8, [sp]
 8006548:	463b      	mov	r3, r7
 800654a:	aa03      	add	r2, sp, #12
 800654c:	4621      	mov	r1, r4
 800654e:	4630      	mov	r0, r6
 8006550:	f7ff fef6 	bl	8006340 <_printf_common>
 8006554:	3001      	adds	r0, #1
 8006556:	d14d      	bne.n	80065f4 <_printf_i+0x1c8>
 8006558:	f04f 30ff 	mov.w	r0, #4294967295
 800655c:	b005      	add	sp, #20
 800655e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8006562:	4839      	ldr	r0, [pc, #228]	; (8006648 <_printf_i+0x21c>)
 8006564:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8006568:	6813      	ldr	r3, [r2, #0]
 800656a:	6821      	ldr	r1, [r4, #0]
 800656c:	1d1d      	adds	r5, r3, #4
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	6015      	str	r5, [r2, #0]
 8006572:	060a      	lsls	r2, r1, #24
 8006574:	d50b      	bpl.n	800658e <_printf_i+0x162>
 8006576:	07ca      	lsls	r2, r1, #31
 8006578:	bf44      	itt	mi
 800657a:	f041 0120 	orrmi.w	r1, r1, #32
 800657e:	6021      	strmi	r1, [r4, #0]
 8006580:	b91b      	cbnz	r3, 800658a <_printf_i+0x15e>
 8006582:	6822      	ldr	r2, [r4, #0]
 8006584:	f022 0220 	bic.w	r2, r2, #32
 8006588:	6022      	str	r2, [r4, #0]
 800658a:	2210      	movs	r2, #16
 800658c:	e7b7      	b.n	80064fe <_printf_i+0xd2>
 800658e:	064d      	lsls	r5, r1, #25
 8006590:	bf48      	it	mi
 8006592:	b29b      	uxthmi	r3, r3
 8006594:	e7ef      	b.n	8006576 <_printf_i+0x14a>
 8006596:	4665      	mov	r5, ip
 8006598:	fbb3 f1f2 	udiv	r1, r3, r2
 800659c:	fb02 3311 	mls	r3, r2, r1, r3
 80065a0:	5cc3      	ldrb	r3, [r0, r3]
 80065a2:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80065a6:	460b      	mov	r3, r1
 80065a8:	2900      	cmp	r1, #0
 80065aa:	d1f5      	bne.n	8006598 <_printf_i+0x16c>
 80065ac:	e7b9      	b.n	8006522 <_printf_i+0xf6>
 80065ae:	6813      	ldr	r3, [r2, #0]
 80065b0:	6825      	ldr	r5, [r4, #0]
 80065b2:	6961      	ldr	r1, [r4, #20]
 80065b4:	1d18      	adds	r0, r3, #4
 80065b6:	6010      	str	r0, [r2, #0]
 80065b8:	0628      	lsls	r0, r5, #24
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	d501      	bpl.n	80065c2 <_printf_i+0x196>
 80065be:	6019      	str	r1, [r3, #0]
 80065c0:	e002      	b.n	80065c8 <_printf_i+0x19c>
 80065c2:	066a      	lsls	r2, r5, #25
 80065c4:	d5fb      	bpl.n	80065be <_printf_i+0x192>
 80065c6:	8019      	strh	r1, [r3, #0]
 80065c8:	2300      	movs	r3, #0
 80065ca:	6123      	str	r3, [r4, #16]
 80065cc:	4665      	mov	r5, ip
 80065ce:	e7b9      	b.n	8006544 <_printf_i+0x118>
 80065d0:	6813      	ldr	r3, [r2, #0]
 80065d2:	1d19      	adds	r1, r3, #4
 80065d4:	6011      	str	r1, [r2, #0]
 80065d6:	681d      	ldr	r5, [r3, #0]
 80065d8:	6862      	ldr	r2, [r4, #4]
 80065da:	2100      	movs	r1, #0
 80065dc:	4628      	mov	r0, r5
 80065de:	f7f9 fdf7 	bl	80001d0 <memchr>
 80065e2:	b108      	cbz	r0, 80065e8 <_printf_i+0x1bc>
 80065e4:	1b40      	subs	r0, r0, r5
 80065e6:	6060      	str	r0, [r4, #4]
 80065e8:	6863      	ldr	r3, [r4, #4]
 80065ea:	6123      	str	r3, [r4, #16]
 80065ec:	2300      	movs	r3, #0
 80065ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80065f2:	e7a7      	b.n	8006544 <_printf_i+0x118>
 80065f4:	6923      	ldr	r3, [r4, #16]
 80065f6:	462a      	mov	r2, r5
 80065f8:	4639      	mov	r1, r7
 80065fa:	4630      	mov	r0, r6
 80065fc:	47c0      	blx	r8
 80065fe:	3001      	adds	r0, #1
 8006600:	d0aa      	beq.n	8006558 <_printf_i+0x12c>
 8006602:	6823      	ldr	r3, [r4, #0]
 8006604:	079b      	lsls	r3, r3, #30
 8006606:	d413      	bmi.n	8006630 <_printf_i+0x204>
 8006608:	68e0      	ldr	r0, [r4, #12]
 800660a:	9b03      	ldr	r3, [sp, #12]
 800660c:	4298      	cmp	r0, r3
 800660e:	bfb8      	it	lt
 8006610:	4618      	movlt	r0, r3
 8006612:	e7a3      	b.n	800655c <_printf_i+0x130>
 8006614:	2301      	movs	r3, #1
 8006616:	464a      	mov	r2, r9
 8006618:	4639      	mov	r1, r7
 800661a:	4630      	mov	r0, r6
 800661c:	47c0      	blx	r8
 800661e:	3001      	adds	r0, #1
 8006620:	d09a      	beq.n	8006558 <_printf_i+0x12c>
 8006622:	3501      	adds	r5, #1
 8006624:	68e3      	ldr	r3, [r4, #12]
 8006626:	9a03      	ldr	r2, [sp, #12]
 8006628:	1a9b      	subs	r3, r3, r2
 800662a:	42ab      	cmp	r3, r5
 800662c:	dcf2      	bgt.n	8006614 <_printf_i+0x1e8>
 800662e:	e7eb      	b.n	8006608 <_printf_i+0x1dc>
 8006630:	2500      	movs	r5, #0
 8006632:	f104 0919 	add.w	r9, r4, #25
 8006636:	e7f5      	b.n	8006624 <_printf_i+0x1f8>
 8006638:	2b00      	cmp	r3, #0
 800663a:	d1ac      	bne.n	8006596 <_printf_i+0x16a>
 800663c:	7803      	ldrb	r3, [r0, #0]
 800663e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006642:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006646:	e76c      	b.n	8006522 <_printf_i+0xf6>
 8006648:	080077b5 	.word	0x080077b5
 800664c:	080077c6 	.word	0x080077c6

08006650 <_sbrk_r>:
 8006650:	b538      	push	{r3, r4, r5, lr}
 8006652:	4c06      	ldr	r4, [pc, #24]	; (800666c <_sbrk_r+0x1c>)
 8006654:	2300      	movs	r3, #0
 8006656:	4605      	mov	r5, r0
 8006658:	4608      	mov	r0, r1
 800665a:	6023      	str	r3, [r4, #0]
 800665c:	f7fc fe2e 	bl	80032bc <_sbrk>
 8006660:	1c43      	adds	r3, r0, #1
 8006662:	d102      	bne.n	800666a <_sbrk_r+0x1a>
 8006664:	6823      	ldr	r3, [r4, #0]
 8006666:	b103      	cbz	r3, 800666a <_sbrk_r+0x1a>
 8006668:	602b      	str	r3, [r5, #0]
 800666a:	bd38      	pop	{r3, r4, r5, pc}
 800666c:	2000091c 	.word	0x2000091c

08006670 <__sread>:
 8006670:	b510      	push	{r4, lr}
 8006672:	460c      	mov	r4, r1
 8006674:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006678:	f000 f896 	bl	80067a8 <_read_r>
 800667c:	2800      	cmp	r0, #0
 800667e:	bfab      	itete	ge
 8006680:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006682:	89a3      	ldrhlt	r3, [r4, #12]
 8006684:	181b      	addge	r3, r3, r0
 8006686:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800668a:	bfac      	ite	ge
 800668c:	6563      	strge	r3, [r4, #84]	; 0x54
 800668e:	81a3      	strhlt	r3, [r4, #12]
 8006690:	bd10      	pop	{r4, pc}

08006692 <__swrite>:
 8006692:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006696:	461f      	mov	r7, r3
 8006698:	898b      	ldrh	r3, [r1, #12]
 800669a:	05db      	lsls	r3, r3, #23
 800669c:	4605      	mov	r5, r0
 800669e:	460c      	mov	r4, r1
 80066a0:	4616      	mov	r6, r2
 80066a2:	d505      	bpl.n	80066b0 <__swrite+0x1e>
 80066a4:	2302      	movs	r3, #2
 80066a6:	2200      	movs	r2, #0
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	f000 f868 	bl	8006780 <_lseek_r>
 80066b0:	89a3      	ldrh	r3, [r4, #12]
 80066b2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80066b6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066ba:	81a3      	strh	r3, [r4, #12]
 80066bc:	4632      	mov	r2, r6
 80066be:	463b      	mov	r3, r7
 80066c0:	4628      	mov	r0, r5
 80066c2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80066c6:	f000 b817 	b.w	80066f8 <_write_r>

080066ca <__sseek>:
 80066ca:	b510      	push	{r4, lr}
 80066cc:	460c      	mov	r4, r1
 80066ce:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066d2:	f000 f855 	bl	8006780 <_lseek_r>
 80066d6:	1c43      	adds	r3, r0, #1
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	bf15      	itete	ne
 80066dc:	6560      	strne	r0, [r4, #84]	; 0x54
 80066de:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066e2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066e6:	81a3      	strheq	r3, [r4, #12]
 80066e8:	bf18      	it	ne
 80066ea:	81a3      	strhne	r3, [r4, #12]
 80066ec:	bd10      	pop	{r4, pc}

080066ee <__sclose>:
 80066ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066f2:	f000 b813 	b.w	800671c <_close_r>
	...

080066f8 <_write_r>:
 80066f8:	b538      	push	{r3, r4, r5, lr}
 80066fa:	4c07      	ldr	r4, [pc, #28]	; (8006718 <_write_r+0x20>)
 80066fc:	4605      	mov	r5, r0
 80066fe:	4608      	mov	r0, r1
 8006700:	4611      	mov	r1, r2
 8006702:	2200      	movs	r2, #0
 8006704:	6022      	str	r2, [r4, #0]
 8006706:	461a      	mov	r2, r3
 8006708:	f7fc fd88 	bl	800321c <_write>
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	d102      	bne.n	8006716 <_write_r+0x1e>
 8006710:	6823      	ldr	r3, [r4, #0]
 8006712:	b103      	cbz	r3, 8006716 <_write_r+0x1e>
 8006714:	602b      	str	r3, [r5, #0]
 8006716:	bd38      	pop	{r3, r4, r5, pc}
 8006718:	2000091c 	.word	0x2000091c

0800671c <_close_r>:
 800671c:	b538      	push	{r3, r4, r5, lr}
 800671e:	4c06      	ldr	r4, [pc, #24]	; (8006738 <_close_r+0x1c>)
 8006720:	2300      	movs	r3, #0
 8006722:	4605      	mov	r5, r0
 8006724:	4608      	mov	r0, r1
 8006726:	6023      	str	r3, [r4, #0]
 8006728:	f7fc fd94 	bl	8003254 <_close>
 800672c:	1c43      	adds	r3, r0, #1
 800672e:	d102      	bne.n	8006736 <_close_r+0x1a>
 8006730:	6823      	ldr	r3, [r4, #0]
 8006732:	b103      	cbz	r3, 8006736 <_close_r+0x1a>
 8006734:	602b      	str	r3, [r5, #0]
 8006736:	bd38      	pop	{r3, r4, r5, pc}
 8006738:	2000091c 	.word	0x2000091c

0800673c <_fstat_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4c07      	ldr	r4, [pc, #28]	; (800675c <_fstat_r+0x20>)
 8006740:	2300      	movs	r3, #0
 8006742:	4605      	mov	r5, r0
 8006744:	4608      	mov	r0, r1
 8006746:	4611      	mov	r1, r2
 8006748:	6023      	str	r3, [r4, #0]
 800674a:	f7fc fd8f 	bl	800326c <_fstat>
 800674e:	1c43      	adds	r3, r0, #1
 8006750:	d102      	bne.n	8006758 <_fstat_r+0x1c>
 8006752:	6823      	ldr	r3, [r4, #0]
 8006754:	b103      	cbz	r3, 8006758 <_fstat_r+0x1c>
 8006756:	602b      	str	r3, [r5, #0]
 8006758:	bd38      	pop	{r3, r4, r5, pc}
 800675a:	bf00      	nop
 800675c:	2000091c 	.word	0x2000091c

08006760 <_isatty_r>:
 8006760:	b538      	push	{r3, r4, r5, lr}
 8006762:	4c06      	ldr	r4, [pc, #24]	; (800677c <_isatty_r+0x1c>)
 8006764:	2300      	movs	r3, #0
 8006766:	4605      	mov	r5, r0
 8006768:	4608      	mov	r0, r1
 800676a:	6023      	str	r3, [r4, #0]
 800676c:	f7fc fd8e 	bl	800328c <_isatty>
 8006770:	1c43      	adds	r3, r0, #1
 8006772:	d102      	bne.n	800677a <_isatty_r+0x1a>
 8006774:	6823      	ldr	r3, [r4, #0]
 8006776:	b103      	cbz	r3, 800677a <_isatty_r+0x1a>
 8006778:	602b      	str	r3, [r5, #0]
 800677a:	bd38      	pop	{r3, r4, r5, pc}
 800677c:	2000091c 	.word	0x2000091c

08006780 <_lseek_r>:
 8006780:	b538      	push	{r3, r4, r5, lr}
 8006782:	4c07      	ldr	r4, [pc, #28]	; (80067a0 <_lseek_r+0x20>)
 8006784:	4605      	mov	r5, r0
 8006786:	4608      	mov	r0, r1
 8006788:	4611      	mov	r1, r2
 800678a:	2200      	movs	r2, #0
 800678c:	6022      	str	r2, [r4, #0]
 800678e:	461a      	mov	r2, r3
 8006790:	f7fc fd87 	bl	80032a2 <_lseek>
 8006794:	1c43      	adds	r3, r0, #1
 8006796:	d102      	bne.n	800679e <_lseek_r+0x1e>
 8006798:	6823      	ldr	r3, [r4, #0]
 800679a:	b103      	cbz	r3, 800679e <_lseek_r+0x1e>
 800679c:	602b      	str	r3, [r5, #0]
 800679e:	bd38      	pop	{r3, r4, r5, pc}
 80067a0:	2000091c 	.word	0x2000091c

080067a4 <__malloc_lock>:
 80067a4:	4770      	bx	lr

080067a6 <__malloc_unlock>:
 80067a6:	4770      	bx	lr

080067a8 <_read_r>:
 80067a8:	b538      	push	{r3, r4, r5, lr}
 80067aa:	4c07      	ldr	r4, [pc, #28]	; (80067c8 <_read_r+0x20>)
 80067ac:	4605      	mov	r5, r0
 80067ae:	4608      	mov	r0, r1
 80067b0:	4611      	mov	r1, r2
 80067b2:	2200      	movs	r2, #0
 80067b4:	6022      	str	r2, [r4, #0]
 80067b6:	461a      	mov	r2, r3
 80067b8:	f7fc fd13 	bl	80031e2 <_read>
 80067bc:	1c43      	adds	r3, r0, #1
 80067be:	d102      	bne.n	80067c6 <_read_r+0x1e>
 80067c0:	6823      	ldr	r3, [r4, #0]
 80067c2:	b103      	cbz	r3, 80067c6 <_read_r+0x1e>
 80067c4:	602b      	str	r3, [r5, #0]
 80067c6:	bd38      	pop	{r3, r4, r5, pc}
 80067c8:	2000091c 	.word	0x2000091c

080067cc <_init>:
 80067cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ce:	bf00      	nop
 80067d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067d2:	bc08      	pop	{r3}
 80067d4:	469e      	mov	lr, r3
 80067d6:	4770      	bx	lr

080067d8 <_fini>:
 80067d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067da:	bf00      	nop
 80067dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067de:	bc08      	pop	{r3}
 80067e0:	469e      	mov	lr, r3
 80067e2:	4770      	bx	lr
