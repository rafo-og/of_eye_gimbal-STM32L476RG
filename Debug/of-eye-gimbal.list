
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fcc  08004d80  08004d80  00014d80  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005d4c  08005d4c  000205bc  2**0
                  CONTENTS
  4 .ARM          00000008  08005d4c  08005d4c  00015d4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005d54  08005d54  000205bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005d54  08005d54  00015d54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005d58  08005d58  00015d58  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005bc  20000000  08005d5c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200005c0  08006318  000205c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000678  08006318  00020678  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010991  00000000  00000000  000205ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002954  00000000  00000000  00030f7d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000be0  00000000  00000000  000338d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  000344b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247e6  00000000  00000000  00034f50  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ab39  00000000  00000000  00059736  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb21b  00000000  00000000  0006426f  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011f48a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003698  00000000  00000000  0011f508  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c0 	.word	0x200005c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004d68 	.word	0x08004d68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c4 	.word	0x200005c4
 80001cc:	08004d68 	.word	0x08004d68

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9a5 	b.w	80005dc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f835 	bl	8000310 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f828 	bl	8000310 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f817 	bl	8000310 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f809 	bl	8000310 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f80d 	bl	800060c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f833 	bl	8000660 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f877 	bl	80006f0 <adns2610_config>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <adns2610_configureSPI+0x14>
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <adns2610_configureSPI+0x48>)
 800061e:	e000      	b.n	8000622 <adns2610_configureSPI+0x16>
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <adns2610_configureSPI+0x4c>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <adns2610_configureSPI+0x50>)
 8000624:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <adns2610_configureSPI+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <adns2610_configureSPI+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000634:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <adns2610_configureSPI+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <adns2610_configureSPI+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40003800 	.word	0x40003800
 8000658:	40003c00 	.word	0x40003c00
 800065c:	200005dc 	.word	0x200005dc

08000660 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <adns2610_resetCOM+0x14>
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <adns2610_resetCOM+0x84>)
 8000672:	e000      	b.n	8000676 <adns2610_resetCOM+0x16>
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <adns2610_resetCOM+0x88>)
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000678:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800067a:	bf00      	nop
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <adns2610_resetCOM+0x8c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <adns2610_resetCOM+0x8c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	330c      	adds	r3, #12
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000694:	bf00      	nop
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80006ac:	bf00      	nop
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	4313      	orrs	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ec      	bne.n	80006ae <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f003 fb85 	bl	8003de4 <LL_mDelay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003800 	.word	0x40003800
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	200005dc 	.word	0x200005dc

080006f0 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <adns2610_config+0x14>
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <adns2610_config+0xc0>)
 8000702:	e000      	b.n	8000706 <adns2610_config+0x16>
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <adns2610_config+0xc4>)
 8000706:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	482b      	ldr	r0, [pc, #172]	; (80007b8 <adns2610_config+0xc8>)
 800070c:	f003 fbd2 	bl	8003eb4 <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <adns2610_config+0xcc>)
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <adns2610_config+0xd0>)
 8000714:	f003 fbce 	bl	8003eb4 <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f8be 	bl	80008a0 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 8000724:	4925      	ldr	r1, [pc, #148]	; (80007bc <adns2610_config+0xcc>)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <adns2610_config+0xd4>)
 8000728:	f003 fbc4 	bl	8003eb4 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f857 	bl	80007e4 <adns2610_readRegister>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10f      	bne.n	800075c <adns2610_config+0x6c>
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <adns2610_config+0xd8>)
 800073e:	f003 fc2d 	bl	8003f9c <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <adns2610_config+0xdc>)
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <adns2610_config+0xe0>)
 8000746:	f003 fbb5 	bl	8003eb4 <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f848 	bl	80007e4 <adns2610_readRegister>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d116      	bne.n	8000788 <adns2610_config+0x98>
 800075a:	e003      	b.n	8000764 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <adns2610_config+0xe4>)
 800075e:	f003 fc1d 	bl	8003f9c <puts>
 8000762:	e7fe      	b.n	8000762 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <adns2610_config+0xd8>)
 8000766:	f003 fc19 	bl	8003f9c <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 800076a:	491b      	ldr	r1, [pc, #108]	; (80007d8 <adns2610_config+0xe8>)
 800076c:	481b      	ldr	r0, [pc, #108]	; (80007dc <adns2610_config+0xec>)
 800076e:	f003 fba1 	bl	8003eb4 <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2111      	movs	r1, #17
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f834 	bl	80007e4 <adns2610_readRegister>
 800077c:	4603      	mov	r3, r0
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d108      	bne.n	8000798 <adns2610_config+0xa8>
 8000786:	e003      	b.n	8000790 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <adns2610_config+0xe4>)
 800078a:	f003 fc07 	bl	8003f9c <puts>
 800078e:	e7fe      	b.n	800078e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <adns2610_config+0xd8>)
 8000792:	f003 fc03 	bl	8003f9c <puts>
 8000796:	e003      	b.n	80007a0 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <adns2610_config+0xe4>)
 800079a:	f003 fbff 	bl	8003f9c <puts>
 800079e:	e7fe      	b.n	800079e <adns2610_config+0xae>

	printf("\r\n");
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <adns2610_config+0xf0>)
 80007a2:	f003 fbfb 	bl	8003f9c <puts>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08004d80 	.word	0x08004d80
 80007b4:	08004d90 	.word	0x08004d90
 80007b8:	08004da0 	.word	0x08004da0
 80007bc:	08004dfc 	.word	0x08004dfc
 80007c0:	08004e0c 	.word	0x08004e0c
 80007c4:	08004e3c 	.word	0x08004e3c
 80007c8:	08004e68 	.word	0x08004e68
 80007cc:	08004e78 	.word	0x08004e78
 80007d0:	08004e88 	.word	0x08004e88
 80007d4:	08004e70 	.word	0x08004e70
 80007d8:	08004eb4 	.word	0x08004eb4
 80007dc:	08004ec8 	.word	0x08004ec8
 80007e0:	08004efc 	.word	0x08004efc

080007e4 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <adns2610_readRegister+0x1a>
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <adns2610_readRegister+0xb0>)
 80007fc:	e000      	b.n	8000800 <adns2610_readRegister+0x1c>
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <adns2610_readRegister+0xb4>)
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <adns2610_readRegister+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000804:	bf00      	nop
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <adns2610_readRegister+0xb8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f8      	beq.n	8000806 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <adns2610_readRegister+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	330c      	adds	r3, #12
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800081e:	bf00      	nop
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <adns2610_readRegister+0xb8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <adns2610_readRegister+0xb8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f003 fad4 	bl	8003de4 <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <adns2610_readRegister+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330c      	adds	r3, #12
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000846:	bf00      	nop
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <adns2610_readRegister+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <adns2610_readRegister+0xb8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	330c      	adds	r3, #12
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000860:	bf00      	nop
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <adns2610_readRegister+0xb8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <adns2610_readRegister+0xb8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000876:	431a      	orrs	r2, r3
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <adns2610_readRegister+0xb8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	4313      	orrs	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <adns2610_readRegister+0x7e>
	return value;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00
 800089c:	200005dc 	.word	0x200005dc

080008a0 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <adns2610_writeRegister+0x1c>
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <adns2610_writeRegister+0xb4>)
 80008ba:	e000      	b.n	80008be <adns2610_writeRegister+0x1e>
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <adns2610_writeRegister+0xb8>)
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c0:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <adns2610_writeRegister+0xbc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008d0:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80008d2:	bf00      	nop
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <adns2610_writeRegister+0xbc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <adns2610_writeRegister+0xbc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80008fa:	bf00      	nop
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <adns2610_writeRegister+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <adns2610_writeRegister+0xbc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000910:	bf00      	nop
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <adns2610_writeRegister+0xbc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <adns2610_writeRegister+0xbc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000926:	431a      	orrs	r2, r3
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <adns2610_writeRegister+0xbc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	4313      	orrs	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ec      	bne.n	8000912 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <adns2610_writeRegister+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <adns2610_writeRegister+0xbc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000946:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40003800 	.word	0x40003800
 8000958:	40003c00 	.word	0x40003c00
 800095c:	200005dc 	.word	0x200005dc

08000960 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <adns2610_receiveByte+0x16>
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <adns2610_receiveByte+0x78>)
 8000974:	e000      	b.n	8000978 <adns2610_receiveByte+0x18>
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <adns2610_receiveByte+0x7c>)
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	330c      	adds	r3, #12
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000986:	bf00      	nop
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <adns2610_receiveByte+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <adns2610_receiveByte+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	330c      	adds	r3, #12
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80009a4:	bf00      	nop
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	4313      	orrs	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	200005dc 	.word	0x200005dc

080009e4 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <adns2610_sendByte+0x1a>
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <adns2610_sendByte+0x60>)
 80009fc:	e000      	b.n	8000a00 <adns2610_sendByte+0x1c>
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <adns2610_sendByte+0x64>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a02:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000a04:	bf00      	nop
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f8      	beq.n	8000a06 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	79ba      	ldrb	r2, [r7, #6]
 8000a1c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000a1e:	bf00      	nop
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	330c      	adds	r3, #12
 8000a34:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40003c00 	.word	0x40003c00
 8000a4c:	200005dc 	.word	0x200005dc

08000a50 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da01      	bge.n	8000a72 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e009      	b.n	8000a86 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000a72:	2302      	movs	r3, #2
 8000a74:	e007      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da01      	bge.n	8000a84 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000a84:	2303      	movs	r3, #3
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40020080 	.word	0x40020080

08000b64 <eyes_init>:
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

/** @brief Initialize the
 *
 */
void eyes_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 8000b68:	f000 faa4 	bl	80010b4 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fd37 	bl	80005e0 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd34 	bl	80005e0 <adns2610_init>
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <eyes_init+0x34>)
 8000b7e:	f001 fe77 	bl	8002870 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <eyes_init+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <eyes_init+0x3c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

	// Initialization done
	initialized = true;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <eyes_init+0x40>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	20000664 	.word	0x20000664
 8000ba0:	20000665 	.word	0x20000665
 8000ba4:	200005e1 	.word	0x200005e1

08000ba8 <eyes_start>:

void eyes_start(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	if(!initialized) eyes_init();
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <eyes_start+0x2c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <eyes_start+0x16>
 8000bba:	f7ff ffd3 	bl	8000b64 <eyes_init>

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <eyes_start+0x30>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <eyes_start+0x30>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <eyes_start+0x34>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200005e1 	.word	0x200005e1
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	200005e0 	.word	0x200005e0

08000be0 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	switch(FSMstate){
 8000be6:	4ba7      	ldr	r3, [pc, #668]	; (8000e84 <eyes_FSM+0x2a4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	f200 8243 	bhi.w	8001076 <eyes_FSM+0x496>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <eyes_FSM+0x18>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c0d 	.word	0x08000c0d
 8000bfc:	08000c57 	.word	0x08000c57
 8000c00:	08000ebd 	.word	0x08000ebd
 8000c04:	08000d05 	.word	0x08000d05
 8000c08:	08000f7d 	.word	0x08000f7d
	/* SENSOR_RESET state --------------------------------------------------------- */
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c0c:	4b9e      	ldr	r3, [pc, #632]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	805a      	strh	r2, [r3, #2]
#endif
		/* Stop the interrupt timer and reset all the relevant values */
		eyes_stopWaitIT();
 8000c18:	f000 fab2 	bl	8001180 <eyes_stopWaitIT>
		pixelIdx[0] = pixelIdx[1] = 0;
 8000c1c:	4b9a      	ldr	r3, [pc, #616]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	805a      	strh	r2, [r3, #2]
 8000c22:	4b99      	ldr	r3, [pc, #612]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c24:	885a      	ldrh	r2, [r3, #2]
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c28:	801a      	strh	r2, [r3, #0]
		pixelStatus[0] = pixelIdx[1] = 0;
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	805a      	strh	r2, [r3, #2]
 8000c30:	4b96      	ldr	r3, [pc, #600]	; (8000e8c <eyes_FSM+0x2ac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
		firstPixelRead = true;
 8000c36:	4b96      	ldr	r3, [pc, #600]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		firstFrameRead = true;
 8000c3c:	4b95      	ldr	r3, [pc, #596]	; (8000e94 <eyes_FSM+0x2b4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		seqTemp = 0;
 8000c42:	4b95      	ldr	r3, [pc, #596]	; (8000e98 <eyes_FSM+0x2b8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		initialized = false;
 8000c48:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <eyes_FSM+0x2bc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		collisionFlag = 0;
 8000c4e:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		return;
 8000c54:	e215      	b.n	8001082 <eyes_FSM+0x4a2>
	/* TRIGGER_FRAME state --------------------------------------------------------- */
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 8000c56:	f000 fa93 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000c5a:	4b91      	ldr	r3, [pc, #580]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8204 	bne.w	800106c <eyes_FSM+0x48c>
 8000c64:	4b8e      	ldr	r3, [pc, #568]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		/* Write pixel data register to reset the HW */
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe16 	bl	80008a0 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2108      	movs	r1, #8
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fe11 	bl	80008a0 <adns2610_writeRegister>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Increasing the SEQ number
		 * 	- Transfer all data by means of DMA
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000c7e:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000c82:	f000 fa55 	bl	8001130 <eyes_waitIT>
		firstPixelRead = true;
 8000c86:	4b82      	ldr	r3, [pc, #520]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
		FSMstate = REQ_READING_FRAME;
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <eyes_FSM+0x2a4>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	805a      	strh	r2, [r3, #2]
#endif
		if(!firstFrameRead){
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <eyes_FSM+0x2b4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d024      	beq.n	8000cf6 <eyes_FSM+0x116>
			frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 8000cac:	4b7a      	ldr	r3, [pc, #488]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	b2d1      	uxtb	r1, r2
 8000cb4:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cb6:	7011      	strb	r1, [r2, #0]
 8000cb8:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc2:	b2d9      	uxtb	r1, r3
 8000cc4:	4a78      	ldr	r2, [pc, #480]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000cc6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000cca:	fb03 f300 	mul.w	r3, r3, r0
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
			transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000ce0:	fb03 f302 	mul.w	r3, r3, r2
 8000ce4:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f240 21a9 	movw	r1, #681	; 0x2a9
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff19 	bl	8000b24 <transferDMA_USART2_TX>
			OF_ResetCoefficients();
 8000cf2:	f000 fee3 	bl	8001abc <OF_ResetCoefficients>
		}
		collisionFlag = 0;
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <eyes_FSM+0x2cc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]
		return;
 8000d02:	e1be      	b.n	8001082 <eyes_FSM+0x4a2>
	/* REQ_READING_FRAME state --------------------------------------------------------- */
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 8000d04:	f000 fa3c 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000d08:	4b65      	ldr	r3, [pc, #404]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 81af 	bne.w	8001070 <eyes_FSM+0x490>
 8000d12:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		/* Send a pixel data read request if there are pixels to read*/
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d20:	d203      	bcs.n	8000d2a <eyes_FSM+0x14a>
 8000d22:	2108      	movs	r1, #8
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe5d 	bl	80009e4 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d2c:	885b      	ldrh	r3, [r3, #2]
 8000d2e:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d32:	d203      	bcs.n	8000d3c <eyes_FSM+0x15c>
 8000d34:	2108      	movs	r1, #8
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fe54 	bl	80009e4 <adns2610_sendByte>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Check the last received pixel status and take decision related to it
		 * 	- Compute OF coefficients when it was possible
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8000d3c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000d40:	f000 f9f6 	bl	8001130 <eyes_waitIT>
		if(!firstPixelRead){
 8000d44:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <eyes_FSM+0x2b0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 808e 	beq.w	8000e70 <eyes_FSM+0x290>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d64:	fb03 f301 	mul.w	r3, r3, r1
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3305      	adds	r3, #5
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe6d 	bl	8000a50 <adns2610_checkPixel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <eyes_FSM+0x2ac>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d8e:	fb03 f301 	mul.w	r3, r3, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000d98:	4a43      	ldr	r2, [pc, #268]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3305      	adds	r3, #5
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe56 	bl	8000a50 <adns2610_checkPixel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <eyes_FSM+0x2ac>)
 8000daa:	705a      	strb	r2, [r3, #1]
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <eyes_FSM+0x2d4>)
 8000dae:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <eyes_FSM+0x2a8>)
 8000db0:	4941      	ldr	r1, [pc, #260]	; (8000eb8 <eyes_FSM+0x2d8>)
 8000db2:	4836      	ldr	r0, [pc, #216]	; (8000e8c <eyes_FSM+0x2ac>)
 8000db4:	f000 f9f4 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d04e      	beq.n	8000e5c <eyes_FSM+0x27c>
				FSMstate = READING_FRAME;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <eyes_FSM+0x2a4>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d003      	beq.n	8000dd4 <eyes_FSM+0x1f4>
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <eyes_FSM+0x200>
					errorCounter++;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <eyes_FSM+0x2cc>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <eyes_FSM+0x2cc>)
 8000dde:	801a      	strh	r2, [r3, #0]
				}
				if(!firstFrameRead){
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <eyes_FSM+0x2b4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d046      	beq.n	8000e7c <eyes_FSM+0x29c>
					OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000df8:	fb03 f302 	mul.w	r3, r3, r2
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	1d59      	adds	r1, r3, #5
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e0c:	fb03 f302 	mul.w	r3, r3, r2
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e12:	4413      	add	r3, r2
 8000e14:	1d5a      	adds	r2, r3, #5
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 fea2 	bl	8001b64 <OF_ComputeCoefficients>
#if SECOND_SENSOR_IMPLEMENTED
					OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_LEFT], frames[lastFrameIdx].frame[ADNS2610_LEFT], pixelIdx[ADNS2610_LEFT]);
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e2a:	fb03 f302 	mul.w	r3, r3, r2
 8000e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e34:	4413      	add	r3, r2
 8000e36:	1d59      	adds	r1, r3, #5
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e42:	fb03 f302 	mul.w	r3, r3, r2
 8000e46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	1d5a      	adds	r2, r3, #5
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 fe85 	bl	8001b64 <OF_ComputeCoefficients>
 8000e5a:	e00f      	b.n	8000e7c <eyes_FSM+0x29c>
#endif
				}
			}
			else{
				eyes_stopWaitIT();
 8000e5c:	f000 f990 	bl	8001180 <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000e66:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000e6a:	f000 f961 	bl	8001130 <eyes_waitIT>
 8000e6e:	e005      	b.n	8000e7c <eyes_FSM+0x29c>
			}
		}
		else{
			firstPixelRead = false;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <eyes_FSM+0x2b0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		return;
 8000e82:	e0fe      	b.n	8001082 <eyes_FSM+0x4a2>
 8000e84:	200005e0 	.word	0x200005e0
 8000e88:	200005e4 	.word	0x200005e4
 8000e8c:	200005e8 	.word	0x200005e8
 8000e90:	20000552 	.word	0x20000552
 8000e94:	20000553 	.word	0x20000553
 8000e98:	200005ea 	.word	0x200005ea
 8000e9c:	200005e1 	.word	0x200005e1
 8000ea0:	200005eb 	.word	0x200005eb
 8000ea4:	20000665 	.word	0x20000665
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	200005ec 	.word	0x200005ec
 8000eb0:	20000664 	.word	0x20000664
 8000eb4:	200005e6 	.word	0x200005e6
 8000eb8:	200005e9 	.word	0x200005e9
	/* READING_FRAME state ---------------------------------------------------------------- */
	case READING_FRAME:
		eyes_stopWaitIT();
 8000ebc:	f000 f960 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000ec0:	4b71      	ldr	r3, [pc, #452]	; (8001088 <eyes_FSM+0x4a8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80d5 	bne.w	8001074 <eyes_FSM+0x494>
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <eyes_FSM+0x4a8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		/* Read pixel data register */
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	; (800108c <eyes_FSM+0x4ac>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000ed8:	d211      	bcs.n	8000efe <eyes_FSM+0x31e>
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <eyes_FSM+0x4b0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <eyes_FSM+0x4ac>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000eea:	fb03 f301 	mul.w	r3, r3, r1
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a68      	ldr	r2, [pc, #416]	; (8001094 <eyes_FSM+0x4b4>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3305      	adds	r3, #5
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fd31 	bl	8000960 <adns2610_receiveByte>
		/* Check the last pixel status. This is done because if all is good, the next state is PROCESSING, not REQ_READING_FRAME state */
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_LEFT, &frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <eyes_FSM+0x4ac>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000f06:	d213      	bcs.n	8000f30 <eyes_FSM+0x350>
 8000f08:	4b61      	ldr	r3, [pc, #388]	; (8001090 <eyes_FSM+0x4b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <eyes_FSM+0x4ac>)
 8000f10:	885b      	ldrh	r3, [r3, #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f18:	fb03 f301 	mul.w	r3, r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000f22:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <eyes_FSM+0x4b4>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3305      	adds	r3, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fd18 	bl	8000960 <adns2610_receiveByte>

		if((pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1) && pixelIdx[ADNS2610_LEFT] == PIXEL_QTY-1){
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <eyes_FSM+0x4ac>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f240 1243 	movw	r2, #323	; 0x143
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d112      	bne.n	8000f62 <eyes_FSM+0x382>
 8000f3c:	4b53      	ldr	r3, [pc, #332]	; (800108c <eyes_FSM+0x4ac>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	f240 1243 	movw	r2, #323	; 0x143
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d10c      	bne.n	8000f62 <eyes_FSM+0x382>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <eyes_FSM+0x4b8>)
 8000f4a:	4a50      	ldr	r2, [pc, #320]	; (800108c <eyes_FSM+0x4ac>)
 8000f4c:	4953      	ldr	r1, [pc, #332]	; (800109c <eyes_FSM+0x4bc>)
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <eyes_FSM+0x4c0>)
 8000f50:	f000 f926 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00d      	beq.n	8000f76 <eyes_FSM+0x396>
				FSMstate = PROCESSING;
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f60:	e009      	b.n	8000f76 <eyes_FSM+0x396>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	701a      	strb	r2, [r3, #0]
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000f68:	20c8      	movs	r0, #200	; 0xc8
 8000f6a:	f000 f8e1 	bl	8001130 <eyes_waitIT>
			collisionFlag = 0;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <eyes_FSM+0x4a8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			return;
 8000f74:	e085      	b.n	8001082 <eyes_FSM+0x4a2>
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
			collisionFlag = 0;
			return;
		}
#endif
		collisionFlag = 0;
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <eyes_FSM+0x4a8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	/* PROCESSING state ---------------------------------------------------------------- */
	case PROCESSING:
		/* Check if it's the first frame read */
		if(firstFrameRead){
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <eyes_FSM+0x3ac>
			firstFrameRead = false;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e05e      	b.n	800104a <eyes_FSM+0x46a>
		}
		else{
			/* Compute the Optical Flow from the previous computed coefficients */
			OF_Compute(ADNS2610_RIGHT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <eyes_FSM+0x4b0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f96:	fb03 f302 	mul.w	r3, r3, r2
 8000f9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <eyes_FSM+0x4b4>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1d59      	adds	r1, r3, #5
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <eyes_FSM+0x4b0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fae:	fb03 f302 	mul.w	r3, r3, r2
 8000fb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <eyes_FSM+0x4b4>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	3309      	adds	r3, #9
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 fee4 	bl	8001d8c <OF_Compute>
#if SECOND_SENSOR_IMPLEMENTED
			OF_Compute(ADNS2610_LEFT, &(frames[currentFrameIdx].oFLeft.x), &(frames[currentFrameIdx].oFLeft.y));
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <eyes_FSM+0x4b0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fce:	fb03 f302 	mul.w	r3, r3, r2
 8000fd2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <eyes_FSM+0x4b4>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	1d59      	adds	r1, r3, #5
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <eyes_FSM+0x4b0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fe6:	fb03 f302 	mul.w	r3, r3, r2
 8000fea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <eyes_FSM+0x4b4>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3309      	adds	r3, #9
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 fec8 	bl	8001d8c <OF_Compute>
			OF_ComputeFused(&frames[currentFrameIdx].oFRight, &frames[currentFrameIdx].oFLeft, &frames[currentFrameIdx].oFFused);
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <eyes_FSM+0x4b0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001006:	fb03 f302 	mul.w	r3, r3, r2
 800100a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <eyes_FSM+0x4b4>)
 8001010:	4413      	add	r3, r2
 8001012:	1d58      	adds	r0, r3, #5
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <eyes_FSM+0x4b0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f240 23a9 	movw	r3, #681	; 0x2a9
 800101e:	fb03 f302 	mul.w	r3, r3, r2
 8001022:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <eyes_FSM+0x4b4>)
 8001028:	4413      	add	r3, r2
 800102a:	1d59      	adds	r1, r3, #5
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <eyes_FSM+0x4b0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001036:	fb03 f302 	mul.w	r3, r3, r2
 800103a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <eyes_FSM+0x4b4>)
 8001040:	4413      	add	r3, r2
 8001042:	3305      	adds	r3, #5
 8001044:	461a      	mov	r2, r3
 8001046:	f000 ff87 	bl	8001f58 <OF_ComputeFused>
#endif
		}
		/* Switch the frame structures to store the new frame in the "oldest" data buffer */
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <eyes_FSM+0x4cc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <eyes_FSM+0x4b0>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <eyes_FSM+0x4cc>)
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <eyes_FSM+0x4b0>)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	7013      	strb	r3, [r2, #0]
		FSMstate = TRIGGER_FRAME;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <eyes_FSM+0x4c4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8001064:	20c8      	movs	r0, #200	; 0xc8
 8001066:	f000 f863 	bl	8001130 <eyes_waitIT>
		return;
 800106a:	e00a      	b.n	8001082 <eyes_FSM+0x4a2>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 800106c:	bf00      	nop
 800106e:	e002      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001070:	bf00      	nop
 8001072:	e000      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001074:	bf00      	nop
	}

	// Check for collisions between interrupts callings
	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <eyes_FSM+0x4d0>)
 8001078:	f002 ff90 	bl	8003f9c <puts>
		eyes_stopWaitIT();
 800107c:	f000 f880 	bl	8001180 <eyes_stopWaitIT>
		while(1);
 8001080:	e7fe      	b.n	8001080 <eyes_FSM+0x4a0>
}
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200005eb 	.word	0x200005eb
 800108c:	200005e4 	.word	0x200005e4
 8001090:	20000664 	.word	0x20000664
 8001094:	20000000 	.word	0x20000000
 8001098:	200005e6 	.word	0x200005e6
 800109c:	200005e9 	.word	0x200005e9
 80010a0:	200005e8 	.word	0x200005e8
 80010a4:	200005e0 	.word	0x200005e0
 80010a8:	20000553 	.word	0x20000553
 80010ac:	20000665 	.word	0x20000665
 80010b0:	08004f8c 	.word	0x08004f8c

080010b4 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <eyes_configureFSM_TIM+0x78>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	2019      	movs	r0, #25
 800111a:	f7ff fcd9 	bl	8000ad0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800111e:	2019      	movs	r0, #25
 8001120:	f7ff fcb8 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40012c00 	.word	0x40012c00

08001130 <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <eyes_waitIT+0x4c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <eyes_waitIT+0x4c>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <eyes_waitIT+0x4c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <eyes_waitIT+0x4c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <eyes_waitIT+0x4c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <eyes_waitIT+0x4c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <eyes_waitIT+0x4c>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <eyes_waitIT+0x4c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <eyes_waitIT+0x4c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00

08001180 <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <eyes_stopWaitIT+0x1c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <eyes_stopWaitIT+0x1c>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40012c00 	.word	0x40012c00

080011a0 <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	e024      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10f      	bne.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80011e4:	d806      	bhi.n	80011f4 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	e010      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10c      	bne.n	8001216 <eyes_computeIdxFromStatus+0x76>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	801a      	strh	r2, [r3, #0]
		return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e034      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#if SECOND_SENSOR_IMPLEMENTED
	if((*status2 == VALID_SOF) && (*idx2 == 0)){
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
		(*idx2)++;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	801a      	strh	r2, [r3, #0]
 8001232:	e024      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID) && (*idx2 != 0) && (*idx2 < PIXEL_QTY-1)){
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10f      	bne.n	800125c <eyes_computeIdxFromStatus+0xbc>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <eyes_computeIdxFromStatus+0xbc>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 800124c:	d806      	bhi.n	800125c <eyes_computeIdxFromStatus+0xbc>
		(*idx2)++;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e010      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <eyes_computeIdxFromStatus+0xde>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <eyes_computeIdxFromStatus+0xde>
		(*idx1) = (*idx2) = 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	801a      	strh	r2, [r3, #0]
		return false;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#endif
	return true;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 80012a8:	f7ff fc9a 	bl	8000be0 <eyes_FSM>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <gimbalControlInit>:
cmdTypeDef decodeCmd(char const * cmdString, int length);

/**
 * @brief Setting up all the peripherals (UART and TIMER) needed to control de gimbal position
 */
void gimbalControlInit(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	// Configure UART2 interrupt to receive data from PC
	configure_IRQ_USART_RX();
 80012b8:	f001 fb32 	bl	8002920 <configure_IRQ_USART_RX>

	// Configure TIMER

}
 80012bc:	bf00      	nop
 80012be:	bd80      	pop	{r7, pc}

080012c0 <decodeCmd>:
 * @brief Receive a string and decode the command type related to it
 * @param cmdString	The command in string format
 * @param length	The length of the command
 * @return	The command type in cmdTypeDef format
 */
cmdTypeDef decodeCmd(char const * cmdString, int length){
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b082      	sub	sp, #8
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
 80012c8:	6039      	str	r1, [r7, #0]
	if(strncmp(cmdString, "UP\n", length) == 0){
 80012ca:	683b      	ldr	r3, [r7, #0]
 80012cc:	461a      	mov	r2, r3
 80012ce:	4933      	ldr	r1, [pc, #204]	; (800139c <decodeCmd+0xdc>)
 80012d0:	6878      	ldr	r0, [r7, #4]
 80012d2:	f002 fe6b 	bl	8003fac <strncmp>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d101      	bne.n	80012e0 <decodeCmd+0x20>
		return UP;
 80012dc:	2300      	movs	r3, #0
 80012de:	e058      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "DW\n", length) == 0){
 80012e0:	683b      	ldr	r3, [r7, #0]
 80012e2:	461a      	mov	r2, r3
 80012e4:	492e      	ldr	r1, [pc, #184]	; (80013a0 <decodeCmd+0xe0>)
 80012e6:	6878      	ldr	r0, [r7, #4]
 80012e8:	f002 fe60 	bl	8003fac <strncmp>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d101      	bne.n	80012f6 <decodeCmd+0x36>
		return DOWN;
 80012f2:	2301      	movs	r3, #1
 80012f4:	e04d      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "LF\n", length) == 0){
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	461a      	mov	r2, r3
 80012fa:	492a      	ldr	r1, [pc, #168]	; (80013a4 <decodeCmd+0xe4>)
 80012fc:	6878      	ldr	r0, [r7, #4]
 80012fe:	f002 fe55 	bl	8003fac <strncmp>
 8001302:	4603      	mov	r3, r0
 8001304:	2b00      	cmp	r3, #0
 8001306:	d101      	bne.n	800130c <decodeCmd+0x4c>
		return LEFT;
 8001308:	2302      	movs	r3, #2
 800130a:	e042      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "RH\n", length) == 0){
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	4925      	ldr	r1, [pc, #148]	; (80013a8 <decodeCmd+0xe8>)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f002 fe4a 	bl	8003fac <strncmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d101      	bne.n	8001322 <decodeCmd+0x62>
		return RIGHT;
 800131e:	2303      	movs	r3, #3
 8001320:	e037      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "CN\n", length) == 0){
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4921      	ldr	r1, [pc, #132]	; (80013ac <decodeCmd+0xec>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f002 fe3f 	bl	8003fac <strncmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d101      	bne.n	8001338 <decodeCmd+0x78>
		return CENTER;
 8001334:	2306      	movs	r3, #6
 8001336:	e02c      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "RLF\n", length) == 0){
 8001338:	683b      	ldr	r3, [r7, #0]
 800133a:	461a      	mov	r2, r3
 800133c:	491c      	ldr	r1, [pc, #112]	; (80013b0 <decodeCmd+0xf0>)
 800133e:	6878      	ldr	r0, [r7, #4]
 8001340:	f002 fe34 	bl	8003fac <strncmp>
 8001344:	4603      	mov	r3, r0
 8001346:	2b00      	cmp	r3, #0
 8001348:	d101      	bne.n	800134e <decodeCmd+0x8e>
		return ROTATE_LEFT;
 800134a:	2304      	movs	r3, #4
 800134c:	e021      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "RRH\n", length) == 0){
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4918      	ldr	r1, [pc, #96]	; (80013b4 <decodeCmd+0xf4>)
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f002 fe29 	bl	8003fac <strncmp>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <decodeCmd+0xa4>
		return ROTATE_RIGHT;
 8001360:	2305      	movs	r3, #5
 8001362:	e016      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "TRON\n", length) == 0){
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4913      	ldr	r1, [pc, #76]	; (80013b8 <decodeCmd+0xf8>)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f002 fe1e 	bl	8003fac <strncmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <decodeCmd+0xba>
		return TRACKING_ON;
 8001376:	2307      	movs	r3, #7
 8001378:	e00b      	b.n	8001392 <decodeCmd+0xd2>
	}
	if(strncmp(cmdString, "TROFF\n", length) == 0){
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	490f      	ldr	r1, [pc, #60]	; (80013bc <decodeCmd+0xfc>)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f002 fe13 	bl	8003fac <strncmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d101      	bne.n	8001390 <decodeCmd+0xd0>
		return TRACKING_OFF;
 800138c:	2308      	movs	r3, #8
 800138e:	e000      	b.n	8001392 <decodeCmd+0xd2>
	}

	return NA;
 8001390:	2309      	movs	r3, #9
}
 8001392:	4618      	mov	r0, r3
 8001394:	3708      	adds	r7, #8
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	08004fa0 	.word	0x08004fa0
 80013a0:	08004fa4 	.word	0x08004fa4
 80013a4:	08004fa8 	.word	0x08004fa8
 80013a8:	08004fac 	.word	0x08004fac
 80013ac:	08004fb0 	.word	0x08004fb0
 80013b0:	08004fb4 	.word	0x08004fb4
 80013b4:	08004fbc 	.word	0x08004fbc
 80013b8:	08004fc4 	.word	0x08004fc4
 80013bc:	08004fcc 	.word	0x08004fcc

080013c0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	if(READ_BIT(USART2->ISR, USART_ISR_ORE)){
 80013c4:	4b22      	ldr	r3, [pc, #136]	; (8001450 <USART2_IRQHandler+0x90>)
 80013c6:	69db      	ldr	r3, [r3, #28]
 80013c8:	f003 0308 	and.w	r3, r3, #8
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d00d      	beq.n	80013ec <USART2_IRQHandler+0x2c>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);
 80013d0:	4b1f      	ldr	r3, [pc, #124]	; (8001450 <USART2_IRQHandler+0x90>)
 80013d2:	6a1b      	ldr	r3, [r3, #32]
 80013d4:	4a1e      	ldr	r2, [pc, #120]	; (8001450 <USART2_IRQHandler+0x90>)
 80013d6:	f043 0308 	orr.w	r3, r3, #8
 80013da:	6213      	str	r3, [r2, #32]
		// Flush all data in USART RX
		SET_BIT(USART2->RQR, USART_RQR_RXFRQ);
 80013dc:	4b1c      	ldr	r3, [pc, #112]	; (8001450 <USART2_IRQHandler+0x90>)
 80013de:	8b1b      	ldrh	r3, [r3, #24]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	4a1b      	ldr	r2, [pc, #108]	; (8001450 <USART2_IRQHandler+0x90>)
 80013e4:	f043 0308 	orr.w	r3, r3, #8
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	8313      	strh	r3, [r2, #24]
	}
	if(READ_BIT(USART2->ISR, USART_ISR_RXNE)){
 80013ec:	4b18      	ldr	r3, [pc, #96]	; (8001450 <USART2_IRQHandler+0x90>)
 80013ee:	69db      	ldr	r3, [r3, #28]
 80013f0:	f003 0320 	and.w	r3, r3, #32
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d029      	beq.n	800144c <USART2_IRQHandler+0x8c>
		bufferIn[i] = READ_REG(USART2->RDR);
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <USART2_IRQHandler+0x90>)
 80013fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80013fc:	b29a      	uxth	r2, r3
 80013fe:	4b15      	ldr	r3, [pc, #84]	; (8001454 <USART2_IRQHandler+0x94>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	b2d1      	uxtb	r1, r2
 8001404:	4a14      	ldr	r2, [pc, #80]	; (8001458 <USART2_IRQHandler+0x98>)
 8001406:	54d1      	strb	r1, [r2, r3]

		if(bufferIn[i] == TAIL_CHAR){
 8001408:	4b12      	ldr	r3, [pc, #72]	; (8001454 <USART2_IRQHandler+0x94>)
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	4a12      	ldr	r2, [pc, #72]	; (8001458 <USART2_IRQHandler+0x98>)
 800140e:	5cd3      	ldrb	r3, [r2, r3]
 8001410:	2b0a      	cmp	r3, #10
 8001412:	d10e      	bne.n	8001432 <USART2_IRQHandler+0x72>
			i++;
 8001414:	4b0f      	ldr	r3, [pc, #60]	; (8001454 <USART2_IRQHandler+0x94>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	3301      	adds	r3, #1
 800141a:	4a0e      	ldr	r2, [pc, #56]	; (8001454 <USART2_IRQHandler+0x94>)
 800141c:	6013      	str	r3, [r2, #0]
			decodeCmd(bufferIn, i);
 800141e:	4b0d      	ldr	r3, [pc, #52]	; (8001454 <USART2_IRQHandler+0x94>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <USART2_IRQHandler+0x98>)
 8001426:	f7ff ff4b 	bl	80012c0 <decodeCmd>
			i = 0;
 800142a:	4b0a      	ldr	r3, [pc, #40]	; (8001454 <USART2_IRQHandler+0x94>)
 800142c:	2200      	movs	r2, #0
 800142e:	601a      	str	r2, [r3, #0]
		else{
			i++;
		}
	}

}
 8001430:	e00c      	b.n	800144c <USART2_IRQHandler+0x8c>
		else if(i ==  BUFFER_SIZE){
 8001432:	4b08      	ldr	r3, [pc, #32]	; (8001454 <USART2_IRQHandler+0x94>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	2b0a      	cmp	r3, #10
 8001438:	d103      	bne.n	8001442 <USART2_IRQHandler+0x82>
			i = 0;
 800143a:	4b06      	ldr	r3, [pc, #24]	; (8001454 <USART2_IRQHandler+0x94>)
 800143c:	2200      	movs	r2, #0
 800143e:	601a      	str	r2, [r3, #0]
}
 8001440:	e004      	b.n	800144c <USART2_IRQHandler+0x8c>
			i++;
 8001442:	4b04      	ldr	r3, [pc, #16]	; (8001454 <USART2_IRQHandler+0x94>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	3301      	adds	r3, #1
 8001448:	4a02      	ldr	r2, [pc, #8]	; (8001454 <USART2_IRQHandler+0x94>)
 800144a:	6013      	str	r3, [r2, #0]
}
 800144c:	bf00      	nop
 800144e:	bd80      	pop	{r7, pc}
 8001450:	40004400 	.word	0x40004400
 8001454:	200005f0 	.word	0x200005f0
 8001458:	20000668 	.word	0x20000668

0800145c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800145c:	b480      	push	{r7}
 800145e:	b085      	sub	sp, #20
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001466:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001468:	4907      	ldr	r1, [pc, #28]	; (8001488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001470:	4b05      	ldr	r3, [pc, #20]	; (8001488 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001472:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	4013      	ands	r3, r2
 8001478:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800147a:	68fb      	ldr	r3, [r7, #12]
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr
 8001488:	40021000 	.word	0x40021000

0800148c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800148c:	b480      	push	{r7}
 800148e:	b087      	sub	sp, #28
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001496:	4a17      	ldr	r2, [pc, #92]	; (80014f4 <LL_SYSCFG_SetEXTISource+0x68>)
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2db      	uxtb	r3, r3
 800149c:	3302      	adds	r3, #2
 800149e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80014a2:	683b      	ldr	r3, [r7, #0]
 80014a4:	0c1b      	lsrs	r3, r3, #16
 80014a6:	43db      	mvns	r3, r3
 80014a8:	ea02 0103 	and.w	r1, r2, r3
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	0c1b      	lsrs	r3, r3, #16
 80014b0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	fa93 f3a3 	rbit	r3, r3
 80014b8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80014ba:	68fb      	ldr	r3, [r7, #12]
 80014bc:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80014be:	697b      	ldr	r3, [r7, #20]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d101      	bne.n	80014c8 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80014c4:	2320      	movs	r3, #32
 80014c6:	e003      	b.n	80014d0 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80014c8:	697b      	ldr	r3, [r7, #20]
 80014ca:	fab3 f383 	clz	r3, r3
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	461a      	mov	r2, r3
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	fa03 f202 	lsl.w	r2, r3, r2
 80014d8:	4806      	ldr	r0, [pc, #24]	; (80014f4 <LL_SYSCFG_SetEXTISource+0x68>)
 80014da:	683b      	ldr	r3, [r7, #0]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	430a      	orrs	r2, r1
 80014e0:	3302      	adds	r3, #2
 80014e2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80014e6:	bf00      	nop
 80014e8:	371c      	adds	r7, #28
 80014ea:	46bd      	mov	sp, r7
 80014ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f0:	4770      	bx	lr
 80014f2:	bf00      	nop
 80014f4:	40010000 	.word	0x40010000

080014f8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b08b      	sub	sp, #44	; 0x2c
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	681a      	ldr	r2, [r3, #0]
 8001508:	68bb      	ldr	r3, [r7, #8]
 800150a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	fa93 f3a3 	rbit	r3, r3
 8001512:	613b      	str	r3, [r7, #16]
  return result;
 8001514:	693b      	ldr	r3, [r7, #16]
 8001516:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001518:	69bb      	ldr	r3, [r7, #24]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d101      	bne.n	8001522 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800151e:	2320      	movs	r3, #32
 8001520:	e003      	b.n	800152a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	fab3 f383 	clz	r3, r3
 8001528:	b2db      	uxtb	r3, r3
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	2103      	movs	r1, #3
 800152e:	fa01 f303 	lsl.w	r3, r1, r3
 8001532:	43db      	mvns	r3, r3
 8001534:	401a      	ands	r2, r3
 8001536:	68bb      	ldr	r3, [r7, #8]
 8001538:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800153a:	6a3b      	ldr	r3, [r7, #32]
 800153c:	fa93 f3a3 	rbit	r3, r3
 8001540:	61fb      	str	r3, [r7, #28]
  return result;
 8001542:	69fb      	ldr	r3, [r7, #28]
 8001544:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001548:	2b00      	cmp	r3, #0
 800154a:	d101      	bne.n	8001550 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800154c:	2320      	movs	r3, #32
 800154e:	e003      	b.n	8001558 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001552:	fab3 f383 	clz	r3, r3
 8001556:	b2db      	uxtb	r3, r3
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	6879      	ldr	r1, [r7, #4]
 800155c:	fa01 f303 	lsl.w	r3, r1, r3
 8001560:	431a      	orrs	r2, r3
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	601a      	str	r2, [r3, #0]
}
 8001566:	bf00      	nop
 8001568:	372c      	adds	r7, #44	; 0x2c
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001572:	b480      	push	{r7}
 8001574:	b08b      	sub	sp, #44	; 0x2c
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	68da      	ldr	r2, [r3, #12]
 8001582:	68bb      	ldr	r3, [r7, #8]
 8001584:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001586:	697b      	ldr	r3, [r7, #20]
 8001588:	fa93 f3a3 	rbit	r3, r3
 800158c:	613b      	str	r3, [r7, #16]
  return result;
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001598:	2320      	movs	r3, #32
 800159a:	e003      	b.n	80015a4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800159c:	69bb      	ldr	r3, [r7, #24]
 800159e:	fab3 f383 	clz	r3, r3
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	2103      	movs	r1, #3
 80015a8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ac:	43db      	mvns	r3, r3
 80015ae:	401a      	ands	r2, r3
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b4:	6a3b      	ldr	r3, [r7, #32]
 80015b6:	fa93 f3a3 	rbit	r3, r3
 80015ba:	61fb      	str	r3, [r7, #28]
  return result;
 80015bc:	69fb      	ldr	r3, [r7, #28]
 80015be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d101      	bne.n	80015ca <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80015c6:	2320      	movs	r3, #32
 80015c8:	e003      	b.n	80015d2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80015ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015cc:	fab3 f383 	clz	r3, r3
 80015d0:	b2db      	uxtb	r3, r3
 80015d2:	005b      	lsls	r3, r3, #1
 80015d4:	6879      	ldr	r1, [r7, #4]
 80015d6:	fa01 f303 	lsl.w	r3, r1, r3
 80015da:	431a      	orrs	r2, r3
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	60da      	str	r2, [r3, #12]
}
 80015e0:	bf00      	nop
 80015e2:	372c      	adds	r7, #44	; 0x2c
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
 80015f4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	683a      	ldr	r2, [r7, #0]
 80015fa:	629a      	str	r2, [r3, #40]	; 0x28
}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr

08001608 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b08a      	sub	sp, #40	; 0x28
 800160c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	2200      	movs	r2, #0
 8001614:	601a      	str	r2, [r3, #0]
 8001616:	605a      	str	r2, [r3, #4]
 8001618:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800161a:	1d3b      	adds	r3, r7, #4
 800161c:	2200      	movs	r2, #0
 800161e:	601a      	str	r2, [r3, #0]
 8001620:	605a      	str	r2, [r3, #4]
 8001622:	609a      	str	r2, [r3, #8]
 8001624:	60da      	str	r2, [r3, #12]
 8001626:	611a      	str	r2, [r3, #16]
 8001628:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800162a:	2004      	movs	r0, #4
 800162c:	f7ff ff16 	bl	800145c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001630:	2080      	movs	r0, #128	; 0x80
 8001632:	f7ff ff13 	bl	800145c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001636:	2001      	movs	r0, #1
 8001638:	f7ff ff10 	bl	800145c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800163c:	2002      	movs	r0, #2
 800163e:	f7ff ff0d 	bl	800145c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001642:	2120      	movs	r1, #32
 8001644:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001648:	f7ff ffd0 	bl	80015ec <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800164c:	491b      	ldr	r1, [pc, #108]	; (80016bc <MX_GPIO_Init+0xb4>)
 800164e:	2002      	movs	r0, #2
 8001650:	f7ff ff1c 	bl	800148c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001654:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001658:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800165a:	2300      	movs	r3, #0
 800165c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800165e:	2301      	movs	r3, #1
 8001660:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001664:	2300      	movs	r3, #0
 8001666:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800166a:	2302      	movs	r3, #2
 800166c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001670:	f107 031c 	add.w	r3, r7, #28
 8001674:	4618      	mov	r0, r3
 8001676:	f001 faff 	bl	8002c78 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800167a:	2200      	movs	r2, #0
 800167c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_GPIO_Init+0xb8>)
 8001682:	f7ff ff76 	bl	8001572 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001686:	2200      	movs	r2, #0
 8001688:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800168c:	480c      	ldr	r0, [pc, #48]	; (80016c0 <MX_GPIO_Init+0xb8>)
 800168e:	f7ff ff33 	bl	80014f8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001692:	2320      	movs	r3, #32
 8001694:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001696:	2301      	movs	r3, #1
 8001698:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800169a:	2300      	movs	r3, #0
 800169c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800169e:	2300      	movs	r3, #0
 80016a0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80016a2:	2300      	movs	r3, #0
 80016a4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80016a6:	1d3b      	adds	r3, r7, #4
 80016a8:	4619      	mov	r1, r3
 80016aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80016ae:	f001 fd1a 	bl	80030e6 <LL_GPIO_Init>

}
 80016b2:	bf00      	nop
 80016b4:	3728      	adds	r7, #40	; 0x28
 80016b6:	46bd      	mov	sp, r7
 80016b8:	bd80      	pop	{r7, pc}
 80016ba:	bf00      	nop
 80016bc:	00f00003 	.word	0x00f00003
 80016c0:	48000800 	.word	0x48000800

080016c4 <__NVIC_SetPriorityGrouping>:
{
 80016c4:	b480      	push	{r7}
 80016c6:	b085      	sub	sp, #20
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	f003 0307 	and.w	r3, r3, #7
 80016d2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016d4:	4b0c      	ldr	r3, [pc, #48]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016d6:	68db      	ldr	r3, [r3, #12]
 80016d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016da:	68ba      	ldr	r2, [r7, #8]
 80016dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016e0:	4013      	ands	r3, r2
 80016e2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016e4:	68fb      	ldr	r3, [r7, #12]
 80016e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016e8:	68bb      	ldr	r3, [r7, #8]
 80016ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80016f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80016f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016f6:	4a04      	ldr	r2, [pc, #16]	; (8001708 <__NVIC_SetPriorityGrouping+0x44>)
 80016f8:	68bb      	ldr	r3, [r7, #8]
 80016fa:	60d3      	str	r3, [r2, #12]
}
 80016fc:	bf00      	nop
 80016fe:	3714      	adds	r7, #20
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001710:	4b05      	ldr	r3, [pc, #20]	; (8001728 <LL_RCC_HSI_Enable+0x1c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a04      	ldr	r2, [pc, #16]	; (8001728 <LL_RCC_HSI_Enable+0x1c>)
 8001716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800171a:	6013      	str	r3, [r2, #0]
}
 800171c:	bf00      	nop
 800171e:	46bd      	mov	sp, r7
 8001720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001724:	4770      	bx	lr
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000

0800172c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001730:	4b07      	ldr	r3, [pc, #28]	; (8001750 <LL_RCC_HSI_IsReady+0x24>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001738:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800173c:	d101      	bne.n	8001742 <LL_RCC_HSI_IsReady+0x16>
 800173e:	2301      	movs	r3, #1
 8001740:	e000      	b.n	8001744 <LL_RCC_HSI_IsReady+0x18>
 8001742:	2300      	movs	r3, #0
}
 8001744:	4618      	mov	r0, r3
 8001746:	46bd      	mov	sp, r7
 8001748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174c:	4770      	bx	lr
 800174e:	bf00      	nop
 8001750:	40021000 	.word	0x40021000

08001754 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001754:	b480      	push	{r7}
 8001756:	b083      	sub	sp, #12
 8001758:	af00      	add	r7, sp, #0
 800175a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800175c:	4b07      	ldr	r3, [pc, #28]	; (800177c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800175e:	685b      	ldr	r3, [r3, #4]
 8001760:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	061b      	lsls	r3, r3, #24
 8001768:	4904      	ldr	r1, [pc, #16]	; (800177c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800176a:	4313      	orrs	r3, r2
 800176c:	604b      	str	r3, [r1, #4]
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	40021000 	.word	0x40021000

08001780 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001788:	4b06      	ldr	r3, [pc, #24]	; (80017a4 <LL_RCC_SetSysClkSource+0x24>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	f023 0203 	bic.w	r2, r3, #3
 8001790:	4904      	ldr	r1, [pc, #16]	; (80017a4 <LL_RCC_SetSysClkSource+0x24>)
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	4313      	orrs	r3, r2
 8001796:	608b      	str	r3, [r1, #8]
}
 8001798:	bf00      	nop
 800179a:	370c      	adds	r7, #12
 800179c:	46bd      	mov	sp, r7
 800179e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a2:	4770      	bx	lr
 80017a4:	40021000 	.word	0x40021000

080017a8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80017ac:	4b04      	ldr	r3, [pc, #16]	; (80017c0 <LL_RCC_GetSysClkSource+0x18>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f003 030c 	and.w	r3, r3, #12
}
 80017b4:	4618      	mov	r0, r3
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr
 80017be:	bf00      	nop
 80017c0:	40021000 	.word	0x40021000

080017c4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80017c4:	b480      	push	{r7}
 80017c6:	b083      	sub	sp, #12
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80017cc:	4b06      	ldr	r3, [pc, #24]	; (80017e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80017ce:	689b      	ldr	r3, [r3, #8]
 80017d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017d4:	4904      	ldr	r1, [pc, #16]	; (80017e8 <LL_RCC_SetAHBPrescaler+0x24>)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	4313      	orrs	r3, r2
 80017da:	608b      	str	r3, [r1, #8]
}
 80017dc:	bf00      	nop
 80017de:	370c      	adds	r7, #12
 80017e0:	46bd      	mov	sp, r7
 80017e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e6:	4770      	bx	lr
 80017e8:	40021000 	.word	0x40021000

080017ec <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80017ec:	b480      	push	{r7}
 80017ee:	b083      	sub	sp, #12
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80017f4:	4b06      	ldr	r3, [pc, #24]	; (8001810 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017f6:	689b      	ldr	r3, [r3, #8]
 80017f8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80017fc:	4904      	ldr	r1, [pc, #16]	; (8001810 <LL_RCC_SetAPB1Prescaler+0x24>)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	4313      	orrs	r3, r2
 8001802:	608b      	str	r3, [r1, #8]
}
 8001804:	bf00      	nop
 8001806:	370c      	adds	r7, #12
 8001808:	46bd      	mov	sp, r7
 800180a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180e:	4770      	bx	lr
 8001810:	40021000 	.word	0x40021000

08001814 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001814:	b480      	push	{r7}
 8001816:	b083      	sub	sp, #12
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800181c:	4b06      	ldr	r3, [pc, #24]	; (8001838 <LL_RCC_SetAPB2Prescaler+0x24>)
 800181e:	689b      	ldr	r3, [r3, #8]
 8001820:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001824:	4904      	ldr	r1, [pc, #16]	; (8001838 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	4313      	orrs	r3, r2
 800182a:	608b      	str	r3, [r1, #8]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	40021000 	.word	0x40021000

0800183c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800183c:	b480      	push	{r7}
 800183e:	b083      	sub	sp, #12
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001844:	4b09      	ldr	r3, [pc, #36]	; (800186c <LL_RCC_SetUSARTClockSource+0x30>)
 8001846:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	0c1b      	lsrs	r3, r3, #16
 800184e:	43db      	mvns	r3, r3
 8001850:	401a      	ands	r2, r3
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	b29b      	uxth	r3, r3
 8001856:	4905      	ldr	r1, [pc, #20]	; (800186c <LL_RCC_SetUSARTClockSource+0x30>)
 8001858:	4313      	orrs	r3, r2
 800185a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_RCC_PLL_Enable+0x1c>)
 8001876:	681b      	ldr	r3, [r3, #0]
 8001878:	4a04      	ldr	r2, [pc, #16]	; (800188c <LL_RCC_PLL_Enable+0x1c>)
 800187a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800187e:	6013      	str	r3, [r2, #0]
}
 8001880:	bf00      	nop
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
 800188a:	bf00      	nop
 800188c:	40021000 	.word	0x40021000

08001890 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001894:	4b07      	ldr	r3, [pc, #28]	; (80018b4 <LL_RCC_PLL_IsReady+0x24>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800189c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80018a0:	d101      	bne.n	80018a6 <LL_RCC_PLL_IsReady+0x16>
 80018a2:	2301      	movs	r3, #1
 80018a4:	e000      	b.n	80018a8 <LL_RCC_PLL_IsReady+0x18>
 80018a6:	2300      	movs	r3, #0
}
 80018a8:	4618      	mov	r0, r3
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	40021000 	.word	0x40021000

080018b8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	60f8      	str	r0, [r7, #12]
 80018c0:	60b9      	str	r1, [r7, #8]
 80018c2:	607a      	str	r2, [r7, #4]
 80018c4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80018c6:	4b0a      	ldr	r3, [pc, #40]	; (80018f0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018c8:	68da      	ldr	r2, [r3, #12]
 80018ca:	4b0a      	ldr	r3, [pc, #40]	; (80018f4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80018cc:	4013      	ands	r3, r2
 80018ce:	68f9      	ldr	r1, [r7, #12]
 80018d0:	68ba      	ldr	r2, [r7, #8]
 80018d2:	4311      	orrs	r1, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	0212      	lsls	r2, r2, #8
 80018d8:	4311      	orrs	r1, r2
 80018da:	683a      	ldr	r2, [r7, #0]
 80018dc:	430a      	orrs	r2, r1
 80018de:	4904      	ldr	r1, [pc, #16]	; (80018f0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80018e0:	4313      	orrs	r3, r2
 80018e2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80018e4:	bf00      	nop
 80018e6:	3714      	adds	r7, #20
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	40021000 	.word	0x40021000
 80018f4:	f9ff808c 	.word	0xf9ff808c

080018f8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80018fc:	4b05      	ldr	r3, [pc, #20]	; (8001914 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80018fe:	68db      	ldr	r3, [r3, #12]
 8001900:	4a04      	ldr	r2, [pc, #16]	; (8001914 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	60d3      	str	r3, [r2, #12]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001910:	4770      	bx	lr
 8001912:	bf00      	nop
 8001914:	40021000 	.word	0x40021000

08001918 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001920:	4b08      	ldr	r3, [pc, #32]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001922:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001924:	4907      	ldr	r1, [pc, #28]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4313      	orrs	r3, r2
 800192a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800192c:	4b05      	ldr	r3, [pc, #20]	; (8001944 <LL_APB1_GRP1_EnableClock+0x2c>)
 800192e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4013      	ands	r3, r2
 8001934:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001936:	68fb      	ldr	r3, [r7, #12]
}
 8001938:	bf00      	nop
 800193a:	3714      	adds	r7, #20
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr
 8001944:	40021000 	.word	0x40021000

08001948 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001948:	b480      	push	{r7}
 800194a:	b085      	sub	sp, #20
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001950:	4b08      	ldr	r3, [pc, #32]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001952:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800195c:	4b05      	ldr	r3, [pc, #20]	; (8001974 <LL_APB2_GRP1_EnableClock+0x2c>)
 800195e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	4013      	ands	r3, r2
 8001964:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001966:	68fb      	ldr	r3, [r7, #12]
}
 8001968:	bf00      	nop
 800196a:	3714      	adds	r7, #20
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	40021000 	.word	0x40021000

08001978 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <LL_FLASH_SetLatency+0x24>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f023 0207 	bic.w	r2, r3, #7
 8001988:	4904      	ldr	r1, [pc, #16]	; (800199c <LL_FLASH_SetLatency+0x24>)
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4313      	orrs	r3, r2
 800198e:	600b      	str	r3, [r1, #0]
}
 8001990:	bf00      	nop
 8001992:	370c      	adds	r7, #12
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40022000 	.word	0x40022000

080019a0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <LL_FLASH_GetLatency+0x18>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 0307 	and.w	r3, r3, #7
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000

080019bc <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80019bc:	b480      	push	{r7}
 80019be:	b083      	sub	sp, #12
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80019c4:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80019cc:	4904      	ldr	r1, [pc, #16]	; (80019e0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	4313      	orrs	r3, r2
 80019d2:	600b      	str	r3, [r1, #0]
}
 80019d4:	bf00      	nop
 80019d6:	370c      	adds	r7, #12
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40007000 	.word	0x40007000

080019e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80019e8:	2001      	movs	r0, #1
 80019ea:	f7ff ffad 	bl	8001948 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80019ee:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80019f2:	f7ff ff91 	bl	8001918 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019f6:	2003      	movs	r0, #3
 80019f8:	f7ff fe64 	bl	80016c4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80019fc:	f000 f814 	bl	8001a28 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a00:	f7ff fe02 	bl	8001608 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001a04:	f000 fe90 	bl	8002728 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001a08:	f000 fb1e 	bl	8002048 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001a0c:	f000 fd5e 	bl	80024cc <MX_TIM1_Init>
  MX_SPI3_Init();
 8001a10:	f000 fb88 	bl	8002124 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8001a14:	f000 fefe 	bl	8002814 <startupPrint>

  gimbalControlInit();
 8001a18:	f7ff fc4c 	bl	80012b4 <gimbalControlInit>

  eyes_init();
 8001a1c:	f7ff f8a2 	bl	8000b64 <eyes_init>
  eyes_start();
 8001a20:	f7ff f8c2 	bl	8000ba8 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001a24:	e7fe      	b.n	8001a24 <main+0x40>
	...

08001a28 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001a2c:	2003      	movs	r0, #3
 8001a2e:	f7ff ffa3 	bl	8001978 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001a32:	bf00      	nop
 8001a34:	f7ff ffb4 	bl	80019a0 <LL_FLASH_GetLatency>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b03      	cmp	r3, #3
 8001a3c:	d1fa      	bne.n	8001a34 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001a3e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001a42:	f7ff ffbb 	bl	80019bc <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001a46:	f7ff fe61 	bl	800170c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001a4a:	bf00      	nop
 8001a4c:	f7ff fe6e 	bl	800172c <LL_RCC_HSI_IsReady>
 8001a50:	4603      	mov	r3, r0
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d1fa      	bne.n	8001a4c <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001a56:	2010      	movs	r0, #16
 8001a58:	f7ff fe7c 	bl	8001754 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	2208      	movs	r2, #8
 8001a60:	2100      	movs	r1, #0
 8001a62:	2002      	movs	r0, #2
 8001a64:	f7ff ff28 	bl	80018b8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001a68:	f7ff ff46 	bl	80018f8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001a6c:	f7ff ff00 	bl	8001870 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001a70:	bf00      	nop
 8001a72:	f7ff ff0d 	bl	8001890 <LL_RCC_PLL_IsReady>
 8001a76:	4603      	mov	r3, r0
 8001a78:	2b01      	cmp	r3, #1
 8001a7a:	d1fa      	bne.n	8001a72 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001a7c:	2003      	movs	r0, #3
 8001a7e:	f7ff fe7f 	bl	8001780 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001a82:	bf00      	nop
 8001a84:	f7ff fe90 	bl	80017a8 <LL_RCC_GetSysClkSource>
 8001a88:	4603      	mov	r3, r0
 8001a8a:	2b0c      	cmp	r3, #12
 8001a8c:	d1fa      	bne.n	8001a84 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f7ff fe98 	bl	80017c4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001a94:	2000      	movs	r0, #0
 8001a96:	f7ff fea9 	bl	80017ec <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001a9a:	2000      	movs	r0, #0
 8001a9c:	f7ff feba 	bl	8001814 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8001aa0:	4805      	ldr	r0, [pc, #20]	; (8001ab8 <SystemClock_Config+0x90>)
 8001aa2:	f002 f991 	bl	8003dc8 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8001aa6:	4804      	ldr	r0, [pc, #16]	; (8001ab8 <SystemClock_Config+0x90>)
 8001aa8:	f002 f9c2 	bl	8003e30 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001aac:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001ab0:	f7ff fec4 	bl	800183c <LL_RCC_SetUSARTClockSource>
}
 8001ab4:	bf00      	nop
 8001ab6:	bd80      	pop	{r7, pc}
 8001ab8:	03d09000 	.word	0x03d09000

08001abc <OF_ResetCoefficients>:
static int32_t deltaX;
static int32_t deltaY;
static int32_t deltaT;
static int16_t frameIdx;

void OF_ResetCoefficients(){
 8001abc:	b490      	push	{r4, r7}
 8001abe:	af00      	add	r7, sp, #0
	A[0] = B[0] = C[0] = E[0] = F[0] = 0;
 8001ac0:	4a22      	ldr	r2, [pc, #136]	; (8001b4c <OF_ResetCoefficients+0x90>)
 8001ac2:	f04f 0300 	mov.w	r3, #0
 8001ac6:	f04f 0400 	mov.w	r4, #0
 8001aca:	e9c2 3400 	strd	r3, r4, [r2]
 8001ace:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <OF_ResetCoefficients+0x90>)
 8001ad0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ad4:	4a1e      	ldr	r2, [pc, #120]	; (8001b50 <OF_ResetCoefficients+0x94>)
 8001ad6:	e9c2 3400 	strd	r3, r4, [r2]
 8001ada:	4b1d      	ldr	r3, [pc, #116]	; (8001b50 <OF_ResetCoefficients+0x94>)
 8001adc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ae0:	4a1c      	ldr	r2, [pc, #112]	; (8001b54 <OF_ResetCoefficients+0x98>)
 8001ae2:	e9c2 3400 	strd	r3, r4, [r2]
 8001ae6:	4b1b      	ldr	r3, [pc, #108]	; (8001b54 <OF_ResetCoefficients+0x98>)
 8001ae8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001aec:	4a1a      	ldr	r2, [pc, #104]	; (8001b58 <OF_ResetCoefficients+0x9c>)
 8001aee:	e9c2 3400 	strd	r3, r4, [r2]
 8001af2:	4b19      	ldr	r3, [pc, #100]	; (8001b58 <OF_ResetCoefficients+0x9c>)
 8001af4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001af8:	4a18      	ldr	r2, [pc, #96]	; (8001b5c <OF_ResetCoefficients+0xa0>)
 8001afa:	e9c2 3400 	strd	r3, r4, [r2]
	A[1] = B[1] = C[1] = E[1] = F[1] = 0;
 8001afe:	4a13      	ldr	r2, [pc, #76]	; (8001b4c <OF_ResetCoefficients+0x90>)
 8001b00:	f04f 0300 	mov.w	r3, #0
 8001b04:	f04f 0400 	mov.w	r4, #0
 8001b08:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001b0c:	4b0f      	ldr	r3, [pc, #60]	; (8001b4c <OF_ResetCoefficients+0x90>)
 8001b0e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001b12:	4a0f      	ldr	r2, [pc, #60]	; (8001b50 <OF_ResetCoefficients+0x94>)
 8001b14:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001b18:	4b0d      	ldr	r3, [pc, #52]	; (8001b50 <OF_ResetCoefficients+0x94>)
 8001b1a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001b1e:	4a0d      	ldr	r2, [pc, #52]	; (8001b54 <OF_ResetCoefficients+0x98>)
 8001b20:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001b24:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <OF_ResetCoefficients+0x98>)
 8001b26:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001b2a:	4a0b      	ldr	r2, [pc, #44]	; (8001b58 <OF_ResetCoefficients+0x9c>)
 8001b2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001b30:	4b09      	ldr	r3, [pc, #36]	; (8001b58 <OF_ResetCoefficients+0x9c>)
 8001b32:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001b36:	4a09      	ldr	r2, [pc, #36]	; (8001b5c <OF_ResetCoefficients+0xa0>)
 8001b38:	e9c2 3402 	strd	r3, r4, [r2, #8]
	frameIdx = 0;
 8001b3c:	4b08      	ldr	r3, [pc, #32]	; (8001b60 <OF_ResetCoefficients+0xa4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	801a      	strh	r2, [r3, #0]
}
 8001b42:	bf00      	nop
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bc90      	pop	{r4, r7}
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000638 	.word	0x20000638
 8001b50:	20000628 	.word	0x20000628
 8001b54:	20000618 	.word	0x20000618
 8001b58:	20000608 	.word	0x20000608
 8001b5c:	200005f8 	.word	0x200005f8
 8001b60:	20000654 	.word	0x20000654

08001b64 <OF_ComputeCoefficients>:

void OF_ComputeCoefficients(Device dev, uint8_t currentFrame[], uint8_t lastFrame[], int32_t idx){
 8001b64:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001b68:	b085      	sub	sp, #20
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	60b9      	str	r1, [r7, #8]
 8001b6e:	607a      	str	r2, [r7, #4]
 8001b70:	603b      	str	r3, [r7, #0]
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]

	if(fSelect[idx]){
 8001b76:	4a76      	ldr	r2, [pc, #472]	; (8001d50 <OF_ComputeCoefficients+0x1ec>)
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	4413      	add	r3, r2
 8001b7c:	781b      	ldrb	r3, [r3, #0]
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	f000 80e0 	beq.w	8001d44 <OF_ComputeCoefficients+0x1e0>
		deltaX = (lastFrame[f2[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f1[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001b84:	4b73      	ldr	r3, [pc, #460]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001b86:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001b8a:	461a      	mov	r2, r3
 8001b8c:	4b72      	ldr	r3, [pc, #456]	; (8001d58 <OF_ComputeCoefficients+0x1f4>)
 8001b8e:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001b92:	461a      	mov	r2, r3
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4413      	add	r3, r2
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b9e:	4b6d      	ldr	r3, [pc, #436]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001ba0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	4b6d      	ldr	r3, [pc, #436]	; (8001d5c <OF_ComputeCoefficients+0x1f8>)
 8001ba8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001bac:	4619      	mov	r1, r3
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	440b      	add	r3, r1
 8001bb2:	781b      	ldrb	r3, [r3, #0]
 8001bb4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	461a      	mov	r2, r3
 8001bbc:	4b68      	ldr	r3, [pc, #416]	; (8001d60 <OF_ComputeCoefficients+0x1fc>)
 8001bbe:	601a      	str	r2, [r3, #0]
		deltaY = (lastFrame[f4[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f3[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001bc0:	4b64      	ldr	r3, [pc, #400]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001bc2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	4b66      	ldr	r3, [pc, #408]	; (8001d64 <OF_ComputeCoefficients+0x200>)
 8001bca:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001bce:	461a      	mov	r2, r3
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	4413      	add	r3, r2
 8001bd4:	781b      	ldrb	r3, [r3, #0]
 8001bd6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001bda:	4b5e      	ldr	r3, [pc, #376]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001bdc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001be0:	4619      	mov	r1, r3
 8001be2:	4b61      	ldr	r3, [pc, #388]	; (8001d68 <OF_ComputeCoefficients+0x204>)
 8001be4:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001be8:	4619      	mov	r1, r3
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	440b      	add	r3, r1
 8001bee:	781b      	ldrb	r3, [r3, #0]
 8001bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001bf4:	1ad3      	subs	r3, r2, r3
 8001bf6:	461a      	mov	r2, r3
 8001bf8:	4b5c      	ldr	r3, [pc, #368]	; (8001d6c <OF_ComputeCoefficients+0x208>)
 8001bfa:	601a      	str	r2, [r3, #0]
		deltaT = (currentFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001bfc:	4b55      	ldr	r3, [pc, #340]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001bfe:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c02:	461a      	mov	r2, r3
 8001c04:	4b5a      	ldr	r3, [pc, #360]	; (8001d70 <OF_ComputeCoefficients+0x20c>)
 8001c06:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c0a:	461a      	mov	r2, r3
 8001c0c:	68bb      	ldr	r3, [r7, #8]
 8001c0e:	4413      	add	r3, r2
 8001c10:	781b      	ldrb	r3, [r3, #0]
 8001c12:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c16:	4b4f      	ldr	r3, [pc, #316]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001c18:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4b54      	ldr	r3, [pc, #336]	; (8001d70 <OF_ComputeCoefficients+0x20c>)
 8001c20:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001c24:	4619      	mov	r1, r3
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	440b      	add	r3, r1
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	461a      	mov	r2, r3
 8001c34:	4b4f      	ldr	r3, [pc, #316]	; (8001d74 <OF_ComputeCoefficients+0x210>)
 8001c36:	601a      	str	r2, [r3, #0]

		A[dev] += deltaX * deltaX;
 8001c38:	7bfb      	ldrb	r3, [r7, #15]
 8001c3a:	4a4f      	ldr	r2, [pc, #316]	; (8001d78 <OF_ComputeCoefficients+0x214>)
 8001c3c:	00db      	lsls	r3, r3, #3
 8001c3e:	4413      	add	r3, r2
 8001c40:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001c44:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <OF_ComputeCoefficients+0x1fc>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4845      	ldr	r0, [pc, #276]	; (8001d60 <OF_ComputeCoefficients+0x1fc>)
 8001c4a:	6800      	ldr	r0, [r0, #0]
 8001c4c:	fb00 f303 	mul.w	r3, r0, r3
 8001c50:	469b      	mov	fp, r3
 8001c52:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001c56:	7bf8      	ldrb	r0, [r7, #15]
 8001c58:	eb1b 0301 	adds.w	r3, fp, r1
 8001c5c:	eb4c 0402 	adc.w	r4, ip, r2
 8001c60:	4945      	ldr	r1, [pc, #276]	; (8001d78 <OF_ComputeCoefficients+0x214>)
 8001c62:	00c2      	lsls	r2, r0, #3
 8001c64:	440a      	add	r2, r1
 8001c66:	e9c2 3400 	strd	r3, r4, [r2]
		B[dev] += deltaY * deltaX;
 8001c6a:	7bfb      	ldrb	r3, [r7, #15]
 8001c6c:	4a43      	ldr	r2, [pc, #268]	; (8001d7c <OF_ComputeCoefficients+0x218>)
 8001c6e:	00db      	lsls	r3, r3, #3
 8001c70:	4413      	add	r3, r2
 8001c72:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001c76:	4b3d      	ldr	r3, [pc, #244]	; (8001d6c <OF_ComputeCoefficients+0x208>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	4839      	ldr	r0, [pc, #228]	; (8001d60 <OF_ComputeCoefficients+0x1fc>)
 8001c7c:	6800      	ldr	r0, [r0, #0]
 8001c7e:	fb00 f303 	mul.w	r3, r0, r3
 8001c82:	469b      	mov	fp, r3
 8001c84:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001c88:	7bf8      	ldrb	r0, [r7, #15]
 8001c8a:	eb1b 0301 	adds.w	r3, fp, r1
 8001c8e:	eb4c 0402 	adc.w	r4, ip, r2
 8001c92:	493a      	ldr	r1, [pc, #232]	; (8001d7c <OF_ComputeCoefficients+0x218>)
 8001c94:	00c2      	lsls	r2, r0, #3
 8001c96:	440a      	add	r2, r1
 8001c98:	e9c2 3400 	strd	r3, r4, [r2]
		C[dev] += deltaT * deltaX;
 8001c9c:	7bfb      	ldrb	r3, [r7, #15]
 8001c9e:	4a38      	ldr	r2, [pc, #224]	; (8001d80 <OF_ComputeCoefficients+0x21c>)
 8001ca0:	00db      	lsls	r3, r3, #3
 8001ca2:	4413      	add	r3, r2
 8001ca4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ca8:	4b32      	ldr	r3, [pc, #200]	; (8001d74 <OF_ComputeCoefficients+0x210>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	482c      	ldr	r0, [pc, #176]	; (8001d60 <OF_ComputeCoefficients+0x1fc>)
 8001cae:	6800      	ldr	r0, [r0, #0]
 8001cb0:	fb00 f303 	mul.w	r3, r0, r3
 8001cb4:	469b      	mov	fp, r3
 8001cb6:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001cba:	7bf8      	ldrb	r0, [r7, #15]
 8001cbc:	eb1b 0301 	adds.w	r3, fp, r1
 8001cc0:	eb4c 0402 	adc.w	r4, ip, r2
 8001cc4:	492e      	ldr	r1, [pc, #184]	; (8001d80 <OF_ComputeCoefficients+0x21c>)
 8001cc6:	00c2      	lsls	r2, r0, #3
 8001cc8:	440a      	add	r2, r1
 8001cca:	e9c2 3400 	strd	r3, r4, [r2]
		E[dev] += deltaY * deltaY;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	4a2c      	ldr	r2, [pc, #176]	; (8001d84 <OF_ComputeCoefficients+0x220>)
 8001cd2:	00db      	lsls	r3, r3, #3
 8001cd4:	4413      	add	r3, r2
 8001cd6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001cda:	4b24      	ldr	r3, [pc, #144]	; (8001d6c <OF_ComputeCoefficients+0x208>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	4823      	ldr	r0, [pc, #140]	; (8001d6c <OF_ComputeCoefficients+0x208>)
 8001ce0:	6800      	ldr	r0, [r0, #0]
 8001ce2:	fb00 f303 	mul.w	r3, r0, r3
 8001ce6:	469b      	mov	fp, r3
 8001ce8:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001cec:	7bf8      	ldrb	r0, [r7, #15]
 8001cee:	eb1b 0301 	adds.w	r3, fp, r1
 8001cf2:	eb4c 0402 	adc.w	r4, ip, r2
 8001cf6:	4923      	ldr	r1, [pc, #140]	; (8001d84 <OF_ComputeCoefficients+0x220>)
 8001cf8:	00c2      	lsls	r2, r0, #3
 8001cfa:	440a      	add	r2, r1
 8001cfc:	e9c2 3400 	strd	r3, r4, [r2]
		F[dev] += deltaT * deltaY;
 8001d00:	7bfb      	ldrb	r3, [r7, #15]
 8001d02:	4a21      	ldr	r2, [pc, #132]	; (8001d88 <OF_ComputeCoefficients+0x224>)
 8001d04:	00db      	lsls	r3, r3, #3
 8001d06:	4413      	add	r3, r2
 8001d08:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d0c:	4b19      	ldr	r3, [pc, #100]	; (8001d74 <OF_ComputeCoefficients+0x210>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	4816      	ldr	r0, [pc, #88]	; (8001d6c <OF_ComputeCoefficients+0x208>)
 8001d12:	6800      	ldr	r0, [r0, #0]
 8001d14:	fb00 f303 	mul.w	r3, r0, r3
 8001d18:	469b      	mov	fp, r3
 8001d1a:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001d1e:	7bf8      	ldrb	r0, [r7, #15]
 8001d20:	eb1b 0301 	adds.w	r3, fp, r1
 8001d24:	eb4c 0402 	adc.w	r4, ip, r2
 8001d28:	4917      	ldr	r1, [pc, #92]	; (8001d88 <OF_ComputeCoefficients+0x224>)
 8001d2a:	00c2      	lsls	r2, r0, #3
 8001d2c:	440a      	add	r2, r1
 8001d2e:	e9c2 3400 	strd	r3, r4, [r2]

		frameIdx++;
 8001d32:	4b08      	ldr	r3, [pc, #32]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001d34:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d38:	b29b      	uxth	r3, r3
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	b29b      	uxth	r3, r3
 8001d3e:	b21a      	sxth	r2, r3
 8001d40:	4b04      	ldr	r3, [pc, #16]	; (8001d54 <OF_ComputeCoefficients+0x1f0>)
 8001d42:	801a      	strh	r2, [r3, #0]
	}
}
 8001d44:	bf00      	nop
 8001d46:	3714      	adds	r7, #20
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001d4e:	4770      	bx	lr
 8001d50:	08005b28 	.word	0x08005b28
 8001d54:	20000654 	.word	0x20000654
 8001d58:	08005528 	.word	0x08005528
 8001d5c:	08005328 	.word	0x08005328
 8001d60:	20000648 	.word	0x20000648
 8001d64:	08005928 	.word	0x08005928
 8001d68:	08005728 	.word	0x08005728
 8001d6c:	2000064c 	.word	0x2000064c
 8001d70:	08005128 	.word	0x08005128
 8001d74:	20000650 	.word	0x20000650
 8001d78:	200005f8 	.word	0x200005f8
 8001d7c:	20000608 	.word	0x20000608
 8001d80:	20000618 	.word	0x20000618
 8001d84:	20000628 	.word	0x20000628
 8001d88:	20000638 	.word	0x20000638

08001d8c <OF_Compute>:

void OF_Compute(Device dev, int32_t* ofX, int32_t* ofY){
 8001d8c:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001d90:	b088      	sub	sp, #32
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	4603      	mov	r3, r0
 8001d96:	60b9      	str	r1, [r7, #8]
 8001d98:	607a      	str	r2, [r7, #4]
 8001d9a:	73fb      	strb	r3, [r7, #15]
	int64_t num, den;

	den = A[dev] * E[dev] - B[dev] * B[dev];
 8001d9c:	7bfb      	ldrb	r3, [r7, #15]
 8001d9e:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <OF_Compute+0x1b8>)
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001da8:	7bfb      	ldrb	r3, [r7, #15]
 8001daa:	4867      	ldr	r0, [pc, #412]	; (8001f48 <OF_Compute+0x1bc>)
 8001dac:	00db      	lsls	r3, r3, #3
 8001dae:	4403      	add	r3, r0
 8001db0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001db4:	fb03 f502 	mul.w	r5, r3, r2
 8001db8:	fb01 f004 	mul.w	r0, r1, r4
 8001dbc:	4428      	add	r0, r5
 8001dbe:	fba1 5603 	umull	r5, r6, r1, r3
 8001dc2:	1983      	adds	r3, r0, r6
 8001dc4:	461e      	mov	r6, r3
 8001dc6:	7bfb      	ldrb	r3, [r7, #15]
 8001dc8:	4a60      	ldr	r2, [pc, #384]	; (8001f4c <OF_Compute+0x1c0>)
 8001dca:	00db      	lsls	r3, r3, #3
 8001dcc:	4413      	add	r3, r2
 8001dce:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001dd2:	7bfb      	ldrb	r3, [r7, #15]
 8001dd4:	485d      	ldr	r0, [pc, #372]	; (8001f4c <OF_Compute+0x1c0>)
 8001dd6:	00db      	lsls	r3, r3, #3
 8001dd8:	4403      	add	r3, r0
 8001dda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001dde:	fb03 fc02 	mul.w	ip, r3, r2
 8001de2:	fb01 f004 	mul.w	r0, r1, r4
 8001de6:	4460      	add	r0, ip
 8001de8:	fba1 bc03 	umull	fp, ip, r1, r3
 8001dec:	eb00 020c 	add.w	r2, r0, ip
 8001df0:	4694      	mov	ip, r2
 8001df2:	462b      	mov	r3, r5
 8001df4:	4634      	mov	r4, r6
 8001df6:	ebb3 030b 	subs.w	r3, r3, fp
 8001dfa:	eb64 040c 	sbc.w	r4, r4, ip
 8001dfe:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(den > 0){
 8001e02:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	f174 0300 	sbcs.w	r3, r4, #0
 8001e0c:	f2c0 808d 	blt.w	8001f2a <OF_Compute+0x19e>
		num = (C[dev]*E[dev]) - (B[dev]*F[dev]);
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	4a4f      	ldr	r2, [pc, #316]	; (8001f50 <OF_Compute+0x1c4>)
 8001e14:	00db      	lsls	r3, r3, #3
 8001e16:	4413      	add	r3, r2
 8001e18:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e1c:	7bfb      	ldrb	r3, [r7, #15]
 8001e1e:	484a      	ldr	r0, [pc, #296]	; (8001f48 <OF_Compute+0x1bc>)
 8001e20:	00db      	lsls	r3, r3, #3
 8001e22:	4403      	add	r3, r0
 8001e24:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e28:	fb03 f502 	mul.w	r5, r3, r2
 8001e2c:	fb01 f004 	mul.w	r0, r1, r4
 8001e30:	4428      	add	r0, r5
 8001e32:	fba1 5603 	umull	r5, r6, r1, r3
 8001e36:	1983      	adds	r3, r0, r6
 8001e38:	461e      	mov	r6, r3
 8001e3a:	7bfb      	ldrb	r3, [r7, #15]
 8001e3c:	4a43      	ldr	r2, [pc, #268]	; (8001f4c <OF_Compute+0x1c0>)
 8001e3e:	00db      	lsls	r3, r3, #3
 8001e40:	4413      	add	r3, r2
 8001e42:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e46:	7bfb      	ldrb	r3, [r7, #15]
 8001e48:	4842      	ldr	r0, [pc, #264]	; (8001f54 <OF_Compute+0x1c8>)
 8001e4a:	00db      	lsls	r3, r3, #3
 8001e4c:	4403      	add	r3, r0
 8001e4e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001e52:	fb03 fc02 	mul.w	ip, r3, r2
 8001e56:	fb01 f004 	mul.w	r0, r1, r4
 8001e5a:	4460      	add	r0, ip
 8001e5c:	fba1 bc03 	umull	fp, ip, r1, r3
 8001e60:	eb00 020c 	add.w	r2, r0, ip
 8001e64:	4694      	mov	ip, r2
 8001e66:	462b      	mov	r3, r5
 8001e68:	4634      	mov	r4, r6
 8001e6a:	ebb3 030b 	subs.w	r3, r3, fp
 8001e6e:	eb64 040c 	sbc.w	r4, r4, ip
 8001e72:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofX = (num << bitsOfResolution)  / den;
 8001e76:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001e7a:	f04f 0000 	mov.w	r0, #0
 8001e7e:	f04f 0100 	mov.w	r1, #0
 8001e82:	0261      	lsls	r1, r4, #9
 8001e84:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8001e88:	0258      	lsls	r0, r3, #9
 8001e8a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e8e:	f7fe f9ef 	bl	8000270 <__aeabi_ldivmod>
 8001e92:	4603      	mov	r3, r0
 8001e94:	460c      	mov	r4, r1
 8001e96:	461a      	mov	r2, r3
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	601a      	str	r2, [r3, #0]
		num = (A[dev]*F[dev]) - (C[dev]*B[dev]);
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	4a29      	ldr	r2, [pc, #164]	; (8001f44 <OF_Compute+0x1b8>)
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ea8:	7bfb      	ldrb	r3, [r7, #15]
 8001eaa:	482a      	ldr	r0, [pc, #168]	; (8001f54 <OF_Compute+0x1c8>)
 8001eac:	00db      	lsls	r3, r3, #3
 8001eae:	4403      	add	r3, r0
 8001eb0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001eb4:	fb03 f502 	mul.w	r5, r3, r2
 8001eb8:	fb01 f004 	mul.w	r0, r1, r4
 8001ebc:	4428      	add	r0, r5
 8001ebe:	fba1 5603 	umull	r5, r6, r1, r3
 8001ec2:	1983      	adds	r3, r0, r6
 8001ec4:	461e      	mov	r6, r3
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	4a21      	ldr	r2, [pc, #132]	; (8001f50 <OF_Compute+0x1c4>)
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4413      	add	r3, r2
 8001ece:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	481d      	ldr	r0, [pc, #116]	; (8001f4c <OF_Compute+0x1c0>)
 8001ed6:	00db      	lsls	r3, r3, #3
 8001ed8:	4403      	add	r3, r0
 8001eda:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ede:	fb03 fc02 	mul.w	ip, r3, r2
 8001ee2:	fb01 f004 	mul.w	r0, r1, r4
 8001ee6:	4460      	add	r0, ip
 8001ee8:	fba1 bc03 	umull	fp, ip, r1, r3
 8001eec:	eb00 020c 	add.w	r2, r0, ip
 8001ef0:	4694      	mov	ip, r2
 8001ef2:	462b      	mov	r3, r5
 8001ef4:	4634      	mov	r4, r6
 8001ef6:	ebb3 030b 	subs.w	r3, r3, fp
 8001efa:	eb64 040c 	sbc.w	r4, r4, ip
 8001efe:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofY = (num << bitsOfResolution) / den;
 8001f02:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f06:	f04f 0000 	mov.w	r0, #0
 8001f0a:	f04f 0100 	mov.w	r1, #0
 8001f0e:	0261      	lsls	r1, r4, #9
 8001f10:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8001f14:	0258      	lsls	r0, r3, #9
 8001f16:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f1a:	f7fe f9a9 	bl	8000270 <__aeabi_ldivmod>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	460c      	mov	r4, r1
 8001f22:	461a      	mov	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	601a      	str	r2, [r3, #0]
	}
	else{
		*ofX = *ofY = 0;
	}
}
 8001f28:	e006      	b.n	8001f38 <OF_Compute+0x1ac>
		*ofX = *ofY = 0;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	601a      	str	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681a      	ldr	r2, [r3, #0]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	601a      	str	r2, [r3, #0]
}
 8001f38:	bf00      	nop
 8001f3a:	3720      	adds	r7, #32
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8001f42:	bf00      	nop
 8001f44:	200005f8 	.word	0x200005f8
 8001f48:	20000628 	.word	0x20000628
 8001f4c:	20000608 	.word	0x20000608
 8001f50:	20000618 	.word	0x20000618
 8001f54:	20000638 	.word	0x20000638

08001f58 <OF_ComputeFused>:

void OF_ComputeFused(optical2DFlowStruct* right, optical2DFlowStruct* left, optical2DandRotateFlowStruct* fused){
 8001f58:	b480      	push	{r7}
 8001f5a:	b085      	sub	sp, #20
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	60f8      	str	r0, [r7, #12]
 8001f60:	60b9      	str	r1, [r7, #8]
 8001f62:	607a      	str	r2, [r7, #4]
	fused->x = (right->x + left->x) >> 2;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	109a      	asrs	r2, r3, #2
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	601a      	str	r2, [r3, #0]
	fused->y = (right->y + left->y) >> 2;
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	4413      	add	r3, r2
 8001f7e:	109a      	asrs	r2, r3, #2
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	605a      	str	r2, [r3, #4]
	fused->theta = (right->y - left->y);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	685a      	ldr	r2, [r3, #4]
 8001f88:	68bb      	ldr	r3, [r7, #8]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	1ad2      	subs	r2, r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	609a      	str	r2, [r3, #8]
}
 8001f92:	bf00      	nop
 8001f94:	3714      	adds	r7, #20
 8001f96:	46bd      	mov	sp, r7
 8001f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9c:	4770      	bx	lr
	...

08001fa0 <LL_AHB2_GRP1_EnableClock>:
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b085      	sub	sp, #20
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001faa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fac:	4907      	ldr	r1, [pc, #28]	; (8001fcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001fb4:	4b05      	ldr	r3, [pc, #20]	; (8001fcc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001fb6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	4013      	ands	r3, r2
 8001fbc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fbe:	68fb      	ldr	r3, [r7, #12]
}
 8001fc0:	bf00      	nop
 8001fc2:	3714      	adds	r7, #20
 8001fc4:	46bd      	mov	sp, r7
 8001fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fca:	4770      	bx	lr
 8001fcc:	40021000 	.word	0x40021000

08001fd0 <LL_APB1_GRP1_EnableClock>:
{
 8001fd0:	b480      	push	{r7}
 8001fd2:	b085      	sub	sp, #20
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fda:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fdc:	4907      	ldr	r1, [pc, #28]	; (8001ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001fe4:	4b05      	ldr	r3, [pc, #20]	; (8001ffc <LL_APB1_GRP1_EnableClock+0x2c>)
 8001fe6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	4013      	ands	r3, r2
 8001fec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001fee:	68fb      	ldr	r3, [r7, #12]
}
 8001ff0:	bf00      	nop
 8001ff2:	3714      	adds	r7, #20
 8001ff4:	46bd      	mov	sp, r7
 8001ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ffa:	4770      	bx	lr
 8001ffc:	40021000 	.word	0x40021000

08002000 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002000:	b480      	push	{r7}
 8002002:	b083      	sub	sp, #12
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f023 0210 	bic.w	r2, r3, #16
 8002012:	683b      	ldr	r3, [r7, #0]
 8002014:	431a      	orrs	r2, r3
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	605a      	str	r2, [r3, #4]
}
 800201a:	bf00      	nop
 800201c:	370c      	adds	r7, #12
 800201e:	46bd      	mov	sp, r7
 8002020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002024:	4770      	bx	lr

08002026 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8002026:	b480      	push	{r7}
 8002028:	b083      	sub	sp, #12
 800202a:	af00      	add	r7, sp, #0
 800202c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	f023 0208 	bic.w	r2, r3, #8
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	605a      	str	r2, [r3, #4]
}
 800203a:	bf00      	nop
 800203c:	370c      	adds	r7, #12
 800203e:	46bd      	mov	sp, r7
 8002040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002044:	4770      	bx	lr
	...

08002048 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b090      	sub	sp, #64	; 0x40
 800204c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800204e:	f107 0318 	add.w	r3, r7, #24
 8002052:	2228      	movs	r2, #40	; 0x28
 8002054:	2100      	movs	r1, #0
 8002056:	4618      	mov	r0, r3
 8002058:	f001 ff24 	bl	8003ea4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800205c:	463b      	mov	r3, r7
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
 8002062:	605a      	str	r2, [r3, #4]
 8002064:	609a      	str	r2, [r3, #8]
 8002066:	60da      	str	r2, [r3, #12]
 8002068:	611a      	str	r2, [r3, #16]
 800206a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800206c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002070:	f7ff ffae 	bl	8001fd0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002074:	2004      	movs	r0, #4
 8002076:	f7ff ff93 	bl	8001fa0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800207a:	2002      	movs	r0, #2
 800207c:	f7ff ff90 	bl	8001fa0 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002080:	230c      	movs	r3, #12
 8002082:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002084:	2302      	movs	r3, #2
 8002086:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002088:	2303      	movs	r3, #3
 800208a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800208c:	2300      	movs	r3, #0
 800208e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002090:	2300      	movs	r3, #0
 8002092:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8002094:	2305      	movs	r3, #5
 8002096:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002098:	463b      	mov	r3, r7
 800209a:	4619      	mov	r1, r3
 800209c:	481e      	ldr	r0, [pc, #120]	; (8002118 <MX_SPI2_Init+0xd0>)
 800209e:	f001 f822 	bl	80030e6 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80020a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80020a6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80020a8:	2302      	movs	r3, #2
 80020aa:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80020ac:	2303      	movs	r3, #3
 80020ae:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80020b0:	2300      	movs	r3, #0
 80020b2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80020b4:	2300      	movs	r3, #0
 80020b6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80020b8:	2305      	movs	r3, #5
 80020ba:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020bc:	463b      	mov	r3, r7
 80020be:	4619      	mov	r1, r3
 80020c0:	4816      	ldr	r0, [pc, #88]	; (800211c <MX_SPI2_Init+0xd4>)
 80020c2:	f001 f810 	bl	80030e6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80020ca:	f44f 7382 	mov.w	r3, #260	; 0x104
 80020ce:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80020d0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020d4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80020d6:	2302      	movs	r3, #2
 80020d8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80020da:	2301      	movs	r3, #1
 80020dc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80020de:	f44f 7300 	mov.w	r3, #512	; 0x200
 80020e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80020e4:	2320      	movs	r3, #32
 80020e6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80020e8:	2300      	movs	r3, #0
 80020ea:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80020ec:	2300      	movs	r3, #0
 80020ee:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80020f0:	2307      	movs	r3, #7
 80020f2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80020f4:	f107 0318 	add.w	r3, r7, #24
 80020f8:	4619      	mov	r1, r3
 80020fa:	4809      	ldr	r0, [pc, #36]	; (8002120 <MX_SPI2_Init+0xd8>)
 80020fc:	f001 fc41 	bl	8003982 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002100:	2100      	movs	r1, #0
 8002102:	4807      	ldr	r0, [pc, #28]	; (8002120 <MX_SPI2_Init+0xd8>)
 8002104:	f7ff ff7c 	bl	8002000 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8002108:	4805      	ldr	r0, [pc, #20]	; (8002120 <MX_SPI2_Init+0xd8>)
 800210a:	f7ff ff8c 	bl	8002026 <LL_SPI_DisableNSSPulseMgt>

}
 800210e:	bf00      	nop
 8002110:	3740      	adds	r7, #64	; 0x40
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	48000800 	.word	0x48000800
 800211c:	48000400 	.word	0x48000400
 8002120:	40003800 	.word	0x40003800

08002124 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b090      	sub	sp, #64	; 0x40
 8002128:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800212a:	f107 0318 	add.w	r3, r7, #24
 800212e:	2228      	movs	r2, #40	; 0x28
 8002130:	2100      	movs	r1, #0
 8002132:	4618      	mov	r0, r3
 8002134:	f001 feb6 	bl	8003ea4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002138:	463b      	mov	r3, r7
 800213a:	2200      	movs	r2, #0
 800213c:	601a      	str	r2, [r3, #0]
 800213e:	605a      	str	r2, [r3, #4]
 8002140:	609a      	str	r2, [r3, #8]
 8002142:	60da      	str	r2, [r3, #12]
 8002144:	611a      	str	r2, [r3, #16]
 8002146:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 8002148:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800214c:	f7ff ff40 	bl	8001fd0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002150:	2004      	movs	r0, #4
 8002152:	f7ff ff25 	bl	8001fa0 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 8002156:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800215a:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800215c:	2302      	movs	r3, #2
 800215e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002160:	2303      	movs	r3, #3
 8002162:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002168:	2300      	movs	r3, #0
 800216a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 800216c:	2306      	movs	r3, #6
 800216e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002170:	463b      	mov	r3, r7
 8002172:	4619      	mov	r1, r3
 8002174:	4815      	ldr	r0, [pc, #84]	; (80021cc <MX_SPI3_Init+0xa8>)
 8002176:	f000 ffb6 	bl	80030e6 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800217a:	2300      	movs	r3, #0
 800217c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800217e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002182:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002184:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002188:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800218a:	2302      	movs	r3, #2
 800218c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800218e:	2301      	movs	r3, #1
 8002190:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002192:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002196:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8002198:	2320      	movs	r3, #32
 800219a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800219c:	2300      	movs	r3, #0
 800219e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80021a0:	2300      	movs	r3, #0
 80021a2:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80021a4:	2307      	movs	r3, #7
 80021a6:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80021a8:	f107 0318 	add.w	r3, r7, #24
 80021ac:	4619      	mov	r1, r3
 80021ae:	4808      	ldr	r0, [pc, #32]	; (80021d0 <MX_SPI3_Init+0xac>)
 80021b0:	f001 fbe7 	bl	8003982 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80021b4:	2100      	movs	r1, #0
 80021b6:	4806      	ldr	r0, [pc, #24]	; (80021d0 <MX_SPI3_Init+0xac>)
 80021b8:	f7ff ff22 	bl	8002000 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 80021bc:	4804      	ldr	r0, [pc, #16]	; (80021d0 <MX_SPI3_Init+0xac>)
 80021be:	f7ff ff32 	bl	8002026 <LL_SPI_DisableNSSPulseMgt>

}
 80021c2:	bf00      	nop
 80021c4:	3740      	adds	r7, #64	; 0x40
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}
 80021ca:	bf00      	nop
 80021cc:	48000800 	.word	0x48000800
 80021d0:	40003c00 	.word	0x40003c00

080021d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80021d8:	bf00      	nop
 80021da:	46bd      	mov	sp, r7
 80021dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e0:	4770      	bx	lr

080021e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021e2:	b480      	push	{r7}
 80021e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021e6:	e7fe      	b.n	80021e6 <HardFault_Handler+0x4>

080021e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021ec:	e7fe      	b.n	80021ec <MemManage_Handler+0x4>

080021ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021ee:	b480      	push	{r7}
 80021f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021f2:	e7fe      	b.n	80021f2 <BusFault_Handler+0x4>

080021f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021f8:	e7fe      	b.n	80021f8 <UsageFault_Handler+0x4>

080021fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021fa:	b480      	push	{r7}
 80021fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	46bd      	mov	sp, r7
 8002202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002206:	4770      	bx	lr

08002208 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800220c:	bf00      	nop
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr

08002216 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002216:	b480      	push	{r7}
 8002218:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800221a:	bf00      	nop
 800221c:	46bd      	mov	sp, r7
 800221e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002222:	4770      	bx	lr

08002224 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002228:	bf00      	nop
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr

08002232 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002232:	b580      	push	{r7, lr}
 8002234:	b086      	sub	sp, #24
 8002236:	af00      	add	r7, sp, #0
 8002238:	60f8      	str	r0, [r7, #12]
 800223a:	60b9      	str	r1, [r7, #8]
 800223c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800223e:	2300      	movs	r3, #0
 8002240:	617b      	str	r3, [r7, #20]
 8002242:	e00a      	b.n	800225a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002244:	f000 fade 	bl	8002804 <__io_getchar>
 8002248:	4601      	mov	r1, r0
 800224a:	68bb      	ldr	r3, [r7, #8]
 800224c:	1c5a      	adds	r2, r3, #1
 800224e:	60ba      	str	r2, [r7, #8]
 8002250:	b2ca      	uxtb	r2, r1
 8002252:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	3301      	adds	r3, #1
 8002258:	617b      	str	r3, [r7, #20]
 800225a:	697a      	ldr	r2, [r7, #20]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	429a      	cmp	r2, r3
 8002260:	dbf0      	blt.n	8002244 <_read+0x12>
	}

return len;
 8002262:	687b      	ldr	r3, [r7, #4]
}
 8002264:	4618      	mov	r0, r3
 8002266:	3718      	adds	r7, #24
 8002268:	46bd      	mov	sp, r7
 800226a:	bd80      	pop	{r7, pc}

0800226c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	60f8      	str	r0, [r7, #12]
 8002274:	60b9      	str	r1, [r7, #8]
 8002276:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002278:	2300      	movs	r3, #0
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	e009      	b.n	8002292 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800227e:	68bb      	ldr	r3, [r7, #8]
 8002280:	1c5a      	adds	r2, r3, #1
 8002282:	60ba      	str	r2, [r7, #8]
 8002284:	781b      	ldrb	r3, [r3, #0]
 8002286:	4618      	mov	r0, r3
 8002288:	f000 fa9e 	bl	80027c8 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800228c:	697b      	ldr	r3, [r7, #20]
 800228e:	3301      	adds	r3, #1
 8002290:	617b      	str	r3, [r7, #20]
 8002292:	697a      	ldr	r2, [r7, #20]
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	429a      	cmp	r2, r3
 8002298:	dbf1      	blt.n	800227e <_write+0x12>
	}
	return len;
 800229a:	687b      	ldr	r3, [r7, #4]
}
 800229c:	4618      	mov	r0, r3
 800229e:	3718      	adds	r7, #24
 80022a0:	46bd      	mov	sp, r7
 80022a2:	bd80      	pop	{r7, pc}

080022a4 <_close>:

int _close(int file)
{
 80022a4:	b480      	push	{r7}
 80022a6:	b083      	sub	sp, #12
 80022a8:	af00      	add	r7, sp, #0
 80022aa:	6078      	str	r0, [r7, #4]
	return -1;
 80022ac:	f04f 33ff 	mov.w	r3, #4294967295
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	370c      	adds	r7, #12
 80022b4:	46bd      	mov	sp, r7
 80022b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ba:	4770      	bx	lr

080022bc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
 80022c4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80022c6:	683b      	ldr	r3, [r7, #0]
 80022c8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80022cc:	605a      	str	r2, [r3, #4]
	return 0;
 80022ce:	2300      	movs	r3, #0
}
 80022d0:	4618      	mov	r0, r3
 80022d2:	370c      	adds	r7, #12
 80022d4:	46bd      	mov	sp, r7
 80022d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022da:	4770      	bx	lr

080022dc <_isatty>:

int _isatty(int file)
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	return 1;
 80022e4:	2301      	movs	r3, #1
}
 80022e6:	4618      	mov	r0, r3
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
	return 0;
 80022fe:	2300      	movs	r3, #0
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b086      	sub	sp, #24
 8002310:	af00      	add	r7, sp, #0
 8002312:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002314:	4a14      	ldr	r2, [pc, #80]	; (8002368 <_sbrk+0x5c>)
 8002316:	4b15      	ldr	r3, [pc, #84]	; (800236c <_sbrk+0x60>)
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800231c:	697b      	ldr	r3, [r7, #20]
 800231e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002320:	4b13      	ldr	r3, [pc, #76]	; (8002370 <_sbrk+0x64>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d102      	bne.n	800232e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002328:	4b11      	ldr	r3, [pc, #68]	; (8002370 <_sbrk+0x64>)
 800232a:	4a12      	ldr	r2, [pc, #72]	; (8002374 <_sbrk+0x68>)
 800232c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800232e:	4b10      	ldr	r3, [pc, #64]	; (8002370 <_sbrk+0x64>)
 8002330:	681a      	ldr	r2, [r3, #0]
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	4413      	add	r3, r2
 8002336:	693a      	ldr	r2, [r7, #16]
 8002338:	429a      	cmp	r2, r3
 800233a:	d207      	bcs.n	800234c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800233c:	f001 fd88 	bl	8003e50 <__errno>
 8002340:	4602      	mov	r2, r0
 8002342:	230c      	movs	r3, #12
 8002344:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8002346:	f04f 33ff 	mov.w	r3, #4294967295
 800234a:	e009      	b.n	8002360 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800234c:	4b08      	ldr	r3, [pc, #32]	; (8002370 <_sbrk+0x64>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002352:	4b07      	ldr	r3, [pc, #28]	; (8002370 <_sbrk+0x64>)
 8002354:	681a      	ldr	r2, [r3, #0]
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	4413      	add	r3, r2
 800235a:	4a05      	ldr	r2, [pc, #20]	; (8002370 <_sbrk+0x64>)
 800235c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800235e:	68fb      	ldr	r3, [r7, #12]
}
 8002360:	4618      	mov	r0, r3
 8002362:	3718      	adds	r7, #24
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}
 8002368:	20018000 	.word	0x20018000
 800236c:	00000400 	.word	0x00000400
 8002370:	20000658 	.word	0x20000658
 8002374:	20000678 	.word	0x20000678

08002378 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800237c:	4b17      	ldr	r3, [pc, #92]	; (80023dc <SystemInit+0x64>)
 800237e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002382:	4a16      	ldr	r2, [pc, #88]	; (80023dc <SystemInit+0x64>)
 8002384:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002388:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800238c:	4b14      	ldr	r3, [pc, #80]	; (80023e0 <SystemInit+0x68>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	4a13      	ldr	r2, [pc, #76]	; (80023e0 <SystemInit+0x68>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <SystemInit+0x68>)
 800239a:	2200      	movs	r2, #0
 800239c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800239e:	4b10      	ldr	r3, [pc, #64]	; (80023e0 <SystemInit+0x68>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	4a0f      	ldr	r2, [pc, #60]	; (80023e0 <SystemInit+0x68>)
 80023a4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80023a8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80023ac:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80023ae:	4b0c      	ldr	r3, [pc, #48]	; (80023e0 <SystemInit+0x68>)
 80023b0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80023b4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <SystemInit+0x68>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4a09      	ldr	r2, [pc, #36]	; (80023e0 <SystemInit+0x68>)
 80023bc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80023c0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80023c2:	4b07      	ldr	r3, [pc, #28]	; (80023e0 <SystemInit+0x68>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80023c8:	4b04      	ldr	r3, [pc, #16]	; (80023dc <SystemInit+0x64>)
 80023ca:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80023ce:	609a      	str	r2, [r3, #8]
#endif
}
 80023d0:	bf00      	nop
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr
 80023da:	bf00      	nop
 80023dc:	e000ed00 	.word	0xe000ed00
 80023e0:	40021000 	.word	0x40021000

080023e4 <LL_APB2_GRP1_EnableClock>:
{
 80023e4:	b480      	push	{r7}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80023ec:	4b08      	ldr	r3, [pc, #32]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023ee:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023f0:	4907      	ldr	r1, [pc, #28]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	4313      	orrs	r3, r2
 80023f6:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <LL_APB2_GRP1_EnableClock+0x2c>)
 80023fa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	4013      	ands	r3, r2
 8002400:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002402:	68fb      	ldr	r3, [r7, #12]
}
 8002404:	bf00      	nop
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr
 8002410:	40021000 	.word	0x40021000

08002414 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002414:	b480      	push	{r7}
 8002416:	b083      	sub	sp, #12
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	601a      	str	r2, [r3, #0]
}
 8002428:	bf00      	nop
 800242a:	370c      	adds	r7, #12
 800242c:	46bd      	mov	sp, r7
 800242e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002432:	4770      	bx	lr

08002434 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8002434:	b480      	push	{r7}
 8002436:	b083      	sub	sp, #12
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	689b      	ldr	r3, [r3, #8]
 8002442:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8002446:	f023 0307 	bic.w	r3, r3, #7
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	431a      	orrs	r2, r3
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	609a      	str	r2, [r3, #8]
}
 8002452:	bf00      	nop
 8002454:	370c      	adds	r7, #12
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr

0800245e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800245e:	b480      	push	{r7}
 8002460:	b083      	sub	sp, #12
 8002462:	af00      	add	r7, sp, #0
 8002464:	6078      	str	r0, [r7, #4]
 8002466:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	431a      	orrs	r2, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	605a      	str	r2, [r3, #4]
}
 8002478:	bf00      	nop
 800247a:	370c      	adds	r7, #12
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8002484:	b480      	push	{r7}
 8002486:	b083      	sub	sp, #12
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	685b      	ldr	r3, [r3, #4]
 8002492:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8002496:	683b      	ldr	r3, [r7, #0]
 8002498:	431a      	orrs	r2, r3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	605a      	str	r2, [r3, #4]
}
 800249e:	bf00      	nop
 80024a0:	370c      	adds	r7, #12
 80024a2:	46bd      	mov	sp, r7
 80024a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a8:	4770      	bx	lr

080024aa <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80024aa:	b480      	push	{r7}
 80024ac:	b083      	sub	sp, #12
 80024ae:	af00      	add	r7, sp, #0
 80024b0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	609a      	str	r2, [r3, #8]
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
	...

080024cc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80024d2:	1d3b      	adds	r3, r7, #4
 80024d4:	2200      	movs	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
 80024d8:	605a      	str	r2, [r3, #4]
 80024da:	609a      	str	r2, [r3, #8]
 80024dc:	60da      	str	r2, [r3, #12]
 80024de:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80024e0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80024e4:	f7ff ff7e 	bl	80023e4 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 80024e8:	230f      	movs	r3, #15
 80024ea:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80024ec:	2300      	movs	r3, #0
 80024ee:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 80024f0:	f44f 73c8 	mov.w	r3, #400	; 0x190
 80024f4:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80024f6:	2300      	movs	r3, #0
 80024f8:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80024fa:	2300      	movs	r3, #0
 80024fc:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	4619      	mov	r1, r3
 8002502:	480c      	ldr	r0, [pc, #48]	; (8002534 <MX_TIM1_Init+0x68>)
 8002504:	f001 fac6 	bl	8003a94 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002508:	480a      	ldr	r0, [pc, #40]	; (8002534 <MX_TIM1_Init+0x68>)
 800250a:	f7ff ff83 	bl	8002414 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800250e:	2100      	movs	r1, #0
 8002510:	4808      	ldr	r0, [pc, #32]	; (8002534 <MX_TIM1_Init+0x68>)
 8002512:	f7ff ff8f 	bl	8002434 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002516:	2100      	movs	r1, #0
 8002518:	4806      	ldr	r0, [pc, #24]	; (8002534 <MX_TIM1_Init+0x68>)
 800251a:	f7ff ffa0 	bl	800245e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800251e:	2100      	movs	r1, #0
 8002520:	4804      	ldr	r0, [pc, #16]	; (8002534 <MX_TIM1_Init+0x68>)
 8002522:	f7ff ffaf 	bl	8002484 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002526:	4803      	ldr	r0, [pc, #12]	; (8002534 <MX_TIM1_Init+0x68>)
 8002528:	f7ff ffbf 	bl	80024aa <LL_TIM_DisableMasterSlaveMode>

}
 800252c:	bf00      	nop
 800252e:	3718      	adds	r7, #24
 8002530:	46bd      	mov	sp, r7
 8002532:	bd80      	pop	{r7, pc}
 8002534:	40012c00 	.word	0x40012c00

08002538 <__NVIC_GetPriorityGrouping>:
{
 8002538:	b480      	push	{r7}
 800253a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800253c:	4b04      	ldr	r3, [pc, #16]	; (8002550 <__NVIC_GetPriorityGrouping+0x18>)
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	0a1b      	lsrs	r3, r3, #8
 8002542:	f003 0307 	and.w	r3, r3, #7
}
 8002546:	4618      	mov	r0, r3
 8002548:	46bd      	mov	sp, r7
 800254a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254e:	4770      	bx	lr
 8002550:	e000ed00 	.word	0xe000ed00

08002554 <__NVIC_EnableIRQ>:
{
 8002554:	b480      	push	{r7}
 8002556:	b083      	sub	sp, #12
 8002558:	af00      	add	r7, sp, #0
 800255a:	4603      	mov	r3, r0
 800255c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800255e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002562:	2b00      	cmp	r3, #0
 8002564:	db0b      	blt.n	800257e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	f003 021f 	and.w	r2, r3, #31
 800256c:	4907      	ldr	r1, [pc, #28]	; (800258c <__NVIC_EnableIRQ+0x38>)
 800256e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002572:	095b      	lsrs	r3, r3, #5
 8002574:	2001      	movs	r0, #1
 8002576:	fa00 f202 	lsl.w	r2, r0, r2
 800257a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
 800258a:	bf00      	nop
 800258c:	e000e100 	.word	0xe000e100

08002590 <__NVIC_SetPriority>:
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	4603      	mov	r3, r0
 8002598:	6039      	str	r1, [r7, #0]
 800259a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800259c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	db0a      	blt.n	80025ba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025a4:	683b      	ldr	r3, [r7, #0]
 80025a6:	b2da      	uxtb	r2, r3
 80025a8:	490c      	ldr	r1, [pc, #48]	; (80025dc <__NVIC_SetPriority+0x4c>)
 80025aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ae:	0112      	lsls	r2, r2, #4
 80025b0:	b2d2      	uxtb	r2, r2
 80025b2:	440b      	add	r3, r1
 80025b4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80025b8:	e00a      	b.n	80025d0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ba:	683b      	ldr	r3, [r7, #0]
 80025bc:	b2da      	uxtb	r2, r3
 80025be:	4908      	ldr	r1, [pc, #32]	; (80025e0 <__NVIC_SetPriority+0x50>)
 80025c0:	79fb      	ldrb	r3, [r7, #7]
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	3b04      	subs	r3, #4
 80025c8:	0112      	lsls	r2, r2, #4
 80025ca:	b2d2      	uxtb	r2, r2
 80025cc:	440b      	add	r3, r1
 80025ce:	761a      	strb	r2, [r3, #24]
}
 80025d0:	bf00      	nop
 80025d2:	370c      	adds	r7, #12
 80025d4:	46bd      	mov	sp, r7
 80025d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025da:	4770      	bx	lr
 80025dc:	e000e100 	.word	0xe000e100
 80025e0:	e000ed00 	.word	0xe000ed00

080025e4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80025e4:	b480      	push	{r7}
 80025e6:	b089      	sub	sp, #36	; 0x24
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	f003 0307 	and.w	r3, r3, #7
 80025f6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80025f8:	69fb      	ldr	r3, [r7, #28]
 80025fa:	f1c3 0307 	rsb	r3, r3, #7
 80025fe:	2b04      	cmp	r3, #4
 8002600:	bf28      	it	cs
 8002602:	2304      	movcs	r3, #4
 8002604:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002606:	69fb      	ldr	r3, [r7, #28]
 8002608:	3304      	adds	r3, #4
 800260a:	2b06      	cmp	r3, #6
 800260c:	d902      	bls.n	8002614 <NVIC_EncodePriority+0x30>
 800260e:	69fb      	ldr	r3, [r7, #28]
 8002610:	3b03      	subs	r3, #3
 8002612:	e000      	b.n	8002616 <NVIC_EncodePriority+0x32>
 8002614:	2300      	movs	r3, #0
 8002616:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002618:	f04f 32ff 	mov.w	r2, #4294967295
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43da      	mvns	r2, r3
 8002624:	68bb      	ldr	r3, [r7, #8]
 8002626:	401a      	ands	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800262c:	f04f 31ff 	mov.w	r1, #4294967295
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	fa01 f303 	lsl.w	r3, r1, r3
 8002636:	43d9      	mvns	r1, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800263c:	4313      	orrs	r3, r2
         );
}
 800263e:	4618      	mov	r0, r3
 8002640:	3724      	adds	r7, #36	; 0x24
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
	...

0800264c <LL_AHB1_GRP1_EnableClock>:
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002654:	4b08      	ldr	r3, [pc, #32]	; (8002678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002656:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002658:	4907      	ldr	r1, [pc, #28]	; (8002678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4313      	orrs	r3, r2
 800265e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002660:	4b05      	ldr	r3, [pc, #20]	; (8002678 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002662:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4013      	ands	r3, r2
 8002668:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800266a:	68fb      	ldr	r3, [r7, #12]
}
 800266c:	bf00      	nop
 800266e:	3714      	adds	r7, #20
 8002670:	46bd      	mov	sp, r7
 8002672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002676:	4770      	bx	lr
 8002678:	40021000 	.word	0x40021000

0800267c <LL_AHB2_GRP1_EnableClock>:
{
 800267c:	b480      	push	{r7}
 800267e:	b085      	sub	sp, #20
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002684:	4b08      	ldr	r3, [pc, #32]	; (80026a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002686:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002688:	4907      	ldr	r1, [pc, #28]	; (80026a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	4313      	orrs	r3, r2
 800268e:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002690:	4b05      	ldr	r3, [pc, #20]	; (80026a8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002692:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	4013      	ands	r3, r2
 8002698:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800269a:	68fb      	ldr	r3, [r7, #12]
}
 800269c:	bf00      	nop
 800269e:	3714      	adds	r7, #20
 80026a0:	46bd      	mov	sp, r7
 80026a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a6:	4770      	bx	lr
 80026a8:	40021000 	.word	0x40021000

080026ac <LL_APB1_GRP1_EnableClock>:
{
 80026ac:	b480      	push	{r7}
 80026ae:	b085      	sub	sp, #20
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80026b4:	4b08      	ldr	r3, [pc, #32]	; (80026d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80026b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026b8:	4907      	ldr	r1, [pc, #28]	; (80026d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	4313      	orrs	r3, r2
 80026be:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <LL_APB1_GRP1_EnableClock+0x2c>)
 80026c2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	4013      	ands	r3, r2
 80026c8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80026ca:	68fb      	ldr	r3, [r7, #12]
}
 80026cc:	bf00      	nop
 80026ce:	3714      	adds	r7, #20
 80026d0:	46bd      	mov	sp, r7
 80026d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d6:	4770      	bx	lr
 80026d8:	40021000 	.word	0x40021000

080026dc <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80026dc:	b480      	push	{r7}
 80026de:	b083      	sub	sp, #12
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	f043 0201 	orr.w	r2, r3, #1
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	601a      	str	r2, [r3, #0]
}
 80026f0:	bf00      	nop
 80026f2:	370c      	adds	r7, #12
 80026f4:	46bd      	mov	sp, r7
 80026f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fa:	4770      	bx	lr

080026fc <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80026fc:	b480      	push	{r7}
 80026fe:	b083      	sub	sp, #12
 8002700:	af00      	add	r7, sp, #0
 8002702:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	609a      	str	r2, [r3, #8]
}
 800271c:	bf00      	nop
 800271e:	370c      	adds	r7, #12
 8002720:	46bd      	mov	sp, r7
 8002722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002726:	4770      	bx	lr

08002728 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800272e:	f107 031c 	add.w	r3, r7, #28
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
 800273c:	611a      	str	r2, [r3, #16]
 800273e:	615a      	str	r2, [r3, #20]
 8002740:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002742:	1d3b      	adds	r3, r7, #4
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002752:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002756:	f7ff ffa9 	bl	80026ac <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800275a:	2001      	movs	r0, #1
 800275c:	f7ff ff8e 	bl	800267c <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002760:	230c      	movs	r3, #12
 8002762:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002764:	2302      	movs	r3, #2
 8002766:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002768:	2303      	movs	r3, #3
 800276a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800276c:	2300      	movs	r3, #0
 800276e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002770:	2300      	movs	r3, #0
 8002772:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002774:	2307      	movs	r3, #7
 8002776:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002778:	1d3b      	adds	r3, r7, #4
 800277a:	4619      	mov	r1, r3
 800277c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002780:	f000 fcb1 	bl	80030e6 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 8002784:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8002788:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800278a:	2300      	movs	r3, #0
 800278c:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 800278e:	2300      	movs	r3, #0
 8002790:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002792:	2300      	movs	r3, #0
 8002794:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002796:	230c      	movs	r3, #12
 8002798:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800279a:	2300      	movs	r3, #0
 800279c:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 800279e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80027a4:	f107 031c 	add.w	r3, r7, #28
 80027a8:	4619      	mov	r1, r3
 80027aa:	4806      	ldr	r0, [pc, #24]	; (80027c4 <MX_USART2_UART_Init+0x9c>)
 80027ac:	f001 fa76 	bl	8003c9c <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80027b0:	4804      	ldr	r0, [pc, #16]	; (80027c4 <MX_USART2_UART_Init+0x9c>)
 80027b2:	f7ff ffa3 	bl	80026fc <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80027b6:	4803      	ldr	r0, [pc, #12]	; (80027c4 <MX_USART2_UART_Init+0x9c>)
 80027b8:	f7ff ff90 	bl	80026dc <LL_USART_Enable>

}
 80027bc:	bf00      	nop
 80027be:	3738      	adds	r7, #56	; 0x38
 80027c0:	46bd      	mov	sp, r7
 80027c2:	bd80      	pop	{r7, pc}
 80027c4:	40004400 	.word	0x40004400

080027c8 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 80027c8:	b480      	push	{r7}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 80027d0:	bf00      	nop
 80027d2:	4b0b      	ldr	r3, [pc, #44]	; (8002800 <__io_putchar+0x38>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d0f9      	beq.n	80027d2 <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 80027de:	4b08      	ldr	r3, [pc, #32]	; (8002800 <__io_putchar+0x38>)
 80027e0:	687a      	ldr	r2, [r7, #4]
 80027e2:	b292      	uxth	r2, r2
 80027e4:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 80027e6:	bf00      	nop
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <__io_putchar+0x38>)
 80027ea:	69db      	ldr	r3, [r3, #28]
 80027ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d0f9      	beq.n	80027e8 <__io_putchar+0x20>
#endif
}
 80027f4:	bf00      	nop
 80027f6:	370c      	adds	r7, #12
 80027f8:	46bd      	mov	sp, r7
 80027fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fe:	4770      	bx	lr
 8002800:	40004400 	.word	0x40004400

08002804 <__io_getchar>:

void __io_getchar(void){
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
	...

08002814 <startupPrint>:

void startupPrint(void){
 8002814:	b580      	push	{r7, lr}
 8002816:	af00      	add	r7, sp, #0
	printf("\r\n");
 8002818:	480b      	ldr	r0, [pc, #44]	; (8002848 <startupPrint+0x34>)
 800281a:	f001 fbbf 	bl	8003f9c <puts>
	printf("+==============================================================+\r\n");
 800281e:	480b      	ldr	r0, [pc, #44]	; (800284c <startupPrint+0x38>)
 8002820:	f001 fbbc 	bl	8003f9c <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8002824:	490a      	ldr	r1, [pc, #40]	; (8002850 <startupPrint+0x3c>)
 8002826:	480b      	ldr	r0, [pc, #44]	; (8002854 <startupPrint+0x40>)
 8002828:	f001 fb44 	bl	8003eb4 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 800282c:	480a      	ldr	r0, [pc, #40]	; (8002858 <startupPrint+0x44>)
 800282e:	f001 fbb5 	bl	8003f9c <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8002832:	4b0a      	ldr	r3, [pc, #40]	; (800285c <startupPrint+0x48>)
 8002834:	4a0a      	ldr	r2, [pc, #40]	; (8002860 <startupPrint+0x4c>)
 8002836:	490b      	ldr	r1, [pc, #44]	; (8002864 <startupPrint+0x50>)
 8002838:	480b      	ldr	r0, [pc, #44]	; (8002868 <startupPrint+0x54>)
 800283a:	f001 fb3b 	bl	8003eb4 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 800283e:	480b      	ldr	r0, [pc, #44]	; (800286c <startupPrint+0x58>)
 8002840:	f001 fbac 	bl	8003f9c <puts>
}
 8002844:	bf00      	nop
 8002846:	bd80      	pop	{r7, pc}
 8002848:	08004fd4 	.word	0x08004fd4
 800284c:	08004fd8 	.word	0x08004fd8
 8002850:	0800501c 	.word	0x0800501c
 8002854:	08005044 	.word	0x08005044
 8002858:	08005050 	.word	0x08005050
 800285c:	08005094 	.word	0x08005094
 8002860:	08005098 	.word	0x08005098
 8002864:	080050a4 	.word	0x080050a4
 8002868:	080050b8 	.word	0x080050b8
 800286c:	080050e4 	.word	0x080050e4

08002870 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8002870:	b580      	push	{r7, lr}
 8002872:	b086      	sub	sp, #24
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	460b      	mov	r3, r1
 800287a:	70fb      	strb	r3, [r7, #3]
 800287c:	4613      	mov	r3, r2
 800287e:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8002884:	2300      	movs	r3, #0
 8002886:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8002888:	78fb      	ldrb	r3, [r7, #3]
 800288a:	029b      	lsls	r3, r3, #10
 800288c:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 800288e:	78fb      	ldrb	r3, [r7, #3]
 8002890:	021b      	lsls	r3, r3, #8
 8002892:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a1d      	ldr	r2, [pc, #116]	; (800290c <configureDMA_USART_TX+0x9c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d132      	bne.n	8002902 <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 800289c:	2001      	movs	r0, #1
 800289e:	f7ff fed5 	bl	800264c <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 80028ae:	4b18      	ldr	r3, [pc, #96]	; (8002910 <configureDMA_USART_TX+0xa0>)
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	4a17      	ldr	r2, [pc, #92]	; (8002910 <configureDMA_USART_TX+0xa0>)
 80028b4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80028b8:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 80028ba:	4b16      	ldr	r3, [pc, #88]	; (8002914 <configureDMA_USART_TX+0xa4>)
 80028bc:	685b      	ldr	r3, [r3, #4]
 80028be:	4a15      	ldr	r2, [pc, #84]	; (8002914 <configureDMA_USART_TX+0xa4>)
 80028c0:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 80028c4:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 80028c6:	4b14      	ldr	r3, [pc, #80]	; (8002918 <configureDMA_USART_TX+0xa8>)
 80028c8:	4a14      	ldr	r2, [pc, #80]	; (800291c <configureDMA_USART_TX+0xac>)
 80028ca:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 80028cc:	78ba      	ldrb	r2, [r7, #2]
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	431a      	orrs	r2, r3
 80028d2:	693b      	ldr	r3, [r7, #16]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 80028da:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <configureDMA_USART_TX+0xa8>)
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 80028e2:	f7ff fe29 	bl	8002538 <__NVIC_GetPriorityGrouping>
 80028e6:	4603      	mov	r3, r0
 80028e8:	2200      	movs	r2, #0
 80028ea:	2100      	movs	r1, #0
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7ff fe79 	bl	80025e4 <NVIC_EncodePriority>
 80028f2:	4603      	mov	r3, r0
 80028f4:	4619      	mov	r1, r3
 80028f6:	2011      	movs	r0, #17
 80028f8:	f7ff fe4a 	bl	8002590 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 80028fc:	2011      	movs	r0, #17
 80028fe:	f7ff fe29 	bl	8002554 <__NVIC_EnableIRQ>
	}
}
 8002902:	bf00      	nop
 8002904:	3718      	adds	r7, #24
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}
 800290a:	bf00      	nop
 800290c:	40004400 	.word	0x40004400
 8002910:	400200a8 	.word	0x400200a8
 8002914:	40020000 	.word	0x40020000
 8002918:	40020080 	.word	0x40020080
 800291c:	40004428 	.word	0x40004428

08002920 <configure_IRQ_USART_RX>:

void configure_IRQ_USART_RX(){
 8002920:	b580      	push	{r7, lr}
 8002922:	af00      	add	r7, sp, #0
	// Set RXNEIE to enable the RX interrupt
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8002924:	4b0b      	ldr	r3, [pc, #44]	; (8002954 <configure_IRQ_USART_RX+0x34>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <configure_IRQ_USART_RX+0x34>)
 800292a:	f043 0320 	orr.w	r3, r3, #32
 800292e:	6013      	str	r3, [r2, #0]

	// Enable global interrupt for UART2
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002930:	f7ff fe02 	bl	8002538 <__NVIC_GetPriorityGrouping>
 8002934:	4603      	mov	r3, r0
 8002936:	2200      	movs	r2, #0
 8002938:	2101      	movs	r1, #1
 800293a:	4618      	mov	r0, r3
 800293c:	f7ff fe52 	bl	80025e4 <NVIC_EncodePriority>
 8002940:	4603      	mov	r3, r0
 8002942:	4619      	mov	r1, r3
 8002944:	2026      	movs	r0, #38	; 0x26
 8002946:	f7ff fe23 	bl	8002590 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 800294a:	2026      	movs	r0, #38	; 0x26
 800294c:	f7ff fe02 	bl	8002554 <__NVIC_EnableIRQ>
}
 8002950:	bf00      	nop
 8002952:	bd80      	pop	{r7, pc}
 8002954:	40004400 	.word	0x40004400

08002958 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8002958:	b480      	push	{r7}
 800295a:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 800295c:	4b17      	ldr	r3, [pc, #92]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d006      	beq.n	8002976 <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8002968:	4b14      	ldr	r3, [pc, #80]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	4a13      	ldr	r2, [pc, #76]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 800296e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002972:	6053      	str	r3, [r2, #4]
		while(1);
 8002974:	e7fe      	b.n	8002974 <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8002976:	4b11      	ldr	r3, [pc, #68]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800297e:	2b00      	cmp	r3, #0
 8002980:	d00b      	beq.n	800299a <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8002982:	4b0e      	ldr	r3, [pc, #56]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	4a0d      	ldr	r2, [pc, #52]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 8002988:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800298c:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 800298e:	4b0c      	ldr	r3, [pc, #48]	; (80029c0 <DMA1_Channel7_IRQHandler+0x68>)
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a0b      	ldr	r2, [pc, #44]	; (80029c0 <DMA1_Channel7_IRQHandler+0x68>)
 8002994:	f023 0301 	bic.w	r3, r3, #1
 8002998:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 800299a:	4b08      	ldr	r3, [pc, #32]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d005      	beq.n	80029b2 <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 80029a6:	4b05      	ldr	r3, [pc, #20]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	4a04      	ldr	r2, [pc, #16]	; (80029bc <DMA1_Channel7_IRQHandler+0x64>)
 80029ac:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80029b0:	6053      	str	r3, [r2, #4]
	}
}
 80029b2:	bf00      	nop
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40020000 	.word	0x40020000
 80029c0:	40020080 	.word	0x40020080

080029c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80029c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80029fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80029c8:	f7ff fcd6 	bl	8002378 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80029cc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80029ce:	e003      	b.n	80029d8 <LoopCopyDataInit>

080029d0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80029d0:	4b0b      	ldr	r3, [pc, #44]	; (8002a00 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80029d2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80029d4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80029d6:	3104      	adds	r1, #4

080029d8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80029d8:	480a      	ldr	r0, [pc, #40]	; (8002a04 <LoopForever+0xa>)
	ldr	r3, =_edata
 80029da:	4b0b      	ldr	r3, [pc, #44]	; (8002a08 <LoopForever+0xe>)
	adds	r2, r0, r1
 80029dc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80029de:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80029e0:	d3f6      	bcc.n	80029d0 <CopyDataInit>
	ldr	r2, =_sbss
 80029e2:	4a0a      	ldr	r2, [pc, #40]	; (8002a0c <LoopForever+0x12>)
	b	LoopFillZerobss
 80029e4:	e002      	b.n	80029ec <LoopFillZerobss>

080029e6 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80029e6:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80029e8:	f842 3b04 	str.w	r3, [r2], #4

080029ec <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80029ec:	4b08      	ldr	r3, [pc, #32]	; (8002a10 <LoopForever+0x16>)
	cmp	r2, r3
 80029ee:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80029f0:	d3f9      	bcc.n	80029e6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80029f2:	f001 fa33 	bl	8003e5c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80029f6:	f7fe fff5 	bl	80019e4 <main>

080029fa <LoopForever>:

LoopForever:
    b LoopForever
 80029fa:	e7fe      	b.n	80029fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80029fc:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002a00:	08005d5c 	.word	0x08005d5c
	ldr	r0, =_sdata
 8002a04:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002a08:	200005bc 	.word	0x200005bc
	ldr	r2, =_sbss
 8002a0c:	200005c0 	.word	0x200005c0
	ldr	r3, = _ebss
 8002a10:	20000678 	.word	0x20000678

08002a14 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002a14:	e7fe      	b.n	8002a14 <ADC1_2_IRQHandler>
	...

08002a18 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002a20:	4b05      	ldr	r3, [pc, #20]	; (8002a38 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4904      	ldr	r1, [pc, #16]	; (8002a38 <LL_EXTI_EnableIT_0_31+0x20>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4313      	orrs	r3, r2
 8002a2a:	600b      	str	r3, [r1, #0]
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	40010400 	.word	0x40010400

08002a3c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002a44:	4b05      	ldr	r3, [pc, #20]	; (8002a5c <LL_EXTI_EnableIT_32_63+0x20>)
 8002a46:	6a1a      	ldr	r2, [r3, #32]
 8002a48:	4904      	ldr	r1, [pc, #16]	; (8002a5c <LL_EXTI_EnableIT_32_63+0x20>)
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4313      	orrs	r3, r2
 8002a4e:	620b      	str	r3, [r1, #32]
}
 8002a50:	bf00      	nop
 8002a52:	370c      	adds	r7, #12
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr
 8002a5c:	40010400 	.word	0x40010400

08002a60 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002a60:	b480      	push	{r7}
 8002a62:	b083      	sub	sp, #12
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002a68:	4b06      	ldr	r3, [pc, #24]	; (8002a84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a6a:	681a      	ldr	r2, [r3, #0]
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	43db      	mvns	r3, r3
 8002a70:	4904      	ldr	r1, [pc, #16]	; (8002a84 <LL_EXTI_DisableIT_0_31+0x24>)
 8002a72:	4013      	ands	r3, r2
 8002a74:	600b      	str	r3, [r1, #0]
}
 8002a76:	bf00      	nop
 8002a78:	370c      	adds	r7, #12
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a80:	4770      	bx	lr
 8002a82:	bf00      	nop
 8002a84:	40010400 	.word	0x40010400

08002a88 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b083      	sub	sp, #12
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002a90:	4b06      	ldr	r3, [pc, #24]	; (8002aac <LL_EXTI_DisableIT_32_63+0x24>)
 8002a92:	6a1a      	ldr	r2, [r3, #32]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	43db      	mvns	r3, r3
 8002a98:	4904      	ldr	r1, [pc, #16]	; (8002aac <LL_EXTI_DisableIT_32_63+0x24>)
 8002a9a:	4013      	ands	r3, r2
 8002a9c:	620b      	str	r3, [r1, #32]
}
 8002a9e:	bf00      	nop
 8002aa0:	370c      	adds	r7, #12
 8002aa2:	46bd      	mov	sp, r7
 8002aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa8:	4770      	bx	lr
 8002aaa:	bf00      	nop
 8002aac:	40010400 	.word	0x40010400

08002ab0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002ab0:	b480      	push	{r7}
 8002ab2:	b083      	sub	sp, #12
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002ab8:	4b05      	ldr	r3, [pc, #20]	; (8002ad0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002aba:	685a      	ldr	r2, [r3, #4]
 8002abc:	4904      	ldr	r1, [pc, #16]	; (8002ad0 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	4313      	orrs	r3, r2
 8002ac2:	604b      	str	r3, [r1, #4]

}
 8002ac4:	bf00      	nop
 8002ac6:	370c      	adds	r7, #12
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ace:	4770      	bx	lr
 8002ad0:	40010400 	.word	0x40010400

08002ad4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002adc:	4b05      	ldr	r3, [pc, #20]	; (8002af4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002ade:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002ae0:	4904      	ldr	r1, [pc, #16]	; (8002af4 <LL_EXTI_EnableEvent_32_63+0x20>)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002ae8:	bf00      	nop
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr
 8002af4:	40010400 	.word	0x40010400

08002af8 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002b00:	4b06      	ldr	r3, [pc, #24]	; (8002b1c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b02:	685a      	ldr	r2, [r3, #4]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	43db      	mvns	r3, r3
 8002b08:	4904      	ldr	r1, [pc, #16]	; (8002b1c <LL_EXTI_DisableEvent_0_31+0x24>)
 8002b0a:	4013      	ands	r3, r2
 8002b0c:	604b      	str	r3, [r1, #4]
}
 8002b0e:	bf00      	nop
 8002b10:	370c      	adds	r7, #12
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr
 8002b1a:	bf00      	nop
 8002b1c:	40010400 	.word	0x40010400

08002b20 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002b28:	4b06      	ldr	r3, [pc, #24]	; (8002b44 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b2a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	4904      	ldr	r1, [pc, #16]	; (8002b44 <LL_EXTI_DisableEvent_32_63+0x24>)
 8002b32:	4013      	ands	r3, r2
 8002b34:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002b36:	bf00      	nop
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr
 8002b42:	bf00      	nop
 8002b44:	40010400 	.word	0x40010400

08002b48 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002b50:	4b05      	ldr	r3, [pc, #20]	; (8002b68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b52:	689a      	ldr	r2, [r3, #8]
 8002b54:	4904      	ldr	r1, [pc, #16]	; (8002b68 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	608b      	str	r3, [r1, #8]

}
 8002b5c:	bf00      	nop
 8002b5e:	370c      	adds	r7, #12
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr
 8002b68:	40010400 	.word	0x40010400

08002b6c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b083      	sub	sp, #12
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8002b74:	4b05      	ldr	r3, [pc, #20]	; (8002b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b78:	4904      	ldr	r1, [pc, #16]	; (8002b8c <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	4313      	orrs	r3, r2
 8002b7e:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002b80:	bf00      	nop
 8002b82:	370c      	adds	r7, #12
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr
 8002b8c:	40010400 	.word	0x40010400

08002b90 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8002b98:	4b06      	ldr	r3, [pc, #24]	; (8002bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002b9a:	689a      	ldr	r2, [r3, #8]
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	43db      	mvns	r3, r3
 8002ba0:	4904      	ldr	r1, [pc, #16]	; (8002bb4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8002ba2:	4013      	ands	r3, r2
 8002ba4:	608b      	str	r3, [r1, #8]

}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	40010400 	.word	0x40010400

08002bb8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b083      	sub	sp, #12
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8002bc0:	4b06      	ldr	r3, [pc, #24]	; (8002bdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002bc2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	4904      	ldr	r1, [pc, #16]	; (8002bdc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8002bca:	4013      	ands	r3, r2
 8002bcc:	628b      	str	r3, [r1, #40]	; 0x28
}
 8002bce:	bf00      	nop
 8002bd0:	370c      	adds	r7, #12
 8002bd2:	46bd      	mov	sp, r7
 8002bd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd8:	4770      	bx	lr
 8002bda:	bf00      	nop
 8002bdc:	40010400 	.word	0x40010400

08002be0 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8002be8:	4b05      	ldr	r3, [pc, #20]	; (8002c00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002bea:	68da      	ldr	r2, [r3, #12]
 8002bec:	4904      	ldr	r1, [pc, #16]	; (8002c00 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	4313      	orrs	r3, r2
 8002bf2:	60cb      	str	r3, [r1, #12]
}
 8002bf4:	bf00      	nop
 8002bf6:	370c      	adds	r7, #12
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40010400 	.word	0x40010400

08002c04 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002c04:	b480      	push	{r7}
 8002c06:	b083      	sub	sp, #12
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8002c0c:	4b05      	ldr	r3, [pc, #20]	; (8002c24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c10:	4904      	ldr	r1, [pc, #16]	; (8002c24 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	4313      	orrs	r3, r2
 8002c16:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c18:	bf00      	nop
 8002c1a:	370c      	adds	r7, #12
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	40010400 	.word	0x40010400

08002c28 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8002c30:	4b06      	ldr	r3, [pc, #24]	; (8002c4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c32:	68da      	ldr	r2, [r3, #12]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	43db      	mvns	r3, r3
 8002c38:	4904      	ldr	r1, [pc, #16]	; (8002c4c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	60cb      	str	r3, [r1, #12]
}
 8002c3e:	bf00      	nop
 8002c40:	370c      	adds	r7, #12
 8002c42:	46bd      	mov	sp, r7
 8002c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c48:	4770      	bx	lr
 8002c4a:	bf00      	nop
 8002c4c:	40010400 	.word	0x40010400

08002c50 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b083      	sub	sp, #12
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8002c58:	4b06      	ldr	r3, [pc, #24]	; (8002c74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	43db      	mvns	r3, r3
 8002c60:	4904      	ldr	r1, [pc, #16]	; (8002c74 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8002c62:	4013      	ands	r3, r2
 8002c64:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8002c66:	bf00      	nop
 8002c68:	370c      	adds	r7, #12
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c70:	4770      	bx	lr
 8002c72:	bf00      	nop
 8002c74:	40010400 	.word	0x40010400

08002c78 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b084      	sub	sp, #16
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8002c80:	2300      	movs	r3, #0
 8002c82:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	7a1b      	ldrb	r3, [r3, #8]
 8002c88:	2b00      	cmp	r3, #0
 8002c8a:	f000 80c6 	beq.w	8002e1a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d05d      	beq.n	8002d52 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	7a5b      	ldrb	r3, [r3, #9]
 8002c9a:	2b01      	cmp	r3, #1
 8002c9c:	d00e      	beq.n	8002cbc <LL_EXTI_Init+0x44>
 8002c9e:	2b02      	cmp	r3, #2
 8002ca0:	d017      	beq.n	8002cd2 <LL_EXTI_Init+0x5a>
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d120      	bne.n	8002ce8 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	4618      	mov	r0, r3
 8002cac:	f7ff ff24 	bl	8002af8 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f7ff feaf 	bl	8002a18 <LL_EXTI_EnableIT_0_31>
          break;
 8002cba:	e018      	b.n	8002cee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7ff fecd 	bl	8002a60 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f7ff fef0 	bl	8002ab0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002cd0:	e00d      	b.n	8002cee <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4618      	mov	r0, r3
 8002cd8:	f7ff fe9e 	bl	8002a18 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff fee5 	bl	8002ab0 <LL_EXTI_EnableEvent_0_31>
          break;
 8002ce6:	e002      	b.n	8002cee <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8002ce8:	2301      	movs	r3, #1
 8002cea:	60fb      	str	r3, [r7, #12]
          break;
 8002cec:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	7a9b      	ldrb	r3, [r3, #10]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d02d      	beq.n	8002d52 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	7a9b      	ldrb	r3, [r3, #10]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d00e      	beq.n	8002d1c <LL_EXTI_Init+0xa4>
 8002cfe:	2b03      	cmp	r3, #3
 8002d00:	d017      	beq.n	8002d32 <LL_EXTI_Init+0xba>
 8002d02:	2b01      	cmp	r3, #1
 8002d04:	d120      	bne.n	8002d48 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	f7ff ff8c 	bl	8002c28 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7ff ff17 	bl	8002b48 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8002d1a:	e01b      	b.n	8002d54 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4618      	mov	r0, r3
 8002d22:	f7ff ff35 	bl	8002b90 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7ff ff58 	bl	8002be0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d30:	e010      	b.n	8002d54 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7ff ff06 	bl	8002b48 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4618      	mov	r0, r3
 8002d42:	f7ff ff4d 	bl	8002be0 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8002d46:	e005      	b.n	8002d54 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	f043 0302 	orr.w	r3, r3, #2
 8002d4e:	60fb      	str	r3, [r7, #12]
            break;
 8002d50:	e000      	b.n	8002d54 <LL_EXTI_Init+0xdc>
        }
      }
 8002d52:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d073      	beq.n	8002e44 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	7a5b      	ldrb	r3, [r3, #9]
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d00e      	beq.n	8002d82 <LL_EXTI_Init+0x10a>
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d017      	beq.n	8002d98 <LL_EXTI_Init+0x120>
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d120      	bne.n	8002dae <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	4618      	mov	r0, r3
 8002d72:	f7ff fed5 	bl	8002b20 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	f7ff fe5e 	bl	8002a3c <LL_EXTI_EnableIT_32_63>
          break;
 8002d80:	e01a      	b.n	8002db8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7ff fe7e 	bl	8002a88 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	4618      	mov	r0, r3
 8002d92:	f7ff fe9f 	bl	8002ad4 <LL_EXTI_EnableEvent_32_63>
          break;
 8002d96:	e00f      	b.n	8002db8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff fe4d 	bl	8002a3c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4618      	mov	r0, r3
 8002da8:	f7ff fe94 	bl	8002ad4 <LL_EXTI_EnableEvent_32_63>
          break;
 8002dac:	e004      	b.n	8002db8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	f043 0304 	orr.w	r3, r3, #4
 8002db4:	60fb      	str	r3, [r7, #12]
          break;
 8002db6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	7a9b      	ldrb	r3, [r3, #10]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d041      	beq.n	8002e44 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	7a9b      	ldrb	r3, [r3, #10]
 8002dc4:	2b02      	cmp	r3, #2
 8002dc6:	d00e      	beq.n	8002de6 <LL_EXTI_Init+0x16e>
 8002dc8:	2b03      	cmp	r3, #3
 8002dca:	d017      	beq.n	8002dfc <LL_EXTI_Init+0x184>
 8002dcc:	2b01      	cmp	r3, #1
 8002dce:	d120      	bne.n	8002e12 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff ff3b 	bl	8002c50 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	685b      	ldr	r3, [r3, #4]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fec4 	bl	8002b6c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8002de4:	e02f      	b.n	8002e46 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	4618      	mov	r0, r3
 8002dec:	f7ff fee4 	bl	8002bb8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	685b      	ldr	r3, [r3, #4]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff ff05 	bl	8002c04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002dfa:	e024      	b.n	8002e46 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	4618      	mov	r0, r3
 8002e02:	f7ff feb3 	bl	8002b6c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff fefa 	bl	8002c04 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002e10:	e019      	b.n	8002e46 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	60fb      	str	r3, [r7, #12]
            break;
 8002e16:	bf00      	nop
 8002e18:	e015      	b.n	8002e46 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	681b      	ldr	r3, [r3, #0]
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7ff fe1e 	bl	8002a60 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f7ff fe65 	bl	8002af8 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	4618      	mov	r0, r3
 8002e34:	f7ff fe28 	bl	8002a88 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	4618      	mov	r0, r3
 8002e3e:	f7ff fe6f 	bl	8002b20 <LL_EXTI_DisableEvent_32_63>
 8002e42:	e000      	b.n	8002e46 <LL_EXTI_Init+0x1ce>
      }
 8002e44:	bf00      	nop
  }

  return status;
 8002e46:	68fb      	ldr	r3, [r7, #12]
}
 8002e48:	4618      	mov	r0, r3
 8002e4a:	3710      	adds	r7, #16
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	bd80      	pop	{r7, pc}

08002e50 <LL_GPIO_SetPinMode>:
{
 8002e50:	b480      	push	{r7}
 8002e52:	b08b      	sub	sp, #44	; 0x2c
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	60f8      	str	r0, [r7, #12]
 8002e58:	60b9      	str	r1, [r7, #8]
 8002e5a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	681a      	ldr	r2, [r3, #0]
 8002e60:	68bb      	ldr	r3, [r7, #8]
 8002e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	fa93 f3a3 	rbit	r3, r3
 8002e6a:	613b      	str	r3, [r7, #16]
  return result;
 8002e6c:	693b      	ldr	r3, [r7, #16]
 8002e6e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8002e76:	2320      	movs	r3, #32
 8002e78:	e003      	b.n	8002e82 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002e7a:	69bb      	ldr	r3, [r7, #24]
 8002e7c:	fab3 f383 	clz	r3, r3
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	2103      	movs	r1, #3
 8002e86:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8a:	43db      	mvns	r3, r3
 8002e8c:	401a      	ands	r2, r3
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002e92:	6a3b      	ldr	r3, [r7, #32]
 8002e94:	fa93 f3a3 	rbit	r3, r3
 8002e98:	61fb      	str	r3, [r7, #28]
  return result;
 8002e9a:	69fb      	ldr	r3, [r7, #28]
 8002e9c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d101      	bne.n	8002ea8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8002ea4:	2320      	movs	r3, #32
 8002ea6:	e003      	b.n	8002eb0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	fab3 f383 	clz	r3, r3
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	005b      	lsls	r3, r3, #1
 8002eb2:	6879      	ldr	r1, [r7, #4]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	431a      	orrs	r2, r3
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	601a      	str	r2, [r3, #0]
}
 8002ebe:	bf00      	nop
 8002ec0:	372c      	adds	r7, #44	; 0x2c
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <LL_GPIO_SetPinOutputType>:
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	685a      	ldr	r2, [r3, #4]
 8002eda:	68bb      	ldr	r3, [r7, #8]
 8002edc:	43db      	mvns	r3, r3
 8002ede:	401a      	ands	r2, r3
 8002ee0:	68bb      	ldr	r3, [r7, #8]
 8002ee2:	6879      	ldr	r1, [r7, #4]
 8002ee4:	fb01 f303 	mul.w	r3, r1, r3
 8002ee8:	431a      	orrs	r2, r3
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	605a      	str	r2, [r3, #4]
}
 8002eee:	bf00      	nop
 8002ef0:	3714      	adds	r7, #20
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef8:	4770      	bx	lr

08002efa <LL_GPIO_SetPinSpeed>:
{
 8002efa:	b480      	push	{r7}
 8002efc:	b08b      	sub	sp, #44	; 0x2c
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	60f8      	str	r0, [r7, #12]
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	689a      	ldr	r2, [r3, #8]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	fa93 f3a3 	rbit	r3, r3
 8002f14:	613b      	str	r3, [r7, #16]
  return result;
 8002f16:	693b      	ldr	r3, [r7, #16]
 8002f18:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f1a:	69bb      	ldr	r3, [r7, #24]
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d101      	bne.n	8002f24 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002f20:	2320      	movs	r3, #32
 8002f22:	e003      	b.n	8002f2c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8002f24:	69bb      	ldr	r3, [r7, #24]
 8002f26:	fab3 f383 	clz	r3, r3
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	005b      	lsls	r3, r3, #1
 8002f2e:	2103      	movs	r1, #3
 8002f30:	fa01 f303 	lsl.w	r3, r1, r3
 8002f34:	43db      	mvns	r3, r3
 8002f36:	401a      	ands	r2, r3
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f3c:	6a3b      	ldr	r3, [r7, #32]
 8002f3e:	fa93 f3a3 	rbit	r3, r3
 8002f42:	61fb      	str	r3, [r7, #28]
  return result;
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e003      	b.n	8002f5a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8002f52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f54:	fab3 f383 	clz	r3, r3
 8002f58:	b2db      	uxtb	r3, r3
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002f62:	431a      	orrs	r2, r3
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	609a      	str	r2, [r3, #8]
}
 8002f68:	bf00      	nop
 8002f6a:	372c      	adds	r7, #44	; 0x2c
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr

08002f74 <LL_GPIO_SetPinPull>:
{
 8002f74:	b480      	push	{r7}
 8002f76:	b08b      	sub	sp, #44	; 0x2c
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	60f8      	str	r0, [r7, #12]
 8002f7c:	60b9      	str	r1, [r7, #8]
 8002f7e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	68da      	ldr	r2, [r3, #12]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa93 f3a3 	rbit	r3, r3
 8002f8e:	613b      	str	r3, [r7, #16]
  return result;
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002f94:	69bb      	ldr	r3, [r7, #24]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e003      	b.n	8002fa6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	fab3 f383 	clz	r3, r3
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	005b      	lsls	r3, r3, #1
 8002fa8:	2103      	movs	r1, #3
 8002faa:	fa01 f303 	lsl.w	r3, r1, r3
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	401a      	ands	r2, r3
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002fb6:	6a3b      	ldr	r3, [r7, #32]
 8002fb8:	fa93 f3a3 	rbit	r3, r3
 8002fbc:	61fb      	str	r3, [r7, #28]
  return result;
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002fc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d101      	bne.n	8002fcc <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8002fc8:	2320      	movs	r3, #32
 8002fca:	e003      	b.n	8002fd4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8002fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fce:	fab3 f383 	clz	r3, r3
 8002fd2:	b2db      	uxtb	r3, r3
 8002fd4:	005b      	lsls	r3, r3, #1
 8002fd6:	6879      	ldr	r1, [r7, #4]
 8002fd8:	fa01 f303 	lsl.w	r3, r1, r3
 8002fdc:	431a      	orrs	r2, r3
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	60da      	str	r2, [r3, #12]
}
 8002fe2:	bf00      	nop
 8002fe4:	372c      	adds	r7, #44	; 0x2c
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <LL_GPIO_SetAFPin_0_7>:
{
 8002fee:	b480      	push	{r7}
 8002ff0:	b08b      	sub	sp, #44	; 0x2c
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	60f8      	str	r0, [r7, #12]
 8002ff6:	60b9      	str	r1, [r7, #8]
 8002ff8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	6a1a      	ldr	r2, [r3, #32]
 8002ffe:	68bb      	ldr	r3, [r7, #8]
 8003000:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	fa93 f3a3 	rbit	r3, r3
 8003008:	613b      	str	r3, [r7, #16]
  return result;
 800300a:	693b      	ldr	r3, [r7, #16]
 800300c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e003      	b.n	8003020 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fab3 f383 	clz	r3, r3
 800301e:	b2db      	uxtb	r3, r3
 8003020:	009b      	lsls	r3, r3, #2
 8003022:	210f      	movs	r1, #15
 8003024:	fa01 f303 	lsl.w	r3, r1, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	401a      	ands	r2, r3
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	fa93 f3a3 	rbit	r3, r3
 8003036:	61fb      	str	r3, [r7, #28]
  return result;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800303c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8003042:	2320      	movs	r3, #32
 8003044:	e003      	b.n	800304e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8003046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003048:	fab3 f383 	clz	r3, r3
 800304c:	b2db      	uxtb	r3, r3
 800304e:	009b      	lsls	r3, r3, #2
 8003050:	6879      	ldr	r1, [r7, #4]
 8003052:	fa01 f303 	lsl.w	r3, r1, r3
 8003056:	431a      	orrs	r2, r3
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	621a      	str	r2, [r3, #32]
}
 800305c:	bf00      	nop
 800305e:	372c      	adds	r7, #44	; 0x2c
 8003060:	46bd      	mov	sp, r7
 8003062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003066:	4770      	bx	lr

08003068 <LL_GPIO_SetAFPin_8_15>:
{
 8003068:	b480      	push	{r7}
 800306a:	b08b      	sub	sp, #44	; 0x2c
 800306c:	af00      	add	r7, sp, #0
 800306e:	60f8      	str	r0, [r7, #12]
 8003070:	60b9      	str	r1, [r7, #8]
 8003072:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	0a1b      	lsrs	r3, r3, #8
 800307c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	fa93 f3a3 	rbit	r3, r3
 8003084:	613b      	str	r3, [r7, #16]
  return result;
 8003086:	693b      	ldr	r3, [r7, #16]
 8003088:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d101      	bne.n	8003094 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003090:	2320      	movs	r3, #32
 8003092:	e003      	b.n	800309c <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8003094:	69bb      	ldr	r3, [r7, #24]
 8003096:	fab3 f383 	clz	r3, r3
 800309a:	b2db      	uxtb	r3, r3
 800309c:	009b      	lsls	r3, r3, #2
 800309e:	210f      	movs	r1, #15
 80030a0:	fa01 f303 	lsl.w	r3, r1, r3
 80030a4:	43db      	mvns	r3, r3
 80030a6:	401a      	ands	r2, r3
 80030a8:	68bb      	ldr	r3, [r7, #8]
 80030aa:	0a1b      	lsrs	r3, r3, #8
 80030ac:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030ae:	6a3b      	ldr	r3, [r7, #32]
 80030b0:	fa93 f3a3 	rbit	r3, r3
 80030b4:	61fb      	str	r3, [r7, #28]
  return result;
 80030b6:	69fb      	ldr	r3, [r7, #28]
 80030b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80030ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d101      	bne.n	80030c4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80030c0:	2320      	movs	r3, #32
 80030c2:	e003      	b.n	80030cc <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80030c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030c6:	fab3 f383 	clz	r3, r3
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	6879      	ldr	r1, [r7, #4]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80030da:	bf00      	nop
 80030dc:	372c      	adds	r7, #44	; 0x2c
 80030de:	46bd      	mov	sp, r7
 80030e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e4:	4770      	bx	lr

080030e6 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b088      	sub	sp, #32
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	fa93 f3a3 	rbit	r3, r3
 80030fc:	60fb      	str	r3, [r7, #12]
  return result;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8003102:	697b      	ldr	r3, [r7, #20]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d101      	bne.n	800310c <LL_GPIO_Init+0x26>
    return 32U;
 8003108:	2320      	movs	r3, #32
 800310a:	e003      	b.n	8003114 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	fab3 f383 	clz	r3, r3
 8003112:	b2db      	uxtb	r3, r3
 8003114:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003116:	e040      	b.n	800319a <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	681a      	ldr	r2, [r3, #0]
 800311c:	2101      	movs	r1, #1
 800311e:	69fb      	ldr	r3, [r7, #28]
 8003120:	fa01 f303 	lsl.w	r3, r1, r3
 8003124:	4013      	ands	r3, r2
 8003126:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003128:	69bb      	ldr	r3, [r7, #24]
 800312a:	2b00      	cmp	r3, #0
 800312c:	d032      	beq.n	8003194 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	685b      	ldr	r3, [r3, #4]
 8003132:	461a      	mov	r2, r3
 8003134:	69b9      	ldr	r1, [r7, #24]
 8003136:	6878      	ldr	r0, [r7, #4]
 8003138:	f7ff fe8a 	bl	8002e50 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	2b01      	cmp	r3, #1
 8003142:	d003      	beq.n	800314c <LL_GPIO_Init+0x66>
 8003144:	683b      	ldr	r3, [r7, #0]
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	2b02      	cmp	r3, #2
 800314a:	d106      	bne.n	800315a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800314c:	683b      	ldr	r3, [r7, #0]
 800314e:	689b      	ldr	r3, [r3, #8]
 8003150:	461a      	mov	r2, r3
 8003152:	69b9      	ldr	r1, [r7, #24]
 8003154:	6878      	ldr	r0, [r7, #4]
 8003156:	f7ff fed0 	bl	8002efa <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	691b      	ldr	r3, [r3, #16]
 800315e:	461a      	mov	r2, r3
 8003160:	69b9      	ldr	r1, [r7, #24]
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff ff06 	bl	8002f74 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	2b02      	cmp	r3, #2
 800316e:	d111      	bne.n	8003194 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003170:	69bb      	ldr	r3, [r7, #24]
 8003172:	2bff      	cmp	r3, #255	; 0xff
 8003174:	d807      	bhi.n	8003186 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	695b      	ldr	r3, [r3, #20]
 800317a:	461a      	mov	r2, r3
 800317c:	69b9      	ldr	r1, [r7, #24]
 800317e:	6878      	ldr	r0, [r7, #4]
 8003180:	f7ff ff35 	bl	8002fee <LL_GPIO_SetAFPin_0_7>
 8003184:	e006      	b.n	8003194 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003186:	683b      	ldr	r3, [r7, #0]
 8003188:	695b      	ldr	r3, [r3, #20]
 800318a:	461a      	mov	r2, r3
 800318c:	69b9      	ldr	r1, [r7, #24]
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff ff6a 	bl	8003068 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8003194:	69fb      	ldr	r3, [r7, #28]
 8003196:	3301      	adds	r3, #1
 8003198:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	69fb      	ldr	r3, [r7, #28]
 80031a0:	fa22 f303 	lsr.w	r3, r2, r3
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d1b7      	bne.n	8003118 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d003      	beq.n	80031b8 <LL_GPIO_Init+0xd2>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	2b02      	cmp	r3, #2
 80031b6:	d107      	bne.n	80031c8 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	6819      	ldr	r1, [r3, #0]
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	68db      	ldr	r3, [r3, #12]
 80031c0:	461a      	mov	r2, r3
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f7ff fe81 	bl	8002eca <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3720      	adds	r7, #32
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <LL_RCC_HSI_IsReady>:
{
 80031d4:	b480      	push	{r7}
 80031d6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80031d8:	4b07      	ldr	r3, [pc, #28]	; (80031f8 <LL_RCC_HSI_IsReady+0x24>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031e4:	d101      	bne.n	80031ea <LL_RCC_HSI_IsReady+0x16>
 80031e6:	2301      	movs	r3, #1
 80031e8:	e000      	b.n	80031ec <LL_RCC_HSI_IsReady+0x18>
 80031ea:	2300      	movs	r3, #0
}
 80031ec:	4618      	mov	r0, r3
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	40021000 	.word	0x40021000

080031fc <LL_RCC_LSE_IsReady>:
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8003200:	4b07      	ldr	r3, [pc, #28]	; (8003220 <LL_RCC_LSE_IsReady+0x24>)
 8003202:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003206:	f003 0302 	and.w	r3, r3, #2
 800320a:	2b02      	cmp	r3, #2
 800320c:	d101      	bne.n	8003212 <LL_RCC_LSE_IsReady+0x16>
 800320e:	2301      	movs	r3, #1
 8003210:	e000      	b.n	8003214 <LL_RCC_LSE_IsReady+0x18>
 8003212:	2300      	movs	r3, #0
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40021000 	.word	0x40021000

08003224 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8003228:	4b06      	ldr	r3, [pc, #24]	; (8003244 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0308 	and.w	r3, r3, #8
 8003230:	2b08      	cmp	r3, #8
 8003232:	d101      	bne.n	8003238 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8003234:	2301      	movs	r3, #1
 8003236:	e000      	b.n	800323a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003238:	2300      	movs	r3, #0
}
 800323a:	4618      	mov	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003242:	4770      	bx	lr
 8003244:	40021000 	.word	0x40021000

08003248 <LL_RCC_MSI_GetRange>:
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800324c:	4b04      	ldr	r3, [pc, #16]	; (8003260 <LL_RCC_MSI_GetRange+0x18>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003254:	4618      	mov	r0, r3
 8003256:	46bd      	mov	sp, r7
 8003258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800325c:	4770      	bx	lr
 800325e:	bf00      	nop
 8003260:	40021000 	.word	0x40021000

08003264 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003268:	4b04      	ldr	r3, [pc, #16]	; (800327c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800326a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800326e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8003272:	4618      	mov	r0, r3
 8003274:	46bd      	mov	sp, r7
 8003276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327a:	4770      	bx	lr
 800327c:	40021000 	.word	0x40021000

08003280 <LL_RCC_GetSysClkSource>:
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003284:	4b04      	ldr	r3, [pc, #16]	; (8003298 <LL_RCC_GetSysClkSource+0x18>)
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	f003 030c 	and.w	r3, r3, #12
}
 800328c:	4618      	mov	r0, r3
 800328e:	46bd      	mov	sp, r7
 8003290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003294:	4770      	bx	lr
 8003296:	bf00      	nop
 8003298:	40021000 	.word	0x40021000

0800329c <LL_RCC_GetAHBPrescaler>:
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80032a0:	4b04      	ldr	r3, [pc, #16]	; (80032b4 <LL_RCC_GetAHBPrescaler+0x18>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80032a8:	4618      	mov	r0, r3
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	40021000 	.word	0x40021000

080032b8 <LL_RCC_GetAPB1Prescaler>:
{
 80032b8:	b480      	push	{r7}
 80032ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80032bc:	4b04      	ldr	r3, [pc, #16]	; (80032d0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80032be:	689b      	ldr	r3, [r3, #8]
 80032c0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80032c4:	4618      	mov	r0, r3
 80032c6:	46bd      	mov	sp, r7
 80032c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032cc:	4770      	bx	lr
 80032ce:	bf00      	nop
 80032d0:	40021000 	.word	0x40021000

080032d4 <LL_RCC_GetAPB2Prescaler>:
{
 80032d4:	b480      	push	{r7}
 80032d6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80032d8:	4b04      	ldr	r3, [pc, #16]	; (80032ec <LL_RCC_GetAPB2Prescaler+0x18>)
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80032e0:	4618      	mov	r0, r3
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr
 80032ea:	bf00      	nop
 80032ec:	40021000 	.word	0x40021000

080032f0 <LL_RCC_GetUSARTClockSource>:
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80032f8:	4b06      	ldr	r3, [pc, #24]	; (8003314 <LL_RCC_GetUSARTClockSource+0x24>)
 80032fa:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	401a      	ands	r2, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	4313      	orrs	r3, r2
}
 8003308:	4618      	mov	r0, r3
 800330a:	370c      	adds	r7, #12
 800330c:	46bd      	mov	sp, r7
 800330e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003312:	4770      	bx	lr
 8003314:	40021000 	.word	0x40021000

08003318 <LL_RCC_GetUARTClockSource>:
{
 8003318:	b480      	push	{r7}
 800331a:	b083      	sub	sp, #12
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003320:	4b06      	ldr	r3, [pc, #24]	; (800333c <LL_RCC_GetUARTClockSource+0x24>)
 8003322:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	401a      	ands	r2, r3
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	041b      	lsls	r3, r3, #16
 800332e:	4313      	orrs	r3, r2
}
 8003330:	4618      	mov	r0, r3
 8003332:	370c      	adds	r7, #12
 8003334:	46bd      	mov	sp, r7
 8003336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800333a:	4770      	bx	lr
 800333c:	40021000 	.word	0x40021000

08003340 <LL_RCC_PLL_GetMainSource>:
{
 8003340:	b480      	push	{r7}
 8003342:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8003344:	4b04      	ldr	r3, [pc, #16]	; (8003358 <LL_RCC_PLL_GetMainSource+0x18>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f003 0303 	and.w	r3, r3, #3
}
 800334c:	4618      	mov	r0, r3
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40021000 	.word	0x40021000

0800335c <LL_RCC_PLL_GetN>:
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003360:	4b04      	ldr	r3, [pc, #16]	; (8003374 <LL_RCC_PLL_GetN+0x18>)
 8003362:	68db      	ldr	r3, [r3, #12]
 8003364:	0a1b      	lsrs	r3, r3, #8
 8003366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800336a:	4618      	mov	r0, r3
 800336c:	46bd      	mov	sp, r7
 800336e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003372:	4770      	bx	lr
 8003374:	40021000 	.word	0x40021000

08003378 <LL_RCC_PLL_GetR>:
{
 8003378:	b480      	push	{r7}
 800337a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 800337c:	4b04      	ldr	r3, [pc, #16]	; (8003390 <LL_RCC_PLL_GetR+0x18>)
 800337e:	68db      	ldr	r3, [r3, #12]
 8003380:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8003384:	4618      	mov	r0, r3
 8003386:	46bd      	mov	sp, r7
 8003388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800338c:	4770      	bx	lr
 800338e:	bf00      	nop
 8003390:	40021000 	.word	0x40021000

08003394 <LL_RCC_PLL_GetDivider>:
{
 8003394:	b480      	push	{r7}
 8003396:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003398:	4b04      	ldr	r3, [pc, #16]	; (80033ac <LL_RCC_PLL_GetDivider+0x18>)
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80033a0:	4618      	mov	r0, r3
 80033a2:	46bd      	mov	sp, r7
 80033a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a8:	4770      	bx	lr
 80033aa:	bf00      	nop
 80033ac:	40021000 	.word	0x40021000

080033b0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b084      	sub	sp, #16
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80033b8:	2300      	movs	r3, #0
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2b03      	cmp	r3, #3
 80033c0:	d137      	bne.n	8003432 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80033c2:	6878      	ldr	r0, [r7, #4]
 80033c4:	f7ff ff94 	bl	80032f0 <LL_RCC_GetUSARTClockSource>
 80033c8:	4603      	mov	r3, r0
 80033ca:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80033ce:	2b03      	cmp	r3, #3
 80033d0:	f200 80b2 	bhi.w	8003538 <LL_RCC_GetUSARTClockFreq+0x188>
 80033d4:	a201      	add	r2, pc, #4	; (adr r2, 80033dc <LL_RCC_GetUSARTClockFreq+0x2c>)
 80033d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033da:	bf00      	nop
 80033dc:	0800341b 	.word	0x0800341b
 80033e0:	080033ed 	.word	0x080033ed
 80033e4:	080033f5 	.word	0x080033f5
 80033e8:	08003407 	.word	0x08003407
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80033ec:	f000 f952 	bl	8003694 <RCC_GetSystemClockFreq>
 80033f0:	60f8      	str	r0, [r7, #12]
        break;
 80033f2:	e0b2      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80033f4:	f7ff feee 	bl	80031d4 <LL_RCC_HSI_IsReady>
 80033f8:	4603      	mov	r3, r0
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 809e 	beq.w	800353c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8003400:	4b58      	ldr	r3, [pc, #352]	; (8003564 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003402:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003404:	e09a      	b.n	800353c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003406:	f7ff fef9 	bl	80031fc <LL_RCC_LSE_IsReady>
 800340a:	4603      	mov	r3, r0
 800340c:	2b00      	cmp	r3, #0
 800340e:	f000 8097 	beq.w	8003540 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8003412:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003416:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003418:	e092      	b.n	8003540 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800341a:	f000 f93b 	bl	8003694 <RCC_GetSystemClockFreq>
 800341e:	4603      	mov	r3, r0
 8003420:	4618      	mov	r0, r3
 8003422:	f000 f9c7 	bl	80037b4 <RCC_GetHCLKClockFreq>
 8003426:	4603      	mov	r3, r0
 8003428:	4618      	mov	r0, r3
 800342a:	f000 f9ed 	bl	8003808 <RCC_GetPCLK2ClockFreq>
 800342e:	60f8      	str	r0, [r7, #12]
        break;
 8003430:	e093      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	2b0c      	cmp	r3, #12
 8003436:	d146      	bne.n	80034c6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003438:	6878      	ldr	r0, [r7, #4]
 800343a:	f7ff ff59 	bl	80032f0 <LL_RCC_GetUSARTClockSource>
 800343e:	4603      	mov	r3, r0
 8003440:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8003444:	2b0c      	cmp	r3, #12
 8003446:	d87d      	bhi.n	8003544 <LL_RCC_GetUSARTClockFreq+0x194>
 8003448:	a201      	add	r2, pc, #4	; (adr r2, 8003450 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800344a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800344e:	bf00      	nop
 8003450:	080034af 	.word	0x080034af
 8003454:	08003545 	.word	0x08003545
 8003458:	08003545 	.word	0x08003545
 800345c:	08003545 	.word	0x08003545
 8003460:	08003485 	.word	0x08003485
 8003464:	08003545 	.word	0x08003545
 8003468:	08003545 	.word	0x08003545
 800346c:	08003545 	.word	0x08003545
 8003470:	0800348d 	.word	0x0800348d
 8003474:	08003545 	.word	0x08003545
 8003478:	08003545 	.word	0x08003545
 800347c:	08003545 	.word	0x08003545
 8003480:	0800349d 	.word	0x0800349d
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003484:	f000 f906 	bl	8003694 <RCC_GetSystemClockFreq>
 8003488:	60f8      	str	r0, [r7, #12]
        break;
 800348a:	e066      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800348c:	f7ff fea2 	bl	80031d4 <LL_RCC_HSI_IsReady>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d058      	beq.n	8003548 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8003496:	4b33      	ldr	r3, [pc, #204]	; (8003564 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003498:	60fb      	str	r3, [r7, #12]
        }
        break;
 800349a:	e055      	b.n	8003548 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800349c:	f7ff feae 	bl	80031fc <LL_RCC_LSE_IsReady>
 80034a0:	4603      	mov	r3, r0
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d052      	beq.n	800354c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 80034a6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80034aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80034ac:	e04e      	b.n	800354c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80034ae:	f000 f8f1 	bl	8003694 <RCC_GetSystemClockFreq>
 80034b2:	4603      	mov	r3, r0
 80034b4:	4618      	mov	r0, r3
 80034b6:	f000 f97d 	bl	80037b4 <RCC_GetHCLKClockFreq>
 80034ba:	4603      	mov	r3, r0
 80034bc:	4618      	mov	r0, r3
 80034be:	f000 f98f 	bl	80037e0 <RCC_GetPCLK1ClockFreq>
 80034c2:	60f8      	str	r0, [r7, #12]
        break;
 80034c4:	e049      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2b30      	cmp	r3, #48	; 0x30
 80034ca:	d141      	bne.n	8003550 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034cc:	6878      	ldr	r0, [r7, #4]
 80034ce:	f7ff ff0f 	bl	80032f0 <LL_RCC_GetUSARTClockSource>
 80034d2:	4603      	mov	r3, r0
 80034d4:	4a24      	ldr	r2, [pc, #144]	; (8003568 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80034d6:	4293      	cmp	r3, r2
 80034d8:	d00d      	beq.n	80034f6 <LL_RCC_GetUSARTClockFreq+0x146>
 80034da:	4a23      	ldr	r2, [pc, #140]	; (8003568 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80034dc:	4293      	cmp	r3, r2
 80034de:	d803      	bhi.n	80034e8 <LL_RCC_GetUSARTClockFreq+0x138>
 80034e0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80034e4:	d01c      	beq.n	8003520 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80034e6:	e038      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80034e8:	4a20      	ldr	r2, [pc, #128]	; (800356c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d007      	beq.n	80034fe <LL_RCC_GetUSARTClockFreq+0x14e>
 80034ee:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80034f2:	d00c      	beq.n	800350e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80034f4:	e031      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80034f6:	f000 f8cd 	bl	8003694 <RCC_GetSystemClockFreq>
 80034fa:	60f8      	str	r0, [r7, #12]
          break;
 80034fc:	e02d      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80034fe:	f7ff fe69 	bl	80031d4 <LL_RCC_HSI_IsReady>
 8003502:	4603      	mov	r3, r0
 8003504:	2b00      	cmp	r3, #0
 8003506:	d025      	beq.n	8003554 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8003508:	4b16      	ldr	r3, [pc, #88]	; (8003564 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800350a:	60fb      	str	r3, [r7, #12]
          break;
 800350c:	e022      	b.n	8003554 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 800350e:	f7ff fe75 	bl	80031fc <LL_RCC_LSE_IsReady>
 8003512:	4603      	mov	r3, r0
 8003514:	2b00      	cmp	r3, #0
 8003516:	d01f      	beq.n	8003558 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8003518:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800351c:	60fb      	str	r3, [r7, #12]
          break;
 800351e:	e01b      	b.n	8003558 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003520:	f000 f8b8 	bl	8003694 <RCC_GetSystemClockFreq>
 8003524:	4603      	mov	r3, r0
 8003526:	4618      	mov	r0, r3
 8003528:	f000 f944 	bl	80037b4 <RCC_GetHCLKClockFreq>
 800352c:	4603      	mov	r3, r0
 800352e:	4618      	mov	r0, r3
 8003530:	f000 f956 	bl	80037e0 <RCC_GetPCLK1ClockFreq>
 8003534:	60f8      	str	r0, [r7, #12]
          break;
 8003536:	e010      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003538:	bf00      	nop
 800353a:	e00e      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800353c:	bf00      	nop
 800353e:	e00c      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003540:	bf00      	nop
 8003542:	e00a      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003544:	bf00      	nop
 8003546:	e008      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003548:	bf00      	nop
 800354a:	e006      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800354c:	bf00      	nop
 800354e:	e004      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8003550:	bf00      	nop
 8003552:	e002      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003554:	bf00      	nop
 8003556:	e000      	b.n	800355a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003558:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 800355a:	68fb      	ldr	r3, [r7, #12]
}
 800355c:	4618      	mov	r0, r3
 800355e:	3710      	adds	r7, #16
 8003560:	46bd      	mov	sp, r7
 8003562:	bd80      	pop	{r7, pc}
 8003564:	00f42400 	.word	0x00f42400
 8003568:	00300010 	.word	0x00300010
 800356c:	00300020 	.word	0x00300020

08003570 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003578:	2300      	movs	r3, #0
 800357a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2bc0      	cmp	r3, #192	; 0xc0
 8003580:	d135      	bne.n	80035ee <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f7ff fec8 	bl	8003318 <LL_RCC_GetUARTClockSource>
 8003588:	4603      	mov	r3, r0
 800358a:	4a3d      	ldr	r2, [pc, #244]	; (8003680 <LL_RCC_GetUARTClockFreq+0x110>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d00d      	beq.n	80035ac <LL_RCC_GetUARTClockFreq+0x3c>
 8003590:	4a3b      	ldr	r2, [pc, #236]	; (8003680 <LL_RCC_GetUARTClockFreq+0x110>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d803      	bhi.n	800359e <LL_RCC_GetUARTClockFreq+0x2e>
 8003596:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800359a:	d01c      	beq.n	80035d6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800359c:	e02c      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800359e:	4a39      	ldr	r2, [pc, #228]	; (8003684 <LL_RCC_GetUARTClockFreq+0x114>)
 80035a0:	4293      	cmp	r3, r2
 80035a2:	d007      	beq.n	80035b4 <LL_RCC_GetUARTClockFreq+0x44>
 80035a4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80035a8:	d00c      	beq.n	80035c4 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80035aa:	e025      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80035ac:	f000 f872 	bl	8003694 <RCC_GetSystemClockFreq>
 80035b0:	60f8      	str	r0, [r7, #12]
        break;
 80035b2:	e021      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80035b4:	f7ff fe0e 	bl	80031d4 <LL_RCC_HSI_IsReady>
 80035b8:	4603      	mov	r3, r0
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d019      	beq.n	80035f2 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80035be:	4b32      	ldr	r3, [pc, #200]	; (8003688 <LL_RCC_GetUARTClockFreq+0x118>)
 80035c0:	60fb      	str	r3, [r7, #12]
        break;
 80035c2:	e016      	b.n	80035f2 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80035c4:	f7ff fe1a 	bl	80031fc <LL_RCC_LSE_IsReady>
 80035c8:	4603      	mov	r3, r0
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d013      	beq.n	80035f6 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80035ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80035d2:	60fb      	str	r3, [r7, #12]
        break;
 80035d4:	e00f      	b.n	80035f6 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80035d6:	f000 f85d 	bl	8003694 <RCC_GetSystemClockFreq>
 80035da:	4603      	mov	r3, r0
 80035dc:	4618      	mov	r0, r3
 80035de:	f000 f8e9 	bl	80037b4 <RCC_GetHCLKClockFreq>
 80035e2:	4603      	mov	r3, r0
 80035e4:	4618      	mov	r0, r3
 80035e6:	f000 f8fb 	bl	80037e0 <RCC_GetPCLK1ClockFreq>
 80035ea:	60f8      	str	r0, [r7, #12]
        break;
 80035ec:	e004      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 80035ee:	bf00      	nop
 80035f0:	e002      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80035f2:	bf00      	nop
 80035f4:	e000      	b.n	80035f8 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80035f6:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80035fe:	d135      	bne.n	800366c <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003600:	6878      	ldr	r0, [r7, #4]
 8003602:	f7ff fe89 	bl	8003318 <LL_RCC_GetUARTClockSource>
 8003606:	4603      	mov	r3, r0
 8003608:	4a20      	ldr	r2, [pc, #128]	; (800368c <LL_RCC_GetUARTClockFreq+0x11c>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d00d      	beq.n	800362a <LL_RCC_GetUARTClockFreq+0xba>
 800360e:	4a1f      	ldr	r2, [pc, #124]	; (800368c <LL_RCC_GetUARTClockFreq+0x11c>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d803      	bhi.n	800361c <LL_RCC_GetUARTClockFreq+0xac>
 8003614:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003618:	d01c      	beq.n	8003654 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800361a:	e02c      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800361c:	4a1c      	ldr	r2, [pc, #112]	; (8003690 <LL_RCC_GetUARTClockFreq+0x120>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <LL_RCC_GetUARTClockFreq+0xc2>
 8003622:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003626:	d00c      	beq.n	8003642 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8003628:	e025      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800362a:	f000 f833 	bl	8003694 <RCC_GetSystemClockFreq>
 800362e:	60f8      	str	r0, [r7, #12]
        break;
 8003630:	e021      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003632:	f7ff fdcf 	bl	80031d4 <LL_RCC_HSI_IsReady>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d019      	beq.n	8003670 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 800363c:	4b12      	ldr	r3, [pc, #72]	; (8003688 <LL_RCC_GetUARTClockFreq+0x118>)
 800363e:	60fb      	str	r3, [r7, #12]
        break;
 8003640:	e016      	b.n	8003670 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003642:	f7ff fddb 	bl	80031fc <LL_RCC_LSE_IsReady>
 8003646:	4603      	mov	r3, r0
 8003648:	2b00      	cmp	r3, #0
 800364a:	d013      	beq.n	8003674 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 800364c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003650:	60fb      	str	r3, [r7, #12]
        break;
 8003652:	e00f      	b.n	8003674 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003654:	f000 f81e 	bl	8003694 <RCC_GetSystemClockFreq>
 8003658:	4603      	mov	r3, r0
 800365a:	4618      	mov	r0, r3
 800365c:	f000 f8aa 	bl	80037b4 <RCC_GetHCLKClockFreq>
 8003660:	4603      	mov	r3, r0
 8003662:	4618      	mov	r0, r3
 8003664:	f000 f8bc 	bl	80037e0 <RCC_GetPCLK1ClockFreq>
 8003668:	60f8      	str	r0, [r7, #12]
        break;
 800366a:	e004      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 800366c:	bf00      	nop
 800366e:	e002      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003670:	bf00      	nop
 8003672:	e000      	b.n	8003676 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003674:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003676:	68fb      	ldr	r3, [r7, #12]
}
 8003678:	4618      	mov	r0, r3
 800367a:	3710      	adds	r7, #16
 800367c:	46bd      	mov	sp, r7
 800367e:	bd80      	pop	{r7, pc}
 8003680:	00c00040 	.word	0x00c00040
 8003684:	00c00080 	.word	0x00c00080
 8003688:	00f42400 	.word	0x00f42400
 800368c:	03000100 	.word	0x03000100
 8003690:	03000200 	.word	0x03000200

08003694 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003694:	b580      	push	{r7, lr}
 8003696:	b082      	sub	sp, #8
 8003698:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 800369a:	f7ff fdf1 	bl	8003280 <LL_RCC_GetSysClkSource>
 800369e:	4603      	mov	r3, r0
 80036a0:	2b0c      	cmp	r3, #12
 80036a2:	d851      	bhi.n	8003748 <RCC_GetSystemClockFreq+0xb4>
 80036a4:	a201      	add	r2, pc, #4	; (adr r2, 80036ac <RCC_GetSystemClockFreq+0x18>)
 80036a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036aa:	bf00      	nop
 80036ac:	080036e1 	.word	0x080036e1
 80036b0:	08003749 	.word	0x08003749
 80036b4:	08003749 	.word	0x08003749
 80036b8:	08003749 	.word	0x08003749
 80036bc:	08003735 	.word	0x08003735
 80036c0:	08003749 	.word	0x08003749
 80036c4:	08003749 	.word	0x08003749
 80036c8:	08003749 	.word	0x08003749
 80036cc:	0800373b 	.word	0x0800373b
 80036d0:	08003749 	.word	0x08003749
 80036d4:	08003749 	.word	0x08003749
 80036d8:	08003749 	.word	0x08003749
 80036dc:	08003741 	.word	0x08003741
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80036e0:	f7ff fda0 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	d111      	bne.n	800370e <RCC_GetSystemClockFreq+0x7a>
 80036ea:	f7ff fd9b 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80036ee:	4603      	mov	r3, r0
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d004      	beq.n	80036fe <RCC_GetSystemClockFreq+0x6a>
 80036f4:	f7ff fda8 	bl	8003248 <LL_RCC_MSI_GetRange>
 80036f8:	4603      	mov	r3, r0
 80036fa:	0a1b      	lsrs	r3, r3, #8
 80036fc:	e003      	b.n	8003706 <RCC_GetSystemClockFreq+0x72>
 80036fe:	f7ff fdb1 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 8003702:	4603      	mov	r3, r0
 8003704:	0a1b      	lsrs	r3, r3, #8
 8003706:	4a28      	ldr	r2, [pc, #160]	; (80037a8 <RCC_GetSystemClockFreq+0x114>)
 8003708:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800370c:	e010      	b.n	8003730 <RCC_GetSystemClockFreq+0x9c>
 800370e:	f7ff fd89 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003712:	4603      	mov	r3, r0
 8003714:	2b00      	cmp	r3, #0
 8003716:	d004      	beq.n	8003722 <RCC_GetSystemClockFreq+0x8e>
 8003718:	f7ff fd96 	bl	8003248 <LL_RCC_MSI_GetRange>
 800371c:	4603      	mov	r3, r0
 800371e:	091b      	lsrs	r3, r3, #4
 8003720:	e003      	b.n	800372a <RCC_GetSystemClockFreq+0x96>
 8003722:	f7ff fd9f 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 8003726:	4603      	mov	r3, r0
 8003728:	091b      	lsrs	r3, r3, #4
 800372a:	4a1f      	ldr	r2, [pc, #124]	; (80037a8 <RCC_GetSystemClockFreq+0x114>)
 800372c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003730:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003732:	e033      	b.n	800379c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003734:	4b1d      	ldr	r3, [pc, #116]	; (80037ac <RCC_GetSystemClockFreq+0x118>)
 8003736:	607b      	str	r3, [r7, #4]
      break;
 8003738:	e030      	b.n	800379c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800373a:	4b1d      	ldr	r3, [pc, #116]	; (80037b0 <RCC_GetSystemClockFreq+0x11c>)
 800373c:	607b      	str	r3, [r7, #4]
      break;
 800373e:	e02d      	b.n	800379c <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003740:	f000 f876 	bl	8003830 <RCC_PLL_GetFreqDomain_SYS>
 8003744:	6078      	str	r0, [r7, #4]
      break;
 8003746:	e029      	b.n	800379c <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003748:	f7ff fd6c 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d111      	bne.n	8003776 <RCC_GetSystemClockFreq+0xe2>
 8003752:	f7ff fd67 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003756:	4603      	mov	r3, r0
 8003758:	2b00      	cmp	r3, #0
 800375a:	d004      	beq.n	8003766 <RCC_GetSystemClockFreq+0xd2>
 800375c:	f7ff fd74 	bl	8003248 <LL_RCC_MSI_GetRange>
 8003760:	4603      	mov	r3, r0
 8003762:	0a1b      	lsrs	r3, r3, #8
 8003764:	e003      	b.n	800376e <RCC_GetSystemClockFreq+0xda>
 8003766:	f7ff fd7d 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 800376a:	4603      	mov	r3, r0
 800376c:	0a1b      	lsrs	r3, r3, #8
 800376e:	4a0e      	ldr	r2, [pc, #56]	; (80037a8 <RCC_GetSystemClockFreq+0x114>)
 8003770:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003774:	e010      	b.n	8003798 <RCC_GetSystemClockFreq+0x104>
 8003776:	f7ff fd55 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800377a:	4603      	mov	r3, r0
 800377c:	2b00      	cmp	r3, #0
 800377e:	d004      	beq.n	800378a <RCC_GetSystemClockFreq+0xf6>
 8003780:	f7ff fd62 	bl	8003248 <LL_RCC_MSI_GetRange>
 8003784:	4603      	mov	r3, r0
 8003786:	091b      	lsrs	r3, r3, #4
 8003788:	e003      	b.n	8003792 <RCC_GetSystemClockFreq+0xfe>
 800378a:	f7ff fd6b 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 800378e:	4603      	mov	r3, r0
 8003790:	091b      	lsrs	r3, r3, #4
 8003792:	4a05      	ldr	r2, [pc, #20]	; (80037a8 <RCC_GetSystemClockFreq+0x114>)
 8003794:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003798:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800379a:	bf00      	nop
  }

  return frequency;
 800379c:	687b      	ldr	r3, [r7, #4]
}
 800379e:	4618      	mov	r0, r3
 80037a0:	3708      	adds	r7, #8
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	08005c84 	.word	0x08005c84
 80037ac:	00f42400 	.word	0x00f42400
 80037b0:	007a1200 	.word	0x007a1200

080037b4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80037bc:	f7ff fd6e 	bl	800329c <LL_RCC_GetAHBPrescaler>
 80037c0:	4603      	mov	r3, r0
 80037c2:	091b      	lsrs	r3, r3, #4
 80037c4:	f003 030f 	and.w	r3, r3, #15
 80037c8:	4a04      	ldr	r2, [pc, #16]	; (80037dc <RCC_GetHCLKClockFreq+0x28>)
 80037ca:	5cd3      	ldrb	r3, [r2, r3]
 80037cc:	461a      	mov	r2, r3
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	40d3      	lsrs	r3, r2
}
 80037d2:	4618      	mov	r0, r3
 80037d4:	3708      	adds	r7, #8
 80037d6:	46bd      	mov	sp, r7
 80037d8:	bd80      	pop	{r7, pc}
 80037da:	bf00      	nop
 80037dc:	08005c6c 	.word	0x08005c6c

080037e0 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80037e8:	f7ff fd66 	bl	80032b8 <LL_RCC_GetAPB1Prescaler>
 80037ec:	4603      	mov	r3, r0
 80037ee:	0a1b      	lsrs	r3, r3, #8
 80037f0:	4a04      	ldr	r2, [pc, #16]	; (8003804 <RCC_GetPCLK1ClockFreq+0x24>)
 80037f2:	5cd3      	ldrb	r3, [r2, r3]
 80037f4:	461a      	mov	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	40d3      	lsrs	r3, r2
}
 80037fa:	4618      	mov	r0, r3
 80037fc:	3708      	adds	r7, #8
 80037fe:	46bd      	mov	sp, r7
 8003800:	bd80      	pop	{r7, pc}
 8003802:	bf00      	nop
 8003804:	08005c7c 	.word	0x08005c7c

08003808 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003808:	b580      	push	{r7, lr}
 800380a:	b082      	sub	sp, #8
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003810:	f7ff fd60 	bl	80032d4 <LL_RCC_GetAPB2Prescaler>
 8003814:	4603      	mov	r3, r0
 8003816:	0adb      	lsrs	r3, r3, #11
 8003818:	4a04      	ldr	r2, [pc, #16]	; (800382c <RCC_GetPCLK2ClockFreq+0x24>)
 800381a:	5cd3      	ldrb	r3, [r2, r3]
 800381c:	461a      	mov	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	40d3      	lsrs	r3, r2
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}
 800382a:	bf00      	nop
 800382c:	08005c7c 	.word	0x08005c7c

08003830 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003830:	b590      	push	{r4, r7, lr}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003836:	f7ff fd83 	bl	8003340 <LL_RCC_PLL_GetMainSource>
 800383a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b02      	cmp	r3, #2
 8003840:	d02d      	beq.n	800389e <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8003842:	2b03      	cmp	r3, #3
 8003844:	d02e      	beq.n	80038a4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003846:	2b01      	cmp	r3, #1
 8003848:	d12f      	bne.n	80038aa <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800384a:	f7ff fceb 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800384e:	4603      	mov	r3, r0
 8003850:	2b00      	cmp	r3, #0
 8003852:	d111      	bne.n	8003878 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003854:	f7ff fce6 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 8003858:	4603      	mov	r3, r0
 800385a:	2b00      	cmp	r3, #0
 800385c:	d004      	beq.n	8003868 <RCC_PLL_GetFreqDomain_SYS+0x38>
 800385e:	f7ff fcf3 	bl	8003248 <LL_RCC_MSI_GetRange>
 8003862:	4603      	mov	r3, r0
 8003864:	0a1b      	lsrs	r3, r3, #8
 8003866:	e003      	b.n	8003870 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8003868:	f7ff fcfc 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 800386c:	4603      	mov	r3, r0
 800386e:	0a1b      	lsrs	r3, r3, #8
 8003870:	4a2f      	ldr	r2, [pc, #188]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003872:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003876:	e010      	b.n	800389a <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8003878:	f7ff fcd4 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 800387c:	4603      	mov	r3, r0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d004      	beq.n	800388c <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8003882:	f7ff fce1 	bl	8003248 <LL_RCC_MSI_GetRange>
 8003886:	4603      	mov	r3, r0
 8003888:	091b      	lsrs	r3, r3, #4
 800388a:	e003      	b.n	8003894 <RCC_PLL_GetFreqDomain_SYS+0x64>
 800388c:	f7ff fcea 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 8003890:	4603      	mov	r3, r0
 8003892:	091b      	lsrs	r3, r3, #4
 8003894:	4a26      	ldr	r2, [pc, #152]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003896:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800389a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800389c:	e02f      	b.n	80038fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 800389e:	4b25      	ldr	r3, [pc, #148]	; (8003934 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80038a0:	607b      	str	r3, [r7, #4]
      break;
 80038a2:	e02c      	b.n	80038fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80038a4:	4b24      	ldr	r3, [pc, #144]	; (8003938 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80038a6:	607b      	str	r3, [r7, #4]
      break;
 80038a8:	e029      	b.n	80038fe <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80038aa:	f7ff fcbb 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d111      	bne.n	80038d8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80038b4:	f7ff fcb6 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80038b8:	4603      	mov	r3, r0
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d004      	beq.n	80038c8 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80038be:	f7ff fcc3 	bl	8003248 <LL_RCC_MSI_GetRange>
 80038c2:	4603      	mov	r3, r0
 80038c4:	0a1b      	lsrs	r3, r3, #8
 80038c6:	e003      	b.n	80038d0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80038c8:	f7ff fccc 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 80038cc:	4603      	mov	r3, r0
 80038ce:	0a1b      	lsrs	r3, r3, #8
 80038d0:	4a17      	ldr	r2, [pc, #92]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80038d2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038d6:	e010      	b.n	80038fa <RCC_PLL_GetFreqDomain_SYS+0xca>
 80038d8:	f7ff fca4 	bl	8003224 <LL_RCC_MSI_IsEnabledRangeSelect>
 80038dc:	4603      	mov	r3, r0
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80038e2:	f7ff fcb1 	bl	8003248 <LL_RCC_MSI_GetRange>
 80038e6:	4603      	mov	r3, r0
 80038e8:	091b      	lsrs	r3, r3, #4
 80038ea:	e003      	b.n	80038f4 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80038ec:	f7ff fcba 	bl	8003264 <LL_RCC_MSI_GetRangeAfterStandby>
 80038f0:	4603      	mov	r3, r0
 80038f2:	091b      	lsrs	r3, r3, #4
 80038f4:	4a0e      	ldr	r2, [pc, #56]	; (8003930 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80038f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fa:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80038fc:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80038fe:	f7ff fd49 	bl	8003394 <LL_RCC_PLL_GetDivider>
 8003902:	4603      	mov	r3, r0
 8003904:	091b      	lsrs	r3, r3, #4
 8003906:	3301      	adds	r3, #1
 8003908:	687a      	ldr	r2, [r7, #4]
 800390a:	fbb2 f4f3 	udiv	r4, r2, r3
 800390e:	f7ff fd25 	bl	800335c <LL_RCC_PLL_GetN>
 8003912:	4603      	mov	r3, r0
 8003914:	fb03 f404 	mul.w	r4, r3, r4
 8003918:	f7ff fd2e 	bl	8003378 <LL_RCC_PLL_GetR>
 800391c:	4603      	mov	r3, r0
 800391e:	0e5b      	lsrs	r3, r3, #25
 8003920:	3301      	adds	r3, #1
 8003922:	005b      	lsls	r3, r3, #1
 8003924:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003928:	4618      	mov	r0, r3
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	bd90      	pop	{r4, r7, pc}
 8003930:	08005c84 	.word	0x08005c84
 8003934:	00f42400 	.word	0x00f42400
 8003938:	007a1200 	.word	0x007a1200

0800393c <LL_SPI_IsEnabled>:
{
 800393c:	b480      	push	{r7}
 800393e:	b083      	sub	sp, #12
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800394c:	2b40      	cmp	r3, #64	; 0x40
 800394e:	d101      	bne.n	8003954 <LL_SPI_IsEnabled+0x18>
 8003950:	2301      	movs	r3, #1
 8003952:	e000      	b.n	8003956 <LL_SPI_IsEnabled+0x1a>
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	370c      	adds	r7, #12
 800395a:	46bd      	mov	sp, r7
 800395c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003960:	4770      	bx	lr

08003962 <LL_SPI_SetCRCPolynomial>:
{
 8003962:	b480      	push	{r7}
 8003964:	b083      	sub	sp, #12
 8003966:	af00      	add	r7, sp, #0
 8003968:	6078      	str	r0, [r7, #4]
 800396a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	b29b      	uxth	r3, r3
 8003970:	461a      	mov	r2, r3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	611a      	str	r2, [r3, #16]
}
 8003976:	bf00      	nop
 8003978:	370c      	adds	r7, #12
 800397a:	46bd      	mov	sp, r7
 800397c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003980:	4770      	bx	lr

08003982 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003982:	b580      	push	{r7, lr}
 8003984:	b084      	sub	sp, #16
 8003986:	af00      	add	r7, sp, #0
 8003988:	6078      	str	r0, [r7, #4]
 800398a:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800398c:	2301      	movs	r3, #1
 800398e:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003990:	6878      	ldr	r0, [r7, #4]
 8003992:	f7ff ffd3 	bl	800393c <LL_SPI_IsEnabled>
 8003996:	4603      	mov	r3, r0
 8003998:	2b00      	cmp	r3, #0
 800399a:	d13b      	bne.n	8003a14 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039a4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80039a8:	683a      	ldr	r2, [r7, #0]
 80039aa:	6811      	ldr	r1, [r2, #0]
 80039ac:	683a      	ldr	r2, [r7, #0]
 80039ae:	6852      	ldr	r2, [r2, #4]
 80039b0:	4311      	orrs	r1, r2
 80039b2:	683a      	ldr	r2, [r7, #0]
 80039b4:	68d2      	ldr	r2, [r2, #12]
 80039b6:	4311      	orrs	r1, r2
 80039b8:	683a      	ldr	r2, [r7, #0]
 80039ba:	6912      	ldr	r2, [r2, #16]
 80039bc:	4311      	orrs	r1, r2
 80039be:	683a      	ldr	r2, [r7, #0]
 80039c0:	6952      	ldr	r2, [r2, #20]
 80039c2:	4311      	orrs	r1, r2
 80039c4:	683a      	ldr	r2, [r7, #0]
 80039c6:	6992      	ldr	r2, [r2, #24]
 80039c8:	4311      	orrs	r1, r2
 80039ca:	683a      	ldr	r2, [r7, #0]
 80039cc:	69d2      	ldr	r2, [r2, #28]
 80039ce:	4311      	orrs	r1, r2
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	6a12      	ldr	r2, [r2, #32]
 80039d4:	430a      	orrs	r2, r1
 80039d6:	431a      	orrs	r2, r3
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	685b      	ldr	r3, [r3, #4]
 80039e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80039e4:	f023 0304 	bic.w	r3, r3, #4
 80039e8:	683a      	ldr	r2, [r7, #0]
 80039ea:	6891      	ldr	r1, [r2, #8]
 80039ec:	683a      	ldr	r2, [r7, #0]
 80039ee:	6952      	ldr	r2, [r2, #20]
 80039f0:	0c12      	lsrs	r2, r2, #16
 80039f2:	430a      	orrs	r2, r1
 80039f4:	431a      	orrs	r2, r3
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a02:	d105      	bne.n	8003a10 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f7ff ffa9 	bl	8003962 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003a10:	2300      	movs	r3, #0
 8003a12:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003a14:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a16:	4618      	mov	r0, r3
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}

08003a1e <LL_TIM_SetPrescaler>:
{
 8003a1e:	b480      	push	{r7}
 8003a20:	b083      	sub	sp, #12
 8003a22:	af00      	add	r7, sp, #0
 8003a24:	6078      	str	r0, [r7, #4]
 8003a26:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	683a      	ldr	r2, [r7, #0]
 8003a2c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003a2e:	bf00      	nop
 8003a30:	370c      	adds	r7, #12
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr

08003a3a <LL_TIM_SetAutoReload>:
{
 8003a3a:	b480      	push	{r7}
 8003a3c:	b083      	sub	sp, #12
 8003a3e:	af00      	add	r7, sp, #0
 8003a40:	6078      	str	r0, [r7, #4]
 8003a42:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	683a      	ldr	r2, [r7, #0]
 8003a48:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003a4a:	bf00      	nop
 8003a4c:	370c      	adds	r7, #12
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr

08003a56 <LL_TIM_SetRepetitionCounter>:
{
 8003a56:	b480      	push	{r7}
 8003a58:	b083      	sub	sp, #12
 8003a5a:	af00      	add	r7, sp, #0
 8003a5c:	6078      	str	r0, [r7, #4]
 8003a5e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	683a      	ldr	r2, [r7, #0]
 8003a64:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003a66:	bf00      	nop
 8003a68:	370c      	adds	r7, #12
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr

08003a72 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003a72:	b480      	push	{r7}
 8003a74:	b083      	sub	sp, #12
 8003a76:	af00      	add	r7, sp, #0
 8003a78:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f043 0201 	orr.w	r2, r3, #1
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	615a      	str	r2, [r3, #20]
}
 8003a86:	bf00      	nop
 8003a88:	370c      	adds	r7, #12
 8003a8a:	46bd      	mov	sp, r7
 8003a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a90:	4770      	bx	lr
	...

08003a94 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	4a3d      	ldr	r2, [pc, #244]	; (8003b9c <LL_TIM_Init+0x108>)
 8003aa8:	4293      	cmp	r3, r2
 8003aaa:	d013      	beq.n	8003ad4 <LL_TIM_Init+0x40>
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ab2:	d00f      	beq.n	8003ad4 <LL_TIM_Init+0x40>
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	4a3a      	ldr	r2, [pc, #232]	; (8003ba0 <LL_TIM_Init+0x10c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d00b      	beq.n	8003ad4 <LL_TIM_Init+0x40>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	4a39      	ldr	r2, [pc, #228]	; (8003ba4 <LL_TIM_Init+0x110>)
 8003ac0:	4293      	cmp	r3, r2
 8003ac2:	d007      	beq.n	8003ad4 <LL_TIM_Init+0x40>
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a38      	ldr	r2, [pc, #224]	; (8003ba8 <LL_TIM_Init+0x114>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d003      	beq.n	8003ad4 <LL_TIM_Init+0x40>
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	4a37      	ldr	r2, [pc, #220]	; (8003bac <LL_TIM_Init+0x118>)
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	d106      	bne.n	8003ae2 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	685b      	ldr	r3, [r3, #4]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	4a2d      	ldr	r2, [pc, #180]	; (8003b9c <LL_TIM_Init+0x108>)
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d01f      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003af0:	d01b      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	4a2a      	ldr	r2, [pc, #168]	; (8003ba0 <LL_TIM_Init+0x10c>)
 8003af6:	4293      	cmp	r3, r2
 8003af8:	d017      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	4a29      	ldr	r2, [pc, #164]	; (8003ba4 <LL_TIM_Init+0x110>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d013      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	4a28      	ldr	r2, [pc, #160]	; (8003ba8 <LL_TIM_Init+0x114>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d00f      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	4a27      	ldr	r2, [pc, #156]	; (8003bac <LL_TIM_Init+0x118>)
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d00b      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a26      	ldr	r2, [pc, #152]	; (8003bb0 <LL_TIM_Init+0x11c>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d007      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a25      	ldr	r2, [pc, #148]	; (8003bb4 <LL_TIM_Init+0x120>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d003      	beq.n	8003b2a <LL_TIM_Init+0x96>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a24      	ldr	r2, [pc, #144]	; (8003bb8 <LL_TIM_Init+0x124>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d106      	bne.n	8003b38 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003b30:	683b      	ldr	r3, [r7, #0]
 8003b32:	68db      	ldr	r3, [r3, #12]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	68fa      	ldr	r2, [r7, #12]
 8003b3c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	4619      	mov	r1, r3
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f7ff ff78 	bl	8003a3a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	881b      	ldrh	r3, [r3, #0]
 8003b4e:	4619      	mov	r1, r3
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7ff ff64 	bl	8003a1e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	4a10      	ldr	r2, [pc, #64]	; (8003b9c <LL_TIM_Init+0x108>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d00f      	beq.n	8003b7e <LL_TIM_Init+0xea>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	4a12      	ldr	r2, [pc, #72]	; (8003bac <LL_TIM_Init+0x118>)
 8003b62:	4293      	cmp	r3, r2
 8003b64:	d00b      	beq.n	8003b7e <LL_TIM_Init+0xea>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	4a11      	ldr	r2, [pc, #68]	; (8003bb0 <LL_TIM_Init+0x11c>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d007      	beq.n	8003b7e <LL_TIM_Init+0xea>
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	4a10      	ldr	r2, [pc, #64]	; (8003bb4 <LL_TIM_Init+0x120>)
 8003b72:	4293      	cmp	r3, r2
 8003b74:	d003      	beq.n	8003b7e <LL_TIM_Init+0xea>
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	4a0f      	ldr	r2, [pc, #60]	; (8003bb8 <LL_TIM_Init+0x124>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d105      	bne.n	8003b8a <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	4619      	mov	r1, r3
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f7ff ff66 	bl	8003a56 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f7ff ff71 	bl	8003a72 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}
 8003b9a:	bf00      	nop
 8003b9c:	40012c00 	.word	0x40012c00
 8003ba0:	40000400 	.word	0x40000400
 8003ba4:	40000800 	.word	0x40000800
 8003ba8:	40000c00 	.word	0x40000c00
 8003bac:	40013400 	.word	0x40013400
 8003bb0:	40014000 	.word	0x40014000
 8003bb4:	40014400 	.word	0x40014400
 8003bb8:	40014800 	.word	0x40014800

08003bbc <LL_USART_IsEnabled>:
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	2b01      	cmp	r3, #1
 8003bce:	d101      	bne.n	8003bd4 <LL_USART_IsEnabled+0x18>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <LL_USART_IsEnabled+0x1a>
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <LL_USART_SetStopBitsLength>:
{
 8003be2:	b480      	push	{r7}
 8003be4:	b083      	sub	sp, #12
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	6078      	str	r0, [r7, #4]
 8003bea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	431a      	orrs	r2, r3
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	605a      	str	r2, [r3, #4]
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c06:	4770      	bx	lr

08003c08 <LL_USART_SetHWFlowCtrl>:
{
 8003c08:	b480      	push	{r7}
 8003c0a:	b083      	sub	sp, #12
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	689b      	ldr	r3, [r3, #8]
 8003c16:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003c1a:	683b      	ldr	r3, [r7, #0]
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	609a      	str	r2, [r3, #8]
}
 8003c22:	bf00      	nop
 8003c24:	370c      	adds	r7, #12
 8003c26:	46bd      	mov	sp, r7
 8003c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2c:	4770      	bx	lr

08003c2e <LL_USART_SetBaudRate>:
{
 8003c2e:	b480      	push	{r7}
 8003c30:	b087      	sub	sp, #28
 8003c32:	af00      	add	r7, sp, #0
 8003c34:	60f8      	str	r0, [r7, #12]
 8003c36:	60b9      	str	r1, [r7, #8]
 8003c38:	607a      	str	r2, [r7, #4]
 8003c3a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c42:	d11a      	bne.n	8003c7a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	005a      	lsls	r2, r3, #1
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	085b      	lsrs	r3, r3, #1
 8003c4c:	441a      	add	r2, r3
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8003c58:	697a      	ldr	r2, [r7, #20]
 8003c5a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8003c5e:	4013      	ands	r3, r2
 8003c60:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	085b      	lsrs	r3, r3, #1
 8003c66:	b29b      	uxth	r3, r3
 8003c68:	f003 0307 	and.w	r3, r3, #7
 8003c6c:	693a      	ldr	r2, [r7, #16]
 8003c6e:	4313      	orrs	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	693a      	ldr	r2, [r7, #16]
 8003c76:	60da      	str	r2, [r3, #12]
}
 8003c78:	e00a      	b.n	8003c90 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	085a      	lsrs	r2, r3, #1
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	441a      	add	r2, r3
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c88:	b29b      	uxth	r3, r3
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	60da      	str	r2, [r3, #12]
}
 8003c90:	bf00      	nop
 8003c92:	371c      	adds	r7, #28
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b084      	sub	sp, #16
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
 8003ca4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8003caa:	2300      	movs	r3, #0
 8003cac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f7ff ff84 	bl	8003bbc <LL_USART_IsEnabled>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d15b      	bne.n	8003d72 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681a      	ldr	r2, [r3, #0]
 8003cbe:	4b2f      	ldr	r3, [pc, #188]	; (8003d7c <LL_USART_Init+0xe0>)
 8003cc0:	4013      	ands	r3, r2
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	6851      	ldr	r1, [r2, #4]
 8003cc6:	683a      	ldr	r2, [r7, #0]
 8003cc8:	68d2      	ldr	r2, [r2, #12]
 8003cca:	4311      	orrs	r1, r2
 8003ccc:	683a      	ldr	r2, [r7, #0]
 8003cce:	6912      	ldr	r2, [r2, #16]
 8003cd0:	4311      	orrs	r1, r2
 8003cd2:	683a      	ldr	r2, [r7, #0]
 8003cd4:	6992      	ldr	r2, [r2, #24]
 8003cd6:	430a      	orrs	r2, r1
 8003cd8:	431a      	orrs	r2, r3
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	689b      	ldr	r3, [r3, #8]
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6878      	ldr	r0, [r7, #4]
 8003ce6:	f7ff ff7c 	bl	8003be2 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	695b      	ldr	r3, [r3, #20]
 8003cee:	4619      	mov	r1, r3
 8003cf0:	6878      	ldr	r0, [r7, #4]
 8003cf2:	f7ff ff89 	bl	8003c08 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	4a21      	ldr	r2, [pc, #132]	; (8003d80 <LL_USART_Init+0xe4>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d104      	bne.n	8003d08 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8003cfe:	2003      	movs	r0, #3
 8003d00:	f7ff fb56 	bl	80033b0 <LL_RCC_GetUSARTClockFreq>
 8003d04:	60b8      	str	r0, [r7, #8]
 8003d06:	e023      	b.n	8003d50 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a1e      	ldr	r2, [pc, #120]	; (8003d84 <LL_USART_Init+0xe8>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d104      	bne.n	8003d1a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8003d10:	200c      	movs	r0, #12
 8003d12:	f7ff fb4d 	bl	80033b0 <LL_RCC_GetUSARTClockFreq>
 8003d16:	60b8      	str	r0, [r7, #8]
 8003d18:	e01a      	b.n	8003d50 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	4a1a      	ldr	r2, [pc, #104]	; (8003d88 <LL_USART_Init+0xec>)
 8003d1e:	4293      	cmp	r3, r2
 8003d20:	d104      	bne.n	8003d2c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8003d22:	2030      	movs	r0, #48	; 0x30
 8003d24:	f7ff fb44 	bl	80033b0 <LL_RCC_GetUSARTClockFreq>
 8003d28:	60b8      	str	r0, [r7, #8]
 8003d2a:	e011      	b.n	8003d50 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	4a17      	ldr	r2, [pc, #92]	; (8003d8c <LL_USART_Init+0xf0>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d104      	bne.n	8003d3e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8003d34:	20c0      	movs	r0, #192	; 0xc0
 8003d36:	f7ff fc1b 	bl	8003570 <LL_RCC_GetUARTClockFreq>
 8003d3a:	60b8      	str	r0, [r7, #8]
 8003d3c:	e008      	b.n	8003d50 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	4a13      	ldr	r2, [pc, #76]	; (8003d90 <LL_USART_Init+0xf4>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d104      	bne.n	8003d50 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8003d46:	f44f 7040 	mov.w	r0, #768	; 0x300
 8003d4a:	f7ff fc11 	bl	8003570 <LL_RCC_GetUARTClockFreq>
 8003d4e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d00d      	beq.n	8003d72 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d009      	beq.n	8003d72 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	68b9      	ldr	r1, [r7, #8]
 8003d6c:	6878      	ldr	r0, [r7, #4]
 8003d6e:	f7ff ff5e 	bl	8003c2e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8003d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d74:	4618      	mov	r0, r3
 8003d76:	3710      	adds	r7, #16
 8003d78:	46bd      	mov	sp, r7
 8003d7a:	bd80      	pop	{r7, pc}
 8003d7c:	efff69f3 	.word	0xefff69f3
 8003d80:	40013800 	.word	0x40013800
 8003d84:	40004400 	.word	0x40004400
 8003d88:	40004800 	.word	0x40004800
 8003d8c:	40004c00 	.word	0x40004c00
 8003d90:	40005000 	.word	0x40005000

08003d94 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8003d94:	b480      	push	{r7}
 8003d96:	b083      	sub	sp, #12
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
 8003d9c:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8003d9e:	687a      	ldr	r2, [r7, #4]
 8003da0:	683b      	ldr	r3, [r7, #0]
 8003da2:	fbb2 f3f3 	udiv	r3, r2, r3
 8003da6:	4a07      	ldr	r2, [pc, #28]	; (8003dc4 <LL_InitTick+0x30>)
 8003da8:	3b01      	subs	r3, #1
 8003daa:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8003dac:	4b05      	ldr	r3, [pc, #20]	; (8003dc4 <LL_InitTick+0x30>)
 8003dae:	2200      	movs	r2, #0
 8003db0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003db2:	4b04      	ldr	r3, [pc, #16]	; (8003dc4 <LL_InitTick+0x30>)
 8003db4:	2205      	movs	r2, #5
 8003db6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr
 8003dc4:	e000e010 	.word	0xe000e010

08003dc8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8003dd0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffdd 	bl	8003d94 <LL_InitTick>
}
 8003dda:	bf00      	nop
 8003ddc:	3708      	adds	r7, #8
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b085      	sub	sp, #20
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8003dec:	4b0f      	ldr	r3, [pc, #60]	; (8003e2c <LL_mDelay+0x48>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8003df6:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003dfe:	d00c      	beq.n	8003e1a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	3301      	adds	r3, #1
 8003e04:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8003e06:	e008      	b.n	8003e1a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003e08:	4b08      	ldr	r3, [pc, #32]	; (8003e2c <LL_mDelay+0x48>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d002      	beq.n	8003e1a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	3b01      	subs	r3, #1
 8003e18:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d1f3      	bne.n	8003e08 <LL_mDelay+0x24>
    }
  }
}
 8003e20:	bf00      	nop
 8003e22:	3714      	adds	r7, #20
 8003e24:	46bd      	mov	sp, r7
 8003e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2a:	4770      	bx	lr
 8003e2c:	e000e010 	.word	0xe000e010

08003e30 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003e30:	b480      	push	{r7}
 8003e32:	b083      	sub	sp, #12
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003e38:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <LL_SetSystemCoreClock+0x1c>)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	6013      	str	r3, [r2, #0]
}
 8003e3e:	bf00      	nop
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr
 8003e4a:	bf00      	nop
 8003e4c:	20000554 	.word	0x20000554

08003e50 <__errno>:
 8003e50:	4b01      	ldr	r3, [pc, #4]	; (8003e58 <__errno+0x8>)
 8003e52:	6818      	ldr	r0, [r3, #0]
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	20000558 	.word	0x20000558

08003e5c <__libc_init_array>:
 8003e5c:	b570      	push	{r4, r5, r6, lr}
 8003e5e:	4e0d      	ldr	r6, [pc, #52]	; (8003e94 <__libc_init_array+0x38>)
 8003e60:	4c0d      	ldr	r4, [pc, #52]	; (8003e98 <__libc_init_array+0x3c>)
 8003e62:	1ba4      	subs	r4, r4, r6
 8003e64:	10a4      	asrs	r4, r4, #2
 8003e66:	2500      	movs	r5, #0
 8003e68:	42a5      	cmp	r5, r4
 8003e6a:	d109      	bne.n	8003e80 <__libc_init_array+0x24>
 8003e6c:	4e0b      	ldr	r6, [pc, #44]	; (8003e9c <__libc_init_array+0x40>)
 8003e6e:	4c0c      	ldr	r4, [pc, #48]	; (8003ea0 <__libc_init_array+0x44>)
 8003e70:	f000 ff7a 	bl	8004d68 <_init>
 8003e74:	1ba4      	subs	r4, r4, r6
 8003e76:	10a4      	asrs	r4, r4, #2
 8003e78:	2500      	movs	r5, #0
 8003e7a:	42a5      	cmp	r5, r4
 8003e7c:	d105      	bne.n	8003e8a <__libc_init_array+0x2e>
 8003e7e:	bd70      	pop	{r4, r5, r6, pc}
 8003e80:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e84:	4798      	blx	r3
 8003e86:	3501      	adds	r5, #1
 8003e88:	e7ee      	b.n	8003e68 <__libc_init_array+0xc>
 8003e8a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003e8e:	4798      	blx	r3
 8003e90:	3501      	adds	r5, #1
 8003e92:	e7f2      	b.n	8003e7a <__libc_init_array+0x1e>
 8003e94:	08005d54 	.word	0x08005d54
 8003e98:	08005d54 	.word	0x08005d54
 8003e9c:	08005d54 	.word	0x08005d54
 8003ea0:	08005d58 	.word	0x08005d58

08003ea4 <memset>:
 8003ea4:	4402      	add	r2, r0
 8003ea6:	4603      	mov	r3, r0
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d100      	bne.n	8003eae <memset+0xa>
 8003eac:	4770      	bx	lr
 8003eae:	f803 1b01 	strb.w	r1, [r3], #1
 8003eb2:	e7f9      	b.n	8003ea8 <memset+0x4>

08003eb4 <iprintf>:
 8003eb4:	b40f      	push	{r0, r1, r2, r3}
 8003eb6:	4b0a      	ldr	r3, [pc, #40]	; (8003ee0 <iprintf+0x2c>)
 8003eb8:	b513      	push	{r0, r1, r4, lr}
 8003eba:	681c      	ldr	r4, [r3, #0]
 8003ebc:	b124      	cbz	r4, 8003ec8 <iprintf+0x14>
 8003ebe:	69a3      	ldr	r3, [r4, #24]
 8003ec0:	b913      	cbnz	r3, 8003ec8 <iprintf+0x14>
 8003ec2:	4620      	mov	r0, r4
 8003ec4:	f000 fa34 	bl	8004330 <__sinit>
 8003ec8:	ab05      	add	r3, sp, #20
 8003eca:	9a04      	ldr	r2, [sp, #16]
 8003ecc:	68a1      	ldr	r1, [r4, #8]
 8003ece:	9301      	str	r3, [sp, #4]
 8003ed0:	4620      	mov	r0, r4
 8003ed2:	f000 fbed 	bl	80046b0 <_vfiprintf_r>
 8003ed6:	b002      	add	sp, #8
 8003ed8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003edc:	b004      	add	sp, #16
 8003ede:	4770      	bx	lr
 8003ee0:	20000558 	.word	0x20000558

08003ee4 <_puts_r>:
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	460e      	mov	r6, r1
 8003ee8:	4605      	mov	r5, r0
 8003eea:	b118      	cbz	r0, 8003ef4 <_puts_r+0x10>
 8003eec:	6983      	ldr	r3, [r0, #24]
 8003eee:	b90b      	cbnz	r3, 8003ef4 <_puts_r+0x10>
 8003ef0:	f000 fa1e 	bl	8004330 <__sinit>
 8003ef4:	69ab      	ldr	r3, [r5, #24]
 8003ef6:	68ac      	ldr	r4, [r5, #8]
 8003ef8:	b913      	cbnz	r3, 8003f00 <_puts_r+0x1c>
 8003efa:	4628      	mov	r0, r5
 8003efc:	f000 fa18 	bl	8004330 <__sinit>
 8003f00:	4b23      	ldr	r3, [pc, #140]	; (8003f90 <_puts_r+0xac>)
 8003f02:	429c      	cmp	r4, r3
 8003f04:	d117      	bne.n	8003f36 <_puts_r+0x52>
 8003f06:	686c      	ldr	r4, [r5, #4]
 8003f08:	89a3      	ldrh	r3, [r4, #12]
 8003f0a:	071b      	lsls	r3, r3, #28
 8003f0c:	d51d      	bpl.n	8003f4a <_puts_r+0x66>
 8003f0e:	6923      	ldr	r3, [r4, #16]
 8003f10:	b1db      	cbz	r3, 8003f4a <_puts_r+0x66>
 8003f12:	3e01      	subs	r6, #1
 8003f14:	68a3      	ldr	r3, [r4, #8]
 8003f16:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	60a3      	str	r3, [r4, #8]
 8003f1e:	b9e9      	cbnz	r1, 8003f5c <_puts_r+0x78>
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	da2e      	bge.n	8003f82 <_puts_r+0x9e>
 8003f24:	4622      	mov	r2, r4
 8003f26:	210a      	movs	r1, #10
 8003f28:	4628      	mov	r0, r5
 8003f2a:	f000 f851 	bl	8003fd0 <__swbuf_r>
 8003f2e:	3001      	adds	r0, #1
 8003f30:	d011      	beq.n	8003f56 <_puts_r+0x72>
 8003f32:	200a      	movs	r0, #10
 8003f34:	e011      	b.n	8003f5a <_puts_r+0x76>
 8003f36:	4b17      	ldr	r3, [pc, #92]	; (8003f94 <_puts_r+0xb0>)
 8003f38:	429c      	cmp	r4, r3
 8003f3a:	d101      	bne.n	8003f40 <_puts_r+0x5c>
 8003f3c:	68ac      	ldr	r4, [r5, #8]
 8003f3e:	e7e3      	b.n	8003f08 <_puts_r+0x24>
 8003f40:	4b15      	ldr	r3, [pc, #84]	; (8003f98 <_puts_r+0xb4>)
 8003f42:	429c      	cmp	r4, r3
 8003f44:	bf08      	it	eq
 8003f46:	68ec      	ldreq	r4, [r5, #12]
 8003f48:	e7de      	b.n	8003f08 <_puts_r+0x24>
 8003f4a:	4621      	mov	r1, r4
 8003f4c:	4628      	mov	r0, r5
 8003f4e:	f000 f891 	bl	8004074 <__swsetup_r>
 8003f52:	2800      	cmp	r0, #0
 8003f54:	d0dd      	beq.n	8003f12 <_puts_r+0x2e>
 8003f56:	f04f 30ff 	mov.w	r0, #4294967295
 8003f5a:	bd70      	pop	{r4, r5, r6, pc}
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	da04      	bge.n	8003f6a <_puts_r+0x86>
 8003f60:	69a2      	ldr	r2, [r4, #24]
 8003f62:	429a      	cmp	r2, r3
 8003f64:	dc06      	bgt.n	8003f74 <_puts_r+0x90>
 8003f66:	290a      	cmp	r1, #10
 8003f68:	d004      	beq.n	8003f74 <_puts_r+0x90>
 8003f6a:	6823      	ldr	r3, [r4, #0]
 8003f6c:	1c5a      	adds	r2, r3, #1
 8003f6e:	6022      	str	r2, [r4, #0]
 8003f70:	7019      	strb	r1, [r3, #0]
 8003f72:	e7cf      	b.n	8003f14 <_puts_r+0x30>
 8003f74:	4622      	mov	r2, r4
 8003f76:	4628      	mov	r0, r5
 8003f78:	f000 f82a 	bl	8003fd0 <__swbuf_r>
 8003f7c:	3001      	adds	r0, #1
 8003f7e:	d1c9      	bne.n	8003f14 <_puts_r+0x30>
 8003f80:	e7e9      	b.n	8003f56 <_puts_r+0x72>
 8003f82:	6823      	ldr	r3, [r4, #0]
 8003f84:	200a      	movs	r0, #10
 8003f86:	1c5a      	adds	r2, r3, #1
 8003f88:	6022      	str	r2, [r4, #0]
 8003f8a:	7018      	strb	r0, [r3, #0]
 8003f8c:	e7e5      	b.n	8003f5a <_puts_r+0x76>
 8003f8e:	bf00      	nop
 8003f90:	08005cd8 	.word	0x08005cd8
 8003f94:	08005cf8 	.word	0x08005cf8
 8003f98:	08005cb8 	.word	0x08005cb8

08003f9c <puts>:
 8003f9c:	4b02      	ldr	r3, [pc, #8]	; (8003fa8 <puts+0xc>)
 8003f9e:	4601      	mov	r1, r0
 8003fa0:	6818      	ldr	r0, [r3, #0]
 8003fa2:	f7ff bf9f 	b.w	8003ee4 <_puts_r>
 8003fa6:	bf00      	nop
 8003fa8:	20000558 	.word	0x20000558

08003fac <strncmp>:
 8003fac:	b510      	push	{r4, lr}
 8003fae:	b16a      	cbz	r2, 8003fcc <strncmp+0x20>
 8003fb0:	3901      	subs	r1, #1
 8003fb2:	1884      	adds	r4, r0, r2
 8003fb4:	f810 3b01 	ldrb.w	r3, [r0], #1
 8003fb8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8003fbc:	4293      	cmp	r3, r2
 8003fbe:	d103      	bne.n	8003fc8 <strncmp+0x1c>
 8003fc0:	42a0      	cmp	r0, r4
 8003fc2:	d001      	beq.n	8003fc8 <strncmp+0x1c>
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d1f5      	bne.n	8003fb4 <strncmp+0x8>
 8003fc8:	1a98      	subs	r0, r3, r2
 8003fca:	bd10      	pop	{r4, pc}
 8003fcc:	4610      	mov	r0, r2
 8003fce:	e7fc      	b.n	8003fca <strncmp+0x1e>

08003fd0 <__swbuf_r>:
 8003fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fd2:	460e      	mov	r6, r1
 8003fd4:	4614      	mov	r4, r2
 8003fd6:	4605      	mov	r5, r0
 8003fd8:	b118      	cbz	r0, 8003fe2 <__swbuf_r+0x12>
 8003fda:	6983      	ldr	r3, [r0, #24]
 8003fdc:	b90b      	cbnz	r3, 8003fe2 <__swbuf_r+0x12>
 8003fde:	f000 f9a7 	bl	8004330 <__sinit>
 8003fe2:	4b21      	ldr	r3, [pc, #132]	; (8004068 <__swbuf_r+0x98>)
 8003fe4:	429c      	cmp	r4, r3
 8003fe6:	d12a      	bne.n	800403e <__swbuf_r+0x6e>
 8003fe8:	686c      	ldr	r4, [r5, #4]
 8003fea:	69a3      	ldr	r3, [r4, #24]
 8003fec:	60a3      	str	r3, [r4, #8]
 8003fee:	89a3      	ldrh	r3, [r4, #12]
 8003ff0:	071a      	lsls	r2, r3, #28
 8003ff2:	d52e      	bpl.n	8004052 <__swbuf_r+0x82>
 8003ff4:	6923      	ldr	r3, [r4, #16]
 8003ff6:	b363      	cbz	r3, 8004052 <__swbuf_r+0x82>
 8003ff8:	6923      	ldr	r3, [r4, #16]
 8003ffa:	6820      	ldr	r0, [r4, #0]
 8003ffc:	1ac0      	subs	r0, r0, r3
 8003ffe:	6963      	ldr	r3, [r4, #20]
 8004000:	b2f6      	uxtb	r6, r6
 8004002:	4283      	cmp	r3, r0
 8004004:	4637      	mov	r7, r6
 8004006:	dc04      	bgt.n	8004012 <__swbuf_r+0x42>
 8004008:	4621      	mov	r1, r4
 800400a:	4628      	mov	r0, r5
 800400c:	f000 f926 	bl	800425c <_fflush_r>
 8004010:	bb28      	cbnz	r0, 800405e <__swbuf_r+0x8e>
 8004012:	68a3      	ldr	r3, [r4, #8]
 8004014:	3b01      	subs	r3, #1
 8004016:	60a3      	str	r3, [r4, #8]
 8004018:	6823      	ldr	r3, [r4, #0]
 800401a:	1c5a      	adds	r2, r3, #1
 800401c:	6022      	str	r2, [r4, #0]
 800401e:	701e      	strb	r6, [r3, #0]
 8004020:	6963      	ldr	r3, [r4, #20]
 8004022:	3001      	adds	r0, #1
 8004024:	4283      	cmp	r3, r0
 8004026:	d004      	beq.n	8004032 <__swbuf_r+0x62>
 8004028:	89a3      	ldrh	r3, [r4, #12]
 800402a:	07db      	lsls	r3, r3, #31
 800402c:	d519      	bpl.n	8004062 <__swbuf_r+0x92>
 800402e:	2e0a      	cmp	r6, #10
 8004030:	d117      	bne.n	8004062 <__swbuf_r+0x92>
 8004032:	4621      	mov	r1, r4
 8004034:	4628      	mov	r0, r5
 8004036:	f000 f911 	bl	800425c <_fflush_r>
 800403a:	b190      	cbz	r0, 8004062 <__swbuf_r+0x92>
 800403c:	e00f      	b.n	800405e <__swbuf_r+0x8e>
 800403e:	4b0b      	ldr	r3, [pc, #44]	; (800406c <__swbuf_r+0x9c>)
 8004040:	429c      	cmp	r4, r3
 8004042:	d101      	bne.n	8004048 <__swbuf_r+0x78>
 8004044:	68ac      	ldr	r4, [r5, #8]
 8004046:	e7d0      	b.n	8003fea <__swbuf_r+0x1a>
 8004048:	4b09      	ldr	r3, [pc, #36]	; (8004070 <__swbuf_r+0xa0>)
 800404a:	429c      	cmp	r4, r3
 800404c:	bf08      	it	eq
 800404e:	68ec      	ldreq	r4, [r5, #12]
 8004050:	e7cb      	b.n	8003fea <__swbuf_r+0x1a>
 8004052:	4621      	mov	r1, r4
 8004054:	4628      	mov	r0, r5
 8004056:	f000 f80d 	bl	8004074 <__swsetup_r>
 800405a:	2800      	cmp	r0, #0
 800405c:	d0cc      	beq.n	8003ff8 <__swbuf_r+0x28>
 800405e:	f04f 37ff 	mov.w	r7, #4294967295
 8004062:	4638      	mov	r0, r7
 8004064:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004066:	bf00      	nop
 8004068:	08005cd8 	.word	0x08005cd8
 800406c:	08005cf8 	.word	0x08005cf8
 8004070:	08005cb8 	.word	0x08005cb8

08004074 <__swsetup_r>:
 8004074:	4b32      	ldr	r3, [pc, #200]	; (8004140 <__swsetup_r+0xcc>)
 8004076:	b570      	push	{r4, r5, r6, lr}
 8004078:	681d      	ldr	r5, [r3, #0]
 800407a:	4606      	mov	r6, r0
 800407c:	460c      	mov	r4, r1
 800407e:	b125      	cbz	r5, 800408a <__swsetup_r+0x16>
 8004080:	69ab      	ldr	r3, [r5, #24]
 8004082:	b913      	cbnz	r3, 800408a <__swsetup_r+0x16>
 8004084:	4628      	mov	r0, r5
 8004086:	f000 f953 	bl	8004330 <__sinit>
 800408a:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <__swsetup_r+0xd0>)
 800408c:	429c      	cmp	r4, r3
 800408e:	d10f      	bne.n	80040b0 <__swsetup_r+0x3c>
 8004090:	686c      	ldr	r4, [r5, #4]
 8004092:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004096:	b29a      	uxth	r2, r3
 8004098:	0715      	lsls	r5, r2, #28
 800409a:	d42c      	bmi.n	80040f6 <__swsetup_r+0x82>
 800409c:	06d0      	lsls	r0, r2, #27
 800409e:	d411      	bmi.n	80040c4 <__swsetup_r+0x50>
 80040a0:	2209      	movs	r2, #9
 80040a2:	6032      	str	r2, [r6, #0]
 80040a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040a8:	81a3      	strh	r3, [r4, #12]
 80040aa:	f04f 30ff 	mov.w	r0, #4294967295
 80040ae:	e03e      	b.n	800412e <__swsetup_r+0xba>
 80040b0:	4b25      	ldr	r3, [pc, #148]	; (8004148 <__swsetup_r+0xd4>)
 80040b2:	429c      	cmp	r4, r3
 80040b4:	d101      	bne.n	80040ba <__swsetup_r+0x46>
 80040b6:	68ac      	ldr	r4, [r5, #8]
 80040b8:	e7eb      	b.n	8004092 <__swsetup_r+0x1e>
 80040ba:	4b24      	ldr	r3, [pc, #144]	; (800414c <__swsetup_r+0xd8>)
 80040bc:	429c      	cmp	r4, r3
 80040be:	bf08      	it	eq
 80040c0:	68ec      	ldreq	r4, [r5, #12]
 80040c2:	e7e6      	b.n	8004092 <__swsetup_r+0x1e>
 80040c4:	0751      	lsls	r1, r2, #29
 80040c6:	d512      	bpl.n	80040ee <__swsetup_r+0x7a>
 80040c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80040ca:	b141      	cbz	r1, 80040de <__swsetup_r+0x6a>
 80040cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80040d0:	4299      	cmp	r1, r3
 80040d2:	d002      	beq.n	80040da <__swsetup_r+0x66>
 80040d4:	4630      	mov	r0, r6
 80040d6:	f000 fa19 	bl	800450c <_free_r>
 80040da:	2300      	movs	r3, #0
 80040dc:	6363      	str	r3, [r4, #52]	; 0x34
 80040de:	89a3      	ldrh	r3, [r4, #12]
 80040e0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80040e4:	81a3      	strh	r3, [r4, #12]
 80040e6:	2300      	movs	r3, #0
 80040e8:	6063      	str	r3, [r4, #4]
 80040ea:	6923      	ldr	r3, [r4, #16]
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	89a3      	ldrh	r3, [r4, #12]
 80040f0:	f043 0308 	orr.w	r3, r3, #8
 80040f4:	81a3      	strh	r3, [r4, #12]
 80040f6:	6923      	ldr	r3, [r4, #16]
 80040f8:	b94b      	cbnz	r3, 800410e <__swsetup_r+0x9a>
 80040fa:	89a3      	ldrh	r3, [r4, #12]
 80040fc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004100:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004104:	d003      	beq.n	800410e <__swsetup_r+0x9a>
 8004106:	4621      	mov	r1, r4
 8004108:	4630      	mov	r0, r6
 800410a:	f000 f9bf 	bl	800448c <__smakebuf_r>
 800410e:	89a2      	ldrh	r2, [r4, #12]
 8004110:	f012 0301 	ands.w	r3, r2, #1
 8004114:	d00c      	beq.n	8004130 <__swsetup_r+0xbc>
 8004116:	2300      	movs	r3, #0
 8004118:	60a3      	str	r3, [r4, #8]
 800411a:	6963      	ldr	r3, [r4, #20]
 800411c:	425b      	negs	r3, r3
 800411e:	61a3      	str	r3, [r4, #24]
 8004120:	6923      	ldr	r3, [r4, #16]
 8004122:	b953      	cbnz	r3, 800413a <__swsetup_r+0xc6>
 8004124:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004128:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 800412c:	d1ba      	bne.n	80040a4 <__swsetup_r+0x30>
 800412e:	bd70      	pop	{r4, r5, r6, pc}
 8004130:	0792      	lsls	r2, r2, #30
 8004132:	bf58      	it	pl
 8004134:	6963      	ldrpl	r3, [r4, #20]
 8004136:	60a3      	str	r3, [r4, #8]
 8004138:	e7f2      	b.n	8004120 <__swsetup_r+0xac>
 800413a:	2000      	movs	r0, #0
 800413c:	e7f7      	b.n	800412e <__swsetup_r+0xba>
 800413e:	bf00      	nop
 8004140:	20000558 	.word	0x20000558
 8004144:	08005cd8 	.word	0x08005cd8
 8004148:	08005cf8 	.word	0x08005cf8
 800414c:	08005cb8 	.word	0x08005cb8

08004150 <__sflush_r>:
 8004150:	898a      	ldrh	r2, [r1, #12]
 8004152:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004156:	4605      	mov	r5, r0
 8004158:	0710      	lsls	r0, r2, #28
 800415a:	460c      	mov	r4, r1
 800415c:	d458      	bmi.n	8004210 <__sflush_r+0xc0>
 800415e:	684b      	ldr	r3, [r1, #4]
 8004160:	2b00      	cmp	r3, #0
 8004162:	dc05      	bgt.n	8004170 <__sflush_r+0x20>
 8004164:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004166:	2b00      	cmp	r3, #0
 8004168:	dc02      	bgt.n	8004170 <__sflush_r+0x20>
 800416a:	2000      	movs	r0, #0
 800416c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004170:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004172:	2e00      	cmp	r6, #0
 8004174:	d0f9      	beq.n	800416a <__sflush_r+0x1a>
 8004176:	2300      	movs	r3, #0
 8004178:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800417c:	682f      	ldr	r7, [r5, #0]
 800417e:	6a21      	ldr	r1, [r4, #32]
 8004180:	602b      	str	r3, [r5, #0]
 8004182:	d032      	beq.n	80041ea <__sflush_r+0x9a>
 8004184:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004186:	89a3      	ldrh	r3, [r4, #12]
 8004188:	075a      	lsls	r2, r3, #29
 800418a:	d505      	bpl.n	8004198 <__sflush_r+0x48>
 800418c:	6863      	ldr	r3, [r4, #4]
 800418e:	1ac0      	subs	r0, r0, r3
 8004190:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004192:	b10b      	cbz	r3, 8004198 <__sflush_r+0x48>
 8004194:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004196:	1ac0      	subs	r0, r0, r3
 8004198:	2300      	movs	r3, #0
 800419a:	4602      	mov	r2, r0
 800419c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800419e:	6a21      	ldr	r1, [r4, #32]
 80041a0:	4628      	mov	r0, r5
 80041a2:	47b0      	blx	r6
 80041a4:	1c43      	adds	r3, r0, #1
 80041a6:	89a3      	ldrh	r3, [r4, #12]
 80041a8:	d106      	bne.n	80041b8 <__sflush_r+0x68>
 80041aa:	6829      	ldr	r1, [r5, #0]
 80041ac:	291d      	cmp	r1, #29
 80041ae:	d848      	bhi.n	8004242 <__sflush_r+0xf2>
 80041b0:	4a29      	ldr	r2, [pc, #164]	; (8004258 <__sflush_r+0x108>)
 80041b2:	40ca      	lsrs	r2, r1
 80041b4:	07d6      	lsls	r6, r2, #31
 80041b6:	d544      	bpl.n	8004242 <__sflush_r+0xf2>
 80041b8:	2200      	movs	r2, #0
 80041ba:	6062      	str	r2, [r4, #4]
 80041bc:	04d9      	lsls	r1, r3, #19
 80041be:	6922      	ldr	r2, [r4, #16]
 80041c0:	6022      	str	r2, [r4, #0]
 80041c2:	d504      	bpl.n	80041ce <__sflush_r+0x7e>
 80041c4:	1c42      	adds	r2, r0, #1
 80041c6:	d101      	bne.n	80041cc <__sflush_r+0x7c>
 80041c8:	682b      	ldr	r3, [r5, #0]
 80041ca:	b903      	cbnz	r3, 80041ce <__sflush_r+0x7e>
 80041cc:	6560      	str	r0, [r4, #84]	; 0x54
 80041ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80041d0:	602f      	str	r7, [r5, #0]
 80041d2:	2900      	cmp	r1, #0
 80041d4:	d0c9      	beq.n	800416a <__sflush_r+0x1a>
 80041d6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80041da:	4299      	cmp	r1, r3
 80041dc:	d002      	beq.n	80041e4 <__sflush_r+0x94>
 80041de:	4628      	mov	r0, r5
 80041e0:	f000 f994 	bl	800450c <_free_r>
 80041e4:	2000      	movs	r0, #0
 80041e6:	6360      	str	r0, [r4, #52]	; 0x34
 80041e8:	e7c0      	b.n	800416c <__sflush_r+0x1c>
 80041ea:	2301      	movs	r3, #1
 80041ec:	4628      	mov	r0, r5
 80041ee:	47b0      	blx	r6
 80041f0:	1c41      	adds	r1, r0, #1
 80041f2:	d1c8      	bne.n	8004186 <__sflush_r+0x36>
 80041f4:	682b      	ldr	r3, [r5, #0]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0c5      	beq.n	8004186 <__sflush_r+0x36>
 80041fa:	2b1d      	cmp	r3, #29
 80041fc:	d001      	beq.n	8004202 <__sflush_r+0xb2>
 80041fe:	2b16      	cmp	r3, #22
 8004200:	d101      	bne.n	8004206 <__sflush_r+0xb6>
 8004202:	602f      	str	r7, [r5, #0]
 8004204:	e7b1      	b.n	800416a <__sflush_r+0x1a>
 8004206:	89a3      	ldrh	r3, [r4, #12]
 8004208:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800420c:	81a3      	strh	r3, [r4, #12]
 800420e:	e7ad      	b.n	800416c <__sflush_r+0x1c>
 8004210:	690f      	ldr	r7, [r1, #16]
 8004212:	2f00      	cmp	r7, #0
 8004214:	d0a9      	beq.n	800416a <__sflush_r+0x1a>
 8004216:	0793      	lsls	r3, r2, #30
 8004218:	680e      	ldr	r6, [r1, #0]
 800421a:	bf08      	it	eq
 800421c:	694b      	ldreq	r3, [r1, #20]
 800421e:	600f      	str	r7, [r1, #0]
 8004220:	bf18      	it	ne
 8004222:	2300      	movne	r3, #0
 8004224:	eba6 0807 	sub.w	r8, r6, r7
 8004228:	608b      	str	r3, [r1, #8]
 800422a:	f1b8 0f00 	cmp.w	r8, #0
 800422e:	dd9c      	ble.n	800416a <__sflush_r+0x1a>
 8004230:	4643      	mov	r3, r8
 8004232:	463a      	mov	r2, r7
 8004234:	6a21      	ldr	r1, [r4, #32]
 8004236:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004238:	4628      	mov	r0, r5
 800423a:	47b0      	blx	r6
 800423c:	2800      	cmp	r0, #0
 800423e:	dc06      	bgt.n	800424e <__sflush_r+0xfe>
 8004240:	89a3      	ldrh	r3, [r4, #12]
 8004242:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004246:	81a3      	strh	r3, [r4, #12]
 8004248:	f04f 30ff 	mov.w	r0, #4294967295
 800424c:	e78e      	b.n	800416c <__sflush_r+0x1c>
 800424e:	4407      	add	r7, r0
 8004250:	eba8 0800 	sub.w	r8, r8, r0
 8004254:	e7e9      	b.n	800422a <__sflush_r+0xda>
 8004256:	bf00      	nop
 8004258:	20400001 	.word	0x20400001

0800425c <_fflush_r>:
 800425c:	b538      	push	{r3, r4, r5, lr}
 800425e:	690b      	ldr	r3, [r1, #16]
 8004260:	4605      	mov	r5, r0
 8004262:	460c      	mov	r4, r1
 8004264:	b1db      	cbz	r3, 800429e <_fflush_r+0x42>
 8004266:	b118      	cbz	r0, 8004270 <_fflush_r+0x14>
 8004268:	6983      	ldr	r3, [r0, #24]
 800426a:	b90b      	cbnz	r3, 8004270 <_fflush_r+0x14>
 800426c:	f000 f860 	bl	8004330 <__sinit>
 8004270:	4b0c      	ldr	r3, [pc, #48]	; (80042a4 <_fflush_r+0x48>)
 8004272:	429c      	cmp	r4, r3
 8004274:	d109      	bne.n	800428a <_fflush_r+0x2e>
 8004276:	686c      	ldr	r4, [r5, #4]
 8004278:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800427c:	b17b      	cbz	r3, 800429e <_fflush_r+0x42>
 800427e:	4621      	mov	r1, r4
 8004280:	4628      	mov	r0, r5
 8004282:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004286:	f7ff bf63 	b.w	8004150 <__sflush_r>
 800428a:	4b07      	ldr	r3, [pc, #28]	; (80042a8 <_fflush_r+0x4c>)
 800428c:	429c      	cmp	r4, r3
 800428e:	d101      	bne.n	8004294 <_fflush_r+0x38>
 8004290:	68ac      	ldr	r4, [r5, #8]
 8004292:	e7f1      	b.n	8004278 <_fflush_r+0x1c>
 8004294:	4b05      	ldr	r3, [pc, #20]	; (80042ac <_fflush_r+0x50>)
 8004296:	429c      	cmp	r4, r3
 8004298:	bf08      	it	eq
 800429a:	68ec      	ldreq	r4, [r5, #12]
 800429c:	e7ec      	b.n	8004278 <_fflush_r+0x1c>
 800429e:	2000      	movs	r0, #0
 80042a0:	bd38      	pop	{r3, r4, r5, pc}
 80042a2:	bf00      	nop
 80042a4:	08005cd8 	.word	0x08005cd8
 80042a8:	08005cf8 	.word	0x08005cf8
 80042ac:	08005cb8 	.word	0x08005cb8

080042b0 <std>:
 80042b0:	2300      	movs	r3, #0
 80042b2:	b510      	push	{r4, lr}
 80042b4:	4604      	mov	r4, r0
 80042b6:	e9c0 3300 	strd	r3, r3, [r0]
 80042ba:	6083      	str	r3, [r0, #8]
 80042bc:	8181      	strh	r1, [r0, #12]
 80042be:	6643      	str	r3, [r0, #100]	; 0x64
 80042c0:	81c2      	strh	r2, [r0, #14]
 80042c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80042c6:	6183      	str	r3, [r0, #24]
 80042c8:	4619      	mov	r1, r3
 80042ca:	2208      	movs	r2, #8
 80042cc:	305c      	adds	r0, #92	; 0x5c
 80042ce:	f7ff fde9 	bl	8003ea4 <memset>
 80042d2:	4b05      	ldr	r3, [pc, #20]	; (80042e8 <std+0x38>)
 80042d4:	6263      	str	r3, [r4, #36]	; 0x24
 80042d6:	4b05      	ldr	r3, [pc, #20]	; (80042ec <std+0x3c>)
 80042d8:	62a3      	str	r3, [r4, #40]	; 0x28
 80042da:	4b05      	ldr	r3, [pc, #20]	; (80042f0 <std+0x40>)
 80042dc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80042de:	4b05      	ldr	r3, [pc, #20]	; (80042f4 <std+0x44>)
 80042e0:	6224      	str	r4, [r4, #32]
 80042e2:	6323      	str	r3, [r4, #48]	; 0x30
 80042e4:	bd10      	pop	{r4, pc}
 80042e6:	bf00      	nop
 80042e8:	08004c0d 	.word	0x08004c0d
 80042ec:	08004c2f 	.word	0x08004c2f
 80042f0:	08004c67 	.word	0x08004c67
 80042f4:	08004c8b 	.word	0x08004c8b

080042f8 <_cleanup_r>:
 80042f8:	4901      	ldr	r1, [pc, #4]	; (8004300 <_cleanup_r+0x8>)
 80042fa:	f000 b885 	b.w	8004408 <_fwalk_reent>
 80042fe:	bf00      	nop
 8004300:	0800425d 	.word	0x0800425d

08004304 <__sfmoreglue>:
 8004304:	b570      	push	{r4, r5, r6, lr}
 8004306:	1e4a      	subs	r2, r1, #1
 8004308:	2568      	movs	r5, #104	; 0x68
 800430a:	4355      	muls	r5, r2
 800430c:	460e      	mov	r6, r1
 800430e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004312:	f000 f949 	bl	80045a8 <_malloc_r>
 8004316:	4604      	mov	r4, r0
 8004318:	b140      	cbz	r0, 800432c <__sfmoreglue+0x28>
 800431a:	2100      	movs	r1, #0
 800431c:	e9c0 1600 	strd	r1, r6, [r0]
 8004320:	300c      	adds	r0, #12
 8004322:	60a0      	str	r0, [r4, #8]
 8004324:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004328:	f7ff fdbc 	bl	8003ea4 <memset>
 800432c:	4620      	mov	r0, r4
 800432e:	bd70      	pop	{r4, r5, r6, pc}

08004330 <__sinit>:
 8004330:	6983      	ldr	r3, [r0, #24]
 8004332:	b510      	push	{r4, lr}
 8004334:	4604      	mov	r4, r0
 8004336:	bb33      	cbnz	r3, 8004386 <__sinit+0x56>
 8004338:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 800433c:	6503      	str	r3, [r0, #80]	; 0x50
 800433e:	4b12      	ldr	r3, [pc, #72]	; (8004388 <__sinit+0x58>)
 8004340:	4a12      	ldr	r2, [pc, #72]	; (800438c <__sinit+0x5c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	6282      	str	r2, [r0, #40]	; 0x28
 8004346:	4298      	cmp	r0, r3
 8004348:	bf04      	itt	eq
 800434a:	2301      	moveq	r3, #1
 800434c:	6183      	streq	r3, [r0, #24]
 800434e:	f000 f81f 	bl	8004390 <__sfp>
 8004352:	6060      	str	r0, [r4, #4]
 8004354:	4620      	mov	r0, r4
 8004356:	f000 f81b 	bl	8004390 <__sfp>
 800435a:	60a0      	str	r0, [r4, #8]
 800435c:	4620      	mov	r0, r4
 800435e:	f000 f817 	bl	8004390 <__sfp>
 8004362:	2200      	movs	r2, #0
 8004364:	60e0      	str	r0, [r4, #12]
 8004366:	2104      	movs	r1, #4
 8004368:	6860      	ldr	r0, [r4, #4]
 800436a:	f7ff ffa1 	bl	80042b0 <std>
 800436e:	2201      	movs	r2, #1
 8004370:	2109      	movs	r1, #9
 8004372:	68a0      	ldr	r0, [r4, #8]
 8004374:	f7ff ff9c 	bl	80042b0 <std>
 8004378:	2202      	movs	r2, #2
 800437a:	2112      	movs	r1, #18
 800437c:	68e0      	ldr	r0, [r4, #12]
 800437e:	f7ff ff97 	bl	80042b0 <std>
 8004382:	2301      	movs	r3, #1
 8004384:	61a3      	str	r3, [r4, #24]
 8004386:	bd10      	pop	{r4, pc}
 8004388:	08005cb4 	.word	0x08005cb4
 800438c:	080042f9 	.word	0x080042f9

08004390 <__sfp>:
 8004390:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004392:	4b1b      	ldr	r3, [pc, #108]	; (8004400 <__sfp+0x70>)
 8004394:	681e      	ldr	r6, [r3, #0]
 8004396:	69b3      	ldr	r3, [r6, #24]
 8004398:	4607      	mov	r7, r0
 800439a:	b913      	cbnz	r3, 80043a2 <__sfp+0x12>
 800439c:	4630      	mov	r0, r6
 800439e:	f7ff ffc7 	bl	8004330 <__sinit>
 80043a2:	3648      	adds	r6, #72	; 0x48
 80043a4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80043a8:	3b01      	subs	r3, #1
 80043aa:	d503      	bpl.n	80043b4 <__sfp+0x24>
 80043ac:	6833      	ldr	r3, [r6, #0]
 80043ae:	b133      	cbz	r3, 80043be <__sfp+0x2e>
 80043b0:	6836      	ldr	r6, [r6, #0]
 80043b2:	e7f7      	b.n	80043a4 <__sfp+0x14>
 80043b4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80043b8:	b16d      	cbz	r5, 80043d6 <__sfp+0x46>
 80043ba:	3468      	adds	r4, #104	; 0x68
 80043bc:	e7f4      	b.n	80043a8 <__sfp+0x18>
 80043be:	2104      	movs	r1, #4
 80043c0:	4638      	mov	r0, r7
 80043c2:	f7ff ff9f 	bl	8004304 <__sfmoreglue>
 80043c6:	6030      	str	r0, [r6, #0]
 80043c8:	2800      	cmp	r0, #0
 80043ca:	d1f1      	bne.n	80043b0 <__sfp+0x20>
 80043cc:	230c      	movs	r3, #12
 80043ce:	603b      	str	r3, [r7, #0]
 80043d0:	4604      	mov	r4, r0
 80043d2:	4620      	mov	r0, r4
 80043d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043d6:	4b0b      	ldr	r3, [pc, #44]	; (8004404 <__sfp+0x74>)
 80043d8:	6665      	str	r5, [r4, #100]	; 0x64
 80043da:	e9c4 5500 	strd	r5, r5, [r4]
 80043de:	60a5      	str	r5, [r4, #8]
 80043e0:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80043e4:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80043e8:	2208      	movs	r2, #8
 80043ea:	4629      	mov	r1, r5
 80043ec:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80043f0:	f7ff fd58 	bl	8003ea4 <memset>
 80043f4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80043f8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80043fc:	e7e9      	b.n	80043d2 <__sfp+0x42>
 80043fe:	bf00      	nop
 8004400:	08005cb4 	.word	0x08005cb4
 8004404:	ffff0001 	.word	0xffff0001

08004408 <_fwalk_reent>:
 8004408:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800440c:	4680      	mov	r8, r0
 800440e:	4689      	mov	r9, r1
 8004410:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004414:	2600      	movs	r6, #0
 8004416:	b914      	cbnz	r4, 800441e <_fwalk_reent+0x16>
 8004418:	4630      	mov	r0, r6
 800441a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800441e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004422:	3f01      	subs	r7, #1
 8004424:	d501      	bpl.n	800442a <_fwalk_reent+0x22>
 8004426:	6824      	ldr	r4, [r4, #0]
 8004428:	e7f5      	b.n	8004416 <_fwalk_reent+0xe>
 800442a:	89ab      	ldrh	r3, [r5, #12]
 800442c:	2b01      	cmp	r3, #1
 800442e:	d907      	bls.n	8004440 <_fwalk_reent+0x38>
 8004430:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004434:	3301      	adds	r3, #1
 8004436:	d003      	beq.n	8004440 <_fwalk_reent+0x38>
 8004438:	4629      	mov	r1, r5
 800443a:	4640      	mov	r0, r8
 800443c:	47c8      	blx	r9
 800443e:	4306      	orrs	r6, r0
 8004440:	3568      	adds	r5, #104	; 0x68
 8004442:	e7ee      	b.n	8004422 <_fwalk_reent+0x1a>

08004444 <__swhatbuf_r>:
 8004444:	b570      	push	{r4, r5, r6, lr}
 8004446:	460e      	mov	r6, r1
 8004448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800444c:	2900      	cmp	r1, #0
 800444e:	b096      	sub	sp, #88	; 0x58
 8004450:	4614      	mov	r4, r2
 8004452:	461d      	mov	r5, r3
 8004454:	da07      	bge.n	8004466 <__swhatbuf_r+0x22>
 8004456:	2300      	movs	r3, #0
 8004458:	602b      	str	r3, [r5, #0]
 800445a:	89b3      	ldrh	r3, [r6, #12]
 800445c:	061a      	lsls	r2, r3, #24
 800445e:	d410      	bmi.n	8004482 <__swhatbuf_r+0x3e>
 8004460:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004464:	e00e      	b.n	8004484 <__swhatbuf_r+0x40>
 8004466:	466a      	mov	r2, sp
 8004468:	f000 fc36 	bl	8004cd8 <_fstat_r>
 800446c:	2800      	cmp	r0, #0
 800446e:	dbf2      	blt.n	8004456 <__swhatbuf_r+0x12>
 8004470:	9a01      	ldr	r2, [sp, #4]
 8004472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800447a:	425a      	negs	r2, r3
 800447c:	415a      	adcs	r2, r3
 800447e:	602a      	str	r2, [r5, #0]
 8004480:	e7ee      	b.n	8004460 <__swhatbuf_r+0x1c>
 8004482:	2340      	movs	r3, #64	; 0x40
 8004484:	2000      	movs	r0, #0
 8004486:	6023      	str	r3, [r4, #0]
 8004488:	b016      	add	sp, #88	; 0x58
 800448a:	bd70      	pop	{r4, r5, r6, pc}

0800448c <__smakebuf_r>:
 800448c:	898b      	ldrh	r3, [r1, #12]
 800448e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004490:	079d      	lsls	r5, r3, #30
 8004492:	4606      	mov	r6, r0
 8004494:	460c      	mov	r4, r1
 8004496:	d507      	bpl.n	80044a8 <__smakebuf_r+0x1c>
 8004498:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	6123      	str	r3, [r4, #16]
 80044a0:	2301      	movs	r3, #1
 80044a2:	6163      	str	r3, [r4, #20]
 80044a4:	b002      	add	sp, #8
 80044a6:	bd70      	pop	{r4, r5, r6, pc}
 80044a8:	ab01      	add	r3, sp, #4
 80044aa:	466a      	mov	r2, sp
 80044ac:	f7ff ffca 	bl	8004444 <__swhatbuf_r>
 80044b0:	9900      	ldr	r1, [sp, #0]
 80044b2:	4605      	mov	r5, r0
 80044b4:	4630      	mov	r0, r6
 80044b6:	f000 f877 	bl	80045a8 <_malloc_r>
 80044ba:	b948      	cbnz	r0, 80044d0 <__smakebuf_r+0x44>
 80044bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044c0:	059a      	lsls	r2, r3, #22
 80044c2:	d4ef      	bmi.n	80044a4 <__smakebuf_r+0x18>
 80044c4:	f023 0303 	bic.w	r3, r3, #3
 80044c8:	f043 0302 	orr.w	r3, r3, #2
 80044cc:	81a3      	strh	r3, [r4, #12]
 80044ce:	e7e3      	b.n	8004498 <__smakebuf_r+0xc>
 80044d0:	4b0d      	ldr	r3, [pc, #52]	; (8004508 <__smakebuf_r+0x7c>)
 80044d2:	62b3      	str	r3, [r6, #40]	; 0x28
 80044d4:	89a3      	ldrh	r3, [r4, #12]
 80044d6:	6020      	str	r0, [r4, #0]
 80044d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80044dc:	81a3      	strh	r3, [r4, #12]
 80044de:	9b00      	ldr	r3, [sp, #0]
 80044e0:	6163      	str	r3, [r4, #20]
 80044e2:	9b01      	ldr	r3, [sp, #4]
 80044e4:	6120      	str	r0, [r4, #16]
 80044e6:	b15b      	cbz	r3, 8004500 <__smakebuf_r+0x74>
 80044e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80044ec:	4630      	mov	r0, r6
 80044ee:	f000 fc05 	bl	8004cfc <_isatty_r>
 80044f2:	b128      	cbz	r0, 8004500 <__smakebuf_r+0x74>
 80044f4:	89a3      	ldrh	r3, [r4, #12]
 80044f6:	f023 0303 	bic.w	r3, r3, #3
 80044fa:	f043 0301 	orr.w	r3, r3, #1
 80044fe:	81a3      	strh	r3, [r4, #12]
 8004500:	89a3      	ldrh	r3, [r4, #12]
 8004502:	431d      	orrs	r5, r3
 8004504:	81a5      	strh	r5, [r4, #12]
 8004506:	e7cd      	b.n	80044a4 <__smakebuf_r+0x18>
 8004508:	080042f9 	.word	0x080042f9

0800450c <_free_r>:
 800450c:	b538      	push	{r3, r4, r5, lr}
 800450e:	4605      	mov	r5, r0
 8004510:	2900      	cmp	r1, #0
 8004512:	d045      	beq.n	80045a0 <_free_r+0x94>
 8004514:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004518:	1f0c      	subs	r4, r1, #4
 800451a:	2b00      	cmp	r3, #0
 800451c:	bfb8      	it	lt
 800451e:	18e4      	addlt	r4, r4, r3
 8004520:	f000 fc0e 	bl	8004d40 <__malloc_lock>
 8004524:	4a1f      	ldr	r2, [pc, #124]	; (80045a4 <_free_r+0x98>)
 8004526:	6813      	ldr	r3, [r2, #0]
 8004528:	4610      	mov	r0, r2
 800452a:	b933      	cbnz	r3, 800453a <_free_r+0x2e>
 800452c:	6063      	str	r3, [r4, #4]
 800452e:	6014      	str	r4, [r2, #0]
 8004530:	4628      	mov	r0, r5
 8004532:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004536:	f000 bc04 	b.w	8004d42 <__malloc_unlock>
 800453a:	42a3      	cmp	r3, r4
 800453c:	d90c      	bls.n	8004558 <_free_r+0x4c>
 800453e:	6821      	ldr	r1, [r4, #0]
 8004540:	1862      	adds	r2, r4, r1
 8004542:	4293      	cmp	r3, r2
 8004544:	bf04      	itt	eq
 8004546:	681a      	ldreq	r2, [r3, #0]
 8004548:	685b      	ldreq	r3, [r3, #4]
 800454a:	6063      	str	r3, [r4, #4]
 800454c:	bf04      	itt	eq
 800454e:	1852      	addeq	r2, r2, r1
 8004550:	6022      	streq	r2, [r4, #0]
 8004552:	6004      	str	r4, [r0, #0]
 8004554:	e7ec      	b.n	8004530 <_free_r+0x24>
 8004556:	4613      	mov	r3, r2
 8004558:	685a      	ldr	r2, [r3, #4]
 800455a:	b10a      	cbz	r2, 8004560 <_free_r+0x54>
 800455c:	42a2      	cmp	r2, r4
 800455e:	d9fa      	bls.n	8004556 <_free_r+0x4a>
 8004560:	6819      	ldr	r1, [r3, #0]
 8004562:	1858      	adds	r0, r3, r1
 8004564:	42a0      	cmp	r0, r4
 8004566:	d10b      	bne.n	8004580 <_free_r+0x74>
 8004568:	6820      	ldr	r0, [r4, #0]
 800456a:	4401      	add	r1, r0
 800456c:	1858      	adds	r0, r3, r1
 800456e:	4282      	cmp	r2, r0
 8004570:	6019      	str	r1, [r3, #0]
 8004572:	d1dd      	bne.n	8004530 <_free_r+0x24>
 8004574:	6810      	ldr	r0, [r2, #0]
 8004576:	6852      	ldr	r2, [r2, #4]
 8004578:	605a      	str	r2, [r3, #4]
 800457a:	4401      	add	r1, r0
 800457c:	6019      	str	r1, [r3, #0]
 800457e:	e7d7      	b.n	8004530 <_free_r+0x24>
 8004580:	d902      	bls.n	8004588 <_free_r+0x7c>
 8004582:	230c      	movs	r3, #12
 8004584:	602b      	str	r3, [r5, #0]
 8004586:	e7d3      	b.n	8004530 <_free_r+0x24>
 8004588:	6820      	ldr	r0, [r4, #0]
 800458a:	1821      	adds	r1, r4, r0
 800458c:	428a      	cmp	r2, r1
 800458e:	bf04      	itt	eq
 8004590:	6811      	ldreq	r1, [r2, #0]
 8004592:	6852      	ldreq	r2, [r2, #4]
 8004594:	6062      	str	r2, [r4, #4]
 8004596:	bf04      	itt	eq
 8004598:	1809      	addeq	r1, r1, r0
 800459a:	6021      	streq	r1, [r4, #0]
 800459c:	605c      	str	r4, [r3, #4]
 800459e:	e7c7      	b.n	8004530 <_free_r+0x24>
 80045a0:	bd38      	pop	{r3, r4, r5, pc}
 80045a2:	bf00      	nop
 80045a4:	2000065c 	.word	0x2000065c

080045a8 <_malloc_r>:
 80045a8:	b570      	push	{r4, r5, r6, lr}
 80045aa:	1ccd      	adds	r5, r1, #3
 80045ac:	f025 0503 	bic.w	r5, r5, #3
 80045b0:	3508      	adds	r5, #8
 80045b2:	2d0c      	cmp	r5, #12
 80045b4:	bf38      	it	cc
 80045b6:	250c      	movcc	r5, #12
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	4606      	mov	r6, r0
 80045bc:	db01      	blt.n	80045c2 <_malloc_r+0x1a>
 80045be:	42a9      	cmp	r1, r5
 80045c0:	d903      	bls.n	80045ca <_malloc_r+0x22>
 80045c2:	230c      	movs	r3, #12
 80045c4:	6033      	str	r3, [r6, #0]
 80045c6:	2000      	movs	r0, #0
 80045c8:	bd70      	pop	{r4, r5, r6, pc}
 80045ca:	f000 fbb9 	bl	8004d40 <__malloc_lock>
 80045ce:	4a21      	ldr	r2, [pc, #132]	; (8004654 <_malloc_r+0xac>)
 80045d0:	6814      	ldr	r4, [r2, #0]
 80045d2:	4621      	mov	r1, r4
 80045d4:	b991      	cbnz	r1, 80045fc <_malloc_r+0x54>
 80045d6:	4c20      	ldr	r4, [pc, #128]	; (8004658 <_malloc_r+0xb0>)
 80045d8:	6823      	ldr	r3, [r4, #0]
 80045da:	b91b      	cbnz	r3, 80045e4 <_malloc_r+0x3c>
 80045dc:	4630      	mov	r0, r6
 80045de:	f000 fb05 	bl	8004bec <_sbrk_r>
 80045e2:	6020      	str	r0, [r4, #0]
 80045e4:	4629      	mov	r1, r5
 80045e6:	4630      	mov	r0, r6
 80045e8:	f000 fb00 	bl	8004bec <_sbrk_r>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	d124      	bne.n	800463a <_malloc_r+0x92>
 80045f0:	230c      	movs	r3, #12
 80045f2:	6033      	str	r3, [r6, #0]
 80045f4:	4630      	mov	r0, r6
 80045f6:	f000 fba4 	bl	8004d42 <__malloc_unlock>
 80045fa:	e7e4      	b.n	80045c6 <_malloc_r+0x1e>
 80045fc:	680b      	ldr	r3, [r1, #0]
 80045fe:	1b5b      	subs	r3, r3, r5
 8004600:	d418      	bmi.n	8004634 <_malloc_r+0x8c>
 8004602:	2b0b      	cmp	r3, #11
 8004604:	d90f      	bls.n	8004626 <_malloc_r+0x7e>
 8004606:	600b      	str	r3, [r1, #0]
 8004608:	50cd      	str	r5, [r1, r3]
 800460a:	18cc      	adds	r4, r1, r3
 800460c:	4630      	mov	r0, r6
 800460e:	f000 fb98 	bl	8004d42 <__malloc_unlock>
 8004612:	f104 000b 	add.w	r0, r4, #11
 8004616:	1d23      	adds	r3, r4, #4
 8004618:	f020 0007 	bic.w	r0, r0, #7
 800461c:	1ac3      	subs	r3, r0, r3
 800461e:	d0d3      	beq.n	80045c8 <_malloc_r+0x20>
 8004620:	425a      	negs	r2, r3
 8004622:	50e2      	str	r2, [r4, r3]
 8004624:	e7d0      	b.n	80045c8 <_malloc_r+0x20>
 8004626:	428c      	cmp	r4, r1
 8004628:	684b      	ldr	r3, [r1, #4]
 800462a:	bf16      	itet	ne
 800462c:	6063      	strne	r3, [r4, #4]
 800462e:	6013      	streq	r3, [r2, #0]
 8004630:	460c      	movne	r4, r1
 8004632:	e7eb      	b.n	800460c <_malloc_r+0x64>
 8004634:	460c      	mov	r4, r1
 8004636:	6849      	ldr	r1, [r1, #4]
 8004638:	e7cc      	b.n	80045d4 <_malloc_r+0x2c>
 800463a:	1cc4      	adds	r4, r0, #3
 800463c:	f024 0403 	bic.w	r4, r4, #3
 8004640:	42a0      	cmp	r0, r4
 8004642:	d005      	beq.n	8004650 <_malloc_r+0xa8>
 8004644:	1a21      	subs	r1, r4, r0
 8004646:	4630      	mov	r0, r6
 8004648:	f000 fad0 	bl	8004bec <_sbrk_r>
 800464c:	3001      	adds	r0, #1
 800464e:	d0cf      	beq.n	80045f0 <_malloc_r+0x48>
 8004650:	6025      	str	r5, [r4, #0]
 8004652:	e7db      	b.n	800460c <_malloc_r+0x64>
 8004654:	2000065c 	.word	0x2000065c
 8004658:	20000660 	.word	0x20000660

0800465c <__sfputc_r>:
 800465c:	6893      	ldr	r3, [r2, #8]
 800465e:	3b01      	subs	r3, #1
 8004660:	2b00      	cmp	r3, #0
 8004662:	b410      	push	{r4}
 8004664:	6093      	str	r3, [r2, #8]
 8004666:	da08      	bge.n	800467a <__sfputc_r+0x1e>
 8004668:	6994      	ldr	r4, [r2, #24]
 800466a:	42a3      	cmp	r3, r4
 800466c:	db01      	blt.n	8004672 <__sfputc_r+0x16>
 800466e:	290a      	cmp	r1, #10
 8004670:	d103      	bne.n	800467a <__sfputc_r+0x1e>
 8004672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004676:	f7ff bcab 	b.w	8003fd0 <__swbuf_r>
 800467a:	6813      	ldr	r3, [r2, #0]
 800467c:	1c58      	adds	r0, r3, #1
 800467e:	6010      	str	r0, [r2, #0]
 8004680:	7019      	strb	r1, [r3, #0]
 8004682:	4608      	mov	r0, r1
 8004684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004688:	4770      	bx	lr

0800468a <__sfputs_r>:
 800468a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468c:	4606      	mov	r6, r0
 800468e:	460f      	mov	r7, r1
 8004690:	4614      	mov	r4, r2
 8004692:	18d5      	adds	r5, r2, r3
 8004694:	42ac      	cmp	r4, r5
 8004696:	d101      	bne.n	800469c <__sfputs_r+0x12>
 8004698:	2000      	movs	r0, #0
 800469a:	e007      	b.n	80046ac <__sfputs_r+0x22>
 800469c:	463a      	mov	r2, r7
 800469e:	f814 1b01 	ldrb.w	r1, [r4], #1
 80046a2:	4630      	mov	r0, r6
 80046a4:	f7ff ffda 	bl	800465c <__sfputc_r>
 80046a8:	1c43      	adds	r3, r0, #1
 80046aa:	d1f3      	bne.n	8004694 <__sfputs_r+0xa>
 80046ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080046b0 <_vfiprintf_r>:
 80046b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b4:	460c      	mov	r4, r1
 80046b6:	b09d      	sub	sp, #116	; 0x74
 80046b8:	4617      	mov	r7, r2
 80046ba:	461d      	mov	r5, r3
 80046bc:	4606      	mov	r6, r0
 80046be:	b118      	cbz	r0, 80046c8 <_vfiprintf_r+0x18>
 80046c0:	6983      	ldr	r3, [r0, #24]
 80046c2:	b90b      	cbnz	r3, 80046c8 <_vfiprintf_r+0x18>
 80046c4:	f7ff fe34 	bl	8004330 <__sinit>
 80046c8:	4b7c      	ldr	r3, [pc, #496]	; (80048bc <_vfiprintf_r+0x20c>)
 80046ca:	429c      	cmp	r4, r3
 80046cc:	d158      	bne.n	8004780 <_vfiprintf_r+0xd0>
 80046ce:	6874      	ldr	r4, [r6, #4]
 80046d0:	89a3      	ldrh	r3, [r4, #12]
 80046d2:	0718      	lsls	r0, r3, #28
 80046d4:	d55e      	bpl.n	8004794 <_vfiprintf_r+0xe4>
 80046d6:	6923      	ldr	r3, [r4, #16]
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d05b      	beq.n	8004794 <_vfiprintf_r+0xe4>
 80046dc:	2300      	movs	r3, #0
 80046de:	9309      	str	r3, [sp, #36]	; 0x24
 80046e0:	2320      	movs	r3, #32
 80046e2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80046e6:	2330      	movs	r3, #48	; 0x30
 80046e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80046ec:	9503      	str	r5, [sp, #12]
 80046ee:	f04f 0b01 	mov.w	fp, #1
 80046f2:	46b8      	mov	r8, r7
 80046f4:	4645      	mov	r5, r8
 80046f6:	f815 3b01 	ldrb.w	r3, [r5], #1
 80046fa:	b10b      	cbz	r3, 8004700 <_vfiprintf_r+0x50>
 80046fc:	2b25      	cmp	r3, #37	; 0x25
 80046fe:	d154      	bne.n	80047aa <_vfiprintf_r+0xfa>
 8004700:	ebb8 0a07 	subs.w	sl, r8, r7
 8004704:	d00b      	beq.n	800471e <_vfiprintf_r+0x6e>
 8004706:	4653      	mov	r3, sl
 8004708:	463a      	mov	r2, r7
 800470a:	4621      	mov	r1, r4
 800470c:	4630      	mov	r0, r6
 800470e:	f7ff ffbc 	bl	800468a <__sfputs_r>
 8004712:	3001      	adds	r0, #1
 8004714:	f000 80c2 	beq.w	800489c <_vfiprintf_r+0x1ec>
 8004718:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800471a:	4453      	add	r3, sl
 800471c:	9309      	str	r3, [sp, #36]	; 0x24
 800471e:	f898 3000 	ldrb.w	r3, [r8]
 8004722:	2b00      	cmp	r3, #0
 8004724:	f000 80ba 	beq.w	800489c <_vfiprintf_r+0x1ec>
 8004728:	2300      	movs	r3, #0
 800472a:	f04f 32ff 	mov.w	r2, #4294967295
 800472e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004732:	9304      	str	r3, [sp, #16]
 8004734:	9307      	str	r3, [sp, #28]
 8004736:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800473a:	931a      	str	r3, [sp, #104]	; 0x68
 800473c:	46a8      	mov	r8, r5
 800473e:	2205      	movs	r2, #5
 8004740:	f818 1b01 	ldrb.w	r1, [r8], #1
 8004744:	485e      	ldr	r0, [pc, #376]	; (80048c0 <_vfiprintf_r+0x210>)
 8004746:	f7fb fd43 	bl	80001d0 <memchr>
 800474a:	9b04      	ldr	r3, [sp, #16]
 800474c:	bb78      	cbnz	r0, 80047ae <_vfiprintf_r+0xfe>
 800474e:	06d9      	lsls	r1, r3, #27
 8004750:	bf44      	itt	mi
 8004752:	2220      	movmi	r2, #32
 8004754:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004758:	071a      	lsls	r2, r3, #28
 800475a:	bf44      	itt	mi
 800475c:	222b      	movmi	r2, #43	; 0x2b
 800475e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8004762:	782a      	ldrb	r2, [r5, #0]
 8004764:	2a2a      	cmp	r2, #42	; 0x2a
 8004766:	d02a      	beq.n	80047be <_vfiprintf_r+0x10e>
 8004768:	9a07      	ldr	r2, [sp, #28]
 800476a:	46a8      	mov	r8, r5
 800476c:	2000      	movs	r0, #0
 800476e:	250a      	movs	r5, #10
 8004770:	4641      	mov	r1, r8
 8004772:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004776:	3b30      	subs	r3, #48	; 0x30
 8004778:	2b09      	cmp	r3, #9
 800477a:	d969      	bls.n	8004850 <_vfiprintf_r+0x1a0>
 800477c:	b360      	cbz	r0, 80047d8 <_vfiprintf_r+0x128>
 800477e:	e024      	b.n	80047ca <_vfiprintf_r+0x11a>
 8004780:	4b50      	ldr	r3, [pc, #320]	; (80048c4 <_vfiprintf_r+0x214>)
 8004782:	429c      	cmp	r4, r3
 8004784:	d101      	bne.n	800478a <_vfiprintf_r+0xda>
 8004786:	68b4      	ldr	r4, [r6, #8]
 8004788:	e7a2      	b.n	80046d0 <_vfiprintf_r+0x20>
 800478a:	4b4f      	ldr	r3, [pc, #316]	; (80048c8 <_vfiprintf_r+0x218>)
 800478c:	429c      	cmp	r4, r3
 800478e:	bf08      	it	eq
 8004790:	68f4      	ldreq	r4, [r6, #12]
 8004792:	e79d      	b.n	80046d0 <_vfiprintf_r+0x20>
 8004794:	4621      	mov	r1, r4
 8004796:	4630      	mov	r0, r6
 8004798:	f7ff fc6c 	bl	8004074 <__swsetup_r>
 800479c:	2800      	cmp	r0, #0
 800479e:	d09d      	beq.n	80046dc <_vfiprintf_r+0x2c>
 80047a0:	f04f 30ff 	mov.w	r0, #4294967295
 80047a4:	b01d      	add	sp, #116	; 0x74
 80047a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80047aa:	46a8      	mov	r8, r5
 80047ac:	e7a2      	b.n	80046f4 <_vfiprintf_r+0x44>
 80047ae:	4a44      	ldr	r2, [pc, #272]	; (80048c0 <_vfiprintf_r+0x210>)
 80047b0:	1a80      	subs	r0, r0, r2
 80047b2:	fa0b f000 	lsl.w	r0, fp, r0
 80047b6:	4318      	orrs	r0, r3
 80047b8:	9004      	str	r0, [sp, #16]
 80047ba:	4645      	mov	r5, r8
 80047bc:	e7be      	b.n	800473c <_vfiprintf_r+0x8c>
 80047be:	9a03      	ldr	r2, [sp, #12]
 80047c0:	1d11      	adds	r1, r2, #4
 80047c2:	6812      	ldr	r2, [r2, #0]
 80047c4:	9103      	str	r1, [sp, #12]
 80047c6:	2a00      	cmp	r2, #0
 80047c8:	db01      	blt.n	80047ce <_vfiprintf_r+0x11e>
 80047ca:	9207      	str	r2, [sp, #28]
 80047cc:	e004      	b.n	80047d8 <_vfiprintf_r+0x128>
 80047ce:	4252      	negs	r2, r2
 80047d0:	f043 0302 	orr.w	r3, r3, #2
 80047d4:	9207      	str	r2, [sp, #28]
 80047d6:	9304      	str	r3, [sp, #16]
 80047d8:	f898 3000 	ldrb.w	r3, [r8]
 80047dc:	2b2e      	cmp	r3, #46	; 0x2e
 80047de:	d10e      	bne.n	80047fe <_vfiprintf_r+0x14e>
 80047e0:	f898 3001 	ldrb.w	r3, [r8, #1]
 80047e4:	2b2a      	cmp	r3, #42	; 0x2a
 80047e6:	d138      	bne.n	800485a <_vfiprintf_r+0x1aa>
 80047e8:	9b03      	ldr	r3, [sp, #12]
 80047ea:	1d1a      	adds	r2, r3, #4
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	9203      	str	r2, [sp, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	bfb8      	it	lt
 80047f4:	f04f 33ff 	movlt.w	r3, #4294967295
 80047f8:	f108 0802 	add.w	r8, r8, #2
 80047fc:	9305      	str	r3, [sp, #20]
 80047fe:	4d33      	ldr	r5, [pc, #204]	; (80048cc <_vfiprintf_r+0x21c>)
 8004800:	f898 1000 	ldrb.w	r1, [r8]
 8004804:	2203      	movs	r2, #3
 8004806:	4628      	mov	r0, r5
 8004808:	f7fb fce2 	bl	80001d0 <memchr>
 800480c:	b140      	cbz	r0, 8004820 <_vfiprintf_r+0x170>
 800480e:	2340      	movs	r3, #64	; 0x40
 8004810:	1b40      	subs	r0, r0, r5
 8004812:	fa03 f000 	lsl.w	r0, r3, r0
 8004816:	9b04      	ldr	r3, [sp, #16]
 8004818:	4303      	orrs	r3, r0
 800481a:	f108 0801 	add.w	r8, r8, #1
 800481e:	9304      	str	r3, [sp, #16]
 8004820:	f898 1000 	ldrb.w	r1, [r8]
 8004824:	482a      	ldr	r0, [pc, #168]	; (80048d0 <_vfiprintf_r+0x220>)
 8004826:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800482a:	2206      	movs	r2, #6
 800482c:	f108 0701 	add.w	r7, r8, #1
 8004830:	f7fb fcce 	bl	80001d0 <memchr>
 8004834:	2800      	cmp	r0, #0
 8004836:	d037      	beq.n	80048a8 <_vfiprintf_r+0x1f8>
 8004838:	4b26      	ldr	r3, [pc, #152]	; (80048d4 <_vfiprintf_r+0x224>)
 800483a:	bb1b      	cbnz	r3, 8004884 <_vfiprintf_r+0x1d4>
 800483c:	9b03      	ldr	r3, [sp, #12]
 800483e:	3307      	adds	r3, #7
 8004840:	f023 0307 	bic.w	r3, r3, #7
 8004844:	3308      	adds	r3, #8
 8004846:	9303      	str	r3, [sp, #12]
 8004848:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800484a:	444b      	add	r3, r9
 800484c:	9309      	str	r3, [sp, #36]	; 0x24
 800484e:	e750      	b.n	80046f2 <_vfiprintf_r+0x42>
 8004850:	fb05 3202 	mla	r2, r5, r2, r3
 8004854:	2001      	movs	r0, #1
 8004856:	4688      	mov	r8, r1
 8004858:	e78a      	b.n	8004770 <_vfiprintf_r+0xc0>
 800485a:	2300      	movs	r3, #0
 800485c:	f108 0801 	add.w	r8, r8, #1
 8004860:	9305      	str	r3, [sp, #20]
 8004862:	4619      	mov	r1, r3
 8004864:	250a      	movs	r5, #10
 8004866:	4640      	mov	r0, r8
 8004868:	f810 2b01 	ldrb.w	r2, [r0], #1
 800486c:	3a30      	subs	r2, #48	; 0x30
 800486e:	2a09      	cmp	r2, #9
 8004870:	d903      	bls.n	800487a <_vfiprintf_r+0x1ca>
 8004872:	2b00      	cmp	r3, #0
 8004874:	d0c3      	beq.n	80047fe <_vfiprintf_r+0x14e>
 8004876:	9105      	str	r1, [sp, #20]
 8004878:	e7c1      	b.n	80047fe <_vfiprintf_r+0x14e>
 800487a:	fb05 2101 	mla	r1, r5, r1, r2
 800487e:	2301      	movs	r3, #1
 8004880:	4680      	mov	r8, r0
 8004882:	e7f0      	b.n	8004866 <_vfiprintf_r+0x1b6>
 8004884:	ab03      	add	r3, sp, #12
 8004886:	9300      	str	r3, [sp, #0]
 8004888:	4622      	mov	r2, r4
 800488a:	4b13      	ldr	r3, [pc, #76]	; (80048d8 <_vfiprintf_r+0x228>)
 800488c:	a904      	add	r1, sp, #16
 800488e:	4630      	mov	r0, r6
 8004890:	f3af 8000 	nop.w
 8004894:	f1b0 3fff 	cmp.w	r0, #4294967295
 8004898:	4681      	mov	r9, r0
 800489a:	d1d5      	bne.n	8004848 <_vfiprintf_r+0x198>
 800489c:	89a3      	ldrh	r3, [r4, #12]
 800489e:	065b      	lsls	r3, r3, #25
 80048a0:	f53f af7e 	bmi.w	80047a0 <_vfiprintf_r+0xf0>
 80048a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80048a6:	e77d      	b.n	80047a4 <_vfiprintf_r+0xf4>
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	9300      	str	r3, [sp, #0]
 80048ac:	4622      	mov	r2, r4
 80048ae:	4b0a      	ldr	r3, [pc, #40]	; (80048d8 <_vfiprintf_r+0x228>)
 80048b0:	a904      	add	r1, sp, #16
 80048b2:	4630      	mov	r0, r6
 80048b4:	f000 f888 	bl	80049c8 <_printf_i>
 80048b8:	e7ec      	b.n	8004894 <_vfiprintf_r+0x1e4>
 80048ba:	bf00      	nop
 80048bc:	08005cd8 	.word	0x08005cd8
 80048c0:	08005d18 	.word	0x08005d18
 80048c4:	08005cf8 	.word	0x08005cf8
 80048c8:	08005cb8 	.word	0x08005cb8
 80048cc:	08005d1e 	.word	0x08005d1e
 80048d0:	08005d22 	.word	0x08005d22
 80048d4:	00000000 	.word	0x00000000
 80048d8:	0800468b 	.word	0x0800468b

080048dc <_printf_common>:
 80048dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048e0:	4691      	mov	r9, r2
 80048e2:	461f      	mov	r7, r3
 80048e4:	688a      	ldr	r2, [r1, #8]
 80048e6:	690b      	ldr	r3, [r1, #16]
 80048e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048ec:	4293      	cmp	r3, r2
 80048ee:	bfb8      	it	lt
 80048f0:	4613      	movlt	r3, r2
 80048f2:	f8c9 3000 	str.w	r3, [r9]
 80048f6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048fa:	4606      	mov	r6, r0
 80048fc:	460c      	mov	r4, r1
 80048fe:	b112      	cbz	r2, 8004906 <_printf_common+0x2a>
 8004900:	3301      	adds	r3, #1
 8004902:	f8c9 3000 	str.w	r3, [r9]
 8004906:	6823      	ldr	r3, [r4, #0]
 8004908:	0699      	lsls	r1, r3, #26
 800490a:	bf42      	ittt	mi
 800490c:	f8d9 3000 	ldrmi.w	r3, [r9]
 8004910:	3302      	addmi	r3, #2
 8004912:	f8c9 3000 	strmi.w	r3, [r9]
 8004916:	6825      	ldr	r5, [r4, #0]
 8004918:	f015 0506 	ands.w	r5, r5, #6
 800491c:	d107      	bne.n	800492e <_printf_common+0x52>
 800491e:	f104 0a19 	add.w	sl, r4, #25
 8004922:	68e3      	ldr	r3, [r4, #12]
 8004924:	f8d9 2000 	ldr.w	r2, [r9]
 8004928:	1a9b      	subs	r3, r3, r2
 800492a:	42ab      	cmp	r3, r5
 800492c:	dc28      	bgt.n	8004980 <_printf_common+0xa4>
 800492e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8004932:	6822      	ldr	r2, [r4, #0]
 8004934:	3300      	adds	r3, #0
 8004936:	bf18      	it	ne
 8004938:	2301      	movne	r3, #1
 800493a:	0692      	lsls	r2, r2, #26
 800493c:	d42d      	bmi.n	800499a <_printf_common+0xbe>
 800493e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004942:	4639      	mov	r1, r7
 8004944:	4630      	mov	r0, r6
 8004946:	47c0      	blx	r8
 8004948:	3001      	adds	r0, #1
 800494a:	d020      	beq.n	800498e <_printf_common+0xb2>
 800494c:	6823      	ldr	r3, [r4, #0]
 800494e:	68e5      	ldr	r5, [r4, #12]
 8004950:	f8d9 2000 	ldr.w	r2, [r9]
 8004954:	f003 0306 	and.w	r3, r3, #6
 8004958:	2b04      	cmp	r3, #4
 800495a:	bf08      	it	eq
 800495c:	1aad      	subeq	r5, r5, r2
 800495e:	68a3      	ldr	r3, [r4, #8]
 8004960:	6922      	ldr	r2, [r4, #16]
 8004962:	bf0c      	ite	eq
 8004964:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004968:	2500      	movne	r5, #0
 800496a:	4293      	cmp	r3, r2
 800496c:	bfc4      	itt	gt
 800496e:	1a9b      	subgt	r3, r3, r2
 8004970:	18ed      	addgt	r5, r5, r3
 8004972:	f04f 0900 	mov.w	r9, #0
 8004976:	341a      	adds	r4, #26
 8004978:	454d      	cmp	r5, r9
 800497a:	d11a      	bne.n	80049b2 <_printf_common+0xd6>
 800497c:	2000      	movs	r0, #0
 800497e:	e008      	b.n	8004992 <_printf_common+0xb6>
 8004980:	2301      	movs	r3, #1
 8004982:	4652      	mov	r2, sl
 8004984:	4639      	mov	r1, r7
 8004986:	4630      	mov	r0, r6
 8004988:	47c0      	blx	r8
 800498a:	3001      	adds	r0, #1
 800498c:	d103      	bne.n	8004996 <_printf_common+0xba>
 800498e:	f04f 30ff 	mov.w	r0, #4294967295
 8004992:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004996:	3501      	adds	r5, #1
 8004998:	e7c3      	b.n	8004922 <_printf_common+0x46>
 800499a:	18e1      	adds	r1, r4, r3
 800499c:	1c5a      	adds	r2, r3, #1
 800499e:	2030      	movs	r0, #48	; 0x30
 80049a0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80049a4:	4422      	add	r2, r4
 80049a6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80049aa:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80049ae:	3302      	adds	r3, #2
 80049b0:	e7c5      	b.n	800493e <_printf_common+0x62>
 80049b2:	2301      	movs	r3, #1
 80049b4:	4622      	mov	r2, r4
 80049b6:	4639      	mov	r1, r7
 80049b8:	4630      	mov	r0, r6
 80049ba:	47c0      	blx	r8
 80049bc:	3001      	adds	r0, #1
 80049be:	d0e6      	beq.n	800498e <_printf_common+0xb2>
 80049c0:	f109 0901 	add.w	r9, r9, #1
 80049c4:	e7d8      	b.n	8004978 <_printf_common+0x9c>
	...

080049c8 <_printf_i>:
 80049c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80049cc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80049d0:	460c      	mov	r4, r1
 80049d2:	7e09      	ldrb	r1, [r1, #24]
 80049d4:	b085      	sub	sp, #20
 80049d6:	296e      	cmp	r1, #110	; 0x6e
 80049d8:	4617      	mov	r7, r2
 80049da:	4606      	mov	r6, r0
 80049dc:	4698      	mov	r8, r3
 80049de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80049e0:	f000 80b3 	beq.w	8004b4a <_printf_i+0x182>
 80049e4:	d822      	bhi.n	8004a2c <_printf_i+0x64>
 80049e6:	2963      	cmp	r1, #99	; 0x63
 80049e8:	d036      	beq.n	8004a58 <_printf_i+0x90>
 80049ea:	d80a      	bhi.n	8004a02 <_printf_i+0x3a>
 80049ec:	2900      	cmp	r1, #0
 80049ee:	f000 80b9 	beq.w	8004b64 <_printf_i+0x19c>
 80049f2:	2958      	cmp	r1, #88	; 0x58
 80049f4:	f000 8083 	beq.w	8004afe <_printf_i+0x136>
 80049f8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80049fc:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8004a00:	e032      	b.n	8004a68 <_printf_i+0xa0>
 8004a02:	2964      	cmp	r1, #100	; 0x64
 8004a04:	d001      	beq.n	8004a0a <_printf_i+0x42>
 8004a06:	2969      	cmp	r1, #105	; 0x69
 8004a08:	d1f6      	bne.n	80049f8 <_printf_i+0x30>
 8004a0a:	6820      	ldr	r0, [r4, #0]
 8004a0c:	6813      	ldr	r3, [r2, #0]
 8004a0e:	0605      	lsls	r5, r0, #24
 8004a10:	f103 0104 	add.w	r1, r3, #4
 8004a14:	d52a      	bpl.n	8004a6c <_printf_i+0xa4>
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	6011      	str	r1, [r2, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	da03      	bge.n	8004a26 <_printf_i+0x5e>
 8004a1e:	222d      	movs	r2, #45	; 0x2d
 8004a20:	425b      	negs	r3, r3
 8004a22:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8004a26:	486f      	ldr	r0, [pc, #444]	; (8004be4 <_printf_i+0x21c>)
 8004a28:	220a      	movs	r2, #10
 8004a2a:	e039      	b.n	8004aa0 <_printf_i+0xd8>
 8004a2c:	2973      	cmp	r1, #115	; 0x73
 8004a2e:	f000 809d 	beq.w	8004b6c <_printf_i+0x1a4>
 8004a32:	d808      	bhi.n	8004a46 <_printf_i+0x7e>
 8004a34:	296f      	cmp	r1, #111	; 0x6f
 8004a36:	d020      	beq.n	8004a7a <_printf_i+0xb2>
 8004a38:	2970      	cmp	r1, #112	; 0x70
 8004a3a:	d1dd      	bne.n	80049f8 <_printf_i+0x30>
 8004a3c:	6823      	ldr	r3, [r4, #0]
 8004a3e:	f043 0320 	orr.w	r3, r3, #32
 8004a42:	6023      	str	r3, [r4, #0]
 8004a44:	e003      	b.n	8004a4e <_printf_i+0x86>
 8004a46:	2975      	cmp	r1, #117	; 0x75
 8004a48:	d017      	beq.n	8004a7a <_printf_i+0xb2>
 8004a4a:	2978      	cmp	r1, #120	; 0x78
 8004a4c:	d1d4      	bne.n	80049f8 <_printf_i+0x30>
 8004a4e:	2378      	movs	r3, #120	; 0x78
 8004a50:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004a54:	4864      	ldr	r0, [pc, #400]	; (8004be8 <_printf_i+0x220>)
 8004a56:	e055      	b.n	8004b04 <_printf_i+0x13c>
 8004a58:	6813      	ldr	r3, [r2, #0]
 8004a5a:	1d19      	adds	r1, r3, #4
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	6011      	str	r1, [r2, #0]
 8004a60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004a64:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a68:	2301      	movs	r3, #1
 8004a6a:	e08c      	b.n	8004b86 <_printf_i+0x1be>
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	6011      	str	r1, [r2, #0]
 8004a70:	f010 0f40 	tst.w	r0, #64	; 0x40
 8004a74:	bf18      	it	ne
 8004a76:	b21b      	sxthne	r3, r3
 8004a78:	e7cf      	b.n	8004a1a <_printf_i+0x52>
 8004a7a:	6813      	ldr	r3, [r2, #0]
 8004a7c:	6825      	ldr	r5, [r4, #0]
 8004a7e:	1d18      	adds	r0, r3, #4
 8004a80:	6010      	str	r0, [r2, #0]
 8004a82:	0628      	lsls	r0, r5, #24
 8004a84:	d501      	bpl.n	8004a8a <_printf_i+0xc2>
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	e002      	b.n	8004a90 <_printf_i+0xc8>
 8004a8a:	0668      	lsls	r0, r5, #25
 8004a8c:	d5fb      	bpl.n	8004a86 <_printf_i+0xbe>
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	4854      	ldr	r0, [pc, #336]	; (8004be4 <_printf_i+0x21c>)
 8004a92:	296f      	cmp	r1, #111	; 0x6f
 8004a94:	bf14      	ite	ne
 8004a96:	220a      	movne	r2, #10
 8004a98:	2208      	moveq	r2, #8
 8004a9a:	2100      	movs	r1, #0
 8004a9c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004aa0:	6865      	ldr	r5, [r4, #4]
 8004aa2:	60a5      	str	r5, [r4, #8]
 8004aa4:	2d00      	cmp	r5, #0
 8004aa6:	f2c0 8095 	blt.w	8004bd4 <_printf_i+0x20c>
 8004aaa:	6821      	ldr	r1, [r4, #0]
 8004aac:	f021 0104 	bic.w	r1, r1, #4
 8004ab0:	6021      	str	r1, [r4, #0]
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d13d      	bne.n	8004b32 <_printf_i+0x16a>
 8004ab6:	2d00      	cmp	r5, #0
 8004ab8:	f040 808e 	bne.w	8004bd8 <_printf_i+0x210>
 8004abc:	4665      	mov	r5, ip
 8004abe:	2a08      	cmp	r2, #8
 8004ac0:	d10b      	bne.n	8004ada <_printf_i+0x112>
 8004ac2:	6823      	ldr	r3, [r4, #0]
 8004ac4:	07db      	lsls	r3, r3, #31
 8004ac6:	d508      	bpl.n	8004ada <_printf_i+0x112>
 8004ac8:	6923      	ldr	r3, [r4, #16]
 8004aca:	6862      	ldr	r2, [r4, #4]
 8004acc:	429a      	cmp	r2, r3
 8004ace:	bfde      	ittt	le
 8004ad0:	2330      	movle	r3, #48	; 0x30
 8004ad2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004ad6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004ada:	ebac 0305 	sub.w	r3, ip, r5
 8004ade:	6123      	str	r3, [r4, #16]
 8004ae0:	f8cd 8000 	str.w	r8, [sp]
 8004ae4:	463b      	mov	r3, r7
 8004ae6:	aa03      	add	r2, sp, #12
 8004ae8:	4621      	mov	r1, r4
 8004aea:	4630      	mov	r0, r6
 8004aec:	f7ff fef6 	bl	80048dc <_printf_common>
 8004af0:	3001      	adds	r0, #1
 8004af2:	d14d      	bne.n	8004b90 <_printf_i+0x1c8>
 8004af4:	f04f 30ff 	mov.w	r0, #4294967295
 8004af8:	b005      	add	sp, #20
 8004afa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004afe:	4839      	ldr	r0, [pc, #228]	; (8004be4 <_printf_i+0x21c>)
 8004b00:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8004b04:	6813      	ldr	r3, [r2, #0]
 8004b06:	6821      	ldr	r1, [r4, #0]
 8004b08:	1d1d      	adds	r5, r3, #4
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6015      	str	r5, [r2, #0]
 8004b0e:	060a      	lsls	r2, r1, #24
 8004b10:	d50b      	bpl.n	8004b2a <_printf_i+0x162>
 8004b12:	07ca      	lsls	r2, r1, #31
 8004b14:	bf44      	itt	mi
 8004b16:	f041 0120 	orrmi.w	r1, r1, #32
 8004b1a:	6021      	strmi	r1, [r4, #0]
 8004b1c:	b91b      	cbnz	r3, 8004b26 <_printf_i+0x15e>
 8004b1e:	6822      	ldr	r2, [r4, #0]
 8004b20:	f022 0220 	bic.w	r2, r2, #32
 8004b24:	6022      	str	r2, [r4, #0]
 8004b26:	2210      	movs	r2, #16
 8004b28:	e7b7      	b.n	8004a9a <_printf_i+0xd2>
 8004b2a:	064d      	lsls	r5, r1, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b29b      	uxthmi	r3, r3
 8004b30:	e7ef      	b.n	8004b12 <_printf_i+0x14a>
 8004b32:	4665      	mov	r5, ip
 8004b34:	fbb3 f1f2 	udiv	r1, r3, r2
 8004b38:	fb02 3311 	mls	r3, r2, r1, r3
 8004b3c:	5cc3      	ldrb	r3, [r0, r3]
 8004b3e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8004b42:	460b      	mov	r3, r1
 8004b44:	2900      	cmp	r1, #0
 8004b46:	d1f5      	bne.n	8004b34 <_printf_i+0x16c>
 8004b48:	e7b9      	b.n	8004abe <_printf_i+0xf6>
 8004b4a:	6813      	ldr	r3, [r2, #0]
 8004b4c:	6825      	ldr	r5, [r4, #0]
 8004b4e:	6961      	ldr	r1, [r4, #20]
 8004b50:	1d18      	adds	r0, r3, #4
 8004b52:	6010      	str	r0, [r2, #0]
 8004b54:	0628      	lsls	r0, r5, #24
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	d501      	bpl.n	8004b5e <_printf_i+0x196>
 8004b5a:	6019      	str	r1, [r3, #0]
 8004b5c:	e002      	b.n	8004b64 <_printf_i+0x19c>
 8004b5e:	066a      	lsls	r2, r5, #25
 8004b60:	d5fb      	bpl.n	8004b5a <_printf_i+0x192>
 8004b62:	8019      	strh	r1, [r3, #0]
 8004b64:	2300      	movs	r3, #0
 8004b66:	6123      	str	r3, [r4, #16]
 8004b68:	4665      	mov	r5, ip
 8004b6a:	e7b9      	b.n	8004ae0 <_printf_i+0x118>
 8004b6c:	6813      	ldr	r3, [r2, #0]
 8004b6e:	1d19      	adds	r1, r3, #4
 8004b70:	6011      	str	r1, [r2, #0]
 8004b72:	681d      	ldr	r5, [r3, #0]
 8004b74:	6862      	ldr	r2, [r4, #4]
 8004b76:	2100      	movs	r1, #0
 8004b78:	4628      	mov	r0, r5
 8004b7a:	f7fb fb29 	bl	80001d0 <memchr>
 8004b7e:	b108      	cbz	r0, 8004b84 <_printf_i+0x1bc>
 8004b80:	1b40      	subs	r0, r0, r5
 8004b82:	6060      	str	r0, [r4, #4]
 8004b84:	6863      	ldr	r3, [r4, #4]
 8004b86:	6123      	str	r3, [r4, #16]
 8004b88:	2300      	movs	r3, #0
 8004b8a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b8e:	e7a7      	b.n	8004ae0 <_printf_i+0x118>
 8004b90:	6923      	ldr	r3, [r4, #16]
 8004b92:	462a      	mov	r2, r5
 8004b94:	4639      	mov	r1, r7
 8004b96:	4630      	mov	r0, r6
 8004b98:	47c0      	blx	r8
 8004b9a:	3001      	adds	r0, #1
 8004b9c:	d0aa      	beq.n	8004af4 <_printf_i+0x12c>
 8004b9e:	6823      	ldr	r3, [r4, #0]
 8004ba0:	079b      	lsls	r3, r3, #30
 8004ba2:	d413      	bmi.n	8004bcc <_printf_i+0x204>
 8004ba4:	68e0      	ldr	r0, [r4, #12]
 8004ba6:	9b03      	ldr	r3, [sp, #12]
 8004ba8:	4298      	cmp	r0, r3
 8004baa:	bfb8      	it	lt
 8004bac:	4618      	movlt	r0, r3
 8004bae:	e7a3      	b.n	8004af8 <_printf_i+0x130>
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	464a      	mov	r2, r9
 8004bb4:	4639      	mov	r1, r7
 8004bb6:	4630      	mov	r0, r6
 8004bb8:	47c0      	blx	r8
 8004bba:	3001      	adds	r0, #1
 8004bbc:	d09a      	beq.n	8004af4 <_printf_i+0x12c>
 8004bbe:	3501      	adds	r5, #1
 8004bc0:	68e3      	ldr	r3, [r4, #12]
 8004bc2:	9a03      	ldr	r2, [sp, #12]
 8004bc4:	1a9b      	subs	r3, r3, r2
 8004bc6:	42ab      	cmp	r3, r5
 8004bc8:	dcf2      	bgt.n	8004bb0 <_printf_i+0x1e8>
 8004bca:	e7eb      	b.n	8004ba4 <_printf_i+0x1dc>
 8004bcc:	2500      	movs	r5, #0
 8004bce:	f104 0919 	add.w	r9, r4, #25
 8004bd2:	e7f5      	b.n	8004bc0 <_printf_i+0x1f8>
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1ac      	bne.n	8004b32 <_printf_i+0x16a>
 8004bd8:	7803      	ldrb	r3, [r0, #0]
 8004bda:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004bde:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004be2:	e76c      	b.n	8004abe <_printf_i+0xf6>
 8004be4:	08005d29 	.word	0x08005d29
 8004be8:	08005d3a 	.word	0x08005d3a

08004bec <_sbrk_r>:
 8004bec:	b538      	push	{r3, r4, r5, lr}
 8004bee:	4c06      	ldr	r4, [pc, #24]	; (8004c08 <_sbrk_r+0x1c>)
 8004bf0:	2300      	movs	r3, #0
 8004bf2:	4605      	mov	r5, r0
 8004bf4:	4608      	mov	r0, r1
 8004bf6:	6023      	str	r3, [r4, #0]
 8004bf8:	f7fd fb88 	bl	800230c <_sbrk>
 8004bfc:	1c43      	adds	r3, r0, #1
 8004bfe:	d102      	bne.n	8004c06 <_sbrk_r+0x1a>
 8004c00:	6823      	ldr	r3, [r4, #0]
 8004c02:	b103      	cbz	r3, 8004c06 <_sbrk_r+0x1a>
 8004c04:	602b      	str	r3, [r5, #0]
 8004c06:	bd38      	pop	{r3, r4, r5, pc}
 8004c08:	20000674 	.word	0x20000674

08004c0c <__sread>:
 8004c0c:	b510      	push	{r4, lr}
 8004c0e:	460c      	mov	r4, r1
 8004c10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c14:	f000 f896 	bl	8004d44 <_read_r>
 8004c18:	2800      	cmp	r0, #0
 8004c1a:	bfab      	itete	ge
 8004c1c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004c1e:	89a3      	ldrhlt	r3, [r4, #12]
 8004c20:	181b      	addge	r3, r3, r0
 8004c22:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004c26:	bfac      	ite	ge
 8004c28:	6563      	strge	r3, [r4, #84]	; 0x54
 8004c2a:	81a3      	strhlt	r3, [r4, #12]
 8004c2c:	bd10      	pop	{r4, pc}

08004c2e <__swrite>:
 8004c2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c32:	461f      	mov	r7, r3
 8004c34:	898b      	ldrh	r3, [r1, #12]
 8004c36:	05db      	lsls	r3, r3, #23
 8004c38:	4605      	mov	r5, r0
 8004c3a:	460c      	mov	r4, r1
 8004c3c:	4616      	mov	r6, r2
 8004c3e:	d505      	bpl.n	8004c4c <__swrite+0x1e>
 8004c40:	2302      	movs	r3, #2
 8004c42:	2200      	movs	r2, #0
 8004c44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c48:	f000 f868 	bl	8004d1c <_lseek_r>
 8004c4c:	89a3      	ldrh	r3, [r4, #12]
 8004c4e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004c52:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004c56:	81a3      	strh	r3, [r4, #12]
 8004c58:	4632      	mov	r2, r6
 8004c5a:	463b      	mov	r3, r7
 8004c5c:	4628      	mov	r0, r5
 8004c5e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004c62:	f000 b817 	b.w	8004c94 <_write_r>

08004c66 <__sseek>:
 8004c66:	b510      	push	{r4, lr}
 8004c68:	460c      	mov	r4, r1
 8004c6a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c6e:	f000 f855 	bl	8004d1c <_lseek_r>
 8004c72:	1c43      	adds	r3, r0, #1
 8004c74:	89a3      	ldrh	r3, [r4, #12]
 8004c76:	bf15      	itete	ne
 8004c78:	6560      	strne	r0, [r4, #84]	; 0x54
 8004c7a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004c7e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8004c82:	81a3      	strheq	r3, [r4, #12]
 8004c84:	bf18      	it	ne
 8004c86:	81a3      	strhne	r3, [r4, #12]
 8004c88:	bd10      	pop	{r4, pc}

08004c8a <__sclose>:
 8004c8a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c8e:	f000 b813 	b.w	8004cb8 <_close_r>
	...

08004c94 <_write_r>:
 8004c94:	b538      	push	{r3, r4, r5, lr}
 8004c96:	4c07      	ldr	r4, [pc, #28]	; (8004cb4 <_write_r+0x20>)
 8004c98:	4605      	mov	r5, r0
 8004c9a:	4608      	mov	r0, r1
 8004c9c:	4611      	mov	r1, r2
 8004c9e:	2200      	movs	r2, #0
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	461a      	mov	r2, r3
 8004ca4:	f7fd fae2 	bl	800226c <_write>
 8004ca8:	1c43      	adds	r3, r0, #1
 8004caa:	d102      	bne.n	8004cb2 <_write_r+0x1e>
 8004cac:	6823      	ldr	r3, [r4, #0]
 8004cae:	b103      	cbz	r3, 8004cb2 <_write_r+0x1e>
 8004cb0:	602b      	str	r3, [r5, #0]
 8004cb2:	bd38      	pop	{r3, r4, r5, pc}
 8004cb4:	20000674 	.word	0x20000674

08004cb8 <_close_r>:
 8004cb8:	b538      	push	{r3, r4, r5, lr}
 8004cba:	4c06      	ldr	r4, [pc, #24]	; (8004cd4 <_close_r+0x1c>)
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	4608      	mov	r0, r1
 8004cc2:	6023      	str	r3, [r4, #0]
 8004cc4:	f7fd faee 	bl	80022a4 <_close>
 8004cc8:	1c43      	adds	r3, r0, #1
 8004cca:	d102      	bne.n	8004cd2 <_close_r+0x1a>
 8004ccc:	6823      	ldr	r3, [r4, #0]
 8004cce:	b103      	cbz	r3, 8004cd2 <_close_r+0x1a>
 8004cd0:	602b      	str	r3, [r5, #0]
 8004cd2:	bd38      	pop	{r3, r4, r5, pc}
 8004cd4:	20000674 	.word	0x20000674

08004cd8 <_fstat_r>:
 8004cd8:	b538      	push	{r3, r4, r5, lr}
 8004cda:	4c07      	ldr	r4, [pc, #28]	; (8004cf8 <_fstat_r+0x20>)
 8004cdc:	2300      	movs	r3, #0
 8004cde:	4605      	mov	r5, r0
 8004ce0:	4608      	mov	r0, r1
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	6023      	str	r3, [r4, #0]
 8004ce6:	f7fd fae9 	bl	80022bc <_fstat>
 8004cea:	1c43      	adds	r3, r0, #1
 8004cec:	d102      	bne.n	8004cf4 <_fstat_r+0x1c>
 8004cee:	6823      	ldr	r3, [r4, #0]
 8004cf0:	b103      	cbz	r3, 8004cf4 <_fstat_r+0x1c>
 8004cf2:	602b      	str	r3, [r5, #0]
 8004cf4:	bd38      	pop	{r3, r4, r5, pc}
 8004cf6:	bf00      	nop
 8004cf8:	20000674 	.word	0x20000674

08004cfc <_isatty_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	4c06      	ldr	r4, [pc, #24]	; (8004d18 <_isatty_r+0x1c>)
 8004d00:	2300      	movs	r3, #0
 8004d02:	4605      	mov	r5, r0
 8004d04:	4608      	mov	r0, r1
 8004d06:	6023      	str	r3, [r4, #0]
 8004d08:	f7fd fae8 	bl	80022dc <_isatty>
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	d102      	bne.n	8004d16 <_isatty_r+0x1a>
 8004d10:	6823      	ldr	r3, [r4, #0]
 8004d12:	b103      	cbz	r3, 8004d16 <_isatty_r+0x1a>
 8004d14:	602b      	str	r3, [r5, #0]
 8004d16:	bd38      	pop	{r3, r4, r5, pc}
 8004d18:	20000674 	.word	0x20000674

08004d1c <_lseek_r>:
 8004d1c:	b538      	push	{r3, r4, r5, lr}
 8004d1e:	4c07      	ldr	r4, [pc, #28]	; (8004d3c <_lseek_r+0x20>)
 8004d20:	4605      	mov	r5, r0
 8004d22:	4608      	mov	r0, r1
 8004d24:	4611      	mov	r1, r2
 8004d26:	2200      	movs	r2, #0
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	461a      	mov	r2, r3
 8004d2c:	f7fd fae1 	bl	80022f2 <_lseek>
 8004d30:	1c43      	adds	r3, r0, #1
 8004d32:	d102      	bne.n	8004d3a <_lseek_r+0x1e>
 8004d34:	6823      	ldr	r3, [r4, #0]
 8004d36:	b103      	cbz	r3, 8004d3a <_lseek_r+0x1e>
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	bd38      	pop	{r3, r4, r5, pc}
 8004d3c:	20000674 	.word	0x20000674

08004d40 <__malloc_lock>:
 8004d40:	4770      	bx	lr

08004d42 <__malloc_unlock>:
 8004d42:	4770      	bx	lr

08004d44 <_read_r>:
 8004d44:	b538      	push	{r3, r4, r5, lr}
 8004d46:	4c07      	ldr	r4, [pc, #28]	; (8004d64 <_read_r+0x20>)
 8004d48:	4605      	mov	r5, r0
 8004d4a:	4608      	mov	r0, r1
 8004d4c:	4611      	mov	r1, r2
 8004d4e:	2200      	movs	r2, #0
 8004d50:	6022      	str	r2, [r4, #0]
 8004d52:	461a      	mov	r2, r3
 8004d54:	f7fd fa6d 	bl	8002232 <_read>
 8004d58:	1c43      	adds	r3, r0, #1
 8004d5a:	d102      	bne.n	8004d62 <_read_r+0x1e>
 8004d5c:	6823      	ldr	r3, [r4, #0]
 8004d5e:	b103      	cbz	r3, 8004d62 <_read_r+0x1e>
 8004d60:	602b      	str	r3, [r5, #0]
 8004d62:	bd38      	pop	{r3, r4, r5, pc}
 8004d64:	20000674 	.word	0x20000674

08004d68 <_init>:
 8004d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d6a:	bf00      	nop
 8004d6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d6e:	bc08      	pop	{r3}
 8004d70:	469e      	mov	lr, r3
 8004d72:	4770      	bx	lr

08004d74 <_fini>:
 8004d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d76:	bf00      	nop
 8004d78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d7a:	bc08      	pop	{r3}
 8004d7c:	469e      	mov	lr, r3
 8004d7e:	4770      	bx	lr
