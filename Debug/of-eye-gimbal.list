
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003dd4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000454  08003f64  08003f64  00013f64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080043b8  080043b8  000205c4  2**0
                  CONTENTS
  4 .ARM          00000000  080043b8  080043b8  000205c4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080043b8  080043b8  000205c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080043b8  080043b8  000143b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080043bc  080043bc  000143bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c4  20000000  080043c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000044  200005c4  08004984  000205c4  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  08004984  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eec6  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000250b  00000000  00000000  0002f4ba  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b68  00000000  00000000  000319c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a40  00000000  00000000  00032530  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002406c  00000000  00000000  00032f70  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009937  00000000  00000000  00056fdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000baf44  00000000  00000000  00060913  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011b857  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000349c  00000000  00000000  0011b8d4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c4 	.word	0x200005c4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003f4c 	.word	0x08003f4c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005c8 	.word	0x200005c8
 80001cc:	08003f4c 	.word	0x08003f4c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f80d 	bl	800029c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f833 	bl	80002f0 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f877 	bl	8000380 <adns2610_config>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <adns2610_configureSPI+0x14>
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <adns2610_configureSPI+0x48>)
 80002ae:	e000      	b.n	80002b2 <adns2610_configureSPI+0x16>
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <adns2610_configureSPI+0x4c>)
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b4:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <adns2610_configureSPI+0x50>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80002c4:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <adns2610_configureSPI+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <adns2610_configureSPI+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40003800 	.word	0x40003800
 80002e8:	40003c00 	.word	0x40003c00
 80002ec:	200005e0 	.word	0x200005e0

080002f0 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <adns2610_resetCOM+0x14>
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <adns2610_resetCOM+0x84>)
 8000302:	e000      	b.n	8000306 <adns2610_resetCOM+0x16>
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <adns2610_resetCOM+0x88>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <adns2610_resetCOM+0x8c>)
 8000308:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800030a:	bf00      	nop
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <adns2610_resetCOM+0x8c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <adns2610_resetCOM+0x8c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	330c      	adds	r3, #12
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000324:	bf00      	nop
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <adns2610_resetCOM+0x8c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f8      	beq.n	8000326 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <adns2610_resetCOM+0x8c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	330c      	adds	r3, #12
 800033a:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800033c:	bf00      	nop
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <adns2610_resetCOM+0x8c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <adns2610_resetCOM+0x8c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000352:	431a      	orrs	r2, r3
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <adns2610_resetCOM+0x8c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	4313      	orrs	r3, r2
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1ec      	bne.n	800033e <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f002 fe41 	bl	8002fec <LL_mDelay>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40003800 	.word	0x40003800
 8000378:	40003c00 	.word	0x40003c00
 800037c:	200005e0 	.word	0x200005e0

08000380 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <adns2610_config+0x14>
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <adns2610_config+0xc0>)
 8000392:	e000      	b.n	8000396 <adns2610_config+0x16>
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <adns2610_config+0xc4>)
 8000396:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	482b      	ldr	r0, [pc, #172]	; (8000448 <adns2610_config+0xc8>)
 800039c:	f002 fe8e 	bl	80030bc <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 80003a0:	492a      	ldr	r1, [pc, #168]	; (800044c <adns2610_config+0xcc>)
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <adns2610_config+0xd0>)
 80003a4:	f002 fe8a 	bl	80030bc <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2201      	movs	r2, #1
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f8be 	bl	8000530 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 80003b4:	4925      	ldr	r1, [pc, #148]	; (800044c <adns2610_config+0xcc>)
 80003b6:	4827      	ldr	r0, [pc, #156]	; (8000454 <adns2610_config+0xd4>)
 80003b8:	f002 fe80 	bl	80030bc <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f857 	bl	8000474 <adns2610_readRegister>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d10f      	bne.n	80003ec <adns2610_config+0x6c>
 80003cc:	4822      	ldr	r0, [pc, #136]	; (8000458 <adns2610_config+0xd8>)
 80003ce:	f002 fee9 	bl	80031a4 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 80003d2:	4922      	ldr	r1, [pc, #136]	; (800045c <adns2610_config+0xdc>)
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <adns2610_config+0xe0>)
 80003d6:	f002 fe71 	bl	80030bc <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f848 	bl	8000474 <adns2610_readRegister>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d116      	bne.n	8000418 <adns2610_config+0x98>
 80003ea:	e003      	b.n	80003f4 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 80003ec:	481d      	ldr	r0, [pc, #116]	; (8000464 <adns2610_config+0xe4>)
 80003ee:	f002 fed9 	bl	80031a4 <puts>
 80003f2:	e7fe      	b.n	80003f2 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003f4:	4818      	ldr	r0, [pc, #96]	; (8000458 <adns2610_config+0xd8>)
 80003f6:	f002 fed5 	bl	80031a4 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 80003fa:	491b      	ldr	r1, [pc, #108]	; (8000468 <adns2610_config+0xe8>)
 80003fc:	481b      	ldr	r0, [pc, #108]	; (800046c <adns2610_config+0xec>)
 80003fe:	f002 fe5d 	bl	80030bc <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2111      	movs	r1, #17
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f834 	bl	8000474 <adns2610_readRegister>
 800040c:	4603      	mov	r3, r0
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	2b0f      	cmp	r3, #15
 8000414:	d108      	bne.n	8000428 <adns2610_config+0xa8>
 8000416:	e003      	b.n	8000420 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <adns2610_config+0xe4>)
 800041a:	f002 fec3 	bl	80031a4 <puts>
 800041e:	e7fe      	b.n	800041e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <adns2610_config+0xd8>)
 8000422:	f002 febf 	bl	80031a4 <puts>
 8000426:	e003      	b.n	8000430 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <adns2610_config+0xe4>)
 800042a:	f002 febb 	bl	80031a4 <puts>
 800042e:	e7fe      	b.n	800042e <adns2610_config+0xae>

	printf("\r\n");
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <adns2610_config+0xf0>)
 8000432:	f002 feb7 	bl	80031a4 <puts>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	08003f64 	.word	0x08003f64
 8000444:	08003f74 	.word	0x08003f74
 8000448:	08003f84 	.word	0x08003f84
 800044c:	08003fe0 	.word	0x08003fe0
 8000450:	08003ff0 	.word	0x08003ff0
 8000454:	08004020 	.word	0x08004020
 8000458:	0800404c 	.word	0x0800404c
 800045c:	0800405c 	.word	0x0800405c
 8000460:	0800406c 	.word	0x0800406c
 8000464:	08004054 	.word	0x08004054
 8000468:	08004098 	.word	0x08004098
 800046c:	080040ac 	.word	0x080040ac
 8000470:	080040e0 	.word	0x080040e0

08000474 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <adns2610_readRegister+0x1a>
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <adns2610_readRegister+0xb0>)
 800048c:	e000      	b.n	8000490 <adns2610_readRegister+0x1c>
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <adns2610_readRegister+0xb4>)
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <adns2610_readRegister+0xb8>)
 8000492:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000494:	bf00      	nop
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <adns2610_readRegister+0xb8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f8      	beq.n	8000496 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <adns2610_readRegister+0xb8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	330c      	adds	r3, #12
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004ae:	bf00      	nop
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <adns2610_readRegister+0xb8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f8      	beq.n	80004b0 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <adns2610_readRegister+0xb8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	330c      	adds	r3, #12
 80004c4:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f002 fd90 	bl	8002fec <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <adns2610_readRegister+0xb8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	330c      	adds	r3, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004d6:	bf00      	nop
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <adns2610_readRegister+0xb8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <adns2610_readRegister+0xb8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	330c      	adds	r3, #12
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80004f0:	bf00      	nop
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <adns2610_readRegister+0xb8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <adns2610_readRegister+0xb8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000506:	431a      	orrs	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <adns2610_readRegister+0xb8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	4313      	orrs	r3, r2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1ec      	bne.n	80004f2 <adns2610_readRegister+0x7e>
	return value;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40003800 	.word	0x40003800
 8000528:	40003c00 	.word	0x40003c00
 800052c:	200005e0 	.word	0x200005e0

08000530 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	460b      	mov	r3, r1
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <adns2610_writeRegister+0x1c>
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <adns2610_writeRegister+0xb4>)
 800054a:	e000      	b.n	800054e <adns2610_writeRegister+0x1e>
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <adns2610_writeRegister+0xb8>)
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000550:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <adns2610_writeRegister+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000560:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000562:	bf00      	nop
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f8      	beq.n	8000564 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	4619      	mov	r1, r3
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800058a:	bf00      	nop
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <adns2610_writeRegister+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <adns2610_writeRegister+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80005a0:	bf00      	nop
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	4313      	orrs	r3, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1ec      	bne.n	80005a2 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005d6:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40003800 	.word	0x40003800
 80005e8:	40003c00 	.word	0x40003c00
 80005ec:	200005e0 	.word	0x200005e0

080005f0 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <adns2610_receiveByte+0x16>
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <adns2610_receiveByte+0x78>)
 8000604:	e000      	b.n	8000608 <adns2610_receiveByte+0x18>
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <adns2610_receiveByte+0x7c>)
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <adns2610_receiveByte+0x80>)
 800060a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <adns2610_receiveByte+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	330c      	adds	r3, #12
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000616:	bf00      	nop
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <adns2610_receiveByte+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f8      	beq.n	8000618 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <adns2610_receiveByte+0x80>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	330c      	adds	r3, #12
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000634:	bf00      	nop
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <adns2610_receiveByte+0x80>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <adns2610_receiveByte+0x80>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064a:	431a      	orrs	r2, r3
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <adns2610_receiveByte+0x80>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	4313      	orrs	r3, r2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40003800 	.word	0x40003800
 800066c:	40003c00 	.word	0x40003c00
 8000670:	200005e0 	.word	0x200005e0

08000674 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <adns2610_sendByte+0x1a>
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <adns2610_sendByte+0x60>)
 800068c:	e000      	b.n	8000690 <adns2610_sendByte+0x1c>
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <adns2610_sendByte+0x64>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <adns2610_sendByte+0x68>)
 8000692:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000694:	bf00      	nop
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <adns2610_sendByte+0x68>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <adns2610_sendByte+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80006ae:	bf00      	nop
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <adns2610_sendByte+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f8      	beq.n	80006b0 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <adns2610_sendByte+0x68>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	330c      	adds	r3, #12
 80006c4:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40003800 	.word	0x40003800
 80006d8:	40003c00 	.word	0x40003c00
 80006dc:	200005e0 	.word	0x200005e0

080006e0 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da01      	bge.n	8000702 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 80006fe:	2300      	movs	r3, #0
 8000700:	e009      	b.n	8000716 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000702:	2302      	movs	r3, #2
 8000704:	e007      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	da01      	bge.n	8000714 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000714:	2303      	movs	r3, #3
	}
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000724:	b480      	push	{r7}
 8000726:	b083      	sub	sp, #12
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800072e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000732:	2b00      	cmp	r3, #0
 8000734:	db0b      	blt.n	800074e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000736:	79fb      	ldrb	r3, [r7, #7]
 8000738:	f003 021f 	and.w	r2, r3, #31
 800073c:	4907      	ldr	r1, [pc, #28]	; (800075c <__NVIC_EnableIRQ+0x38>)
 800073e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000742:	095b      	lsrs	r3, r3, #5
 8000744:	2001      	movs	r0, #1
 8000746:	fa00 f202 	lsl.w	r2, r0, r2
 800074a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800074e:	bf00      	nop
 8000750:	370c      	adds	r7, #12
 8000752:	46bd      	mov	sp, r7
 8000754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000758:	4770      	bx	lr
 800075a:	bf00      	nop
 800075c:	e000e100 	.word	0xe000e100

08000760 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	4603      	mov	r3, r0
 8000768:	6039      	str	r1, [r7, #0]
 800076a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800076c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000770:	2b00      	cmp	r3, #0
 8000772:	db0a      	blt.n	800078a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000774:	683b      	ldr	r3, [r7, #0]
 8000776:	b2da      	uxtb	r2, r3
 8000778:	490c      	ldr	r1, [pc, #48]	; (80007ac <__NVIC_SetPriority+0x4c>)
 800077a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800077e:	0112      	lsls	r2, r2, #4
 8000780:	b2d2      	uxtb	r2, r2
 8000782:	440b      	add	r3, r1
 8000784:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000788:	e00a      	b.n	80007a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800078a:	683b      	ldr	r3, [r7, #0]
 800078c:	b2da      	uxtb	r2, r3
 800078e:	4908      	ldr	r1, [pc, #32]	; (80007b0 <__NVIC_SetPriority+0x50>)
 8000790:	79fb      	ldrb	r3, [r7, #7]
 8000792:	f003 030f 	and.w	r3, r3, #15
 8000796:	3b04      	subs	r3, #4
 8000798:	0112      	lsls	r2, r2, #4
 800079a:	b2d2      	uxtb	r2, r2
 800079c:	440b      	add	r3, r1
 800079e:	761a      	strb	r2, [r3, #24]
}
 80007a0:	bf00      	nop
 80007a2:	370c      	adds	r7, #12
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	e000e100 	.word	0xe000e100
 80007b0:	e000ed00 	.word	0xe000ed00

080007b4 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 80007b4:	b480      	push	{r7}
 80007b6:	b085      	sub	sp, #20
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
 80007bc:	460b      	mov	r3, r1
 80007be:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 80007c0:	2300      	movs	r3, #0
 80007c2:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 80007c4:	4a0a      	ldr	r2, [pc, #40]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007c6:	687b      	ldr	r3, [r7, #4]
 80007c8:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 80007ca:	4a09      	ldr	r2, [pc, #36]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007cc:	887b      	ldrh	r3, [r7, #2]
 80007ce:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 80007d0:	4b07      	ldr	r3, [pc, #28]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 80007d6:	68fb      	ldr	r3, [r7, #12]
 80007d8:	f043 0301 	orr.w	r3, r3, #1
 80007dc:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 80007de:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <transferDMA_USART2_TX+0x3c>)
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	6013      	str	r3, [r2, #0]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40020080 	.word	0x40020080

080007f4 <eyes_init>:
bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2);

/* Exported variables -------------------------------------------*/
frameStruct frames[2] = {{.header = 0xFF}, {.header = 0xFF}};

void eyes_init(){
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 80007f8:	f000 f952 	bl	8000aa0 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 80007fc:	2000      	movs	r0, #0
 80007fe:	f7ff fd37 	bl	8000270 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000802:	2201      	movs	r2, #1
 8000804:	2100      	movs	r1, #0
 8000806:	4805      	ldr	r0, [pc, #20]	; (800081c <eyes_init+0x28>)
 8000808:	f001 f952 	bl	8001ab0 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 800080c:	4b04      	ldr	r3, [pc, #16]	; (8000820 <eyes_init+0x2c>)
 800080e:	2200      	movs	r2, #0
 8000810:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000812:	4b04      	ldr	r3, [pc, #16]	; (8000824 <eyes_init+0x30>)
 8000814:	2201      	movs	r2, #1
 8000816:	701a      	strb	r2, [r3, #0]
}
 8000818:	bf00      	nop
 800081a:	bd80      	pop	{r7, pc}
 800081c:	40004400 	.word	0x40004400
 8000820:	20000600 	.word	0x20000600
 8000824:	20000601 	.word	0x20000601

08000828 <eyes_start>:

void eyes_start(){
 8000828:	b480      	push	{r7}
 800082a:	af00      	add	r7, sp, #0
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <eyes_start+0x20>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	4a05      	ldr	r2, [pc, #20]	; (8000848 <eyes_start+0x20>)
 8000832:	f043 0301 	orr.w	r3, r3, #1
 8000836:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000838:	4b04      	ldr	r3, [pc, #16]	; (800084c <eyes_start+0x24>)
 800083a:	2201      	movs	r2, #1
 800083c:	701a      	strb	r2, [r3, #0]
}
 800083e:	bf00      	nop
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40012c00 	.word	0x40012c00
 800084c:	200005e4 	.word	0x200005e4

08000850 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	static bool firstFrameRead = true;

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;

	switch(FSMstate){
 8000856:	4b85      	ldr	r3, [pc, #532]	; (8000a6c <eyes_FSM+0x21c>)
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	2b04      	cmp	r3, #4
 800085c:	f200 80fc 	bhi.w	8000a58 <eyes_FSM+0x208>
 8000860:	a201      	add	r2, pc, #4	; (adr r2, 8000868 <eyes_FSM+0x18>)
 8000862:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000866:	bf00      	nop
 8000868:	0800087d 	.word	0x0800087d
 800086c:	0800088f 	.word	0x0800088f
 8000870:	080009ab 	.word	0x080009ab
 8000874:	080008f1 	.word	0x080008f1
 8000878:	08000a1b 	.word	0x08000a1b
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;

		pixelIdx[ADNS2610_RIGHT] = 0;
 800087c:	4b7c      	ldr	r3, [pc, #496]	; (8000a70 <eyes_FSM+0x220>)
 800087e:	2200      	movs	r2, #0
 8000880:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_RIGHT] = 0;
#endif
		eyes_stopWaitIT();
 8000882:	f000 f973 	bl	8000b6c <eyes_stopWaitIT>
		collisionFlag = 0;
 8000886:	4b7b      	ldr	r3, [pc, #492]	; (8000a74 <eyes_FSM+0x224>)
 8000888:	2200      	movs	r2, #0
 800088a:	701a      	strb	r2, [r3, #0]
		return;
 800088c:	e0ea      	b.n	8000a64 <eyes_FSM+0x214>
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 800088e:	f000 f96d 	bl	8000b6c <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000892:	4b78      	ldr	r3, [pc, #480]	; (8000a74 <eyes_FSM+0x224>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	f040 80d9 	bne.w	8000a4e <eyes_FSM+0x1fe>
 800089c:	4b75      	ldr	r3, [pc, #468]	; (8000a74 <eyes_FSM+0x224>)
 800089e:	2201      	movs	r2, #1
 80008a0:	701a      	strb	r2, [r3, #0]
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 80008a2:	2201      	movs	r2, #1
 80008a4:	2108      	movs	r1, #8
 80008a6:	2000      	movs	r0, #0
 80008a8:	f7ff fe42 	bl	8000530 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 80008ac:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 80008b0:	f000 f934 	bl	8000b1c <eyes_waitIT>
		firstPixelRead = true;
 80008b4:	4b70      	ldr	r3, [pc, #448]	; (8000a78 <eyes_FSM+0x228>)
 80008b6:	2201      	movs	r2, #1
 80008b8:	701a      	strb	r2, [r3, #0]
//		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
		FSMstate = REQ_READING_FRAME;
 80008ba:	4b6c      	ldr	r3, [pc, #432]	; (8000a6c <eyes_FSM+0x21c>)
 80008bc:	2203      	movs	r2, #3
 80008be:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 80008c0:	4b6b      	ldr	r3, [pc, #428]	; (8000a70 <eyes_FSM+0x220>)
 80008c2:	2200      	movs	r2, #0
 80008c4:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
#endif
		transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 80008c6:	4b6d      	ldr	r3, [pc, #436]	; (8000a7c <eyes_FSM+0x22c>)
 80008c8:	781b      	ldrb	r3, [r3, #0]
 80008ca:	461a      	mov	r2, r3
 80008cc:	f240 23ad 	movw	r3, #685	; 0x2ad
 80008d0:	fb03 f302 	mul.w	r3, r3, r2
 80008d4:	4a6a      	ldr	r2, [pc, #424]	; (8000a80 <eyes_FSM+0x230>)
 80008d6:	4413      	add	r3, r2
 80008d8:	f44f 712b 	mov.w	r1, #684	; 0x2ac
 80008dc:	4618      	mov	r0, r3
 80008de:	f7ff ff69 	bl	80007b4 <transferDMA_USART2_TX>
		collisionFlag = 0;
 80008e2:	4b64      	ldr	r3, [pc, #400]	; (8000a74 <eyes_FSM+0x224>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 80008e8:	4b66      	ldr	r3, [pc, #408]	; (8000a84 <eyes_FSM+0x234>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	801a      	strh	r2, [r3, #0]
		return;
 80008ee:	e0b9      	b.n	8000a64 <eyes_FSM+0x214>
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 80008f0:	f000 f93c 	bl	8000b6c <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80008f4:	4b5f      	ldr	r3, [pc, #380]	; (8000a74 <eyes_FSM+0x224>)
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	f040 80aa 	bne.w	8000a52 <eyes_FSM+0x202>
 80008fe:	4b5d      	ldr	r3, [pc, #372]	; (8000a74 <eyes_FSM+0x224>)
 8000900:	2201      	movs	r2, #1
 8000902:	701a      	strb	r2, [r3, #0]
		adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000904:	2108      	movs	r1, #8
 8000906:	2000      	movs	r0, #0
 8000908:	f7ff feb4 	bl	8000674 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
#endif
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 800090c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000910:	f000 f904 	bl	8000b1c <eyes_waitIT>
		if(!firstPixelRead){
 8000914:	4b58      	ldr	r3, [pc, #352]	; (8000a78 <eyes_FSM+0x228>)
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f083 0301 	eor.w	r3, r3, #1
 800091c:	b2db      	uxtb	r3, r3
 800091e:	2b00      	cmp	r3, #0
 8000920:	d039      	beq.n	8000996 <eyes_FSM+0x146>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000922:	4b59      	ldr	r3, [pc, #356]	; (8000a88 <eyes_FSM+0x238>)
 8000924:	781b      	ldrb	r3, [r3, #0]
 8000926:	4619      	mov	r1, r3
 8000928:	4b51      	ldr	r3, [pc, #324]	; (8000a70 <eyes_FSM+0x220>)
 800092a:	881b      	ldrh	r3, [r3, #0]
 800092c:	461a      	mov	r2, r3
 800092e:	f240 23ad 	movw	r3, #685	; 0x2ad
 8000932:	fb03 f301 	mul.w	r3, r3, r1
 8000936:	4413      	add	r3, r2
 8000938:	4a51      	ldr	r2, [pc, #324]	; (8000a80 <eyes_FSM+0x230>)
 800093a:	4413      	add	r3, r2
 800093c:	3301      	adds	r3, #1
 800093e:	4618      	mov	r0, r3
 8000940:	f7ff fece 	bl	80006e0 <adns2610_checkPixel>
 8000944:	4603      	mov	r3, r0
 8000946:	461a      	mov	r2, r3
 8000948:	4b50      	ldr	r3, [pc, #320]	; (8000a8c <eyes_FSM+0x23c>)
 800094a:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 800094c:	4b50      	ldr	r3, [pc, #320]	; (8000a90 <eyes_FSM+0x240>)
 800094e:	4a48      	ldr	r2, [pc, #288]	; (8000a70 <eyes_FSM+0x220>)
 8000950:	4950      	ldr	r1, [pc, #320]	; (8000a94 <eyes_FSM+0x244>)
 8000952:	484e      	ldr	r0, [pc, #312]	; (8000a8c <eyes_FSM+0x23c>)
 8000954:	f000 f91a 	bl	8000b8c <eyes_computeIdxFromStatus>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d011      	beq.n	8000982 <eyes_FSM+0x132>
				FSMstate = READING_FRAME;
 800095e:	4b43      	ldr	r3, [pc, #268]	; (8000a6c <eyes_FSM+0x21c>)
 8000960:	2202      	movs	r2, #2
 8000962:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 8000964:	4b49      	ldr	r3, [pc, #292]	; (8000a8c <eyes_FSM+0x23c>)
 8000966:	781b      	ldrb	r3, [r3, #0]
 8000968:	2b03      	cmp	r3, #3
 800096a:	d003      	beq.n	8000974 <eyes_FSM+0x124>
 800096c:	4b47      	ldr	r3, [pc, #284]	; (8000a8c <eyes_FSM+0x23c>)
 800096e:	781b      	ldrb	r3, [r3, #0]
 8000970:	2b01      	cmp	r3, #1
 8000972:	d116      	bne.n	80009a2 <eyes_FSM+0x152>
					errorCounter++;
 8000974:	4b43      	ldr	r3, [pc, #268]	; (8000a84 <eyes_FSM+0x234>)
 8000976:	881b      	ldrh	r3, [r3, #0]
 8000978:	3301      	adds	r3, #1
 800097a:	b29a      	uxth	r2, r3
 800097c:	4b41      	ldr	r3, [pc, #260]	; (8000a84 <eyes_FSM+0x234>)
 800097e:	801a      	strh	r2, [r3, #0]
 8000980:	e00f      	b.n	80009a2 <eyes_FSM+0x152>
				}
			}
			else{
				eyes_stopWaitIT();
 8000982:	f000 f8f3 	bl	8000b6c <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8000986:	4b39      	ldr	r3, [pc, #228]	; (8000a6c <eyes_FSM+0x21c>)
 8000988:	2201      	movs	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 800098c:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000990:	f000 f8c4 	bl	8000b1c <eyes_waitIT>
 8000994:	e005      	b.n	80009a2 <eyes_FSM+0x152>
			}
		}
		else{
			firstPixelRead = false;
 8000996:	4b38      	ldr	r3, [pc, #224]	; (8000a78 <eyes_FSM+0x228>)
 8000998:	2200      	movs	r2, #0
 800099a:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 800099c:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <eyes_FSM+0x21c>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <eyes_FSM+0x224>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	701a      	strb	r2, [r3, #0]
		return;
 80009a8:	e05c      	b.n	8000a64 <eyes_FSM+0x214>
	case READING_FRAME:
		eyes_stopWaitIT();
 80009aa:	f000 f8df 	bl	8000b6c <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <eyes_FSM+0x224>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d14f      	bne.n	8000a56 <eyes_FSM+0x206>
 80009b6:	4b2f      	ldr	r3, [pc, #188]	; (8000a74 <eyes_FSM+0x224>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
		adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 80009bc:	4b32      	ldr	r3, [pc, #200]	; (8000a88 <eyes_FSM+0x238>)
 80009be:	781b      	ldrb	r3, [r3, #0]
 80009c0:	4619      	mov	r1, r3
 80009c2:	4b2b      	ldr	r3, [pc, #172]	; (8000a70 <eyes_FSM+0x220>)
 80009c4:	881b      	ldrh	r3, [r3, #0]
 80009c6:	461a      	mov	r2, r3
 80009c8:	f240 23ad 	movw	r3, #685	; 0x2ad
 80009cc:	fb03 f301 	mul.w	r3, r3, r1
 80009d0:	4413      	add	r3, r2
 80009d2:	4a2b      	ldr	r2, [pc, #172]	; (8000a80 <eyes_FSM+0x230>)
 80009d4:	4413      	add	r3, r2
 80009d6:	3301      	adds	r3, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fe08 	bl	80005f0 <adns2610_receiveByte>
		}
		else{
			FSMstate = REQ_READING_FRAME;
		}
#else
		if(pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1){
 80009e0:	4b23      	ldr	r3, [pc, #140]	; (8000a70 <eyes_FSM+0x220>)
 80009e2:	881b      	ldrh	r3, [r3, #0]
 80009e4:	f240 1243 	movw	r2, #323	; 0x143
 80009e8:	4293      	cmp	r3, r2
 80009ea:	d10c      	bne.n	8000a06 <eyes_FSM+0x1b6>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 80009ec:	4b28      	ldr	r3, [pc, #160]	; (8000a90 <eyes_FSM+0x240>)
 80009ee:	4a20      	ldr	r2, [pc, #128]	; (8000a70 <eyes_FSM+0x220>)
 80009f0:	4928      	ldr	r1, [pc, #160]	; (8000a94 <eyes_FSM+0x244>)
 80009f2:	4826      	ldr	r0, [pc, #152]	; (8000a8c <eyes_FSM+0x23c>)
 80009f4:	f000 f8ca 	bl	8000b8c <eyes_computeIdxFromStatus>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d006      	beq.n	8000a0c <eyes_FSM+0x1bc>
				FSMstate = PROCESSING;
 80009fe:	4b1b      	ldr	r3, [pc, #108]	; (8000a6c <eyes_FSM+0x21c>)
 8000a00:	2204      	movs	r2, #4
 8000a02:	701a      	strb	r2, [r3, #0]
 8000a04:	e002      	b.n	8000a0c <eyes_FSM+0x1bc>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000a06:	4b19      	ldr	r3, [pc, #100]	; (8000a6c <eyes_FSM+0x21c>)
 8000a08:	2203      	movs	r2, #3
 8000a0a:	701a      	strb	r2, [r3, #0]
		}
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a0c:	20c8      	movs	r0, #200	; 0xc8
 8000a0e:	f000 f885 	bl	8000b1c <eyes_waitIT>
		collisionFlag = 0;
 8000a12:	4b18      	ldr	r3, [pc, #96]	; (8000a74 <eyes_FSM+0x224>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	701a      	strb	r2, [r3, #0]
		return;
 8000a18:	e024      	b.n	8000a64 <eyes_FSM+0x214>
	case PROCESSING:
		eyes_stopWaitIT();
 8000a1a:	f000 f8a7 	bl	8000b6c <eyes_stopWaitIT>
		if(firstFrameRead) firstFrameRead = false;
 8000a1e:	4b1e      	ldr	r3, [pc, #120]	; (8000a98 <eyes_FSM+0x248>)
 8000a20:	781b      	ldrb	r3, [r3, #0]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d002      	beq.n	8000a2c <eyes_FSM+0x1dc>
 8000a26:	4b1c      	ldr	r3, [pc, #112]	; (8000a98 <eyes_FSM+0x248>)
 8000a28:	2200      	movs	r2, #0
 8000a2a:	701a      	strb	r2, [r3, #0]
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 8000a2c:	4b13      	ldr	r3, [pc, #76]	; (8000a7c <eyes_FSM+0x22c>)
 8000a2e:	781b      	ldrb	r3, [r3, #0]
 8000a30:	71fb      	strb	r3, [r7, #7]
 8000a32:	4b15      	ldr	r3, [pc, #84]	; (8000a88 <eyes_FSM+0x238>)
 8000a34:	781a      	ldrb	r2, [r3, #0]
 8000a36:	4b11      	ldr	r3, [pc, #68]	; (8000a7c <eyes_FSM+0x22c>)
 8000a38:	701a      	strb	r2, [r3, #0]
 8000a3a:	4a13      	ldr	r2, [pc, #76]	; (8000a88 <eyes_FSM+0x238>)
 8000a3c:	79fb      	ldrb	r3, [r7, #7]
 8000a3e:	7013      	strb	r3, [r2, #0]
//		transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
		FSMstate = TRIGGER_FRAME;
 8000a40:	4b0a      	ldr	r3, [pc, #40]	; (8000a6c <eyes_FSM+0x21c>)
 8000a42:	2201      	movs	r2, #1
 8000a44:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a46:	20c8      	movs	r0, #200	; 0xc8
 8000a48:	f000 f868 	bl	8000b1c <eyes_waitIT>
		return;
 8000a4c:	e00a      	b.n	8000a64 <eyes_FSM+0x214>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a4e:	bf00      	nop
 8000a50:	e002      	b.n	8000a58 <eyes_FSM+0x208>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a52:	bf00      	nop
 8000a54:	e000      	b.n	8000a58 <eyes_FSM+0x208>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a56:	bf00      	nop
	}

	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8000a58:	4810      	ldr	r0, [pc, #64]	; (8000a9c <eyes_FSM+0x24c>)
 8000a5a:	f002 fba3 	bl	80031a4 <puts>
		eyes_stopWaitIT();
 8000a5e:	f000 f885 	bl	8000b6c <eyes_stopWaitIT>
		while(1);
 8000a62:	e7fe      	b.n	8000a62 <eyes_FSM+0x212>
}
 8000a64:	3708      	adds	r7, #8
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	200005e4 	.word	0x200005e4
 8000a70:	200005e8 	.word	0x200005e8
 8000a74:	200005ec 	.word	0x200005ec
 8000a78:	2000055a 	.word	0x2000055a
 8000a7c:	20000601 	.word	0x20000601
 8000a80:	20000000 	.word	0x20000000
 8000a84:	200005ee 	.word	0x200005ee
 8000a88:	20000600 	.word	0x20000600
 8000a8c:	200005f0 	.word	0x200005f0
 8000a90:	200005ea 	.word	0x200005ea
 8000a94:	200005f1 	.word	0x200005f1
 8000a98:	2000055b 	.word	0x2000055b
 8000a9c:	08004170 	.word	0x08004170

08000aa0 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000aac:	4b1a      	ldr	r3, [pc, #104]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a19      	ldr	r2, [pc, #100]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ab2:	f023 0301 	bic.w	r3, r3, #1
 8000ab6:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	f003 0302 	and.w	r3, r3, #2
 8000abe:	f043 0304 	orr.w	r3, r3, #4
 8000ac2:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8000ac4:	4a14      	ldr	r2, [pc, #80]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ac6:	687b      	ldr	r3, [r7, #4]
 8000ac8:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 8000aca:	4b13      	ldr	r3, [pc, #76]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000acc:	f44f 6216 	mov.w	r2, #2400	; 0x960
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000ad2:	4b11      	ldr	r3, [pc, #68]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ad4:	695b      	ldr	r3, [r3, #20]
 8000ad6:	4a10      	ldr	r2, [pc, #64]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ad8:	f043 0301 	orr.w	r3, r3, #1
 8000adc:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000ade:	4b0e      	ldr	r3, [pc, #56]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ae0:	691b      	ldr	r3, [r3, #16]
 8000ae2:	4a0d      	ldr	r2, [pc, #52]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000ae4:	f023 0301 	bic.w	r3, r3, #1
 8000ae8:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000aea:	4b0b      	ldr	r3, [pc, #44]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000aec:	681b      	ldr	r3, [r3, #0]
 8000aee:	4a0a      	ldr	r2, [pc, #40]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000af0:	f023 0304 	bic.w	r3, r3, #4
 8000af4:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000af8:	68db      	ldr	r3, [r3, #12]
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <eyes_configureFSM_TIM+0x78>)
 8000afc:	f043 0301 	orr.w	r3, r3, #1
 8000b00:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8000b02:	2100      	movs	r1, #0
 8000b04:	2019      	movs	r0, #25
 8000b06:	f7ff fe2b 	bl	8000760 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b0a:	2019      	movs	r0, #25
 8000b0c:	f7ff fe0a 	bl	8000724 <__NVIC_EnableIRQ>
}
 8000b10:	bf00      	nop
 8000b12:	3708      	adds	r7, #8
 8000b14:	46bd      	mov	sp, r7
 8000b16:	bd80      	pop	{r7, pc}
 8000b18:	40012c00 	.word	0x40012c00

08000b1c <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8000b1c:	b480      	push	{r7}
 8000b1e:	b083      	sub	sp, #12
 8000b20:	af00      	add	r7, sp, #0
 8000b22:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b24:	4b10      	ldr	r3, [pc, #64]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a0f      	ldr	r2, [pc, #60]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b2a:	f043 0304 	orr.w	r3, r3, #4
 8000b2e:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8000b30:	4a0d      	ldr	r2, [pc, #52]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000b36:	4b0c      	ldr	r3, [pc, #48]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b38:	695b      	ldr	r3, [r3, #20]
 8000b3a:	4a0b      	ldr	r2, [pc, #44]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b42:	4b09      	ldr	r3, [pc, #36]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4a08      	ldr	r2, [pc, #32]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b48:	f023 0304 	bic.w	r3, r3, #4
 8000b4c:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000b4e:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <eyes_waitIT+0x4c>)
 8000b54:	f043 0301 	orr.w	r3, r3, #1
 8000b58:	6013      	str	r3, [r2, #0]
}
 8000b5a:	bf00      	nop
 8000b5c:	370c      	adds	r7, #12
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40012c00 	.word	0x40012c00

08000b6c <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <eyes_stopWaitIT+0x1c>)
 8000b72:	681b      	ldr	r3, [r3, #0]
 8000b74:	4a04      	ldr	r2, [pc, #16]	; (8000b88 <eyes_stopWaitIT+0x1c>)
 8000b76:	f023 0301 	bic.w	r3, r3, #1
 8000b7a:	6013      	str	r3, [r2, #0]
}
 8000b7c:	bf00      	nop
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop
 8000b88:	40012c00 	.word	0x40012c00

08000b8c <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 8000b8c:	b480      	push	{r7}
 8000b8e:	b085      	sub	sp, #20
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	60f8      	str	r0, [r7, #12]
 8000b94:	60b9      	str	r1, [r7, #8]
 8000b96:	607a      	str	r2, [r7, #4]
 8000b98:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 8000b9a:	68fb      	ldr	r3, [r7, #12]
 8000b9c:	781b      	ldrb	r3, [r3, #0]
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d10a      	bne.n	8000bb8 <eyes_computeIdxFromStatus+0x2c>
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	881b      	ldrh	r3, [r3, #0]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d106      	bne.n	8000bb8 <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 8000baa:	687b      	ldr	r3, [r7, #4]
 8000bac:	881b      	ldrh	r3, [r3, #0]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	b29a      	uxth	r2, r3
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	801a      	strh	r2, [r3, #0]
 8000bb6:	e024      	b.n	8000c02 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	2b02      	cmp	r3, #2
 8000bbe:	d10f      	bne.n	8000be0 <eyes_computeIdxFromStatus+0x54>
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	2b00      	cmp	r3, #0
 8000bc6:	d00b      	beq.n	8000be0 <eyes_computeIdxFromStatus+0x54>
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	881b      	ldrh	r3, [r3, #0]
 8000bcc:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000bd0:	d806      	bhi.n	8000be0 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	881b      	ldrh	r3, [r3, #0]
 8000bd6:	3301      	adds	r3, #1
 8000bd8:	b29a      	uxth	r2, r3
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	801a      	strh	r2, [r3, #0]
 8000bde:	e010      	b.n	8000c02 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	2b00      	cmp	r3, #0
 8000be6:	d10c      	bne.n	8000c02 <eyes_computeIdxFromStatus+0x76>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	881b      	ldrh	r3, [r3, #0]
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d008      	beq.n	8000c02 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	683b      	ldr	r3, [r7, #0]
 8000bf8:	881a      	ldrh	r2, [r3, #0]
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	801a      	strh	r2, [r3, #0]
		return false;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	e000      	b.n	8000c04 <eyes_computeIdxFromStatus+0x78>
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
		(*idx1) = (*idx2) = 0;
		return false;
	}
#endif
	return true;
 8000c02:	2301      	movs	r3, #1
}
 8000c04:	4618      	mov	r0, r3
 8000c06:	3714      	adds	r7, #20
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0e:	4770      	bx	lr

08000c10 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8000c14:	4b07      	ldr	r3, [pc, #28]	; (8000c34 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c16:	691b      	ldr	r3, [r3, #16]
 8000c18:	f003 0301 	and.w	r3, r3, #1
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d007      	beq.n	8000c30 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000c20:	4b04      	ldr	r3, [pc, #16]	; (8000c34 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c22:	691b      	ldr	r3, [r3, #16]
 8000c24:	4a03      	ldr	r2, [pc, #12]	; (8000c34 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c26:	f023 0301 	bic.w	r3, r3, #1
 8000c2a:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 8000c2c:	f7ff fe10 	bl	8000850 <eyes_FSM>
	}
}
 8000c30:	bf00      	nop
 8000c32:	bd80      	pop	{r7, pc}
 8000c34:	40012c00 	.word	0x40012c00

08000c38 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c40:	4b08      	ldr	r3, [pc, #32]	; (8000c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c44:	4907      	ldr	r1, [pc, #28]	; (8000c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	4313      	orrs	r3, r2
 8000c4a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c4c:	4b05      	ldr	r3, [pc, #20]	; (8000c64 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c4e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	4013      	ands	r3, r2
 8000c54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c56:	68fb      	ldr	r3, [r7, #12]
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	40021000 	.word	0x40021000

08000c68 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	b087      	sub	sp, #28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000c72:	4a17      	ldr	r2, [pc, #92]	; (8000cd0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000c74:	683b      	ldr	r3, [r7, #0]
 8000c76:	b2db      	uxtb	r3, r3
 8000c78:	3302      	adds	r3, #2
 8000c7a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	0c1b      	lsrs	r3, r3, #16
 8000c82:	43db      	mvns	r3, r3
 8000c84:	ea02 0103 	and.w	r1, r2, r3
 8000c88:	683b      	ldr	r3, [r7, #0]
 8000c8a:	0c1b      	lsrs	r3, r3, #16
 8000c8c:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	fa93 f3a3 	rbit	r3, r3
 8000c94:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000c96:	68fb      	ldr	r3, [r7, #12]
 8000c98:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000c9a:	697b      	ldr	r3, [r7, #20]
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d101      	bne.n	8000ca4 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000ca0:	2320      	movs	r3, #32
 8000ca2:	e003      	b.n	8000cac <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	fab3 f383 	clz	r3, r3
 8000caa:	b2db      	uxtb	r3, r3
 8000cac:	461a      	mov	r2, r3
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	fa03 f202 	lsl.w	r2, r3, r2
 8000cb4:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <LL_SYSCFG_SetEXTISource+0x68>)
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	b2db      	uxtb	r3, r3
 8000cba:	430a      	orrs	r2, r1
 8000cbc:	3302      	adds	r3, #2
 8000cbe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000cc2:	bf00      	nop
 8000cc4:	371c      	adds	r7, #28
 8000cc6:	46bd      	mov	sp, r7
 8000cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ccc:	4770      	bx	lr
 8000cce:	bf00      	nop
 8000cd0:	40010000 	.word	0x40010000

08000cd4 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b08b      	sub	sp, #44	; 0x2c
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	60f8      	str	r0, [r7, #12]
 8000cdc:	60b9      	str	r1, [r7, #8]
 8000cde:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	fa93 f3a3 	rbit	r3, r3
 8000cee:	613b      	str	r3, [r7, #16]
  return result;
 8000cf0:	693b      	ldr	r3, [r7, #16]
 8000cf2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000cf4:	69bb      	ldr	r3, [r7, #24]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d101      	bne.n	8000cfe <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000cfa:	2320      	movs	r3, #32
 8000cfc:	e003      	b.n	8000d06 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000cfe:	69bb      	ldr	r3, [r7, #24]
 8000d00:	fab3 f383 	clz	r3, r3
 8000d04:	b2db      	uxtb	r3, r3
 8000d06:	005b      	lsls	r3, r3, #1
 8000d08:	2103      	movs	r1, #3
 8000d0a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d0e:	43db      	mvns	r3, r3
 8000d10:	401a      	ands	r2, r3
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d16:	6a3b      	ldr	r3, [r7, #32]
 8000d18:	fa93 f3a3 	rbit	r3, r3
 8000d1c:	61fb      	str	r3, [r7, #28]
  return result;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d101      	bne.n	8000d2c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d28:	2320      	movs	r3, #32
 8000d2a:	e003      	b.n	8000d34 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d2e:	fab3 f383 	clz	r3, r3
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	005b      	lsls	r3, r3, #1
 8000d36:	6879      	ldr	r1, [r7, #4]
 8000d38:	fa01 f303 	lsl.w	r3, r1, r3
 8000d3c:	431a      	orrs	r2, r3
 8000d3e:	68fb      	ldr	r3, [r7, #12]
 8000d40:	601a      	str	r2, [r3, #0]
}
 8000d42:	bf00      	nop
 8000d44:	372c      	adds	r7, #44	; 0x2c
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b08b      	sub	sp, #44	; 0x2c
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d5a:	68fb      	ldr	r3, [r7, #12]
 8000d5c:	68da      	ldr	r2, [r3, #12]
 8000d5e:	68bb      	ldr	r3, [r7, #8]
 8000d60:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	fa93 f3a3 	rbit	r3, r3
 8000d68:	613b      	str	r3, [r7, #16]
  return result;
 8000d6a:	693b      	ldr	r3, [r7, #16]
 8000d6c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d6e:	69bb      	ldr	r3, [r7, #24]
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d101      	bne.n	8000d78 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000d74:	2320      	movs	r3, #32
 8000d76:	e003      	b.n	8000d80 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000d78:	69bb      	ldr	r3, [r7, #24]
 8000d7a:	fab3 f383 	clz	r3, r3
 8000d7e:	b2db      	uxtb	r3, r3
 8000d80:	005b      	lsls	r3, r3, #1
 8000d82:	2103      	movs	r1, #3
 8000d84:	fa01 f303 	lsl.w	r3, r1, r3
 8000d88:	43db      	mvns	r3, r3
 8000d8a:	401a      	ands	r2, r3
 8000d8c:	68bb      	ldr	r3, [r7, #8]
 8000d8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d90:	6a3b      	ldr	r3, [r7, #32]
 8000d92:	fa93 f3a3 	rbit	r3, r3
 8000d96:	61fb      	str	r3, [r7, #28]
  return result;
 8000d98:	69fb      	ldr	r3, [r7, #28]
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d101      	bne.n	8000da6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000da2:	2320      	movs	r3, #32
 8000da4:	e003      	b.n	8000dae <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000da6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000da8:	fab3 f383 	clz	r3, r3
 8000dac:	b2db      	uxtb	r3, r3
 8000dae:	005b      	lsls	r3, r3, #1
 8000db0:	6879      	ldr	r1, [r7, #4]
 8000db2:	fa01 f303 	lsl.w	r3, r1, r3
 8000db6:	431a      	orrs	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	60da      	str	r2, [r3, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	372c      	adds	r7, #44	; 0x2c
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr

08000dc8 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
 8000dd0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	683a      	ldr	r2, [r7, #0]
 8000dd6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dd8:	bf00      	nop
 8000dda:	370c      	adds	r7, #12
 8000ddc:	46bd      	mov	sp, r7
 8000dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de2:	4770      	bx	lr

08000de4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000dea:	f107 031c 	add.w	r3, r7, #28
 8000dee:	2200      	movs	r2, #0
 8000df0:	601a      	str	r2, [r3, #0]
 8000df2:	605a      	str	r2, [r3, #4]
 8000df4:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	601a      	str	r2, [r3, #0]
 8000dfc:	605a      	str	r2, [r3, #4]
 8000dfe:	609a      	str	r2, [r3, #8]
 8000e00:	60da      	str	r2, [r3, #12]
 8000e02:	611a      	str	r2, [r3, #16]
 8000e04:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e06:	2004      	movs	r0, #4
 8000e08:	f7ff ff16 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000e0c:	2080      	movs	r0, #128	; 0x80
 8000e0e:	f7ff ff13 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e12:	2001      	movs	r0, #1
 8000e14:	f7ff ff10 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e18:	2002      	movs	r0, #2
 8000e1a:	f7ff ff0d 	bl	8000c38 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000e1e:	2120      	movs	r1, #32
 8000e20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e24:	f7ff ffd0 	bl	8000dc8 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000e28:	491b      	ldr	r1, [pc, #108]	; (8000e98 <MX_GPIO_Init+0xb4>)
 8000e2a:	2002      	movs	r0, #2
 8000e2c:	f7ff ff1c 	bl	8000c68 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000e30:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e34:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e36:	2300      	movs	r3, #0
 8000e38:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e3a:	2301      	movs	r3, #1
 8000e3c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e40:	2300      	movs	r3, #0
 8000e42:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e46:	2302      	movs	r3, #2
 8000e48:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4618      	mov	r0, r3
 8000e52:	f001 f815 	bl	8001e80 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000e56:	2200      	movs	r2, #0
 8000e58:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e5c:	480f      	ldr	r0, [pc, #60]	; (8000e9c <MX_GPIO_Init+0xb8>)
 8000e5e:	f7ff ff76 	bl	8000d4e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000e62:	2200      	movs	r2, #0
 8000e64:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e68:	480c      	ldr	r0, [pc, #48]	; (8000e9c <MX_GPIO_Init+0xb8>)
 8000e6a:	f7ff ff33 	bl	8000cd4 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000e6e:	2320      	movs	r3, #32
 8000e70:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000e72:	2301      	movs	r3, #1
 8000e74:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000e76:	2300      	movs	r3, #0
 8000e78:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e7e:	2300      	movs	r3, #0
 8000e80:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000e82:	1d3b      	adds	r3, r7, #4
 8000e84:	4619      	mov	r1, r3
 8000e86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e8a:	f001 fa30 	bl	80022ee <LL_GPIO_Init>

}
 8000e8e:	bf00      	nop
 8000e90:	3728      	adds	r7, #40	; 0x28
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}
 8000e96:	bf00      	nop
 8000e98:	00f00003 	.word	0x00f00003
 8000e9c:	48000800 	.word	0x48000800

08000ea0 <__NVIC_SetPriorityGrouping>:
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	f003 0307 	and.w	r3, r3, #7
 8000eae:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb0:	4b0c      	ldr	r3, [pc, #48]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000eb2:	68db      	ldr	r3, [r3, #12]
 8000eb4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000eb6:	68ba      	ldr	r2, [r7, #8]
 8000eb8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000ebc:	4013      	ands	r3, r2
 8000ebe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ec0:	68fb      	ldr	r3, [r7, #12]
 8000ec2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ec8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ecc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ed0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ed2:	4a04      	ldr	r2, [pc, #16]	; (8000ee4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ed4:	68bb      	ldr	r3, [r7, #8]
 8000ed6:	60d3      	str	r3, [r2, #12]
}
 8000ed8:	bf00      	nop
 8000eda:	3714      	adds	r7, #20
 8000edc:	46bd      	mov	sp, r7
 8000ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee2:	4770      	bx	lr
 8000ee4:	e000ed00 	.word	0xe000ed00

08000ee8 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000eec:	4b05      	ldr	r3, [pc, #20]	; (8000f04 <LL_RCC_HSI_Enable+0x1c>)
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	4a04      	ldr	r2, [pc, #16]	; (8000f04 <LL_RCC_HSI_Enable+0x1c>)
 8000ef2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ef6:	6013      	str	r3, [r2, #0]
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr
 8000f02:	bf00      	nop
 8000f04:	40021000 	.word	0x40021000

08000f08 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <LL_RCC_HSI_IsReady+0x24>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f18:	d101      	bne.n	8000f1e <LL_RCC_HSI_IsReady+0x16>
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e000      	b.n	8000f20 <LL_RCC_HSI_IsReady+0x18>
 8000f1e:	2300      	movs	r3, #0
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40021000 	.word	0x40021000

08000f30 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f30:	b480      	push	{r7}
 8000f32:	b083      	sub	sp, #12
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f38:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f3a:	685b      	ldr	r3, [r3, #4]
 8000f3c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	061b      	lsls	r3, r3, #24
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f46:	4313      	orrs	r3, r2
 8000f48:	604b      	str	r3, [r1, #4]
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f54:	4770      	bx	lr
 8000f56:	bf00      	nop
 8000f58:	40021000 	.word	0x40021000

08000f5c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000f64:	4b06      	ldr	r3, [pc, #24]	; (8000f80 <LL_RCC_SetSysClkSource+0x24>)
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	f023 0203 	bic.w	r2, r3, #3
 8000f6c:	4904      	ldr	r1, [pc, #16]	; (8000f80 <LL_RCC_SetSysClkSource+0x24>)
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4313      	orrs	r3, r2
 8000f72:	608b      	str	r3, [r1, #8]
}
 8000f74:	bf00      	nop
 8000f76:	370c      	adds	r7, #12
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7e:	4770      	bx	lr
 8000f80:	40021000 	.word	0x40021000

08000f84 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000f88:	4b04      	ldr	r3, [pc, #16]	; (8000f9c <LL_RCC_GetSysClkSource+0x18>)
 8000f8a:	689b      	ldr	r3, [r3, #8]
 8000f8c:	f003 030c 	and.w	r3, r3, #12
}
 8000f90:	4618      	mov	r0, r3
 8000f92:	46bd      	mov	sp, r7
 8000f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f98:	4770      	bx	lr
 8000f9a:	bf00      	nop
 8000f9c:	40021000 	.word	0x40021000

08000fa0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fa0:	b480      	push	{r7}
 8000fa2:	b083      	sub	sp, #12
 8000fa4:	af00      	add	r7, sp, #0
 8000fa6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fa8:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000faa:	689b      	ldr	r3, [r3, #8]
 8000fac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fb0:	4904      	ldr	r1, [pc, #16]	; (8000fc4 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	4313      	orrs	r3, r2
 8000fb6:	608b      	str	r3, [r1, #8]
}
 8000fb8:	bf00      	nop
 8000fba:	370c      	adds	r7, #12
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	40021000 	.word	0x40021000

08000fc8 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	b083      	sub	sp, #12
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fd2:	689b      	ldr	r3, [r3, #8]
 8000fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000fd8:	4904      	ldr	r1, [pc, #16]	; (8000fec <LL_RCC_SetAPB1Prescaler+0x24>)
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	4313      	orrs	r3, r2
 8000fde:	608b      	str	r3, [r1, #8]
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	40021000 	.word	0x40021000

08000ff0 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	b083      	sub	sp, #12
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ff8:	4b06      	ldr	r3, [pc, #24]	; (8001014 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001000:	4904      	ldr	r1, [pc, #16]	; (8001014 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	4313      	orrs	r3, r2
 8001006:	608b      	str	r3, [r1, #8]
}
 8001008:	bf00      	nop
 800100a:	370c      	adds	r7, #12
 800100c:	46bd      	mov	sp, r7
 800100e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001012:	4770      	bx	lr
 8001014:	40021000 	.word	0x40021000

08001018 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001018:	b480      	push	{r7}
 800101a:	b083      	sub	sp, #12
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001020:	4b09      	ldr	r3, [pc, #36]	; (8001048 <LL_RCC_SetUSARTClockSource+0x30>)
 8001022:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	0c1b      	lsrs	r3, r3, #16
 800102a:	43db      	mvns	r3, r3
 800102c:	401a      	ands	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	b29b      	uxth	r3, r3
 8001032:	4905      	ldr	r1, [pc, #20]	; (8001048 <LL_RCC_SetUSARTClockSource+0x30>)
 8001034:	4313      	orrs	r3, r2
 8001036:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800103a:	bf00      	nop
 800103c:	370c      	adds	r7, #12
 800103e:	46bd      	mov	sp, r7
 8001040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001044:	4770      	bx	lr
 8001046:	bf00      	nop
 8001048:	40021000 	.word	0x40021000

0800104c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001050:	4b05      	ldr	r3, [pc, #20]	; (8001068 <LL_RCC_PLL_Enable+0x1c>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a04      	ldr	r2, [pc, #16]	; (8001068 <LL_RCC_PLL_Enable+0x1c>)
 8001056:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800105a:	6013      	str	r3, [r2, #0]
}
 800105c:	bf00      	nop
 800105e:	46bd      	mov	sp, r7
 8001060:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001064:	4770      	bx	lr
 8001066:	bf00      	nop
 8001068:	40021000 	.word	0x40021000

0800106c <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001070:	4b07      	ldr	r3, [pc, #28]	; (8001090 <LL_RCC_PLL_IsReady+0x24>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001078:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800107c:	d101      	bne.n	8001082 <LL_RCC_PLL_IsReady+0x16>
 800107e:	2301      	movs	r3, #1
 8001080:	e000      	b.n	8001084 <LL_RCC_PLL_IsReady+0x18>
 8001082:	2300      	movs	r3, #0
}
 8001084:	4618      	mov	r0, r3
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
 800108e:	bf00      	nop
 8001090:	40021000 	.word	0x40021000

08001094 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8001094:	b480      	push	{r7}
 8001096:	b085      	sub	sp, #20
 8001098:	af00      	add	r7, sp, #0
 800109a:	60f8      	str	r0, [r7, #12]
 800109c:	60b9      	str	r1, [r7, #8]
 800109e:	607a      	str	r2, [r7, #4]
 80010a0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80010a2:	4b0a      	ldr	r3, [pc, #40]	; (80010cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010a4:	68da      	ldr	r2, [r3, #12]
 80010a6:	4b0a      	ldr	r3, [pc, #40]	; (80010d0 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80010a8:	4013      	ands	r3, r2
 80010aa:	68f9      	ldr	r1, [r7, #12]
 80010ac:	68ba      	ldr	r2, [r7, #8]
 80010ae:	4311      	orrs	r1, r2
 80010b0:	687a      	ldr	r2, [r7, #4]
 80010b2:	0212      	lsls	r2, r2, #8
 80010b4:	4311      	orrs	r1, r2
 80010b6:	683a      	ldr	r2, [r7, #0]
 80010b8:	430a      	orrs	r2, r1
 80010ba:	4904      	ldr	r1, [pc, #16]	; (80010cc <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010bc:	4313      	orrs	r3, r2
 80010be:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80010c0:	bf00      	nop
 80010c2:	3714      	adds	r7, #20
 80010c4:	46bd      	mov	sp, r7
 80010c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ca:	4770      	bx	lr
 80010cc:	40021000 	.word	0x40021000
 80010d0:	f9ff808c 	.word	0xf9ff808c

080010d4 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80010d8:	4b05      	ldr	r3, [pc, #20]	; (80010f0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80010da:	68db      	ldr	r3, [r3, #12]
 80010dc:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80010de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80010e2:	60d3      	str	r3, [r2, #12]
}
 80010e4:	bf00      	nop
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr
 80010ee:	bf00      	nop
 80010f0:	40021000 	.word	0x40021000

080010f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 80010fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <LL_APB1_GRP1_EnableClock+0x2c>)
 800110a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000

08001124 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800112c:	4b08      	ldr	r3, [pc, #32]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800112e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001130:	4907      	ldr	r1, [pc, #28]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	4313      	orrs	r3, r2
 8001136:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001138:	4b05      	ldr	r3, [pc, #20]	; (8001150 <LL_APB2_GRP1_EnableClock+0x2c>)
 800113a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	4013      	ands	r3, r2
 8001140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001142:	68fb      	ldr	r3, [r7, #12]
}
 8001144:	bf00      	nop
 8001146:	3714      	adds	r7, #20
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr
 8001150:	40021000 	.word	0x40021000

08001154 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001154:	b480      	push	{r7}
 8001156:	b083      	sub	sp, #12
 8001158:	af00      	add	r7, sp, #0
 800115a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800115c:	4b06      	ldr	r3, [pc, #24]	; (8001178 <LL_FLASH_SetLatency+0x24>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 0207 	bic.w	r2, r3, #7
 8001164:	4904      	ldr	r1, [pc, #16]	; (8001178 <LL_FLASH_SetLatency+0x24>)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	4313      	orrs	r3, r2
 800116a:	600b      	str	r3, [r1, #0]
}
 800116c:	bf00      	nop
 800116e:	370c      	adds	r7, #12
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	40022000 	.word	0x40022000

0800117c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800117c:	b480      	push	{r7}
 800117e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001180:	4b04      	ldr	r3, [pc, #16]	; (8001194 <LL_FLASH_GetLatency+0x18>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0307 	and.w	r3, r3, #7
}
 8001188:	4618      	mov	r0, r3
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
 8001192:	bf00      	nop
 8001194:	40022000 	.word	0x40022000

08001198 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011a0:	4b06      	ldr	r3, [pc, #24]	; (80011bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80011a8:	4904      	ldr	r1, [pc, #16]	; (80011bc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4313      	orrs	r3, r2
 80011ae:	600b      	str	r3, [r1, #0]
}
 80011b0:	bf00      	nop
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr
 80011bc:	40007000 	.word	0x40007000

080011c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 80011c4:	2001      	movs	r0, #1
 80011c6:	f7ff ffad 	bl	8001124 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 80011ca:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 80011ce:	f7ff ff91 	bl	80010f4 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011d2:	2003      	movs	r0, #3
 80011d4:	f7ff fe64 	bl	8000ea0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011d8:	f000 f810 	bl	80011fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011dc:	f7ff fe02 	bl	8000de4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80011e0:	f000 fbc2 	bl	8001968 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80011e4:	f000 f8a8 	bl	8001338 <MX_SPI2_Init>
  MX_TIM1_Init();
 80011e8:	f000 fa90 	bl	800170c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 80011ec:	f000 fc32 	bl	8001a54 <startupPrint>

  eyes_init();
 80011f0:	f7ff fb00 	bl	80007f4 <eyes_init>
  eyes_start();
 80011f4:	f7ff fb18 	bl	8000828 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011f8:	e7fe      	b.n	80011f8 <main+0x38>
	...

080011fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001200:	2003      	movs	r0, #3
 8001202:	f7ff ffa7 	bl	8001154 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001206:	bf00      	nop
 8001208:	f7ff ffb8 	bl	800117c <LL_FLASH_GetLatency>
 800120c:	4603      	mov	r3, r0
 800120e:	2b03      	cmp	r3, #3
 8001210:	d1fa      	bne.n	8001208 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001212:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001216:	f7ff ffbf 	bl	8001198 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800121a:	f7ff fe65 	bl	8000ee8 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800121e:	bf00      	nop
 8001220:	f7ff fe72 	bl	8000f08 <LL_RCC_HSI_IsReady>
 8001224:	4603      	mov	r3, r0
 8001226:	2b01      	cmp	r3, #1
 8001228:	d1fa      	bne.n	8001220 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800122a:	2010      	movs	r0, #16
 800122c:	f7ff fe80 	bl	8000f30 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8001230:	2300      	movs	r3, #0
 8001232:	2208      	movs	r2, #8
 8001234:	2100      	movs	r1, #0
 8001236:	2002      	movs	r0, #2
 8001238:	f7ff ff2c 	bl	8001094 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800123c:	f7ff ff4a 	bl	80010d4 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001240:	f7ff ff04 	bl	800104c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001244:	bf00      	nop
 8001246:	f7ff ff11 	bl	800106c <LL_RCC_PLL_IsReady>
 800124a:	4603      	mov	r3, r0
 800124c:	2b01      	cmp	r3, #1
 800124e:	d1fa      	bne.n	8001246 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001250:	2003      	movs	r0, #3
 8001252:	f7ff fe83 	bl	8000f5c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001256:	bf00      	nop
 8001258:	f7ff fe94 	bl	8000f84 <LL_RCC_GetSysClkSource>
 800125c:	4603      	mov	r3, r0
 800125e:	2b0c      	cmp	r3, #12
 8001260:	d1fa      	bne.n	8001258 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001262:	2000      	movs	r0, #0
 8001264:	f7ff fe9c 	bl	8000fa0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001268:	2000      	movs	r0, #0
 800126a:	f7ff fead 	bl	8000fc8 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 800126e:	2000      	movs	r0, #0
 8001270:	f7ff febe 	bl	8000ff0 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8001274:	4805      	ldr	r0, [pc, #20]	; (800128c <SystemClock_Config+0x90>)
 8001276:	f001 feab 	bl	8002fd0 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 800127a:	4804      	ldr	r0, [pc, #16]	; (800128c <SystemClock_Config+0x90>)
 800127c:	f001 fedc 	bl	8003038 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001280:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001284:	f7ff fec8 	bl	8001018 <LL_RCC_SetUSARTClockSource>
}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	03d09000 	.word	0x03d09000

08001290 <LL_AHB2_GRP1_EnableClock>:
{
 8001290:	b480      	push	{r7}
 8001292:	b085      	sub	sp, #20
 8001294:	af00      	add	r7, sp, #0
 8001296:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001298:	4b08      	ldr	r3, [pc, #32]	; (80012bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800129a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800129c:	4907      	ldr	r1, [pc, #28]	; (80012bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	4313      	orrs	r3, r2
 80012a2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012a4:	4b05      	ldr	r3, [pc, #20]	; (80012bc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012a6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	4013      	ands	r3, r2
 80012ac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ae:	68fb      	ldr	r3, [r7, #12]
}
 80012b0:	bf00      	nop
 80012b2:	3714      	adds	r7, #20
 80012b4:	46bd      	mov	sp, r7
 80012b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ba:	4770      	bx	lr
 80012bc:	40021000 	.word	0x40021000

080012c0 <LL_APB1_GRP1_EnableClock>:
{
 80012c0:	b480      	push	{r7}
 80012c2:	b085      	sub	sp, #20
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012cc:	4907      	ldr	r1, [pc, #28]	; (80012ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	4313      	orrs	r3, r2
 80012d2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80012d4:	4b05      	ldr	r3, [pc, #20]	; (80012ec <LL_APB1_GRP1_EnableClock+0x2c>)
 80012d6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	4013      	ands	r3, r2
 80012dc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012de:	68fb      	ldr	r3, [r7, #12]
}
 80012e0:	bf00      	nop
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr
 80012ec:	40021000 	.word	0x40021000

080012f0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 80012f0:	b480      	push	{r7}
 80012f2:	b083      	sub	sp, #12
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	685b      	ldr	r3, [r3, #4]
 80012fe:	f023 0210 	bic.w	r2, r3, #16
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	431a      	orrs	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	605a      	str	r2, [r3, #4]
}
 800130a:	bf00      	nop
 800130c:	370c      	adds	r7, #12
 800130e:	46bd      	mov	sp, r7
 8001310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001314:	4770      	bx	lr

08001316 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001316:	b480      	push	{r7}
 8001318:	b083      	sub	sp, #12
 800131a:	af00      	add	r7, sp, #0
 800131c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	685b      	ldr	r3, [r3, #4]
 8001322:	f023 0208 	bic.w	r2, r3, #8
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	605a      	str	r2, [r3, #4]
}
 800132a:	bf00      	nop
 800132c:	370c      	adds	r7, #12
 800132e:	46bd      	mov	sp, r7
 8001330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001334:	4770      	bx	lr
	...

08001338 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b090      	sub	sp, #64	; 0x40
 800133c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800133e:	f107 0318 	add.w	r3, r7, #24
 8001342:	2228      	movs	r2, #40	; 0x28
 8001344:	2100      	movs	r1, #0
 8001346:	4618      	mov	r0, r3
 8001348:	f001 feb0 	bl	80030ac <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800134c:	463b      	mov	r3, r7
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800135c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8001360:	f7ff ffae 	bl	80012c0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8001364:	2004      	movs	r0, #4
 8001366:	f7ff ff93 	bl	8001290 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800136a:	2002      	movs	r0, #2
 800136c:	f7ff ff90 	bl	8001290 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001370:	230c      	movs	r3, #12
 8001372:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001374:	2302      	movs	r3, #2
 8001376:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001380:	2300      	movs	r3, #0
 8001382:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8001384:	2305      	movs	r3, #5
 8001386:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001388:	463b      	mov	r3, r7
 800138a:	4619      	mov	r1, r3
 800138c:	481e      	ldr	r0, [pc, #120]	; (8001408 <MX_SPI2_Init+0xd0>)
 800138e:	f000 ffae 	bl	80022ee <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8001392:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001396:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001398:	2302      	movs	r3, #2
 800139a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800139c:	2303      	movs	r3, #3
 800139e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013a4:	2300      	movs	r3, #0
 80013a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013a8:	2305      	movs	r3, #5
 80013aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ac:	463b      	mov	r3, r7
 80013ae:	4619      	mov	r1, r3
 80013b0:	4816      	ldr	r0, [pc, #88]	; (800140c <MX_SPI2_Init+0xd4>)
 80013b2:	f000 ff9c 	bl	80022ee <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013b6:	2300      	movs	r3, #0
 80013b8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013ba:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013be:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80013c0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80013c4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80013c6:	2302      	movs	r3, #2
 80013c8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80013ca:	2301      	movs	r3, #1
 80013cc:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80013ce:	f44f 7300 	mov.w	r3, #512	; 0x200
 80013d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80013d4:	2320      	movs	r3, #32
 80013d6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80013d8:	2300      	movs	r3, #0
 80013da:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80013dc:	2300      	movs	r3, #0
 80013de:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80013e0:	2307      	movs	r3, #7
 80013e2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 80013e4:	f107 0318 	add.w	r3, r7, #24
 80013e8:	4619      	mov	r1, r3
 80013ea:	4809      	ldr	r0, [pc, #36]	; (8001410 <MX_SPI2_Init+0xd8>)
 80013ec:	f001 fbcd 	bl	8002b8a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 80013f0:	2100      	movs	r1, #0
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_SPI2_Init+0xd8>)
 80013f4:	f7ff ff7c 	bl	80012f0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 80013f8:	4805      	ldr	r0, [pc, #20]	; (8001410 <MX_SPI2_Init+0xd8>)
 80013fa:	f7ff ff8c 	bl	8001316 <LL_SPI_DisableNSSPulseMgt>

}
 80013fe:	bf00      	nop
 8001400:	3740      	adds	r7, #64	; 0x40
 8001402:	46bd      	mov	sp, r7
 8001404:	bd80      	pop	{r7, pc}
 8001406:	bf00      	nop
 8001408:	48000800 	.word	0x48000800
 800140c:	48000400 	.word	0x48000400
 8001410:	40003800 	.word	0x40003800

08001414 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001426:	e7fe      	b.n	8001426 <HardFault_Handler+0x4>

08001428 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800142c:	e7fe      	b.n	800142c <MemManage_Handler+0x4>

0800142e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800142e:	b480      	push	{r7}
 8001430:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001432:	e7fe      	b.n	8001432 <BusFault_Handler+0x4>

08001434 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001438:	e7fe      	b.n	8001438 <UsageFault_Handler+0x4>

0800143a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800143a:	b480      	push	{r7}
 800143c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800143e:	bf00      	nop
 8001440:	46bd      	mov	sp, r7
 8001442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001446:	4770      	bx	lr

08001448 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001448:	b480      	push	{r7}
 800144a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800144c:	bf00      	nop
 800144e:	46bd      	mov	sp, r7
 8001450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001454:	4770      	bx	lr

08001456 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001456:	b480      	push	{r7}
 8001458:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800145a:	bf00      	nop
 800145c:	46bd      	mov	sp, r7
 800145e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001462:	4770      	bx	lr

08001464 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001464:	b480      	push	{r7}
 8001466:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001468:	bf00      	nop
 800146a:	46bd      	mov	sp, r7
 800146c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001470:	4770      	bx	lr

08001472 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001472:	b580      	push	{r7, lr}
 8001474:	b086      	sub	sp, #24
 8001476:	af00      	add	r7, sp, #0
 8001478:	60f8      	str	r0, [r7, #12]
 800147a:	60b9      	str	r1, [r7, #8]
 800147c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147e:	2300      	movs	r3, #0
 8001480:	617b      	str	r3, [r7, #20]
 8001482:	e00a      	b.n	800149a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001484:	f000 fade 	bl	8001a44 <__io_getchar>
 8001488:	4601      	mov	r1, r0
 800148a:	68bb      	ldr	r3, [r7, #8]
 800148c:	1c5a      	adds	r2, r3, #1
 800148e:	60ba      	str	r2, [r7, #8]
 8001490:	b2ca      	uxtb	r2, r1
 8001492:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	3301      	adds	r3, #1
 8001498:	617b      	str	r3, [r7, #20]
 800149a:	697a      	ldr	r2, [r7, #20]
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	429a      	cmp	r2, r3
 80014a0:	dbf0      	blt.n	8001484 <_read+0x12>
	}

return len;
 80014a2:	687b      	ldr	r3, [r7, #4]
}
 80014a4:	4618      	mov	r0, r3
 80014a6:	3718      	adds	r7, #24
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}

080014ac <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	60f8      	str	r0, [r7, #12]
 80014b4:	60b9      	str	r1, [r7, #8]
 80014b6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014b8:	2300      	movs	r3, #0
 80014ba:	617b      	str	r3, [r7, #20]
 80014bc:	e009      	b.n	80014d2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014be:	68bb      	ldr	r3, [r7, #8]
 80014c0:	1c5a      	adds	r2, r3, #1
 80014c2:	60ba      	str	r2, [r7, #8]
 80014c4:	781b      	ldrb	r3, [r3, #0]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f000 fa9e 	bl	8001a08 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014cc:	697b      	ldr	r3, [r7, #20]
 80014ce:	3301      	adds	r3, #1
 80014d0:	617b      	str	r3, [r7, #20]
 80014d2:	697a      	ldr	r2, [r7, #20]
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	429a      	cmp	r2, r3
 80014d8:	dbf1      	blt.n	80014be <_write+0x12>
	}
	return len;
 80014da:	687b      	ldr	r3, [r7, #4]
}
 80014dc:	4618      	mov	r0, r3
 80014de:	3718      	adds	r7, #24
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}

080014e4 <_close>:

int _close(int file)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
	return -1;
 80014ec:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	370c      	adds	r7, #12
 80014f4:	46bd      	mov	sp, r7
 80014f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014fa:	4770      	bx	lr

080014fc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014fc:	b480      	push	{r7}
 80014fe:	b083      	sub	sp, #12
 8001500:	af00      	add	r7, sp, #0
 8001502:	6078      	str	r0, [r7, #4]
 8001504:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001506:	683b      	ldr	r3, [r7, #0]
 8001508:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800150c:	605a      	str	r2, [r3, #4]
	return 0;
 800150e:	2300      	movs	r3, #0
}
 8001510:	4618      	mov	r0, r3
 8001512:	370c      	adds	r7, #12
 8001514:	46bd      	mov	sp, r7
 8001516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800151a:	4770      	bx	lr

0800151c <_isatty>:

int _isatty(int file)
{
 800151c:	b480      	push	{r7}
 800151e:	b083      	sub	sp, #12
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
	return 1;
 8001524:	2301      	movs	r3, #1
}
 8001526:	4618      	mov	r0, r3
 8001528:	370c      	adds	r7, #12
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr

08001532 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001532:	b480      	push	{r7}
 8001534:	b085      	sub	sp, #20
 8001536:	af00      	add	r7, sp, #0
 8001538:	60f8      	str	r0, [r7, #12]
 800153a:	60b9      	str	r1, [r7, #8]
 800153c:	607a      	str	r2, [r7, #4]
	return 0;
 800153e:	2300      	movs	r3, #0
}
 8001540:	4618      	mov	r0, r3
 8001542:	3714      	adds	r7, #20
 8001544:	46bd      	mov	sp, r7
 8001546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154a:	4770      	bx	lr

0800154c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b086      	sub	sp, #24
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001554:	4a14      	ldr	r2, [pc, #80]	; (80015a8 <_sbrk+0x5c>)
 8001556:	4b15      	ldr	r3, [pc, #84]	; (80015ac <_sbrk+0x60>)
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001560:	4b13      	ldr	r3, [pc, #76]	; (80015b0 <_sbrk+0x64>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	2b00      	cmp	r3, #0
 8001566:	d102      	bne.n	800156e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001568:	4b11      	ldr	r3, [pc, #68]	; (80015b0 <_sbrk+0x64>)
 800156a:	4a12      	ldr	r2, [pc, #72]	; (80015b4 <_sbrk+0x68>)
 800156c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800156e:	4b10      	ldr	r3, [pc, #64]	; (80015b0 <_sbrk+0x64>)
 8001570:	681a      	ldr	r2, [r3, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4413      	add	r3, r2
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	429a      	cmp	r2, r3
 800157a:	d207      	bcs.n	800158c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800157c:	f001 fd6c 	bl	8003058 <__errno>
 8001580:	4602      	mov	r2, r0
 8001582:	230c      	movs	r3, #12
 8001584:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001586:	f04f 33ff 	mov.w	r3, #4294967295
 800158a:	e009      	b.n	80015a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800158c:	4b08      	ldr	r3, [pc, #32]	; (80015b0 <_sbrk+0x64>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001592:	4b07      	ldr	r3, [pc, #28]	; (80015b0 <_sbrk+0x64>)
 8001594:	681a      	ldr	r2, [r3, #0]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	4413      	add	r3, r2
 800159a:	4a05      	ldr	r2, [pc, #20]	; (80015b0 <_sbrk+0x64>)
 800159c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800159e:	68fb      	ldr	r3, [r7, #12]
}
 80015a0:	4618      	mov	r0, r3
 80015a2:	3718      	adds	r7, #24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	20018000 	.word	0x20018000
 80015ac:	00000400 	.word	0x00000400
 80015b0:	200005f4 	.word	0x200005f4
 80015b4:	20000608 	.word	0x20000608

080015b8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015b8:	b480      	push	{r7}
 80015ba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <SystemInit+0x64>)
 80015be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80015c2:	4a16      	ldr	r2, [pc, #88]	; (800161c <SystemInit+0x64>)
 80015c4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80015c8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80015cc:	4b14      	ldr	r3, [pc, #80]	; (8001620 <SystemInit+0x68>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a13      	ldr	r2, [pc, #76]	; (8001620 <SystemInit+0x68>)
 80015d2:	f043 0301 	orr.w	r3, r3, #1
 80015d6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80015d8:	4b11      	ldr	r3, [pc, #68]	; (8001620 <SystemInit+0x68>)
 80015da:	2200      	movs	r2, #0
 80015dc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80015de:	4b10      	ldr	r3, [pc, #64]	; (8001620 <SystemInit+0x68>)
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	4a0f      	ldr	r2, [pc, #60]	; (8001620 <SystemInit+0x68>)
 80015e4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80015e8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80015ec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80015ee:	4b0c      	ldr	r3, [pc, #48]	; (8001620 <SystemInit+0x68>)
 80015f0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80015f4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80015f6:	4b0a      	ldr	r3, [pc, #40]	; (8001620 <SystemInit+0x68>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a09      	ldr	r2, [pc, #36]	; (8001620 <SystemInit+0x68>)
 80015fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001600:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001602:	4b07      	ldr	r3, [pc, #28]	; (8001620 <SystemInit+0x68>)
 8001604:	2200      	movs	r2, #0
 8001606:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001608:	4b04      	ldr	r3, [pc, #16]	; (800161c <SystemInit+0x64>)
 800160a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800160e:	609a      	str	r2, [r3, #8]
#endif
}
 8001610:	bf00      	nop
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	e000ed00 	.word	0xe000ed00
 8001620:	40021000 	.word	0x40021000

08001624 <LL_APB2_GRP1_EnableClock>:
{
 8001624:	b480      	push	{r7}
 8001626:	b085      	sub	sp, #20
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800162c:	4b08      	ldr	r3, [pc, #32]	; (8001650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800162e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001630:	4907      	ldr	r1, [pc, #28]	; (8001650 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001638:	4b05      	ldr	r3, [pc, #20]	; (8001650 <LL_APB2_GRP1_EnableClock+0x2c>)
 800163a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	4013      	ands	r3, r2
 8001640:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001642:	68fb      	ldr	r3, [r7, #12]
}
 8001644:	bf00      	nop
 8001646:	3714      	adds	r7, #20
 8001648:	46bd      	mov	sp, r7
 800164a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164e:	4770      	bx	lr
 8001650:	40021000 	.word	0x40021000

08001654 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	601a      	str	r2, [r3, #0]
}
 8001668:	bf00      	nop
 800166a:	370c      	adds	r7, #12
 800166c:	46bd      	mov	sp, r7
 800166e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001672:	4770      	bx	lr

08001674 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001674:	b480      	push	{r7}
 8001676:	b083      	sub	sp, #12
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
 800167c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	689b      	ldr	r3, [r3, #8]
 8001682:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001686:	f023 0307 	bic.w	r3, r3, #7
 800168a:	683a      	ldr	r2, [r7, #0]
 800168c:	431a      	orrs	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	609a      	str	r2, [r3, #8]
}
 8001692:	bf00      	nop
 8001694:	370c      	adds	r7, #12
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr

0800169e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800169e:	b480      	push	{r7}
 80016a0:	b083      	sub	sp, #12
 80016a2:	af00      	add	r7, sp, #0
 80016a4:	6078      	str	r0, [r7, #4]
 80016a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	605a      	str	r2, [r3, #4]
}
 80016b8:	bf00      	nop
 80016ba:	370c      	adds	r7, #12
 80016bc:	46bd      	mov	sp, r7
 80016be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c2:	4770      	bx	lr

080016c4 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 80016c4:	b480      	push	{r7}
 80016c6:	b083      	sub	sp, #12
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	6078      	str	r0, [r7, #4]
 80016cc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80016d6:	683b      	ldr	r3, [r7, #0]
 80016d8:	431a      	orrs	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	605a      	str	r2, [r3, #4]
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr

080016ea <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80016ea:	b480      	push	{r7}
 80016ec:	b083      	sub	sp, #12
 80016ee:	af00      	add	r7, sp, #0
 80016f0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	689b      	ldr	r3, [r3, #8]
 80016f6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	609a      	str	r2, [r3, #8]
}
 80016fe:	bf00      	nop
 8001700:	370c      	adds	r7, #12
 8001702:	46bd      	mov	sp, r7
 8001704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001708:	4770      	bx	lr
	...

0800170c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b086      	sub	sp, #24
 8001710:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001712:	1d3b      	adds	r3, r7, #4
 8001714:	2200      	movs	r2, #0
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	605a      	str	r2, [r3, #4]
 800171a:	609a      	str	r2, [r3, #8]
 800171c:	60da      	str	r2, [r3, #12]
 800171e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001720:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001724:	f7ff ff7e 	bl	8001624 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8001728:	230f      	movs	r3, #15
 800172a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800172c:	2300      	movs	r3, #0
 800172e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 8001730:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001734:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800173a:	2300      	movs	r3, #0
 800173c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800173e:	1d3b      	adds	r3, r7, #4
 8001740:	4619      	mov	r1, r3
 8001742:	480c      	ldr	r0, [pc, #48]	; (8001774 <MX_TIM1_Init+0x68>)
 8001744:	f001 faaa 	bl	8002c9c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001748:	480a      	ldr	r0, [pc, #40]	; (8001774 <MX_TIM1_Init+0x68>)
 800174a:	f7ff ff83 	bl	8001654 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800174e:	2100      	movs	r1, #0
 8001750:	4808      	ldr	r0, [pc, #32]	; (8001774 <MX_TIM1_Init+0x68>)
 8001752:	f7ff ff8f 	bl	8001674 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001756:	2100      	movs	r1, #0
 8001758:	4806      	ldr	r0, [pc, #24]	; (8001774 <MX_TIM1_Init+0x68>)
 800175a:	f7ff ffa0 	bl	800169e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800175e:	2100      	movs	r1, #0
 8001760:	4804      	ldr	r0, [pc, #16]	; (8001774 <MX_TIM1_Init+0x68>)
 8001762:	f7ff ffaf 	bl	80016c4 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001766:	4803      	ldr	r0, [pc, #12]	; (8001774 <MX_TIM1_Init+0x68>)
 8001768:	f7ff ffbf 	bl	80016ea <LL_TIM_DisableMasterSlaveMode>

}
 800176c:	bf00      	nop
 800176e:	3718      	adds	r7, #24
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40012c00 	.word	0x40012c00

08001778 <__NVIC_GetPriorityGrouping>:
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800177c:	4b04      	ldr	r3, [pc, #16]	; (8001790 <__NVIC_GetPriorityGrouping+0x18>)
 800177e:	68db      	ldr	r3, [r3, #12]
 8001780:	0a1b      	lsrs	r3, r3, #8
 8001782:	f003 0307 	and.w	r3, r3, #7
}
 8001786:	4618      	mov	r0, r3
 8001788:	46bd      	mov	sp, r7
 800178a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178e:	4770      	bx	lr
 8001790:	e000ed00 	.word	0xe000ed00

08001794 <__NVIC_EnableIRQ>:
{
 8001794:	b480      	push	{r7}
 8001796:	b083      	sub	sp, #12
 8001798:	af00      	add	r7, sp, #0
 800179a:	4603      	mov	r3, r0
 800179c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	2b00      	cmp	r3, #0
 80017a4:	db0b      	blt.n	80017be <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017a6:	79fb      	ldrb	r3, [r7, #7]
 80017a8:	f003 021f 	and.w	r2, r3, #31
 80017ac:	4907      	ldr	r1, [pc, #28]	; (80017cc <__NVIC_EnableIRQ+0x38>)
 80017ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017b2:	095b      	lsrs	r3, r3, #5
 80017b4:	2001      	movs	r0, #1
 80017b6:	fa00 f202 	lsl.w	r2, r0, r2
 80017ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80017be:	bf00      	nop
 80017c0:	370c      	adds	r7, #12
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	e000e100 	.word	0xe000e100

080017d0 <__NVIC_SetPriority>:
{
 80017d0:	b480      	push	{r7}
 80017d2:	b083      	sub	sp, #12
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	4603      	mov	r3, r0
 80017d8:	6039      	str	r1, [r7, #0]
 80017da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	db0a      	blt.n	80017fa <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	b2da      	uxtb	r2, r3
 80017e8:	490c      	ldr	r1, [pc, #48]	; (800181c <__NVIC_SetPriority+0x4c>)
 80017ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ee:	0112      	lsls	r2, r2, #4
 80017f0:	b2d2      	uxtb	r2, r2
 80017f2:	440b      	add	r3, r1
 80017f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80017f8:	e00a      	b.n	8001810 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017fa:	683b      	ldr	r3, [r7, #0]
 80017fc:	b2da      	uxtb	r2, r3
 80017fe:	4908      	ldr	r1, [pc, #32]	; (8001820 <__NVIC_SetPriority+0x50>)
 8001800:	79fb      	ldrb	r3, [r7, #7]
 8001802:	f003 030f 	and.w	r3, r3, #15
 8001806:	3b04      	subs	r3, #4
 8001808:	0112      	lsls	r2, r2, #4
 800180a:	b2d2      	uxtb	r2, r2
 800180c:	440b      	add	r3, r1
 800180e:	761a      	strb	r2, [r3, #24]
}
 8001810:	bf00      	nop
 8001812:	370c      	adds	r7, #12
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000e100 	.word	0xe000e100
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001824:	b480      	push	{r7}
 8001826:	b089      	sub	sp, #36	; 0x24
 8001828:	af00      	add	r7, sp, #0
 800182a:	60f8      	str	r0, [r7, #12]
 800182c:	60b9      	str	r1, [r7, #8]
 800182e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	f003 0307 	and.w	r3, r3, #7
 8001836:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001838:	69fb      	ldr	r3, [r7, #28]
 800183a:	f1c3 0307 	rsb	r3, r3, #7
 800183e:	2b04      	cmp	r3, #4
 8001840:	bf28      	it	cs
 8001842:	2304      	movcs	r3, #4
 8001844:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001846:	69fb      	ldr	r3, [r7, #28]
 8001848:	3304      	adds	r3, #4
 800184a:	2b06      	cmp	r3, #6
 800184c:	d902      	bls.n	8001854 <NVIC_EncodePriority+0x30>
 800184e:	69fb      	ldr	r3, [r7, #28]
 8001850:	3b03      	subs	r3, #3
 8001852:	e000      	b.n	8001856 <NVIC_EncodePriority+0x32>
 8001854:	2300      	movs	r3, #0
 8001856:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001858:	f04f 32ff 	mov.w	r2, #4294967295
 800185c:	69bb      	ldr	r3, [r7, #24]
 800185e:	fa02 f303 	lsl.w	r3, r2, r3
 8001862:	43da      	mvns	r2, r3
 8001864:	68bb      	ldr	r3, [r7, #8]
 8001866:	401a      	ands	r2, r3
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800186c:	f04f 31ff 	mov.w	r1, #4294967295
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	fa01 f303 	lsl.w	r3, r1, r3
 8001876:	43d9      	mvns	r1, r3
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800187c:	4313      	orrs	r3, r2
         );
}
 800187e:	4618      	mov	r0, r3
 8001880:	3724      	adds	r7, #36	; 0x24
 8001882:	46bd      	mov	sp, r7
 8001884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001888:	4770      	bx	lr
	...

0800188c <LL_AHB1_GRP1_EnableClock>:
{
 800188c:	b480      	push	{r7}
 800188e:	b085      	sub	sp, #20
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8001896:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001898:	4907      	ldr	r1, [pc, #28]	; (80018b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	4313      	orrs	r3, r2
 800189e:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80018a0:	4b05      	ldr	r3, [pc, #20]	; (80018b8 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80018a2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	4013      	ands	r3, r2
 80018a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018aa:	68fb      	ldr	r3, [r7, #12]
}
 80018ac:	bf00      	nop
 80018ae:	3714      	adds	r7, #20
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	40021000 	.word	0x40021000

080018bc <LL_AHB2_GRP1_EnableClock>:
{
 80018bc:	b480      	push	{r7}
 80018be:	b085      	sub	sp, #20
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018c8:	4907      	ldr	r1, [pc, #28]	; (80018e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4313      	orrs	r3, r2
 80018ce:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80018d0:	4b05      	ldr	r3, [pc, #20]	; (80018e8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80018d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	4013      	ands	r3, r2
 80018d8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80018da:	68fb      	ldr	r3, [r7, #12]
}
 80018dc:	bf00      	nop
 80018de:	3714      	adds	r7, #20
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	40021000 	.word	0x40021000

080018ec <LL_APB1_GRP1_EnableClock>:
{
 80018ec:	b480      	push	{r7}
 80018ee:	b085      	sub	sp, #20
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80018f4:	4b08      	ldr	r3, [pc, #32]	; (8001918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018f6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80018f8:	4907      	ldr	r1, [pc, #28]	; (8001918 <LL_APB1_GRP1_EnableClock+0x2c>)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001900:	4b05      	ldr	r3, [pc, #20]	; (8001918 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001902:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4013      	ands	r3, r2
 8001908:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800190a:	68fb      	ldr	r3, [r7, #12]
}
 800190c:	bf00      	nop
 800190e:	3714      	adds	r7, #20
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000

0800191c <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f043 0201 	orr.w	r2, r3, #1
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	601a      	str	r2, [r3, #0]
}
 8001930:	bf00      	nop
 8001932:	370c      	adds	r7, #12
 8001934:	46bd      	mov	sp, r7
 8001936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193a:	4770      	bx	lr

0800193c <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	685b      	ldr	r3, [r3, #4]
 8001948:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	689b      	ldr	r3, [r3, #8]
 8001954:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	609a      	str	r2, [r3, #8]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr

08001968 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b08e      	sub	sp, #56	; 0x38
 800196c:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800196e:	f107 031c 	add.w	r3, r7, #28
 8001972:	2200      	movs	r2, #0
 8001974:	601a      	str	r2, [r3, #0]
 8001976:	605a      	str	r2, [r3, #4]
 8001978:	609a      	str	r2, [r3, #8]
 800197a:	60da      	str	r2, [r3, #12]
 800197c:	611a      	str	r2, [r3, #16]
 800197e:	615a      	str	r2, [r3, #20]
 8001980:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001982:	1d3b      	adds	r3, r7, #4
 8001984:	2200      	movs	r2, #0
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	605a      	str	r2, [r3, #4]
 800198a:	609a      	str	r2, [r3, #8]
 800198c:	60da      	str	r2, [r3, #12]
 800198e:	611a      	str	r2, [r3, #16]
 8001990:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001992:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001996:	f7ff ffa9 	bl	80018ec <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800199a:	2001      	movs	r0, #1
 800199c:	f7ff ff8e 	bl	80018bc <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80019a0:	230c      	movs	r3, #12
 80019a2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80019a4:	2302      	movs	r3, #2
 80019a6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80019a8:	2303      	movs	r3, #3
 80019aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80019ac:	2300      	movs	r3, #0
 80019ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80019b0:	2300      	movs	r3, #0
 80019b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80019b4:	2307      	movs	r3, #7
 80019b6:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019b8:	1d3b      	adds	r3, r7, #4
 80019ba:	4619      	mov	r1, r3
 80019bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80019c0:	f000 fc95 	bl	80022ee <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80019c4:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80019c8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80019ca:	2300      	movs	r3, #0
 80019cc:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80019ce:	2300      	movs	r3, #0
 80019d0:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80019d2:	2300      	movs	r3, #0
 80019d4:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80019d6:	230c      	movs	r3, #12
 80019d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80019da:	2300      	movs	r3, #0
 80019dc:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80019de:	2300      	movs	r3, #0
 80019e0:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4806      	ldr	r0, [pc, #24]	; (8001a04 <MX_USART2_UART_Init+0x9c>)
 80019ea:	f001 fa5b 	bl	8002ea4 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80019ee:	4805      	ldr	r0, [pc, #20]	; (8001a04 <MX_USART2_UART_Init+0x9c>)
 80019f0:	f7ff ffa4 	bl	800193c <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80019f4:	4803      	ldr	r0, [pc, #12]	; (8001a04 <MX_USART2_UART_Init+0x9c>)
 80019f6:	f7ff ff91 	bl	800191c <LL_USART_Enable>

}
 80019fa:	bf00      	nop
 80019fc:	3738      	adds	r7, #56	; 0x38
 80019fe:	46bd      	mov	sp, r7
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	40004400 	.word	0x40004400

08001a08 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8001a10:	bf00      	nop
 8001a12:	4b0b      	ldr	r3, [pc, #44]	; (8001a40 <__io_putchar+0x38>)
 8001a14:	69db      	ldr	r3, [r3, #28]
 8001a16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d0f9      	beq.n	8001a12 <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8001a1e:	4b08      	ldr	r3, [pc, #32]	; (8001a40 <__io_putchar+0x38>)
 8001a20:	687a      	ldr	r2, [r7, #4]
 8001a22:	b292      	uxth	r2, r2
 8001a24:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 8001a26:	bf00      	nop
 8001a28:	4b05      	ldr	r3, [pc, #20]	; (8001a40 <__io_putchar+0x38>)
 8001a2a:	69db      	ldr	r3, [r3, #28]
 8001a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d0f9      	beq.n	8001a28 <__io_putchar+0x20>
#endif
}
 8001a34:	bf00      	nop
 8001a36:	370c      	adds	r7, #12
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3e:	4770      	bx	lr
 8001a40:	40004400 	.word	0x40004400

08001a44 <__io_getchar>:

void __io_getchar(void){
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
	...

08001a54 <startupPrint>:

void startupPrint(void){
 8001a54:	b580      	push	{r7, lr}
 8001a56:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001a58:	480b      	ldr	r0, [pc, #44]	; (8001a88 <startupPrint+0x34>)
 8001a5a:	f001 fba3 	bl	80031a4 <puts>
	printf("+==============================================================+\r\n");
 8001a5e:	480b      	ldr	r0, [pc, #44]	; (8001a8c <startupPrint+0x38>)
 8001a60:	f001 fba0 	bl	80031a4 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8001a64:	490a      	ldr	r1, [pc, #40]	; (8001a90 <startupPrint+0x3c>)
 8001a66:	480b      	ldr	r0, [pc, #44]	; (8001a94 <startupPrint+0x40>)
 8001a68:	f001 fb28 	bl	80030bc <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8001a6c:	480a      	ldr	r0, [pc, #40]	; (8001a98 <startupPrint+0x44>)
 8001a6e:	f001 fb99 	bl	80031a4 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8001a72:	4b0a      	ldr	r3, [pc, #40]	; (8001a9c <startupPrint+0x48>)
 8001a74:	4a0a      	ldr	r2, [pc, #40]	; (8001aa0 <startupPrint+0x4c>)
 8001a76:	490b      	ldr	r1, [pc, #44]	; (8001aa4 <startupPrint+0x50>)
 8001a78:	480b      	ldr	r0, [pc, #44]	; (8001aa8 <startupPrint+0x54>)
 8001a7a:	f001 fb1f 	bl	80030bc <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8001a7e:	480b      	ldr	r0, [pc, #44]	; (8001aac <startupPrint+0x58>)
 8001a80:	f001 fb90 	bl	80031a4 <puts>
}
 8001a84:	bf00      	nop
 8001a86:	bd80      	pop	{r7, pc}
 8001a88:	08004184 	.word	0x08004184
 8001a8c:	08004188 	.word	0x08004188
 8001a90:	080041cc 	.word	0x080041cc
 8001a94:	080041f4 	.word	0x080041f4
 8001a98:	08004200 	.word	0x08004200
 8001a9c:	08004244 	.word	0x08004244
 8001aa0:	08004248 	.word	0x08004248
 8001aa4:	08004254 	.word	0x08004254
 8001aa8:	08004268 	.word	0x08004268
 8001aac:	08004294 	.word	0x08004294

08001ab0 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
 8001ab8:	460b      	mov	r3, r1
 8001aba:	70fb      	strb	r3, [r7, #3]
 8001abc:	4613      	mov	r3, r2
 8001abe:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8001ac4:	2300      	movs	r3, #0
 8001ac6:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8001ac8:	78fb      	ldrb	r3, [r7, #3]
 8001aca:	029b      	lsls	r3, r3, #10
 8001acc:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 8001ace:	78fb      	ldrb	r3, [r7, #3]
 8001ad0:	021b      	lsls	r3, r3, #8
 8001ad2:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	4a1d      	ldr	r2, [pc, #116]	; (8001b4c <configureDMA_USART_TX+0x9c>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d132      	bne.n	8001b42 <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8001adc:	2001      	movs	r0, #1
 8001ade:	f7ff fed5 	bl	800188c <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	689b      	ldr	r3, [r3, #8]
 8001ae6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8001aee:	4b18      	ldr	r3, [pc, #96]	; (8001b50 <configureDMA_USART_TX+0xa0>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	4a17      	ldr	r2, [pc, #92]	; (8001b50 <configureDMA_USART_TX+0xa0>)
 8001af4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001af8:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8001afa:	4b16      	ldr	r3, [pc, #88]	; (8001b54 <configureDMA_USART_TX+0xa4>)
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	4a15      	ldr	r2, [pc, #84]	; (8001b54 <configureDMA_USART_TX+0xa4>)
 8001b00:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8001b04:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 8001b06:	4b14      	ldr	r3, [pc, #80]	; (8001b58 <configureDMA_USART_TX+0xa8>)
 8001b08:	4a14      	ldr	r2, [pc, #80]	; (8001b5c <configureDMA_USART_TX+0xac>)
 8001b0a:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8001b0c:	78ba      	ldrb	r2, [r7, #2]
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	431a      	orrs	r2, r3
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	4313      	orrs	r3, r2
 8001b16:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8001b1a:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8001b1c:	4a0e      	ldr	r2, [pc, #56]	; (8001b58 <configureDMA_USART_TX+0xa8>)
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001b22:	f7ff fe29 	bl	8001778 <__NVIC_GetPriorityGrouping>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2200      	movs	r2, #0
 8001b2a:	2100      	movs	r1, #0
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f7ff fe79 	bl	8001824 <NVIC_EncodePriority>
 8001b32:	4603      	mov	r3, r0
 8001b34:	4619      	mov	r1, r3
 8001b36:	2011      	movs	r0, #17
 8001b38:	f7ff fe4a 	bl	80017d0 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8001b3c:	2011      	movs	r0, #17
 8001b3e:	f7ff fe29 	bl	8001794 <__NVIC_EnableIRQ>
	}
}
 8001b42:	bf00      	nop
 8001b44:	3718      	adds	r7, #24
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	40004400 	.word	0x40004400
 8001b50:	400200a8 	.word	0x400200a8
 8001b54:	40020000 	.word	0x40020000
 8001b58:	40020080 	.word	0x40020080
 8001b5c:	40004428 	.word	0x40004428

08001b60 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8001b60:	b480      	push	{r7}
 8001b62:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 8001b64:	4b17      	ldr	r3, [pc, #92]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d006      	beq.n	8001b7e <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8001b70:	4b14      	ldr	r3, [pc, #80]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4a13      	ldr	r2, [pc, #76]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001b7a:	6053      	str	r3, [r2, #4]
		while(1);
 8001b7c:	e7fe      	b.n	8001b7c <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8001b7e:	4b11      	ldr	r3, [pc, #68]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d00b      	beq.n	8001ba2 <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8001b8a:	4b0e      	ldr	r3, [pc, #56]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	4a0d      	ldr	r2, [pc, #52]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001b90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001b94:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 8001b96:	4b0c      	ldr	r3, [pc, #48]	; (8001bc8 <DMA1_Channel7_IRQHandler+0x68>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	4a0b      	ldr	r2, [pc, #44]	; (8001bc8 <DMA1_Channel7_IRQHandler+0x68>)
 8001b9c:	f023 0301 	bic.w	r3, r3, #1
 8001ba0:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 8001ba2:	4b08      	ldr	r3, [pc, #32]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001baa:	2b00      	cmp	r3, #0
 8001bac:	d005      	beq.n	8001bba <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 8001bae:	4b05      	ldr	r3, [pc, #20]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001bb0:	685b      	ldr	r3, [r3, #4]
 8001bb2:	4a04      	ldr	r2, [pc, #16]	; (8001bc4 <DMA1_Channel7_IRQHandler+0x64>)
 8001bb4:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001bb8:	6053      	str	r3, [r2, #4]
	}
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr
 8001bc4:	40020000 	.word	0x40020000
 8001bc8:	40020080 	.word	0x40020080

08001bcc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001bcc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001c04 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001bd0:	f7ff fcf2 	bl	80015b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001bd4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001bd6:	e003      	b.n	8001be0 <LoopCopyDataInit>

08001bd8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001bd8:	4b0b      	ldr	r3, [pc, #44]	; (8001c08 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8001bda:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001bdc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001bde:	3104      	adds	r1, #4

08001be0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001be0:	480a      	ldr	r0, [pc, #40]	; (8001c0c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001be2:	4b0b      	ldr	r3, [pc, #44]	; (8001c10 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001be4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001be6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001be8:	d3f6      	bcc.n	8001bd8 <CopyDataInit>
	ldr	r2, =_sbss
 8001bea:	4a0a      	ldr	r2, [pc, #40]	; (8001c14 <LoopForever+0x12>)
	b	LoopFillZerobss
 8001bec:	e002      	b.n	8001bf4 <LoopFillZerobss>

08001bee <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001bee:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001bf0:	f842 3b04 	str.w	r3, [r2], #4

08001bf4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001bf4:	4b08      	ldr	r3, [pc, #32]	; (8001c18 <LoopForever+0x16>)
	cmp	r2, r3
 8001bf6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001bf8:	d3f9      	bcc.n	8001bee <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bfa:	f001 fa33 	bl	8003064 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001bfe:	f7ff fadf 	bl	80011c0 <main>

08001c02 <LoopForever>:

LoopForever:
    b LoopForever
 8001c02:	e7fe      	b.n	8001c02 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001c04:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001c08:	080043c0 	.word	0x080043c0
	ldr	r0, =_sdata
 8001c0c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001c10:	200005c4 	.word	0x200005c4
	ldr	r2, =_sbss
 8001c14:	200005c4 	.word	0x200005c4
	ldr	r3, = _ebss
 8001c18:	20000608 	.word	0x20000608

08001c1c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001c1c:	e7fe      	b.n	8001c1c <ADC1_2_IRQHandler>
	...

08001c20 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001c28:	4b05      	ldr	r3, [pc, #20]	; (8001c40 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c2a:	681a      	ldr	r2, [r3, #0]
 8001c2c:	4904      	ldr	r1, [pc, #16]	; (8001c40 <LL_EXTI_EnableIT_0_31+0x20>)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	4313      	orrs	r3, r2
 8001c32:	600b      	str	r3, [r1, #0]
}
 8001c34:	bf00      	nop
 8001c36:	370c      	adds	r7, #12
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3e:	4770      	bx	lr
 8001c40:	40010400 	.word	0x40010400

08001c44 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001c44:	b480      	push	{r7}
 8001c46:	b083      	sub	sp, #12
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c4e:	6a1a      	ldr	r2, [r3, #32]
 8001c50:	4904      	ldr	r1, [pc, #16]	; (8001c64 <LL_EXTI_EnableIT_32_63+0x20>)
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	4313      	orrs	r3, r2
 8001c56:	620b      	str	r3, [r1, #32]
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40010400 	.word	0x40010400

08001c68 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001c70:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <LL_EXTI_DisableIT_0_31+0x24>)
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	43db      	mvns	r3, r3
 8001c78:	4904      	ldr	r1, [pc, #16]	; (8001c8c <LL_EXTI_DisableIT_0_31+0x24>)
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	600b      	str	r3, [r1, #0]
}
 8001c7e:	bf00      	nop
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
 8001c8a:	bf00      	nop
 8001c8c:	40010400 	.word	0x40010400

08001c90 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001c9a:	6a1a      	ldr	r2, [r3, #32]
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	43db      	mvns	r3, r3
 8001ca0:	4904      	ldr	r1, [pc, #16]	; (8001cb4 <LL_EXTI_DisableIT_32_63+0x24>)
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	620b      	str	r3, [r1, #32]
}
 8001ca6:	bf00      	nop
 8001ca8:	370c      	adds	r7, #12
 8001caa:	46bd      	mov	sp, r7
 8001cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb0:	4770      	bx	lr
 8001cb2:	bf00      	nop
 8001cb4:	40010400 	.word	0x40010400

08001cb8 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001cc0:	4b05      	ldr	r3, [pc, #20]	; (8001cd8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cc2:	685a      	ldr	r2, [r3, #4]
 8001cc4:	4904      	ldr	r1, [pc, #16]	; (8001cd8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	604b      	str	r3, [r1, #4]

}
 8001ccc:	bf00      	nop
 8001cce:	370c      	adds	r7, #12
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd6:	4770      	bx	lr
 8001cd8:	40010400 	.word	0x40010400

08001cdc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001ce4:	4b05      	ldr	r3, [pc, #20]	; (8001cfc <LL_EXTI_EnableEvent_32_63+0x20>)
 8001ce6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ce8:	4904      	ldr	r1, [pc, #16]	; (8001cfc <LL_EXTI_EnableEvent_32_63+0x20>)
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	4313      	orrs	r3, r2
 8001cee:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001cf0:	bf00      	nop
 8001cf2:	370c      	adds	r7, #12
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr
 8001cfc:	40010400 	.word	0x40010400

08001d00 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001d00:	b480      	push	{r7}
 8001d02:	b083      	sub	sp, #12
 8001d04:	af00      	add	r7, sp, #0
 8001d06:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001d08:	4b06      	ldr	r3, [pc, #24]	; (8001d24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001d0a:	685a      	ldr	r2, [r3, #4]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	43db      	mvns	r3, r3
 8001d10:	4904      	ldr	r1, [pc, #16]	; (8001d24 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001d12:	4013      	ands	r3, r2
 8001d14:	604b      	str	r3, [r1, #4]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	40010400 	.word	0x40010400

08001d28 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001d30:	4b06      	ldr	r3, [pc, #24]	; (8001d4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d32:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	43db      	mvns	r3, r3
 8001d38:	4904      	ldr	r1, [pc, #16]	; (8001d4c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
 8001d4a:	bf00      	nop
 8001d4c:	40010400 	.word	0x40010400

08001d50 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001d58:	4b05      	ldr	r3, [pc, #20]	; (8001d70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d5a:	689a      	ldr	r2, [r3, #8]
 8001d5c:	4904      	ldr	r1, [pc, #16]	; (8001d70 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4313      	orrs	r3, r2
 8001d62:	608b      	str	r3, [r1, #8]

}
 8001d64:	bf00      	nop
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr
 8001d70:	40010400 	.word	0x40010400

08001d74 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001d7c:	4b05      	ldr	r3, [pc, #20]	; (8001d94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001d80:	4904      	ldr	r1, [pc, #16]	; (8001d94 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001d88:	bf00      	nop
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40010400 	.word	0x40010400

08001d98 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001da0:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001da2:	689a      	ldr	r2, [r3, #8]
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	43db      	mvns	r3, r3
 8001da8:	4904      	ldr	r1, [pc, #16]	; (8001dbc <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001daa:	4013      	ands	r3, r2
 8001dac:	608b      	str	r3, [r1, #8]

}
 8001dae:	bf00      	nop
 8001db0:	370c      	adds	r7, #12
 8001db2:	46bd      	mov	sp, r7
 8001db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	40010400 	.word	0x40010400

08001dc0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001dc0:	b480      	push	{r7}
 8001dc2:	b083      	sub	sp, #12
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001dc8:	4b06      	ldr	r3, [pc, #24]	; (8001de4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001dca:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	4904      	ldr	r1, [pc, #16]	; (8001de4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001dd6:	bf00      	nop
 8001dd8:	370c      	adds	r7, #12
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de0:	4770      	bx	lr
 8001de2:	bf00      	nop
 8001de4:	40010400 	.word	0x40010400

08001de8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001df0:	4b05      	ldr	r3, [pc, #20]	; (8001e08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001df2:	68da      	ldr	r2, [r3, #12]
 8001df4:	4904      	ldr	r1, [pc, #16]	; (8001e08 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	60cb      	str	r3, [r1, #12]
}
 8001dfc:	bf00      	nop
 8001dfe:	370c      	adds	r7, #12
 8001e00:	46bd      	mov	sp, r7
 8001e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e06:	4770      	bx	lr
 8001e08:	40010400 	.word	0x40010400

08001e0c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001e14:	4b05      	ldr	r3, [pc, #20]	; (8001e2c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001e16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e18:	4904      	ldr	r1, [pc, #16]	; (8001e2c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr
 8001e2c:	40010400 	.word	0x40010400

08001e30 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001e38:	4b06      	ldr	r3, [pc, #24]	; (8001e54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	4904      	ldr	r1, [pc, #16]	; (8001e54 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	60cb      	str	r3, [r1, #12]
}
 8001e46:	bf00      	nop
 8001e48:	370c      	adds	r7, #12
 8001e4a:	46bd      	mov	sp, r7
 8001e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	40010400 	.word	0x40010400

08001e58 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001e58:	b480      	push	{r7}
 8001e5a:	b083      	sub	sp, #12
 8001e5c:	af00      	add	r7, sp, #0
 8001e5e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001e60:	4b06      	ldr	r3, [pc, #24]	; (8001e7c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	43db      	mvns	r3, r3
 8001e68:	4904      	ldr	r1, [pc, #16]	; (8001e7c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001e6a:	4013      	ands	r3, r2
 8001e6c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001e6e:	bf00      	nop
 8001e70:	370c      	adds	r7, #12
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	40010400 	.word	0x40010400

08001e80 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	7a1b      	ldrb	r3, [r3, #8]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	f000 80c6 	beq.w	8002022 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d05d      	beq.n	8001f5a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	7a5b      	ldrb	r3, [r3, #9]
 8001ea2:	2b01      	cmp	r3, #1
 8001ea4:	d00e      	beq.n	8001ec4 <LL_EXTI_Init+0x44>
 8001ea6:	2b02      	cmp	r3, #2
 8001ea8:	d017      	beq.n	8001eda <LL_EXTI_Init+0x5a>
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d120      	bne.n	8001ef0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f7ff ff24 	bl	8001d00 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	f7ff feaf 	bl	8001c20 <LL_EXTI_EnableIT_0_31>
          break;
 8001ec2:	e018      	b.n	8001ef6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fecd 	bl	8001c68 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f7ff fef0 	bl	8001cb8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001ed8:	e00d      	b.n	8001ef6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7ff fe9e 	bl	8001c20 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff fee5 	bl	8001cb8 <LL_EXTI_EnableEvent_0_31>
          break;
 8001eee:	e002      	b.n	8001ef6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	60fb      	str	r3, [r7, #12]
          break;
 8001ef4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	7a9b      	ldrb	r3, [r3, #10]
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d02d      	beq.n	8001f5a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	7a9b      	ldrb	r3, [r3, #10]
 8001f02:	2b02      	cmp	r3, #2
 8001f04:	d00e      	beq.n	8001f24 <LL_EXTI_Init+0xa4>
 8001f06:	2b03      	cmp	r3, #3
 8001f08:	d017      	beq.n	8001f3a <LL_EXTI_Init+0xba>
 8001f0a:	2b01      	cmp	r3, #1
 8001f0c:	d120      	bne.n	8001f50 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff ff8c 	bl	8001e30 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f7ff ff17 	bl	8001d50 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001f22:	e01b      	b.n	8001f5c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4618      	mov	r0, r3
 8001f2a:	f7ff ff35 	bl	8001d98 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7ff ff58 	bl	8001de8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f38:	e010      	b.n	8001f5c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7ff ff06 	bl	8001d50 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	4618      	mov	r0, r3
 8001f4a:	f7ff ff4d 	bl	8001de8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001f4e:	e005      	b.n	8001f5c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001f50:	68fb      	ldr	r3, [r7, #12]
 8001f52:	f043 0302 	orr.w	r3, r3, #2
 8001f56:	60fb      	str	r3, [r7, #12]
            break;
 8001f58:	e000      	b.n	8001f5c <LL_EXTI_Init+0xdc>
        }
      }
 8001f5a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	685b      	ldr	r3, [r3, #4]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d073      	beq.n	800204c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	7a5b      	ldrb	r3, [r3, #9]
 8001f68:	2b01      	cmp	r3, #1
 8001f6a:	d00e      	beq.n	8001f8a <LL_EXTI_Init+0x10a>
 8001f6c:	2b02      	cmp	r3, #2
 8001f6e:	d017      	beq.n	8001fa0 <LL_EXTI_Init+0x120>
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d120      	bne.n	8001fb6 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	685b      	ldr	r3, [r3, #4]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7ff fed5 	bl	8001d28 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fe5e 	bl	8001c44 <LL_EXTI_EnableIT_32_63>
          break;
 8001f88:	e01a      	b.n	8001fc0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	685b      	ldr	r3, [r3, #4]
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fe7e 	bl	8001c90 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7ff fe9f 	bl	8001cdc <LL_EXTI_EnableEvent_32_63>
          break;
 8001f9e:	e00f      	b.n	8001fc0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	f7ff fe4d 	bl	8001c44 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f7ff fe94 	bl	8001cdc <LL_EXTI_EnableEvent_32_63>
          break;
 8001fb4:	e004      	b.n	8001fc0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	60fb      	str	r3, [r7, #12]
          break;
 8001fbe:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	7a9b      	ldrb	r3, [r3, #10]
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d041      	beq.n	800204c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	7a9b      	ldrb	r3, [r3, #10]
 8001fcc:	2b02      	cmp	r3, #2
 8001fce:	d00e      	beq.n	8001fee <LL_EXTI_Init+0x16e>
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d017      	beq.n	8002004 <LL_EXTI_Init+0x184>
 8001fd4:	2b01      	cmp	r3, #1
 8001fd6:	d120      	bne.n	800201a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f7ff ff3b 	bl	8001e58 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	685b      	ldr	r3, [r3, #4]
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	f7ff fec4 	bl	8001d74 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001fec:	e02f      	b.n	800204e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	685b      	ldr	r3, [r3, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	f7ff fee4 	bl	8001dc0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7ff ff05 	bl	8001e0c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002002:	e024      	b.n	800204e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4618      	mov	r0, r3
 800200a:	f7ff feb3 	bl	8001d74 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	4618      	mov	r0, r3
 8002014:	f7ff fefa 	bl	8001e0c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8002018:	e019      	b.n	800204e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	60fb      	str	r3, [r7, #12]
            break;
 800201e:	bf00      	nop
 8002020:	e015      	b.n	800204e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff fe1e 	bl	8001c68 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4618      	mov	r0, r3
 8002032:	f7ff fe65 	bl	8001d00 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	685b      	ldr	r3, [r3, #4]
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fe28 	bl	8001c90 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	685b      	ldr	r3, [r3, #4]
 8002044:	4618      	mov	r0, r3
 8002046:	f7ff fe6f 	bl	8001d28 <LL_EXTI_DisableEvent_32_63>
 800204a:	e000      	b.n	800204e <LL_EXTI_Init+0x1ce>
      }
 800204c:	bf00      	nop
  }

  return status;
 800204e:	68fb      	ldr	r3, [r7, #12]
}
 8002050:	4618      	mov	r0, r3
 8002052:	3710      	adds	r7, #16
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}

08002058 <LL_GPIO_SetPinMode>:
{
 8002058:	b480      	push	{r7}
 800205a:	b08b      	sub	sp, #44	; 0x2c
 800205c:	af00      	add	r7, sp, #0
 800205e:	60f8      	str	r0, [r7, #12]
 8002060:	60b9      	str	r1, [r7, #8]
 8002062:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800206c:	697b      	ldr	r3, [r7, #20]
 800206e:	fa93 f3a3 	rbit	r3, r3
 8002072:	613b      	str	r3, [r7, #16]
  return result;
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002078:	69bb      	ldr	r3, [r7, #24]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d101      	bne.n	8002082 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800207e:	2320      	movs	r3, #32
 8002080:	e003      	b.n	800208a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8002082:	69bb      	ldr	r3, [r7, #24]
 8002084:	fab3 f383 	clz	r3, r3
 8002088:	b2db      	uxtb	r3, r3
 800208a:	005b      	lsls	r3, r3, #1
 800208c:	2103      	movs	r1, #3
 800208e:	fa01 f303 	lsl.w	r3, r1, r3
 8002092:	43db      	mvns	r3, r3
 8002094:	401a      	ands	r2, r3
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800209a:	6a3b      	ldr	r3, [r7, #32]
 800209c:	fa93 f3a3 	rbit	r3, r3
 80020a0:	61fb      	str	r3, [r7, #28]
  return result;
 80020a2:	69fb      	ldr	r3, [r7, #28]
 80020a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d101      	bne.n	80020b0 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80020ac:	2320      	movs	r3, #32
 80020ae:	e003      	b.n	80020b8 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80020b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b2:	fab3 f383 	clz	r3, r3
 80020b6:	b2db      	uxtb	r3, r3
 80020b8:	005b      	lsls	r3, r3, #1
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	fa01 f303 	lsl.w	r3, r1, r3
 80020c0:	431a      	orrs	r2, r3
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	372c      	adds	r7, #44	; 0x2c
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr

080020d2 <LL_GPIO_SetPinOutputType>:
{
 80020d2:	b480      	push	{r7}
 80020d4:	b085      	sub	sp, #20
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	60f8      	str	r0, [r7, #12]
 80020da:	60b9      	str	r1, [r7, #8]
 80020dc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	685a      	ldr	r2, [r3, #4]
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	43db      	mvns	r3, r3
 80020e6:	401a      	ands	r2, r3
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	fb01 f303 	mul.w	r3, r1, r3
 80020f0:	431a      	orrs	r2, r3
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	605a      	str	r2, [r3, #4]
}
 80020f6:	bf00      	nop
 80020f8:	3714      	adds	r7, #20
 80020fa:	46bd      	mov	sp, r7
 80020fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002100:	4770      	bx	lr

08002102 <LL_GPIO_SetPinSpeed>:
{
 8002102:	b480      	push	{r7}
 8002104:	b08b      	sub	sp, #44	; 0x2c
 8002106:	af00      	add	r7, sp, #0
 8002108:	60f8      	str	r0, [r7, #12]
 800210a:	60b9      	str	r1, [r7, #8]
 800210c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	689a      	ldr	r2, [r3, #8]
 8002112:	68bb      	ldr	r3, [r7, #8]
 8002114:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fa93 f3a3 	rbit	r3, r3
 800211c:	613b      	str	r3, [r7, #16]
  return result;
 800211e:	693b      	ldr	r3, [r7, #16]
 8002120:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d101      	bne.n	800212c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8002128:	2320      	movs	r3, #32
 800212a:	e003      	b.n	8002134 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800212c:	69bb      	ldr	r3, [r7, #24]
 800212e:	fab3 f383 	clz	r3, r3
 8002132:	b2db      	uxtb	r3, r3
 8002134:	005b      	lsls	r3, r3, #1
 8002136:	2103      	movs	r1, #3
 8002138:	fa01 f303 	lsl.w	r3, r1, r3
 800213c:	43db      	mvns	r3, r3
 800213e:	401a      	ands	r2, r3
 8002140:	68bb      	ldr	r3, [r7, #8]
 8002142:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002144:	6a3b      	ldr	r3, [r7, #32]
 8002146:	fa93 f3a3 	rbit	r3, r3
 800214a:	61fb      	str	r3, [r7, #28]
  return result;
 800214c:	69fb      	ldr	r3, [r7, #28]
 800214e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002150:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002152:	2b00      	cmp	r3, #0
 8002154:	d101      	bne.n	800215a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8002156:	2320      	movs	r3, #32
 8002158:	e003      	b.n	8002162 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800215a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800215c:	fab3 f383 	clz	r3, r3
 8002160:	b2db      	uxtb	r3, r3
 8002162:	005b      	lsls	r3, r3, #1
 8002164:	6879      	ldr	r1, [r7, #4]
 8002166:	fa01 f303 	lsl.w	r3, r1, r3
 800216a:	431a      	orrs	r2, r3
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	609a      	str	r2, [r3, #8]
}
 8002170:	bf00      	nop
 8002172:	372c      	adds	r7, #44	; 0x2c
 8002174:	46bd      	mov	sp, r7
 8002176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217a:	4770      	bx	lr

0800217c <LL_GPIO_SetPinPull>:
{
 800217c:	b480      	push	{r7}
 800217e:	b08b      	sub	sp, #44	; 0x2c
 8002180:	af00      	add	r7, sp, #0
 8002182:	60f8      	str	r0, [r7, #12]
 8002184:	60b9      	str	r1, [r7, #8]
 8002186:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	68da      	ldr	r2, [r3, #12]
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002190:	697b      	ldr	r3, [r7, #20]
 8002192:	fa93 f3a3 	rbit	r3, r3
 8002196:	613b      	str	r3, [r7, #16]
  return result;
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800219c:	69bb      	ldr	r3, [r7, #24]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d101      	bne.n	80021a6 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80021a2:	2320      	movs	r3, #32
 80021a4:	e003      	b.n	80021ae <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80021a6:	69bb      	ldr	r3, [r7, #24]
 80021a8:	fab3 f383 	clz	r3, r3
 80021ac:	b2db      	uxtb	r3, r3
 80021ae:	005b      	lsls	r3, r3, #1
 80021b0:	2103      	movs	r1, #3
 80021b2:	fa01 f303 	lsl.w	r3, r1, r3
 80021b6:	43db      	mvns	r3, r3
 80021b8:	401a      	ands	r2, r3
 80021ba:	68bb      	ldr	r3, [r7, #8]
 80021bc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6a3b      	ldr	r3, [r7, #32]
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	61fb      	str	r3, [r7, #28]
  return result;
 80021c6:	69fb      	ldr	r3, [r7, #28]
 80021c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80021d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	6879      	ldr	r1, [r7, #4]
 80021e0:	fa01 f303 	lsl.w	r3, r1, r3
 80021e4:	431a      	orrs	r2, r3
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	60da      	str	r2, [r3, #12]
}
 80021ea:	bf00      	nop
 80021ec:	372c      	adds	r7, #44	; 0x2c
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <LL_GPIO_SetAFPin_0_7>:
{
 80021f6:	b480      	push	{r7}
 80021f8:	b08b      	sub	sp, #44	; 0x2c
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	6a1a      	ldr	r2, [r3, #32]
 8002206:	68bb      	ldr	r3, [r7, #8]
 8002208:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	613b      	str	r3, [r7, #16]
  return result;
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002220:	69bb      	ldr	r3, [r7, #24]
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	210f      	movs	r1, #15
 800222c:	fa01 f303 	lsl.w	r3, r1, r3
 8002230:	43db      	mvns	r3, r3
 8002232:	401a      	ands	r2, r3
 8002234:	68bb      	ldr	r3, [r7, #8]
 8002236:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002238:	6a3b      	ldr	r3, [r7, #32]
 800223a:	fa93 f3a3 	rbit	r3, r3
 800223e:	61fb      	str	r3, [r7, #28]
  return result;
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002244:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002246:	2b00      	cmp	r3, #0
 8002248:	d101      	bne.n	800224e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800224a:	2320      	movs	r3, #32
 800224c:	e003      	b.n	8002256 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800224e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002250:	fab3 f383 	clz	r3, r3
 8002254:	b2db      	uxtb	r3, r3
 8002256:	009b      	lsls	r3, r3, #2
 8002258:	6879      	ldr	r1, [r7, #4]
 800225a:	fa01 f303 	lsl.w	r3, r1, r3
 800225e:	431a      	orrs	r2, r3
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	621a      	str	r2, [r3, #32]
}
 8002264:	bf00      	nop
 8002266:	372c      	adds	r7, #44	; 0x2c
 8002268:	46bd      	mov	sp, r7
 800226a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800226e:	4770      	bx	lr

08002270 <LL_GPIO_SetAFPin_8_15>:
{
 8002270:	b480      	push	{r7}
 8002272:	b08b      	sub	sp, #44	; 0x2c
 8002274:	af00      	add	r7, sp, #0
 8002276:	60f8      	str	r0, [r7, #12]
 8002278:	60b9      	str	r1, [r7, #8]
 800227a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	0a1b      	lsrs	r3, r3, #8
 8002284:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002286:	697b      	ldr	r3, [r7, #20]
 8002288:	fa93 f3a3 	rbit	r3, r3
 800228c:	613b      	str	r3, [r7, #16]
  return result;
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002292:	69bb      	ldr	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	d101      	bne.n	800229c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002298:	2320      	movs	r3, #32
 800229a:	e003      	b.n	80022a4 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800229c:	69bb      	ldr	r3, [r7, #24]
 800229e:	fab3 f383 	clz	r3, r3
 80022a2:	b2db      	uxtb	r3, r3
 80022a4:	009b      	lsls	r3, r3, #2
 80022a6:	210f      	movs	r1, #15
 80022a8:	fa01 f303 	lsl.w	r3, r1, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	401a      	ands	r2, r3
 80022b0:	68bb      	ldr	r3, [r7, #8]
 80022b2:	0a1b      	lsrs	r3, r3, #8
 80022b4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b6:	6a3b      	ldr	r3, [r7, #32]
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	61fb      	str	r3, [r7, #28]
  return result;
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80022c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d101      	bne.n	80022cc <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80022c8:	2320      	movs	r3, #32
 80022ca:	e003      	b.n	80022d4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80022cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022ce:	fab3 f383 	clz	r3, r3
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	009b      	lsls	r3, r3, #2
 80022d6:	6879      	ldr	r1, [r7, #4]
 80022d8:	fa01 f303 	lsl.w	r3, r1, r3
 80022dc:	431a      	orrs	r2, r3
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80022e2:	bf00      	nop
 80022e4:	372c      	adds	r7, #44	; 0x2c
 80022e6:	46bd      	mov	sp, r7
 80022e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ec:	4770      	bx	lr

080022ee <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80022ee:	b580      	push	{r7, lr}
 80022f0:	b088      	sub	sp, #32
 80022f2:	af00      	add	r7, sp, #0
 80022f4:	6078      	str	r0, [r7, #4]
 80022f6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	60fb      	str	r3, [r7, #12]
  return result;
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <LL_GPIO_Init+0x26>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8002314:	697b      	ldr	r3, [r7, #20]
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 800231e:	e040      	b.n	80023a2 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002320:	683b      	ldr	r3, [r7, #0]
 8002322:	681a      	ldr	r2, [r3, #0]
 8002324:	2101      	movs	r1, #1
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	fa01 f303 	lsl.w	r3, r1, r3
 800232c:	4013      	ands	r3, r2
 800232e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002330:	69bb      	ldr	r3, [r7, #24]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d032      	beq.n	800239c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	685b      	ldr	r3, [r3, #4]
 800233a:	461a      	mov	r2, r3
 800233c:	69b9      	ldr	r1, [r7, #24]
 800233e:	6878      	ldr	r0, [r7, #4]
 8002340:	f7ff fe8a 	bl	8002058 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	2b01      	cmp	r3, #1
 800234a:	d003      	beq.n	8002354 <LL_GPIO_Init+0x66>
 800234c:	683b      	ldr	r3, [r7, #0]
 800234e:	685b      	ldr	r3, [r3, #4]
 8002350:	2b02      	cmp	r3, #2
 8002352:	d106      	bne.n	8002362 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	461a      	mov	r2, r3
 800235a:	69b9      	ldr	r1, [r7, #24]
 800235c:	6878      	ldr	r0, [r7, #4]
 800235e:	f7ff fed0 	bl	8002102 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002362:	683b      	ldr	r3, [r7, #0]
 8002364:	691b      	ldr	r3, [r3, #16]
 8002366:	461a      	mov	r2, r3
 8002368:	69b9      	ldr	r1, [r7, #24]
 800236a:	6878      	ldr	r0, [r7, #4]
 800236c:	f7ff ff06 	bl	800217c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	685b      	ldr	r3, [r3, #4]
 8002374:	2b02      	cmp	r3, #2
 8002376:	d111      	bne.n	800239c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002378:	69bb      	ldr	r3, [r7, #24]
 800237a:	2bff      	cmp	r3, #255	; 0xff
 800237c:	d807      	bhi.n	800238e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	695b      	ldr	r3, [r3, #20]
 8002382:	461a      	mov	r2, r3
 8002384:	69b9      	ldr	r1, [r7, #24]
 8002386:	6878      	ldr	r0, [r7, #4]
 8002388:	f7ff ff35 	bl	80021f6 <LL_GPIO_SetAFPin_0_7>
 800238c:	e006      	b.n	800239c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	695b      	ldr	r3, [r3, #20]
 8002392:	461a      	mov	r2, r3
 8002394:	69b9      	ldr	r1, [r7, #24]
 8002396:	6878      	ldr	r0, [r7, #4]
 8002398:	f7ff ff6a 	bl	8002270 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	3301      	adds	r3, #1
 80023a0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	fa22 f303 	lsr.w	r3, r2, r3
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d1b7      	bne.n	8002320 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80023b0:	683b      	ldr	r3, [r7, #0]
 80023b2:	685b      	ldr	r3, [r3, #4]
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d003      	beq.n	80023c0 <LL_GPIO_Init+0xd2>
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	2b02      	cmp	r3, #2
 80023be:	d107      	bne.n	80023d0 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	6819      	ldr	r1, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	461a      	mov	r2, r3
 80023ca:	6878      	ldr	r0, [r7, #4]
 80023cc:	f7ff fe81 	bl	80020d2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80023d0:	2300      	movs	r3, #0
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	3720      	adds	r7, #32
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bd80      	pop	{r7, pc}
	...

080023dc <LL_RCC_HSI_IsReady>:
{
 80023dc:	b480      	push	{r7}
 80023de:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80023e0:	4b07      	ldr	r3, [pc, #28]	; (8002400 <LL_RCC_HSI_IsReady+0x24>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ec:	d101      	bne.n	80023f2 <LL_RCC_HSI_IsReady+0x16>
 80023ee:	2301      	movs	r3, #1
 80023f0:	e000      	b.n	80023f4 <LL_RCC_HSI_IsReady+0x18>
 80023f2:	2300      	movs	r3, #0
}
 80023f4:	4618      	mov	r0, r3
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	40021000 	.word	0x40021000

08002404 <LL_RCC_LSE_IsReady>:
{
 8002404:	b480      	push	{r7}
 8002406:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8002408:	4b07      	ldr	r3, [pc, #28]	; (8002428 <LL_RCC_LSE_IsReady+0x24>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f003 0302 	and.w	r3, r3, #2
 8002412:	2b02      	cmp	r3, #2
 8002414:	d101      	bne.n	800241a <LL_RCC_LSE_IsReady+0x16>
 8002416:	2301      	movs	r3, #1
 8002418:	e000      	b.n	800241c <LL_RCC_LSE_IsReady+0x18>
 800241a:	2300      	movs	r3, #0
}
 800241c:	4618      	mov	r0, r3
 800241e:	46bd      	mov	sp, r7
 8002420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002424:	4770      	bx	lr
 8002426:	bf00      	nop
 8002428:	40021000 	.word	0x40021000

0800242c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002430:	4b06      	ldr	r3, [pc, #24]	; (800244c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	f003 0308 	and.w	r3, r3, #8
 8002438:	2b08      	cmp	r3, #8
 800243a:	d101      	bne.n	8002440 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800243c:	2301      	movs	r3, #1
 800243e:	e000      	b.n	8002442 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002440:	2300      	movs	r3, #0
}
 8002442:	4618      	mov	r0, r3
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr
 800244c:	40021000 	.word	0x40021000

08002450 <LL_RCC_MSI_GetRange>:
{
 8002450:	b480      	push	{r7}
 8002452:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002454:	4b04      	ldr	r3, [pc, #16]	; (8002468 <LL_RCC_MSI_GetRange+0x18>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800245c:	4618      	mov	r0, r3
 800245e:	46bd      	mov	sp, r7
 8002460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002464:	4770      	bx	lr
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800246c:	b480      	push	{r7}
 800246e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002470:	4b04      	ldr	r3, [pc, #16]	; (8002484 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002472:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002476:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800247a:	4618      	mov	r0, r3
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr
 8002484:	40021000 	.word	0x40021000

08002488 <LL_RCC_GetSysClkSource>:
{
 8002488:	b480      	push	{r7}
 800248a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800248c:	4b04      	ldr	r3, [pc, #16]	; (80024a0 <LL_RCC_GetSysClkSource+0x18>)
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	f003 030c 	and.w	r3, r3, #12
}
 8002494:	4618      	mov	r0, r3
 8002496:	46bd      	mov	sp, r7
 8002498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249c:	4770      	bx	lr
 800249e:	bf00      	nop
 80024a0:	40021000 	.word	0x40021000

080024a4 <LL_RCC_GetAHBPrescaler>:
{
 80024a4:	b480      	push	{r7}
 80024a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80024a8:	4b04      	ldr	r3, [pc, #16]	; (80024bc <LL_RCC_GetAHBPrescaler+0x18>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr
 80024ba:	bf00      	nop
 80024bc:	40021000 	.word	0x40021000

080024c0 <LL_RCC_GetAPB1Prescaler>:
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80024c4:	4b04      	ldr	r3, [pc, #16]	; (80024d8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80024c6:	689b      	ldr	r3, [r3, #8]
 80024c8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
 80024d6:	bf00      	nop
 80024d8:	40021000 	.word	0x40021000

080024dc <LL_RCC_GetAPB2Prescaler>:
{
 80024dc:	b480      	push	{r7}
 80024de:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80024e0:	4b04      	ldr	r3, [pc, #16]	; (80024f4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80024e2:	689b      	ldr	r3, [r3, #8]
 80024e4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	40021000 	.word	0x40021000

080024f8 <LL_RCC_GetUSARTClockSource>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b083      	sub	sp, #12
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <LL_RCC_GetUSARTClockSource+0x24>)
 8002502:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	401a      	ands	r2, r3
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	4313      	orrs	r3, r2
}
 8002510:	4618      	mov	r0, r3
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	40021000 	.word	0x40021000

08002520 <LL_RCC_GetUARTClockSource>:
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002528:	4b06      	ldr	r3, [pc, #24]	; (8002544 <LL_RCC_GetUARTClockSource+0x24>)
 800252a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	401a      	ands	r2, r3
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	041b      	lsls	r3, r3, #16
 8002536:	4313      	orrs	r3, r2
}
 8002538:	4618      	mov	r0, r3
 800253a:	370c      	adds	r7, #12
 800253c:	46bd      	mov	sp, r7
 800253e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002542:	4770      	bx	lr
 8002544:	40021000 	.word	0x40021000

08002548 <LL_RCC_PLL_GetMainSource>:
{
 8002548:	b480      	push	{r7}
 800254a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800254c:	4b04      	ldr	r3, [pc, #16]	; (8002560 <LL_RCC_PLL_GetMainSource+0x18>)
 800254e:	68db      	ldr	r3, [r3, #12]
 8002550:	f003 0303 	and.w	r3, r3, #3
}
 8002554:	4618      	mov	r0, r3
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	40021000 	.word	0x40021000

08002564 <LL_RCC_PLL_GetN>:
{
 8002564:	b480      	push	{r7}
 8002566:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002568:	4b04      	ldr	r3, [pc, #16]	; (800257c <LL_RCC_PLL_GetN+0x18>)
 800256a:	68db      	ldr	r3, [r3, #12]
 800256c:	0a1b      	lsrs	r3, r3, #8
 800256e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002572:	4618      	mov	r0, r3
 8002574:	46bd      	mov	sp, r7
 8002576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257a:	4770      	bx	lr
 800257c:	40021000 	.word	0x40021000

08002580 <LL_RCC_PLL_GetR>:
{
 8002580:	b480      	push	{r7}
 8002582:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002584:	4b04      	ldr	r3, [pc, #16]	; (8002598 <LL_RCC_PLL_GetR+0x18>)
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800258c:	4618      	mov	r0, r3
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40021000 	.word	0x40021000

0800259c <LL_RCC_PLL_GetDivider>:
{
 800259c:	b480      	push	{r7}
 800259e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80025a0:	4b04      	ldr	r3, [pc, #16]	; (80025b4 <LL_RCC_PLL_GetDivider+0x18>)
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40021000 	.word	0x40021000

080025b8 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b084      	sub	sp, #16
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80025c0:	2300      	movs	r3, #0
 80025c2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2b03      	cmp	r3, #3
 80025c8:	d137      	bne.n	800263a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f7ff ff94 	bl	80024f8 <LL_RCC_GetUSARTClockSource>
 80025d0:	4603      	mov	r3, r0
 80025d2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80025d6:	2b03      	cmp	r3, #3
 80025d8:	f200 80b2 	bhi.w	8002740 <LL_RCC_GetUSARTClockFreq+0x188>
 80025dc:	a201      	add	r2, pc, #4	; (adr r2, 80025e4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80025de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025e2:	bf00      	nop
 80025e4:	08002623 	.word	0x08002623
 80025e8:	080025f5 	.word	0x080025f5
 80025ec:	080025fd 	.word	0x080025fd
 80025f0:	0800260f 	.word	0x0800260f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80025f4:	f000 f952 	bl	800289c <RCC_GetSystemClockFreq>
 80025f8:	60f8      	str	r0, [r7, #12]
        break;
 80025fa:	e0b2      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80025fc:	f7ff feee 	bl	80023dc <LL_RCC_HSI_IsReady>
 8002600:	4603      	mov	r3, r0
 8002602:	2b00      	cmp	r3, #0
 8002604:	f000 809e 	beq.w	8002744 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8002608:	4b58      	ldr	r3, [pc, #352]	; (800276c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 800260a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800260c:	e09a      	b.n	8002744 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800260e:	f7ff fef9 	bl	8002404 <LL_RCC_LSE_IsReady>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	f000 8097 	beq.w	8002748 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 800261a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800261e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002620:	e092      	b.n	8002748 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002622:	f000 f93b 	bl	800289c <RCC_GetSystemClockFreq>
 8002626:	4603      	mov	r3, r0
 8002628:	4618      	mov	r0, r3
 800262a:	f000 f9c7 	bl	80029bc <RCC_GetHCLKClockFreq>
 800262e:	4603      	mov	r3, r0
 8002630:	4618      	mov	r0, r3
 8002632:	f000 f9ed 	bl	8002a10 <RCC_GetPCLK2ClockFreq>
 8002636:	60f8      	str	r0, [r7, #12]
        break;
 8002638:	e093      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	2b0c      	cmp	r3, #12
 800263e:	d146      	bne.n	80026ce <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002640:	6878      	ldr	r0, [r7, #4]
 8002642:	f7ff ff59 	bl	80024f8 <LL_RCC_GetUSARTClockSource>
 8002646:	4603      	mov	r3, r0
 8002648:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800264c:	2b0c      	cmp	r3, #12
 800264e:	d87d      	bhi.n	800274c <LL_RCC_GetUSARTClockFreq+0x194>
 8002650:	a201      	add	r2, pc, #4	; (adr r2, 8002658 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002652:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002656:	bf00      	nop
 8002658:	080026b7 	.word	0x080026b7
 800265c:	0800274d 	.word	0x0800274d
 8002660:	0800274d 	.word	0x0800274d
 8002664:	0800274d 	.word	0x0800274d
 8002668:	0800268d 	.word	0x0800268d
 800266c:	0800274d 	.word	0x0800274d
 8002670:	0800274d 	.word	0x0800274d
 8002674:	0800274d 	.word	0x0800274d
 8002678:	08002695 	.word	0x08002695
 800267c:	0800274d 	.word	0x0800274d
 8002680:	0800274d 	.word	0x0800274d
 8002684:	0800274d 	.word	0x0800274d
 8002688:	080026a5 	.word	0x080026a5
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800268c:	f000 f906 	bl	800289c <RCC_GetSystemClockFreq>
 8002690:	60f8      	str	r0, [r7, #12]
        break;
 8002692:	e066      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002694:	f7ff fea2 	bl	80023dc <LL_RCC_HSI_IsReady>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d058      	beq.n	8002750 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800269e:	4b33      	ldr	r3, [pc, #204]	; (800276c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80026a0:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026a2:	e055      	b.n	8002750 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80026a4:	f7ff feae 	bl	8002404 <LL_RCC_LSE_IsReady>
 80026a8:	4603      	mov	r3, r0
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d052      	beq.n	8002754 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 80026ae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80026b2:	60fb      	str	r3, [r7, #12]
        }
        break;
 80026b4:	e04e      	b.n	8002754 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80026b6:	f000 f8f1 	bl	800289c <RCC_GetSystemClockFreq>
 80026ba:	4603      	mov	r3, r0
 80026bc:	4618      	mov	r0, r3
 80026be:	f000 f97d 	bl	80029bc <RCC_GetHCLKClockFreq>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4618      	mov	r0, r3
 80026c6:	f000 f98f 	bl	80029e8 <RCC_GetPCLK1ClockFreq>
 80026ca:	60f8      	str	r0, [r7, #12]
        break;
 80026cc:	e049      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2b30      	cmp	r3, #48	; 0x30
 80026d2:	d141      	bne.n	8002758 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f7ff ff0f 	bl	80024f8 <LL_RCC_GetUSARTClockSource>
 80026da:	4603      	mov	r3, r0
 80026dc:	4a24      	ldr	r2, [pc, #144]	; (8002770 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80026de:	4293      	cmp	r3, r2
 80026e0:	d00d      	beq.n	80026fe <LL_RCC_GetUSARTClockFreq+0x146>
 80026e2:	4a23      	ldr	r2, [pc, #140]	; (8002770 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d803      	bhi.n	80026f0 <LL_RCC_GetUSARTClockFreq+0x138>
 80026e8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80026ec:	d01c      	beq.n	8002728 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80026ee:	e038      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80026f0:	4a20      	ldr	r2, [pc, #128]	; (8002774 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d007      	beq.n	8002706 <LL_RCC_GetUSARTClockFreq+0x14e>
 80026f6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80026fa:	d00c      	beq.n	8002716 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80026fc:	e031      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80026fe:	f000 f8cd 	bl	800289c <RCC_GetSystemClockFreq>
 8002702:	60f8      	str	r0, [r7, #12]
          break;
 8002704:	e02d      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8002706:	f7ff fe69 	bl	80023dc <LL_RCC_HSI_IsReady>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d025      	beq.n	800275c <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8002710:	4b16      	ldr	r3, [pc, #88]	; (800276c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002712:	60fb      	str	r3, [r7, #12]
          break;
 8002714:	e022      	b.n	800275c <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8002716:	f7ff fe75 	bl	8002404 <LL_RCC_LSE_IsReady>
 800271a:	4603      	mov	r3, r0
 800271c:	2b00      	cmp	r3, #0
 800271e:	d01f      	beq.n	8002760 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8002720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002724:	60fb      	str	r3, [r7, #12]
          break;
 8002726:	e01b      	b.n	8002760 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002728:	f000 f8b8 	bl	800289c <RCC_GetSystemClockFreq>
 800272c:	4603      	mov	r3, r0
 800272e:	4618      	mov	r0, r3
 8002730:	f000 f944 	bl	80029bc <RCC_GetHCLKClockFreq>
 8002734:	4603      	mov	r3, r0
 8002736:	4618      	mov	r0, r3
 8002738:	f000 f956 	bl	80029e8 <RCC_GetPCLK1ClockFreq>
 800273c:	60f8      	str	r0, [r7, #12]
          break;
 800273e:	e010      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002740:	bf00      	nop
 8002742:	e00e      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002744:	bf00      	nop
 8002746:	e00c      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002748:	bf00      	nop
 800274a:	e00a      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800274c:	bf00      	nop
 800274e:	e008      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002750:	bf00      	nop
 8002752:	e006      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002754:	bf00      	nop
 8002756:	e004      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8002758:	bf00      	nop
 800275a:	e002      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 800275c:	bf00      	nop
 800275e:	e000      	b.n	8002762 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8002760:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002762:	68fb      	ldr	r3, [r7, #12]
}
 8002764:	4618      	mov	r0, r3
 8002766:	3710      	adds	r7, #16
 8002768:	46bd      	mov	sp, r7
 800276a:	bd80      	pop	{r7, pc}
 800276c:	00f42400 	.word	0x00f42400
 8002770:	00300010 	.word	0x00300010
 8002774:	00300020 	.word	0x00300020

08002778 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b084      	sub	sp, #16
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002780:	2300      	movs	r3, #0
 8002782:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2bc0      	cmp	r3, #192	; 0xc0
 8002788:	d135      	bne.n	80027f6 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800278a:	6878      	ldr	r0, [r7, #4]
 800278c:	f7ff fec8 	bl	8002520 <LL_RCC_GetUARTClockSource>
 8002790:	4603      	mov	r3, r0
 8002792:	4a3d      	ldr	r2, [pc, #244]	; (8002888 <LL_RCC_GetUARTClockFreq+0x110>)
 8002794:	4293      	cmp	r3, r2
 8002796:	d00d      	beq.n	80027b4 <LL_RCC_GetUARTClockFreq+0x3c>
 8002798:	4a3b      	ldr	r2, [pc, #236]	; (8002888 <LL_RCC_GetUARTClockFreq+0x110>)
 800279a:	4293      	cmp	r3, r2
 800279c:	d803      	bhi.n	80027a6 <LL_RCC_GetUARTClockFreq+0x2e>
 800279e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027a2:	d01c      	beq.n	80027de <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 80027a4:	e02c      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80027a6:	4a39      	ldr	r2, [pc, #228]	; (800288c <LL_RCC_GetUARTClockFreq+0x114>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d007      	beq.n	80027bc <LL_RCC_GetUARTClockFreq+0x44>
 80027ac:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80027b0:	d00c      	beq.n	80027cc <LL_RCC_GetUARTClockFreq+0x54>
        break;
 80027b2:	e025      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 80027b4:	f000 f872 	bl	800289c <RCC_GetSystemClockFreq>
 80027b8:	60f8      	str	r0, [r7, #12]
        break;
 80027ba:	e021      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 80027bc:	f7ff fe0e 	bl	80023dc <LL_RCC_HSI_IsReady>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d019      	beq.n	80027fa <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80027c6:	4b32      	ldr	r3, [pc, #200]	; (8002890 <LL_RCC_GetUARTClockFreq+0x118>)
 80027c8:	60fb      	str	r3, [r7, #12]
        break;
 80027ca:	e016      	b.n	80027fa <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80027cc:	f7ff fe1a 	bl	8002404 <LL_RCC_LSE_IsReady>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d013      	beq.n	80027fe <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80027d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80027da:	60fb      	str	r3, [r7, #12]
        break;
 80027dc:	e00f      	b.n	80027fe <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80027de:	f000 f85d 	bl	800289c <RCC_GetSystemClockFreq>
 80027e2:	4603      	mov	r3, r0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f000 f8e9 	bl	80029bc <RCC_GetHCLKClockFreq>
 80027ea:	4603      	mov	r3, r0
 80027ec:	4618      	mov	r0, r3
 80027ee:	f000 f8fb 	bl	80029e8 <RCC_GetPCLK1ClockFreq>
 80027f2:	60f8      	str	r0, [r7, #12]
        break;
 80027f4:	e004      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 80027f6:	bf00      	nop
 80027f8:	e002      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80027fa:	bf00      	nop
 80027fc:	e000      	b.n	8002800 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80027fe:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002806:	d135      	bne.n	8002874 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fe89 	bl	8002520 <LL_RCC_GetUARTClockSource>
 800280e:	4603      	mov	r3, r0
 8002810:	4a20      	ldr	r2, [pc, #128]	; (8002894 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d00d      	beq.n	8002832 <LL_RCC_GetUARTClockFreq+0xba>
 8002816:	4a1f      	ldr	r2, [pc, #124]	; (8002894 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002818:	4293      	cmp	r3, r2
 800281a:	d803      	bhi.n	8002824 <LL_RCC_GetUARTClockFreq+0xac>
 800281c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002820:	d01c      	beq.n	800285c <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002822:	e02c      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002824:	4a1c      	ldr	r2, [pc, #112]	; (8002898 <LL_RCC_GetUARTClockFreq+0x120>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d007      	beq.n	800283a <LL_RCC_GetUARTClockFreq+0xc2>
 800282a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800282e:	d00c      	beq.n	800284a <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8002830:	e025      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8002832:	f000 f833 	bl	800289c <RCC_GetSystemClockFreq>
 8002836:	60f8      	str	r0, [r7, #12]
        break;
 8002838:	e021      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 800283a:	f7ff fdcf 	bl	80023dc <LL_RCC_HSI_IsReady>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	d019      	beq.n	8002878 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8002844:	4b12      	ldr	r3, [pc, #72]	; (8002890 <LL_RCC_GetUARTClockFreq+0x118>)
 8002846:	60fb      	str	r3, [r7, #12]
        break;
 8002848:	e016      	b.n	8002878 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 800284a:	f7ff fddb 	bl	8002404 <LL_RCC_LSE_IsReady>
 800284e:	4603      	mov	r3, r0
 8002850:	2b00      	cmp	r3, #0
 8002852:	d013      	beq.n	800287c <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8002854:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002858:	60fb      	str	r3, [r7, #12]
        break;
 800285a:	e00f      	b.n	800287c <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800285c:	f000 f81e 	bl	800289c <RCC_GetSystemClockFreq>
 8002860:	4603      	mov	r3, r0
 8002862:	4618      	mov	r0, r3
 8002864:	f000 f8aa 	bl	80029bc <RCC_GetHCLKClockFreq>
 8002868:	4603      	mov	r3, r0
 800286a:	4618      	mov	r0, r3
 800286c:	f000 f8bc 	bl	80029e8 <RCC_GetPCLK1ClockFreq>
 8002870:	60f8      	str	r0, [r7, #12]
        break;
 8002872:	e004      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8002874:	bf00      	nop
 8002876:	e002      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8002878:	bf00      	nop
 800287a:	e000      	b.n	800287e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 800287c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	4618      	mov	r0, r3
 8002882:	3710      	adds	r7, #16
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	00c00040 	.word	0x00c00040
 800288c:	00c00080 	.word	0x00c00080
 8002890:	00f42400 	.word	0x00f42400
 8002894:	03000100 	.word	0x03000100
 8002898:	03000200 	.word	0x03000200

0800289c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800289c:	b580      	push	{r7, lr}
 800289e:	b082      	sub	sp, #8
 80028a0:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80028a2:	f7ff fdf1 	bl	8002488 <LL_RCC_GetSysClkSource>
 80028a6:	4603      	mov	r3, r0
 80028a8:	2b0c      	cmp	r3, #12
 80028aa:	d851      	bhi.n	8002950 <RCC_GetSystemClockFreq+0xb4>
 80028ac:	a201      	add	r2, pc, #4	; (adr r2, 80028b4 <RCC_GetSystemClockFreq+0x18>)
 80028ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b2:	bf00      	nop
 80028b4:	080028e9 	.word	0x080028e9
 80028b8:	08002951 	.word	0x08002951
 80028bc:	08002951 	.word	0x08002951
 80028c0:	08002951 	.word	0x08002951
 80028c4:	0800293d 	.word	0x0800293d
 80028c8:	08002951 	.word	0x08002951
 80028cc:	08002951 	.word	0x08002951
 80028d0:	08002951 	.word	0x08002951
 80028d4:	08002943 	.word	0x08002943
 80028d8:	08002951 	.word	0x08002951
 80028dc:	08002951 	.word	0x08002951
 80028e0:	08002951 	.word	0x08002951
 80028e4:	08002949 	.word	0x08002949
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80028e8:	f7ff fda0 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028ec:	4603      	mov	r3, r0
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d111      	bne.n	8002916 <RCC_GetSystemClockFreq+0x7a>
 80028f2:	f7ff fd9b 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028f6:	4603      	mov	r3, r0
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d004      	beq.n	8002906 <RCC_GetSystemClockFreq+0x6a>
 80028fc:	f7ff fda8 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002900:	4603      	mov	r3, r0
 8002902:	0a1b      	lsrs	r3, r3, #8
 8002904:	e003      	b.n	800290e <RCC_GetSystemClockFreq+0x72>
 8002906:	f7ff fdb1 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 800290a:	4603      	mov	r3, r0
 800290c:	0a1b      	lsrs	r3, r3, #8
 800290e:	4a28      	ldr	r2, [pc, #160]	; (80029b0 <RCC_GetSystemClockFreq+0x114>)
 8002910:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002914:	e010      	b.n	8002938 <RCC_GetSystemClockFreq+0x9c>
 8002916:	f7ff fd89 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 800291a:	4603      	mov	r3, r0
 800291c:	2b00      	cmp	r3, #0
 800291e:	d004      	beq.n	800292a <RCC_GetSystemClockFreq+0x8e>
 8002920:	f7ff fd96 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002924:	4603      	mov	r3, r0
 8002926:	091b      	lsrs	r3, r3, #4
 8002928:	e003      	b.n	8002932 <RCC_GetSystemClockFreq+0x96>
 800292a:	f7ff fd9f 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 800292e:	4603      	mov	r3, r0
 8002930:	091b      	lsrs	r3, r3, #4
 8002932:	4a1f      	ldr	r2, [pc, #124]	; (80029b0 <RCC_GetSystemClockFreq+0x114>)
 8002934:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002938:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800293a:	e033      	b.n	80029a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800293c:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <RCC_GetSystemClockFreq+0x118>)
 800293e:	607b      	str	r3, [r7, #4]
      break;
 8002940:	e030      	b.n	80029a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002942:	4b1d      	ldr	r3, [pc, #116]	; (80029b8 <RCC_GetSystemClockFreq+0x11c>)
 8002944:	607b      	str	r3, [r7, #4]
      break;
 8002946:	e02d      	b.n	80029a4 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002948:	f000 f876 	bl	8002a38 <RCC_PLL_GetFreqDomain_SYS>
 800294c:	6078      	str	r0, [r7, #4]
      break;
 800294e:	e029      	b.n	80029a4 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002950:	f7ff fd6c 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002954:	4603      	mov	r3, r0
 8002956:	2b00      	cmp	r3, #0
 8002958:	d111      	bne.n	800297e <RCC_GetSystemClockFreq+0xe2>
 800295a:	f7ff fd67 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 800295e:	4603      	mov	r3, r0
 8002960:	2b00      	cmp	r3, #0
 8002962:	d004      	beq.n	800296e <RCC_GetSystemClockFreq+0xd2>
 8002964:	f7ff fd74 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002968:	4603      	mov	r3, r0
 800296a:	0a1b      	lsrs	r3, r3, #8
 800296c:	e003      	b.n	8002976 <RCC_GetSystemClockFreq+0xda>
 800296e:	f7ff fd7d 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002972:	4603      	mov	r3, r0
 8002974:	0a1b      	lsrs	r3, r3, #8
 8002976:	4a0e      	ldr	r2, [pc, #56]	; (80029b0 <RCC_GetSystemClockFreq+0x114>)
 8002978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800297c:	e010      	b.n	80029a0 <RCC_GetSystemClockFreq+0x104>
 800297e:	f7ff fd55 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002982:	4603      	mov	r3, r0
 8002984:	2b00      	cmp	r3, #0
 8002986:	d004      	beq.n	8002992 <RCC_GetSystemClockFreq+0xf6>
 8002988:	f7ff fd62 	bl	8002450 <LL_RCC_MSI_GetRange>
 800298c:	4603      	mov	r3, r0
 800298e:	091b      	lsrs	r3, r3, #4
 8002990:	e003      	b.n	800299a <RCC_GetSystemClockFreq+0xfe>
 8002992:	f7ff fd6b 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002996:	4603      	mov	r3, r0
 8002998:	091b      	lsrs	r3, r3, #4
 800299a:	4a05      	ldr	r2, [pc, #20]	; (80029b0 <RCC_GetSystemClockFreq+0x114>)
 800299c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029a0:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80029a2:	bf00      	nop
  }

  return frequency;
 80029a4:	687b      	ldr	r3, [r7, #4]
}
 80029a6:	4618      	mov	r0, r3
 80029a8:	3708      	adds	r7, #8
 80029aa:	46bd      	mov	sp, r7
 80029ac:	bd80      	pop	{r7, pc}
 80029ae:	bf00      	nop
 80029b0:	080042f0 	.word	0x080042f0
 80029b4:	00f42400 	.word	0x00f42400
 80029b8:	007a1200 	.word	0x007a1200

080029bc <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80029bc:	b580      	push	{r7, lr}
 80029be:	b082      	sub	sp, #8
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80029c4:	f7ff fd6e 	bl	80024a4 <LL_RCC_GetAHBPrescaler>
 80029c8:	4603      	mov	r3, r0
 80029ca:	091b      	lsrs	r3, r3, #4
 80029cc:	f003 030f 	and.w	r3, r3, #15
 80029d0:	4a04      	ldr	r2, [pc, #16]	; (80029e4 <RCC_GetHCLKClockFreq+0x28>)
 80029d2:	5cd3      	ldrb	r3, [r2, r3]
 80029d4:	461a      	mov	r2, r3
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	40d3      	lsrs	r3, r2
}
 80029da:	4618      	mov	r0, r3
 80029dc:	3708      	adds	r7, #8
 80029de:	46bd      	mov	sp, r7
 80029e0:	bd80      	pop	{r7, pc}
 80029e2:	bf00      	nop
 80029e4:	080042d8 	.word	0x080042d8

080029e8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80029f0:	f7ff fd66 	bl	80024c0 <LL_RCC_GetAPB1Prescaler>
 80029f4:	4603      	mov	r3, r0
 80029f6:	0a1b      	lsrs	r3, r3, #8
 80029f8:	4a04      	ldr	r2, [pc, #16]	; (8002a0c <RCC_GetPCLK1ClockFreq+0x24>)
 80029fa:	5cd3      	ldrb	r3, [r2, r3]
 80029fc:	461a      	mov	r2, r3
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	40d3      	lsrs	r3, r2
}
 8002a02:	4618      	mov	r0, r3
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	080042e8 	.word	0x080042e8

08002a10 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002a18:	f7ff fd60 	bl	80024dc <LL_RCC_GetAPB2Prescaler>
 8002a1c:	4603      	mov	r3, r0
 8002a1e:	0adb      	lsrs	r3, r3, #11
 8002a20:	4a04      	ldr	r2, [pc, #16]	; (8002a34 <RCC_GetPCLK2ClockFreq+0x24>)
 8002a22:	5cd3      	ldrb	r3, [r2, r3]
 8002a24:	461a      	mov	r2, r3
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	40d3      	lsrs	r3, r2
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3708      	adds	r7, #8
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bd80      	pop	{r7, pc}
 8002a32:	bf00      	nop
 8002a34:	080042e8 	.word	0x080042e8

08002a38 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002a38:	b590      	push	{r4, r7, lr}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002a3e:	f7ff fd83 	bl	8002548 <LL_RCC_PLL_GetMainSource>
 8002a42:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	2b02      	cmp	r3, #2
 8002a48:	d02d      	beq.n	8002aa6 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8002a4a:	2b03      	cmp	r3, #3
 8002a4c:	d02e      	beq.n	8002aac <RCC_PLL_GetFreqDomain_SYS+0x74>
 8002a4e:	2b01      	cmp	r3, #1
 8002a50:	d12f      	bne.n	8002ab2 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002a52:	f7ff fceb 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a56:	4603      	mov	r3, r0
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8002a5c:	f7ff fce6 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a60:	4603      	mov	r3, r0
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d004      	beq.n	8002a70 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8002a66:	f7ff fcf3 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	0a1b      	lsrs	r3, r3, #8
 8002a6e:	e003      	b.n	8002a78 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002a70:	f7ff fcfc 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002a74:	4603      	mov	r3, r0
 8002a76:	0a1b      	lsrs	r3, r3, #8
 8002a78:	4a2f      	ldr	r2, [pc, #188]	; (8002b38 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002a7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a7e:	e010      	b.n	8002aa2 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8002a80:	f7ff fcd4 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002a84:	4603      	mov	r3, r0
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d004      	beq.n	8002a94 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8002a8a:	f7ff fce1 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	091b      	lsrs	r3, r3, #4
 8002a92:	e003      	b.n	8002a9c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002a94:	f7ff fcea 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	091b      	lsrs	r3, r3, #4
 8002a9c:	4a26      	ldr	r2, [pc, #152]	; (8002b38 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002aa4:	e02f      	b.n	8002b06 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002aa6:	4b25      	ldr	r3, [pc, #148]	; (8002b3c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002aa8:	607b      	str	r3, [r7, #4]
      break;
 8002aaa:	e02c      	b.n	8002b06 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8002aac:	4b24      	ldr	r3, [pc, #144]	; (8002b40 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8002aae:	607b      	str	r3, [r7, #4]
      break;
 8002ab0:	e029      	b.n	8002b06 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002ab2:	f7ff fcbb 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ab6:	4603      	mov	r3, r0
 8002ab8:	2b00      	cmp	r3, #0
 8002aba:	d111      	bne.n	8002ae0 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8002abc:	f7ff fcb6 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ac0:	4603      	mov	r3, r0
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d004      	beq.n	8002ad0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8002ac6:	f7ff fcc3 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002aca:	4603      	mov	r3, r0
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	e003      	b.n	8002ad8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8002ad0:	f7ff fccc 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	4a17      	ldr	r2, [pc, #92]	; (8002b38 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002ada:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ade:	e010      	b.n	8002b02 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8002ae0:	f7ff fca4 	bl	800242c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d004      	beq.n	8002af4 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002aea:	f7ff fcb1 	bl	8002450 <LL_RCC_MSI_GetRange>
 8002aee:	4603      	mov	r3, r0
 8002af0:	091b      	lsrs	r3, r3, #4
 8002af2:	e003      	b.n	8002afc <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8002af4:	f7ff fcba 	bl	800246c <LL_RCC_MSI_GetRangeAfterStandby>
 8002af8:	4603      	mov	r3, r0
 8002afa:	091b      	lsrs	r3, r3, #4
 8002afc:	4a0e      	ldr	r2, [pc, #56]	; (8002b38 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002afe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002b02:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002b04:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002b06:	f7ff fd49 	bl	800259c <LL_RCC_PLL_GetDivider>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	091b      	lsrs	r3, r3, #4
 8002b0e:	3301      	adds	r3, #1
 8002b10:	687a      	ldr	r2, [r7, #4]
 8002b12:	fbb2 f4f3 	udiv	r4, r2, r3
 8002b16:	f7ff fd25 	bl	8002564 <LL_RCC_PLL_GetN>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	fb03 f404 	mul.w	r4, r3, r4
 8002b20:	f7ff fd2e 	bl	8002580 <LL_RCC_PLL_GetR>
 8002b24:	4603      	mov	r3, r0
 8002b26:	0e5b      	lsrs	r3, r3, #25
 8002b28:	3301      	adds	r3, #1
 8002b2a:	005b      	lsls	r3, r3, #1
 8002b2c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	370c      	adds	r7, #12
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd90      	pop	{r4, r7, pc}
 8002b38:	080042f0 	.word	0x080042f0
 8002b3c:	00f42400 	.word	0x00f42400
 8002b40:	007a1200 	.word	0x007a1200

08002b44 <LL_SPI_IsEnabled>:
{
 8002b44:	b480      	push	{r7}
 8002b46:	b083      	sub	sp, #12
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b54:	2b40      	cmp	r3, #64	; 0x40
 8002b56:	d101      	bne.n	8002b5c <LL_SPI_IsEnabled+0x18>
 8002b58:	2301      	movs	r3, #1
 8002b5a:	e000      	b.n	8002b5e <LL_SPI_IsEnabled+0x1a>
 8002b5c:	2300      	movs	r3, #0
}
 8002b5e:	4618      	mov	r0, r3
 8002b60:	370c      	adds	r7, #12
 8002b62:	46bd      	mov	sp, r7
 8002b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b68:	4770      	bx	lr

08002b6a <LL_SPI_SetCRCPolynomial>:
{
 8002b6a:	b480      	push	{r7}
 8002b6c:	b083      	sub	sp, #12
 8002b6e:	af00      	add	r7, sp, #0
 8002b70:	6078      	str	r0, [r7, #4]
 8002b72:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	b29b      	uxth	r3, r3
 8002b78:	461a      	mov	r2, r3
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	611a      	str	r2, [r3, #16]
}
 8002b7e:	bf00      	nop
 8002b80:	370c      	adds	r7, #12
 8002b82:	46bd      	mov	sp, r7
 8002b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b88:	4770      	bx	lr

08002b8a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8002b8a:	b580      	push	{r7, lr}
 8002b8c:	b084      	sub	sp, #16
 8002b8e:	af00      	add	r7, sp, #0
 8002b90:	6078      	str	r0, [r7, #4]
 8002b92:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f7ff ffd3 	bl	8002b44 <LL_SPI_IsEnabled>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d13b      	bne.n	8002c1c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bac:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002bb0:	683a      	ldr	r2, [r7, #0]
 8002bb2:	6811      	ldr	r1, [r2, #0]
 8002bb4:	683a      	ldr	r2, [r7, #0]
 8002bb6:	6852      	ldr	r2, [r2, #4]
 8002bb8:	4311      	orrs	r1, r2
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	68d2      	ldr	r2, [r2, #12]
 8002bbe:	4311      	orrs	r1, r2
 8002bc0:	683a      	ldr	r2, [r7, #0]
 8002bc2:	6912      	ldr	r2, [r2, #16]
 8002bc4:	4311      	orrs	r1, r2
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	6952      	ldr	r2, [r2, #20]
 8002bca:	4311      	orrs	r1, r2
 8002bcc:	683a      	ldr	r2, [r7, #0]
 8002bce:	6992      	ldr	r2, [r2, #24]
 8002bd0:	4311      	orrs	r1, r2
 8002bd2:	683a      	ldr	r2, [r7, #0]
 8002bd4:	69d2      	ldr	r2, [r2, #28]
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	683a      	ldr	r2, [r7, #0]
 8002bda:	6a12      	ldr	r2, [r2, #32]
 8002bdc:	430a      	orrs	r2, r1
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002bec:	f023 0304 	bic.w	r3, r3, #4
 8002bf0:	683a      	ldr	r2, [r7, #0]
 8002bf2:	6891      	ldr	r1, [r2, #8]
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	6952      	ldr	r2, [r2, #20]
 8002bf8:	0c12      	lsrs	r2, r2, #16
 8002bfa:	430a      	orrs	r2, r1
 8002bfc:	431a      	orrs	r2, r3
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	6a1b      	ldr	r3, [r3, #32]
 8002c06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002c0a:	d105      	bne.n	8002c18 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002c0c:	683b      	ldr	r3, [r7, #0]
 8002c0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ffa9 	bl	8002b6a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002c1c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c1e:	4618      	mov	r0, r3
 8002c20:	3710      	adds	r7, #16
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}

08002c26 <LL_TIM_SetPrescaler>:
{
 8002c26:	b480      	push	{r7}
 8002c28:	b083      	sub	sp, #12
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	6078      	str	r0, [r7, #4]
 8002c2e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	683a      	ldr	r2, [r7, #0]
 8002c34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <LL_TIM_SetAutoReload>:
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
 8002c4a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	683a      	ldr	r2, [r7, #0]
 8002c50:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr

08002c5e <LL_TIM_SetRepetitionCounter>:
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0
 8002c64:	6078      	str	r0, [r7, #4]
 8002c66:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	683a      	ldr	r2, [r7, #0]
 8002c6c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002c6e:	bf00      	nop
 8002c70:	370c      	adds	r7, #12
 8002c72:	46bd      	mov	sp, r7
 8002c74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c78:	4770      	bx	lr

08002c7a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002c7a:	b480      	push	{r7}
 8002c7c:	b083      	sub	sp, #12
 8002c7e:	af00      	add	r7, sp, #0
 8002c80:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	695b      	ldr	r3, [r3, #20]
 8002c86:	f043 0201 	orr.w	r2, r3, #1
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	615a      	str	r2, [r3, #20]
}
 8002c8e:	bf00      	nop
 8002c90:	370c      	adds	r7, #12
 8002c92:	46bd      	mov	sp, r7
 8002c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c98:	4770      	bx	lr
	...

08002c9c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002c9c:	b580      	push	{r7, lr}
 8002c9e:	b084      	sub	sp, #16
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	4a3d      	ldr	r2, [pc, #244]	; (8002da4 <LL_TIM_Init+0x108>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d013      	beq.n	8002cdc <LL_TIM_Init+0x40>
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cba:	d00f      	beq.n	8002cdc <LL_TIM_Init+0x40>
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	4a3a      	ldr	r2, [pc, #232]	; (8002da8 <LL_TIM_Init+0x10c>)
 8002cc0:	4293      	cmp	r3, r2
 8002cc2:	d00b      	beq.n	8002cdc <LL_TIM_Init+0x40>
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	4a39      	ldr	r2, [pc, #228]	; (8002dac <LL_TIM_Init+0x110>)
 8002cc8:	4293      	cmp	r3, r2
 8002cca:	d007      	beq.n	8002cdc <LL_TIM_Init+0x40>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	4a38      	ldr	r2, [pc, #224]	; (8002db0 <LL_TIM_Init+0x114>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d003      	beq.n	8002cdc <LL_TIM_Init+0x40>
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	4a37      	ldr	r2, [pc, #220]	; (8002db4 <LL_TIM_Init+0x118>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d106      	bne.n	8002cea <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a2d      	ldr	r2, [pc, #180]	; (8002da4 <LL_TIM_Init+0x108>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d01f      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cf8:	d01b      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	4a2a      	ldr	r2, [pc, #168]	; (8002da8 <LL_TIM_Init+0x10c>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d017      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a29      	ldr	r2, [pc, #164]	; (8002dac <LL_TIM_Init+0x110>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d013      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	4a28      	ldr	r2, [pc, #160]	; (8002db0 <LL_TIM_Init+0x114>)
 8002d0e:	4293      	cmp	r3, r2
 8002d10:	d00f      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	4a27      	ldr	r2, [pc, #156]	; (8002db4 <LL_TIM_Init+0x118>)
 8002d16:	4293      	cmp	r3, r2
 8002d18:	d00b      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	4a26      	ldr	r2, [pc, #152]	; (8002db8 <LL_TIM_Init+0x11c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d007      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4a25      	ldr	r2, [pc, #148]	; (8002dbc <LL_TIM_Init+0x120>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d003      	beq.n	8002d32 <LL_TIM_Init+0x96>
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	4a24      	ldr	r2, [pc, #144]	; (8002dc0 <LL_TIM_Init+0x124>)
 8002d2e:	4293      	cmp	r3, r2
 8002d30:	d106      	bne.n	8002d40 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	68db      	ldr	r3, [r3, #12]
 8002d3c:	4313      	orrs	r3, r2
 8002d3e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002d46:	683b      	ldr	r3, [r7, #0]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	4619      	mov	r1, r3
 8002d4c:	6878      	ldr	r0, [r7, #4]
 8002d4e:	f7ff ff78 	bl	8002c42 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	881b      	ldrh	r3, [r3, #0]
 8002d56:	4619      	mov	r1, r3
 8002d58:	6878      	ldr	r0, [r7, #4]
 8002d5a:	f7ff ff64 	bl	8002c26 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	4a10      	ldr	r2, [pc, #64]	; (8002da4 <LL_TIM_Init+0x108>)
 8002d62:	4293      	cmp	r3, r2
 8002d64:	d00f      	beq.n	8002d86 <LL_TIM_Init+0xea>
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	4a12      	ldr	r2, [pc, #72]	; (8002db4 <LL_TIM_Init+0x118>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d00b      	beq.n	8002d86 <LL_TIM_Init+0xea>
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	4a11      	ldr	r2, [pc, #68]	; (8002db8 <LL_TIM_Init+0x11c>)
 8002d72:	4293      	cmp	r3, r2
 8002d74:	d007      	beq.n	8002d86 <LL_TIM_Init+0xea>
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	4a10      	ldr	r2, [pc, #64]	; (8002dbc <LL_TIM_Init+0x120>)
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d003      	beq.n	8002d86 <LL_TIM_Init+0xea>
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a0f      	ldr	r2, [pc, #60]	; (8002dc0 <LL_TIM_Init+0x124>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d105      	bne.n	8002d92 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	691b      	ldr	r3, [r3, #16]
 8002d8a:	4619      	mov	r1, r3
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff ff66 	bl	8002c5e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002d92:	6878      	ldr	r0, [r7, #4]
 8002d94:	f7ff ff71 	bl	8002c7a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3710      	adds	r7, #16
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	40012c00 	.word	0x40012c00
 8002da8:	40000400 	.word	0x40000400
 8002dac:	40000800 	.word	0x40000800
 8002db0:	40000c00 	.word	0x40000c00
 8002db4:	40013400 	.word	0x40013400
 8002db8:	40014000 	.word	0x40014000
 8002dbc:	40014400 	.word	0x40014400
 8002dc0:	40014800 	.word	0x40014800

08002dc4 <LL_USART_IsEnabled>:
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	f003 0301 	and.w	r3, r3, #1
 8002dd4:	2b01      	cmp	r3, #1
 8002dd6:	d101      	bne.n	8002ddc <LL_USART_IsEnabled+0x18>
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <LL_USART_IsEnabled+0x1a>
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	370c      	adds	r7, #12
 8002de2:	46bd      	mov	sp, r7
 8002de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de8:	4770      	bx	lr

08002dea <LL_USART_SetStopBitsLength>:
{
 8002dea:	b480      	push	{r7}
 8002dec:	b083      	sub	sp, #12
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	6078      	str	r0, [r7, #4]
 8002df2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	431a      	orrs	r2, r3
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	605a      	str	r2, [r3, #4]
}
 8002e04:	bf00      	nop
 8002e06:	370c      	adds	r7, #12
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0e:	4770      	bx	lr

08002e10 <LL_USART_SetHWFlowCtrl>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
 8002e18:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	689b      	ldr	r3, [r3, #8]
 8002e1e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	431a      	orrs	r2, r3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	609a      	str	r2, [r3, #8]
}
 8002e2a:	bf00      	nop
 8002e2c:	370c      	adds	r7, #12
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e34:	4770      	bx	lr

08002e36 <LL_USART_SetBaudRate>:
{
 8002e36:	b480      	push	{r7}
 8002e38:	b087      	sub	sp, #28
 8002e3a:	af00      	add	r7, sp, #0
 8002e3c:	60f8      	str	r0, [r7, #12]
 8002e3e:	60b9      	str	r1, [r7, #8]
 8002e40:	607a      	str	r2, [r7, #4]
 8002e42:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002e4a:	d11a      	bne.n	8002e82 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002e4c:	68bb      	ldr	r3, [r7, #8]
 8002e4e:	005a      	lsls	r2, r3, #1
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	085b      	lsrs	r3, r3, #1
 8002e54:	441a      	add	r2, r3
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e5c:	b29b      	uxth	r3, r3
 8002e5e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002e60:	697a      	ldr	r2, [r7, #20]
 8002e62:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002e66:	4013      	ands	r3, r2
 8002e68:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002e6a:	697b      	ldr	r3, [r7, #20]
 8002e6c:	085b      	lsrs	r3, r3, #1
 8002e6e:	b29b      	uxth	r3, r3
 8002e70:	f003 0307 	and.w	r3, r3, #7
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	4313      	orrs	r3, r2
 8002e78:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	693a      	ldr	r2, [r7, #16]
 8002e7e:	60da      	str	r2, [r3, #12]
}
 8002e80:	e00a      	b.n	8002e98 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	085a      	lsrs	r2, r3, #1
 8002e86:	68bb      	ldr	r3, [r7, #8]
 8002e88:	441a      	add	r2, r3
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e90:	b29b      	uxth	r3, r3
 8002e92:	461a      	mov	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	60da      	str	r2, [r3, #12]
}
 8002e98:	bf00      	nop
 8002e9a:	371c      	adds	r7, #28
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr

08002ea4 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b084      	sub	sp, #16
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
 8002eac:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002eae:	2301      	movs	r3, #1
 8002eb0:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f7ff ff84 	bl	8002dc4 <LL_USART_IsEnabled>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d15b      	bne.n	8002f7a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681a      	ldr	r2, [r3, #0]
 8002ec6:	4b2f      	ldr	r3, [pc, #188]	; (8002f84 <LL_USART_Init+0xe0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	683a      	ldr	r2, [r7, #0]
 8002ecc:	6851      	ldr	r1, [r2, #4]
 8002ece:	683a      	ldr	r2, [r7, #0]
 8002ed0:	68d2      	ldr	r2, [r2, #12]
 8002ed2:	4311      	orrs	r1, r2
 8002ed4:	683a      	ldr	r2, [r7, #0]
 8002ed6:	6912      	ldr	r2, [r2, #16]
 8002ed8:	4311      	orrs	r1, r2
 8002eda:	683a      	ldr	r2, [r7, #0]
 8002edc:	6992      	ldr	r2, [r2, #24]
 8002ede:	430a      	orrs	r2, r1
 8002ee0:	431a      	orrs	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	689b      	ldr	r3, [r3, #8]
 8002eea:	4619      	mov	r1, r3
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff7c 	bl	8002dea <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	695b      	ldr	r3, [r3, #20]
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f7ff ff89 	bl	8002e10 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a21      	ldr	r2, [pc, #132]	; (8002f88 <LL_USART_Init+0xe4>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d104      	bne.n	8002f10 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002f06:	2003      	movs	r0, #3
 8002f08:	f7ff fb56 	bl	80025b8 <LL_RCC_GetUSARTClockFreq>
 8002f0c:	60b8      	str	r0, [r7, #8]
 8002f0e:	e023      	b.n	8002f58 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	4a1e      	ldr	r2, [pc, #120]	; (8002f8c <LL_USART_Init+0xe8>)
 8002f14:	4293      	cmp	r3, r2
 8002f16:	d104      	bne.n	8002f22 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002f18:	200c      	movs	r0, #12
 8002f1a:	f7ff fb4d 	bl	80025b8 <LL_RCC_GetUSARTClockFreq>
 8002f1e:	60b8      	str	r0, [r7, #8]
 8002f20:	e01a      	b.n	8002f58 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a1a      	ldr	r2, [pc, #104]	; (8002f90 <LL_USART_Init+0xec>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d104      	bne.n	8002f34 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002f2a:	2030      	movs	r0, #48	; 0x30
 8002f2c:	f7ff fb44 	bl	80025b8 <LL_RCC_GetUSARTClockFreq>
 8002f30:	60b8      	str	r0, [r7, #8]
 8002f32:	e011      	b.n	8002f58 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	4a17      	ldr	r2, [pc, #92]	; (8002f94 <LL_USART_Init+0xf0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d104      	bne.n	8002f46 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002f3c:	20c0      	movs	r0, #192	; 0xc0
 8002f3e:	f7ff fc1b 	bl	8002778 <LL_RCC_GetUARTClockFreq>
 8002f42:	60b8      	str	r0, [r7, #8]
 8002f44:	e008      	b.n	8002f58 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a13      	ldr	r2, [pc, #76]	; (8002f98 <LL_USART_Init+0xf4>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d104      	bne.n	8002f58 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002f4e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002f52:	f7ff fc11 	bl	8002778 <LL_RCC_GetUARTClockFreq>
 8002f56:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002f58:	68bb      	ldr	r3, [r7, #8]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00d      	beq.n	8002f7a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d009      	beq.n	8002f7a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002f66:	2300      	movs	r3, #0
 8002f68:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	699a      	ldr	r2, [r3, #24]
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	68b9      	ldr	r1, [r7, #8]
 8002f74:	6878      	ldr	r0, [r7, #4]
 8002f76:	f7ff ff5e 	bl	8002e36 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f7c:	4618      	mov	r0, r3
 8002f7e:	3710      	adds	r7, #16
 8002f80:	46bd      	mov	sp, r7
 8002f82:	bd80      	pop	{r7, pc}
 8002f84:	efff69f3 	.word	0xefff69f3
 8002f88:	40013800 	.word	0x40013800
 8002f8c:	40004400 	.word	0x40004400
 8002f90:	40004800 	.word	0x40004800
 8002f94:	40004c00 	.word	0x40004c00
 8002f98:	40005000 	.word	0x40005000

08002f9c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	683b      	ldr	r3, [r7, #0]
 8002faa:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fae:	4a07      	ldr	r2, [pc, #28]	; (8002fcc <LL_InitTick+0x30>)
 8002fb0:	3b01      	subs	r3, #1
 8002fb2:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002fb4:	4b05      	ldr	r3, [pc, #20]	; (8002fcc <LL_InitTick+0x30>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fba:	4b04      	ldr	r3, [pc, #16]	; (8002fcc <LL_InitTick+0x30>)
 8002fbc:	2205      	movs	r2, #5
 8002fbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002fc0:	bf00      	nop
 8002fc2:	370c      	adds	r7, #12
 8002fc4:	46bd      	mov	sp, r7
 8002fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fca:	4770      	bx	lr
 8002fcc:	e000e010 	.word	0xe000e010

08002fd0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002fd0:	b580      	push	{r7, lr}
 8002fd2:	b082      	sub	sp, #8
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002fd8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002fdc:	6878      	ldr	r0, [r7, #4]
 8002fde:	f7ff ffdd 	bl	8002f9c <LL_InitTick>
}
 8002fe2:	bf00      	nop
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
	...

08002fec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002fec:	b480      	push	{r7}
 8002fee:	b085      	sub	sp, #20
 8002ff0:	af00      	add	r7, sp, #0
 8002ff2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002ff4:	4b0f      	ldr	r3, [pc, #60]	; (8003034 <LL_mDelay+0x48>)
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002ffe:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003006:	d00c      	beq.n	8003022 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	3301      	adds	r3, #1
 800300c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800300e:	e008      	b.n	8003022 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8003010:	4b08      	ldr	r3, [pc, #32]	; (8003034 <LL_mDelay+0x48>)
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003018:	2b00      	cmp	r3, #0
 800301a:	d002      	beq.n	8003022 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	3b01      	subs	r3, #1
 8003020:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d1f3      	bne.n	8003010 <LL_mDelay+0x24>
    }
  }
}
 8003028:	bf00      	nop
 800302a:	3714      	adds	r7, #20
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	e000e010 	.word	0xe000e010

08003038 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8003040:	4a04      	ldr	r2, [pc, #16]	; (8003054 <LL_SetSystemCoreClock+0x1c>)
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	6013      	str	r3, [r2, #0]
}
 8003046:	bf00      	nop
 8003048:	370c      	adds	r7, #12
 800304a:	46bd      	mov	sp, r7
 800304c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003050:	4770      	bx	lr
 8003052:	bf00      	nop
 8003054:	2000055c 	.word	0x2000055c

08003058 <__errno>:
 8003058:	4b01      	ldr	r3, [pc, #4]	; (8003060 <__errno+0x8>)
 800305a:	6818      	ldr	r0, [r3, #0]
 800305c:	4770      	bx	lr
 800305e:	bf00      	nop
 8003060:	20000560 	.word	0x20000560

08003064 <__libc_init_array>:
 8003064:	b570      	push	{r4, r5, r6, lr}
 8003066:	4e0d      	ldr	r6, [pc, #52]	; (800309c <__libc_init_array+0x38>)
 8003068:	4c0d      	ldr	r4, [pc, #52]	; (80030a0 <__libc_init_array+0x3c>)
 800306a:	1ba4      	subs	r4, r4, r6
 800306c:	10a4      	asrs	r4, r4, #2
 800306e:	2500      	movs	r5, #0
 8003070:	42a5      	cmp	r5, r4
 8003072:	d109      	bne.n	8003088 <__libc_init_array+0x24>
 8003074:	4e0b      	ldr	r6, [pc, #44]	; (80030a4 <__libc_init_array+0x40>)
 8003076:	4c0c      	ldr	r4, [pc, #48]	; (80030a8 <__libc_init_array+0x44>)
 8003078:	f000 ff68 	bl	8003f4c <_init>
 800307c:	1ba4      	subs	r4, r4, r6
 800307e:	10a4      	asrs	r4, r4, #2
 8003080:	2500      	movs	r5, #0
 8003082:	42a5      	cmp	r5, r4
 8003084:	d105      	bne.n	8003092 <__libc_init_array+0x2e>
 8003086:	bd70      	pop	{r4, r5, r6, pc}
 8003088:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800308c:	4798      	blx	r3
 800308e:	3501      	adds	r5, #1
 8003090:	e7ee      	b.n	8003070 <__libc_init_array+0xc>
 8003092:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8003096:	4798      	blx	r3
 8003098:	3501      	adds	r5, #1
 800309a:	e7f2      	b.n	8003082 <__libc_init_array+0x1e>
 800309c:	080043b8 	.word	0x080043b8
 80030a0:	080043b8 	.word	0x080043b8
 80030a4:	080043b8 	.word	0x080043b8
 80030a8:	080043bc 	.word	0x080043bc

080030ac <memset>:
 80030ac:	4402      	add	r2, r0
 80030ae:	4603      	mov	r3, r0
 80030b0:	4293      	cmp	r3, r2
 80030b2:	d100      	bne.n	80030b6 <memset+0xa>
 80030b4:	4770      	bx	lr
 80030b6:	f803 1b01 	strb.w	r1, [r3], #1
 80030ba:	e7f9      	b.n	80030b0 <memset+0x4>

080030bc <iprintf>:
 80030bc:	b40f      	push	{r0, r1, r2, r3}
 80030be:	4b0a      	ldr	r3, [pc, #40]	; (80030e8 <iprintf+0x2c>)
 80030c0:	b513      	push	{r0, r1, r4, lr}
 80030c2:	681c      	ldr	r4, [r3, #0]
 80030c4:	b124      	cbz	r4, 80030d0 <iprintf+0x14>
 80030c6:	69a3      	ldr	r3, [r4, #24]
 80030c8:	b913      	cbnz	r3, 80030d0 <iprintf+0x14>
 80030ca:	4620      	mov	r0, r4
 80030cc:	f000 fa22 	bl	8003514 <__sinit>
 80030d0:	ab05      	add	r3, sp, #20
 80030d2:	9a04      	ldr	r2, [sp, #16]
 80030d4:	68a1      	ldr	r1, [r4, #8]
 80030d6:	9301      	str	r3, [sp, #4]
 80030d8:	4620      	mov	r0, r4
 80030da:	f000 fbdb 	bl	8003894 <_vfiprintf_r>
 80030de:	b002      	add	sp, #8
 80030e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80030e4:	b004      	add	sp, #16
 80030e6:	4770      	bx	lr
 80030e8:	20000560 	.word	0x20000560

080030ec <_puts_r>:
 80030ec:	b570      	push	{r4, r5, r6, lr}
 80030ee:	460e      	mov	r6, r1
 80030f0:	4605      	mov	r5, r0
 80030f2:	b118      	cbz	r0, 80030fc <_puts_r+0x10>
 80030f4:	6983      	ldr	r3, [r0, #24]
 80030f6:	b90b      	cbnz	r3, 80030fc <_puts_r+0x10>
 80030f8:	f000 fa0c 	bl	8003514 <__sinit>
 80030fc:	69ab      	ldr	r3, [r5, #24]
 80030fe:	68ac      	ldr	r4, [r5, #8]
 8003100:	b913      	cbnz	r3, 8003108 <_puts_r+0x1c>
 8003102:	4628      	mov	r0, r5
 8003104:	f000 fa06 	bl	8003514 <__sinit>
 8003108:	4b23      	ldr	r3, [pc, #140]	; (8003198 <_puts_r+0xac>)
 800310a:	429c      	cmp	r4, r3
 800310c:	d117      	bne.n	800313e <_puts_r+0x52>
 800310e:	686c      	ldr	r4, [r5, #4]
 8003110:	89a3      	ldrh	r3, [r4, #12]
 8003112:	071b      	lsls	r3, r3, #28
 8003114:	d51d      	bpl.n	8003152 <_puts_r+0x66>
 8003116:	6923      	ldr	r3, [r4, #16]
 8003118:	b1db      	cbz	r3, 8003152 <_puts_r+0x66>
 800311a:	3e01      	subs	r6, #1
 800311c:	68a3      	ldr	r3, [r4, #8]
 800311e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003122:	3b01      	subs	r3, #1
 8003124:	60a3      	str	r3, [r4, #8]
 8003126:	b9e9      	cbnz	r1, 8003164 <_puts_r+0x78>
 8003128:	2b00      	cmp	r3, #0
 800312a:	da2e      	bge.n	800318a <_puts_r+0x9e>
 800312c:	4622      	mov	r2, r4
 800312e:	210a      	movs	r1, #10
 8003130:	4628      	mov	r0, r5
 8003132:	f000 f83f 	bl	80031b4 <__swbuf_r>
 8003136:	3001      	adds	r0, #1
 8003138:	d011      	beq.n	800315e <_puts_r+0x72>
 800313a:	200a      	movs	r0, #10
 800313c:	e011      	b.n	8003162 <_puts_r+0x76>
 800313e:	4b17      	ldr	r3, [pc, #92]	; (800319c <_puts_r+0xb0>)
 8003140:	429c      	cmp	r4, r3
 8003142:	d101      	bne.n	8003148 <_puts_r+0x5c>
 8003144:	68ac      	ldr	r4, [r5, #8]
 8003146:	e7e3      	b.n	8003110 <_puts_r+0x24>
 8003148:	4b15      	ldr	r3, [pc, #84]	; (80031a0 <_puts_r+0xb4>)
 800314a:	429c      	cmp	r4, r3
 800314c:	bf08      	it	eq
 800314e:	68ec      	ldreq	r4, [r5, #12]
 8003150:	e7de      	b.n	8003110 <_puts_r+0x24>
 8003152:	4621      	mov	r1, r4
 8003154:	4628      	mov	r0, r5
 8003156:	f000 f87f 	bl	8003258 <__swsetup_r>
 800315a:	2800      	cmp	r0, #0
 800315c:	d0dd      	beq.n	800311a <_puts_r+0x2e>
 800315e:	f04f 30ff 	mov.w	r0, #4294967295
 8003162:	bd70      	pop	{r4, r5, r6, pc}
 8003164:	2b00      	cmp	r3, #0
 8003166:	da04      	bge.n	8003172 <_puts_r+0x86>
 8003168:	69a2      	ldr	r2, [r4, #24]
 800316a:	429a      	cmp	r2, r3
 800316c:	dc06      	bgt.n	800317c <_puts_r+0x90>
 800316e:	290a      	cmp	r1, #10
 8003170:	d004      	beq.n	800317c <_puts_r+0x90>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	1c5a      	adds	r2, r3, #1
 8003176:	6022      	str	r2, [r4, #0]
 8003178:	7019      	strb	r1, [r3, #0]
 800317a:	e7cf      	b.n	800311c <_puts_r+0x30>
 800317c:	4622      	mov	r2, r4
 800317e:	4628      	mov	r0, r5
 8003180:	f000 f818 	bl	80031b4 <__swbuf_r>
 8003184:	3001      	adds	r0, #1
 8003186:	d1c9      	bne.n	800311c <_puts_r+0x30>
 8003188:	e7e9      	b.n	800315e <_puts_r+0x72>
 800318a:	6823      	ldr	r3, [r4, #0]
 800318c:	200a      	movs	r0, #10
 800318e:	1c5a      	adds	r2, r3, #1
 8003190:	6022      	str	r2, [r4, #0]
 8003192:	7018      	strb	r0, [r3, #0]
 8003194:	e7e5      	b.n	8003162 <_puts_r+0x76>
 8003196:	bf00      	nop
 8003198:	08004344 	.word	0x08004344
 800319c:	08004364 	.word	0x08004364
 80031a0:	08004324 	.word	0x08004324

080031a4 <puts>:
 80031a4:	4b02      	ldr	r3, [pc, #8]	; (80031b0 <puts+0xc>)
 80031a6:	4601      	mov	r1, r0
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	f7ff bf9f 	b.w	80030ec <_puts_r>
 80031ae:	bf00      	nop
 80031b0:	20000560 	.word	0x20000560

080031b4 <__swbuf_r>:
 80031b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80031b6:	460e      	mov	r6, r1
 80031b8:	4614      	mov	r4, r2
 80031ba:	4605      	mov	r5, r0
 80031bc:	b118      	cbz	r0, 80031c6 <__swbuf_r+0x12>
 80031be:	6983      	ldr	r3, [r0, #24]
 80031c0:	b90b      	cbnz	r3, 80031c6 <__swbuf_r+0x12>
 80031c2:	f000 f9a7 	bl	8003514 <__sinit>
 80031c6:	4b21      	ldr	r3, [pc, #132]	; (800324c <__swbuf_r+0x98>)
 80031c8:	429c      	cmp	r4, r3
 80031ca:	d12a      	bne.n	8003222 <__swbuf_r+0x6e>
 80031cc:	686c      	ldr	r4, [r5, #4]
 80031ce:	69a3      	ldr	r3, [r4, #24]
 80031d0:	60a3      	str	r3, [r4, #8]
 80031d2:	89a3      	ldrh	r3, [r4, #12]
 80031d4:	071a      	lsls	r2, r3, #28
 80031d6:	d52e      	bpl.n	8003236 <__swbuf_r+0x82>
 80031d8:	6923      	ldr	r3, [r4, #16]
 80031da:	b363      	cbz	r3, 8003236 <__swbuf_r+0x82>
 80031dc:	6923      	ldr	r3, [r4, #16]
 80031de:	6820      	ldr	r0, [r4, #0]
 80031e0:	1ac0      	subs	r0, r0, r3
 80031e2:	6963      	ldr	r3, [r4, #20]
 80031e4:	b2f6      	uxtb	r6, r6
 80031e6:	4283      	cmp	r3, r0
 80031e8:	4637      	mov	r7, r6
 80031ea:	dc04      	bgt.n	80031f6 <__swbuf_r+0x42>
 80031ec:	4621      	mov	r1, r4
 80031ee:	4628      	mov	r0, r5
 80031f0:	f000 f926 	bl	8003440 <_fflush_r>
 80031f4:	bb28      	cbnz	r0, 8003242 <__swbuf_r+0x8e>
 80031f6:	68a3      	ldr	r3, [r4, #8]
 80031f8:	3b01      	subs	r3, #1
 80031fa:	60a3      	str	r3, [r4, #8]
 80031fc:	6823      	ldr	r3, [r4, #0]
 80031fe:	1c5a      	adds	r2, r3, #1
 8003200:	6022      	str	r2, [r4, #0]
 8003202:	701e      	strb	r6, [r3, #0]
 8003204:	6963      	ldr	r3, [r4, #20]
 8003206:	3001      	adds	r0, #1
 8003208:	4283      	cmp	r3, r0
 800320a:	d004      	beq.n	8003216 <__swbuf_r+0x62>
 800320c:	89a3      	ldrh	r3, [r4, #12]
 800320e:	07db      	lsls	r3, r3, #31
 8003210:	d519      	bpl.n	8003246 <__swbuf_r+0x92>
 8003212:	2e0a      	cmp	r6, #10
 8003214:	d117      	bne.n	8003246 <__swbuf_r+0x92>
 8003216:	4621      	mov	r1, r4
 8003218:	4628      	mov	r0, r5
 800321a:	f000 f911 	bl	8003440 <_fflush_r>
 800321e:	b190      	cbz	r0, 8003246 <__swbuf_r+0x92>
 8003220:	e00f      	b.n	8003242 <__swbuf_r+0x8e>
 8003222:	4b0b      	ldr	r3, [pc, #44]	; (8003250 <__swbuf_r+0x9c>)
 8003224:	429c      	cmp	r4, r3
 8003226:	d101      	bne.n	800322c <__swbuf_r+0x78>
 8003228:	68ac      	ldr	r4, [r5, #8]
 800322a:	e7d0      	b.n	80031ce <__swbuf_r+0x1a>
 800322c:	4b09      	ldr	r3, [pc, #36]	; (8003254 <__swbuf_r+0xa0>)
 800322e:	429c      	cmp	r4, r3
 8003230:	bf08      	it	eq
 8003232:	68ec      	ldreq	r4, [r5, #12]
 8003234:	e7cb      	b.n	80031ce <__swbuf_r+0x1a>
 8003236:	4621      	mov	r1, r4
 8003238:	4628      	mov	r0, r5
 800323a:	f000 f80d 	bl	8003258 <__swsetup_r>
 800323e:	2800      	cmp	r0, #0
 8003240:	d0cc      	beq.n	80031dc <__swbuf_r+0x28>
 8003242:	f04f 37ff 	mov.w	r7, #4294967295
 8003246:	4638      	mov	r0, r7
 8003248:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800324a:	bf00      	nop
 800324c:	08004344 	.word	0x08004344
 8003250:	08004364 	.word	0x08004364
 8003254:	08004324 	.word	0x08004324

08003258 <__swsetup_r>:
 8003258:	4b32      	ldr	r3, [pc, #200]	; (8003324 <__swsetup_r+0xcc>)
 800325a:	b570      	push	{r4, r5, r6, lr}
 800325c:	681d      	ldr	r5, [r3, #0]
 800325e:	4606      	mov	r6, r0
 8003260:	460c      	mov	r4, r1
 8003262:	b125      	cbz	r5, 800326e <__swsetup_r+0x16>
 8003264:	69ab      	ldr	r3, [r5, #24]
 8003266:	b913      	cbnz	r3, 800326e <__swsetup_r+0x16>
 8003268:	4628      	mov	r0, r5
 800326a:	f000 f953 	bl	8003514 <__sinit>
 800326e:	4b2e      	ldr	r3, [pc, #184]	; (8003328 <__swsetup_r+0xd0>)
 8003270:	429c      	cmp	r4, r3
 8003272:	d10f      	bne.n	8003294 <__swsetup_r+0x3c>
 8003274:	686c      	ldr	r4, [r5, #4]
 8003276:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800327a:	b29a      	uxth	r2, r3
 800327c:	0715      	lsls	r5, r2, #28
 800327e:	d42c      	bmi.n	80032da <__swsetup_r+0x82>
 8003280:	06d0      	lsls	r0, r2, #27
 8003282:	d411      	bmi.n	80032a8 <__swsetup_r+0x50>
 8003284:	2209      	movs	r2, #9
 8003286:	6032      	str	r2, [r6, #0]
 8003288:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800328c:	81a3      	strh	r3, [r4, #12]
 800328e:	f04f 30ff 	mov.w	r0, #4294967295
 8003292:	e03e      	b.n	8003312 <__swsetup_r+0xba>
 8003294:	4b25      	ldr	r3, [pc, #148]	; (800332c <__swsetup_r+0xd4>)
 8003296:	429c      	cmp	r4, r3
 8003298:	d101      	bne.n	800329e <__swsetup_r+0x46>
 800329a:	68ac      	ldr	r4, [r5, #8]
 800329c:	e7eb      	b.n	8003276 <__swsetup_r+0x1e>
 800329e:	4b24      	ldr	r3, [pc, #144]	; (8003330 <__swsetup_r+0xd8>)
 80032a0:	429c      	cmp	r4, r3
 80032a2:	bf08      	it	eq
 80032a4:	68ec      	ldreq	r4, [r5, #12]
 80032a6:	e7e6      	b.n	8003276 <__swsetup_r+0x1e>
 80032a8:	0751      	lsls	r1, r2, #29
 80032aa:	d512      	bpl.n	80032d2 <__swsetup_r+0x7a>
 80032ac:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80032ae:	b141      	cbz	r1, 80032c2 <__swsetup_r+0x6a>
 80032b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80032b4:	4299      	cmp	r1, r3
 80032b6:	d002      	beq.n	80032be <__swsetup_r+0x66>
 80032b8:	4630      	mov	r0, r6
 80032ba:	f000 fa19 	bl	80036f0 <_free_r>
 80032be:	2300      	movs	r3, #0
 80032c0:	6363      	str	r3, [r4, #52]	; 0x34
 80032c2:	89a3      	ldrh	r3, [r4, #12]
 80032c4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80032c8:	81a3      	strh	r3, [r4, #12]
 80032ca:	2300      	movs	r3, #0
 80032cc:	6063      	str	r3, [r4, #4]
 80032ce:	6923      	ldr	r3, [r4, #16]
 80032d0:	6023      	str	r3, [r4, #0]
 80032d2:	89a3      	ldrh	r3, [r4, #12]
 80032d4:	f043 0308 	orr.w	r3, r3, #8
 80032d8:	81a3      	strh	r3, [r4, #12]
 80032da:	6923      	ldr	r3, [r4, #16]
 80032dc:	b94b      	cbnz	r3, 80032f2 <__swsetup_r+0x9a>
 80032de:	89a3      	ldrh	r3, [r4, #12]
 80032e0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80032e4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032e8:	d003      	beq.n	80032f2 <__swsetup_r+0x9a>
 80032ea:	4621      	mov	r1, r4
 80032ec:	4630      	mov	r0, r6
 80032ee:	f000 f9bf 	bl	8003670 <__smakebuf_r>
 80032f2:	89a2      	ldrh	r2, [r4, #12]
 80032f4:	f012 0301 	ands.w	r3, r2, #1
 80032f8:	d00c      	beq.n	8003314 <__swsetup_r+0xbc>
 80032fa:	2300      	movs	r3, #0
 80032fc:	60a3      	str	r3, [r4, #8]
 80032fe:	6963      	ldr	r3, [r4, #20]
 8003300:	425b      	negs	r3, r3
 8003302:	61a3      	str	r3, [r4, #24]
 8003304:	6923      	ldr	r3, [r4, #16]
 8003306:	b953      	cbnz	r3, 800331e <__swsetup_r+0xc6>
 8003308:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800330c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8003310:	d1ba      	bne.n	8003288 <__swsetup_r+0x30>
 8003312:	bd70      	pop	{r4, r5, r6, pc}
 8003314:	0792      	lsls	r2, r2, #30
 8003316:	bf58      	it	pl
 8003318:	6963      	ldrpl	r3, [r4, #20]
 800331a:	60a3      	str	r3, [r4, #8]
 800331c:	e7f2      	b.n	8003304 <__swsetup_r+0xac>
 800331e:	2000      	movs	r0, #0
 8003320:	e7f7      	b.n	8003312 <__swsetup_r+0xba>
 8003322:	bf00      	nop
 8003324:	20000560 	.word	0x20000560
 8003328:	08004344 	.word	0x08004344
 800332c:	08004364 	.word	0x08004364
 8003330:	08004324 	.word	0x08004324

08003334 <__sflush_r>:
 8003334:	898a      	ldrh	r2, [r1, #12]
 8003336:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800333a:	4605      	mov	r5, r0
 800333c:	0710      	lsls	r0, r2, #28
 800333e:	460c      	mov	r4, r1
 8003340:	d458      	bmi.n	80033f4 <__sflush_r+0xc0>
 8003342:	684b      	ldr	r3, [r1, #4]
 8003344:	2b00      	cmp	r3, #0
 8003346:	dc05      	bgt.n	8003354 <__sflush_r+0x20>
 8003348:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800334a:	2b00      	cmp	r3, #0
 800334c:	dc02      	bgt.n	8003354 <__sflush_r+0x20>
 800334e:	2000      	movs	r0, #0
 8003350:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003354:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003356:	2e00      	cmp	r6, #0
 8003358:	d0f9      	beq.n	800334e <__sflush_r+0x1a>
 800335a:	2300      	movs	r3, #0
 800335c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003360:	682f      	ldr	r7, [r5, #0]
 8003362:	6a21      	ldr	r1, [r4, #32]
 8003364:	602b      	str	r3, [r5, #0]
 8003366:	d032      	beq.n	80033ce <__sflush_r+0x9a>
 8003368:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800336a:	89a3      	ldrh	r3, [r4, #12]
 800336c:	075a      	lsls	r2, r3, #29
 800336e:	d505      	bpl.n	800337c <__sflush_r+0x48>
 8003370:	6863      	ldr	r3, [r4, #4]
 8003372:	1ac0      	subs	r0, r0, r3
 8003374:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003376:	b10b      	cbz	r3, 800337c <__sflush_r+0x48>
 8003378:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800337a:	1ac0      	subs	r0, r0, r3
 800337c:	2300      	movs	r3, #0
 800337e:	4602      	mov	r2, r0
 8003380:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003382:	6a21      	ldr	r1, [r4, #32]
 8003384:	4628      	mov	r0, r5
 8003386:	47b0      	blx	r6
 8003388:	1c43      	adds	r3, r0, #1
 800338a:	89a3      	ldrh	r3, [r4, #12]
 800338c:	d106      	bne.n	800339c <__sflush_r+0x68>
 800338e:	6829      	ldr	r1, [r5, #0]
 8003390:	291d      	cmp	r1, #29
 8003392:	d848      	bhi.n	8003426 <__sflush_r+0xf2>
 8003394:	4a29      	ldr	r2, [pc, #164]	; (800343c <__sflush_r+0x108>)
 8003396:	40ca      	lsrs	r2, r1
 8003398:	07d6      	lsls	r6, r2, #31
 800339a:	d544      	bpl.n	8003426 <__sflush_r+0xf2>
 800339c:	2200      	movs	r2, #0
 800339e:	6062      	str	r2, [r4, #4]
 80033a0:	04d9      	lsls	r1, r3, #19
 80033a2:	6922      	ldr	r2, [r4, #16]
 80033a4:	6022      	str	r2, [r4, #0]
 80033a6:	d504      	bpl.n	80033b2 <__sflush_r+0x7e>
 80033a8:	1c42      	adds	r2, r0, #1
 80033aa:	d101      	bne.n	80033b0 <__sflush_r+0x7c>
 80033ac:	682b      	ldr	r3, [r5, #0]
 80033ae:	b903      	cbnz	r3, 80033b2 <__sflush_r+0x7e>
 80033b0:	6560      	str	r0, [r4, #84]	; 0x54
 80033b2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80033b4:	602f      	str	r7, [r5, #0]
 80033b6:	2900      	cmp	r1, #0
 80033b8:	d0c9      	beq.n	800334e <__sflush_r+0x1a>
 80033ba:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80033be:	4299      	cmp	r1, r3
 80033c0:	d002      	beq.n	80033c8 <__sflush_r+0x94>
 80033c2:	4628      	mov	r0, r5
 80033c4:	f000 f994 	bl	80036f0 <_free_r>
 80033c8:	2000      	movs	r0, #0
 80033ca:	6360      	str	r0, [r4, #52]	; 0x34
 80033cc:	e7c0      	b.n	8003350 <__sflush_r+0x1c>
 80033ce:	2301      	movs	r3, #1
 80033d0:	4628      	mov	r0, r5
 80033d2:	47b0      	blx	r6
 80033d4:	1c41      	adds	r1, r0, #1
 80033d6:	d1c8      	bne.n	800336a <__sflush_r+0x36>
 80033d8:	682b      	ldr	r3, [r5, #0]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0c5      	beq.n	800336a <__sflush_r+0x36>
 80033de:	2b1d      	cmp	r3, #29
 80033e0:	d001      	beq.n	80033e6 <__sflush_r+0xb2>
 80033e2:	2b16      	cmp	r3, #22
 80033e4:	d101      	bne.n	80033ea <__sflush_r+0xb6>
 80033e6:	602f      	str	r7, [r5, #0]
 80033e8:	e7b1      	b.n	800334e <__sflush_r+0x1a>
 80033ea:	89a3      	ldrh	r3, [r4, #12]
 80033ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80033f0:	81a3      	strh	r3, [r4, #12]
 80033f2:	e7ad      	b.n	8003350 <__sflush_r+0x1c>
 80033f4:	690f      	ldr	r7, [r1, #16]
 80033f6:	2f00      	cmp	r7, #0
 80033f8:	d0a9      	beq.n	800334e <__sflush_r+0x1a>
 80033fa:	0793      	lsls	r3, r2, #30
 80033fc:	680e      	ldr	r6, [r1, #0]
 80033fe:	bf08      	it	eq
 8003400:	694b      	ldreq	r3, [r1, #20]
 8003402:	600f      	str	r7, [r1, #0]
 8003404:	bf18      	it	ne
 8003406:	2300      	movne	r3, #0
 8003408:	eba6 0807 	sub.w	r8, r6, r7
 800340c:	608b      	str	r3, [r1, #8]
 800340e:	f1b8 0f00 	cmp.w	r8, #0
 8003412:	dd9c      	ble.n	800334e <__sflush_r+0x1a>
 8003414:	4643      	mov	r3, r8
 8003416:	463a      	mov	r2, r7
 8003418:	6a21      	ldr	r1, [r4, #32]
 800341a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800341c:	4628      	mov	r0, r5
 800341e:	47b0      	blx	r6
 8003420:	2800      	cmp	r0, #0
 8003422:	dc06      	bgt.n	8003432 <__sflush_r+0xfe>
 8003424:	89a3      	ldrh	r3, [r4, #12]
 8003426:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800342a:	81a3      	strh	r3, [r4, #12]
 800342c:	f04f 30ff 	mov.w	r0, #4294967295
 8003430:	e78e      	b.n	8003350 <__sflush_r+0x1c>
 8003432:	4407      	add	r7, r0
 8003434:	eba8 0800 	sub.w	r8, r8, r0
 8003438:	e7e9      	b.n	800340e <__sflush_r+0xda>
 800343a:	bf00      	nop
 800343c:	20400001 	.word	0x20400001

08003440 <_fflush_r>:
 8003440:	b538      	push	{r3, r4, r5, lr}
 8003442:	690b      	ldr	r3, [r1, #16]
 8003444:	4605      	mov	r5, r0
 8003446:	460c      	mov	r4, r1
 8003448:	b1db      	cbz	r3, 8003482 <_fflush_r+0x42>
 800344a:	b118      	cbz	r0, 8003454 <_fflush_r+0x14>
 800344c:	6983      	ldr	r3, [r0, #24]
 800344e:	b90b      	cbnz	r3, 8003454 <_fflush_r+0x14>
 8003450:	f000 f860 	bl	8003514 <__sinit>
 8003454:	4b0c      	ldr	r3, [pc, #48]	; (8003488 <_fflush_r+0x48>)
 8003456:	429c      	cmp	r4, r3
 8003458:	d109      	bne.n	800346e <_fflush_r+0x2e>
 800345a:	686c      	ldr	r4, [r5, #4]
 800345c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003460:	b17b      	cbz	r3, 8003482 <_fflush_r+0x42>
 8003462:	4621      	mov	r1, r4
 8003464:	4628      	mov	r0, r5
 8003466:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800346a:	f7ff bf63 	b.w	8003334 <__sflush_r>
 800346e:	4b07      	ldr	r3, [pc, #28]	; (800348c <_fflush_r+0x4c>)
 8003470:	429c      	cmp	r4, r3
 8003472:	d101      	bne.n	8003478 <_fflush_r+0x38>
 8003474:	68ac      	ldr	r4, [r5, #8]
 8003476:	e7f1      	b.n	800345c <_fflush_r+0x1c>
 8003478:	4b05      	ldr	r3, [pc, #20]	; (8003490 <_fflush_r+0x50>)
 800347a:	429c      	cmp	r4, r3
 800347c:	bf08      	it	eq
 800347e:	68ec      	ldreq	r4, [r5, #12]
 8003480:	e7ec      	b.n	800345c <_fflush_r+0x1c>
 8003482:	2000      	movs	r0, #0
 8003484:	bd38      	pop	{r3, r4, r5, pc}
 8003486:	bf00      	nop
 8003488:	08004344 	.word	0x08004344
 800348c:	08004364 	.word	0x08004364
 8003490:	08004324 	.word	0x08004324

08003494 <std>:
 8003494:	2300      	movs	r3, #0
 8003496:	b510      	push	{r4, lr}
 8003498:	4604      	mov	r4, r0
 800349a:	e9c0 3300 	strd	r3, r3, [r0]
 800349e:	6083      	str	r3, [r0, #8]
 80034a0:	8181      	strh	r1, [r0, #12]
 80034a2:	6643      	str	r3, [r0, #100]	; 0x64
 80034a4:	81c2      	strh	r2, [r0, #14]
 80034a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80034aa:	6183      	str	r3, [r0, #24]
 80034ac:	4619      	mov	r1, r3
 80034ae:	2208      	movs	r2, #8
 80034b0:	305c      	adds	r0, #92	; 0x5c
 80034b2:	f7ff fdfb 	bl	80030ac <memset>
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <std+0x38>)
 80034b8:	6263      	str	r3, [r4, #36]	; 0x24
 80034ba:	4b05      	ldr	r3, [pc, #20]	; (80034d0 <std+0x3c>)
 80034bc:	62a3      	str	r3, [r4, #40]	; 0x28
 80034be:	4b05      	ldr	r3, [pc, #20]	; (80034d4 <std+0x40>)
 80034c0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80034c2:	4b05      	ldr	r3, [pc, #20]	; (80034d8 <std+0x44>)
 80034c4:	6224      	str	r4, [r4, #32]
 80034c6:	6323      	str	r3, [r4, #48]	; 0x30
 80034c8:	bd10      	pop	{r4, pc}
 80034ca:	bf00      	nop
 80034cc:	08003df1 	.word	0x08003df1
 80034d0:	08003e13 	.word	0x08003e13
 80034d4:	08003e4b 	.word	0x08003e4b
 80034d8:	08003e6f 	.word	0x08003e6f

080034dc <_cleanup_r>:
 80034dc:	4901      	ldr	r1, [pc, #4]	; (80034e4 <_cleanup_r+0x8>)
 80034de:	f000 b885 	b.w	80035ec <_fwalk_reent>
 80034e2:	bf00      	nop
 80034e4:	08003441 	.word	0x08003441

080034e8 <__sfmoreglue>:
 80034e8:	b570      	push	{r4, r5, r6, lr}
 80034ea:	1e4a      	subs	r2, r1, #1
 80034ec:	2568      	movs	r5, #104	; 0x68
 80034ee:	4355      	muls	r5, r2
 80034f0:	460e      	mov	r6, r1
 80034f2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80034f6:	f000 f949 	bl	800378c <_malloc_r>
 80034fa:	4604      	mov	r4, r0
 80034fc:	b140      	cbz	r0, 8003510 <__sfmoreglue+0x28>
 80034fe:	2100      	movs	r1, #0
 8003500:	e9c0 1600 	strd	r1, r6, [r0]
 8003504:	300c      	adds	r0, #12
 8003506:	60a0      	str	r0, [r4, #8]
 8003508:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800350c:	f7ff fdce 	bl	80030ac <memset>
 8003510:	4620      	mov	r0, r4
 8003512:	bd70      	pop	{r4, r5, r6, pc}

08003514 <__sinit>:
 8003514:	6983      	ldr	r3, [r0, #24]
 8003516:	b510      	push	{r4, lr}
 8003518:	4604      	mov	r4, r0
 800351a:	bb33      	cbnz	r3, 800356a <__sinit+0x56>
 800351c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003520:	6503      	str	r3, [r0, #80]	; 0x50
 8003522:	4b12      	ldr	r3, [pc, #72]	; (800356c <__sinit+0x58>)
 8003524:	4a12      	ldr	r2, [pc, #72]	; (8003570 <__sinit+0x5c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6282      	str	r2, [r0, #40]	; 0x28
 800352a:	4298      	cmp	r0, r3
 800352c:	bf04      	itt	eq
 800352e:	2301      	moveq	r3, #1
 8003530:	6183      	streq	r3, [r0, #24]
 8003532:	f000 f81f 	bl	8003574 <__sfp>
 8003536:	6060      	str	r0, [r4, #4]
 8003538:	4620      	mov	r0, r4
 800353a:	f000 f81b 	bl	8003574 <__sfp>
 800353e:	60a0      	str	r0, [r4, #8]
 8003540:	4620      	mov	r0, r4
 8003542:	f000 f817 	bl	8003574 <__sfp>
 8003546:	2200      	movs	r2, #0
 8003548:	60e0      	str	r0, [r4, #12]
 800354a:	2104      	movs	r1, #4
 800354c:	6860      	ldr	r0, [r4, #4]
 800354e:	f7ff ffa1 	bl	8003494 <std>
 8003552:	2201      	movs	r2, #1
 8003554:	2109      	movs	r1, #9
 8003556:	68a0      	ldr	r0, [r4, #8]
 8003558:	f7ff ff9c 	bl	8003494 <std>
 800355c:	2202      	movs	r2, #2
 800355e:	2112      	movs	r1, #18
 8003560:	68e0      	ldr	r0, [r4, #12]
 8003562:	f7ff ff97 	bl	8003494 <std>
 8003566:	2301      	movs	r3, #1
 8003568:	61a3      	str	r3, [r4, #24]
 800356a:	bd10      	pop	{r4, pc}
 800356c:	08004320 	.word	0x08004320
 8003570:	080034dd 	.word	0x080034dd

08003574 <__sfp>:
 8003574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003576:	4b1b      	ldr	r3, [pc, #108]	; (80035e4 <__sfp+0x70>)
 8003578:	681e      	ldr	r6, [r3, #0]
 800357a:	69b3      	ldr	r3, [r6, #24]
 800357c:	4607      	mov	r7, r0
 800357e:	b913      	cbnz	r3, 8003586 <__sfp+0x12>
 8003580:	4630      	mov	r0, r6
 8003582:	f7ff ffc7 	bl	8003514 <__sinit>
 8003586:	3648      	adds	r6, #72	; 0x48
 8003588:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800358c:	3b01      	subs	r3, #1
 800358e:	d503      	bpl.n	8003598 <__sfp+0x24>
 8003590:	6833      	ldr	r3, [r6, #0]
 8003592:	b133      	cbz	r3, 80035a2 <__sfp+0x2e>
 8003594:	6836      	ldr	r6, [r6, #0]
 8003596:	e7f7      	b.n	8003588 <__sfp+0x14>
 8003598:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800359c:	b16d      	cbz	r5, 80035ba <__sfp+0x46>
 800359e:	3468      	adds	r4, #104	; 0x68
 80035a0:	e7f4      	b.n	800358c <__sfp+0x18>
 80035a2:	2104      	movs	r1, #4
 80035a4:	4638      	mov	r0, r7
 80035a6:	f7ff ff9f 	bl	80034e8 <__sfmoreglue>
 80035aa:	6030      	str	r0, [r6, #0]
 80035ac:	2800      	cmp	r0, #0
 80035ae:	d1f1      	bne.n	8003594 <__sfp+0x20>
 80035b0:	230c      	movs	r3, #12
 80035b2:	603b      	str	r3, [r7, #0]
 80035b4:	4604      	mov	r4, r0
 80035b6:	4620      	mov	r0, r4
 80035b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80035ba:	4b0b      	ldr	r3, [pc, #44]	; (80035e8 <__sfp+0x74>)
 80035bc:	6665      	str	r5, [r4, #100]	; 0x64
 80035be:	e9c4 5500 	strd	r5, r5, [r4]
 80035c2:	60a5      	str	r5, [r4, #8]
 80035c4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80035c8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80035cc:	2208      	movs	r2, #8
 80035ce:	4629      	mov	r1, r5
 80035d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80035d4:	f7ff fd6a 	bl	80030ac <memset>
 80035d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80035dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80035e0:	e7e9      	b.n	80035b6 <__sfp+0x42>
 80035e2:	bf00      	nop
 80035e4:	08004320 	.word	0x08004320
 80035e8:	ffff0001 	.word	0xffff0001

080035ec <_fwalk_reent>:
 80035ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80035f0:	4680      	mov	r8, r0
 80035f2:	4689      	mov	r9, r1
 80035f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80035f8:	2600      	movs	r6, #0
 80035fa:	b914      	cbnz	r4, 8003602 <_fwalk_reent+0x16>
 80035fc:	4630      	mov	r0, r6
 80035fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003602:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8003606:	3f01      	subs	r7, #1
 8003608:	d501      	bpl.n	800360e <_fwalk_reent+0x22>
 800360a:	6824      	ldr	r4, [r4, #0]
 800360c:	e7f5      	b.n	80035fa <_fwalk_reent+0xe>
 800360e:	89ab      	ldrh	r3, [r5, #12]
 8003610:	2b01      	cmp	r3, #1
 8003612:	d907      	bls.n	8003624 <_fwalk_reent+0x38>
 8003614:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003618:	3301      	adds	r3, #1
 800361a:	d003      	beq.n	8003624 <_fwalk_reent+0x38>
 800361c:	4629      	mov	r1, r5
 800361e:	4640      	mov	r0, r8
 8003620:	47c8      	blx	r9
 8003622:	4306      	orrs	r6, r0
 8003624:	3568      	adds	r5, #104	; 0x68
 8003626:	e7ee      	b.n	8003606 <_fwalk_reent+0x1a>

08003628 <__swhatbuf_r>:
 8003628:	b570      	push	{r4, r5, r6, lr}
 800362a:	460e      	mov	r6, r1
 800362c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003630:	2900      	cmp	r1, #0
 8003632:	b096      	sub	sp, #88	; 0x58
 8003634:	4614      	mov	r4, r2
 8003636:	461d      	mov	r5, r3
 8003638:	da07      	bge.n	800364a <__swhatbuf_r+0x22>
 800363a:	2300      	movs	r3, #0
 800363c:	602b      	str	r3, [r5, #0]
 800363e:	89b3      	ldrh	r3, [r6, #12]
 8003640:	061a      	lsls	r2, r3, #24
 8003642:	d410      	bmi.n	8003666 <__swhatbuf_r+0x3e>
 8003644:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003648:	e00e      	b.n	8003668 <__swhatbuf_r+0x40>
 800364a:	466a      	mov	r2, sp
 800364c:	f000 fc36 	bl	8003ebc <_fstat_r>
 8003650:	2800      	cmp	r0, #0
 8003652:	dbf2      	blt.n	800363a <__swhatbuf_r+0x12>
 8003654:	9a01      	ldr	r2, [sp, #4]
 8003656:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800365a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800365e:	425a      	negs	r2, r3
 8003660:	415a      	adcs	r2, r3
 8003662:	602a      	str	r2, [r5, #0]
 8003664:	e7ee      	b.n	8003644 <__swhatbuf_r+0x1c>
 8003666:	2340      	movs	r3, #64	; 0x40
 8003668:	2000      	movs	r0, #0
 800366a:	6023      	str	r3, [r4, #0]
 800366c:	b016      	add	sp, #88	; 0x58
 800366e:	bd70      	pop	{r4, r5, r6, pc}

08003670 <__smakebuf_r>:
 8003670:	898b      	ldrh	r3, [r1, #12]
 8003672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003674:	079d      	lsls	r5, r3, #30
 8003676:	4606      	mov	r6, r0
 8003678:	460c      	mov	r4, r1
 800367a:	d507      	bpl.n	800368c <__smakebuf_r+0x1c>
 800367c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003680:	6023      	str	r3, [r4, #0]
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	2301      	movs	r3, #1
 8003686:	6163      	str	r3, [r4, #20]
 8003688:	b002      	add	sp, #8
 800368a:	bd70      	pop	{r4, r5, r6, pc}
 800368c:	ab01      	add	r3, sp, #4
 800368e:	466a      	mov	r2, sp
 8003690:	f7ff ffca 	bl	8003628 <__swhatbuf_r>
 8003694:	9900      	ldr	r1, [sp, #0]
 8003696:	4605      	mov	r5, r0
 8003698:	4630      	mov	r0, r6
 800369a:	f000 f877 	bl	800378c <_malloc_r>
 800369e:	b948      	cbnz	r0, 80036b4 <__smakebuf_r+0x44>
 80036a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80036a4:	059a      	lsls	r2, r3, #22
 80036a6:	d4ef      	bmi.n	8003688 <__smakebuf_r+0x18>
 80036a8:	f023 0303 	bic.w	r3, r3, #3
 80036ac:	f043 0302 	orr.w	r3, r3, #2
 80036b0:	81a3      	strh	r3, [r4, #12]
 80036b2:	e7e3      	b.n	800367c <__smakebuf_r+0xc>
 80036b4:	4b0d      	ldr	r3, [pc, #52]	; (80036ec <__smakebuf_r+0x7c>)
 80036b6:	62b3      	str	r3, [r6, #40]	; 0x28
 80036b8:	89a3      	ldrh	r3, [r4, #12]
 80036ba:	6020      	str	r0, [r4, #0]
 80036bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80036c0:	81a3      	strh	r3, [r4, #12]
 80036c2:	9b00      	ldr	r3, [sp, #0]
 80036c4:	6163      	str	r3, [r4, #20]
 80036c6:	9b01      	ldr	r3, [sp, #4]
 80036c8:	6120      	str	r0, [r4, #16]
 80036ca:	b15b      	cbz	r3, 80036e4 <__smakebuf_r+0x74>
 80036cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036d0:	4630      	mov	r0, r6
 80036d2:	f000 fc05 	bl	8003ee0 <_isatty_r>
 80036d6:	b128      	cbz	r0, 80036e4 <__smakebuf_r+0x74>
 80036d8:	89a3      	ldrh	r3, [r4, #12]
 80036da:	f023 0303 	bic.w	r3, r3, #3
 80036de:	f043 0301 	orr.w	r3, r3, #1
 80036e2:	81a3      	strh	r3, [r4, #12]
 80036e4:	89a3      	ldrh	r3, [r4, #12]
 80036e6:	431d      	orrs	r5, r3
 80036e8:	81a5      	strh	r5, [r4, #12]
 80036ea:	e7cd      	b.n	8003688 <__smakebuf_r+0x18>
 80036ec:	080034dd 	.word	0x080034dd

080036f0 <_free_r>:
 80036f0:	b538      	push	{r3, r4, r5, lr}
 80036f2:	4605      	mov	r5, r0
 80036f4:	2900      	cmp	r1, #0
 80036f6:	d045      	beq.n	8003784 <_free_r+0x94>
 80036f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80036fc:	1f0c      	subs	r4, r1, #4
 80036fe:	2b00      	cmp	r3, #0
 8003700:	bfb8      	it	lt
 8003702:	18e4      	addlt	r4, r4, r3
 8003704:	f000 fc0e 	bl	8003f24 <__malloc_lock>
 8003708:	4a1f      	ldr	r2, [pc, #124]	; (8003788 <_free_r+0x98>)
 800370a:	6813      	ldr	r3, [r2, #0]
 800370c:	4610      	mov	r0, r2
 800370e:	b933      	cbnz	r3, 800371e <_free_r+0x2e>
 8003710:	6063      	str	r3, [r4, #4]
 8003712:	6014      	str	r4, [r2, #0]
 8003714:	4628      	mov	r0, r5
 8003716:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800371a:	f000 bc04 	b.w	8003f26 <__malloc_unlock>
 800371e:	42a3      	cmp	r3, r4
 8003720:	d90c      	bls.n	800373c <_free_r+0x4c>
 8003722:	6821      	ldr	r1, [r4, #0]
 8003724:	1862      	adds	r2, r4, r1
 8003726:	4293      	cmp	r3, r2
 8003728:	bf04      	itt	eq
 800372a:	681a      	ldreq	r2, [r3, #0]
 800372c:	685b      	ldreq	r3, [r3, #4]
 800372e:	6063      	str	r3, [r4, #4]
 8003730:	bf04      	itt	eq
 8003732:	1852      	addeq	r2, r2, r1
 8003734:	6022      	streq	r2, [r4, #0]
 8003736:	6004      	str	r4, [r0, #0]
 8003738:	e7ec      	b.n	8003714 <_free_r+0x24>
 800373a:	4613      	mov	r3, r2
 800373c:	685a      	ldr	r2, [r3, #4]
 800373e:	b10a      	cbz	r2, 8003744 <_free_r+0x54>
 8003740:	42a2      	cmp	r2, r4
 8003742:	d9fa      	bls.n	800373a <_free_r+0x4a>
 8003744:	6819      	ldr	r1, [r3, #0]
 8003746:	1858      	adds	r0, r3, r1
 8003748:	42a0      	cmp	r0, r4
 800374a:	d10b      	bne.n	8003764 <_free_r+0x74>
 800374c:	6820      	ldr	r0, [r4, #0]
 800374e:	4401      	add	r1, r0
 8003750:	1858      	adds	r0, r3, r1
 8003752:	4282      	cmp	r2, r0
 8003754:	6019      	str	r1, [r3, #0]
 8003756:	d1dd      	bne.n	8003714 <_free_r+0x24>
 8003758:	6810      	ldr	r0, [r2, #0]
 800375a:	6852      	ldr	r2, [r2, #4]
 800375c:	605a      	str	r2, [r3, #4]
 800375e:	4401      	add	r1, r0
 8003760:	6019      	str	r1, [r3, #0]
 8003762:	e7d7      	b.n	8003714 <_free_r+0x24>
 8003764:	d902      	bls.n	800376c <_free_r+0x7c>
 8003766:	230c      	movs	r3, #12
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	e7d3      	b.n	8003714 <_free_r+0x24>
 800376c:	6820      	ldr	r0, [r4, #0]
 800376e:	1821      	adds	r1, r4, r0
 8003770:	428a      	cmp	r2, r1
 8003772:	bf04      	itt	eq
 8003774:	6811      	ldreq	r1, [r2, #0]
 8003776:	6852      	ldreq	r2, [r2, #4]
 8003778:	6062      	str	r2, [r4, #4]
 800377a:	bf04      	itt	eq
 800377c:	1809      	addeq	r1, r1, r0
 800377e:	6021      	streq	r1, [r4, #0]
 8003780:	605c      	str	r4, [r3, #4]
 8003782:	e7c7      	b.n	8003714 <_free_r+0x24>
 8003784:	bd38      	pop	{r3, r4, r5, pc}
 8003786:	bf00      	nop
 8003788:	200005f8 	.word	0x200005f8

0800378c <_malloc_r>:
 800378c:	b570      	push	{r4, r5, r6, lr}
 800378e:	1ccd      	adds	r5, r1, #3
 8003790:	f025 0503 	bic.w	r5, r5, #3
 8003794:	3508      	adds	r5, #8
 8003796:	2d0c      	cmp	r5, #12
 8003798:	bf38      	it	cc
 800379a:	250c      	movcc	r5, #12
 800379c:	2d00      	cmp	r5, #0
 800379e:	4606      	mov	r6, r0
 80037a0:	db01      	blt.n	80037a6 <_malloc_r+0x1a>
 80037a2:	42a9      	cmp	r1, r5
 80037a4:	d903      	bls.n	80037ae <_malloc_r+0x22>
 80037a6:	230c      	movs	r3, #12
 80037a8:	6033      	str	r3, [r6, #0]
 80037aa:	2000      	movs	r0, #0
 80037ac:	bd70      	pop	{r4, r5, r6, pc}
 80037ae:	f000 fbb9 	bl	8003f24 <__malloc_lock>
 80037b2:	4a21      	ldr	r2, [pc, #132]	; (8003838 <_malloc_r+0xac>)
 80037b4:	6814      	ldr	r4, [r2, #0]
 80037b6:	4621      	mov	r1, r4
 80037b8:	b991      	cbnz	r1, 80037e0 <_malloc_r+0x54>
 80037ba:	4c20      	ldr	r4, [pc, #128]	; (800383c <_malloc_r+0xb0>)
 80037bc:	6823      	ldr	r3, [r4, #0]
 80037be:	b91b      	cbnz	r3, 80037c8 <_malloc_r+0x3c>
 80037c0:	4630      	mov	r0, r6
 80037c2:	f000 fb05 	bl	8003dd0 <_sbrk_r>
 80037c6:	6020      	str	r0, [r4, #0]
 80037c8:	4629      	mov	r1, r5
 80037ca:	4630      	mov	r0, r6
 80037cc:	f000 fb00 	bl	8003dd0 <_sbrk_r>
 80037d0:	1c43      	adds	r3, r0, #1
 80037d2:	d124      	bne.n	800381e <_malloc_r+0x92>
 80037d4:	230c      	movs	r3, #12
 80037d6:	6033      	str	r3, [r6, #0]
 80037d8:	4630      	mov	r0, r6
 80037da:	f000 fba4 	bl	8003f26 <__malloc_unlock>
 80037de:	e7e4      	b.n	80037aa <_malloc_r+0x1e>
 80037e0:	680b      	ldr	r3, [r1, #0]
 80037e2:	1b5b      	subs	r3, r3, r5
 80037e4:	d418      	bmi.n	8003818 <_malloc_r+0x8c>
 80037e6:	2b0b      	cmp	r3, #11
 80037e8:	d90f      	bls.n	800380a <_malloc_r+0x7e>
 80037ea:	600b      	str	r3, [r1, #0]
 80037ec:	50cd      	str	r5, [r1, r3]
 80037ee:	18cc      	adds	r4, r1, r3
 80037f0:	4630      	mov	r0, r6
 80037f2:	f000 fb98 	bl	8003f26 <__malloc_unlock>
 80037f6:	f104 000b 	add.w	r0, r4, #11
 80037fa:	1d23      	adds	r3, r4, #4
 80037fc:	f020 0007 	bic.w	r0, r0, #7
 8003800:	1ac3      	subs	r3, r0, r3
 8003802:	d0d3      	beq.n	80037ac <_malloc_r+0x20>
 8003804:	425a      	negs	r2, r3
 8003806:	50e2      	str	r2, [r4, r3]
 8003808:	e7d0      	b.n	80037ac <_malloc_r+0x20>
 800380a:	428c      	cmp	r4, r1
 800380c:	684b      	ldr	r3, [r1, #4]
 800380e:	bf16      	itet	ne
 8003810:	6063      	strne	r3, [r4, #4]
 8003812:	6013      	streq	r3, [r2, #0]
 8003814:	460c      	movne	r4, r1
 8003816:	e7eb      	b.n	80037f0 <_malloc_r+0x64>
 8003818:	460c      	mov	r4, r1
 800381a:	6849      	ldr	r1, [r1, #4]
 800381c:	e7cc      	b.n	80037b8 <_malloc_r+0x2c>
 800381e:	1cc4      	adds	r4, r0, #3
 8003820:	f024 0403 	bic.w	r4, r4, #3
 8003824:	42a0      	cmp	r0, r4
 8003826:	d005      	beq.n	8003834 <_malloc_r+0xa8>
 8003828:	1a21      	subs	r1, r4, r0
 800382a:	4630      	mov	r0, r6
 800382c:	f000 fad0 	bl	8003dd0 <_sbrk_r>
 8003830:	3001      	adds	r0, #1
 8003832:	d0cf      	beq.n	80037d4 <_malloc_r+0x48>
 8003834:	6025      	str	r5, [r4, #0]
 8003836:	e7db      	b.n	80037f0 <_malloc_r+0x64>
 8003838:	200005f8 	.word	0x200005f8
 800383c:	200005fc 	.word	0x200005fc

08003840 <__sfputc_r>:
 8003840:	6893      	ldr	r3, [r2, #8]
 8003842:	3b01      	subs	r3, #1
 8003844:	2b00      	cmp	r3, #0
 8003846:	b410      	push	{r4}
 8003848:	6093      	str	r3, [r2, #8]
 800384a:	da08      	bge.n	800385e <__sfputc_r+0x1e>
 800384c:	6994      	ldr	r4, [r2, #24]
 800384e:	42a3      	cmp	r3, r4
 8003850:	db01      	blt.n	8003856 <__sfputc_r+0x16>
 8003852:	290a      	cmp	r1, #10
 8003854:	d103      	bne.n	800385e <__sfputc_r+0x1e>
 8003856:	f85d 4b04 	ldr.w	r4, [sp], #4
 800385a:	f7ff bcab 	b.w	80031b4 <__swbuf_r>
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	1c58      	adds	r0, r3, #1
 8003862:	6010      	str	r0, [r2, #0]
 8003864:	7019      	strb	r1, [r3, #0]
 8003866:	4608      	mov	r0, r1
 8003868:	f85d 4b04 	ldr.w	r4, [sp], #4
 800386c:	4770      	bx	lr

0800386e <__sfputs_r>:
 800386e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003870:	4606      	mov	r6, r0
 8003872:	460f      	mov	r7, r1
 8003874:	4614      	mov	r4, r2
 8003876:	18d5      	adds	r5, r2, r3
 8003878:	42ac      	cmp	r4, r5
 800387a:	d101      	bne.n	8003880 <__sfputs_r+0x12>
 800387c:	2000      	movs	r0, #0
 800387e:	e007      	b.n	8003890 <__sfputs_r+0x22>
 8003880:	463a      	mov	r2, r7
 8003882:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003886:	4630      	mov	r0, r6
 8003888:	f7ff ffda 	bl	8003840 <__sfputc_r>
 800388c:	1c43      	adds	r3, r0, #1
 800388e:	d1f3      	bne.n	8003878 <__sfputs_r+0xa>
 8003890:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003894 <_vfiprintf_r>:
 8003894:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003898:	460c      	mov	r4, r1
 800389a:	b09d      	sub	sp, #116	; 0x74
 800389c:	4617      	mov	r7, r2
 800389e:	461d      	mov	r5, r3
 80038a0:	4606      	mov	r6, r0
 80038a2:	b118      	cbz	r0, 80038ac <_vfiprintf_r+0x18>
 80038a4:	6983      	ldr	r3, [r0, #24]
 80038a6:	b90b      	cbnz	r3, 80038ac <_vfiprintf_r+0x18>
 80038a8:	f7ff fe34 	bl	8003514 <__sinit>
 80038ac:	4b7c      	ldr	r3, [pc, #496]	; (8003aa0 <_vfiprintf_r+0x20c>)
 80038ae:	429c      	cmp	r4, r3
 80038b0:	d158      	bne.n	8003964 <_vfiprintf_r+0xd0>
 80038b2:	6874      	ldr	r4, [r6, #4]
 80038b4:	89a3      	ldrh	r3, [r4, #12]
 80038b6:	0718      	lsls	r0, r3, #28
 80038b8:	d55e      	bpl.n	8003978 <_vfiprintf_r+0xe4>
 80038ba:	6923      	ldr	r3, [r4, #16]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d05b      	beq.n	8003978 <_vfiprintf_r+0xe4>
 80038c0:	2300      	movs	r3, #0
 80038c2:	9309      	str	r3, [sp, #36]	; 0x24
 80038c4:	2320      	movs	r3, #32
 80038c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80038ca:	2330      	movs	r3, #48	; 0x30
 80038cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80038d0:	9503      	str	r5, [sp, #12]
 80038d2:	f04f 0b01 	mov.w	fp, #1
 80038d6:	46b8      	mov	r8, r7
 80038d8:	4645      	mov	r5, r8
 80038da:	f815 3b01 	ldrb.w	r3, [r5], #1
 80038de:	b10b      	cbz	r3, 80038e4 <_vfiprintf_r+0x50>
 80038e0:	2b25      	cmp	r3, #37	; 0x25
 80038e2:	d154      	bne.n	800398e <_vfiprintf_r+0xfa>
 80038e4:	ebb8 0a07 	subs.w	sl, r8, r7
 80038e8:	d00b      	beq.n	8003902 <_vfiprintf_r+0x6e>
 80038ea:	4653      	mov	r3, sl
 80038ec:	463a      	mov	r2, r7
 80038ee:	4621      	mov	r1, r4
 80038f0:	4630      	mov	r0, r6
 80038f2:	f7ff ffbc 	bl	800386e <__sfputs_r>
 80038f6:	3001      	adds	r0, #1
 80038f8:	f000 80c2 	beq.w	8003a80 <_vfiprintf_r+0x1ec>
 80038fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80038fe:	4453      	add	r3, sl
 8003900:	9309      	str	r3, [sp, #36]	; 0x24
 8003902:	f898 3000 	ldrb.w	r3, [r8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	f000 80ba 	beq.w	8003a80 <_vfiprintf_r+0x1ec>
 800390c:	2300      	movs	r3, #0
 800390e:	f04f 32ff 	mov.w	r2, #4294967295
 8003912:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003916:	9304      	str	r3, [sp, #16]
 8003918:	9307      	str	r3, [sp, #28]
 800391a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800391e:	931a      	str	r3, [sp, #104]	; 0x68
 8003920:	46a8      	mov	r8, r5
 8003922:	2205      	movs	r2, #5
 8003924:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003928:	485e      	ldr	r0, [pc, #376]	; (8003aa4 <_vfiprintf_r+0x210>)
 800392a:	f7fc fc51 	bl	80001d0 <memchr>
 800392e:	9b04      	ldr	r3, [sp, #16]
 8003930:	bb78      	cbnz	r0, 8003992 <_vfiprintf_r+0xfe>
 8003932:	06d9      	lsls	r1, r3, #27
 8003934:	bf44      	itt	mi
 8003936:	2220      	movmi	r2, #32
 8003938:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800393c:	071a      	lsls	r2, r3, #28
 800393e:	bf44      	itt	mi
 8003940:	222b      	movmi	r2, #43	; 0x2b
 8003942:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003946:	782a      	ldrb	r2, [r5, #0]
 8003948:	2a2a      	cmp	r2, #42	; 0x2a
 800394a:	d02a      	beq.n	80039a2 <_vfiprintf_r+0x10e>
 800394c:	9a07      	ldr	r2, [sp, #28]
 800394e:	46a8      	mov	r8, r5
 8003950:	2000      	movs	r0, #0
 8003952:	250a      	movs	r5, #10
 8003954:	4641      	mov	r1, r8
 8003956:	f811 3b01 	ldrb.w	r3, [r1], #1
 800395a:	3b30      	subs	r3, #48	; 0x30
 800395c:	2b09      	cmp	r3, #9
 800395e:	d969      	bls.n	8003a34 <_vfiprintf_r+0x1a0>
 8003960:	b360      	cbz	r0, 80039bc <_vfiprintf_r+0x128>
 8003962:	e024      	b.n	80039ae <_vfiprintf_r+0x11a>
 8003964:	4b50      	ldr	r3, [pc, #320]	; (8003aa8 <_vfiprintf_r+0x214>)
 8003966:	429c      	cmp	r4, r3
 8003968:	d101      	bne.n	800396e <_vfiprintf_r+0xda>
 800396a:	68b4      	ldr	r4, [r6, #8]
 800396c:	e7a2      	b.n	80038b4 <_vfiprintf_r+0x20>
 800396e:	4b4f      	ldr	r3, [pc, #316]	; (8003aac <_vfiprintf_r+0x218>)
 8003970:	429c      	cmp	r4, r3
 8003972:	bf08      	it	eq
 8003974:	68f4      	ldreq	r4, [r6, #12]
 8003976:	e79d      	b.n	80038b4 <_vfiprintf_r+0x20>
 8003978:	4621      	mov	r1, r4
 800397a:	4630      	mov	r0, r6
 800397c:	f7ff fc6c 	bl	8003258 <__swsetup_r>
 8003980:	2800      	cmp	r0, #0
 8003982:	d09d      	beq.n	80038c0 <_vfiprintf_r+0x2c>
 8003984:	f04f 30ff 	mov.w	r0, #4294967295
 8003988:	b01d      	add	sp, #116	; 0x74
 800398a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800398e:	46a8      	mov	r8, r5
 8003990:	e7a2      	b.n	80038d8 <_vfiprintf_r+0x44>
 8003992:	4a44      	ldr	r2, [pc, #272]	; (8003aa4 <_vfiprintf_r+0x210>)
 8003994:	1a80      	subs	r0, r0, r2
 8003996:	fa0b f000 	lsl.w	r0, fp, r0
 800399a:	4318      	orrs	r0, r3
 800399c:	9004      	str	r0, [sp, #16]
 800399e:	4645      	mov	r5, r8
 80039a0:	e7be      	b.n	8003920 <_vfiprintf_r+0x8c>
 80039a2:	9a03      	ldr	r2, [sp, #12]
 80039a4:	1d11      	adds	r1, r2, #4
 80039a6:	6812      	ldr	r2, [r2, #0]
 80039a8:	9103      	str	r1, [sp, #12]
 80039aa:	2a00      	cmp	r2, #0
 80039ac:	db01      	blt.n	80039b2 <_vfiprintf_r+0x11e>
 80039ae:	9207      	str	r2, [sp, #28]
 80039b0:	e004      	b.n	80039bc <_vfiprintf_r+0x128>
 80039b2:	4252      	negs	r2, r2
 80039b4:	f043 0302 	orr.w	r3, r3, #2
 80039b8:	9207      	str	r2, [sp, #28]
 80039ba:	9304      	str	r3, [sp, #16]
 80039bc:	f898 3000 	ldrb.w	r3, [r8]
 80039c0:	2b2e      	cmp	r3, #46	; 0x2e
 80039c2:	d10e      	bne.n	80039e2 <_vfiprintf_r+0x14e>
 80039c4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80039c8:	2b2a      	cmp	r3, #42	; 0x2a
 80039ca:	d138      	bne.n	8003a3e <_vfiprintf_r+0x1aa>
 80039cc:	9b03      	ldr	r3, [sp, #12]
 80039ce:	1d1a      	adds	r2, r3, #4
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	9203      	str	r2, [sp, #12]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	bfb8      	it	lt
 80039d8:	f04f 33ff 	movlt.w	r3, #4294967295
 80039dc:	f108 0802 	add.w	r8, r8, #2
 80039e0:	9305      	str	r3, [sp, #20]
 80039e2:	4d33      	ldr	r5, [pc, #204]	; (8003ab0 <_vfiprintf_r+0x21c>)
 80039e4:	f898 1000 	ldrb.w	r1, [r8]
 80039e8:	2203      	movs	r2, #3
 80039ea:	4628      	mov	r0, r5
 80039ec:	f7fc fbf0 	bl	80001d0 <memchr>
 80039f0:	b140      	cbz	r0, 8003a04 <_vfiprintf_r+0x170>
 80039f2:	2340      	movs	r3, #64	; 0x40
 80039f4:	1b40      	subs	r0, r0, r5
 80039f6:	fa03 f000 	lsl.w	r0, r3, r0
 80039fa:	9b04      	ldr	r3, [sp, #16]
 80039fc:	4303      	orrs	r3, r0
 80039fe:	f108 0801 	add.w	r8, r8, #1
 8003a02:	9304      	str	r3, [sp, #16]
 8003a04:	f898 1000 	ldrb.w	r1, [r8]
 8003a08:	482a      	ldr	r0, [pc, #168]	; (8003ab4 <_vfiprintf_r+0x220>)
 8003a0a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003a0e:	2206      	movs	r2, #6
 8003a10:	f108 0701 	add.w	r7, r8, #1
 8003a14:	f7fc fbdc 	bl	80001d0 <memchr>
 8003a18:	2800      	cmp	r0, #0
 8003a1a:	d037      	beq.n	8003a8c <_vfiprintf_r+0x1f8>
 8003a1c:	4b26      	ldr	r3, [pc, #152]	; (8003ab8 <_vfiprintf_r+0x224>)
 8003a1e:	bb1b      	cbnz	r3, 8003a68 <_vfiprintf_r+0x1d4>
 8003a20:	9b03      	ldr	r3, [sp, #12]
 8003a22:	3307      	adds	r3, #7
 8003a24:	f023 0307 	bic.w	r3, r3, #7
 8003a28:	3308      	adds	r3, #8
 8003a2a:	9303      	str	r3, [sp, #12]
 8003a2c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003a2e:	444b      	add	r3, r9
 8003a30:	9309      	str	r3, [sp, #36]	; 0x24
 8003a32:	e750      	b.n	80038d6 <_vfiprintf_r+0x42>
 8003a34:	fb05 3202 	mla	r2, r5, r2, r3
 8003a38:	2001      	movs	r0, #1
 8003a3a:	4688      	mov	r8, r1
 8003a3c:	e78a      	b.n	8003954 <_vfiprintf_r+0xc0>
 8003a3e:	2300      	movs	r3, #0
 8003a40:	f108 0801 	add.w	r8, r8, #1
 8003a44:	9305      	str	r3, [sp, #20]
 8003a46:	4619      	mov	r1, r3
 8003a48:	250a      	movs	r5, #10
 8003a4a:	4640      	mov	r0, r8
 8003a4c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003a50:	3a30      	subs	r2, #48	; 0x30
 8003a52:	2a09      	cmp	r2, #9
 8003a54:	d903      	bls.n	8003a5e <_vfiprintf_r+0x1ca>
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d0c3      	beq.n	80039e2 <_vfiprintf_r+0x14e>
 8003a5a:	9105      	str	r1, [sp, #20]
 8003a5c:	e7c1      	b.n	80039e2 <_vfiprintf_r+0x14e>
 8003a5e:	fb05 2101 	mla	r1, r5, r1, r2
 8003a62:	2301      	movs	r3, #1
 8003a64:	4680      	mov	r8, r0
 8003a66:	e7f0      	b.n	8003a4a <_vfiprintf_r+0x1b6>
 8003a68:	ab03      	add	r3, sp, #12
 8003a6a:	9300      	str	r3, [sp, #0]
 8003a6c:	4622      	mov	r2, r4
 8003a6e:	4b13      	ldr	r3, [pc, #76]	; (8003abc <_vfiprintf_r+0x228>)
 8003a70:	a904      	add	r1, sp, #16
 8003a72:	4630      	mov	r0, r6
 8003a74:	f3af 8000 	nop.w
 8003a78:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003a7c:	4681      	mov	r9, r0
 8003a7e:	d1d5      	bne.n	8003a2c <_vfiprintf_r+0x198>
 8003a80:	89a3      	ldrh	r3, [r4, #12]
 8003a82:	065b      	lsls	r3, r3, #25
 8003a84:	f53f af7e 	bmi.w	8003984 <_vfiprintf_r+0xf0>
 8003a88:	9809      	ldr	r0, [sp, #36]	; 0x24
 8003a8a:	e77d      	b.n	8003988 <_vfiprintf_r+0xf4>
 8003a8c:	ab03      	add	r3, sp, #12
 8003a8e:	9300      	str	r3, [sp, #0]
 8003a90:	4622      	mov	r2, r4
 8003a92:	4b0a      	ldr	r3, [pc, #40]	; (8003abc <_vfiprintf_r+0x228>)
 8003a94:	a904      	add	r1, sp, #16
 8003a96:	4630      	mov	r0, r6
 8003a98:	f000 f888 	bl	8003bac <_printf_i>
 8003a9c:	e7ec      	b.n	8003a78 <_vfiprintf_r+0x1e4>
 8003a9e:	bf00      	nop
 8003aa0:	08004344 	.word	0x08004344
 8003aa4:	08004384 	.word	0x08004384
 8003aa8:	08004364 	.word	0x08004364
 8003aac:	08004324 	.word	0x08004324
 8003ab0:	0800438a 	.word	0x0800438a
 8003ab4:	0800438e 	.word	0x0800438e
 8003ab8:	00000000 	.word	0x00000000
 8003abc:	0800386f 	.word	0x0800386f

08003ac0 <_printf_common>:
 8003ac0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003ac4:	4691      	mov	r9, r2
 8003ac6:	461f      	mov	r7, r3
 8003ac8:	688a      	ldr	r2, [r1, #8]
 8003aca:	690b      	ldr	r3, [r1, #16]
 8003acc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003ad0:	4293      	cmp	r3, r2
 8003ad2:	bfb8      	it	lt
 8003ad4:	4613      	movlt	r3, r2
 8003ad6:	f8c9 3000 	str.w	r3, [r9]
 8003ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003ade:	4606      	mov	r6, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	b112      	cbz	r2, 8003aea <_printf_common+0x2a>
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	f8c9 3000 	str.w	r3, [r9]
 8003aea:	6823      	ldr	r3, [r4, #0]
 8003aec:	0699      	lsls	r1, r3, #26
 8003aee:	bf42      	ittt	mi
 8003af0:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003af4:	3302      	addmi	r3, #2
 8003af6:	f8c9 3000 	strmi.w	r3, [r9]
 8003afa:	6825      	ldr	r5, [r4, #0]
 8003afc:	f015 0506 	ands.w	r5, r5, #6
 8003b00:	d107      	bne.n	8003b12 <_printf_common+0x52>
 8003b02:	f104 0a19 	add.w	sl, r4, #25
 8003b06:	68e3      	ldr	r3, [r4, #12]
 8003b08:	f8d9 2000 	ldr.w	r2, [r9]
 8003b0c:	1a9b      	subs	r3, r3, r2
 8003b0e:	42ab      	cmp	r3, r5
 8003b10:	dc28      	bgt.n	8003b64 <_printf_common+0xa4>
 8003b12:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003b16:	6822      	ldr	r2, [r4, #0]
 8003b18:	3300      	adds	r3, #0
 8003b1a:	bf18      	it	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	0692      	lsls	r2, r2, #26
 8003b20:	d42d      	bmi.n	8003b7e <_printf_common+0xbe>
 8003b22:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003b26:	4639      	mov	r1, r7
 8003b28:	4630      	mov	r0, r6
 8003b2a:	47c0      	blx	r8
 8003b2c:	3001      	adds	r0, #1
 8003b2e:	d020      	beq.n	8003b72 <_printf_common+0xb2>
 8003b30:	6823      	ldr	r3, [r4, #0]
 8003b32:	68e5      	ldr	r5, [r4, #12]
 8003b34:	f8d9 2000 	ldr.w	r2, [r9]
 8003b38:	f003 0306 	and.w	r3, r3, #6
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	bf08      	it	eq
 8003b40:	1aad      	subeq	r5, r5, r2
 8003b42:	68a3      	ldr	r3, [r4, #8]
 8003b44:	6922      	ldr	r2, [r4, #16]
 8003b46:	bf0c      	ite	eq
 8003b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003b4c:	2500      	movne	r5, #0
 8003b4e:	4293      	cmp	r3, r2
 8003b50:	bfc4      	itt	gt
 8003b52:	1a9b      	subgt	r3, r3, r2
 8003b54:	18ed      	addgt	r5, r5, r3
 8003b56:	f04f 0900 	mov.w	r9, #0
 8003b5a:	341a      	adds	r4, #26
 8003b5c:	454d      	cmp	r5, r9
 8003b5e:	d11a      	bne.n	8003b96 <_printf_common+0xd6>
 8003b60:	2000      	movs	r0, #0
 8003b62:	e008      	b.n	8003b76 <_printf_common+0xb6>
 8003b64:	2301      	movs	r3, #1
 8003b66:	4652      	mov	r2, sl
 8003b68:	4639      	mov	r1, r7
 8003b6a:	4630      	mov	r0, r6
 8003b6c:	47c0      	blx	r8
 8003b6e:	3001      	adds	r0, #1
 8003b70:	d103      	bne.n	8003b7a <_printf_common+0xba>
 8003b72:	f04f 30ff 	mov.w	r0, #4294967295
 8003b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003b7a:	3501      	adds	r5, #1
 8003b7c:	e7c3      	b.n	8003b06 <_printf_common+0x46>
 8003b7e:	18e1      	adds	r1, r4, r3
 8003b80:	1c5a      	adds	r2, r3, #1
 8003b82:	2030      	movs	r0, #48	; 0x30
 8003b84:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003b88:	4422      	add	r2, r4
 8003b8a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b8e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b92:	3302      	adds	r3, #2
 8003b94:	e7c5      	b.n	8003b22 <_printf_common+0x62>
 8003b96:	2301      	movs	r3, #1
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4639      	mov	r1, r7
 8003b9c:	4630      	mov	r0, r6
 8003b9e:	47c0      	blx	r8
 8003ba0:	3001      	adds	r0, #1
 8003ba2:	d0e6      	beq.n	8003b72 <_printf_common+0xb2>
 8003ba4:	f109 0901 	add.w	r9, r9, #1
 8003ba8:	e7d8      	b.n	8003b5c <_printf_common+0x9c>
	...

08003bac <_printf_i>:
 8003bac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003bb0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003bb4:	460c      	mov	r4, r1
 8003bb6:	7e09      	ldrb	r1, [r1, #24]
 8003bb8:	b085      	sub	sp, #20
 8003bba:	296e      	cmp	r1, #110	; 0x6e
 8003bbc:	4617      	mov	r7, r2
 8003bbe:	4606      	mov	r6, r0
 8003bc0:	4698      	mov	r8, r3
 8003bc2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003bc4:	f000 80b3 	beq.w	8003d2e <_printf_i+0x182>
 8003bc8:	d822      	bhi.n	8003c10 <_printf_i+0x64>
 8003bca:	2963      	cmp	r1, #99	; 0x63
 8003bcc:	d036      	beq.n	8003c3c <_printf_i+0x90>
 8003bce:	d80a      	bhi.n	8003be6 <_printf_i+0x3a>
 8003bd0:	2900      	cmp	r1, #0
 8003bd2:	f000 80b9 	beq.w	8003d48 <_printf_i+0x19c>
 8003bd6:	2958      	cmp	r1, #88	; 0x58
 8003bd8:	f000 8083 	beq.w	8003ce2 <_printf_i+0x136>
 8003bdc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003be0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003be4:	e032      	b.n	8003c4c <_printf_i+0xa0>
 8003be6:	2964      	cmp	r1, #100	; 0x64
 8003be8:	d001      	beq.n	8003bee <_printf_i+0x42>
 8003bea:	2969      	cmp	r1, #105	; 0x69
 8003bec:	d1f6      	bne.n	8003bdc <_printf_i+0x30>
 8003bee:	6820      	ldr	r0, [r4, #0]
 8003bf0:	6813      	ldr	r3, [r2, #0]
 8003bf2:	0605      	lsls	r5, r0, #24
 8003bf4:	f103 0104 	add.w	r1, r3, #4
 8003bf8:	d52a      	bpl.n	8003c50 <_printf_i+0xa4>
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6011      	str	r1, [r2, #0]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	da03      	bge.n	8003c0a <_printf_i+0x5e>
 8003c02:	222d      	movs	r2, #45	; 0x2d
 8003c04:	425b      	negs	r3, r3
 8003c06:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003c0a:	486f      	ldr	r0, [pc, #444]	; (8003dc8 <_printf_i+0x21c>)
 8003c0c:	220a      	movs	r2, #10
 8003c0e:	e039      	b.n	8003c84 <_printf_i+0xd8>
 8003c10:	2973      	cmp	r1, #115	; 0x73
 8003c12:	f000 809d 	beq.w	8003d50 <_printf_i+0x1a4>
 8003c16:	d808      	bhi.n	8003c2a <_printf_i+0x7e>
 8003c18:	296f      	cmp	r1, #111	; 0x6f
 8003c1a:	d020      	beq.n	8003c5e <_printf_i+0xb2>
 8003c1c:	2970      	cmp	r1, #112	; 0x70
 8003c1e:	d1dd      	bne.n	8003bdc <_printf_i+0x30>
 8003c20:	6823      	ldr	r3, [r4, #0]
 8003c22:	f043 0320 	orr.w	r3, r3, #32
 8003c26:	6023      	str	r3, [r4, #0]
 8003c28:	e003      	b.n	8003c32 <_printf_i+0x86>
 8003c2a:	2975      	cmp	r1, #117	; 0x75
 8003c2c:	d017      	beq.n	8003c5e <_printf_i+0xb2>
 8003c2e:	2978      	cmp	r1, #120	; 0x78
 8003c30:	d1d4      	bne.n	8003bdc <_printf_i+0x30>
 8003c32:	2378      	movs	r3, #120	; 0x78
 8003c34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003c38:	4864      	ldr	r0, [pc, #400]	; (8003dcc <_printf_i+0x220>)
 8003c3a:	e055      	b.n	8003ce8 <_printf_i+0x13c>
 8003c3c:	6813      	ldr	r3, [r2, #0]
 8003c3e:	1d19      	adds	r1, r3, #4
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	6011      	str	r1, [r2, #0]
 8003c44:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003c48:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003c4c:	2301      	movs	r3, #1
 8003c4e:	e08c      	b.n	8003d6a <_printf_i+0x1be>
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	6011      	str	r1, [r2, #0]
 8003c54:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003c58:	bf18      	it	ne
 8003c5a:	b21b      	sxthne	r3, r3
 8003c5c:	e7cf      	b.n	8003bfe <_printf_i+0x52>
 8003c5e:	6813      	ldr	r3, [r2, #0]
 8003c60:	6825      	ldr	r5, [r4, #0]
 8003c62:	1d18      	adds	r0, r3, #4
 8003c64:	6010      	str	r0, [r2, #0]
 8003c66:	0628      	lsls	r0, r5, #24
 8003c68:	d501      	bpl.n	8003c6e <_printf_i+0xc2>
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	e002      	b.n	8003c74 <_printf_i+0xc8>
 8003c6e:	0668      	lsls	r0, r5, #25
 8003c70:	d5fb      	bpl.n	8003c6a <_printf_i+0xbe>
 8003c72:	881b      	ldrh	r3, [r3, #0]
 8003c74:	4854      	ldr	r0, [pc, #336]	; (8003dc8 <_printf_i+0x21c>)
 8003c76:	296f      	cmp	r1, #111	; 0x6f
 8003c78:	bf14      	ite	ne
 8003c7a:	220a      	movne	r2, #10
 8003c7c:	2208      	moveq	r2, #8
 8003c7e:	2100      	movs	r1, #0
 8003c80:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c84:	6865      	ldr	r5, [r4, #4]
 8003c86:	60a5      	str	r5, [r4, #8]
 8003c88:	2d00      	cmp	r5, #0
 8003c8a:	f2c0 8095 	blt.w	8003db8 <_printf_i+0x20c>
 8003c8e:	6821      	ldr	r1, [r4, #0]
 8003c90:	f021 0104 	bic.w	r1, r1, #4
 8003c94:	6021      	str	r1, [r4, #0]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d13d      	bne.n	8003d16 <_printf_i+0x16a>
 8003c9a:	2d00      	cmp	r5, #0
 8003c9c:	f040 808e 	bne.w	8003dbc <_printf_i+0x210>
 8003ca0:	4665      	mov	r5, ip
 8003ca2:	2a08      	cmp	r2, #8
 8003ca4:	d10b      	bne.n	8003cbe <_printf_i+0x112>
 8003ca6:	6823      	ldr	r3, [r4, #0]
 8003ca8:	07db      	lsls	r3, r3, #31
 8003caa:	d508      	bpl.n	8003cbe <_printf_i+0x112>
 8003cac:	6923      	ldr	r3, [r4, #16]
 8003cae:	6862      	ldr	r2, [r4, #4]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	bfde      	ittt	le
 8003cb4:	2330      	movle	r3, #48	; 0x30
 8003cb6:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003cba:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003cbe:	ebac 0305 	sub.w	r3, ip, r5
 8003cc2:	6123      	str	r3, [r4, #16]
 8003cc4:	f8cd 8000 	str.w	r8, [sp]
 8003cc8:	463b      	mov	r3, r7
 8003cca:	aa03      	add	r2, sp, #12
 8003ccc:	4621      	mov	r1, r4
 8003cce:	4630      	mov	r0, r6
 8003cd0:	f7ff fef6 	bl	8003ac0 <_printf_common>
 8003cd4:	3001      	adds	r0, #1
 8003cd6:	d14d      	bne.n	8003d74 <_printf_i+0x1c8>
 8003cd8:	f04f 30ff 	mov.w	r0, #4294967295
 8003cdc:	b005      	add	sp, #20
 8003cde:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ce2:	4839      	ldr	r0, [pc, #228]	; (8003dc8 <_printf_i+0x21c>)
 8003ce4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ce8:	6813      	ldr	r3, [r2, #0]
 8003cea:	6821      	ldr	r1, [r4, #0]
 8003cec:	1d1d      	adds	r5, r3, #4
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	6015      	str	r5, [r2, #0]
 8003cf2:	060a      	lsls	r2, r1, #24
 8003cf4:	d50b      	bpl.n	8003d0e <_printf_i+0x162>
 8003cf6:	07ca      	lsls	r2, r1, #31
 8003cf8:	bf44      	itt	mi
 8003cfa:	f041 0120 	orrmi.w	r1, r1, #32
 8003cfe:	6021      	strmi	r1, [r4, #0]
 8003d00:	b91b      	cbnz	r3, 8003d0a <_printf_i+0x15e>
 8003d02:	6822      	ldr	r2, [r4, #0]
 8003d04:	f022 0220 	bic.w	r2, r2, #32
 8003d08:	6022      	str	r2, [r4, #0]
 8003d0a:	2210      	movs	r2, #16
 8003d0c:	e7b7      	b.n	8003c7e <_printf_i+0xd2>
 8003d0e:	064d      	lsls	r5, r1, #25
 8003d10:	bf48      	it	mi
 8003d12:	b29b      	uxthmi	r3, r3
 8003d14:	e7ef      	b.n	8003cf6 <_printf_i+0x14a>
 8003d16:	4665      	mov	r5, ip
 8003d18:	fbb3 f1f2 	udiv	r1, r3, r2
 8003d1c:	fb02 3311 	mls	r3, r2, r1, r3
 8003d20:	5cc3      	ldrb	r3, [r0, r3]
 8003d22:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003d26:	460b      	mov	r3, r1
 8003d28:	2900      	cmp	r1, #0
 8003d2a:	d1f5      	bne.n	8003d18 <_printf_i+0x16c>
 8003d2c:	e7b9      	b.n	8003ca2 <_printf_i+0xf6>
 8003d2e:	6813      	ldr	r3, [r2, #0]
 8003d30:	6825      	ldr	r5, [r4, #0]
 8003d32:	6961      	ldr	r1, [r4, #20]
 8003d34:	1d18      	adds	r0, r3, #4
 8003d36:	6010      	str	r0, [r2, #0]
 8003d38:	0628      	lsls	r0, r5, #24
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	d501      	bpl.n	8003d42 <_printf_i+0x196>
 8003d3e:	6019      	str	r1, [r3, #0]
 8003d40:	e002      	b.n	8003d48 <_printf_i+0x19c>
 8003d42:	066a      	lsls	r2, r5, #25
 8003d44:	d5fb      	bpl.n	8003d3e <_printf_i+0x192>
 8003d46:	8019      	strh	r1, [r3, #0]
 8003d48:	2300      	movs	r3, #0
 8003d4a:	6123      	str	r3, [r4, #16]
 8003d4c:	4665      	mov	r5, ip
 8003d4e:	e7b9      	b.n	8003cc4 <_printf_i+0x118>
 8003d50:	6813      	ldr	r3, [r2, #0]
 8003d52:	1d19      	adds	r1, r3, #4
 8003d54:	6011      	str	r1, [r2, #0]
 8003d56:	681d      	ldr	r5, [r3, #0]
 8003d58:	6862      	ldr	r2, [r4, #4]
 8003d5a:	2100      	movs	r1, #0
 8003d5c:	4628      	mov	r0, r5
 8003d5e:	f7fc fa37 	bl	80001d0 <memchr>
 8003d62:	b108      	cbz	r0, 8003d68 <_printf_i+0x1bc>
 8003d64:	1b40      	subs	r0, r0, r5
 8003d66:	6060      	str	r0, [r4, #4]
 8003d68:	6863      	ldr	r3, [r4, #4]
 8003d6a:	6123      	str	r3, [r4, #16]
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d72:	e7a7      	b.n	8003cc4 <_printf_i+0x118>
 8003d74:	6923      	ldr	r3, [r4, #16]
 8003d76:	462a      	mov	r2, r5
 8003d78:	4639      	mov	r1, r7
 8003d7a:	4630      	mov	r0, r6
 8003d7c:	47c0      	blx	r8
 8003d7e:	3001      	adds	r0, #1
 8003d80:	d0aa      	beq.n	8003cd8 <_printf_i+0x12c>
 8003d82:	6823      	ldr	r3, [r4, #0]
 8003d84:	079b      	lsls	r3, r3, #30
 8003d86:	d413      	bmi.n	8003db0 <_printf_i+0x204>
 8003d88:	68e0      	ldr	r0, [r4, #12]
 8003d8a:	9b03      	ldr	r3, [sp, #12]
 8003d8c:	4298      	cmp	r0, r3
 8003d8e:	bfb8      	it	lt
 8003d90:	4618      	movlt	r0, r3
 8003d92:	e7a3      	b.n	8003cdc <_printf_i+0x130>
 8003d94:	2301      	movs	r3, #1
 8003d96:	464a      	mov	r2, r9
 8003d98:	4639      	mov	r1, r7
 8003d9a:	4630      	mov	r0, r6
 8003d9c:	47c0      	blx	r8
 8003d9e:	3001      	adds	r0, #1
 8003da0:	d09a      	beq.n	8003cd8 <_printf_i+0x12c>
 8003da2:	3501      	adds	r5, #1
 8003da4:	68e3      	ldr	r3, [r4, #12]
 8003da6:	9a03      	ldr	r2, [sp, #12]
 8003da8:	1a9b      	subs	r3, r3, r2
 8003daa:	42ab      	cmp	r3, r5
 8003dac:	dcf2      	bgt.n	8003d94 <_printf_i+0x1e8>
 8003dae:	e7eb      	b.n	8003d88 <_printf_i+0x1dc>
 8003db0:	2500      	movs	r5, #0
 8003db2:	f104 0919 	add.w	r9, r4, #25
 8003db6:	e7f5      	b.n	8003da4 <_printf_i+0x1f8>
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d1ac      	bne.n	8003d16 <_printf_i+0x16a>
 8003dbc:	7803      	ldrb	r3, [r0, #0]
 8003dbe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003dc2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003dc6:	e76c      	b.n	8003ca2 <_printf_i+0xf6>
 8003dc8:	08004395 	.word	0x08004395
 8003dcc:	080043a6 	.word	0x080043a6

08003dd0 <_sbrk_r>:
 8003dd0:	b538      	push	{r3, r4, r5, lr}
 8003dd2:	4c06      	ldr	r4, [pc, #24]	; (8003dec <_sbrk_r+0x1c>)
 8003dd4:	2300      	movs	r3, #0
 8003dd6:	4605      	mov	r5, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	6023      	str	r3, [r4, #0]
 8003ddc:	f7fd fbb6 	bl	800154c <_sbrk>
 8003de0:	1c43      	adds	r3, r0, #1
 8003de2:	d102      	bne.n	8003dea <_sbrk_r+0x1a>
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	b103      	cbz	r3, 8003dea <_sbrk_r+0x1a>
 8003de8:	602b      	str	r3, [r5, #0]
 8003dea:	bd38      	pop	{r3, r4, r5, pc}
 8003dec:	20000604 	.word	0x20000604

08003df0 <__sread>:
 8003df0:	b510      	push	{r4, lr}
 8003df2:	460c      	mov	r4, r1
 8003df4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003df8:	f000 f896 	bl	8003f28 <_read_r>
 8003dfc:	2800      	cmp	r0, #0
 8003dfe:	bfab      	itete	ge
 8003e00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003e02:	89a3      	ldrhlt	r3, [r4, #12]
 8003e04:	181b      	addge	r3, r3, r0
 8003e06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003e0a:	bfac      	ite	ge
 8003e0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8003e0e:	81a3      	strhlt	r3, [r4, #12]
 8003e10:	bd10      	pop	{r4, pc}

08003e12 <__swrite>:
 8003e12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003e16:	461f      	mov	r7, r3
 8003e18:	898b      	ldrh	r3, [r1, #12]
 8003e1a:	05db      	lsls	r3, r3, #23
 8003e1c:	4605      	mov	r5, r0
 8003e1e:	460c      	mov	r4, r1
 8003e20:	4616      	mov	r6, r2
 8003e22:	d505      	bpl.n	8003e30 <__swrite+0x1e>
 8003e24:	2302      	movs	r3, #2
 8003e26:	2200      	movs	r2, #0
 8003e28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e2c:	f000 f868 	bl	8003f00 <_lseek_r>
 8003e30:	89a3      	ldrh	r3, [r4, #12]
 8003e32:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003e36:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003e3a:	81a3      	strh	r3, [r4, #12]
 8003e3c:	4632      	mov	r2, r6
 8003e3e:	463b      	mov	r3, r7
 8003e40:	4628      	mov	r0, r5
 8003e42:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003e46:	f000 b817 	b.w	8003e78 <_write_r>

08003e4a <__sseek>:
 8003e4a:	b510      	push	{r4, lr}
 8003e4c:	460c      	mov	r4, r1
 8003e4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e52:	f000 f855 	bl	8003f00 <_lseek_r>
 8003e56:	1c43      	adds	r3, r0, #1
 8003e58:	89a3      	ldrh	r3, [r4, #12]
 8003e5a:	bf15      	itete	ne
 8003e5c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003e5e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003e62:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003e66:	81a3      	strheq	r3, [r4, #12]
 8003e68:	bf18      	it	ne
 8003e6a:	81a3      	strhne	r3, [r4, #12]
 8003e6c:	bd10      	pop	{r4, pc}

08003e6e <__sclose>:
 8003e6e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003e72:	f000 b813 	b.w	8003e9c <_close_r>
	...

08003e78 <_write_r>:
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	4c07      	ldr	r4, [pc, #28]	; (8003e98 <_write_r+0x20>)
 8003e7c:	4605      	mov	r5, r0
 8003e7e:	4608      	mov	r0, r1
 8003e80:	4611      	mov	r1, r2
 8003e82:	2200      	movs	r2, #0
 8003e84:	6022      	str	r2, [r4, #0]
 8003e86:	461a      	mov	r2, r3
 8003e88:	f7fd fb10 	bl	80014ac <_write>
 8003e8c:	1c43      	adds	r3, r0, #1
 8003e8e:	d102      	bne.n	8003e96 <_write_r+0x1e>
 8003e90:	6823      	ldr	r3, [r4, #0]
 8003e92:	b103      	cbz	r3, 8003e96 <_write_r+0x1e>
 8003e94:	602b      	str	r3, [r5, #0]
 8003e96:	bd38      	pop	{r3, r4, r5, pc}
 8003e98:	20000604 	.word	0x20000604

08003e9c <_close_r>:
 8003e9c:	b538      	push	{r3, r4, r5, lr}
 8003e9e:	4c06      	ldr	r4, [pc, #24]	; (8003eb8 <_close_r+0x1c>)
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	4605      	mov	r5, r0
 8003ea4:	4608      	mov	r0, r1
 8003ea6:	6023      	str	r3, [r4, #0]
 8003ea8:	f7fd fb1c 	bl	80014e4 <_close>
 8003eac:	1c43      	adds	r3, r0, #1
 8003eae:	d102      	bne.n	8003eb6 <_close_r+0x1a>
 8003eb0:	6823      	ldr	r3, [r4, #0]
 8003eb2:	b103      	cbz	r3, 8003eb6 <_close_r+0x1a>
 8003eb4:	602b      	str	r3, [r5, #0]
 8003eb6:	bd38      	pop	{r3, r4, r5, pc}
 8003eb8:	20000604 	.word	0x20000604

08003ebc <_fstat_r>:
 8003ebc:	b538      	push	{r3, r4, r5, lr}
 8003ebe:	4c07      	ldr	r4, [pc, #28]	; (8003edc <_fstat_r+0x20>)
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	4605      	mov	r5, r0
 8003ec4:	4608      	mov	r0, r1
 8003ec6:	4611      	mov	r1, r2
 8003ec8:	6023      	str	r3, [r4, #0]
 8003eca:	f7fd fb17 	bl	80014fc <_fstat>
 8003ece:	1c43      	adds	r3, r0, #1
 8003ed0:	d102      	bne.n	8003ed8 <_fstat_r+0x1c>
 8003ed2:	6823      	ldr	r3, [r4, #0]
 8003ed4:	b103      	cbz	r3, 8003ed8 <_fstat_r+0x1c>
 8003ed6:	602b      	str	r3, [r5, #0]
 8003ed8:	bd38      	pop	{r3, r4, r5, pc}
 8003eda:	bf00      	nop
 8003edc:	20000604 	.word	0x20000604

08003ee0 <_isatty_r>:
 8003ee0:	b538      	push	{r3, r4, r5, lr}
 8003ee2:	4c06      	ldr	r4, [pc, #24]	; (8003efc <_isatty_r+0x1c>)
 8003ee4:	2300      	movs	r3, #0
 8003ee6:	4605      	mov	r5, r0
 8003ee8:	4608      	mov	r0, r1
 8003eea:	6023      	str	r3, [r4, #0]
 8003eec:	f7fd fb16 	bl	800151c <_isatty>
 8003ef0:	1c43      	adds	r3, r0, #1
 8003ef2:	d102      	bne.n	8003efa <_isatty_r+0x1a>
 8003ef4:	6823      	ldr	r3, [r4, #0]
 8003ef6:	b103      	cbz	r3, 8003efa <_isatty_r+0x1a>
 8003ef8:	602b      	str	r3, [r5, #0]
 8003efa:	bd38      	pop	{r3, r4, r5, pc}
 8003efc:	20000604 	.word	0x20000604

08003f00 <_lseek_r>:
 8003f00:	b538      	push	{r3, r4, r5, lr}
 8003f02:	4c07      	ldr	r4, [pc, #28]	; (8003f20 <_lseek_r+0x20>)
 8003f04:	4605      	mov	r5, r0
 8003f06:	4608      	mov	r0, r1
 8003f08:	4611      	mov	r1, r2
 8003f0a:	2200      	movs	r2, #0
 8003f0c:	6022      	str	r2, [r4, #0]
 8003f0e:	461a      	mov	r2, r3
 8003f10:	f7fd fb0f 	bl	8001532 <_lseek>
 8003f14:	1c43      	adds	r3, r0, #1
 8003f16:	d102      	bne.n	8003f1e <_lseek_r+0x1e>
 8003f18:	6823      	ldr	r3, [r4, #0]
 8003f1a:	b103      	cbz	r3, 8003f1e <_lseek_r+0x1e>
 8003f1c:	602b      	str	r3, [r5, #0]
 8003f1e:	bd38      	pop	{r3, r4, r5, pc}
 8003f20:	20000604 	.word	0x20000604

08003f24 <__malloc_lock>:
 8003f24:	4770      	bx	lr

08003f26 <__malloc_unlock>:
 8003f26:	4770      	bx	lr

08003f28 <_read_r>:
 8003f28:	b538      	push	{r3, r4, r5, lr}
 8003f2a:	4c07      	ldr	r4, [pc, #28]	; (8003f48 <_read_r+0x20>)
 8003f2c:	4605      	mov	r5, r0
 8003f2e:	4608      	mov	r0, r1
 8003f30:	4611      	mov	r1, r2
 8003f32:	2200      	movs	r2, #0
 8003f34:	6022      	str	r2, [r4, #0]
 8003f36:	461a      	mov	r2, r3
 8003f38:	f7fd fa9b 	bl	8001472 <_read>
 8003f3c:	1c43      	adds	r3, r0, #1
 8003f3e:	d102      	bne.n	8003f46 <_read_r+0x1e>
 8003f40:	6823      	ldr	r3, [r4, #0]
 8003f42:	b103      	cbz	r3, 8003f46 <_read_r+0x1e>
 8003f44:	602b      	str	r3, [r5, #0]
 8003f46:	bd38      	pop	{r3, r4, r5, pc}
 8003f48:	20000604 	.word	0x20000604

08003f4c <_init>:
 8003f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f4e:	bf00      	nop
 8003f50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f52:	bc08      	pop	{r3}
 8003f54:	469e      	mov	lr, r3
 8003f56:	4770      	bx	lr

08003f58 <_fini>:
 8003f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f5a:	bf00      	nop
 8003f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003f5e:	bc08      	pop	{r3}
 8003f60:	469e      	mov	lr, r3
 8003f62:	4770      	bx	lr
