
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bb4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000474  08003d44  08003d44  00013d44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080041b8  080041b8  0002006c  2**0
                  CONTENTS
  4 .ARM          00000000  080041b8  080041b8  0002006c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080041b8  080041b8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080041b8  080041b8  000141b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080041bc  080041bc  000141bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  080041c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000059c  2000006c  0800422c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000608  0800422c  00020608  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e55e  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002473  00000000  00000000  0002e5fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000b28  00000000  00000000  00030a70  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a00  00000000  00000000  00031598  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00024058  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00009846  00000000  00000000  00055ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000badb5  00000000  00000000  0005f836  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011a5eb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003370  00000000  00000000  0011a668  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003d2c 	.word	0x08003d2c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08003d2c 	.word	0x08003d2c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 8000270:	b580      	push	{r7, lr}
 8000272:	b082      	sub	sp, #8
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 800027a:	79fb      	ldrb	r3, [r7, #7]
 800027c:	4618      	mov	r0, r3
 800027e:	f000 f80d 	bl	800029c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	4618      	mov	r0, r3
 8000286:	f000 f833 	bl	80002f0 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 800028a:	79fb      	ldrb	r3, [r7, #7]
 800028c:	4618      	mov	r0, r3
 800028e:	f000 f877 	bl	8000380 <adns2610_config>
}
 8000292:	bf00      	nop
 8000294:	3708      	adds	r7, #8
 8000296:	46bd      	mov	sp, r7
 8000298:	bd80      	pop	{r7, pc}
	...

0800029c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800029c:	b480      	push	{r7}
 800029e:	b083      	sub	sp, #12
 80002a0:	af00      	add	r7, sp, #0
 80002a2:	4603      	mov	r3, r0
 80002a4:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 80002a6:	79fb      	ldrb	r3, [r7, #7]
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d101      	bne.n	80002b0 <adns2610_configureSPI+0x14>
 80002ac:	4b0d      	ldr	r3, [pc, #52]	; (80002e4 <adns2610_configureSPI+0x48>)
 80002ae:	e000      	b.n	80002b2 <adns2610_configureSPI+0x16>
 80002b0:	4b0d      	ldr	r3, [pc, #52]	; (80002e8 <adns2610_configureSPI+0x4c>)
 80002b2:	4a0e      	ldr	r2, [pc, #56]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b4:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80002b6:	4b0d      	ldr	r3, [pc, #52]	; (80002ec <adns2610_configureSPI+0x50>)
 80002b8:	681b      	ldr	r3, [r3, #0]
 80002ba:	685a      	ldr	r2, [r3, #4]
 80002bc:	4b0b      	ldr	r3, [pc, #44]	; (80002ec <adns2610_configureSPI+0x50>)
 80002be:	681b      	ldr	r3, [r3, #0]
 80002c0:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80002c4:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 80002c6:	4b09      	ldr	r3, [pc, #36]	; (80002ec <adns2610_configureSPI+0x50>)
 80002c8:	681b      	ldr	r3, [r3, #0]
 80002ca:	681a      	ldr	r2, [r3, #0]
 80002cc:	4b07      	ldr	r3, [pc, #28]	; (80002ec <adns2610_configureSPI+0x50>)
 80002ce:	681b      	ldr	r3, [r3, #0]
 80002d0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80002d4:	601a      	str	r2, [r3, #0]
}
 80002d6:	bf00      	nop
 80002d8:	370c      	adds	r7, #12
 80002da:	46bd      	mov	sp, r7
 80002dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002e0:	4770      	bx	lr
 80002e2:	bf00      	nop
 80002e4:	40003800 	.word	0x40003800
 80002e8:	40003c00 	.word	0x40003c00
 80002ec:	20000088 	.word	0x20000088

080002f0 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 80002f0:	b580      	push	{r7, lr}
 80002f2:	b082      	sub	sp, #8
 80002f4:	af00      	add	r7, sp, #0
 80002f6:	4603      	mov	r3, r0
 80002f8:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80002fa:	79fb      	ldrb	r3, [r7, #7]
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d101      	bne.n	8000304 <adns2610_resetCOM+0x14>
 8000300:	4b1c      	ldr	r3, [pc, #112]	; (8000374 <adns2610_resetCOM+0x84>)
 8000302:	e000      	b.n	8000306 <adns2610_resetCOM+0x16>
 8000304:	4b1c      	ldr	r3, [pc, #112]	; (8000378 <adns2610_resetCOM+0x88>)
 8000306:	4a1d      	ldr	r2, [pc, #116]	; (800037c <adns2610_resetCOM+0x8c>)
 8000308:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800030a:	bf00      	nop
 800030c:	4b1b      	ldr	r3, [pc, #108]	; (800037c <adns2610_resetCOM+0x8c>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	689b      	ldr	r3, [r3, #8]
 8000312:	f003 0302 	and.w	r3, r3, #2
 8000316:	2b00      	cmp	r3, #0
 8000318:	d0f8      	beq.n	800030c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800031a:	4b18      	ldr	r3, [pc, #96]	; (800037c <adns2610_resetCOM+0x8c>)
 800031c:	681b      	ldr	r3, [r3, #0]
 800031e:	330c      	adds	r3, #12
 8000320:	2201      	movs	r2, #1
 8000322:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000324:	bf00      	nop
 8000326:	4b15      	ldr	r3, [pc, #84]	; (800037c <adns2610_resetCOM+0x8c>)
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	689b      	ldr	r3, [r3, #8]
 800032c:	f003 0301 	and.w	r3, r3, #1
 8000330:	2b00      	cmp	r3, #0
 8000332:	d0f8      	beq.n	8000326 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000334:	4b11      	ldr	r3, [pc, #68]	; (800037c <adns2610_resetCOM+0x8c>)
 8000336:	681b      	ldr	r3, [r3, #0]
 8000338:	330c      	adds	r3, #12
 800033a:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800033c:	bf00      	nop
 800033e:	4b0f      	ldr	r3, [pc, #60]	; (800037c <adns2610_resetCOM+0x8c>)
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	689b      	ldr	r3, [r3, #8]
 8000344:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000348:	4b0c      	ldr	r3, [pc, #48]	; (800037c <adns2610_resetCOM+0x8c>)
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	689b      	ldr	r3, [r3, #8]
 800034e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000352:	431a      	orrs	r2, r3
 8000354:	4b09      	ldr	r3, [pc, #36]	; (800037c <adns2610_resetCOM+0x8c>)
 8000356:	681b      	ldr	r3, [r3, #0]
 8000358:	689b      	ldr	r3, [r3, #8]
 800035a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800035e:	4313      	orrs	r3, r2
 8000360:	2b00      	cmp	r3, #0
 8000362:	d1ec      	bne.n	800033e <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 8000364:	2064      	movs	r0, #100	; 0x64
 8000366:	f002 fd31 	bl	8002dcc <LL_mDelay>
}
 800036a:	bf00      	nop
 800036c:	3708      	adds	r7, #8
 800036e:	46bd      	mov	sp, r7
 8000370:	bd80      	pop	{r7, pc}
 8000372:	bf00      	nop
 8000374:	40003800 	.word	0x40003800
 8000378:	40003c00 	.word	0x40003c00
 800037c:	20000088 	.word	0x20000088

08000380 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 8000380:	b580      	push	{r7, lr}
 8000382:	b084      	sub	sp, #16
 8000384:	af00      	add	r7, sp, #0
 8000386:	4603      	mov	r3, r0
 8000388:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 800038a:	79fb      	ldrb	r3, [r7, #7]
 800038c:	2b00      	cmp	r3, #0
 800038e:	d101      	bne.n	8000394 <adns2610_config+0x14>
 8000390:	4b2b      	ldr	r3, [pc, #172]	; (8000440 <adns2610_config+0xc0>)
 8000392:	e000      	b.n	8000396 <adns2610_config+0x16>
 8000394:	4b2b      	ldr	r3, [pc, #172]	; (8000444 <adns2610_config+0xc4>)
 8000396:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000398:	68f9      	ldr	r1, [r7, #12]
 800039a:	482b      	ldr	r0, [pc, #172]	; (8000448 <adns2610_config+0xc8>)
 800039c:	f002 fd7e 	bl	8002e9c <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 80003a0:	492a      	ldr	r1, [pc, #168]	; (800044c <adns2610_config+0xcc>)
 80003a2:	482b      	ldr	r0, [pc, #172]	; (8000450 <adns2610_config+0xd0>)
 80003a4:	f002 fd7a 	bl	8002e9c <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 80003a8:	79fb      	ldrb	r3, [r7, #7]
 80003aa:	2201      	movs	r2, #1
 80003ac:	2100      	movs	r1, #0
 80003ae:	4618      	mov	r0, r3
 80003b0:	f000 f8be 	bl	8000530 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 80003b4:	4925      	ldr	r1, [pc, #148]	; (800044c <adns2610_config+0xcc>)
 80003b6:	4827      	ldr	r0, [pc, #156]	; (8000454 <adns2610_config+0xd4>)
 80003b8:	f002 fd70 	bl	8002e9c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 80003bc:	79fb      	ldrb	r3, [r7, #7]
 80003be:	2100      	movs	r1, #0
 80003c0:	4618      	mov	r0, r3
 80003c2:	f000 f857 	bl	8000474 <adns2610_readRegister>
 80003c6:	4603      	mov	r3, r0
 80003c8:	2b01      	cmp	r3, #1
 80003ca:	d10f      	bne.n	80003ec <adns2610_config+0x6c>
 80003cc:	4822      	ldr	r0, [pc, #136]	; (8000458 <adns2610_config+0xd8>)
 80003ce:	f002 fdd9 	bl	8002f84 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 80003d2:	4922      	ldr	r1, [pc, #136]	; (800045c <adns2610_config+0xdc>)
 80003d4:	4822      	ldr	r0, [pc, #136]	; (8000460 <adns2610_config+0xe0>)
 80003d6:	f002 fd61 	bl	8002e9c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003da:	79fb      	ldrb	r3, [r7, #7]
 80003dc:	2101      	movs	r1, #1
 80003de:	4618      	mov	r0, r3
 80003e0:	f000 f848 	bl	8000474 <adns2610_readRegister>
 80003e4:	4603      	mov	r3, r0
 80003e6:	2b01      	cmp	r3, #1
 80003e8:	d116      	bne.n	8000418 <adns2610_config+0x98>
 80003ea:	e003      	b.n	80003f4 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 80003ec:	481d      	ldr	r0, [pc, #116]	; (8000464 <adns2610_config+0xe4>)
 80003ee:	f002 fdc9 	bl	8002f84 <puts>
 80003f2:	e7fe      	b.n	80003f2 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 80003f4:	4818      	ldr	r0, [pc, #96]	; (8000458 <adns2610_config+0xd8>)
 80003f6:	f002 fdc5 	bl	8002f84 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 80003fa:	491b      	ldr	r1, [pc, #108]	; (8000468 <adns2610_config+0xe8>)
 80003fc:	481b      	ldr	r0, [pc, #108]	; (800046c <adns2610_config+0xec>)
 80003fe:	f002 fd4d 	bl	8002e9c <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000402:	79fb      	ldrb	r3, [r7, #7]
 8000404:	2111      	movs	r1, #17
 8000406:	4618      	mov	r0, r3
 8000408:	f000 f834 	bl	8000474 <adns2610_readRegister>
 800040c:	4603      	mov	r3, r0
 800040e:	f003 030f 	and.w	r3, r3, #15
 8000412:	2b0f      	cmp	r3, #15
 8000414:	d108      	bne.n	8000428 <adns2610_config+0xa8>
 8000416:	e003      	b.n	8000420 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000418:	4812      	ldr	r0, [pc, #72]	; (8000464 <adns2610_config+0xe4>)
 800041a:	f002 fdb3 	bl	8002f84 <puts>
 800041e:	e7fe      	b.n	800041e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000420:	480d      	ldr	r0, [pc, #52]	; (8000458 <adns2610_config+0xd8>)
 8000422:	f002 fdaf 	bl	8002f84 <puts>
 8000426:	e003      	b.n	8000430 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000428:	480e      	ldr	r0, [pc, #56]	; (8000464 <adns2610_config+0xe4>)
 800042a:	f002 fdab 	bl	8002f84 <puts>
 800042e:	e7fe      	b.n	800042e <adns2610_config+0xae>

	printf("\r\n");
 8000430:	480f      	ldr	r0, [pc, #60]	; (8000470 <adns2610_config+0xf0>)
 8000432:	f002 fda7 	bl	8002f84 <puts>
}
 8000436:	bf00      	nop
 8000438:	3710      	adds	r7, #16
 800043a:	46bd      	mov	sp, r7
 800043c:	bd80      	pop	{r7, pc}
 800043e:	bf00      	nop
 8000440:	08003d44 	.word	0x08003d44
 8000444:	08003d54 	.word	0x08003d54
 8000448:	08003d64 	.word	0x08003d64
 800044c:	08003dc0 	.word	0x08003dc0
 8000450:	08003dd0 	.word	0x08003dd0
 8000454:	08003e00 	.word	0x08003e00
 8000458:	08003e2c 	.word	0x08003e2c
 800045c:	08003e3c 	.word	0x08003e3c
 8000460:	08003e4c 	.word	0x08003e4c
 8000464:	08003e34 	.word	0x08003e34
 8000468:	08003e78 	.word	0x08003e78
 800046c:	08003e8c 	.word	0x08003e8c
 8000470:	08003ec0 	.word	0x08003ec0

08000474 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 8000474:	b580      	push	{r7, lr}
 8000476:	b084      	sub	sp, #16
 8000478:	af00      	add	r7, sp, #0
 800047a:	4603      	mov	r3, r0
 800047c:	460a      	mov	r2, r1
 800047e:	71fb      	strb	r3, [r7, #7]
 8000480:	4613      	mov	r3, r2
 8000482:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 8000484:	79fb      	ldrb	r3, [r7, #7]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d101      	bne.n	800048e <adns2610_readRegister+0x1a>
 800048a:	4b26      	ldr	r3, [pc, #152]	; (8000524 <adns2610_readRegister+0xb0>)
 800048c:	e000      	b.n	8000490 <adns2610_readRegister+0x1c>
 800048e:	4b26      	ldr	r3, [pc, #152]	; (8000528 <adns2610_readRegister+0xb4>)
 8000490:	4a26      	ldr	r2, [pc, #152]	; (800052c <adns2610_readRegister+0xb8>)
 8000492:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000494:	bf00      	nop
 8000496:	4b25      	ldr	r3, [pc, #148]	; (800052c <adns2610_readRegister+0xb8>)
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	689b      	ldr	r3, [r3, #8]
 800049c:	f003 0302 	and.w	r3, r3, #2
 80004a0:	2b00      	cmp	r3, #0
 80004a2:	d0f8      	beq.n	8000496 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 80004a4:	4b21      	ldr	r3, [pc, #132]	; (800052c <adns2610_readRegister+0xb8>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	330c      	adds	r3, #12
 80004aa:	79ba      	ldrb	r2, [r7, #6]
 80004ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004ae:	bf00      	nop
 80004b0:	4b1e      	ldr	r3, [pc, #120]	; (800052c <adns2610_readRegister+0xb8>)
 80004b2:	681b      	ldr	r3, [r3, #0]
 80004b4:	689b      	ldr	r3, [r3, #8]
 80004b6:	f003 0301 	and.w	r3, r3, #1
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d0f8      	beq.n	80004b0 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004be:	4b1b      	ldr	r3, [pc, #108]	; (800052c <adns2610_readRegister+0xb8>)
 80004c0:	681b      	ldr	r3, [r3, #0]
 80004c2:	330c      	adds	r3, #12
 80004c4:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 80004c6:	2001      	movs	r0, #1
 80004c8:	f002 fc80 	bl	8002dcc <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 80004cc:	4b17      	ldr	r3, [pc, #92]	; (800052c <adns2610_readRegister+0xb8>)
 80004ce:	681b      	ldr	r3, [r3, #0]
 80004d0:	330c      	adds	r3, #12
 80004d2:	2200      	movs	r2, #0
 80004d4:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80004d6:	bf00      	nop
 80004d8:	4b14      	ldr	r3, [pc, #80]	; (800052c <adns2610_readRegister+0xb8>)
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	689b      	ldr	r3, [r3, #8]
 80004de:	f003 0301 	and.w	r3, r3, #1
 80004e2:	2b00      	cmp	r3, #0
 80004e4:	d0f8      	beq.n	80004d8 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80004e6:	4b11      	ldr	r3, [pc, #68]	; (800052c <adns2610_readRegister+0xb8>)
 80004e8:	681b      	ldr	r3, [r3, #0]
 80004ea:	330c      	adds	r3, #12
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80004f0:	bf00      	nop
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <adns2610_readRegister+0xb8>)
 80004f4:	681b      	ldr	r3, [r3, #0]
 80004f6:	689b      	ldr	r3, [r3, #8]
 80004f8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80004fc:	4b0b      	ldr	r3, [pc, #44]	; (800052c <adns2610_readRegister+0xb8>)
 80004fe:	681b      	ldr	r3, [r3, #0]
 8000500:	689b      	ldr	r3, [r3, #8]
 8000502:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000506:	431a      	orrs	r2, r3
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <adns2610_readRegister+0xb8>)
 800050a:	681b      	ldr	r3, [r3, #0]
 800050c:	689b      	ldr	r3, [r3, #8]
 800050e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000512:	4313      	orrs	r3, r2
 8000514:	2b00      	cmp	r3, #0
 8000516:	d1ec      	bne.n	80004f2 <adns2610_readRegister+0x7e>
	return value;
 8000518:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800051a:	4618      	mov	r0, r3
 800051c:	3710      	adds	r7, #16
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	40003800 	.word	0x40003800
 8000528:	40003c00 	.word	0x40003c00
 800052c:	20000088 	.word	0x20000088

08000530 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
 800053a:	460b      	mov	r3, r1
 800053c:	71bb      	strb	r3, [r7, #6]
 800053e:	4613      	mov	r3, r2
 8000540:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 8000542:	79fb      	ldrb	r3, [r7, #7]
 8000544:	2b00      	cmp	r3, #0
 8000546:	d101      	bne.n	800054c <adns2610_writeRegister+0x1c>
 8000548:	4b26      	ldr	r3, [pc, #152]	; (80005e4 <adns2610_writeRegister+0xb4>)
 800054a:	e000      	b.n	800054e <adns2610_writeRegister+0x1e>
 800054c:	4b26      	ldr	r3, [pc, #152]	; (80005e8 <adns2610_writeRegister+0xb8>)
 800054e:	4a27      	ldr	r2, [pc, #156]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000550:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000552:	4b26      	ldr	r3, [pc, #152]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000554:	681b      	ldr	r3, [r3, #0]
 8000556:	685a      	ldr	r2, [r3, #4]
 8000558:	4b24      	ldr	r3, [pc, #144]	; (80005ec <adns2610_writeRegister+0xbc>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000560:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000562:	bf00      	nop
 8000564:	4b21      	ldr	r3, [pc, #132]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	689b      	ldr	r3, [r3, #8]
 800056a:	f003 0302 	and.w	r3, r3, #2
 800056e:	2b00      	cmp	r3, #0
 8000570:	d0f8      	beq.n	8000564 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 8000572:	797b      	ldrb	r3, [r7, #5]
 8000574:	021b      	lsls	r3, r3, #8
 8000576:	4619      	mov	r1, r3
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800057e:	b2db      	uxtb	r3, r3
 8000580:	461a      	mov	r2, r3
 8000582:	4b1a      	ldr	r3, [pc, #104]	; (80005ec <adns2610_writeRegister+0xbc>)
 8000584:	681b      	ldr	r3, [r3, #0]
 8000586:	430a      	orrs	r2, r1
 8000588:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800058a:	bf00      	nop
 800058c:	4b17      	ldr	r3, [pc, #92]	; (80005ec <adns2610_writeRegister+0xbc>)
 800058e:	681b      	ldr	r3, [r3, #0]
 8000590:	689b      	ldr	r3, [r3, #8]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	2b00      	cmp	r3, #0
 8000598:	d0f8      	beq.n	800058c <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800059a:	4b14      	ldr	r3, [pc, #80]	; (80005ec <adns2610_writeRegister+0xbc>)
 800059c:	681b      	ldr	r3, [r3, #0]
 800059e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80005a0:	bf00      	nop
 80005a2:	4b12      	ldr	r3, [pc, #72]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005a4:	681b      	ldr	r3, [r3, #0]
 80005a6:	689b      	ldr	r3, [r3, #8]
 80005a8:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80005ac:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	689b      	ldr	r3, [r3, #8]
 80005b2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005b6:	431a      	orrs	r2, r3
 80005b8:	4b0c      	ldr	r3, [pc, #48]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	689b      	ldr	r3, [r3, #8]
 80005be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005c2:	4313      	orrs	r3, r2
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d1ec      	bne.n	80005a2 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	685a      	ldr	r2, [r3, #4]
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <adns2610_writeRegister+0xbc>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80005d6:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr
 80005e4:	40003800 	.word	0x40003800
 80005e8:	40003c00 	.word	0x40003c00
 80005ec:	20000088 	.word	0x20000088

080005f0 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 80005f0:	b480      	push	{r7}
 80005f2:	b083      	sub	sp, #12
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	4603      	mov	r3, r0
 80005f8:	6039      	str	r1, [r7, #0]
 80005fa:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80005fc:	79fb      	ldrb	r3, [r7, #7]
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d101      	bne.n	8000606 <adns2610_receiveByte+0x16>
 8000602:	4b19      	ldr	r3, [pc, #100]	; (8000668 <adns2610_receiveByte+0x78>)
 8000604:	e000      	b.n	8000608 <adns2610_receiveByte+0x18>
 8000606:	4b19      	ldr	r3, [pc, #100]	; (800066c <adns2610_receiveByte+0x7c>)
 8000608:	4a19      	ldr	r2, [pc, #100]	; (8000670 <adns2610_receiveByte+0x80>)
 800060a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800060c:	4b18      	ldr	r3, [pc, #96]	; (8000670 <adns2610_receiveByte+0x80>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	330c      	adds	r3, #12
 8000612:	2200      	movs	r2, #0
 8000614:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000616:	bf00      	nop
 8000618:	4b15      	ldr	r3, [pc, #84]	; (8000670 <adns2610_receiveByte+0x80>)
 800061a:	681b      	ldr	r3, [r3, #0]
 800061c:	689b      	ldr	r3, [r3, #8]
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	2b00      	cmp	r3, #0
 8000624:	d0f8      	beq.n	8000618 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000626:	4b12      	ldr	r3, [pc, #72]	; (8000670 <adns2610_receiveByte+0x80>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	330c      	adds	r3, #12
 800062c:	781b      	ldrb	r3, [r3, #0]
 800062e:	b2da      	uxtb	r2, r3
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000634:	bf00      	nop
 8000636:	4b0e      	ldr	r3, [pc, #56]	; (8000670 <adns2610_receiveByte+0x80>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	689b      	ldr	r3, [r3, #8]
 800063c:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000640:	4b0b      	ldr	r3, [pc, #44]	; (8000670 <adns2610_receiveByte+0x80>)
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	689b      	ldr	r3, [r3, #8]
 8000646:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800064a:	431a      	orrs	r2, r3
 800064c:	4b08      	ldr	r3, [pc, #32]	; (8000670 <adns2610_receiveByte+0x80>)
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	689b      	ldr	r3, [r3, #8]
 8000652:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000656:	4313      	orrs	r3, r2
 8000658:	2b00      	cmp	r3, #0
 800065a:	d1ec      	bne.n	8000636 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800065c:	bf00      	nop
 800065e:	370c      	adds	r7, #12
 8000660:	46bd      	mov	sp, r7
 8000662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000666:	4770      	bx	lr
 8000668:	40003800 	.word	0x40003800
 800066c:	40003c00 	.word	0x40003c00
 8000670:	20000088 	.word	0x20000088

08000674 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 8000674:	b480      	push	{r7}
 8000676:	b083      	sub	sp, #12
 8000678:	af00      	add	r7, sp, #0
 800067a:	4603      	mov	r3, r0
 800067c:	460a      	mov	r2, r1
 800067e:	71fb      	strb	r3, [r7, #7]
 8000680:	4613      	mov	r3, r2
 8000682:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 8000684:	79fb      	ldrb	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d101      	bne.n	800068e <adns2610_sendByte+0x1a>
 800068a:	4b12      	ldr	r3, [pc, #72]	; (80006d4 <adns2610_sendByte+0x60>)
 800068c:	e000      	b.n	8000690 <adns2610_sendByte+0x1c>
 800068e:	4b12      	ldr	r3, [pc, #72]	; (80006d8 <adns2610_sendByte+0x64>)
 8000690:	4a12      	ldr	r2, [pc, #72]	; (80006dc <adns2610_sendByte+0x68>)
 8000692:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000694:	bf00      	nop
 8000696:	4b11      	ldr	r3, [pc, #68]	; (80006dc <adns2610_sendByte+0x68>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0302 	and.w	r3, r3, #2
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 80006a4:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <adns2610_sendByte+0x68>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	79ba      	ldrb	r2, [r7, #6]
 80006ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80006ae:	bf00      	nop
 80006b0:	4b0a      	ldr	r3, [pc, #40]	; (80006dc <adns2610_sendByte+0x68>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	689b      	ldr	r3, [r3, #8]
 80006b6:	f003 0301 	and.w	r3, r3, #1
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f8      	beq.n	80006b0 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006be:	4b07      	ldr	r3, [pc, #28]	; (80006dc <adns2610_sendByte+0x68>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	330c      	adds	r3, #12
 80006c4:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80006c6:	bf00      	nop
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr
 80006d2:	bf00      	nop
 80006d4:	40003800 	.word	0x40003800
 80006d8:	40003c00 	.word	0x40003c00
 80006dc:	20000088 	.word	0x20000088

080006e0 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 80006e8:	687b      	ldr	r3, [r7, #4]
 80006ea:	781b      	ldrb	r3, [r3, #0]
 80006ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80006f0:	2b00      	cmp	r3, #0
 80006f2:	d008      	beq.n	8000706 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	781b      	ldrb	r3, [r3, #0]
 80006f8:	b25b      	sxtb	r3, r3
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	da01      	bge.n	8000702 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 80006fe:	2300      	movs	r3, #0
 8000700:	e009      	b.n	8000716 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000702:	2302      	movs	r3, #2
 8000704:	e007      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	781b      	ldrb	r3, [r3, #0]
 800070a:	b25b      	sxtb	r3, r3
 800070c:	2b00      	cmp	r3, #0
 800070e:	da01      	bge.n	8000714 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000710:	2301      	movs	r3, #1
 8000712:	e000      	b.n	8000716 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000714:	2303      	movs	r3, #3
	}
}
 8000716:	4618      	mov	r0, r3
 8000718:	370c      	adds	r7, #12
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <adns2610_printImage>:
/**
 * @brief Print the received frame values in the console through UART
 * @param frame	The array which contains the pixel values
 */
void adns2610_printImage(pixelTypeDef frame[]){
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	uint16_t i = 0;
 800072c:	2300      	movs	r3, #0
 800072e:	81fb      	strh	r3, [r7, #14]

	printf("=======================================================\r\n||");
 8000730:	481c      	ldr	r0, [pc, #112]	; (80007a4 <adns2610_printImage+0x80>)
 8000732:	f002 fbb3 	bl	8002e9c <iprintf>

	while(i < PIXEL_QTY){
 8000736:	e029      	b.n	800078c <adns2610_printImage+0x68>
		if(!(i % 18) & (i > 1)){
 8000738:	89fa      	ldrh	r2, [r7, #14]
 800073a:	4b1b      	ldr	r3, [pc, #108]	; (80007a8 <adns2610_printImage+0x84>)
 800073c:	fba3 1302 	umull	r1, r3, r3, r2
 8000740:	0899      	lsrs	r1, r3, #2
 8000742:	460b      	mov	r3, r1
 8000744:	00db      	lsls	r3, r3, #3
 8000746:	440b      	add	r3, r1
 8000748:	005b      	lsls	r3, r3, #1
 800074a:	1ad3      	subs	r3, r2, r3
 800074c:	b29b      	uxth	r3, r3
 800074e:	2b00      	cmp	r3, #0
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2da      	uxtb	r2, r3
 8000758:	89fb      	ldrh	r3, [r7, #14]
 800075a:	2b01      	cmp	r3, #1
 800075c:	bf8c      	ite	hi
 800075e:	2301      	movhi	r3, #1
 8000760:	2300      	movls	r3, #0
 8000762:	b2db      	uxtb	r3, r3
 8000764:	4013      	ands	r3, r2
 8000766:	b2db      	uxtb	r3, r3
 8000768:	2b00      	cmp	r3, #0
 800076a:	d002      	beq.n	8000772 <adns2610_printImage+0x4e>
			printf("||\r\n||");
 800076c:	480f      	ldr	r0, [pc, #60]	; (80007ac <adns2610_printImage+0x88>)
 800076e:	f002 fb95 	bl	8002e9c <iprintf>
		}
		printf("%02d ", frame[i] & ADNS2610_PIXEL_DATA);
 8000772:	89fb      	ldrh	r3, [r7, #14]
 8000774:	687a      	ldr	r2, [r7, #4]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800077e:	4619      	mov	r1, r3
 8000780:	480b      	ldr	r0, [pc, #44]	; (80007b0 <adns2610_printImage+0x8c>)
 8000782:	f002 fb8b 	bl	8002e9c <iprintf>
		i++;
 8000786:	89fb      	ldrh	r3, [r7, #14]
 8000788:	3301      	adds	r3, #1
 800078a:	81fb      	strh	r3, [r7, #14]
	while(i < PIXEL_QTY){
 800078c:	89fb      	ldrh	r3, [r7, #14]
 800078e:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000792:	d3d1      	bcc.n	8000738 <adns2610_printImage+0x14>
	}

	printf("||\r\n=======================================================\r\n");
 8000794:	4807      	ldr	r0, [pc, #28]	; (80007b4 <adns2610_printImage+0x90>)
 8000796:	f002 fbf5 	bl	8002f84 <puts>
}
 800079a:	bf00      	nop
 800079c:	3710      	adds	r7, #16
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	08003ec4 	.word	0x08003ec4
 80007a8:	38e38e39 	.word	0x38e38e39
 80007ac:	08003f00 	.word	0x08003f00
 80007b0:	08003f08 	.word	0x08003f08
 80007b4:	08003f10 	.word	0x08003f10

080007b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	db0b      	blt.n	80007e2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ca:	79fb      	ldrb	r3, [r7, #7]
 80007cc:	f003 021f 	and.w	r2, r3, #31
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <__NVIC_EnableIRQ+0x38>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	095b      	lsrs	r3, r3, #5
 80007d8:	2001      	movs	r0, #1
 80007da:	fa00 f202 	lsl.w	r2, r0, r2
 80007de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80007e2:	bf00      	nop
 80007e4:	370c      	adds	r7, #12
 80007e6:	46bd      	mov	sp, r7
 80007e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ec:	4770      	bx	lr
 80007ee:	bf00      	nop
 80007f0:	e000e100 	.word	0xe000e100

080007f4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b083      	sub	sp, #12
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	4603      	mov	r3, r0
 80007fc:	6039      	str	r1, [r7, #0]
 80007fe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000800:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000804:	2b00      	cmp	r3, #0
 8000806:	db0a      	blt.n	800081e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000808:	683b      	ldr	r3, [r7, #0]
 800080a:	b2da      	uxtb	r2, r3
 800080c:	490c      	ldr	r1, [pc, #48]	; (8000840 <__NVIC_SetPriority+0x4c>)
 800080e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000812:	0112      	lsls	r2, r2, #4
 8000814:	b2d2      	uxtb	r2, r2
 8000816:	440b      	add	r3, r1
 8000818:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800081c:	e00a      	b.n	8000834 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081e:	683b      	ldr	r3, [r7, #0]
 8000820:	b2da      	uxtb	r2, r3
 8000822:	4908      	ldr	r1, [pc, #32]	; (8000844 <__NVIC_SetPriority+0x50>)
 8000824:	79fb      	ldrb	r3, [r7, #7]
 8000826:	f003 030f 	and.w	r3, r3, #15
 800082a:	3b04      	subs	r3, #4
 800082c:	0112      	lsls	r2, r2, #4
 800082e:	b2d2      	uxtb	r2, r2
 8000830:	440b      	add	r3, r1
 8000832:	761a      	strb	r2, [r3, #24]
}
 8000834:	bf00      	nop
 8000836:	370c      	adds	r7, #12
 8000838:	46bd      	mov	sp, r7
 800083a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083e:	4770      	bx	lr
 8000840:	e000e100 	.word	0xe000e100
 8000844:	e000ed00 	.word	0xe000ed00

08000848 <eyes_init>:
void eyes_FSM(void);
__STATIC_INLINE void eyes_waitIT(uint32_t Count250ns);
__STATIC_INLINE void eyes_stopWaitIT();
bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2);

void eyes_init(){
 8000848:	b580      	push	{r7, lr}
 800084a:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 800084c:	f000 f948 	bl	8000ae0 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 8000850:	2000      	movs	r0, #0
 8000852:	f7ff fd0d 	bl	8000270 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
#endif

	// Giving initial values to variables
	currentFrameIdx = 1;
 8000856:	4b04      	ldr	r3, [pc, #16]	; (8000868 <eyes_init+0x20>)
 8000858:	2201      	movs	r2, #1
 800085a:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 0;
 800085c:	4b03      	ldr	r3, [pc, #12]	; (800086c <eyes_init+0x24>)
 800085e:	2200      	movs	r2, #0
 8000860:	701a      	strb	r2, [r3, #0]
}
 8000862:	bf00      	nop
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	200000a8 	.word	0x200000a8
 800086c:	200000a9 	.word	0x200000a9

08000870 <eyes_start>:

void eyes_start(){
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000874:	4b06      	ldr	r3, [pc, #24]	; (8000890 <eyes_start+0x20>)
 8000876:	681b      	ldr	r3, [r3, #0]
 8000878:	4a05      	ldr	r2, [pc, #20]	; (8000890 <eyes_start+0x20>)
 800087a:	f043 0301 	orr.w	r3, r3, #1
 800087e:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000880:	4b04      	ldr	r3, [pc, #16]	; (8000894 <eyes_start+0x24>)
 8000882:	2201      	movs	r2, #1
 8000884:	701a      	strb	r2, [r3, #0]
}
 8000886:	bf00      	nop
 8000888:	46bd      	mov	sp, r7
 800088a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088e:	4770      	bx	lr
 8000890:	40012c00 	.word	0x40012c00
 8000894:	2000008c 	.word	0x2000008c

08000898 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000898:	b580      	push	{r7, lr}
 800089a:	b082      	sub	sp, #8
 800089c:	af00      	add	r7, sp, #0
	static bool firstRead = true;

	static uint8_t collisionFlag = 0;
	static uint8_t errorCounter = 0;

	switch(FSMstate){
 800089e:	4b83      	ldr	r3, [pc, #524]	; (8000aac <eyes_FSM+0x214>)
 80008a0:	781b      	ldrb	r3, [r3, #0]
 80008a2:	2b04      	cmp	r3, #4
 80008a4:	f200 80f8 	bhi.w	8000a98 <eyes_FSM+0x200>
 80008a8:	a201      	add	r2, pc, #4	; (adr r2, 80008b0 <eyes_FSM+0x18>)
 80008aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008ae:	bf00      	nop
 80008b0:	080008c5 	.word	0x080008c5
 80008b4:	080008d7 	.word	0x080008d7
 80008b8:	080009ed 	.word	0x080009ed
 80008bc:	08000931 	.word	0x08000931
 80008c0:	08000a5b 	.word	0x08000a5b
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;

		pixelIdx[ADNS2610_RIGHT] = 0;
 80008c4:	4b7a      	ldr	r3, [pc, #488]	; (8000ab0 <eyes_FSM+0x218>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_RIGHT] = 0;
#endif
		eyes_stopWaitIT();
 80008ca:	f000 f96f 	bl	8000bac <eyes_stopWaitIT>
		collisionFlag = 0;
 80008ce:	4b79      	ldr	r3, [pc, #484]	; (8000ab4 <eyes_FSM+0x21c>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	701a      	strb	r2, [r3, #0]
		return;
 80008d4:	e0e6      	b.n	8000aa4 <eyes_FSM+0x20c>
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 80008d6:	f000 f969 	bl	8000bac <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80008da:	4b76      	ldr	r3, [pc, #472]	; (8000ab4 <eyes_FSM+0x21c>)
 80008dc:	781b      	ldrb	r3, [r3, #0]
 80008de:	2b00      	cmp	r3, #0
 80008e0:	f040 80d5 	bne.w	8000a8e <eyes_FSM+0x1f6>
 80008e4:	4b73      	ldr	r3, [pc, #460]	; (8000ab4 <eyes_FSM+0x21c>)
 80008e6:	2201      	movs	r2, #1
 80008e8:	701a      	strb	r2, [r3, #0]
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 80008ea:	2201      	movs	r2, #1
 80008ec:	2108      	movs	r1, #8
 80008ee:	2000      	movs	r0, #0
 80008f0:	f7ff fe1e 	bl	8000530 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 80008f4:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 80008f8:	f000 f930 	bl	8000b5c <eyes_waitIT>
		firstRead = true;
 80008fc:	4b6e      	ldr	r3, [pc, #440]	; (8000ab8 <eyes_FSM+0x220>)
 80008fe:	2201      	movs	r2, #1
 8000900:	701a      	strb	r2, [r3, #0]
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 8000902:	4b6e      	ldr	r3, [pc, #440]	; (8000abc <eyes_FSM+0x224>)
 8000904:	781b      	ldrb	r3, [r3, #0]
 8000906:	71fb      	strb	r3, [r7, #7]
 8000908:	4b6d      	ldr	r3, [pc, #436]	; (8000ac0 <eyes_FSM+0x228>)
 800090a:	781a      	ldrb	r2, [r3, #0]
 800090c:	4b6b      	ldr	r3, [pc, #428]	; (8000abc <eyes_FSM+0x224>)
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	4a6b      	ldr	r2, [pc, #428]	; (8000ac0 <eyes_FSM+0x228>)
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	7013      	strb	r3, [r2, #0]
		FSMstate = REQ_READING_FRAME;
 8000916:	4b65      	ldr	r3, [pc, #404]	; (8000aac <eyes_FSM+0x214>)
 8000918:	2203      	movs	r2, #3
 800091a:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 800091c:	4b64      	ldr	r3, [pc, #400]	; (8000ab0 <eyes_FSM+0x218>)
 800091e:	2200      	movs	r2, #0
 8000920:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
#endif
		collisionFlag = 0;
 8000922:	4b64      	ldr	r3, [pc, #400]	; (8000ab4 <eyes_FSM+0x21c>)
 8000924:	2200      	movs	r2, #0
 8000926:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000928:	4b66      	ldr	r3, [pc, #408]	; (8000ac4 <eyes_FSM+0x22c>)
 800092a:	2200      	movs	r2, #0
 800092c:	701a      	strb	r2, [r3, #0]
		return;
 800092e:	e0b9      	b.n	8000aa4 <eyes_FSM+0x20c>
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 8000930:	f000 f93c 	bl	8000bac <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000934:	4b5f      	ldr	r3, [pc, #380]	; (8000ab4 <eyes_FSM+0x21c>)
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	2b00      	cmp	r3, #0
 800093a:	f040 80aa 	bne.w	8000a92 <eyes_FSM+0x1fa>
 800093e:	4b5d      	ldr	r3, [pc, #372]	; (8000ab4 <eyes_FSM+0x21c>)
 8000940:	2201      	movs	r2, #1
 8000942:	701a      	strb	r2, [r3, #0]
		adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000944:	2108      	movs	r1, #8
 8000946:	2000      	movs	r0, #0
 8000948:	f7ff fe94 	bl	8000674 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
#endif
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 800094c:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8000950:	f000 f904 	bl	8000b5c <eyes_waitIT>
		if(!firstRead){
 8000954:	4b58      	ldr	r3, [pc, #352]	; (8000ab8 <eyes_FSM+0x220>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	f083 0301 	eor.w	r3, r3, #1
 800095c:	b2db      	uxtb	r3, r3
 800095e:	2b00      	cmp	r3, #0
 8000960:	d03a      	beq.n	80009d8 <eyes_FSM+0x140>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000962:	4b57      	ldr	r3, [pc, #348]	; (8000ac0 <eyes_FSM+0x228>)
 8000964:	781b      	ldrb	r3, [r3, #0]
 8000966:	4619      	mov	r1, r3
 8000968:	4b51      	ldr	r3, [pc, #324]	; (8000ab0 <eyes_FSM+0x218>)
 800096a:	881b      	ldrh	r3, [r3, #0]
 800096c:	461a      	mov	r2, r3
 800096e:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8000972:	fb03 f301 	mul.w	r3, r3, r1
 8000976:	4413      	add	r3, r2
 8000978:	4a53      	ldr	r2, [pc, #332]	; (8000ac8 <eyes_FSM+0x230>)
 800097a:	4413      	add	r3, r2
 800097c:	4618      	mov	r0, r3
 800097e:	f7ff feaf 	bl	80006e0 <adns2610_checkPixel>
 8000982:	4603      	mov	r3, r0
 8000984:	461a      	mov	r2, r3
 8000986:	4b51      	ldr	r3, [pc, #324]	; (8000acc <eyes_FSM+0x234>)
 8000988:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 800098a:	4b51      	ldr	r3, [pc, #324]	; (8000ad0 <eyes_FSM+0x238>)
 800098c:	4a48      	ldr	r2, [pc, #288]	; (8000ab0 <eyes_FSM+0x218>)
 800098e:	4951      	ldr	r1, [pc, #324]	; (8000ad4 <eyes_FSM+0x23c>)
 8000990:	484e      	ldr	r0, [pc, #312]	; (8000acc <eyes_FSM+0x234>)
 8000992:	f000 f91b 	bl	8000bcc <eyes_computeIdxFromStatus>
 8000996:	4603      	mov	r3, r0
 8000998:	2b00      	cmp	r3, #0
 800099a:	d011      	beq.n	80009c0 <eyes_FSM+0x128>
				FSMstate = READING_FRAME;
 800099c:	4b43      	ldr	r3, [pc, #268]	; (8000aac <eyes_FSM+0x214>)
 800099e:	2202      	movs	r2, #2
 80009a0:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)) errorCounter++;
 80009a2:	4b4a      	ldr	r3, [pc, #296]	; (8000acc <eyes_FSM+0x234>)
 80009a4:	781b      	ldrb	r3, [r3, #0]
 80009a6:	2b03      	cmp	r3, #3
 80009a8:	d003      	beq.n	80009b2 <eyes_FSM+0x11a>
 80009aa:	4b48      	ldr	r3, [pc, #288]	; (8000acc <eyes_FSM+0x234>)
 80009ac:	781b      	ldrb	r3, [r3, #0]
 80009ae:	2b01      	cmp	r3, #1
 80009b0:	d118      	bne.n	80009e4 <eyes_FSM+0x14c>
 80009b2:	4b44      	ldr	r3, [pc, #272]	; (8000ac4 <eyes_FSM+0x22c>)
 80009b4:	781b      	ldrb	r3, [r3, #0]
 80009b6:	3301      	adds	r3, #1
 80009b8:	b2da      	uxtb	r2, r3
 80009ba:	4b42      	ldr	r3, [pc, #264]	; (8000ac4 <eyes_FSM+0x22c>)
 80009bc:	701a      	strb	r2, [r3, #0]
 80009be:	e011      	b.n	80009e4 <eyes_FSM+0x14c>
			}
			else{
				eyes_stopWaitIT();
 80009c0:	f000 f8f4 	bl	8000bac <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 80009c4:	4b39      	ldr	r3, [pc, #228]	; (8000aac <eyes_FSM+0x214>)
 80009c6:	2201      	movs	r2, #1
 80009c8:	701a      	strb	r2, [r3, #0]
				LL_mDelay(90);
 80009ca:	205a      	movs	r0, #90	; 0x5a
 80009cc:	f002 f9fe 	bl	8002dcc <LL_mDelay>
				eyes_waitIT(1);
 80009d0:	2001      	movs	r0, #1
 80009d2:	f000 f8c3 	bl	8000b5c <eyes_waitIT>
 80009d6:	e005      	b.n	80009e4 <eyes_FSM+0x14c>
			}
		}
		else{
			firstRead = false;
 80009d8:	4b37      	ldr	r3, [pc, #220]	; (8000ab8 <eyes_FSM+0x220>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 80009de:	4b33      	ldr	r3, [pc, #204]	; (8000aac <eyes_FSM+0x214>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 80009e4:	4b33      	ldr	r3, [pc, #204]	; (8000ab4 <eyes_FSM+0x21c>)
 80009e6:	2200      	movs	r2, #0
 80009e8:	701a      	strb	r2, [r3, #0]
		return;
 80009ea:	e05b      	b.n	8000aa4 <eyes_FSM+0x20c>
	case READING_FRAME:
		eyes_stopWaitIT();
 80009ec:	f000 f8de 	bl	8000bac <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 80009f0:	4b30      	ldr	r3, [pc, #192]	; (8000ab4 <eyes_FSM+0x21c>)
 80009f2:	781b      	ldrb	r3, [r3, #0]
 80009f4:	2b00      	cmp	r3, #0
 80009f6:	d14e      	bne.n	8000a96 <eyes_FSM+0x1fe>
 80009f8:	4b2e      	ldr	r3, [pc, #184]	; (8000ab4 <eyes_FSM+0x21c>)
 80009fa:	2201      	movs	r2, #1
 80009fc:	701a      	strb	r2, [r3, #0]
		adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 80009fe:	4b30      	ldr	r3, [pc, #192]	; (8000ac0 <eyes_FSM+0x228>)
 8000a00:	781b      	ldrb	r3, [r3, #0]
 8000a02:	4619      	mov	r1, r3
 8000a04:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <eyes_FSM+0x218>)
 8000a06:	881b      	ldrh	r3, [r3, #0]
 8000a08:	461a      	mov	r2, r3
 8000a0a:	f44f 732b 	mov.w	r3, #684	; 0x2ac
 8000a0e:	fb03 f301 	mul.w	r3, r3, r1
 8000a12:	4413      	add	r3, r2
 8000a14:	4a2c      	ldr	r2, [pc, #176]	; (8000ac8 <eyes_FSM+0x230>)
 8000a16:	4413      	add	r3, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	2000      	movs	r0, #0
 8000a1c:	f7ff fde8 	bl	80005f0 <adns2610_receiveByte>
		}
		else{
			FSMstate = REQ_READING_FRAME;
		}
#else
		if(pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1){
 8000a20:	4b23      	ldr	r3, [pc, #140]	; (8000ab0 <eyes_FSM+0x218>)
 8000a22:	881b      	ldrh	r3, [r3, #0]
 8000a24:	f240 1243 	movw	r2, #323	; 0x143
 8000a28:	4293      	cmp	r3, r2
 8000a2a:	d10c      	bne.n	8000a46 <eyes_FSM+0x1ae>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000a2c:	4b28      	ldr	r3, [pc, #160]	; (8000ad0 <eyes_FSM+0x238>)
 8000a2e:	4a20      	ldr	r2, [pc, #128]	; (8000ab0 <eyes_FSM+0x218>)
 8000a30:	4928      	ldr	r1, [pc, #160]	; (8000ad4 <eyes_FSM+0x23c>)
 8000a32:	4826      	ldr	r0, [pc, #152]	; (8000acc <eyes_FSM+0x234>)
 8000a34:	f000 f8ca 	bl	8000bcc <eyes_computeIdxFromStatus>
 8000a38:	4603      	mov	r3, r0
 8000a3a:	2b00      	cmp	r3, #0
 8000a3c:	d006      	beq.n	8000a4c <eyes_FSM+0x1b4>
				FSMstate = PROCESSING;
 8000a3e:	4b1b      	ldr	r3, [pc, #108]	; (8000aac <eyes_FSM+0x214>)
 8000a40:	2204      	movs	r2, #4
 8000a42:	701a      	strb	r2, [r3, #0]
 8000a44:	e002      	b.n	8000a4c <eyes_FSM+0x1b4>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000a46:	4b19      	ldr	r3, [pc, #100]	; (8000aac <eyes_FSM+0x214>)
 8000a48:	2203      	movs	r2, #3
 8000a4a:	701a      	strb	r2, [r3, #0]
		}
#endif
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a4c:	20c8      	movs	r0, #200	; 0xc8
 8000a4e:	f000 f885 	bl	8000b5c <eyes_waitIT>
		collisionFlag = 0;
 8000a52:	4b18      	ldr	r3, [pc, #96]	; (8000ab4 <eyes_FSM+0x21c>)
 8000a54:	2200      	movs	r2, #0
 8000a56:	701a      	strb	r2, [r3, #0]
		return;
 8000a58:	e024      	b.n	8000aa4 <eyes_FSM+0x20c>
	case PROCESSING:
		eyes_stopWaitIT();
 8000a5a:	f000 f8a7 	bl	8000bac <eyes_stopWaitIT>
		printf("PROCESSING STATE: %d errors.\r\n", errorCounter);
 8000a5e:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <eyes_FSM+0x22c>)
 8000a60:	781b      	ldrb	r3, [r3, #0]
 8000a62:	4619      	mov	r1, r3
 8000a64:	481c      	ldr	r0, [pc, #112]	; (8000ad8 <eyes_FSM+0x240>)
 8000a66:	f002 fa19 	bl	8002e9c <iprintf>
		adns2610_printImage(frames->frame[ADNS2610_RIGHT]);
 8000a6a:	4817      	ldr	r0, [pc, #92]	; (8000ac8 <eyes_FSM+0x230>)
 8000a6c:	f7ff fe5a 	bl	8000724 <adns2610_printImage>
		if(errorCounter > 10) LL_mDelay(1000);
 8000a70:	4b14      	ldr	r3, [pc, #80]	; (8000ac4 <eyes_FSM+0x22c>)
 8000a72:	781b      	ldrb	r3, [r3, #0]
 8000a74:	2b0a      	cmp	r3, #10
 8000a76:	d903      	bls.n	8000a80 <eyes_FSM+0x1e8>
 8000a78:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000a7c:	f002 f9a6 	bl	8002dcc <LL_mDelay>
		FSMstate = TRIGGER_FRAME;
 8000a80:	4b0a      	ldr	r3, [pc, #40]	; (8000aac <eyes_FSM+0x214>)
 8000a82:	2201      	movs	r2, #1
 8000a84:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000a86:	20c8      	movs	r0, #200	; 0xc8
 8000a88:	f000 f868 	bl	8000b5c <eyes_waitIT>
		return;
 8000a8c:	e00a      	b.n	8000aa4 <eyes_FSM+0x20c>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a8e:	bf00      	nop
 8000a90:	e002      	b.n	8000a98 <eyes_FSM+0x200>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a92:	bf00      	nop
 8000a94:	e000      	b.n	8000a98 <eyes_FSM+0x200>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000a96:	bf00      	nop
	}

	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8000a98:	4810      	ldr	r0, [pc, #64]	; (8000adc <eyes_FSM+0x244>)
 8000a9a:	f002 fa73 	bl	8002f84 <puts>
		eyes_stopWaitIT();
 8000a9e:	f000 f885 	bl	8000bac <eyes_stopWaitIT>
		while(1);
 8000aa2:	e7fe      	b.n	8000aa2 <eyes_FSM+0x20a>
}
 8000aa4:	3708      	adds	r7, #8
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	bd80      	pop	{r7, pc}
 8000aaa:	bf00      	nop
 8000aac:	2000008c 	.word	0x2000008c
 8000ab0:	20000090 	.word	0x20000090
 8000ab4:	20000094 	.word	0x20000094
 8000ab8:	20000000 	.word	0x20000000
 8000abc:	200000a9 	.word	0x200000a9
 8000ac0:	200000a8 	.word	0x200000a8
 8000ac4:	20000095 	.word	0x20000095
 8000ac8:	200000ac 	.word	0x200000ac
 8000acc:	20000098 	.word	0x20000098
 8000ad0:	20000092 	.word	0x20000092
 8000ad4:	20000099 	.word	0x20000099
 8000ad8:	08003f50 	.word	0x08003f50
 8000adc:	08003f70 	.word	0x08003f70

08000ae0 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b082      	sub	sp, #8
 8000ae4:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8000ae6:	4b1c      	ldr	r3, [pc, #112]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000aec:	4b1a      	ldr	r3, [pc, #104]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000aee:	68db      	ldr	r3, [r3, #12]
 8000af0:	4a19      	ldr	r2, [pc, #100]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000af2:	f023 0301 	bic.w	r3, r3, #1
 8000af6:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	f003 0302 	and.w	r3, r3, #2
 8000afe:	f043 0304 	orr.w	r3, r3, #4
 8000b02:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8000b04:	4a14      	ldr	r2, [pc, #80]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b0c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
 8000b10:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000b12:	4b11      	ldr	r3, [pc, #68]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b14:	695b      	ldr	r3, [r3, #20]
 8000b16:	4a10      	ldr	r2, [pc, #64]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000b1e:	4b0e      	ldr	r3, [pc, #56]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b20:	691b      	ldr	r3, [r3, #16]
 8000b22:	4a0d      	ldr	r2, [pc, #52]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b24:	f023 0301 	bic.w	r3, r3, #1
 8000b28:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b2a:	4b0b      	ldr	r3, [pc, #44]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b2c:	681b      	ldr	r3, [r3, #0]
 8000b2e:	4a0a      	ldr	r2, [pc, #40]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b30:	f023 0304 	bic.w	r3, r3, #4
 8000b34:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000b36:	4b08      	ldr	r3, [pc, #32]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b38:	68db      	ldr	r3, [r3, #12]
 8000b3a:	4a07      	ldr	r2, [pc, #28]	; (8000b58 <eyes_configureFSM_TIM+0x78>)
 8000b3c:	f043 0301 	orr.w	r3, r3, #1
 8000b40:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8000b42:	2100      	movs	r1, #0
 8000b44:	2019      	movs	r0, #25
 8000b46:	f7ff fe55 	bl	80007f4 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000b4a:	2019      	movs	r0, #25
 8000b4c:	f7ff fe34 	bl	80007b8 <__NVIC_EnableIRQ>
}
 8000b50:	bf00      	nop
 8000b52:	3708      	adds	r7, #8
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}
 8000b58:	40012c00 	.word	0x40012c00

08000b5c <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
 8000b62:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b64:	4b10      	ldr	r3, [pc, #64]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b66:	681b      	ldr	r3, [r3, #0]
 8000b68:	4a0f      	ldr	r2, [pc, #60]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b6a:	f043 0304 	orr.w	r3, r3, #4
 8000b6e:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8000b70:	4a0d      	ldr	r2, [pc, #52]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000b76:	4b0c      	ldr	r3, [pc, #48]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b78:	695b      	ldr	r3, [r3, #20]
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b7c:	f043 0301 	orr.w	r3, r3, #1
 8000b80:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8000b82:	4b09      	ldr	r3, [pc, #36]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b84:	681b      	ldr	r3, [r3, #0]
 8000b86:	4a08      	ldr	r2, [pc, #32]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b88:	f023 0304 	bic.w	r3, r3, #4
 8000b8c:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4a05      	ldr	r2, [pc, #20]	; (8000ba8 <eyes_waitIT+0x4c>)
 8000b94:	f043 0301 	orr.w	r3, r3, #1
 8000b98:	6013      	str	r3, [r2, #0]
}
 8000b9a:	bf00      	nop
 8000b9c:	370c      	adds	r7, #12
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40012c00 	.word	0x40012c00

08000bac <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000bb0:	4b05      	ldr	r3, [pc, #20]	; (8000bc8 <eyes_stopWaitIT+0x1c>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	4a04      	ldr	r2, [pc, #16]	; (8000bc8 <eyes_stopWaitIT+0x1c>)
 8000bb6:	f023 0301 	bic.w	r3, r3, #1
 8000bba:	6013      	str	r3, [r2, #0]
}
 8000bbc:	bf00      	nop
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop
 8000bc8:	40012c00 	.word	0x40012c00

08000bcc <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 8000bcc:	b480      	push	{r7}
 8000bce:	b085      	sub	sp, #20
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	60f8      	str	r0, [r7, #12]
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d10a      	bne.n	8000bf8 <eyes_computeIdxFromStatus+0x2c>
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	881b      	ldrh	r3, [r3, #0]
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d106      	bne.n	8000bf8 <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	881b      	ldrh	r3, [r3, #0]
 8000bee:	3301      	adds	r3, #1
 8000bf0:	b29a      	uxth	r2, r3
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	801a      	strh	r2, [r3, #0]
 8000bf6:	e024      	b.n	8000c42 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	2b02      	cmp	r3, #2
 8000bfe:	d10f      	bne.n	8000c20 <eyes_computeIdxFromStatus+0x54>
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	881b      	ldrh	r3, [r3, #0]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d00b      	beq.n	8000c20 <eyes_computeIdxFromStatus+0x54>
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	881b      	ldrh	r3, [r3, #0]
 8000c0c:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 8000c10:	d806      	bhi.n	8000c20 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	881b      	ldrh	r3, [r3, #0]
 8000c16:	3301      	adds	r3, #1
 8000c18:	b29a      	uxth	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	801a      	strh	r2, [r3, #0]
 8000c1e:	e010      	b.n	8000c42 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 8000c20:	68fb      	ldr	r3, [r7, #12]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d10c      	bne.n	8000c42 <eyes_computeIdxFromStatus+0x76>
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	881b      	ldrh	r3, [r3, #0]
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d008      	beq.n	8000c42 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8000c30:	683b      	ldr	r3, [r7, #0]
 8000c32:	2200      	movs	r2, #0
 8000c34:	801a      	strh	r2, [r3, #0]
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	881a      	ldrh	r2, [r3, #0]
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	801a      	strh	r2, [r3, #0]
		return false;
 8000c3e:	2300      	movs	r3, #0
 8000c40:	e000      	b.n	8000c44 <eyes_computeIdxFromStatus+0x78>
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
		(*idx1) = (*idx2) = 0;
		return false;
	}
#endif
	return true;
 8000c42:	2301      	movs	r3, #1
}
 8000c44:	4618      	mov	r0, r3
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8000c54:	4b07      	ldr	r3, [pc, #28]	; (8000c74 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c56:	691b      	ldr	r3, [r3, #16]
 8000c58:	f003 0301 	and.w	r3, r3, #1
 8000c5c:	2b00      	cmp	r3, #0
 8000c5e:	d007      	beq.n	8000c70 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000c60:	4b04      	ldr	r3, [pc, #16]	; (8000c74 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c62:	691b      	ldr	r3, [r3, #16]
 8000c64:	4a03      	ldr	r2, [pc, #12]	; (8000c74 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000c66:	f023 0301 	bic.w	r3, r3, #1
 8000c6a:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 8000c6c:	f7ff fe14 	bl	8000898 <eyes_FSM>
	}
}
 8000c70:	bf00      	nop
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	40012c00 	.word	0x40012c00

08000c78 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b085      	sub	sp, #20
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000c80:	4b08      	ldr	r3, [pc, #32]	; (8000ca4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c82:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c84:	4907      	ldr	r1, [pc, #28]	; (8000ca4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	4313      	orrs	r3, r2
 8000c8a:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000c8c:	4b05      	ldr	r3, [pc, #20]	; (8000ca4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000c8e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	4013      	ands	r3, r2
 8000c94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000c96:	68fb      	ldr	r3, [r7, #12]
}
 8000c98:	bf00      	nop
 8000c9a:	3714      	adds	r7, #20
 8000c9c:	46bd      	mov	sp, r7
 8000c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca2:	4770      	bx	lr
 8000ca4:	40021000 	.word	0x40021000

08000ca8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	b087      	sub	sp, #28
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
 8000cb0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8000cb2:	4a17      	ldr	r2, [pc, #92]	; (8000d10 <LL_SYSCFG_SetEXTISource+0x68>)
 8000cb4:	683b      	ldr	r3, [r7, #0]
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	3302      	adds	r3, #2
 8000cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000cbe:	683b      	ldr	r3, [r7, #0]
 8000cc0:	0c1b      	lsrs	r3, r3, #16
 8000cc2:	43db      	mvns	r3, r3
 8000cc4:	ea02 0103 	and.w	r1, r2, r3
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	0c1b      	lsrs	r3, r3, #16
 8000ccc:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000cce:	693b      	ldr	r3, [r7, #16]
 8000cd0:	fa93 f3a3 	rbit	r3, r3
 8000cd4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000cd6:	68fb      	ldr	r3, [r7, #12]
 8000cd8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000cda:	697b      	ldr	r3, [r7, #20]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d101      	bne.n	8000ce4 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000ce0:	2320      	movs	r3, #32
 8000ce2:	e003      	b.n	8000cec <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000ce4:	697b      	ldr	r3, [r7, #20]
 8000ce6:	fab3 f383 	clz	r3, r3
 8000cea:	b2db      	uxtb	r3, r3
 8000cec:	461a      	mov	r2, r3
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	fa03 f202 	lsl.w	r2, r3, r2
 8000cf4:	4806      	ldr	r0, [pc, #24]	; (8000d10 <LL_SYSCFG_SetEXTISource+0x68>)
 8000cf6:	683b      	ldr	r3, [r7, #0]
 8000cf8:	b2db      	uxtb	r3, r3
 8000cfa:	430a      	orrs	r2, r1
 8000cfc:	3302      	adds	r3, #2
 8000cfe:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000d02:	bf00      	nop
 8000d04:	371c      	adds	r7, #28
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	40010000 	.word	0x40010000

08000d14 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b08b      	sub	sp, #44	; 0x2c
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	60f8      	str	r0, [r7, #12]
 8000d1c:	60b9      	str	r1, [r7, #8]
 8000d1e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000d20:	68fb      	ldr	r3, [r7, #12]
 8000d22:	681a      	ldr	r2, [r3, #0]
 8000d24:	68bb      	ldr	r3, [r7, #8]
 8000d26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d28:	697b      	ldr	r3, [r7, #20]
 8000d2a:	fa93 f3a3 	rbit	r3, r3
 8000d2e:	613b      	str	r3, [r7, #16]
  return result;
 8000d30:	693b      	ldr	r3, [r7, #16]
 8000d32:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000d34:	69bb      	ldr	r3, [r7, #24]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000d3a:	2320      	movs	r3, #32
 8000d3c:	e003      	b.n	8000d46 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000d3e:	69bb      	ldr	r3, [r7, #24]
 8000d40:	fab3 f383 	clz	r3, r3
 8000d44:	b2db      	uxtb	r3, r3
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2103      	movs	r1, #3
 8000d4a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	401a      	ands	r2, r3
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d56:	6a3b      	ldr	r3, [r7, #32]
 8000d58:	fa93 f3a3 	rbit	r3, r3
 8000d5c:	61fb      	str	r3, [r7, #28]
  return result;
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000d62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	d101      	bne.n	8000d6c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000d68:	2320      	movs	r3, #32
 8000d6a:	e003      	b.n	8000d74 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8000d6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000d6e:	fab3 f383 	clz	r3, r3
 8000d72:	b2db      	uxtb	r3, r3
 8000d74:	005b      	lsls	r3, r3, #1
 8000d76:	6879      	ldr	r1, [r7, #4]
 8000d78:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	372c      	adds	r7, #44	; 0x2c
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b08b      	sub	sp, #44	; 0x2c
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	60f8      	str	r0, [r7, #12]
 8000d96:	60b9      	str	r1, [r7, #8]
 8000d98:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	68da      	ldr	r2, [r3, #12]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
 8000da0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000da2:	697b      	ldr	r3, [r7, #20]
 8000da4:	fa93 f3a3 	rbit	r3, r3
 8000da8:	613b      	str	r3, [r7, #16]
  return result;
 8000daa:	693b      	ldr	r3, [r7, #16]
 8000dac:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000dae:	69bb      	ldr	r3, [r7, #24]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d101      	bne.n	8000db8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8000db4:	2320      	movs	r3, #32
 8000db6:	e003      	b.n	8000dc0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000db8:	69bb      	ldr	r3, [r7, #24]
 8000dba:	fab3 f383 	clz	r3, r3
 8000dbe:	b2db      	uxtb	r3, r3
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2103      	movs	r1, #3
 8000dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	401a      	ands	r2, r3
 8000dcc:	68bb      	ldr	r3, [r7, #8]
 8000dce:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000dd0:	6a3b      	ldr	r3, [r7, #32]
 8000dd2:	fa93 f3a3 	rbit	r3, r3
 8000dd6:	61fb      	str	r3, [r7, #28]
  return result;
 8000dd8:	69fb      	ldr	r3, [r7, #28]
 8000dda:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d101      	bne.n	8000de6 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000de2:	2320      	movs	r3, #32
 8000de4:	e003      	b.n	8000dee <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000de8:	fab3 f383 	clz	r3, r3
 8000dec:	b2db      	uxtb	r3, r3
 8000dee:	005b      	lsls	r3, r3, #1
 8000df0:	6879      	ldr	r1, [r7, #4]
 8000df2:	fa01 f303 	lsl.w	r3, r1, r3
 8000df6:	431a      	orrs	r2, r3
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	60da      	str	r2, [r3, #12]
}
 8000dfc:	bf00      	nop
 8000dfe:	372c      	adds	r7, #44	; 0x2c
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	b083      	sub	sp, #12
 8000e0c:	af00      	add	r7, sp, #0
 8000e0e:	6078      	str	r0, [r7, #4]
 8000e10:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	683a      	ldr	r2, [r7, #0]
 8000e16:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000e18:	bf00      	nop
 8000e1a:	370c      	adds	r7, #12
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	; 0x28
 8000e28:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e46:	2004      	movs	r0, #4
 8000e48:	f7ff ff16 	bl	8000c78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000e4c:	2080      	movs	r0, #128	; 0x80
 8000e4e:	f7ff ff13 	bl	8000c78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000e52:	2001      	movs	r0, #1
 8000e54:	f7ff ff10 	bl	8000c78 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e58:	2002      	movs	r0, #2
 8000e5a:	f7ff ff0d 	bl	8000c78 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000e5e:	2120      	movs	r1, #32
 8000e60:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e64:	f7ff ffd0 	bl	8000e08 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000e68:	491b      	ldr	r1, [pc, #108]	; (8000ed8 <MX_GPIO_Init+0xb4>)
 8000e6a:	2002      	movs	r0, #2
 8000e6c:	f7ff ff1c 	bl	8000ca8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000e70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000e74:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000e76:	2300      	movs	r3, #0
 8000e78:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8000e80:	2300      	movs	r3, #0
 8000e82:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 8000e86:	2302      	movs	r3, #2
 8000e88:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000e8c:	f107 031c 	add.w	r3, r7, #28
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fee5 	bl	8001c60 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 8000e96:	2200      	movs	r2, #0
 8000e98:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000e9c:	480f      	ldr	r0, [pc, #60]	; (8000edc <MX_GPIO_Init+0xb8>)
 8000e9e:	f7ff ff76 	bl	8000d8e <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ea8:	480c      	ldr	r0, [pc, #48]	; (8000edc <MX_GPIO_Init+0xb8>)
 8000eaa:	f7ff ff33 	bl	8000d14 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000eae:	2320      	movs	r3, #32
 8000eb0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000ec2:	1d3b      	adds	r3, r7, #4
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eca:	f001 f900 	bl	80020ce <LL_GPIO_Init>

}
 8000ece:	bf00      	nop
 8000ed0:	3728      	adds	r7, #40	; 0x28
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	00f00003 	.word	0x00f00003
 8000edc:	48000800 	.word	0x48000800

08000ee0 <__NVIC_SetPriorityGrouping>:
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b085      	sub	sp, #20
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f003 0307 	and.w	r3, r3, #7
 8000eee:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ef0:	4b0c      	ldr	r3, [pc, #48]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef2:	68db      	ldr	r3, [r3, #12]
 8000ef4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ef6:	68ba      	ldr	r2, [r7, #8]
 8000ef8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000efc:	4013      	ands	r3, r2
 8000efe:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f00:	68fb      	ldr	r3, [r7, #12]
 8000f02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f04:	68bb      	ldr	r3, [r7, #8]
 8000f06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f12:	4a04      	ldr	r2, [pc, #16]	; (8000f24 <__NVIC_SetPriorityGrouping+0x44>)
 8000f14:	68bb      	ldr	r3, [r7, #8]
 8000f16:	60d3      	str	r3, [r2, #12]
}
 8000f18:	bf00      	nop
 8000f1a:	3714      	adds	r7, #20
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f22:	4770      	bx	lr
 8000f24:	e000ed00 	.word	0xe000ed00

08000f28 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000f2c:	4b05      	ldr	r3, [pc, #20]	; (8000f44 <LL_RCC_HSI_Enable+0x1c>)
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a04      	ldr	r2, [pc, #16]	; (8000f44 <LL_RCC_HSI_Enable+0x1c>)
 8000f32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f36:	6013      	str	r3, [r2, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000f48:	b480      	push	{r7}
 8000f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000f4c:	4b07      	ldr	r3, [pc, #28]	; (8000f6c <LL_RCC_HSI_IsReady+0x24>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000f54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000f58:	d101      	bne.n	8000f5e <LL_RCC_HSI_IsReady+0x16>
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	e000      	b.n	8000f60 <LL_RCC_HSI_IsReady+0x18>
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	40021000 	.word	0x40021000

08000f70 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000f78:	4b07      	ldr	r3, [pc, #28]	; (8000f98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	061b      	lsls	r3, r3, #24
 8000f84:	4904      	ldr	r1, [pc, #16]	; (8000f98 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 8000f86:	4313      	orrs	r3, r2
 8000f88:	604b      	str	r3, [r1, #4]
}
 8000f8a:	bf00      	nop
 8000f8c:	370c      	adds	r7, #12
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f94:	4770      	bx	lr
 8000f96:	bf00      	nop
 8000f98:	40021000 	.word	0x40021000

08000f9c <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000fa4:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <LL_RCC_SetSysClkSource+0x24>)
 8000fa6:	689b      	ldr	r3, [r3, #8]
 8000fa8:	f023 0203 	bic.w	r2, r3, #3
 8000fac:	4904      	ldr	r1, [pc, #16]	; (8000fc0 <LL_RCC_SetSysClkSource+0x24>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	608b      	str	r3, [r1, #8]
}
 8000fb4:	bf00      	nop
 8000fb6:	370c      	adds	r7, #12
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	40021000 	.word	0x40021000

08000fc4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	; (8000fdc <LL_RCC_GetSysClkSource+0x18>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f003 030c 	and.w	r3, r3, #12
}
 8000fd0:	4618      	mov	r0, r3
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd8:	4770      	bx	lr
 8000fda:	bf00      	nop
 8000fdc:	40021000 	.word	0x40021000

08000fe0 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000fe8:	4b06      	ldr	r3, [pc, #24]	; (8001004 <LL_RCC_SetAHBPrescaler+0x24>)
 8000fea:	689b      	ldr	r3, [r3, #8]
 8000fec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ff0:	4904      	ldr	r1, [pc, #16]	; (8001004 <LL_RCC_SetAHBPrescaler+0x24>)
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	4313      	orrs	r3, r2
 8000ff6:	608b      	str	r3, [r1, #8]
}
 8000ff8:	bf00      	nop
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	40021000 	.word	0x40021000

08001008 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8001008:	b480      	push	{r7}
 800100a:	b083      	sub	sp, #12
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001010:	4b06      	ldr	r3, [pc, #24]	; (800102c <LL_RCC_SetAPB1Prescaler+0x24>)
 8001012:	689b      	ldr	r3, [r3, #8]
 8001014:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <LL_RCC_SetAPB1Prescaler+0x24>)
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4313      	orrs	r3, r2
 800101e:	608b      	str	r3, [r1, #8]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	40021000 	.word	0x40021000

08001030 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <LL_RCC_SetAPB2Prescaler+0x24>)
 800103a:	689b      	ldr	r3, [r3, #8]
 800103c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001040:	4904      	ldr	r1, [pc, #16]	; (8001054 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4313      	orrs	r3, r2
 8001046:	608b      	str	r3, [r1, #8]
}
 8001048:	bf00      	nop
 800104a:	370c      	adds	r7, #12
 800104c:	46bd      	mov	sp, r7
 800104e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001052:	4770      	bx	lr
 8001054:	40021000 	.word	0x40021000

08001058 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8001058:	b480      	push	{r7}
 800105a:	b083      	sub	sp, #12
 800105c:	af00      	add	r7, sp, #0
 800105e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001060:	4b09      	ldr	r3, [pc, #36]	; (8001088 <LL_RCC_SetUSARTClockSource+0x30>)
 8001062:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	0c1b      	lsrs	r3, r3, #16
 800106a:	43db      	mvns	r3, r3
 800106c:	401a      	ands	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	b29b      	uxth	r3, r3
 8001072:	4905      	ldr	r1, [pc, #20]	; (8001088 <LL_RCC_SetUSARTClockSource+0x30>)
 8001074:	4313      	orrs	r3, r2
 8001076:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800107a:	bf00      	nop
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001084:	4770      	bx	lr
 8001086:	bf00      	nop
 8001088:	40021000 	.word	0x40021000

0800108c <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001090:	4b05      	ldr	r3, [pc, #20]	; (80010a8 <LL_RCC_PLL_Enable+0x1c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	4a04      	ldr	r2, [pc, #16]	; (80010a8 <LL_RCC_PLL_Enable+0x1c>)
 8001096:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800109a:	6013      	str	r3, [r2, #0]
}
 800109c:	bf00      	nop
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	40021000 	.word	0x40021000

080010ac <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80010ac:	b480      	push	{r7}
 80010ae:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80010b0:	4b07      	ldr	r3, [pc, #28]	; (80010d0 <LL_RCC_PLL_IsReady+0x24>)
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80010b8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80010bc:	d101      	bne.n	80010c2 <LL_RCC_PLL_IsReady+0x16>
 80010be:	2301      	movs	r3, #1
 80010c0:	e000      	b.n	80010c4 <LL_RCC_PLL_IsReady+0x18>
 80010c2:	2300      	movs	r3, #0
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	46bd      	mov	sp, r7
 80010c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010cc:	4770      	bx	lr
 80010ce:	bf00      	nop
 80010d0:	40021000 	.word	0x40021000

080010d4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	60f8      	str	r0, [r7, #12]
 80010dc:	60b9      	str	r1, [r7, #8]
 80010de:	607a      	str	r2, [r7, #4]
 80010e0:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80010e2:	4b0a      	ldr	r3, [pc, #40]	; (800110c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010e4:	68da      	ldr	r2, [r3, #12]
 80010e6:	4b0a      	ldr	r3, [pc, #40]	; (8001110 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80010e8:	4013      	ands	r3, r2
 80010ea:	68f9      	ldr	r1, [r7, #12]
 80010ec:	68ba      	ldr	r2, [r7, #8]
 80010ee:	4311      	orrs	r1, r2
 80010f0:	687a      	ldr	r2, [r7, #4]
 80010f2:	0212      	lsls	r2, r2, #8
 80010f4:	4311      	orrs	r1, r2
 80010f6:	683a      	ldr	r2, [r7, #0]
 80010f8:	430a      	orrs	r2, r1
 80010fa:	4904      	ldr	r1, [pc, #16]	; (800110c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001100:	bf00      	nop
 8001102:	3714      	adds	r7, #20
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr
 800110c:	40021000 	.word	0x40021000
 8001110:	f9ff808c 	.word	0xf9ff808c

08001114 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001118:	4b05      	ldr	r3, [pc, #20]	; (8001130 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800111a:	68db      	ldr	r3, [r3, #12]
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 800111e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001122:	60d3      	str	r3, [r2, #12]
}
 8001124:	bf00      	nop
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
 800112e:	bf00      	nop
 8001130:	40021000 	.word	0x40021000

08001134 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 800113c:	4b08      	ldr	r3, [pc, #32]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 800113e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001140:	4907      	ldr	r1, [pc, #28]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	4313      	orrs	r3, r2
 8001146:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001148:	4b05      	ldr	r3, [pc, #20]	; (8001160 <LL_APB1_GRP1_EnableClock+0x2c>)
 800114a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	4013      	ands	r3, r2
 8001150:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	bf00      	nop
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr
 8001160:	40021000 	.word	0x40021000

08001164 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001164:	b480      	push	{r7}
 8001166:	b085      	sub	sp, #20
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 800116c:	4b08      	ldr	r3, [pc, #32]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 800116e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001170:	4907      	ldr	r1, [pc, #28]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	4313      	orrs	r3, r2
 8001176:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001178:	4b05      	ldr	r3, [pc, #20]	; (8001190 <LL_APB2_GRP1_EnableClock+0x2c>)
 800117a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	4013      	ands	r3, r2
 8001180:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001182:	68fb      	ldr	r3, [r7, #12]
}
 8001184:	bf00      	nop
 8001186:	3714      	adds	r7, #20
 8001188:	46bd      	mov	sp, r7
 800118a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118e:	4770      	bx	lr
 8001190:	40021000 	.word	0x40021000

08001194 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800119c:	4b06      	ldr	r3, [pc, #24]	; (80011b8 <LL_FLASH_SetLatency+0x24>)
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	f023 0207 	bic.w	r2, r3, #7
 80011a4:	4904      	ldr	r1, [pc, #16]	; (80011b8 <LL_FLASH_SetLatency+0x24>)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	4313      	orrs	r3, r2
 80011aa:	600b      	str	r3, [r1, #0]
}
 80011ac:	bf00      	nop
 80011ae:	370c      	adds	r7, #12
 80011b0:	46bd      	mov	sp, r7
 80011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b6:	4770      	bx	lr
 80011b8:	40022000 	.word	0x40022000

080011bc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80011c0:	4b04      	ldr	r3, [pc, #16]	; (80011d4 <LL_FLASH_GetLatency+0x18>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f003 0307 	and.w	r3, r3, #7
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	46bd      	mov	sp, r7
 80011cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop
 80011d4:	40022000 	.word	0x40022000

080011d8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 80011d8:	b480      	push	{r7}
 80011da:	b083      	sub	sp, #12
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 80011e0:	4b06      	ldr	r3, [pc, #24]	; (80011fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 80011e8:	4904      	ldr	r1, [pc, #16]	; (80011fc <LL_PWR_SetRegulVoltageScaling+0x24>)
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4313      	orrs	r3, r2
 80011ee:	600b      	str	r3, [r1, #0]
}
 80011f0:	bf00      	nop
 80011f2:	370c      	adds	r7, #12
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	40007000 	.word	0x40007000

08001200 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001204:	2001      	movs	r0, #1
 8001206:	f7ff ffad 	bl	8001164 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 800120a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 800120e:	f7ff ff91 	bl	8001134 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001212:	2003      	movs	r0, #3
 8001214:	f7ff fe64 	bl	8000ee0 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001218:	f000 f810 	bl	800123c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800121c:	f7ff fe02 	bl	8000e24 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001220:	f000 fb74 	bl	800190c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001224:	f000 f8a8 	bl	8001378 <MX_SPI2_Init>
  MX_TIM1_Init();
 8001228:	f000 fa90 	bl	800174c <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 800122c:	f000 fb40 	bl	80018b0 <startupPrint>

  eyes_init();
 8001230:	f7ff fb0a 	bl	8000848 <eyes_init>
  eyes_start();
 8001234:	f7ff fb1c 	bl	8000870 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001238:	e7fe      	b.n	8001238 <main+0x38>
	...

0800123c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001240:	2003      	movs	r0, #3
 8001242:	f7ff ffa7 	bl	8001194 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001246:	bf00      	nop
 8001248:	f7ff ffb8 	bl	80011bc <LL_FLASH_GetLatency>
 800124c:	4603      	mov	r3, r0
 800124e:	2b03      	cmp	r3, #3
 8001250:	d1fa      	bne.n	8001248 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001252:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001256:	f7ff ffbf 	bl	80011d8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 800125a:	f7ff fe65 	bl	8000f28 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 800125e:	bf00      	nop
 8001260:	f7ff fe72 	bl	8000f48 <LL_RCC_HSI_IsReady>
 8001264:	4603      	mov	r3, r0
 8001266:	2b01      	cmp	r3, #1
 8001268:	d1fa      	bne.n	8001260 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 800126a:	2010      	movs	r0, #16
 800126c:	f7ff fe80 	bl	8000f70 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8001270:	2300      	movs	r3, #0
 8001272:	2208      	movs	r2, #8
 8001274:	2100      	movs	r1, #0
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff ff2c 	bl	80010d4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 800127c:	f7ff ff4a 	bl	8001114 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001280:	f7ff ff04 	bl	800108c <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001284:	bf00      	nop
 8001286:	f7ff ff11 	bl	80010ac <LL_RCC_PLL_IsReady>
 800128a:	4603      	mov	r3, r0
 800128c:	2b01      	cmp	r3, #1
 800128e:	d1fa      	bne.n	8001286 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001290:	2003      	movs	r0, #3
 8001292:	f7ff fe83 	bl	8000f9c <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001296:	bf00      	nop
 8001298:	f7ff fe94 	bl	8000fc4 <LL_RCC_GetSysClkSource>
 800129c:	4603      	mov	r3, r0
 800129e:	2b0c      	cmp	r3, #12
 80012a0:	d1fa      	bne.n	8001298 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80012a2:	2000      	movs	r0, #0
 80012a4:	f7ff fe9c 	bl	8000fe0 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80012a8:	2000      	movs	r0, #0
 80012aa:	f7ff fead 	bl	8001008 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80012ae:	2000      	movs	r0, #0
 80012b0:	f7ff febe 	bl	8001030 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80012b4:	4805      	ldr	r0, [pc, #20]	; (80012cc <SystemClock_Config+0x90>)
 80012b6:	f001 fd7b 	bl	8002db0 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80012ba:	4804      	ldr	r0, [pc, #16]	; (80012cc <SystemClock_Config+0x90>)
 80012bc:	f001 fdac 	bl	8002e18 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80012c0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80012c4:	f7ff fec8 	bl	8001058 <LL_RCC_SetUSARTClockSource>
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	03d09000 	.word	0x03d09000

080012d0 <LL_AHB2_GRP1_EnableClock>:
{
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80012d8:	4b08      	ldr	r3, [pc, #32]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012da:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012dc:	4907      	ldr	r1, [pc, #28]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	4313      	orrs	r3, r2
 80012e2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80012e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4013      	ands	r3, r2
 80012ec:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80012ee:	68fb      	ldr	r3, [r7, #12]
}
 80012f0:	bf00      	nop
 80012f2:	3714      	adds	r7, #20
 80012f4:	46bd      	mov	sp, r7
 80012f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fa:	4770      	bx	lr
 80012fc:	40021000 	.word	0x40021000

08001300 <LL_APB1_GRP1_EnableClock>:
{
 8001300:	b480      	push	{r7}
 8001302:	b085      	sub	sp, #20
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001308:	4b08      	ldr	r3, [pc, #32]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 800130a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800130c:	4907      	ldr	r1, [pc, #28]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001316:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4013      	ands	r3, r2
 800131c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800131e:	68fb      	ldr	r3, [r7, #12]
}
 8001320:	bf00      	nop
 8001322:	3714      	adds	r7, #20
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40021000 	.word	0x40021000

08001330 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8001330:	b480      	push	{r7}
 8001332:	b083      	sub	sp, #12
 8001334:	af00      	add	r7, sp, #0
 8001336:	6078      	str	r0, [r7, #4]
 8001338:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	f023 0210 	bic.w	r2, r3, #16
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	431a      	orrs	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	605a      	str	r2, [r3, #4]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr

08001356 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	685b      	ldr	r3, [r3, #4]
 8001362:	f023 0208 	bic.w	r2, r3, #8
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	605a      	str	r2, [r3, #4]
}
 800136a:	bf00      	nop
 800136c:	370c      	adds	r7, #12
 800136e:	46bd      	mov	sp, r7
 8001370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001374:	4770      	bx	lr
	...

08001378 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b090      	sub	sp, #64	; 0x40
 800137c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800137e:	f107 0318 	add.w	r3, r7, #24
 8001382:	2228      	movs	r2, #40	; 0x28
 8001384:	2100      	movs	r1, #0
 8001386:	4618      	mov	r0, r3
 8001388:	f001 fd80 	bl	8002e8c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800138c:	463b      	mov	r3, r7
 800138e:	2200      	movs	r2, #0
 8001390:	601a      	str	r2, [r3, #0]
 8001392:	605a      	str	r2, [r3, #4]
 8001394:	609a      	str	r2, [r3, #8]
 8001396:	60da      	str	r2, [r3, #12]
 8001398:	611a      	str	r2, [r3, #16]
 800139a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 800139c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80013a0:	f7ff ffae 	bl	8001300 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80013a4:	2004      	movs	r0, #4
 80013a6:	f7ff ff93 	bl	80012d0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80013aa:	2002      	movs	r0, #2
 80013ac:	f7ff ff90 	bl	80012d0 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80013b0:	230c      	movs	r3, #12
 80013b2:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013b4:	2302      	movs	r3, #2
 80013b6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013b8:	2303      	movs	r3, #3
 80013ba:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013bc:	2300      	movs	r3, #0
 80013be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013c0:	2300      	movs	r3, #0
 80013c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013c4:	2305      	movs	r3, #5
 80013c6:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	481e      	ldr	r0, [pc, #120]	; (8001448 <MX_SPI2_Init+0xd0>)
 80013ce:	f000 fe7e 	bl	80020ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80013d2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80013d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d8:	2302      	movs	r3, #2
 80013da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80013e8:	2305      	movs	r3, #5
 80013ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013ec:	463b      	mov	r3, r7
 80013ee:	4619      	mov	r1, r3
 80013f0:	4816      	ldr	r0, [pc, #88]	; (800144c <MX_SPI2_Init+0xd4>)
 80013f2:	f000 fe6c 	bl	80020ce <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80013fa:	f44f 7382 	mov.w	r3, #260	; 0x104
 80013fe:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8001400:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001404:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8001406:	2302      	movs	r3, #2
 8001408:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800140a:	2301      	movs	r3, #1
 800140c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 800140e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001412:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8001414:	2320      	movs	r3, #32
 8001416:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 800141c:	2300      	movs	r3, #0
 800141e:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001420:	2307      	movs	r3, #7
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001424:	f107 0318 	add.w	r3, r7, #24
 8001428:	4619      	mov	r1, r3
 800142a:	4809      	ldr	r0, [pc, #36]	; (8001450 <MX_SPI2_Init+0xd8>)
 800142c:	f001 fa9d 	bl	800296a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001430:	2100      	movs	r1, #0
 8001432:	4807      	ldr	r0, [pc, #28]	; (8001450 <MX_SPI2_Init+0xd8>)
 8001434:	f7ff ff7c 	bl	8001330 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001438:	4805      	ldr	r0, [pc, #20]	; (8001450 <MX_SPI2_Init+0xd8>)
 800143a:	f7ff ff8c 	bl	8001356 <LL_SPI_DisableNSSPulseMgt>

}
 800143e:	bf00      	nop
 8001440:	3740      	adds	r7, #64	; 0x40
 8001442:	46bd      	mov	sp, r7
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	48000800 	.word	0x48000800
 800144c:	48000400 	.word	0x48000400
 8001450:	40003800 	.word	0x40003800

08001454 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8001458:	bf00      	nop
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr

08001462 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001462:	b480      	push	{r7}
 8001464:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001466:	e7fe      	b.n	8001466 <HardFault_Handler+0x4>

08001468 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800146c:	e7fe      	b.n	800146c <MemManage_Handler+0x4>

0800146e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800146e:	b480      	push	{r7}
 8001470:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001472:	e7fe      	b.n	8001472 <BusFault_Handler+0x4>

08001474 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001474:	b480      	push	{r7}
 8001476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001478:	e7fe      	b.n	8001478 <UsageFault_Handler+0x4>

0800147a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800147a:	b480      	push	{r7}
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800147e:	bf00      	nop
 8001480:	46bd      	mov	sp, r7
 8001482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001486:	4770      	bx	lr

08001488 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800148c:	bf00      	nop
 800148e:	46bd      	mov	sp, r7
 8001490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001494:	4770      	bx	lr

08001496 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001496:	b480      	push	{r7}
 8001498:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800149a:	bf00      	nop
 800149c:	46bd      	mov	sp, r7
 800149e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a2:	4770      	bx	lr

080014a4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80014a4:	b480      	push	{r7}
 80014a6:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80014a8:	bf00      	nop
 80014aa:	46bd      	mov	sp, r7
 80014ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014b0:	4770      	bx	lr

080014b2 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80014b2:	b580      	push	{r7, lr}
 80014b4:	b086      	sub	sp, #24
 80014b6:	af00      	add	r7, sp, #0
 80014b8:	60f8      	str	r0, [r7, #12]
 80014ba:	60b9      	str	r1, [r7, #8]
 80014bc:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	e00a      	b.n	80014da <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80014c4:	f000 f9ec 	bl	80018a0 <__io_getchar>
 80014c8:	4601      	mov	r1, r0
 80014ca:	68bb      	ldr	r3, [r7, #8]
 80014cc:	1c5a      	adds	r2, r3, #1
 80014ce:	60ba      	str	r2, [r7, #8]
 80014d0:	b2ca      	uxtb	r2, r1
 80014d2:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	3301      	adds	r3, #1
 80014d8:	617b      	str	r3, [r7, #20]
 80014da:	697a      	ldr	r2, [r7, #20]
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	429a      	cmp	r2, r3
 80014e0:	dbf0      	blt.n	80014c4 <_read+0x12>
	}

return len;
 80014e2:	687b      	ldr	r3, [r7, #4]
}
 80014e4:	4618      	mov	r0, r3
 80014e6:	3718      	adds	r7, #24
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}

080014ec <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b086      	sub	sp, #24
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	60f8      	str	r0, [r7, #12]
 80014f4:	60b9      	str	r1, [r7, #8]
 80014f6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80014f8:	2300      	movs	r3, #0
 80014fa:	617b      	str	r3, [r7, #20]
 80014fc:	e009      	b.n	8001512 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80014fe:	68bb      	ldr	r3, [r7, #8]
 8001500:	1c5a      	adds	r2, r3, #1
 8001502:	60ba      	str	r2, [r7, #8]
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	4618      	mov	r0, r3
 8001508:	f000 f9ac 	bl	8001864 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	3301      	adds	r3, #1
 8001510:	617b      	str	r3, [r7, #20]
 8001512:	697a      	ldr	r2, [r7, #20]
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	429a      	cmp	r2, r3
 8001518:	dbf1      	blt.n	80014fe <_write+0x12>
	}
	return len;
 800151a:	687b      	ldr	r3, [r7, #4]
}
 800151c:	4618      	mov	r0, r3
 800151e:	3718      	adds	r7, #24
 8001520:	46bd      	mov	sp, r7
 8001522:	bd80      	pop	{r7, pc}

08001524 <_close>:

int _close(int file)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
	return -1;
 800152c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001530:	4618      	mov	r0, r3
 8001532:	370c      	adds	r7, #12
 8001534:	46bd      	mov	sp, r7
 8001536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153a:	4770      	bx	lr

0800153c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800153c:	b480      	push	{r7}
 800153e:	b083      	sub	sp, #12
 8001540:	af00      	add	r7, sp, #0
 8001542:	6078      	str	r0, [r7, #4]
 8001544:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001546:	683b      	ldr	r3, [r7, #0]
 8001548:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800154c:	605a      	str	r2, [r3, #4]
	return 0;
 800154e:	2300      	movs	r3, #0
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <_isatty>:

int _isatty(int file)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
	return 1;
 8001564:	2301      	movs	r3, #1
}
 8001566:	4618      	mov	r0, r3
 8001568:	370c      	adds	r7, #12
 800156a:	46bd      	mov	sp, r7
 800156c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001570:	4770      	bx	lr

08001572 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001572:	b480      	push	{r7}
 8001574:	b085      	sub	sp, #20
 8001576:	af00      	add	r7, sp, #0
 8001578:	60f8      	str	r0, [r7, #12]
 800157a:	60b9      	str	r1, [r7, #8]
 800157c:	607a      	str	r2, [r7, #4]
	return 0;
 800157e:	2300      	movs	r3, #0
}
 8001580:	4618      	mov	r0, r3
 8001582:	3714      	adds	r7, #20
 8001584:	46bd      	mov	sp, r7
 8001586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158a:	4770      	bx	lr

0800158c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b086      	sub	sp, #24
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001594:	4a14      	ldr	r2, [pc, #80]	; (80015e8 <_sbrk+0x5c>)
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <_sbrk+0x60>)
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015a0:	4b13      	ldr	r3, [pc, #76]	; (80015f0 <_sbrk+0x64>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d102      	bne.n	80015ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015a8:	4b11      	ldr	r3, [pc, #68]	; (80015f0 <_sbrk+0x64>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	; (80015f4 <_sbrk+0x68>)
 80015ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015ae:	4b10      	ldr	r3, [pc, #64]	; (80015f0 <_sbrk+0x64>)
 80015b0:	681a      	ldr	r2, [r3, #0]
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4413      	add	r3, r2
 80015b6:	693a      	ldr	r2, [r7, #16]
 80015b8:	429a      	cmp	r2, r3
 80015ba:	d207      	bcs.n	80015cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015bc:	f001 fc3c 	bl	8002e38 <__errno>
 80015c0:	4602      	mov	r2, r0
 80015c2:	230c      	movs	r3, #12
 80015c4:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 80015c6:	f04f 33ff 	mov.w	r3, #4294967295
 80015ca:	e009      	b.n	80015e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015cc:	4b08      	ldr	r3, [pc, #32]	; (80015f0 <_sbrk+0x64>)
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015d2:	4b07      	ldr	r3, [pc, #28]	; (80015f0 <_sbrk+0x64>)
 80015d4:	681a      	ldr	r2, [r3, #0]
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	4413      	add	r3, r2
 80015da:	4a05      	ldr	r2, [pc, #20]	; (80015f0 <_sbrk+0x64>)
 80015dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015de:	68fb      	ldr	r3, [r7, #12]
}
 80015e0:	4618      	mov	r0, r3
 80015e2:	3718      	adds	r7, #24
 80015e4:	46bd      	mov	sp, r7
 80015e6:	bd80      	pop	{r7, pc}
 80015e8:	20018000 	.word	0x20018000
 80015ec:	00000400 	.word	0x00000400
 80015f0:	2000009c 	.word	0x2000009c
 80015f4:	20000608 	.word	0x20000608

080015f8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80015f8:	b480      	push	{r7}
 80015fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80015fc:	4b17      	ldr	r3, [pc, #92]	; (800165c <SystemInit+0x64>)
 80015fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001602:	4a16      	ldr	r2, [pc, #88]	; (800165c <SystemInit+0x64>)
 8001604:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001608:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800160c:	4b14      	ldr	r3, [pc, #80]	; (8001660 <SystemInit+0x68>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a13      	ldr	r2, [pc, #76]	; (8001660 <SystemInit+0x68>)
 8001612:	f043 0301 	orr.w	r3, r3, #1
 8001616:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001618:	4b11      	ldr	r3, [pc, #68]	; (8001660 <SystemInit+0x68>)
 800161a:	2200      	movs	r2, #0
 800161c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 800161e:	4b10      	ldr	r3, [pc, #64]	; (8001660 <SystemInit+0x68>)
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a0f      	ldr	r2, [pc, #60]	; (8001660 <SystemInit+0x68>)
 8001624:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001628:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 800162c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <SystemInit+0x68>)
 8001630:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001634:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8001636:	4b0a      	ldr	r3, [pc, #40]	; (8001660 <SystemInit+0x68>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a09      	ldr	r2, [pc, #36]	; (8001660 <SystemInit+0x68>)
 800163c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001640:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001642:	4b07      	ldr	r3, [pc, #28]	; (8001660 <SystemInit+0x68>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001648:	4b04      	ldr	r3, [pc, #16]	; (800165c <SystemInit+0x64>)
 800164a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800164e:	609a      	str	r2, [r3, #8]
#endif
}
 8001650:	bf00      	nop
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
 800165a:	bf00      	nop
 800165c:	e000ed00 	.word	0xe000ed00
 8001660:	40021000 	.word	0x40021000

08001664 <LL_APB2_GRP1_EnableClock>:
{
 8001664:	b480      	push	{r7}
 8001666:	b085      	sub	sp, #20
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 800166c:	4b08      	ldr	r3, [pc, #32]	; (8001690 <LL_APB2_GRP1_EnableClock+0x2c>)
 800166e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001670:	4907      	ldr	r1, [pc, #28]	; (8001690 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	4313      	orrs	r3, r2
 8001676:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001678:	4b05      	ldr	r3, [pc, #20]	; (8001690 <LL_APB2_GRP1_EnableClock+0x2c>)
 800167a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	4013      	ands	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001682:	68fb      	ldr	r3, [r7, #12]
}
 8001684:	bf00      	nop
 8001686:	3714      	adds	r7, #20
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	40021000 	.word	0x40021000

08001694 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
 800169a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	601a      	str	r2, [r3, #0]
}
 80016a8:	bf00      	nop
 80016aa:	370c      	adds	r7, #12
 80016ac:	46bd      	mov	sp, r7
 80016ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016b2:	4770      	bx	lr

080016b4 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80016b4:	b480      	push	{r7}
 80016b6:	b083      	sub	sp, #12
 80016b8:	af00      	add	r7, sp, #0
 80016ba:	6078      	str	r0, [r7, #4]
 80016bc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80016c6:	f023 0307 	bic.w	r3, r3, #7
 80016ca:	683a      	ldr	r2, [r7, #0]
 80016cc:	431a      	orrs	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	609a      	str	r2, [r3, #8]
}
 80016d2:	bf00      	nop
 80016d4:	370c      	adds	r7, #12
 80016d6:	46bd      	mov	sp, r7
 80016d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016dc:	4770      	bx	lr

080016de <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
 80016e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	685b      	ldr	r3, [r3, #4]
 80016ec:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	431a      	orrs	r2, r3
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	605a      	str	r2, [r3, #4]
}
 80016f8:	bf00      	nop
 80016fa:	370c      	adds	r7, #12
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001704:	b480      	push	{r7}
 8001706:	b083      	sub	sp, #12
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
 800170c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8001716:	683b      	ldr	r3, [r7, #0]
 8001718:	431a      	orrs	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	605a      	str	r2, [r3, #4]
}
 800171e:	bf00      	nop
 8001720:	370c      	adds	r7, #12
 8001722:	46bd      	mov	sp, r7
 8001724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001728:	4770      	bx	lr

0800172a <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 800172a:	b480      	push	{r7}
 800172c:	b083      	sub	sp, #12
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	609a      	str	r2, [r3, #8]
}
 800173e:	bf00      	nop
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
	...

0800174c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8001752:	1d3b      	adds	r3, r7, #4
 8001754:	2200      	movs	r2, #0
 8001756:	601a      	str	r2, [r3, #0]
 8001758:	605a      	str	r2, [r3, #4]
 800175a:	609a      	str	r2, [r3, #8]
 800175c:	60da      	str	r2, [r3, #12]
 800175e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001760:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001764:	f7ff ff7e 	bl	8001664 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8001768:	230f      	movs	r3, #15
 800176a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800176c:	2300      	movs	r3, #0
 800176e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 8001770:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8001774:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001776:	2300      	movs	r3, #0
 8001778:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800177a:	2300      	movs	r3, #0
 800177c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_TIM1_Init+0x68>)
 8001784:	f001 f97a 	bl	8002a7c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001788:	480a      	ldr	r0, [pc, #40]	; (80017b4 <MX_TIM1_Init+0x68>)
 800178a:	f7ff ff83 	bl	8001694 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800178e:	2100      	movs	r1, #0
 8001790:	4808      	ldr	r0, [pc, #32]	; (80017b4 <MX_TIM1_Init+0x68>)
 8001792:	f7ff ff8f 	bl	80016b4 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001796:	2100      	movs	r1, #0
 8001798:	4806      	ldr	r0, [pc, #24]	; (80017b4 <MX_TIM1_Init+0x68>)
 800179a:	f7ff ffa0 	bl	80016de <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800179e:	2100      	movs	r1, #0
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_TIM1_Init+0x68>)
 80017a2:	f7ff ffaf 	bl	8001704 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80017a6:	4803      	ldr	r0, [pc, #12]	; (80017b4 <MX_TIM1_Init+0x68>)
 80017a8:	f7ff ffbf 	bl	800172a <LL_TIM_DisableMasterSlaveMode>

}
 80017ac:	bf00      	nop
 80017ae:	3718      	adds	r7, #24
 80017b0:	46bd      	mov	sp, r7
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	40012c00 	.word	0x40012c00

080017b8 <LL_AHB2_GRP1_EnableClock>:
{
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80017c0:	4b08      	ldr	r3, [pc, #32]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017c2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017c4:	4907      	ldr	r1, [pc, #28]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	4313      	orrs	r3, r2
 80017ca:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80017cc:	4b05      	ldr	r3, [pc, #20]	; (80017e4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80017ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	4013      	ands	r3, r2
 80017d4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80017d6:	68fb      	ldr	r3, [r7, #12]
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	40021000 	.word	0x40021000

080017e8 <LL_APB1_GRP1_EnableClock>:
{
 80017e8:	b480      	push	{r7}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af00      	add	r7, sp, #0
 80017ee:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80017f0:	4b08      	ldr	r3, [pc, #32]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017f2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017f4:	4907      	ldr	r1, [pc, #28]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80017fc:	4b05      	ldr	r3, [pc, #20]	; (8001814 <LL_APB1_GRP1_EnableClock+0x2c>)
 80017fe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	4013      	ands	r3, r2
 8001804:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001806:	68fb      	ldr	r3, [r7, #12]
}
 8001808:	bf00      	nop
 800180a:	3714      	adds	r7, #20
 800180c:	46bd      	mov	sp, r7
 800180e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001812:	4770      	bx	lr
 8001814:	40021000 	.word	0x40021000

08001818 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001818:	b480      	push	{r7}
 800181a:	b083      	sub	sp, #12
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f043 0201 	orr.w	r2, r3, #1
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	601a      	str	r2, [r3, #0]
}
 800182c:	bf00      	nop
 800182e:	370c      	adds	r7, #12
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001838:	b480      	push	{r7}
 800183a:	b083      	sub	sp, #12
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	685b      	ldr	r3, [r3, #4]
 8001844:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	609a      	str	r2, [r3, #8]
}
 8001858:	bf00      	nop
 800185a:	370c      	adds	r7, #12
 800185c:	46bd      	mov	sp, r7
 800185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001862:	4770      	bx	lr

08001864 <__io_putchar>:

/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
void __io_putchar(int ch){
 8001864:	b480      	push	{r7}
 8001866:	b083      	sub	sp, #12
 8001868:	af00      	add	r7, sp, #0
 800186a:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!READ_BIT(USART2->ISR, USART_ISR_TXE));
 800186c:	bf00      	nop
 800186e:	4b0b      	ldr	r3, [pc, #44]	; (800189c <__io_putchar+0x38>)
 8001870:	69db      	ldr	r3, [r3, #28]
 8001872:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001876:	2b00      	cmp	r3, #0
 8001878:	d0f9      	beq.n	800186e <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 800187a:	4b08      	ldr	r3, [pc, #32]	; (800189c <__io_putchar+0x38>)
 800187c:	687a      	ldr	r2, [r7, #4]
 800187e:	b292      	uxth	r2, r2
 8001880:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!READ_BIT(USART2->ISR, USART_ISR_TC));
 8001882:	bf00      	nop
 8001884:	4b05      	ldr	r3, [pc, #20]	; (800189c <__io_putchar+0x38>)
 8001886:	69db      	ldr	r3, [r3, #28]
 8001888:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800188c:	2b00      	cmp	r3, #0
 800188e:	d0f9      	beq.n	8001884 <__io_putchar+0x20>
#endif
}
 8001890:	bf00      	nop
 8001892:	370c      	adds	r7, #12
 8001894:	46bd      	mov	sp, r7
 8001896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189a:	4770      	bx	lr
 800189c:	40004400 	.word	0x40004400

080018a0 <__io_getchar>:

void __io_getchar(void){
 80018a0:	b480      	push	{r7}
 80018a2:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
	...

080018b0 <startupPrint>:

void startupPrint(void){
 80018b0:	b580      	push	{r7, lr}
 80018b2:	af00      	add	r7, sp, #0
	printf("\r\n");
 80018b4:	480b      	ldr	r0, [pc, #44]	; (80018e4 <startupPrint+0x34>)
 80018b6:	f001 fb65 	bl	8002f84 <puts>
	printf("+==============================================================+\r\n");
 80018ba:	480b      	ldr	r0, [pc, #44]	; (80018e8 <startupPrint+0x38>)
 80018bc:	f001 fb62 	bl	8002f84 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 80018c0:	490a      	ldr	r1, [pc, #40]	; (80018ec <startupPrint+0x3c>)
 80018c2:	480b      	ldr	r0, [pc, #44]	; (80018f0 <startupPrint+0x40>)
 80018c4:	f001 faea 	bl	8002e9c <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <startupPrint+0x44>)
 80018ca:	f001 fb5b 	bl	8002f84 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 80018ce:	4b0a      	ldr	r3, [pc, #40]	; (80018f8 <startupPrint+0x48>)
 80018d0:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <startupPrint+0x4c>)
 80018d2:	490b      	ldr	r1, [pc, #44]	; (8001900 <startupPrint+0x50>)
 80018d4:	480b      	ldr	r0, [pc, #44]	; (8001904 <startupPrint+0x54>)
 80018d6:	f001 fae1 	bl	8002e9c <iprintf>
	printf("+==============================================================+\r\n\r\n");
 80018da:	480b      	ldr	r0, [pc, #44]	; (8001908 <startupPrint+0x58>)
 80018dc:	f001 fb52 	bl	8002f84 <puts>
}
 80018e0:	bf00      	nop
 80018e2:	bd80      	pop	{r7, pc}
 80018e4:	08003f84 	.word	0x08003f84
 80018e8:	08003f88 	.word	0x08003f88
 80018ec:	08003fcc 	.word	0x08003fcc
 80018f0:	08003ff4 	.word	0x08003ff4
 80018f4:	08004000 	.word	0x08004000
 80018f8:	08004044 	.word	0x08004044
 80018fc:	08004048 	.word	0x08004048
 8001900:	08004054 	.word	0x08004054
 8001904:	08004068 	.word	0x08004068
 8001908:	08004094 	.word	0x08004094

0800190c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800190c:	b580      	push	{r7, lr}
 800190e:	b08e      	sub	sp, #56	; 0x38
 8001910:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001912:	f107 031c 	add.w	r3, r7, #28
 8001916:	2200      	movs	r2, #0
 8001918:	601a      	str	r2, [r3, #0]
 800191a:	605a      	str	r2, [r3, #4]
 800191c:	609a      	str	r2, [r3, #8]
 800191e:	60da      	str	r2, [r3, #12]
 8001920:	611a      	str	r2, [r3, #16]
 8001922:	615a      	str	r2, [r3, #20]
 8001924:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001926:	1d3b      	adds	r3, r7, #4
 8001928:	2200      	movs	r2, #0
 800192a:	601a      	str	r2, [r3, #0]
 800192c:	605a      	str	r2, [r3, #4]
 800192e:	609a      	str	r2, [r3, #8]
 8001930:	60da      	str	r2, [r3, #12]
 8001932:	611a      	str	r2, [r3, #16]
 8001934:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001936:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 800193a:	f7ff ff55 	bl	80017e8 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff ff3a 	bl	80017b8 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001944:	230c      	movs	r3, #12
 8001946:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001948:	2302      	movs	r3, #2
 800194a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800194c:	2303      	movs	r3, #3
 800194e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001950:	2300      	movs	r3, #0
 8001952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001958:	2307      	movs	r3, #7
 800195a:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800195c:	1d3b      	adds	r3, r7, #4
 800195e:	4619      	mov	r1, r3
 8001960:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001964:	f000 fbb3 	bl	80020ce <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 8001968:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 800196c:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 800196e:	2300      	movs	r3, #0
 8001970:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001972:	2300      	movs	r3, #0
 8001974:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001976:	2300      	movs	r3, #0
 8001978:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800197a:	230c      	movs	r3, #12
 800197c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800197e:	2300      	movs	r3, #0
 8001980:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001982:	2300      	movs	r3, #0
 8001984:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001986:	f107 031c 	add.w	r3, r7, #28
 800198a:	4619      	mov	r1, r3
 800198c:	4806      	ldr	r0, [pc, #24]	; (80019a8 <MX_USART2_UART_Init+0x9c>)
 800198e:	f001 f979 	bl	8002c84 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001992:	4805      	ldr	r0, [pc, #20]	; (80019a8 <MX_USART2_UART_Init+0x9c>)
 8001994:	f7ff ff50 	bl	8001838 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001998:	4803      	ldr	r0, [pc, #12]	; (80019a8 <MX_USART2_UART_Init+0x9c>)
 800199a:	f7ff ff3d 	bl	8001818 <LL_USART_Enable>

}
 800199e:	bf00      	nop
 80019a0:	3738      	adds	r7, #56	; 0x38
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	40004400 	.word	0x40004400

080019ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019b0:	f7ff fe22 	bl	80015f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80019b4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80019b6:	e003      	b.n	80019c0 <LoopCopyDataInit>

080019b8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80019b8:	4b0b      	ldr	r3, [pc, #44]	; (80019e8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80019ba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80019bc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80019be:	3104      	adds	r1, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80019c0:	480a      	ldr	r0, [pc, #40]	; (80019ec <LoopForever+0xa>)
	ldr	r3, =_edata
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <LoopForever+0xe>)
	adds	r2, r0, r1
 80019c4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80019c6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 80019c8:	d3f6      	bcc.n	80019b8 <CopyDataInit>
	ldr	r2, =_sbss
 80019ca:	4a0a      	ldr	r2, [pc, #40]	; (80019f4 <LoopForever+0x12>)
	b	LoopFillZerobss
 80019cc:	e002      	b.n	80019d4 <LoopFillZerobss>

080019ce <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 80019ce:	2300      	movs	r3, #0
	str	r3, [r2], #4
 80019d0:	f842 3b04 	str.w	r3, [r2], #4

080019d4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <LoopForever+0x16>)
	cmp	r2, r3
 80019d6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 80019d8:	d3f9      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019da:	f001 fa33 	bl	8002e44 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019de:	f7ff fc0f 	bl	8001200 <main>

080019e2 <LoopForever>:

LoopForever:
    b LoopForever
 80019e2:	e7fe      	b.n	80019e2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 80019e8:	080041c0 	.word	0x080041c0
	ldr	r0, =_sdata
 80019ec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 80019f0:	2000006c 	.word	0x2000006c
	ldr	r2, =_sbss
 80019f4:	2000006c 	.word	0x2000006c
	ldr	r3, = _ebss
 80019f8:	20000608 	.word	0x20000608

080019fc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019fc:	e7fe      	b.n	80019fc <ADC1_2_IRQHandler>
	...

08001a00 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001a00:	b480      	push	{r7}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001a08:	4b05      	ldr	r3, [pc, #20]	; (8001a20 <LL_EXTI_EnableIT_0_31+0x20>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4904      	ldr	r1, [pc, #16]	; (8001a20 <LL_EXTI_EnableIT_0_31+0x20>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	600b      	str	r3, [r1, #0]
}
 8001a14:	bf00      	nop
 8001a16:	370c      	adds	r7, #12
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40010400 	.word	0x40010400

08001a24 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b083      	sub	sp, #12
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <LL_EXTI_EnableIT_32_63+0x20>)
 8001a2e:	6a1a      	ldr	r2, [r3, #32]
 8001a30:	4904      	ldr	r1, [pc, #16]	; (8001a44 <LL_EXTI_EnableIT_32_63+0x20>)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	620b      	str	r3, [r1, #32]
}
 8001a38:	bf00      	nop
 8001a3a:	370c      	adds	r7, #12
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a42:	4770      	bx	lr
 8001a44:	40010400 	.word	0x40010400

08001a48 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001a50:	4b06      	ldr	r3, [pc, #24]	; (8001a6c <LL_EXTI_DisableIT_0_31+0x24>)
 8001a52:	681a      	ldr	r2, [r3, #0]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	43db      	mvns	r3, r3
 8001a58:	4904      	ldr	r1, [pc, #16]	; (8001a6c <LL_EXTI_DisableIT_0_31+0x24>)
 8001a5a:	4013      	ands	r3, r2
 8001a5c:	600b      	str	r3, [r1, #0]
}
 8001a5e:	bf00      	nop
 8001a60:	370c      	adds	r7, #12
 8001a62:	46bd      	mov	sp, r7
 8001a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a68:	4770      	bx	lr
 8001a6a:	bf00      	nop
 8001a6c:	40010400 	.word	0x40010400

08001a70 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b083      	sub	sp, #12
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001a78:	4b06      	ldr	r3, [pc, #24]	; (8001a94 <LL_EXTI_DisableIT_32_63+0x24>)
 8001a7a:	6a1a      	ldr	r2, [r3, #32]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	43db      	mvns	r3, r3
 8001a80:	4904      	ldr	r1, [pc, #16]	; (8001a94 <LL_EXTI_DisableIT_32_63+0x24>)
 8001a82:	4013      	ands	r3, r2
 8001a84:	620b      	str	r3, [r1, #32]
}
 8001a86:	bf00      	nop
 8001a88:	370c      	adds	r7, #12
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010400 	.word	0x40010400

08001a98 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001aa0:	4b05      	ldr	r3, [pc, #20]	; (8001ab8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001aa2:	685a      	ldr	r2, [r3, #4]
 8001aa4:	4904      	ldr	r1, [pc, #16]	; (8001ab8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	604b      	str	r3, [r1, #4]

}
 8001aac:	bf00      	nop
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr
 8001ab8:	40010400 	.word	0x40010400

08001abc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8001abc:	b480      	push	{r7}
 8001abe:	b083      	sub	sp, #12
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001ac4:	4b05      	ldr	r3, [pc, #20]	; (8001adc <LL_EXTI_EnableEvent_32_63+0x20>)
 8001ac6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ac8:	4904      	ldr	r1, [pc, #16]	; (8001adc <LL_EXTI_EnableEvent_32_63+0x20>)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4313      	orrs	r3, r2
 8001ace:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001ad0:	bf00      	nop
 8001ad2:	370c      	adds	r7, #12
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ada:	4770      	bx	lr
 8001adc:	40010400 	.word	0x40010400

08001ae0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b083      	sub	sp, #12
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001ae8:	4b06      	ldr	r3, [pc, #24]	; (8001b04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001aea:	685a      	ldr	r2, [r3, #4]
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	43db      	mvns	r3, r3
 8001af0:	4904      	ldr	r1, [pc, #16]	; (8001b04 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001af2:	4013      	ands	r3, r2
 8001af4:	604b      	str	r3, [r1, #4]
}
 8001af6:	bf00      	nop
 8001af8:	370c      	adds	r7, #12
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	40010400 	.word	0x40010400

08001b08 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001b08:	b480      	push	{r7}
 8001b0a:	b083      	sub	sp, #12
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001b10:	4b06      	ldr	r3, [pc, #24]	; (8001b2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001b12:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	43db      	mvns	r3, r3
 8001b18:	4904      	ldr	r1, [pc, #16]	; (8001b2c <LL_EXTI_DisableEvent_32_63+0x24>)
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	40010400 	.word	0x40010400

08001b30 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001b38:	4b05      	ldr	r3, [pc, #20]	; (8001b50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b3a:	689a      	ldr	r2, [r3, #8]
 8001b3c:	4904      	ldr	r1, [pc, #16]	; (8001b50 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	4313      	orrs	r3, r2
 8001b42:	608b      	str	r3, [r1, #8]

}
 8001b44:	bf00      	nop
 8001b46:	370c      	adds	r7, #12
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr
 8001b50:	40010400 	.word	0x40010400

08001b54 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001b54:	b480      	push	{r7}
 8001b56:	b083      	sub	sp, #12
 8001b58:	af00      	add	r7, sp, #0
 8001b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001b5c:	4b05      	ldr	r3, [pc, #20]	; (8001b74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001b60:	4904      	ldr	r1, [pc, #16]	; (8001b74 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	4313      	orrs	r3, r2
 8001b66:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001b68:	bf00      	nop
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr
 8001b74:	40010400 	.word	0x40010400

08001b78 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001b78:	b480      	push	{r7}
 8001b7a:	b083      	sub	sp, #12
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001b80:	4b06      	ldr	r3, [pc, #24]	; (8001b9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b82:	689a      	ldr	r2, [r3, #8]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	43db      	mvns	r3, r3
 8001b88:	4904      	ldr	r1, [pc, #16]	; (8001b9c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001b8a:	4013      	ands	r3, r2
 8001b8c:	608b      	str	r3, [r1, #8]

}
 8001b8e:	bf00      	nop
 8001b90:	370c      	adds	r7, #12
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
 8001b9a:	bf00      	nop
 8001b9c:	40010400 	.word	0x40010400

08001ba0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001ba0:	b480      	push	{r7}
 8001ba2:	b083      	sub	sp, #12
 8001ba4:	af00      	add	r7, sp, #0
 8001ba6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001ba8:	4b06      	ldr	r3, [pc, #24]	; (8001bc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001baa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	4904      	ldr	r1, [pc, #16]	; (8001bc4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001bb6:	bf00      	nop
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
 8001bc2:	bf00      	nop
 8001bc4:	40010400 	.word	0x40010400

08001bc8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001bd0:	4b05      	ldr	r3, [pc, #20]	; (8001be8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bd2:	68da      	ldr	r2, [r3, #12]
 8001bd4:	4904      	ldr	r1, [pc, #16]	; (8001be8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4313      	orrs	r3, r2
 8001bda:	60cb      	str	r3, [r1, #12]
}
 8001bdc:	bf00      	nop
 8001bde:	370c      	adds	r7, #12
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	40010400 	.word	0x40010400

08001bec <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001bf4:	4b05      	ldr	r3, [pc, #20]	; (8001c0c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001bf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bf8:	4904      	ldr	r1, [pc, #16]	; (8001c0c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001c00:	bf00      	nop
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr
 8001c0c:	40010400 	.word	0x40010400

08001c10 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001c18:	4b06      	ldr	r3, [pc, #24]	; (8001c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c1a:	68da      	ldr	r2, [r3, #12]
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	43db      	mvns	r3, r3
 8001c20:	4904      	ldr	r1, [pc, #16]	; (8001c34 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001c22:	4013      	ands	r3, r2
 8001c24:	60cb      	str	r3, [r1, #12]
}
 8001c26:	bf00      	nop
 8001c28:	370c      	adds	r7, #12
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40010400 	.word	0x40010400

08001c38 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001c40:	4b06      	ldr	r3, [pc, #24]	; (8001c5c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001c42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	43db      	mvns	r3, r3
 8001c48:	4904      	ldr	r1, [pc, #16]	; (8001c5c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001c4a:	4013      	ands	r3, r2
 8001c4c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001c4e:	bf00      	nop
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	40010400 	.word	0x40010400

08001c60 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	b084      	sub	sp, #16
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	7a1b      	ldrb	r3, [r3, #8]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	f000 80c6 	beq.w	8001e02 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d05d      	beq.n	8001d3a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	7a5b      	ldrb	r3, [r3, #9]
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d00e      	beq.n	8001ca4 <LL_EXTI_Init+0x44>
 8001c86:	2b02      	cmp	r3, #2
 8001c88:	d017      	beq.n	8001cba <LL_EXTI_Init+0x5a>
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d120      	bne.n	8001cd0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff ff24 	bl	8001ae0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7ff feaf 	bl	8001a00 <LL_EXTI_EnableIT_0_31>
          break;
 8001ca2:	e018      	b.n	8001cd6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff fecd 	bl	8001a48 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fef0 	bl	8001a98 <LL_EXTI_EnableEvent_0_31>
          break;
 8001cb8:	e00d      	b.n	8001cd6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f7ff fe9e 	bl	8001a00 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4618      	mov	r0, r3
 8001cca:	f7ff fee5 	bl	8001a98 <LL_EXTI_EnableEvent_0_31>
          break;
 8001cce:	e002      	b.n	8001cd6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001cd0:	2301      	movs	r3, #1
 8001cd2:	60fb      	str	r3, [r7, #12]
          break;
 8001cd4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	7a9b      	ldrb	r3, [r3, #10]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d02d      	beq.n	8001d3a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	7a9b      	ldrb	r3, [r3, #10]
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d00e      	beq.n	8001d04 <LL_EXTI_Init+0xa4>
 8001ce6:	2b03      	cmp	r3, #3
 8001ce8:	d017      	beq.n	8001d1a <LL_EXTI_Init+0xba>
 8001cea:	2b01      	cmp	r3, #1
 8001cec:	d120      	bne.n	8001d30 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f7ff ff8c 	bl	8001c10 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f7ff ff17 	bl	8001b30 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001d02:	e01b      	b.n	8001d3c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	4618      	mov	r0, r3
 8001d0a:	f7ff ff35 	bl	8001b78 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4618      	mov	r0, r3
 8001d14:	f7ff ff58 	bl	8001bc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d18:	e010      	b.n	8001d3c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4618      	mov	r0, r3
 8001d20:	f7ff ff06 	bl	8001b30 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7ff ff4d 	bl	8001bc8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001d2e:	e005      	b.n	8001d3c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	f043 0302 	orr.w	r3, r3, #2
 8001d36:	60fb      	str	r3, [r7, #12]
            break;
 8001d38:	e000      	b.n	8001d3c <LL_EXTI_Init+0xdc>
        }
      }
 8001d3a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	685b      	ldr	r3, [r3, #4]
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d073      	beq.n	8001e2c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	7a5b      	ldrb	r3, [r3, #9]
 8001d48:	2b01      	cmp	r3, #1
 8001d4a:	d00e      	beq.n	8001d6a <LL_EXTI_Init+0x10a>
 8001d4c:	2b02      	cmp	r3, #2
 8001d4e:	d017      	beq.n	8001d80 <LL_EXTI_Init+0x120>
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d120      	bne.n	8001d96 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	4618      	mov	r0, r3
 8001d5a:	f7ff fed5 	bl	8001b08 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fe5e 	bl	8001a24 <LL_EXTI_EnableIT_32_63>
          break;
 8001d68:	e01a      	b.n	8001da0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f7ff fe7e 	bl	8001a70 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	4618      	mov	r0, r3
 8001d7a:	f7ff fe9f 	bl	8001abc <LL_EXTI_EnableEvent_32_63>
          break;
 8001d7e:	e00f      	b.n	8001da0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	4618      	mov	r0, r3
 8001d86:	f7ff fe4d 	bl	8001a24 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	685b      	ldr	r3, [r3, #4]
 8001d8e:	4618      	mov	r0, r3
 8001d90:	f7ff fe94 	bl	8001abc <LL_EXTI_EnableEvent_32_63>
          break;
 8001d94:	e004      	b.n	8001da0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f043 0304 	orr.w	r3, r3, #4
 8001d9c:	60fb      	str	r3, [r7, #12]
          break;
 8001d9e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	7a9b      	ldrb	r3, [r3, #10]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d041      	beq.n	8001e2c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	7a9b      	ldrb	r3, [r3, #10]
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d00e      	beq.n	8001dce <LL_EXTI_Init+0x16e>
 8001db0:	2b03      	cmp	r3, #3
 8001db2:	d017      	beq.n	8001de4 <LL_EXTI_Init+0x184>
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d120      	bne.n	8001dfa <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff ff3b 	bl	8001c38 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	685b      	ldr	r3, [r3, #4]
 8001dc6:	4618      	mov	r0, r3
 8001dc8:	f7ff fec4 	bl	8001b54 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001dcc:	e02f      	b.n	8001e2e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f7ff fee4 	bl	8001ba0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	4618      	mov	r0, r3
 8001dde:	f7ff ff05 	bl	8001bec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001de2:	e024      	b.n	8001e2e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	4618      	mov	r0, r3
 8001dea:	f7ff feb3 	bl	8001b54 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff fefa 	bl	8001bec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001df8:	e019      	b.n	8001e2e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	60fb      	str	r3, [r7, #12]
            break;
 8001dfe:	bf00      	nop
 8001e00:	e015      	b.n	8001e2e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7ff fe1e 	bl	8001a48 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff fe65 	bl	8001ae0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	685b      	ldr	r3, [r3, #4]
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	f7ff fe28 	bl	8001a70 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff fe6f 	bl	8001b08 <LL_EXTI_DisableEvent_32_63>
 8001e2a:	e000      	b.n	8001e2e <LL_EXTI_Init+0x1ce>
      }
 8001e2c:	bf00      	nop
  }

  return status;
 8001e2e:	68fb      	ldr	r3, [r7, #12]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <LL_GPIO_SetPinMode>:
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b08b      	sub	sp, #44	; 0x2c
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	68bb      	ldr	r3, [r7, #8]
 8001e4a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	fa93 f3a3 	rbit	r3, r3
 8001e52:	613b      	str	r3, [r7, #16]
  return result;
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d101      	bne.n	8001e62 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001e5e:	2320      	movs	r3, #32
 8001e60:	e003      	b.n	8001e6a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001e62:	69bb      	ldr	r3, [r7, #24]
 8001e64:	fab3 f383 	clz	r3, r3
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	005b      	lsls	r3, r3, #1
 8001e6c:	2103      	movs	r1, #3
 8001e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	401a      	ands	r2, r3
 8001e76:	68bb      	ldr	r3, [r7, #8]
 8001e78:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7a:	6a3b      	ldr	r3, [r7, #32]
 8001e7c:	fa93 f3a3 	rbit	r3, r3
 8001e80:	61fb      	str	r3, [r7, #28]
  return result;
 8001e82:	69fb      	ldr	r3, [r7, #28]
 8001e84:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001e86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	d101      	bne.n	8001e90 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001e8c:	2320      	movs	r3, #32
 8001e8e:	e003      	b.n	8001e98 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e92:	fab3 f383 	clz	r3, r3
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	005b      	lsls	r3, r3, #1
 8001e9a:	6879      	ldr	r1, [r7, #4]
 8001e9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	601a      	str	r2, [r3, #0]
}
 8001ea6:	bf00      	nop
 8001ea8:	372c      	adds	r7, #44	; 0x2c
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb0:	4770      	bx	lr

08001eb2 <LL_GPIO_SetPinOutputType>:
{
 8001eb2:	b480      	push	{r7}
 8001eb4:	b085      	sub	sp, #20
 8001eb6:	af00      	add	r7, sp, #0
 8001eb8:	60f8      	str	r0, [r7, #12]
 8001eba:	60b9      	str	r1, [r7, #8]
 8001ebc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	685a      	ldr	r2, [r3, #4]
 8001ec2:	68bb      	ldr	r3, [r7, #8]
 8001ec4:	43db      	mvns	r3, r3
 8001ec6:	401a      	ands	r2, r3
 8001ec8:	68bb      	ldr	r3, [r7, #8]
 8001eca:	6879      	ldr	r1, [r7, #4]
 8001ecc:	fb01 f303 	mul.w	r3, r1, r3
 8001ed0:	431a      	orrs	r2, r3
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	605a      	str	r2, [r3, #4]
}
 8001ed6:	bf00      	nop
 8001ed8:	3714      	adds	r7, #20
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <LL_GPIO_SetPinSpeed>:
{
 8001ee2:	b480      	push	{r7}
 8001ee4:	b08b      	sub	sp, #44	; 0x2c
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	689a      	ldr	r2, [r3, #8]
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	fa93 f3a3 	rbit	r3, r3
 8001efc:	613b      	str	r3, [r7, #16]
  return result;
 8001efe:	693b      	ldr	r3, [r7, #16]
 8001f00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f02:	69bb      	ldr	r3, [r7, #24]
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d101      	bne.n	8001f0c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001f08:	2320      	movs	r3, #32
 8001f0a:	e003      	b.n	8001f14 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	fab3 f383 	clz	r3, r3
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	005b      	lsls	r3, r3, #1
 8001f16:	2103      	movs	r1, #3
 8001f18:	fa01 f303 	lsl.w	r3, r1, r3
 8001f1c:	43db      	mvns	r3, r3
 8001f1e:	401a      	ands	r2, r3
 8001f20:	68bb      	ldr	r3, [r7, #8]
 8001f22:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f24:	6a3b      	ldr	r3, [r7, #32]
 8001f26:	fa93 f3a3 	rbit	r3, r3
 8001f2a:	61fb      	str	r3, [r7, #28]
  return result;
 8001f2c:	69fb      	ldr	r3, [r7, #28]
 8001f2e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001f36:	2320      	movs	r3, #32
 8001f38:	e003      	b.n	8001f42 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001f3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f3c:	fab3 f383 	clz	r3, r3
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	005b      	lsls	r3, r3, #1
 8001f44:	6879      	ldr	r1, [r7, #4]
 8001f46:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4a:	431a      	orrs	r2, r3
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	609a      	str	r2, [r3, #8]
}
 8001f50:	bf00      	nop
 8001f52:	372c      	adds	r7, #44	; 0x2c
 8001f54:	46bd      	mov	sp, r7
 8001f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f5a:	4770      	bx	lr

08001f5c <LL_GPIO_SetPinPull>:
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b08b      	sub	sp, #44	; 0x2c
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	60b9      	str	r1, [r7, #8]
 8001f66:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	68da      	ldr	r2, [r3, #12]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	fa93 f3a3 	rbit	r3, r3
 8001f76:	613b      	str	r3, [r7, #16]
  return result;
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001f7c:	69bb      	ldr	r3, [r7, #24]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d101      	bne.n	8001f86 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001f82:	2320      	movs	r3, #32
 8001f84:	e003      	b.n	8001f8e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001f86:	69bb      	ldr	r3, [r7, #24]
 8001f88:	fab3 f383 	clz	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	2103      	movs	r1, #3
 8001f92:	fa01 f303 	lsl.w	r3, r1, r3
 8001f96:	43db      	mvns	r3, r3
 8001f98:	401a      	ands	r2, r3
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f9e:	6a3b      	ldr	r3, [r7, #32]
 8001fa0:	fa93 f3a3 	rbit	r3, r3
 8001fa4:	61fb      	str	r3, [r7, #28]
  return result;
 8001fa6:	69fb      	ldr	r3, [r7, #28]
 8001fa8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001faa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d101      	bne.n	8001fb4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001fb0:	2320      	movs	r3, #32
 8001fb2:	e003      	b.n	8001fbc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001fb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	6879      	ldr	r1, [r7, #4]
 8001fc0:	fa01 f303 	lsl.w	r3, r1, r3
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	60da      	str	r2, [r3, #12]
}
 8001fca:	bf00      	nop
 8001fcc:	372c      	adds	r7, #44	; 0x2c
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr

08001fd6 <LL_GPIO_SetAFPin_0_7>:
{
 8001fd6:	b480      	push	{r7}
 8001fd8:	b08b      	sub	sp, #44	; 0x2c
 8001fda:	af00      	add	r7, sp, #0
 8001fdc:	60f8      	str	r0, [r7, #12]
 8001fde:	60b9      	str	r1, [r7, #8]
 8001fe0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	6a1a      	ldr	r2, [r3, #32]
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fea:	697b      	ldr	r3, [r7, #20]
 8001fec:	fa93 f3a3 	rbit	r3, r3
 8001ff0:	613b      	str	r3, [r7, #16]
  return result;
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ff6:	69bb      	ldr	r3, [r7, #24]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d101      	bne.n	8002000 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001ffc:	2320      	movs	r3, #32
 8001ffe:	e003      	b.n	8002008 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8002000:	69bb      	ldr	r3, [r7, #24]
 8002002:	fab3 f383 	clz	r3, r3
 8002006:	b2db      	uxtb	r3, r3
 8002008:	009b      	lsls	r3, r3, #2
 800200a:	210f      	movs	r1, #15
 800200c:	fa01 f303 	lsl.w	r3, r1, r3
 8002010:	43db      	mvns	r3, r3
 8002012:	401a      	ands	r2, r3
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002018:	6a3b      	ldr	r3, [r7, #32]
 800201a:	fa93 f3a3 	rbit	r3, r3
 800201e:	61fb      	str	r3, [r7, #28]
  return result;
 8002020:	69fb      	ldr	r3, [r7, #28]
 8002022:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8002024:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800202a:	2320      	movs	r3, #32
 800202c:	e003      	b.n	8002036 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800202e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002030:	fab3 f383 	clz	r3, r3
 8002034:	b2db      	uxtb	r3, r3
 8002036:	009b      	lsls	r3, r3, #2
 8002038:	6879      	ldr	r1, [r7, #4]
 800203a:	fa01 f303 	lsl.w	r3, r1, r3
 800203e:	431a      	orrs	r2, r3
 8002040:	68fb      	ldr	r3, [r7, #12]
 8002042:	621a      	str	r2, [r3, #32]
}
 8002044:	bf00      	nop
 8002046:	372c      	adds	r7, #44	; 0x2c
 8002048:	46bd      	mov	sp, r7
 800204a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204e:	4770      	bx	lr

08002050 <LL_GPIO_SetAFPin_8_15>:
{
 8002050:	b480      	push	{r7}
 8002052:	b08b      	sub	sp, #44	; 0x2c
 8002054:	af00      	add	r7, sp, #0
 8002056:	60f8      	str	r0, [r7, #12]
 8002058:	60b9      	str	r1, [r7, #8]
 800205a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	0a1b      	lsrs	r3, r3, #8
 8002064:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002066:	697b      	ldr	r3, [r7, #20]
 8002068:	fa93 f3a3 	rbit	r3, r3
 800206c:	613b      	str	r3, [r7, #16]
  return result;
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002072:	69bb      	ldr	r3, [r7, #24]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d101      	bne.n	800207c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8002078:	2320      	movs	r3, #32
 800207a:	e003      	b.n	8002084 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800207c:	69bb      	ldr	r3, [r7, #24]
 800207e:	fab3 f383 	clz	r3, r3
 8002082:	b2db      	uxtb	r3, r3
 8002084:	009b      	lsls	r3, r3, #2
 8002086:	210f      	movs	r1, #15
 8002088:	fa01 f303 	lsl.w	r3, r1, r3
 800208c:	43db      	mvns	r3, r3
 800208e:	401a      	ands	r2, r3
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	0a1b      	lsrs	r3, r3, #8
 8002094:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002096:	6a3b      	ldr	r3, [r7, #32]
 8002098:	fa93 f3a3 	rbit	r3, r3
 800209c:	61fb      	str	r3, [r7, #28]
  return result;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80020a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d101      	bne.n	80020ac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80020a8:	2320      	movs	r3, #32
 80020aa:	e003      	b.n	80020b4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80020ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020ae:	fab3 f383 	clz	r3, r3
 80020b2:	b2db      	uxtb	r3, r3
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	6879      	ldr	r1, [r7, #4]
 80020b8:	fa01 f303 	lsl.w	r3, r1, r3
 80020bc:	431a      	orrs	r2, r3
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80020c2:	bf00      	nop
 80020c4:	372c      	adds	r7, #44	; 0x2c
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr

080020ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80020ce:	b580      	push	{r7, lr}
 80020d0:	b088      	sub	sp, #32
 80020d2:	af00      	add	r7, sp, #0
 80020d4:	6078      	str	r0, [r7, #4]
 80020d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80020d8:	683b      	ldr	r3, [r7, #0]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	fa93 f3a3 	rbit	r3, r3
 80020e4:	60fb      	str	r3, [r7, #12]
  return result;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <LL_GPIO_Init+0x26>
    return 32U;
 80020f0:	2320      	movs	r3, #32
 80020f2:	e003      	b.n	80020fc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	fab3 f383 	clz	r3, r3
 80020fa:	b2db      	uxtb	r3, r3
 80020fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80020fe:	e040      	b.n	8002182 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	681a      	ldr	r2, [r3, #0]
 8002104:	2101      	movs	r1, #1
 8002106:	69fb      	ldr	r3, [r7, #28]
 8002108:	fa01 f303 	lsl.w	r3, r1, r3
 800210c:	4013      	ands	r3, r2
 800210e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d032      	beq.n	800217c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	685b      	ldr	r3, [r3, #4]
 800211a:	461a      	mov	r2, r3
 800211c:	69b9      	ldr	r1, [r7, #24]
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f7ff fe8a 	bl	8001e38 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	2b01      	cmp	r3, #1
 800212a:	d003      	beq.n	8002134 <LL_GPIO_Init+0x66>
 800212c:	683b      	ldr	r3, [r7, #0]
 800212e:	685b      	ldr	r3, [r3, #4]
 8002130:	2b02      	cmp	r3, #2
 8002132:	d106      	bne.n	8002142 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	461a      	mov	r2, r3
 800213a:	69b9      	ldr	r1, [r7, #24]
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff fed0 	bl	8001ee2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	691b      	ldr	r3, [r3, #16]
 8002146:	461a      	mov	r2, r3
 8002148:	69b9      	ldr	r1, [r7, #24]
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff ff06 	bl	8001f5c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8002150:	683b      	ldr	r3, [r7, #0]
 8002152:	685b      	ldr	r3, [r3, #4]
 8002154:	2b02      	cmp	r3, #2
 8002156:	d111      	bne.n	800217c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8002158:	69bb      	ldr	r3, [r7, #24]
 800215a:	2bff      	cmp	r3, #255	; 0xff
 800215c:	d807      	bhi.n	800216e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800215e:	683b      	ldr	r3, [r7, #0]
 8002160:	695b      	ldr	r3, [r3, #20]
 8002162:	461a      	mov	r2, r3
 8002164:	69b9      	ldr	r1, [r7, #24]
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f7ff ff35 	bl	8001fd6 <LL_GPIO_SetAFPin_0_7>
 800216c:	e006      	b.n	800217c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	695b      	ldr	r3, [r3, #20]
 8002172:	461a      	mov	r2, r3
 8002174:	69b9      	ldr	r1, [r7, #24]
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f7ff ff6a 	bl	8002050 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800217c:	69fb      	ldr	r3, [r7, #28]
 800217e:	3301      	adds	r3, #1
 8002180:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	681a      	ldr	r2, [r3, #0]
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	fa22 f303 	lsr.w	r3, r2, r3
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1b7      	bne.n	8002100 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2b01      	cmp	r3, #1
 8002196:	d003      	beq.n	80021a0 <LL_GPIO_Init+0xd2>
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	685b      	ldr	r3, [r3, #4]
 800219c:	2b02      	cmp	r3, #2
 800219e:	d107      	bne.n	80021b0 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	6819      	ldr	r1, [r3, #0]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	68db      	ldr	r3, [r3, #12]
 80021a8:	461a      	mov	r2, r3
 80021aa:	6878      	ldr	r0, [r7, #4]
 80021ac:	f7ff fe81 	bl	8001eb2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80021b0:	2300      	movs	r3, #0
}
 80021b2:	4618      	mov	r0, r3
 80021b4:	3720      	adds	r7, #32
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
	...

080021bc <LL_RCC_HSI_IsReady>:
{
 80021bc:	b480      	push	{r7}
 80021be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80021c0:	4b07      	ldr	r3, [pc, #28]	; (80021e0 <LL_RCC_HSI_IsReady+0x24>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80021cc:	d101      	bne.n	80021d2 <LL_RCC_HSI_IsReady+0x16>
 80021ce:	2301      	movs	r3, #1
 80021d0:	e000      	b.n	80021d4 <LL_RCC_HSI_IsReady+0x18>
 80021d2:	2300      	movs	r3, #0
}
 80021d4:	4618      	mov	r0, r3
 80021d6:	46bd      	mov	sp, r7
 80021d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021dc:	4770      	bx	lr
 80021de:	bf00      	nop
 80021e0:	40021000 	.word	0x40021000

080021e4 <LL_RCC_LSE_IsReady>:
{
 80021e4:	b480      	push	{r7}
 80021e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80021e8:	4b07      	ldr	r3, [pc, #28]	; (8002208 <LL_RCC_LSE_IsReady+0x24>)
 80021ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ee:	f003 0302 	and.w	r3, r3, #2
 80021f2:	2b02      	cmp	r3, #2
 80021f4:	d101      	bne.n	80021fa <LL_RCC_LSE_IsReady+0x16>
 80021f6:	2301      	movs	r3, #1
 80021f8:	e000      	b.n	80021fc <LL_RCC_LSE_IsReady+0x18>
 80021fa:	2300      	movs	r3, #0
}
 80021fc:	4618      	mov	r0, r3
 80021fe:	46bd      	mov	sp, r7
 8002200:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002204:	4770      	bx	lr
 8002206:	bf00      	nop
 8002208:	40021000 	.word	0x40021000

0800220c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800220c:	b480      	push	{r7}
 800220e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8002210:	4b06      	ldr	r3, [pc, #24]	; (800222c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f003 0308 	and.w	r3, r3, #8
 8002218:	2b08      	cmp	r3, #8
 800221a:	d101      	bne.n	8002220 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800221c:	2301      	movs	r3, #1
 800221e:	e000      	b.n	8002222 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8002220:	2300      	movs	r3, #0
}
 8002222:	4618      	mov	r0, r3
 8002224:	46bd      	mov	sp, r7
 8002226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800222a:	4770      	bx	lr
 800222c:	40021000 	.word	0x40021000

08002230 <LL_RCC_MSI_GetRange>:
{
 8002230:	b480      	push	{r7}
 8002232:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8002234:	4b04      	ldr	r3, [pc, #16]	; (8002248 <LL_RCC_MSI_GetRange+0x18>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800223c:	4618      	mov	r0, r3
 800223e:	46bd      	mov	sp, r7
 8002240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002244:	4770      	bx	lr
 8002246:	bf00      	nop
 8002248:	40021000 	.word	0x40021000

0800224c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800224c:	b480      	push	{r7}
 800224e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8002250:	4b04      	ldr	r3, [pc, #16]	; (8002264 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8002252:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002256:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800225a:	4618      	mov	r0, r3
 800225c:	46bd      	mov	sp, r7
 800225e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002262:	4770      	bx	lr
 8002264:	40021000 	.word	0x40021000

08002268 <LL_RCC_GetSysClkSource>:
{
 8002268:	b480      	push	{r7}
 800226a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800226c:	4b04      	ldr	r3, [pc, #16]	; (8002280 <LL_RCC_GetSysClkSource+0x18>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	f003 030c 	and.w	r3, r3, #12
}
 8002274:	4618      	mov	r0, r3
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000

08002284 <LL_RCC_GetAHBPrescaler>:
{
 8002284:	b480      	push	{r7}
 8002286:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8002288:	4b04      	ldr	r3, [pc, #16]	; (800229c <LL_RCC_GetAHBPrescaler+0x18>)
 800228a:	689b      	ldr	r3, [r3, #8]
 800228c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8002290:	4618      	mov	r0, r3
 8002292:	46bd      	mov	sp, r7
 8002294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002298:	4770      	bx	lr
 800229a:	bf00      	nop
 800229c:	40021000 	.word	0x40021000

080022a0 <LL_RCC_GetAPB1Prescaler>:
{
 80022a0:	b480      	push	{r7}
 80022a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80022a4:	4b04      	ldr	r3, [pc, #16]	; (80022b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80022ac:	4618      	mov	r0, r3
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr
 80022b6:	bf00      	nop
 80022b8:	40021000 	.word	0x40021000

080022bc <LL_RCC_GetAPB2Prescaler>:
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80022c0:	4b04      	ldr	r3, [pc, #16]	; (80022d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80022c2:	689b      	ldr	r3, [r3, #8]
 80022c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	46bd      	mov	sp, r7
 80022cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d0:	4770      	bx	lr
 80022d2:	bf00      	nop
 80022d4:	40021000 	.word	0x40021000

080022d8 <LL_RCC_GetUSARTClockSource>:
{
 80022d8:	b480      	push	{r7}
 80022da:	b083      	sub	sp, #12
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80022e0:	4b06      	ldr	r3, [pc, #24]	; (80022fc <LL_RCC_GetUSARTClockSource+0x24>)
 80022e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	401a      	ands	r2, r3
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	041b      	lsls	r3, r3, #16
 80022ee:	4313      	orrs	r3, r2
}
 80022f0:	4618      	mov	r0, r3
 80022f2:	370c      	adds	r7, #12
 80022f4:	46bd      	mov	sp, r7
 80022f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fa:	4770      	bx	lr
 80022fc:	40021000 	.word	0x40021000

08002300 <LL_RCC_GetUARTClockSource>:
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002308:	4b06      	ldr	r3, [pc, #24]	; (8002324 <LL_RCC_GetUARTClockSource+0x24>)
 800230a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	401a      	ands	r2, r3
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	041b      	lsls	r3, r3, #16
 8002316:	4313      	orrs	r3, r2
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr
 8002324:	40021000 	.word	0x40021000

08002328 <LL_RCC_PLL_GetMainSource>:
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800232c:	4b04      	ldr	r3, [pc, #16]	; (8002340 <LL_RCC_PLL_GetMainSource+0x18>)
 800232e:	68db      	ldr	r3, [r3, #12]
 8002330:	f003 0303 	and.w	r3, r3, #3
}
 8002334:	4618      	mov	r0, r3
 8002336:	46bd      	mov	sp, r7
 8002338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233c:	4770      	bx	lr
 800233e:	bf00      	nop
 8002340:	40021000 	.word	0x40021000

08002344 <LL_RCC_PLL_GetN>:
{
 8002344:	b480      	push	{r7}
 8002346:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002348:	4b04      	ldr	r3, [pc, #16]	; (800235c <LL_RCC_PLL_GetN+0x18>)
 800234a:	68db      	ldr	r3, [r3, #12]
 800234c:	0a1b      	lsrs	r3, r3, #8
 800234e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr
 800235c:	40021000 	.word	0x40021000

08002360 <LL_RCC_PLL_GetR>:
{
 8002360:	b480      	push	{r7}
 8002362:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8002364:	4b04      	ldr	r3, [pc, #16]	; (8002378 <LL_RCC_PLL_GetR+0x18>)
 8002366:	68db      	ldr	r3, [r3, #12]
 8002368:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800236c:	4618      	mov	r0, r3
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <LL_RCC_PLL_GetDivider>:
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8002380:	4b04      	ldr	r3, [pc, #16]	; (8002394 <LL_RCC_PLL_GetDivider+0x18>)
 8002382:	68db      	ldr	r3, [r3, #12]
 8002384:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8002388:	4618      	mov	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002390:	4770      	bx	lr
 8002392:	bf00      	nop
 8002394:	40021000 	.word	0x40021000

08002398 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8002398:	b580      	push	{r7, lr}
 800239a:	b084      	sub	sp, #16
 800239c:	af00      	add	r7, sp, #0
 800239e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2b03      	cmp	r3, #3
 80023a8:	d137      	bne.n	800241a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80023aa:	6878      	ldr	r0, [r7, #4]
 80023ac:	f7ff ff94 	bl	80022d8 <LL_RCC_GetUSARTClockSource>
 80023b0:	4603      	mov	r3, r0
 80023b2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80023b6:	2b03      	cmp	r3, #3
 80023b8:	f200 80b2 	bhi.w	8002520 <LL_RCC_GetUSARTClockFreq+0x188>
 80023bc:	a201      	add	r2, pc, #4	; (adr r2, 80023c4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80023be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023c2:	bf00      	nop
 80023c4:	08002403 	.word	0x08002403
 80023c8:	080023d5 	.word	0x080023d5
 80023cc:	080023dd 	.word	0x080023dd
 80023d0:	080023ef 	.word	0x080023ef
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80023d4:	f000 f952 	bl	800267c <RCC_GetSystemClockFreq>
 80023d8:	60f8      	str	r0, [r7, #12]
        break;
 80023da:	e0b2      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80023dc:	f7ff feee 	bl	80021bc <LL_RCC_HSI_IsReady>
 80023e0:	4603      	mov	r3, r0
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	f000 809e 	beq.w	8002524 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80023e8:	4b58      	ldr	r3, [pc, #352]	; (800254c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80023ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80023ec:	e09a      	b.n	8002524 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80023ee:	f7ff fef9 	bl	80021e4 <LL_RCC_LSE_IsReady>
 80023f2:	4603      	mov	r3, r0
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	f000 8097 	beq.w	8002528 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80023fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002400:	e092      	b.n	8002528 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002402:	f000 f93b 	bl	800267c <RCC_GetSystemClockFreq>
 8002406:	4603      	mov	r3, r0
 8002408:	4618      	mov	r0, r3
 800240a:	f000 f9c7 	bl	800279c <RCC_GetHCLKClockFreq>
 800240e:	4603      	mov	r3, r0
 8002410:	4618      	mov	r0, r3
 8002412:	f000 f9ed 	bl	80027f0 <RCC_GetPCLK2ClockFreq>
 8002416:	60f8      	str	r0, [r7, #12]
        break;
 8002418:	e093      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	2b0c      	cmp	r3, #12
 800241e:	d146      	bne.n	80024ae <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8002420:	6878      	ldr	r0, [r7, #4]
 8002422:	f7ff ff59 	bl	80022d8 <LL_RCC_GetUSARTClockSource>
 8002426:	4603      	mov	r3, r0
 8002428:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800242c:	2b0c      	cmp	r3, #12
 800242e:	d87d      	bhi.n	800252c <LL_RCC_GetUSARTClockFreq+0x194>
 8002430:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8002432:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002436:	bf00      	nop
 8002438:	08002497 	.word	0x08002497
 800243c:	0800252d 	.word	0x0800252d
 8002440:	0800252d 	.word	0x0800252d
 8002444:	0800252d 	.word	0x0800252d
 8002448:	0800246d 	.word	0x0800246d
 800244c:	0800252d 	.word	0x0800252d
 8002450:	0800252d 	.word	0x0800252d
 8002454:	0800252d 	.word	0x0800252d
 8002458:	08002475 	.word	0x08002475
 800245c:	0800252d 	.word	0x0800252d
 8002460:	0800252d 	.word	0x0800252d
 8002464:	0800252d 	.word	0x0800252d
 8002468:	08002485 	.word	0x08002485
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800246c:	f000 f906 	bl	800267c <RCC_GetSystemClockFreq>
 8002470:	60f8      	str	r0, [r7, #12]
        break;
 8002472:	e066      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002474:	f7ff fea2 	bl	80021bc <LL_RCC_HSI_IsReady>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d058      	beq.n	8002530 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800247e:	4b33      	ldr	r3, [pc, #204]	; (800254c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8002480:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002482:	e055      	b.n	8002530 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8002484:	f7ff feae 	bl	80021e4 <LL_RCC_LSE_IsReady>
 8002488:	4603      	mov	r3, r0
 800248a:	2b00      	cmp	r3, #0
 800248c:	d052      	beq.n	8002534 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800248e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002492:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002494:	e04e      	b.n	8002534 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002496:	f000 f8f1 	bl	800267c <RCC_GetSystemClockFreq>
 800249a:	4603      	mov	r3, r0
 800249c:	4618      	mov	r0, r3
 800249e:	f000 f97d 	bl	800279c <RCC_GetHCLKClockFreq>
 80024a2:	4603      	mov	r3, r0
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 f98f 	bl	80027c8 <RCC_GetPCLK1ClockFreq>
 80024aa:	60f8      	str	r0, [r7, #12]
        break;
 80024ac:	e049      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2b30      	cmp	r3, #48	; 0x30
 80024b2:	d141      	bne.n	8002538 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024b4:	6878      	ldr	r0, [r7, #4]
 80024b6:	f7ff ff0f 	bl	80022d8 <LL_RCC_GetUSARTClockSource>
 80024ba:	4603      	mov	r3, r0
 80024bc:	4a24      	ldr	r2, [pc, #144]	; (8002550 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80024be:	4293      	cmp	r3, r2
 80024c0:	d00d      	beq.n	80024de <LL_RCC_GetUSARTClockFreq+0x146>
 80024c2:	4a23      	ldr	r2, [pc, #140]	; (8002550 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80024c4:	4293      	cmp	r3, r2
 80024c6:	d803      	bhi.n	80024d0 <LL_RCC_GetUSARTClockFreq+0x138>
 80024c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80024cc:	d01c      	beq.n	8002508 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80024ce:	e038      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80024d0:	4a20      	ldr	r2, [pc, #128]	; (8002554 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d007      	beq.n	80024e6 <LL_RCC_GetUSARTClockFreq+0x14e>
 80024d6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80024da:	d00c      	beq.n	80024f6 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80024dc:	e031      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80024de:	f000 f8cd 	bl	800267c <RCC_GetSystemClockFreq>
 80024e2:	60f8      	str	r0, [r7, #12]
          break;
 80024e4:	e02d      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80024e6:	f7ff fe69 	bl	80021bc <LL_RCC_HSI_IsReady>
 80024ea:	4603      	mov	r3, r0
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d025      	beq.n	800253c <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 80024f0:	4b16      	ldr	r3, [pc, #88]	; (800254c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80024f2:	60fb      	str	r3, [r7, #12]
          break;
 80024f4:	e022      	b.n	800253c <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 80024f6:	f7ff fe75 	bl	80021e4 <LL_RCC_LSE_IsReady>
 80024fa:	4603      	mov	r3, r0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d01f      	beq.n	8002540 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8002500:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002504:	60fb      	str	r3, [r7, #12]
          break;
 8002506:	e01b      	b.n	8002540 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002508:	f000 f8b8 	bl	800267c <RCC_GetSystemClockFreq>
 800250c:	4603      	mov	r3, r0
 800250e:	4618      	mov	r0, r3
 8002510:	f000 f944 	bl	800279c <RCC_GetHCLKClockFreq>
 8002514:	4603      	mov	r3, r0
 8002516:	4618      	mov	r0, r3
 8002518:	f000 f956 	bl	80027c8 <RCC_GetPCLK1ClockFreq>
 800251c:	60f8      	str	r0, [r7, #12]
          break;
 800251e:	e010      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002520:	bf00      	nop
 8002522:	e00e      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002524:	bf00      	nop
 8002526:	e00c      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002528:	bf00      	nop
 800252a:	e00a      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 800252c:	bf00      	nop
 800252e:	e008      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002530:	bf00      	nop
 8002532:	e006      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8002534:	bf00      	nop
 8002536:	e004      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8002538:	bf00      	nop
 800253a:	e002      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 800253c:	bf00      	nop
 800253e:	e000      	b.n	8002542 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8002540:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002542:	68fb      	ldr	r3, [r7, #12]
}
 8002544:	4618      	mov	r0, r3
 8002546:	3710      	adds	r7, #16
 8002548:	46bd      	mov	sp, r7
 800254a:	bd80      	pop	{r7, pc}
 800254c:	00f42400 	.word	0x00f42400
 8002550:	00300010 	.word	0x00300010
 8002554:	00300020 	.word	0x00300020

08002558 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b084      	sub	sp, #16
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8002560:	2300      	movs	r3, #0
 8002562:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2bc0      	cmp	r3, #192	; 0xc0
 8002568:	d135      	bne.n	80025d6 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f7ff fec8 	bl	8002300 <LL_RCC_GetUARTClockSource>
 8002570:	4603      	mov	r3, r0
 8002572:	4a3d      	ldr	r2, [pc, #244]	; (8002668 <LL_RCC_GetUARTClockFreq+0x110>)
 8002574:	4293      	cmp	r3, r2
 8002576:	d00d      	beq.n	8002594 <LL_RCC_GetUARTClockFreq+0x3c>
 8002578:	4a3b      	ldr	r2, [pc, #236]	; (8002668 <LL_RCC_GetUARTClockFreq+0x110>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d803      	bhi.n	8002586 <LL_RCC_GetUARTClockFreq+0x2e>
 800257e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002582:	d01c      	beq.n	80025be <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002584:	e02c      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002586:	4a39      	ldr	r2, [pc, #228]	; (800266c <LL_RCC_GetUARTClockFreq+0x114>)
 8002588:	4293      	cmp	r3, r2
 800258a:	d007      	beq.n	800259c <LL_RCC_GetUARTClockFreq+0x44>
 800258c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002590:	d00c      	beq.n	80025ac <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8002592:	e025      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8002594:	f000 f872 	bl	800267c <RCC_GetSystemClockFreq>
 8002598:	60f8      	str	r0, [r7, #12]
        break;
 800259a:	e021      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800259c:	f7ff fe0e 	bl	80021bc <LL_RCC_HSI_IsReady>
 80025a0:	4603      	mov	r3, r0
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d019      	beq.n	80025da <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 80025a6:	4b32      	ldr	r3, [pc, #200]	; (8002670 <LL_RCC_GetUARTClockFreq+0x118>)
 80025a8:	60fb      	str	r3, [r7, #12]
        break;
 80025aa:	e016      	b.n	80025da <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 80025ac:	f7ff fe1a 	bl	80021e4 <LL_RCC_LSE_IsReady>
 80025b0:	4603      	mov	r3, r0
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d013      	beq.n	80025de <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 80025b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ba:	60fb      	str	r3, [r7, #12]
        break;
 80025bc:	e00f      	b.n	80025de <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80025be:	f000 f85d 	bl	800267c <RCC_GetSystemClockFreq>
 80025c2:	4603      	mov	r3, r0
 80025c4:	4618      	mov	r0, r3
 80025c6:	f000 f8e9 	bl	800279c <RCC_GetHCLKClockFreq>
 80025ca:	4603      	mov	r3, r0
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f8fb 	bl	80027c8 <RCC_GetPCLK1ClockFreq>
 80025d2:	60f8      	str	r0, [r7, #12]
        break;
 80025d4:	e004      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 80025d6:	bf00      	nop
 80025d8:	e002      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80025da:	bf00      	nop
 80025dc:	e000      	b.n	80025e0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 80025de:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80025e6:	d135      	bne.n	8002654 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80025e8:	6878      	ldr	r0, [r7, #4]
 80025ea:	f7ff fe89 	bl	8002300 <LL_RCC_GetUARTClockSource>
 80025ee:	4603      	mov	r3, r0
 80025f0:	4a20      	ldr	r2, [pc, #128]	; (8002674 <LL_RCC_GetUARTClockFreq+0x11c>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d00d      	beq.n	8002612 <LL_RCC_GetUARTClockFreq+0xba>
 80025f6:	4a1f      	ldr	r2, [pc, #124]	; (8002674 <LL_RCC_GetUARTClockFreq+0x11c>)
 80025f8:	4293      	cmp	r3, r2
 80025fa:	d803      	bhi.n	8002604 <LL_RCC_GetUARTClockFreq+0xac>
 80025fc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002600:	d01c      	beq.n	800263c <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002602:	e02c      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002604:	4a1c      	ldr	r2, [pc, #112]	; (8002678 <LL_RCC_GetUARTClockFreq+0x120>)
 8002606:	4293      	cmp	r3, r2
 8002608:	d007      	beq.n	800261a <LL_RCC_GetUARTClockFreq+0xc2>
 800260a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800260e:	d00c      	beq.n	800262a <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8002610:	e025      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8002612:	f000 f833 	bl	800267c <RCC_GetSystemClockFreq>
 8002616:	60f8      	str	r0, [r7, #12]
        break;
 8002618:	e021      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 800261a:	f7ff fdcf 	bl	80021bc <LL_RCC_HSI_IsReady>
 800261e:	4603      	mov	r3, r0
 8002620:	2b00      	cmp	r3, #0
 8002622:	d019      	beq.n	8002658 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8002624:	4b12      	ldr	r3, [pc, #72]	; (8002670 <LL_RCC_GetUARTClockFreq+0x118>)
 8002626:	60fb      	str	r3, [r7, #12]
        break;
 8002628:	e016      	b.n	8002658 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 800262a:	f7ff fddb 	bl	80021e4 <LL_RCC_LSE_IsReady>
 800262e:	4603      	mov	r3, r0
 8002630:	2b00      	cmp	r3, #0
 8002632:	d013      	beq.n	800265c <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8002634:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002638:	60fb      	str	r3, [r7, #12]
        break;
 800263a:	e00f      	b.n	800265c <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800263c:	f000 f81e 	bl	800267c <RCC_GetSystemClockFreq>
 8002640:	4603      	mov	r3, r0
 8002642:	4618      	mov	r0, r3
 8002644:	f000 f8aa 	bl	800279c <RCC_GetHCLKClockFreq>
 8002648:	4603      	mov	r3, r0
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f8bc 	bl	80027c8 <RCC_GetPCLK1ClockFreq>
 8002650:	60f8      	str	r0, [r7, #12]
        break;
 8002652:	e004      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8002654:	bf00      	nop
 8002656:	e002      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8002658:	bf00      	nop
 800265a:	e000      	b.n	800265e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 800265c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 800265e:	68fb      	ldr	r3, [r7, #12]
}
 8002660:	4618      	mov	r0, r3
 8002662:	3710      	adds	r7, #16
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}
 8002668:	00c00040 	.word	0x00c00040
 800266c:	00c00080 	.word	0x00c00080
 8002670:	00f42400 	.word	0x00f42400
 8002674:	03000100 	.word	0x03000100
 8002678:	03000200 	.word	0x03000200

0800267c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002682:	f7ff fdf1 	bl	8002268 <LL_RCC_GetSysClkSource>
 8002686:	4603      	mov	r3, r0
 8002688:	2b0c      	cmp	r3, #12
 800268a:	d851      	bhi.n	8002730 <RCC_GetSystemClockFreq+0xb4>
 800268c:	a201      	add	r2, pc, #4	; (adr r2, 8002694 <RCC_GetSystemClockFreq+0x18>)
 800268e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002692:	bf00      	nop
 8002694:	080026c9 	.word	0x080026c9
 8002698:	08002731 	.word	0x08002731
 800269c:	08002731 	.word	0x08002731
 80026a0:	08002731 	.word	0x08002731
 80026a4:	0800271d 	.word	0x0800271d
 80026a8:	08002731 	.word	0x08002731
 80026ac:	08002731 	.word	0x08002731
 80026b0:	08002731 	.word	0x08002731
 80026b4:	08002723 	.word	0x08002723
 80026b8:	08002731 	.word	0x08002731
 80026bc:	08002731 	.word	0x08002731
 80026c0:	08002731 	.word	0x08002731
 80026c4:	08002729 	.word	0x08002729
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80026c8:	f7ff fda0 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d111      	bne.n	80026f6 <RCC_GetSystemClockFreq+0x7a>
 80026d2:	f7ff fd9b 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d004      	beq.n	80026e6 <RCC_GetSystemClockFreq+0x6a>
 80026dc:	f7ff fda8 	bl	8002230 <LL_RCC_MSI_GetRange>
 80026e0:	4603      	mov	r3, r0
 80026e2:	0a1b      	lsrs	r3, r3, #8
 80026e4:	e003      	b.n	80026ee <RCC_GetSystemClockFreq+0x72>
 80026e6:	f7ff fdb1 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 80026ea:	4603      	mov	r3, r0
 80026ec:	0a1b      	lsrs	r3, r3, #8
 80026ee:	4a28      	ldr	r2, [pc, #160]	; (8002790 <RCC_GetSystemClockFreq+0x114>)
 80026f0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026f4:	e010      	b.n	8002718 <RCC_GetSystemClockFreq+0x9c>
 80026f6:	f7ff fd89 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d004      	beq.n	800270a <RCC_GetSystemClockFreq+0x8e>
 8002700:	f7ff fd96 	bl	8002230 <LL_RCC_MSI_GetRange>
 8002704:	4603      	mov	r3, r0
 8002706:	091b      	lsrs	r3, r3, #4
 8002708:	e003      	b.n	8002712 <RCC_GetSystemClockFreq+0x96>
 800270a:	f7ff fd9f 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 800270e:	4603      	mov	r3, r0
 8002710:	091b      	lsrs	r3, r3, #4
 8002712:	4a1f      	ldr	r2, [pc, #124]	; (8002790 <RCC_GetSystemClockFreq+0x114>)
 8002714:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002718:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800271a:	e033      	b.n	8002784 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 800271c:	4b1d      	ldr	r3, [pc, #116]	; (8002794 <RCC_GetSystemClockFreq+0x118>)
 800271e:	607b      	str	r3, [r7, #4]
      break;
 8002720:	e030      	b.n	8002784 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002722:	4b1d      	ldr	r3, [pc, #116]	; (8002798 <RCC_GetSystemClockFreq+0x11c>)
 8002724:	607b      	str	r3, [r7, #4]
      break;
 8002726:	e02d      	b.n	8002784 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002728:	f000 f876 	bl	8002818 <RCC_PLL_GetFreqDomain_SYS>
 800272c:	6078      	str	r0, [r7, #4]
      break;
 800272e:	e029      	b.n	8002784 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002730:	f7ff fd6c 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002734:	4603      	mov	r3, r0
 8002736:	2b00      	cmp	r3, #0
 8002738:	d111      	bne.n	800275e <RCC_GetSystemClockFreq+0xe2>
 800273a:	f7ff fd67 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 800273e:	4603      	mov	r3, r0
 8002740:	2b00      	cmp	r3, #0
 8002742:	d004      	beq.n	800274e <RCC_GetSystemClockFreq+0xd2>
 8002744:	f7ff fd74 	bl	8002230 <LL_RCC_MSI_GetRange>
 8002748:	4603      	mov	r3, r0
 800274a:	0a1b      	lsrs	r3, r3, #8
 800274c:	e003      	b.n	8002756 <RCC_GetSystemClockFreq+0xda>
 800274e:	f7ff fd7d 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 8002752:	4603      	mov	r3, r0
 8002754:	0a1b      	lsrs	r3, r3, #8
 8002756:	4a0e      	ldr	r2, [pc, #56]	; (8002790 <RCC_GetSystemClockFreq+0x114>)
 8002758:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800275c:	e010      	b.n	8002780 <RCC_GetSystemClockFreq+0x104>
 800275e:	f7ff fd55 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002762:	4603      	mov	r3, r0
 8002764:	2b00      	cmp	r3, #0
 8002766:	d004      	beq.n	8002772 <RCC_GetSystemClockFreq+0xf6>
 8002768:	f7ff fd62 	bl	8002230 <LL_RCC_MSI_GetRange>
 800276c:	4603      	mov	r3, r0
 800276e:	091b      	lsrs	r3, r3, #4
 8002770:	e003      	b.n	800277a <RCC_GetSystemClockFreq+0xfe>
 8002772:	f7ff fd6b 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 8002776:	4603      	mov	r3, r0
 8002778:	091b      	lsrs	r3, r3, #4
 800277a:	4a05      	ldr	r2, [pc, #20]	; (8002790 <RCC_GetSystemClockFreq+0x114>)
 800277c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002780:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002782:	bf00      	nop
  }

  return frequency;
 8002784:	687b      	ldr	r3, [r7, #4]
}
 8002786:	4618      	mov	r0, r3
 8002788:	3708      	adds	r7, #8
 800278a:	46bd      	mov	sp, r7
 800278c:	bd80      	pop	{r7, pc}
 800278e:	bf00      	nop
 8002790:	080040f0 	.word	0x080040f0
 8002794:	00f42400 	.word	0x00f42400
 8002798:	007a1200 	.word	0x007a1200

0800279c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800279c:	b580      	push	{r7, lr}
 800279e:	b082      	sub	sp, #8
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80027a4:	f7ff fd6e 	bl	8002284 <LL_RCC_GetAHBPrescaler>
 80027a8:	4603      	mov	r3, r0
 80027aa:	091b      	lsrs	r3, r3, #4
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	4a04      	ldr	r2, [pc, #16]	; (80027c4 <RCC_GetHCLKClockFreq+0x28>)
 80027b2:	5cd3      	ldrb	r3, [r2, r3]
 80027b4:	461a      	mov	r2, r3
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	40d3      	lsrs	r3, r2
}
 80027ba:	4618      	mov	r0, r3
 80027bc:	3708      	adds	r7, #8
 80027be:	46bd      	mov	sp, r7
 80027c0:	bd80      	pop	{r7, pc}
 80027c2:	bf00      	nop
 80027c4:	080040d8 	.word	0x080040d8

080027c8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b082      	sub	sp, #8
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80027d0:	f7ff fd66 	bl	80022a0 <LL_RCC_GetAPB1Prescaler>
 80027d4:	4603      	mov	r3, r0
 80027d6:	0a1b      	lsrs	r3, r3, #8
 80027d8:	4a04      	ldr	r2, [pc, #16]	; (80027ec <RCC_GetPCLK1ClockFreq+0x24>)
 80027da:	5cd3      	ldrb	r3, [r2, r3]
 80027dc:	461a      	mov	r2, r3
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	40d3      	lsrs	r3, r2
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3708      	adds	r7, #8
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	080040e8 	.word	0x080040e8

080027f0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80027f8:	f7ff fd60 	bl	80022bc <LL_RCC_GetAPB2Prescaler>
 80027fc:	4603      	mov	r3, r0
 80027fe:	0adb      	lsrs	r3, r3, #11
 8002800:	4a04      	ldr	r2, [pc, #16]	; (8002814 <RCC_GetPCLK2ClockFreq+0x24>)
 8002802:	5cd3      	ldrb	r3, [r2, r3]
 8002804:	461a      	mov	r2, r3
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	40d3      	lsrs	r3, r2
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
 8002812:	bf00      	nop
 8002814:	080040e8 	.word	0x080040e8

08002818 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002818:	b590      	push	{r4, r7, lr}
 800281a:	b083      	sub	sp, #12
 800281c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 800281e:	f7ff fd83 	bl	8002328 <LL_RCC_PLL_GetMainSource>
 8002822:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	2b02      	cmp	r3, #2
 8002828:	d02d      	beq.n	8002886 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 800282a:	2b03      	cmp	r3, #3
 800282c:	d02e      	beq.n	800288c <RCC_PLL_GetFreqDomain_SYS+0x74>
 800282e:	2b01      	cmp	r3, #1
 8002830:	d12f      	bne.n	8002892 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002832:	f7ff fceb 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002836:	4603      	mov	r3, r0
 8002838:	2b00      	cmp	r3, #0
 800283a:	d111      	bne.n	8002860 <RCC_PLL_GetFreqDomain_SYS+0x48>
 800283c:	f7ff fce6 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002840:	4603      	mov	r3, r0
 8002842:	2b00      	cmp	r3, #0
 8002844:	d004      	beq.n	8002850 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8002846:	f7ff fcf3 	bl	8002230 <LL_RCC_MSI_GetRange>
 800284a:	4603      	mov	r3, r0
 800284c:	0a1b      	lsrs	r3, r3, #8
 800284e:	e003      	b.n	8002858 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002850:	f7ff fcfc 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 8002854:	4603      	mov	r3, r0
 8002856:	0a1b      	lsrs	r3, r3, #8
 8002858:	4a2f      	ldr	r2, [pc, #188]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800285a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800285e:	e010      	b.n	8002882 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8002860:	f7ff fcd4 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d004      	beq.n	8002874 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 800286a:	f7ff fce1 	bl	8002230 <LL_RCC_MSI_GetRange>
 800286e:	4603      	mov	r3, r0
 8002870:	091b      	lsrs	r3, r3, #4
 8002872:	e003      	b.n	800287c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002874:	f7ff fcea 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 8002878:	4603      	mov	r3, r0
 800287a:	091b      	lsrs	r3, r3, #4
 800287c:	4a26      	ldr	r2, [pc, #152]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800287e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002882:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002884:	e02f      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002886:	4b25      	ldr	r3, [pc, #148]	; (800291c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002888:	607b      	str	r3, [r7, #4]
      break;
 800288a:	e02c      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800288c:	4b24      	ldr	r3, [pc, #144]	; (8002920 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800288e:	607b      	str	r3, [r7, #4]
      break;
 8002890:	e029      	b.n	80028e6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002892:	f7ff fcbb 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d111      	bne.n	80028c0 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 800289c:	f7ff fcb6 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d004      	beq.n	80028b0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80028a6:	f7ff fcc3 	bl	8002230 <LL_RCC_MSI_GetRange>
 80028aa:	4603      	mov	r3, r0
 80028ac:	0a1b      	lsrs	r3, r3, #8
 80028ae:	e003      	b.n	80028b8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80028b0:	f7ff fccc 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 80028b4:	4603      	mov	r3, r0
 80028b6:	0a1b      	lsrs	r3, r3, #8
 80028b8:	4a17      	ldr	r2, [pc, #92]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80028ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028be:	e010      	b.n	80028e2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 80028c0:	f7ff fca4 	bl	800220c <LL_RCC_MSI_IsEnabledRangeSelect>
 80028c4:	4603      	mov	r3, r0
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d004      	beq.n	80028d4 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 80028ca:	f7ff fcb1 	bl	8002230 <LL_RCC_MSI_GetRange>
 80028ce:	4603      	mov	r3, r0
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	e003      	b.n	80028dc <RCC_PLL_GetFreqDomain_SYS+0xc4>
 80028d4:	f7ff fcba 	bl	800224c <LL_RCC_MSI_GetRangeAfterStandby>
 80028d8:	4603      	mov	r3, r0
 80028da:	091b      	lsrs	r3, r3, #4
 80028dc:	4a0e      	ldr	r2, [pc, #56]	; (8002918 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80028e4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 80028e6:	f7ff fd49 	bl	800237c <LL_RCC_PLL_GetDivider>
 80028ea:	4603      	mov	r3, r0
 80028ec:	091b      	lsrs	r3, r3, #4
 80028ee:	3301      	adds	r3, #1
 80028f0:	687a      	ldr	r2, [r7, #4]
 80028f2:	fbb2 f4f3 	udiv	r4, r2, r3
 80028f6:	f7ff fd25 	bl	8002344 <LL_RCC_PLL_GetN>
 80028fa:	4603      	mov	r3, r0
 80028fc:	fb03 f404 	mul.w	r4, r3, r4
 8002900:	f7ff fd2e 	bl	8002360 <LL_RCC_PLL_GetR>
 8002904:	4603      	mov	r3, r0
 8002906:	0e5b      	lsrs	r3, r3, #25
 8002908:	3301      	adds	r3, #1
 800290a:	005b      	lsls	r3, r3, #1
 800290c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002910:	4618      	mov	r0, r3
 8002912:	370c      	adds	r7, #12
 8002914:	46bd      	mov	sp, r7
 8002916:	bd90      	pop	{r4, r7, pc}
 8002918:	080040f0 	.word	0x080040f0
 800291c:	00f42400 	.word	0x00f42400
 8002920:	007a1200 	.word	0x007a1200

08002924 <LL_SPI_IsEnabled>:
{
 8002924:	b480      	push	{r7}
 8002926:	b083      	sub	sp, #12
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002934:	2b40      	cmp	r3, #64	; 0x40
 8002936:	d101      	bne.n	800293c <LL_SPI_IsEnabled+0x18>
 8002938:	2301      	movs	r3, #1
 800293a:	e000      	b.n	800293e <LL_SPI_IsEnabled+0x1a>
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	370c      	adds	r7, #12
 8002942:	46bd      	mov	sp, r7
 8002944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002948:	4770      	bx	lr

0800294a <LL_SPI_SetCRCPolynomial>:
{
 800294a:	b480      	push	{r7}
 800294c:	b083      	sub	sp, #12
 800294e:	af00      	add	r7, sp, #0
 8002950:	6078      	str	r0, [r7, #4]
 8002952:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	b29b      	uxth	r3, r3
 8002958:	461a      	mov	r2, r3
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	611a      	str	r2, [r3, #16]
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 800296a:	b580      	push	{r7, lr}
 800296c:	b084      	sub	sp, #16
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
 8002972:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f7ff ffd3 	bl	8002924 <LL_SPI_IsEnabled>
 800297e:	4603      	mov	r3, r0
 8002980:	2b00      	cmp	r3, #0
 8002982:	d13b      	bne.n	80029fc <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800298c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002990:	683a      	ldr	r2, [r7, #0]
 8002992:	6811      	ldr	r1, [r2, #0]
 8002994:	683a      	ldr	r2, [r7, #0]
 8002996:	6852      	ldr	r2, [r2, #4]
 8002998:	4311      	orrs	r1, r2
 800299a:	683a      	ldr	r2, [r7, #0]
 800299c:	68d2      	ldr	r2, [r2, #12]
 800299e:	4311      	orrs	r1, r2
 80029a0:	683a      	ldr	r2, [r7, #0]
 80029a2:	6912      	ldr	r2, [r2, #16]
 80029a4:	4311      	orrs	r1, r2
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	6952      	ldr	r2, [r2, #20]
 80029aa:	4311      	orrs	r1, r2
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	6992      	ldr	r2, [r2, #24]
 80029b0:	4311      	orrs	r1, r2
 80029b2:	683a      	ldr	r2, [r7, #0]
 80029b4:	69d2      	ldr	r2, [r2, #28]
 80029b6:	4311      	orrs	r1, r2
 80029b8:	683a      	ldr	r2, [r7, #0]
 80029ba:	6a12      	ldr	r2, [r2, #32]
 80029bc:	430a      	orrs	r2, r1
 80029be:	431a      	orrs	r2, r3
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80029cc:	f023 0304 	bic.w	r3, r3, #4
 80029d0:	683a      	ldr	r2, [r7, #0]
 80029d2:	6891      	ldr	r1, [r2, #8]
 80029d4:	683a      	ldr	r2, [r7, #0]
 80029d6:	6952      	ldr	r2, [r2, #20]
 80029d8:	0c12      	lsrs	r2, r2, #16
 80029da:	430a      	orrs	r2, r1
 80029dc:	431a      	orrs	r2, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	6a1b      	ldr	r3, [r3, #32]
 80029e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029ea:	d105      	bne.n	80029f8 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029f0:	4619      	mov	r1, r3
 80029f2:	6878      	ldr	r0, [r7, #4]
 80029f4:	f7ff ffa9 	bl	800294a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 80029f8:	2300      	movs	r3, #0
 80029fa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 80029fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3710      	adds	r7, #16
 8002a02:	46bd      	mov	sp, r7
 8002a04:	bd80      	pop	{r7, pc}

08002a06 <LL_TIM_SetPrescaler>:
{
 8002a06:	b480      	push	{r7}
 8002a08:	b083      	sub	sp, #12
 8002a0a:	af00      	add	r7, sp, #0
 8002a0c:	6078      	str	r0, [r7, #4]
 8002a0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	683a      	ldr	r2, [r7, #0]
 8002a14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8002a16:	bf00      	nop
 8002a18:	370c      	adds	r7, #12
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr

08002a22 <LL_TIM_SetAutoReload>:
{
 8002a22:	b480      	push	{r7}
 8002a24:	b083      	sub	sp, #12
 8002a26:	af00      	add	r7, sp, #0
 8002a28:	6078      	str	r0, [r7, #4]
 8002a2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8002a32:	bf00      	nop
 8002a34:	370c      	adds	r7, #12
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr

08002a3e <LL_TIM_SetRepetitionCounter>:
{
 8002a3e:	b480      	push	{r7}
 8002a40:	b083      	sub	sp, #12
 8002a42:	af00      	add	r7, sp, #0
 8002a44:	6078      	str	r0, [r7, #4]
 8002a46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	683a      	ldr	r2, [r7, #0]
 8002a4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002a4e:	bf00      	nop
 8002a50:	370c      	adds	r7, #12
 8002a52:	46bd      	mov	sp, r7
 8002a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a58:	4770      	bx	lr

08002a5a <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002a5a:	b480      	push	{r7}
 8002a5c:	b083      	sub	sp, #12
 8002a5e:	af00      	add	r7, sp, #0
 8002a60:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	695b      	ldr	r3, [r3, #20]
 8002a66:	f043 0201 	orr.w	r2, r3, #1
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	615a      	str	r2, [r3, #20]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr
	...

08002a7c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
 8002a84:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	4a3d      	ldr	r2, [pc, #244]	; (8002b84 <LL_TIM_Init+0x108>)
 8002a90:	4293      	cmp	r3, r2
 8002a92:	d013      	beq.n	8002abc <LL_TIM_Init+0x40>
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a9a:	d00f      	beq.n	8002abc <LL_TIM_Init+0x40>
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	4a3a      	ldr	r2, [pc, #232]	; (8002b88 <LL_TIM_Init+0x10c>)
 8002aa0:	4293      	cmp	r3, r2
 8002aa2:	d00b      	beq.n	8002abc <LL_TIM_Init+0x40>
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a39      	ldr	r2, [pc, #228]	; (8002b8c <LL_TIM_Init+0x110>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d007      	beq.n	8002abc <LL_TIM_Init+0x40>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a38      	ldr	r2, [pc, #224]	; (8002b90 <LL_TIM_Init+0x114>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d003      	beq.n	8002abc <LL_TIM_Init+0x40>
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	4a37      	ldr	r2, [pc, #220]	; (8002b94 <LL_TIM_Init+0x118>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d106      	bne.n	8002aca <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	685b      	ldr	r3, [r3, #4]
 8002ac6:	4313      	orrs	r3, r2
 8002ac8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	4a2d      	ldr	r2, [pc, #180]	; (8002b84 <LL_TIM_Init+0x108>)
 8002ace:	4293      	cmp	r3, r2
 8002ad0:	d01f      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ad8:	d01b      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	4a2a      	ldr	r2, [pc, #168]	; (8002b88 <LL_TIM_Init+0x10c>)
 8002ade:	4293      	cmp	r3, r2
 8002ae0:	d017      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	4a29      	ldr	r2, [pc, #164]	; (8002b8c <LL_TIM_Init+0x110>)
 8002ae6:	4293      	cmp	r3, r2
 8002ae8:	d013      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	4a28      	ldr	r2, [pc, #160]	; (8002b90 <LL_TIM_Init+0x114>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d00f      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	4a27      	ldr	r2, [pc, #156]	; (8002b94 <LL_TIM_Init+0x118>)
 8002af6:	4293      	cmp	r3, r2
 8002af8:	d00b      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	4a26      	ldr	r2, [pc, #152]	; (8002b98 <LL_TIM_Init+0x11c>)
 8002afe:	4293      	cmp	r3, r2
 8002b00:	d007      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4a25      	ldr	r2, [pc, #148]	; (8002b9c <LL_TIM_Init+0x120>)
 8002b06:	4293      	cmp	r3, r2
 8002b08:	d003      	beq.n	8002b12 <LL_TIM_Init+0x96>
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	4a24      	ldr	r2, [pc, #144]	; (8002ba0 <LL_TIM_Init+0x124>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d106      	bne.n	8002b20 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	68fa      	ldr	r2, [r7, #12]
 8002b24:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	689b      	ldr	r3, [r3, #8]
 8002b2a:	4619      	mov	r1, r3
 8002b2c:	6878      	ldr	r0, [r7, #4]
 8002b2e:	f7ff ff78 	bl	8002a22 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	881b      	ldrh	r3, [r3, #0]
 8002b36:	4619      	mov	r1, r3
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff ff64 	bl	8002a06 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	4a10      	ldr	r2, [pc, #64]	; (8002b84 <LL_TIM_Init+0x108>)
 8002b42:	4293      	cmp	r3, r2
 8002b44:	d00f      	beq.n	8002b66 <LL_TIM_Init+0xea>
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	4a12      	ldr	r2, [pc, #72]	; (8002b94 <LL_TIM_Init+0x118>)
 8002b4a:	4293      	cmp	r3, r2
 8002b4c:	d00b      	beq.n	8002b66 <LL_TIM_Init+0xea>
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	4a11      	ldr	r2, [pc, #68]	; (8002b98 <LL_TIM_Init+0x11c>)
 8002b52:	4293      	cmp	r3, r2
 8002b54:	d007      	beq.n	8002b66 <LL_TIM_Init+0xea>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	4a10      	ldr	r2, [pc, #64]	; (8002b9c <LL_TIM_Init+0x120>)
 8002b5a:	4293      	cmp	r3, r2
 8002b5c:	d003      	beq.n	8002b66 <LL_TIM_Init+0xea>
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	4a0f      	ldr	r2, [pc, #60]	; (8002ba0 <LL_TIM_Init+0x124>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d105      	bne.n	8002b72 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	4619      	mov	r1, r3
 8002b6c:	6878      	ldr	r0, [r7, #4]
 8002b6e:	f7ff ff66 	bl	8002a3e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f7ff ff71 	bl	8002a5a <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3710      	adds	r7, #16
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	40012c00 	.word	0x40012c00
 8002b88:	40000400 	.word	0x40000400
 8002b8c:	40000800 	.word	0x40000800
 8002b90:	40000c00 	.word	0x40000c00
 8002b94:	40013400 	.word	0x40013400
 8002b98:	40014000 	.word	0x40014000
 8002b9c:	40014400 	.word	0x40014400
 8002ba0:	40014800 	.word	0x40014800

08002ba4 <LL_USART_IsEnabled>:
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	f003 0301 	and.w	r3, r3, #1
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d101      	bne.n	8002bbc <LL_USART_IsEnabled+0x18>
 8002bb8:	2301      	movs	r3, #1
 8002bba:	e000      	b.n	8002bbe <LL_USART_IsEnabled+0x1a>
 8002bbc:	2300      	movs	r3, #0
}
 8002bbe:	4618      	mov	r0, r3
 8002bc0:	370c      	adds	r7, #12
 8002bc2:	46bd      	mov	sp, r7
 8002bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc8:	4770      	bx	lr

08002bca <LL_USART_SetStopBitsLength>:
{
 8002bca:	b480      	push	{r7}
 8002bcc:	b083      	sub	sp, #12
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	6078      	str	r0, [r7, #4]
 8002bd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	685b      	ldr	r3, [r3, #4]
 8002bd8:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002bdc:	683b      	ldr	r3, [r7, #0]
 8002bde:	431a      	orrs	r2, r3
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	605a      	str	r2, [r3, #4]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr

08002bf0 <LL_USART_SetHWFlowCtrl>:
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b083      	sub	sp, #12
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
 8002bf8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	431a      	orrs	r2, r3
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	609a      	str	r2, [r3, #8]
}
 8002c0a:	bf00      	nop
 8002c0c:	370c      	adds	r7, #12
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c14:	4770      	bx	lr

08002c16 <LL_USART_SetBaudRate>:
{
 8002c16:	b480      	push	{r7}
 8002c18:	b087      	sub	sp, #28
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	60f8      	str	r0, [r7, #12]
 8002c1e:	60b9      	str	r1, [r7, #8]
 8002c20:	607a      	str	r2, [r7, #4]
 8002c22:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002c2a:	d11a      	bne.n	8002c62 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	005a      	lsls	r2, r3, #1
 8002c30:	683b      	ldr	r3, [r7, #0]
 8002c32:	085b      	lsrs	r3, r3, #1
 8002c34:	441a      	add	r2, r3
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002c40:	697a      	ldr	r2, [r7, #20]
 8002c42:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002c46:	4013      	ands	r3, r2
 8002c48:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002c4a:	697b      	ldr	r3, [r7, #20]
 8002c4c:	085b      	lsrs	r3, r3, #1
 8002c4e:	b29b      	uxth	r3, r3
 8002c50:	f003 0307 	and.w	r3, r3, #7
 8002c54:	693a      	ldr	r2, [r7, #16]
 8002c56:	4313      	orrs	r3, r2
 8002c58:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	693a      	ldr	r2, [r7, #16]
 8002c5e:	60da      	str	r2, [r3, #12]
}
 8002c60:	e00a      	b.n	8002c78 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	085a      	lsrs	r2, r3, #1
 8002c66:	68bb      	ldr	r3, [r7, #8]
 8002c68:	441a      	add	r2, r3
 8002c6a:	683b      	ldr	r3, [r7, #0]
 8002c6c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	60da      	str	r2, [r3, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	371c      	adds	r7, #28
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c82:	4770      	bx	lr

08002c84 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002c92:	2300      	movs	r3, #0
 8002c94:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002c96:	6878      	ldr	r0, [r7, #4]
 8002c98:	f7ff ff84 	bl	8002ba4 <LL_USART_IsEnabled>
 8002c9c:	4603      	mov	r3, r0
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d15b      	bne.n	8002d5a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	4b2f      	ldr	r3, [pc, #188]	; (8002d64 <LL_USART_Init+0xe0>)
 8002ca8:	4013      	ands	r3, r2
 8002caa:	683a      	ldr	r2, [r7, #0]
 8002cac:	6851      	ldr	r1, [r2, #4]
 8002cae:	683a      	ldr	r2, [r7, #0]
 8002cb0:	68d2      	ldr	r2, [r2, #12]
 8002cb2:	4311      	orrs	r1, r2
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	6912      	ldr	r2, [r2, #16]
 8002cb8:	4311      	orrs	r1, r2
 8002cba:	683a      	ldr	r2, [r7, #0]
 8002cbc:	6992      	ldr	r2, [r2, #24]
 8002cbe:	430a      	orrs	r2, r1
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	689b      	ldr	r3, [r3, #8]
 8002cca:	4619      	mov	r1, r3
 8002ccc:	6878      	ldr	r0, [r7, #4]
 8002cce:	f7ff ff7c 	bl	8002bca <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	4619      	mov	r1, r3
 8002cd8:	6878      	ldr	r0, [r7, #4]
 8002cda:	f7ff ff89 	bl	8002bf0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	4a21      	ldr	r2, [pc, #132]	; (8002d68 <LL_USART_Init+0xe4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d104      	bne.n	8002cf0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002ce6:	2003      	movs	r0, #3
 8002ce8:	f7ff fb56 	bl	8002398 <LL_RCC_GetUSARTClockFreq>
 8002cec:	60b8      	str	r0, [r7, #8]
 8002cee:	e023      	b.n	8002d38 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a1e      	ldr	r2, [pc, #120]	; (8002d6c <LL_USART_Init+0xe8>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d104      	bne.n	8002d02 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002cf8:	200c      	movs	r0, #12
 8002cfa:	f7ff fb4d 	bl	8002398 <LL_RCC_GetUSARTClockFreq>
 8002cfe:	60b8      	str	r0, [r7, #8]
 8002d00:	e01a      	b.n	8002d38 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	4a1a      	ldr	r2, [pc, #104]	; (8002d70 <LL_USART_Init+0xec>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d104      	bne.n	8002d14 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002d0a:	2030      	movs	r0, #48	; 0x30
 8002d0c:	f7ff fb44 	bl	8002398 <LL_RCC_GetUSARTClockFreq>
 8002d10:	60b8      	str	r0, [r7, #8]
 8002d12:	e011      	b.n	8002d38 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	4a17      	ldr	r2, [pc, #92]	; (8002d74 <LL_USART_Init+0xf0>)
 8002d18:	4293      	cmp	r3, r2
 8002d1a:	d104      	bne.n	8002d26 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002d1c:	20c0      	movs	r0, #192	; 0xc0
 8002d1e:	f7ff fc1b 	bl	8002558 <LL_RCC_GetUARTClockFreq>
 8002d22:	60b8      	str	r0, [r7, #8]
 8002d24:	e008      	b.n	8002d38 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	4a13      	ldr	r2, [pc, #76]	; (8002d78 <LL_USART_Init+0xf4>)
 8002d2a:	4293      	cmp	r3, r2
 8002d2c:	d104      	bne.n	8002d38 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002d2e:	f44f 7040 	mov.w	r0, #768	; 0x300
 8002d32:	f7ff fc11 	bl	8002558 <LL_RCC_GetUARTClockFreq>
 8002d36:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d009      	beq.n	8002d5a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002d46:	2300      	movs	r3, #0
 8002d48:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002d4a:	683b      	ldr	r3, [r7, #0]
 8002d4c:	699a      	ldr	r2, [r3, #24]
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	68b9      	ldr	r1, [r7, #8]
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f7ff ff5e 	bl	8002c16 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002d5a:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3710      	adds	r7, #16
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}
 8002d64:	efff69f3 	.word	0xefff69f3
 8002d68:	40013800 	.word	0x40013800
 8002d6c:	40004400 	.word	0x40004400
 8002d70:	40004800 	.word	0x40004800
 8002d74:	40004c00 	.word	0x40004c00
 8002d78:	40005000 	.word	0x40005000

08002d7c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
 8002d84:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002d86:	687a      	ldr	r2, [r7, #4]
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d8e:	4a07      	ldr	r2, [pc, #28]	; (8002dac <LL_InitTick+0x30>)
 8002d90:	3b01      	subs	r3, #1
 8002d92:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002d94:	4b05      	ldr	r3, [pc, #20]	; (8002dac <LL_InitTick+0x30>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d9a:	4b04      	ldr	r3, [pc, #16]	; (8002dac <LL_InitTick+0x30>)
 8002d9c:	2205      	movs	r2, #5
 8002d9e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002da0:	bf00      	nop
 8002da2:	370c      	adds	r7, #12
 8002da4:	46bd      	mov	sp, r7
 8002da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002daa:	4770      	bx	lr
 8002dac:	e000e010 	.word	0xe000e010

08002db0 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b082      	sub	sp, #8
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002db8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002dbc:	6878      	ldr	r0, [r7, #4]
 8002dbe:	f7ff ffdd 	bl	8002d7c <LL_InitTick>
}
 8002dc2:	bf00      	nop
 8002dc4:	3708      	adds	r7, #8
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
	...

08002dcc <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b085      	sub	sp, #20
 8002dd0:	af00      	add	r7, sp, #0
 8002dd2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002dd4:	4b0f      	ldr	r3, [pc, #60]	; (8002e14 <LL_mDelay+0x48>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002dde:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002de6:	d00c      	beq.n	8002e02 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	3301      	adds	r3, #1
 8002dec:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002dee:	e008      	b.n	8002e02 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002df0:	4b08      	ldr	r3, [pc, #32]	; (8002e14 <LL_mDelay+0x48>)
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	d002      	beq.n	8002e02 <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	3b01      	subs	r3, #1
 8002e00:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d1f3      	bne.n	8002df0 <LL_mDelay+0x24>
    }
  }
}
 8002e08:	bf00      	nop
 8002e0a:	3714      	adds	r7, #20
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e12:	4770      	bx	lr
 8002e14:	e000e010 	.word	0xe000e010

08002e18 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002e20:	4a04      	ldr	r2, [pc, #16]	; (8002e34 <LL_SetSystemCoreClock+0x1c>)
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6013      	str	r3, [r2, #0]
}
 8002e26:	bf00      	nop
 8002e28:	370c      	adds	r7, #12
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000004 	.word	0x20000004

08002e38 <__errno>:
 8002e38:	4b01      	ldr	r3, [pc, #4]	; (8002e40 <__errno+0x8>)
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	4770      	bx	lr
 8002e3e:	bf00      	nop
 8002e40:	20000008 	.word	0x20000008

08002e44 <__libc_init_array>:
 8002e44:	b570      	push	{r4, r5, r6, lr}
 8002e46:	4e0d      	ldr	r6, [pc, #52]	; (8002e7c <__libc_init_array+0x38>)
 8002e48:	4c0d      	ldr	r4, [pc, #52]	; (8002e80 <__libc_init_array+0x3c>)
 8002e4a:	1ba4      	subs	r4, r4, r6
 8002e4c:	10a4      	asrs	r4, r4, #2
 8002e4e:	2500      	movs	r5, #0
 8002e50:	42a5      	cmp	r5, r4
 8002e52:	d109      	bne.n	8002e68 <__libc_init_array+0x24>
 8002e54:	4e0b      	ldr	r6, [pc, #44]	; (8002e84 <__libc_init_array+0x40>)
 8002e56:	4c0c      	ldr	r4, [pc, #48]	; (8002e88 <__libc_init_array+0x44>)
 8002e58:	f000 ff68 	bl	8003d2c <_init>
 8002e5c:	1ba4      	subs	r4, r4, r6
 8002e5e:	10a4      	asrs	r4, r4, #2
 8002e60:	2500      	movs	r5, #0
 8002e62:	42a5      	cmp	r5, r4
 8002e64:	d105      	bne.n	8002e72 <__libc_init_array+0x2e>
 8002e66:	bd70      	pop	{r4, r5, r6, pc}
 8002e68:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e6c:	4798      	blx	r3
 8002e6e:	3501      	adds	r5, #1
 8002e70:	e7ee      	b.n	8002e50 <__libc_init_array+0xc>
 8002e72:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002e76:	4798      	blx	r3
 8002e78:	3501      	adds	r5, #1
 8002e7a:	e7f2      	b.n	8002e62 <__libc_init_array+0x1e>
 8002e7c:	080041b8 	.word	0x080041b8
 8002e80:	080041b8 	.word	0x080041b8
 8002e84:	080041b8 	.word	0x080041b8
 8002e88:	080041bc 	.word	0x080041bc

08002e8c <memset>:
 8002e8c:	4402      	add	r2, r0
 8002e8e:	4603      	mov	r3, r0
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d100      	bne.n	8002e96 <memset+0xa>
 8002e94:	4770      	bx	lr
 8002e96:	f803 1b01 	strb.w	r1, [r3], #1
 8002e9a:	e7f9      	b.n	8002e90 <memset+0x4>

08002e9c <iprintf>:
 8002e9c:	b40f      	push	{r0, r1, r2, r3}
 8002e9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ec8 <iprintf+0x2c>)
 8002ea0:	b513      	push	{r0, r1, r4, lr}
 8002ea2:	681c      	ldr	r4, [r3, #0]
 8002ea4:	b124      	cbz	r4, 8002eb0 <iprintf+0x14>
 8002ea6:	69a3      	ldr	r3, [r4, #24]
 8002ea8:	b913      	cbnz	r3, 8002eb0 <iprintf+0x14>
 8002eaa:	4620      	mov	r0, r4
 8002eac:	f000 fa22 	bl	80032f4 <__sinit>
 8002eb0:	ab05      	add	r3, sp, #20
 8002eb2:	9a04      	ldr	r2, [sp, #16]
 8002eb4:	68a1      	ldr	r1, [r4, #8]
 8002eb6:	9301      	str	r3, [sp, #4]
 8002eb8:	4620      	mov	r0, r4
 8002eba:	f000 fbdb 	bl	8003674 <_vfiprintf_r>
 8002ebe:	b002      	add	sp, #8
 8002ec0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002ec4:	b004      	add	sp, #16
 8002ec6:	4770      	bx	lr
 8002ec8:	20000008 	.word	0x20000008

08002ecc <_puts_r>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	460e      	mov	r6, r1
 8002ed0:	4605      	mov	r5, r0
 8002ed2:	b118      	cbz	r0, 8002edc <_puts_r+0x10>
 8002ed4:	6983      	ldr	r3, [r0, #24]
 8002ed6:	b90b      	cbnz	r3, 8002edc <_puts_r+0x10>
 8002ed8:	f000 fa0c 	bl	80032f4 <__sinit>
 8002edc:	69ab      	ldr	r3, [r5, #24]
 8002ede:	68ac      	ldr	r4, [r5, #8]
 8002ee0:	b913      	cbnz	r3, 8002ee8 <_puts_r+0x1c>
 8002ee2:	4628      	mov	r0, r5
 8002ee4:	f000 fa06 	bl	80032f4 <__sinit>
 8002ee8:	4b23      	ldr	r3, [pc, #140]	; (8002f78 <_puts_r+0xac>)
 8002eea:	429c      	cmp	r4, r3
 8002eec:	d117      	bne.n	8002f1e <_puts_r+0x52>
 8002eee:	686c      	ldr	r4, [r5, #4]
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	071b      	lsls	r3, r3, #28
 8002ef4:	d51d      	bpl.n	8002f32 <_puts_r+0x66>
 8002ef6:	6923      	ldr	r3, [r4, #16]
 8002ef8:	b1db      	cbz	r3, 8002f32 <_puts_r+0x66>
 8002efa:	3e01      	subs	r6, #1
 8002efc:	68a3      	ldr	r3, [r4, #8]
 8002efe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002f02:	3b01      	subs	r3, #1
 8002f04:	60a3      	str	r3, [r4, #8]
 8002f06:	b9e9      	cbnz	r1, 8002f44 <_puts_r+0x78>
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	da2e      	bge.n	8002f6a <_puts_r+0x9e>
 8002f0c:	4622      	mov	r2, r4
 8002f0e:	210a      	movs	r1, #10
 8002f10:	4628      	mov	r0, r5
 8002f12:	f000 f83f 	bl	8002f94 <__swbuf_r>
 8002f16:	3001      	adds	r0, #1
 8002f18:	d011      	beq.n	8002f3e <_puts_r+0x72>
 8002f1a:	200a      	movs	r0, #10
 8002f1c:	e011      	b.n	8002f42 <_puts_r+0x76>
 8002f1e:	4b17      	ldr	r3, [pc, #92]	; (8002f7c <_puts_r+0xb0>)
 8002f20:	429c      	cmp	r4, r3
 8002f22:	d101      	bne.n	8002f28 <_puts_r+0x5c>
 8002f24:	68ac      	ldr	r4, [r5, #8]
 8002f26:	e7e3      	b.n	8002ef0 <_puts_r+0x24>
 8002f28:	4b15      	ldr	r3, [pc, #84]	; (8002f80 <_puts_r+0xb4>)
 8002f2a:	429c      	cmp	r4, r3
 8002f2c:	bf08      	it	eq
 8002f2e:	68ec      	ldreq	r4, [r5, #12]
 8002f30:	e7de      	b.n	8002ef0 <_puts_r+0x24>
 8002f32:	4621      	mov	r1, r4
 8002f34:	4628      	mov	r0, r5
 8002f36:	f000 f87f 	bl	8003038 <__swsetup_r>
 8002f3a:	2800      	cmp	r0, #0
 8002f3c:	d0dd      	beq.n	8002efa <_puts_r+0x2e>
 8002f3e:	f04f 30ff 	mov.w	r0, #4294967295
 8002f42:	bd70      	pop	{r4, r5, r6, pc}
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	da04      	bge.n	8002f52 <_puts_r+0x86>
 8002f48:	69a2      	ldr	r2, [r4, #24]
 8002f4a:	429a      	cmp	r2, r3
 8002f4c:	dc06      	bgt.n	8002f5c <_puts_r+0x90>
 8002f4e:	290a      	cmp	r1, #10
 8002f50:	d004      	beq.n	8002f5c <_puts_r+0x90>
 8002f52:	6823      	ldr	r3, [r4, #0]
 8002f54:	1c5a      	adds	r2, r3, #1
 8002f56:	6022      	str	r2, [r4, #0]
 8002f58:	7019      	strb	r1, [r3, #0]
 8002f5a:	e7cf      	b.n	8002efc <_puts_r+0x30>
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4628      	mov	r0, r5
 8002f60:	f000 f818 	bl	8002f94 <__swbuf_r>
 8002f64:	3001      	adds	r0, #1
 8002f66:	d1c9      	bne.n	8002efc <_puts_r+0x30>
 8002f68:	e7e9      	b.n	8002f3e <_puts_r+0x72>
 8002f6a:	6823      	ldr	r3, [r4, #0]
 8002f6c:	200a      	movs	r0, #10
 8002f6e:	1c5a      	adds	r2, r3, #1
 8002f70:	6022      	str	r2, [r4, #0]
 8002f72:	7018      	strb	r0, [r3, #0]
 8002f74:	e7e5      	b.n	8002f42 <_puts_r+0x76>
 8002f76:	bf00      	nop
 8002f78:	08004144 	.word	0x08004144
 8002f7c:	08004164 	.word	0x08004164
 8002f80:	08004124 	.word	0x08004124

08002f84 <puts>:
 8002f84:	4b02      	ldr	r3, [pc, #8]	; (8002f90 <puts+0xc>)
 8002f86:	4601      	mov	r1, r0
 8002f88:	6818      	ldr	r0, [r3, #0]
 8002f8a:	f7ff bf9f 	b.w	8002ecc <_puts_r>
 8002f8e:	bf00      	nop
 8002f90:	20000008 	.word	0x20000008

08002f94 <__swbuf_r>:
 8002f94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f96:	460e      	mov	r6, r1
 8002f98:	4614      	mov	r4, r2
 8002f9a:	4605      	mov	r5, r0
 8002f9c:	b118      	cbz	r0, 8002fa6 <__swbuf_r+0x12>
 8002f9e:	6983      	ldr	r3, [r0, #24]
 8002fa0:	b90b      	cbnz	r3, 8002fa6 <__swbuf_r+0x12>
 8002fa2:	f000 f9a7 	bl	80032f4 <__sinit>
 8002fa6:	4b21      	ldr	r3, [pc, #132]	; (800302c <__swbuf_r+0x98>)
 8002fa8:	429c      	cmp	r4, r3
 8002faa:	d12a      	bne.n	8003002 <__swbuf_r+0x6e>
 8002fac:	686c      	ldr	r4, [r5, #4]
 8002fae:	69a3      	ldr	r3, [r4, #24]
 8002fb0:	60a3      	str	r3, [r4, #8]
 8002fb2:	89a3      	ldrh	r3, [r4, #12]
 8002fb4:	071a      	lsls	r2, r3, #28
 8002fb6:	d52e      	bpl.n	8003016 <__swbuf_r+0x82>
 8002fb8:	6923      	ldr	r3, [r4, #16]
 8002fba:	b363      	cbz	r3, 8003016 <__swbuf_r+0x82>
 8002fbc:	6923      	ldr	r3, [r4, #16]
 8002fbe:	6820      	ldr	r0, [r4, #0]
 8002fc0:	1ac0      	subs	r0, r0, r3
 8002fc2:	6963      	ldr	r3, [r4, #20]
 8002fc4:	b2f6      	uxtb	r6, r6
 8002fc6:	4283      	cmp	r3, r0
 8002fc8:	4637      	mov	r7, r6
 8002fca:	dc04      	bgt.n	8002fd6 <__swbuf_r+0x42>
 8002fcc:	4621      	mov	r1, r4
 8002fce:	4628      	mov	r0, r5
 8002fd0:	f000 f926 	bl	8003220 <_fflush_r>
 8002fd4:	bb28      	cbnz	r0, 8003022 <__swbuf_r+0x8e>
 8002fd6:	68a3      	ldr	r3, [r4, #8]
 8002fd8:	3b01      	subs	r3, #1
 8002fda:	60a3      	str	r3, [r4, #8]
 8002fdc:	6823      	ldr	r3, [r4, #0]
 8002fde:	1c5a      	adds	r2, r3, #1
 8002fe0:	6022      	str	r2, [r4, #0]
 8002fe2:	701e      	strb	r6, [r3, #0]
 8002fe4:	6963      	ldr	r3, [r4, #20]
 8002fe6:	3001      	adds	r0, #1
 8002fe8:	4283      	cmp	r3, r0
 8002fea:	d004      	beq.n	8002ff6 <__swbuf_r+0x62>
 8002fec:	89a3      	ldrh	r3, [r4, #12]
 8002fee:	07db      	lsls	r3, r3, #31
 8002ff0:	d519      	bpl.n	8003026 <__swbuf_r+0x92>
 8002ff2:	2e0a      	cmp	r6, #10
 8002ff4:	d117      	bne.n	8003026 <__swbuf_r+0x92>
 8002ff6:	4621      	mov	r1, r4
 8002ff8:	4628      	mov	r0, r5
 8002ffa:	f000 f911 	bl	8003220 <_fflush_r>
 8002ffe:	b190      	cbz	r0, 8003026 <__swbuf_r+0x92>
 8003000:	e00f      	b.n	8003022 <__swbuf_r+0x8e>
 8003002:	4b0b      	ldr	r3, [pc, #44]	; (8003030 <__swbuf_r+0x9c>)
 8003004:	429c      	cmp	r4, r3
 8003006:	d101      	bne.n	800300c <__swbuf_r+0x78>
 8003008:	68ac      	ldr	r4, [r5, #8]
 800300a:	e7d0      	b.n	8002fae <__swbuf_r+0x1a>
 800300c:	4b09      	ldr	r3, [pc, #36]	; (8003034 <__swbuf_r+0xa0>)
 800300e:	429c      	cmp	r4, r3
 8003010:	bf08      	it	eq
 8003012:	68ec      	ldreq	r4, [r5, #12]
 8003014:	e7cb      	b.n	8002fae <__swbuf_r+0x1a>
 8003016:	4621      	mov	r1, r4
 8003018:	4628      	mov	r0, r5
 800301a:	f000 f80d 	bl	8003038 <__swsetup_r>
 800301e:	2800      	cmp	r0, #0
 8003020:	d0cc      	beq.n	8002fbc <__swbuf_r+0x28>
 8003022:	f04f 37ff 	mov.w	r7, #4294967295
 8003026:	4638      	mov	r0, r7
 8003028:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800302a:	bf00      	nop
 800302c:	08004144 	.word	0x08004144
 8003030:	08004164 	.word	0x08004164
 8003034:	08004124 	.word	0x08004124

08003038 <__swsetup_r>:
 8003038:	4b32      	ldr	r3, [pc, #200]	; (8003104 <__swsetup_r+0xcc>)
 800303a:	b570      	push	{r4, r5, r6, lr}
 800303c:	681d      	ldr	r5, [r3, #0]
 800303e:	4606      	mov	r6, r0
 8003040:	460c      	mov	r4, r1
 8003042:	b125      	cbz	r5, 800304e <__swsetup_r+0x16>
 8003044:	69ab      	ldr	r3, [r5, #24]
 8003046:	b913      	cbnz	r3, 800304e <__swsetup_r+0x16>
 8003048:	4628      	mov	r0, r5
 800304a:	f000 f953 	bl	80032f4 <__sinit>
 800304e:	4b2e      	ldr	r3, [pc, #184]	; (8003108 <__swsetup_r+0xd0>)
 8003050:	429c      	cmp	r4, r3
 8003052:	d10f      	bne.n	8003074 <__swsetup_r+0x3c>
 8003054:	686c      	ldr	r4, [r5, #4]
 8003056:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800305a:	b29a      	uxth	r2, r3
 800305c:	0715      	lsls	r5, r2, #28
 800305e:	d42c      	bmi.n	80030ba <__swsetup_r+0x82>
 8003060:	06d0      	lsls	r0, r2, #27
 8003062:	d411      	bmi.n	8003088 <__swsetup_r+0x50>
 8003064:	2209      	movs	r2, #9
 8003066:	6032      	str	r2, [r6, #0]
 8003068:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800306c:	81a3      	strh	r3, [r4, #12]
 800306e:	f04f 30ff 	mov.w	r0, #4294967295
 8003072:	e03e      	b.n	80030f2 <__swsetup_r+0xba>
 8003074:	4b25      	ldr	r3, [pc, #148]	; (800310c <__swsetup_r+0xd4>)
 8003076:	429c      	cmp	r4, r3
 8003078:	d101      	bne.n	800307e <__swsetup_r+0x46>
 800307a:	68ac      	ldr	r4, [r5, #8]
 800307c:	e7eb      	b.n	8003056 <__swsetup_r+0x1e>
 800307e:	4b24      	ldr	r3, [pc, #144]	; (8003110 <__swsetup_r+0xd8>)
 8003080:	429c      	cmp	r4, r3
 8003082:	bf08      	it	eq
 8003084:	68ec      	ldreq	r4, [r5, #12]
 8003086:	e7e6      	b.n	8003056 <__swsetup_r+0x1e>
 8003088:	0751      	lsls	r1, r2, #29
 800308a:	d512      	bpl.n	80030b2 <__swsetup_r+0x7a>
 800308c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800308e:	b141      	cbz	r1, 80030a2 <__swsetup_r+0x6a>
 8003090:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8003094:	4299      	cmp	r1, r3
 8003096:	d002      	beq.n	800309e <__swsetup_r+0x66>
 8003098:	4630      	mov	r0, r6
 800309a:	f000 fa19 	bl	80034d0 <_free_r>
 800309e:	2300      	movs	r3, #0
 80030a0:	6363      	str	r3, [r4, #52]	; 0x34
 80030a2:	89a3      	ldrh	r3, [r4, #12]
 80030a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80030a8:	81a3      	strh	r3, [r4, #12]
 80030aa:	2300      	movs	r3, #0
 80030ac:	6063      	str	r3, [r4, #4]
 80030ae:	6923      	ldr	r3, [r4, #16]
 80030b0:	6023      	str	r3, [r4, #0]
 80030b2:	89a3      	ldrh	r3, [r4, #12]
 80030b4:	f043 0308 	orr.w	r3, r3, #8
 80030b8:	81a3      	strh	r3, [r4, #12]
 80030ba:	6923      	ldr	r3, [r4, #16]
 80030bc:	b94b      	cbnz	r3, 80030d2 <__swsetup_r+0x9a>
 80030be:	89a3      	ldrh	r3, [r4, #12]
 80030c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80030c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80030c8:	d003      	beq.n	80030d2 <__swsetup_r+0x9a>
 80030ca:	4621      	mov	r1, r4
 80030cc:	4630      	mov	r0, r6
 80030ce:	f000 f9bf 	bl	8003450 <__smakebuf_r>
 80030d2:	89a2      	ldrh	r2, [r4, #12]
 80030d4:	f012 0301 	ands.w	r3, r2, #1
 80030d8:	d00c      	beq.n	80030f4 <__swsetup_r+0xbc>
 80030da:	2300      	movs	r3, #0
 80030dc:	60a3      	str	r3, [r4, #8]
 80030de:	6963      	ldr	r3, [r4, #20]
 80030e0:	425b      	negs	r3, r3
 80030e2:	61a3      	str	r3, [r4, #24]
 80030e4:	6923      	ldr	r3, [r4, #16]
 80030e6:	b953      	cbnz	r3, 80030fe <__swsetup_r+0xc6>
 80030e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80030ec:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80030f0:	d1ba      	bne.n	8003068 <__swsetup_r+0x30>
 80030f2:	bd70      	pop	{r4, r5, r6, pc}
 80030f4:	0792      	lsls	r2, r2, #30
 80030f6:	bf58      	it	pl
 80030f8:	6963      	ldrpl	r3, [r4, #20]
 80030fa:	60a3      	str	r3, [r4, #8]
 80030fc:	e7f2      	b.n	80030e4 <__swsetup_r+0xac>
 80030fe:	2000      	movs	r0, #0
 8003100:	e7f7      	b.n	80030f2 <__swsetup_r+0xba>
 8003102:	bf00      	nop
 8003104:	20000008 	.word	0x20000008
 8003108:	08004144 	.word	0x08004144
 800310c:	08004164 	.word	0x08004164
 8003110:	08004124 	.word	0x08004124

08003114 <__sflush_r>:
 8003114:	898a      	ldrh	r2, [r1, #12]
 8003116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800311a:	4605      	mov	r5, r0
 800311c:	0710      	lsls	r0, r2, #28
 800311e:	460c      	mov	r4, r1
 8003120:	d458      	bmi.n	80031d4 <__sflush_r+0xc0>
 8003122:	684b      	ldr	r3, [r1, #4]
 8003124:	2b00      	cmp	r3, #0
 8003126:	dc05      	bgt.n	8003134 <__sflush_r+0x20>
 8003128:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800312a:	2b00      	cmp	r3, #0
 800312c:	dc02      	bgt.n	8003134 <__sflush_r+0x20>
 800312e:	2000      	movs	r0, #0
 8003130:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003134:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003136:	2e00      	cmp	r6, #0
 8003138:	d0f9      	beq.n	800312e <__sflush_r+0x1a>
 800313a:	2300      	movs	r3, #0
 800313c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8003140:	682f      	ldr	r7, [r5, #0]
 8003142:	6a21      	ldr	r1, [r4, #32]
 8003144:	602b      	str	r3, [r5, #0]
 8003146:	d032      	beq.n	80031ae <__sflush_r+0x9a>
 8003148:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800314a:	89a3      	ldrh	r3, [r4, #12]
 800314c:	075a      	lsls	r2, r3, #29
 800314e:	d505      	bpl.n	800315c <__sflush_r+0x48>
 8003150:	6863      	ldr	r3, [r4, #4]
 8003152:	1ac0      	subs	r0, r0, r3
 8003154:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8003156:	b10b      	cbz	r3, 800315c <__sflush_r+0x48>
 8003158:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800315a:	1ac0      	subs	r0, r0, r3
 800315c:	2300      	movs	r3, #0
 800315e:	4602      	mov	r2, r0
 8003160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8003162:	6a21      	ldr	r1, [r4, #32]
 8003164:	4628      	mov	r0, r5
 8003166:	47b0      	blx	r6
 8003168:	1c43      	adds	r3, r0, #1
 800316a:	89a3      	ldrh	r3, [r4, #12]
 800316c:	d106      	bne.n	800317c <__sflush_r+0x68>
 800316e:	6829      	ldr	r1, [r5, #0]
 8003170:	291d      	cmp	r1, #29
 8003172:	d848      	bhi.n	8003206 <__sflush_r+0xf2>
 8003174:	4a29      	ldr	r2, [pc, #164]	; (800321c <__sflush_r+0x108>)
 8003176:	40ca      	lsrs	r2, r1
 8003178:	07d6      	lsls	r6, r2, #31
 800317a:	d544      	bpl.n	8003206 <__sflush_r+0xf2>
 800317c:	2200      	movs	r2, #0
 800317e:	6062      	str	r2, [r4, #4]
 8003180:	04d9      	lsls	r1, r3, #19
 8003182:	6922      	ldr	r2, [r4, #16]
 8003184:	6022      	str	r2, [r4, #0]
 8003186:	d504      	bpl.n	8003192 <__sflush_r+0x7e>
 8003188:	1c42      	adds	r2, r0, #1
 800318a:	d101      	bne.n	8003190 <__sflush_r+0x7c>
 800318c:	682b      	ldr	r3, [r5, #0]
 800318e:	b903      	cbnz	r3, 8003192 <__sflush_r+0x7e>
 8003190:	6560      	str	r0, [r4, #84]	; 0x54
 8003192:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8003194:	602f      	str	r7, [r5, #0]
 8003196:	2900      	cmp	r1, #0
 8003198:	d0c9      	beq.n	800312e <__sflush_r+0x1a>
 800319a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800319e:	4299      	cmp	r1, r3
 80031a0:	d002      	beq.n	80031a8 <__sflush_r+0x94>
 80031a2:	4628      	mov	r0, r5
 80031a4:	f000 f994 	bl	80034d0 <_free_r>
 80031a8:	2000      	movs	r0, #0
 80031aa:	6360      	str	r0, [r4, #52]	; 0x34
 80031ac:	e7c0      	b.n	8003130 <__sflush_r+0x1c>
 80031ae:	2301      	movs	r3, #1
 80031b0:	4628      	mov	r0, r5
 80031b2:	47b0      	blx	r6
 80031b4:	1c41      	adds	r1, r0, #1
 80031b6:	d1c8      	bne.n	800314a <__sflush_r+0x36>
 80031b8:	682b      	ldr	r3, [r5, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d0c5      	beq.n	800314a <__sflush_r+0x36>
 80031be:	2b1d      	cmp	r3, #29
 80031c0:	d001      	beq.n	80031c6 <__sflush_r+0xb2>
 80031c2:	2b16      	cmp	r3, #22
 80031c4:	d101      	bne.n	80031ca <__sflush_r+0xb6>
 80031c6:	602f      	str	r7, [r5, #0]
 80031c8:	e7b1      	b.n	800312e <__sflush_r+0x1a>
 80031ca:	89a3      	ldrh	r3, [r4, #12]
 80031cc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80031d0:	81a3      	strh	r3, [r4, #12]
 80031d2:	e7ad      	b.n	8003130 <__sflush_r+0x1c>
 80031d4:	690f      	ldr	r7, [r1, #16]
 80031d6:	2f00      	cmp	r7, #0
 80031d8:	d0a9      	beq.n	800312e <__sflush_r+0x1a>
 80031da:	0793      	lsls	r3, r2, #30
 80031dc:	680e      	ldr	r6, [r1, #0]
 80031de:	bf08      	it	eq
 80031e0:	694b      	ldreq	r3, [r1, #20]
 80031e2:	600f      	str	r7, [r1, #0]
 80031e4:	bf18      	it	ne
 80031e6:	2300      	movne	r3, #0
 80031e8:	eba6 0807 	sub.w	r8, r6, r7
 80031ec:	608b      	str	r3, [r1, #8]
 80031ee:	f1b8 0f00 	cmp.w	r8, #0
 80031f2:	dd9c      	ble.n	800312e <__sflush_r+0x1a>
 80031f4:	4643      	mov	r3, r8
 80031f6:	463a      	mov	r2, r7
 80031f8:	6a21      	ldr	r1, [r4, #32]
 80031fa:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80031fc:	4628      	mov	r0, r5
 80031fe:	47b0      	blx	r6
 8003200:	2800      	cmp	r0, #0
 8003202:	dc06      	bgt.n	8003212 <__sflush_r+0xfe>
 8003204:	89a3      	ldrh	r3, [r4, #12]
 8003206:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800320a:	81a3      	strh	r3, [r4, #12]
 800320c:	f04f 30ff 	mov.w	r0, #4294967295
 8003210:	e78e      	b.n	8003130 <__sflush_r+0x1c>
 8003212:	4407      	add	r7, r0
 8003214:	eba8 0800 	sub.w	r8, r8, r0
 8003218:	e7e9      	b.n	80031ee <__sflush_r+0xda>
 800321a:	bf00      	nop
 800321c:	20400001 	.word	0x20400001

08003220 <_fflush_r>:
 8003220:	b538      	push	{r3, r4, r5, lr}
 8003222:	690b      	ldr	r3, [r1, #16]
 8003224:	4605      	mov	r5, r0
 8003226:	460c      	mov	r4, r1
 8003228:	b1db      	cbz	r3, 8003262 <_fflush_r+0x42>
 800322a:	b118      	cbz	r0, 8003234 <_fflush_r+0x14>
 800322c:	6983      	ldr	r3, [r0, #24]
 800322e:	b90b      	cbnz	r3, 8003234 <_fflush_r+0x14>
 8003230:	f000 f860 	bl	80032f4 <__sinit>
 8003234:	4b0c      	ldr	r3, [pc, #48]	; (8003268 <_fflush_r+0x48>)
 8003236:	429c      	cmp	r4, r3
 8003238:	d109      	bne.n	800324e <_fflush_r+0x2e>
 800323a:	686c      	ldr	r4, [r5, #4]
 800323c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003240:	b17b      	cbz	r3, 8003262 <_fflush_r+0x42>
 8003242:	4621      	mov	r1, r4
 8003244:	4628      	mov	r0, r5
 8003246:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800324a:	f7ff bf63 	b.w	8003114 <__sflush_r>
 800324e:	4b07      	ldr	r3, [pc, #28]	; (800326c <_fflush_r+0x4c>)
 8003250:	429c      	cmp	r4, r3
 8003252:	d101      	bne.n	8003258 <_fflush_r+0x38>
 8003254:	68ac      	ldr	r4, [r5, #8]
 8003256:	e7f1      	b.n	800323c <_fflush_r+0x1c>
 8003258:	4b05      	ldr	r3, [pc, #20]	; (8003270 <_fflush_r+0x50>)
 800325a:	429c      	cmp	r4, r3
 800325c:	bf08      	it	eq
 800325e:	68ec      	ldreq	r4, [r5, #12]
 8003260:	e7ec      	b.n	800323c <_fflush_r+0x1c>
 8003262:	2000      	movs	r0, #0
 8003264:	bd38      	pop	{r3, r4, r5, pc}
 8003266:	bf00      	nop
 8003268:	08004144 	.word	0x08004144
 800326c:	08004164 	.word	0x08004164
 8003270:	08004124 	.word	0x08004124

08003274 <std>:
 8003274:	2300      	movs	r3, #0
 8003276:	b510      	push	{r4, lr}
 8003278:	4604      	mov	r4, r0
 800327a:	e9c0 3300 	strd	r3, r3, [r0]
 800327e:	6083      	str	r3, [r0, #8]
 8003280:	8181      	strh	r1, [r0, #12]
 8003282:	6643      	str	r3, [r0, #100]	; 0x64
 8003284:	81c2      	strh	r2, [r0, #14]
 8003286:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800328a:	6183      	str	r3, [r0, #24]
 800328c:	4619      	mov	r1, r3
 800328e:	2208      	movs	r2, #8
 8003290:	305c      	adds	r0, #92	; 0x5c
 8003292:	f7ff fdfb 	bl	8002e8c <memset>
 8003296:	4b05      	ldr	r3, [pc, #20]	; (80032ac <std+0x38>)
 8003298:	6263      	str	r3, [r4, #36]	; 0x24
 800329a:	4b05      	ldr	r3, [pc, #20]	; (80032b0 <std+0x3c>)
 800329c:	62a3      	str	r3, [r4, #40]	; 0x28
 800329e:	4b05      	ldr	r3, [pc, #20]	; (80032b4 <std+0x40>)
 80032a0:	62e3      	str	r3, [r4, #44]	; 0x2c
 80032a2:	4b05      	ldr	r3, [pc, #20]	; (80032b8 <std+0x44>)
 80032a4:	6224      	str	r4, [r4, #32]
 80032a6:	6323      	str	r3, [r4, #48]	; 0x30
 80032a8:	bd10      	pop	{r4, pc}
 80032aa:	bf00      	nop
 80032ac:	08003bd1 	.word	0x08003bd1
 80032b0:	08003bf3 	.word	0x08003bf3
 80032b4:	08003c2b 	.word	0x08003c2b
 80032b8:	08003c4f 	.word	0x08003c4f

080032bc <_cleanup_r>:
 80032bc:	4901      	ldr	r1, [pc, #4]	; (80032c4 <_cleanup_r+0x8>)
 80032be:	f000 b885 	b.w	80033cc <_fwalk_reent>
 80032c2:	bf00      	nop
 80032c4:	08003221 	.word	0x08003221

080032c8 <__sfmoreglue>:
 80032c8:	b570      	push	{r4, r5, r6, lr}
 80032ca:	1e4a      	subs	r2, r1, #1
 80032cc:	2568      	movs	r5, #104	; 0x68
 80032ce:	4355      	muls	r5, r2
 80032d0:	460e      	mov	r6, r1
 80032d2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80032d6:	f000 f949 	bl	800356c <_malloc_r>
 80032da:	4604      	mov	r4, r0
 80032dc:	b140      	cbz	r0, 80032f0 <__sfmoreglue+0x28>
 80032de:	2100      	movs	r1, #0
 80032e0:	e9c0 1600 	strd	r1, r6, [r0]
 80032e4:	300c      	adds	r0, #12
 80032e6:	60a0      	str	r0, [r4, #8]
 80032e8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80032ec:	f7ff fdce 	bl	8002e8c <memset>
 80032f0:	4620      	mov	r0, r4
 80032f2:	bd70      	pop	{r4, r5, r6, pc}

080032f4 <__sinit>:
 80032f4:	6983      	ldr	r3, [r0, #24]
 80032f6:	b510      	push	{r4, lr}
 80032f8:	4604      	mov	r4, r0
 80032fa:	bb33      	cbnz	r3, 800334a <__sinit+0x56>
 80032fc:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8003300:	6503      	str	r3, [r0, #80]	; 0x50
 8003302:	4b12      	ldr	r3, [pc, #72]	; (800334c <__sinit+0x58>)
 8003304:	4a12      	ldr	r2, [pc, #72]	; (8003350 <__sinit+0x5c>)
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6282      	str	r2, [r0, #40]	; 0x28
 800330a:	4298      	cmp	r0, r3
 800330c:	bf04      	itt	eq
 800330e:	2301      	moveq	r3, #1
 8003310:	6183      	streq	r3, [r0, #24]
 8003312:	f000 f81f 	bl	8003354 <__sfp>
 8003316:	6060      	str	r0, [r4, #4]
 8003318:	4620      	mov	r0, r4
 800331a:	f000 f81b 	bl	8003354 <__sfp>
 800331e:	60a0      	str	r0, [r4, #8]
 8003320:	4620      	mov	r0, r4
 8003322:	f000 f817 	bl	8003354 <__sfp>
 8003326:	2200      	movs	r2, #0
 8003328:	60e0      	str	r0, [r4, #12]
 800332a:	2104      	movs	r1, #4
 800332c:	6860      	ldr	r0, [r4, #4]
 800332e:	f7ff ffa1 	bl	8003274 <std>
 8003332:	2201      	movs	r2, #1
 8003334:	2109      	movs	r1, #9
 8003336:	68a0      	ldr	r0, [r4, #8]
 8003338:	f7ff ff9c 	bl	8003274 <std>
 800333c:	2202      	movs	r2, #2
 800333e:	2112      	movs	r1, #18
 8003340:	68e0      	ldr	r0, [r4, #12]
 8003342:	f7ff ff97 	bl	8003274 <std>
 8003346:	2301      	movs	r3, #1
 8003348:	61a3      	str	r3, [r4, #24]
 800334a:	bd10      	pop	{r4, pc}
 800334c:	08004120 	.word	0x08004120
 8003350:	080032bd 	.word	0x080032bd

08003354 <__sfp>:
 8003354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003356:	4b1b      	ldr	r3, [pc, #108]	; (80033c4 <__sfp+0x70>)
 8003358:	681e      	ldr	r6, [r3, #0]
 800335a:	69b3      	ldr	r3, [r6, #24]
 800335c:	4607      	mov	r7, r0
 800335e:	b913      	cbnz	r3, 8003366 <__sfp+0x12>
 8003360:	4630      	mov	r0, r6
 8003362:	f7ff ffc7 	bl	80032f4 <__sinit>
 8003366:	3648      	adds	r6, #72	; 0x48
 8003368:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800336c:	3b01      	subs	r3, #1
 800336e:	d503      	bpl.n	8003378 <__sfp+0x24>
 8003370:	6833      	ldr	r3, [r6, #0]
 8003372:	b133      	cbz	r3, 8003382 <__sfp+0x2e>
 8003374:	6836      	ldr	r6, [r6, #0]
 8003376:	e7f7      	b.n	8003368 <__sfp+0x14>
 8003378:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800337c:	b16d      	cbz	r5, 800339a <__sfp+0x46>
 800337e:	3468      	adds	r4, #104	; 0x68
 8003380:	e7f4      	b.n	800336c <__sfp+0x18>
 8003382:	2104      	movs	r1, #4
 8003384:	4638      	mov	r0, r7
 8003386:	f7ff ff9f 	bl	80032c8 <__sfmoreglue>
 800338a:	6030      	str	r0, [r6, #0]
 800338c:	2800      	cmp	r0, #0
 800338e:	d1f1      	bne.n	8003374 <__sfp+0x20>
 8003390:	230c      	movs	r3, #12
 8003392:	603b      	str	r3, [r7, #0]
 8003394:	4604      	mov	r4, r0
 8003396:	4620      	mov	r0, r4
 8003398:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800339a:	4b0b      	ldr	r3, [pc, #44]	; (80033c8 <__sfp+0x74>)
 800339c:	6665      	str	r5, [r4, #100]	; 0x64
 800339e:	e9c4 5500 	strd	r5, r5, [r4]
 80033a2:	60a5      	str	r5, [r4, #8]
 80033a4:	e9c4 3503 	strd	r3, r5, [r4, #12]
 80033a8:	e9c4 5505 	strd	r5, r5, [r4, #20]
 80033ac:	2208      	movs	r2, #8
 80033ae:	4629      	mov	r1, r5
 80033b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80033b4:	f7ff fd6a 	bl	8002e8c <memset>
 80033b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80033bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80033c0:	e7e9      	b.n	8003396 <__sfp+0x42>
 80033c2:	bf00      	nop
 80033c4:	08004120 	.word	0x08004120
 80033c8:	ffff0001 	.word	0xffff0001

080033cc <_fwalk_reent>:
 80033cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033d0:	4680      	mov	r8, r0
 80033d2:	4689      	mov	r9, r1
 80033d4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80033d8:	2600      	movs	r6, #0
 80033da:	b914      	cbnz	r4, 80033e2 <_fwalk_reent+0x16>
 80033dc:	4630      	mov	r0, r6
 80033de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80033e2:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 80033e6:	3f01      	subs	r7, #1
 80033e8:	d501      	bpl.n	80033ee <_fwalk_reent+0x22>
 80033ea:	6824      	ldr	r4, [r4, #0]
 80033ec:	e7f5      	b.n	80033da <_fwalk_reent+0xe>
 80033ee:	89ab      	ldrh	r3, [r5, #12]
 80033f0:	2b01      	cmp	r3, #1
 80033f2:	d907      	bls.n	8003404 <_fwalk_reent+0x38>
 80033f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80033f8:	3301      	adds	r3, #1
 80033fa:	d003      	beq.n	8003404 <_fwalk_reent+0x38>
 80033fc:	4629      	mov	r1, r5
 80033fe:	4640      	mov	r0, r8
 8003400:	47c8      	blx	r9
 8003402:	4306      	orrs	r6, r0
 8003404:	3568      	adds	r5, #104	; 0x68
 8003406:	e7ee      	b.n	80033e6 <_fwalk_reent+0x1a>

08003408 <__swhatbuf_r>:
 8003408:	b570      	push	{r4, r5, r6, lr}
 800340a:	460e      	mov	r6, r1
 800340c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003410:	2900      	cmp	r1, #0
 8003412:	b096      	sub	sp, #88	; 0x58
 8003414:	4614      	mov	r4, r2
 8003416:	461d      	mov	r5, r3
 8003418:	da07      	bge.n	800342a <__swhatbuf_r+0x22>
 800341a:	2300      	movs	r3, #0
 800341c:	602b      	str	r3, [r5, #0]
 800341e:	89b3      	ldrh	r3, [r6, #12]
 8003420:	061a      	lsls	r2, r3, #24
 8003422:	d410      	bmi.n	8003446 <__swhatbuf_r+0x3e>
 8003424:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003428:	e00e      	b.n	8003448 <__swhatbuf_r+0x40>
 800342a:	466a      	mov	r2, sp
 800342c:	f000 fc36 	bl	8003c9c <_fstat_r>
 8003430:	2800      	cmp	r0, #0
 8003432:	dbf2      	blt.n	800341a <__swhatbuf_r+0x12>
 8003434:	9a01      	ldr	r2, [sp, #4]
 8003436:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800343a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800343e:	425a      	negs	r2, r3
 8003440:	415a      	adcs	r2, r3
 8003442:	602a      	str	r2, [r5, #0]
 8003444:	e7ee      	b.n	8003424 <__swhatbuf_r+0x1c>
 8003446:	2340      	movs	r3, #64	; 0x40
 8003448:	2000      	movs	r0, #0
 800344a:	6023      	str	r3, [r4, #0]
 800344c:	b016      	add	sp, #88	; 0x58
 800344e:	bd70      	pop	{r4, r5, r6, pc}

08003450 <__smakebuf_r>:
 8003450:	898b      	ldrh	r3, [r1, #12]
 8003452:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003454:	079d      	lsls	r5, r3, #30
 8003456:	4606      	mov	r6, r0
 8003458:	460c      	mov	r4, r1
 800345a:	d507      	bpl.n	800346c <__smakebuf_r+0x1c>
 800345c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8003460:	6023      	str	r3, [r4, #0]
 8003462:	6123      	str	r3, [r4, #16]
 8003464:	2301      	movs	r3, #1
 8003466:	6163      	str	r3, [r4, #20]
 8003468:	b002      	add	sp, #8
 800346a:	bd70      	pop	{r4, r5, r6, pc}
 800346c:	ab01      	add	r3, sp, #4
 800346e:	466a      	mov	r2, sp
 8003470:	f7ff ffca 	bl	8003408 <__swhatbuf_r>
 8003474:	9900      	ldr	r1, [sp, #0]
 8003476:	4605      	mov	r5, r0
 8003478:	4630      	mov	r0, r6
 800347a:	f000 f877 	bl	800356c <_malloc_r>
 800347e:	b948      	cbnz	r0, 8003494 <__smakebuf_r+0x44>
 8003480:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003484:	059a      	lsls	r2, r3, #22
 8003486:	d4ef      	bmi.n	8003468 <__smakebuf_r+0x18>
 8003488:	f023 0303 	bic.w	r3, r3, #3
 800348c:	f043 0302 	orr.w	r3, r3, #2
 8003490:	81a3      	strh	r3, [r4, #12]
 8003492:	e7e3      	b.n	800345c <__smakebuf_r+0xc>
 8003494:	4b0d      	ldr	r3, [pc, #52]	; (80034cc <__smakebuf_r+0x7c>)
 8003496:	62b3      	str	r3, [r6, #40]	; 0x28
 8003498:	89a3      	ldrh	r3, [r4, #12]
 800349a:	6020      	str	r0, [r4, #0]
 800349c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80034a0:	81a3      	strh	r3, [r4, #12]
 80034a2:	9b00      	ldr	r3, [sp, #0]
 80034a4:	6163      	str	r3, [r4, #20]
 80034a6:	9b01      	ldr	r3, [sp, #4]
 80034a8:	6120      	str	r0, [r4, #16]
 80034aa:	b15b      	cbz	r3, 80034c4 <__smakebuf_r+0x74>
 80034ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80034b0:	4630      	mov	r0, r6
 80034b2:	f000 fc05 	bl	8003cc0 <_isatty_r>
 80034b6:	b128      	cbz	r0, 80034c4 <__smakebuf_r+0x74>
 80034b8:	89a3      	ldrh	r3, [r4, #12]
 80034ba:	f023 0303 	bic.w	r3, r3, #3
 80034be:	f043 0301 	orr.w	r3, r3, #1
 80034c2:	81a3      	strh	r3, [r4, #12]
 80034c4:	89a3      	ldrh	r3, [r4, #12]
 80034c6:	431d      	orrs	r5, r3
 80034c8:	81a5      	strh	r5, [r4, #12]
 80034ca:	e7cd      	b.n	8003468 <__smakebuf_r+0x18>
 80034cc:	080032bd 	.word	0x080032bd

080034d0 <_free_r>:
 80034d0:	b538      	push	{r3, r4, r5, lr}
 80034d2:	4605      	mov	r5, r0
 80034d4:	2900      	cmp	r1, #0
 80034d6:	d045      	beq.n	8003564 <_free_r+0x94>
 80034d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80034dc:	1f0c      	subs	r4, r1, #4
 80034de:	2b00      	cmp	r3, #0
 80034e0:	bfb8      	it	lt
 80034e2:	18e4      	addlt	r4, r4, r3
 80034e4:	f000 fc0e 	bl	8003d04 <__malloc_lock>
 80034e8:	4a1f      	ldr	r2, [pc, #124]	; (8003568 <_free_r+0x98>)
 80034ea:	6813      	ldr	r3, [r2, #0]
 80034ec:	4610      	mov	r0, r2
 80034ee:	b933      	cbnz	r3, 80034fe <_free_r+0x2e>
 80034f0:	6063      	str	r3, [r4, #4]
 80034f2:	6014      	str	r4, [r2, #0]
 80034f4:	4628      	mov	r0, r5
 80034f6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80034fa:	f000 bc04 	b.w	8003d06 <__malloc_unlock>
 80034fe:	42a3      	cmp	r3, r4
 8003500:	d90c      	bls.n	800351c <_free_r+0x4c>
 8003502:	6821      	ldr	r1, [r4, #0]
 8003504:	1862      	adds	r2, r4, r1
 8003506:	4293      	cmp	r3, r2
 8003508:	bf04      	itt	eq
 800350a:	681a      	ldreq	r2, [r3, #0]
 800350c:	685b      	ldreq	r3, [r3, #4]
 800350e:	6063      	str	r3, [r4, #4]
 8003510:	bf04      	itt	eq
 8003512:	1852      	addeq	r2, r2, r1
 8003514:	6022      	streq	r2, [r4, #0]
 8003516:	6004      	str	r4, [r0, #0]
 8003518:	e7ec      	b.n	80034f4 <_free_r+0x24>
 800351a:	4613      	mov	r3, r2
 800351c:	685a      	ldr	r2, [r3, #4]
 800351e:	b10a      	cbz	r2, 8003524 <_free_r+0x54>
 8003520:	42a2      	cmp	r2, r4
 8003522:	d9fa      	bls.n	800351a <_free_r+0x4a>
 8003524:	6819      	ldr	r1, [r3, #0]
 8003526:	1858      	adds	r0, r3, r1
 8003528:	42a0      	cmp	r0, r4
 800352a:	d10b      	bne.n	8003544 <_free_r+0x74>
 800352c:	6820      	ldr	r0, [r4, #0]
 800352e:	4401      	add	r1, r0
 8003530:	1858      	adds	r0, r3, r1
 8003532:	4282      	cmp	r2, r0
 8003534:	6019      	str	r1, [r3, #0]
 8003536:	d1dd      	bne.n	80034f4 <_free_r+0x24>
 8003538:	6810      	ldr	r0, [r2, #0]
 800353a:	6852      	ldr	r2, [r2, #4]
 800353c:	605a      	str	r2, [r3, #4]
 800353e:	4401      	add	r1, r0
 8003540:	6019      	str	r1, [r3, #0]
 8003542:	e7d7      	b.n	80034f4 <_free_r+0x24>
 8003544:	d902      	bls.n	800354c <_free_r+0x7c>
 8003546:	230c      	movs	r3, #12
 8003548:	602b      	str	r3, [r5, #0]
 800354a:	e7d3      	b.n	80034f4 <_free_r+0x24>
 800354c:	6820      	ldr	r0, [r4, #0]
 800354e:	1821      	adds	r1, r4, r0
 8003550:	428a      	cmp	r2, r1
 8003552:	bf04      	itt	eq
 8003554:	6811      	ldreq	r1, [r2, #0]
 8003556:	6852      	ldreq	r2, [r2, #4]
 8003558:	6062      	str	r2, [r4, #4]
 800355a:	bf04      	itt	eq
 800355c:	1809      	addeq	r1, r1, r0
 800355e:	6021      	streq	r1, [r4, #0]
 8003560:	605c      	str	r4, [r3, #4]
 8003562:	e7c7      	b.n	80034f4 <_free_r+0x24>
 8003564:	bd38      	pop	{r3, r4, r5, pc}
 8003566:	bf00      	nop
 8003568:	200000a0 	.word	0x200000a0

0800356c <_malloc_r>:
 800356c:	b570      	push	{r4, r5, r6, lr}
 800356e:	1ccd      	adds	r5, r1, #3
 8003570:	f025 0503 	bic.w	r5, r5, #3
 8003574:	3508      	adds	r5, #8
 8003576:	2d0c      	cmp	r5, #12
 8003578:	bf38      	it	cc
 800357a:	250c      	movcc	r5, #12
 800357c:	2d00      	cmp	r5, #0
 800357e:	4606      	mov	r6, r0
 8003580:	db01      	blt.n	8003586 <_malloc_r+0x1a>
 8003582:	42a9      	cmp	r1, r5
 8003584:	d903      	bls.n	800358e <_malloc_r+0x22>
 8003586:	230c      	movs	r3, #12
 8003588:	6033      	str	r3, [r6, #0]
 800358a:	2000      	movs	r0, #0
 800358c:	bd70      	pop	{r4, r5, r6, pc}
 800358e:	f000 fbb9 	bl	8003d04 <__malloc_lock>
 8003592:	4a21      	ldr	r2, [pc, #132]	; (8003618 <_malloc_r+0xac>)
 8003594:	6814      	ldr	r4, [r2, #0]
 8003596:	4621      	mov	r1, r4
 8003598:	b991      	cbnz	r1, 80035c0 <_malloc_r+0x54>
 800359a:	4c20      	ldr	r4, [pc, #128]	; (800361c <_malloc_r+0xb0>)
 800359c:	6823      	ldr	r3, [r4, #0]
 800359e:	b91b      	cbnz	r3, 80035a8 <_malloc_r+0x3c>
 80035a0:	4630      	mov	r0, r6
 80035a2:	f000 fb05 	bl	8003bb0 <_sbrk_r>
 80035a6:	6020      	str	r0, [r4, #0]
 80035a8:	4629      	mov	r1, r5
 80035aa:	4630      	mov	r0, r6
 80035ac:	f000 fb00 	bl	8003bb0 <_sbrk_r>
 80035b0:	1c43      	adds	r3, r0, #1
 80035b2:	d124      	bne.n	80035fe <_malloc_r+0x92>
 80035b4:	230c      	movs	r3, #12
 80035b6:	6033      	str	r3, [r6, #0]
 80035b8:	4630      	mov	r0, r6
 80035ba:	f000 fba4 	bl	8003d06 <__malloc_unlock>
 80035be:	e7e4      	b.n	800358a <_malloc_r+0x1e>
 80035c0:	680b      	ldr	r3, [r1, #0]
 80035c2:	1b5b      	subs	r3, r3, r5
 80035c4:	d418      	bmi.n	80035f8 <_malloc_r+0x8c>
 80035c6:	2b0b      	cmp	r3, #11
 80035c8:	d90f      	bls.n	80035ea <_malloc_r+0x7e>
 80035ca:	600b      	str	r3, [r1, #0]
 80035cc:	50cd      	str	r5, [r1, r3]
 80035ce:	18cc      	adds	r4, r1, r3
 80035d0:	4630      	mov	r0, r6
 80035d2:	f000 fb98 	bl	8003d06 <__malloc_unlock>
 80035d6:	f104 000b 	add.w	r0, r4, #11
 80035da:	1d23      	adds	r3, r4, #4
 80035dc:	f020 0007 	bic.w	r0, r0, #7
 80035e0:	1ac3      	subs	r3, r0, r3
 80035e2:	d0d3      	beq.n	800358c <_malloc_r+0x20>
 80035e4:	425a      	negs	r2, r3
 80035e6:	50e2      	str	r2, [r4, r3]
 80035e8:	e7d0      	b.n	800358c <_malloc_r+0x20>
 80035ea:	428c      	cmp	r4, r1
 80035ec:	684b      	ldr	r3, [r1, #4]
 80035ee:	bf16      	itet	ne
 80035f0:	6063      	strne	r3, [r4, #4]
 80035f2:	6013      	streq	r3, [r2, #0]
 80035f4:	460c      	movne	r4, r1
 80035f6:	e7eb      	b.n	80035d0 <_malloc_r+0x64>
 80035f8:	460c      	mov	r4, r1
 80035fa:	6849      	ldr	r1, [r1, #4]
 80035fc:	e7cc      	b.n	8003598 <_malloc_r+0x2c>
 80035fe:	1cc4      	adds	r4, r0, #3
 8003600:	f024 0403 	bic.w	r4, r4, #3
 8003604:	42a0      	cmp	r0, r4
 8003606:	d005      	beq.n	8003614 <_malloc_r+0xa8>
 8003608:	1a21      	subs	r1, r4, r0
 800360a:	4630      	mov	r0, r6
 800360c:	f000 fad0 	bl	8003bb0 <_sbrk_r>
 8003610:	3001      	adds	r0, #1
 8003612:	d0cf      	beq.n	80035b4 <_malloc_r+0x48>
 8003614:	6025      	str	r5, [r4, #0]
 8003616:	e7db      	b.n	80035d0 <_malloc_r+0x64>
 8003618:	200000a0 	.word	0x200000a0
 800361c:	200000a4 	.word	0x200000a4

08003620 <__sfputc_r>:
 8003620:	6893      	ldr	r3, [r2, #8]
 8003622:	3b01      	subs	r3, #1
 8003624:	2b00      	cmp	r3, #0
 8003626:	b410      	push	{r4}
 8003628:	6093      	str	r3, [r2, #8]
 800362a:	da08      	bge.n	800363e <__sfputc_r+0x1e>
 800362c:	6994      	ldr	r4, [r2, #24]
 800362e:	42a3      	cmp	r3, r4
 8003630:	db01      	blt.n	8003636 <__sfputc_r+0x16>
 8003632:	290a      	cmp	r1, #10
 8003634:	d103      	bne.n	800363e <__sfputc_r+0x1e>
 8003636:	f85d 4b04 	ldr.w	r4, [sp], #4
 800363a:	f7ff bcab 	b.w	8002f94 <__swbuf_r>
 800363e:	6813      	ldr	r3, [r2, #0]
 8003640:	1c58      	adds	r0, r3, #1
 8003642:	6010      	str	r0, [r2, #0]
 8003644:	7019      	strb	r1, [r3, #0]
 8003646:	4608      	mov	r0, r1
 8003648:	f85d 4b04 	ldr.w	r4, [sp], #4
 800364c:	4770      	bx	lr

0800364e <__sfputs_r>:
 800364e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003650:	4606      	mov	r6, r0
 8003652:	460f      	mov	r7, r1
 8003654:	4614      	mov	r4, r2
 8003656:	18d5      	adds	r5, r2, r3
 8003658:	42ac      	cmp	r4, r5
 800365a:	d101      	bne.n	8003660 <__sfputs_r+0x12>
 800365c:	2000      	movs	r0, #0
 800365e:	e007      	b.n	8003670 <__sfputs_r+0x22>
 8003660:	463a      	mov	r2, r7
 8003662:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003666:	4630      	mov	r0, r6
 8003668:	f7ff ffda 	bl	8003620 <__sfputc_r>
 800366c:	1c43      	adds	r3, r0, #1
 800366e:	d1f3      	bne.n	8003658 <__sfputs_r+0xa>
 8003670:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003674 <_vfiprintf_r>:
 8003674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003678:	460c      	mov	r4, r1
 800367a:	b09d      	sub	sp, #116	; 0x74
 800367c:	4617      	mov	r7, r2
 800367e:	461d      	mov	r5, r3
 8003680:	4606      	mov	r6, r0
 8003682:	b118      	cbz	r0, 800368c <_vfiprintf_r+0x18>
 8003684:	6983      	ldr	r3, [r0, #24]
 8003686:	b90b      	cbnz	r3, 800368c <_vfiprintf_r+0x18>
 8003688:	f7ff fe34 	bl	80032f4 <__sinit>
 800368c:	4b7c      	ldr	r3, [pc, #496]	; (8003880 <_vfiprintf_r+0x20c>)
 800368e:	429c      	cmp	r4, r3
 8003690:	d158      	bne.n	8003744 <_vfiprintf_r+0xd0>
 8003692:	6874      	ldr	r4, [r6, #4]
 8003694:	89a3      	ldrh	r3, [r4, #12]
 8003696:	0718      	lsls	r0, r3, #28
 8003698:	d55e      	bpl.n	8003758 <_vfiprintf_r+0xe4>
 800369a:	6923      	ldr	r3, [r4, #16]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d05b      	beq.n	8003758 <_vfiprintf_r+0xe4>
 80036a0:	2300      	movs	r3, #0
 80036a2:	9309      	str	r3, [sp, #36]	; 0x24
 80036a4:	2320      	movs	r3, #32
 80036a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80036aa:	2330      	movs	r3, #48	; 0x30
 80036ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80036b0:	9503      	str	r5, [sp, #12]
 80036b2:	f04f 0b01 	mov.w	fp, #1
 80036b6:	46b8      	mov	r8, r7
 80036b8:	4645      	mov	r5, r8
 80036ba:	f815 3b01 	ldrb.w	r3, [r5], #1
 80036be:	b10b      	cbz	r3, 80036c4 <_vfiprintf_r+0x50>
 80036c0:	2b25      	cmp	r3, #37	; 0x25
 80036c2:	d154      	bne.n	800376e <_vfiprintf_r+0xfa>
 80036c4:	ebb8 0a07 	subs.w	sl, r8, r7
 80036c8:	d00b      	beq.n	80036e2 <_vfiprintf_r+0x6e>
 80036ca:	4653      	mov	r3, sl
 80036cc:	463a      	mov	r2, r7
 80036ce:	4621      	mov	r1, r4
 80036d0:	4630      	mov	r0, r6
 80036d2:	f7ff ffbc 	bl	800364e <__sfputs_r>
 80036d6:	3001      	adds	r0, #1
 80036d8:	f000 80c2 	beq.w	8003860 <_vfiprintf_r+0x1ec>
 80036dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80036de:	4453      	add	r3, sl
 80036e0:	9309      	str	r3, [sp, #36]	; 0x24
 80036e2:	f898 3000 	ldrb.w	r3, [r8]
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f000 80ba 	beq.w	8003860 <_vfiprintf_r+0x1ec>
 80036ec:	2300      	movs	r3, #0
 80036ee:	f04f 32ff 	mov.w	r2, #4294967295
 80036f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80036f6:	9304      	str	r3, [sp, #16]
 80036f8:	9307      	str	r3, [sp, #28]
 80036fa:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80036fe:	931a      	str	r3, [sp, #104]	; 0x68
 8003700:	46a8      	mov	r8, r5
 8003702:	2205      	movs	r2, #5
 8003704:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003708:	485e      	ldr	r0, [pc, #376]	; (8003884 <_vfiprintf_r+0x210>)
 800370a:	f7fc fd61 	bl	80001d0 <memchr>
 800370e:	9b04      	ldr	r3, [sp, #16]
 8003710:	bb78      	cbnz	r0, 8003772 <_vfiprintf_r+0xfe>
 8003712:	06d9      	lsls	r1, r3, #27
 8003714:	bf44      	itt	mi
 8003716:	2220      	movmi	r2, #32
 8003718:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800371c:	071a      	lsls	r2, r3, #28
 800371e:	bf44      	itt	mi
 8003720:	222b      	movmi	r2, #43	; 0x2b
 8003722:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003726:	782a      	ldrb	r2, [r5, #0]
 8003728:	2a2a      	cmp	r2, #42	; 0x2a
 800372a:	d02a      	beq.n	8003782 <_vfiprintf_r+0x10e>
 800372c:	9a07      	ldr	r2, [sp, #28]
 800372e:	46a8      	mov	r8, r5
 8003730:	2000      	movs	r0, #0
 8003732:	250a      	movs	r5, #10
 8003734:	4641      	mov	r1, r8
 8003736:	f811 3b01 	ldrb.w	r3, [r1], #1
 800373a:	3b30      	subs	r3, #48	; 0x30
 800373c:	2b09      	cmp	r3, #9
 800373e:	d969      	bls.n	8003814 <_vfiprintf_r+0x1a0>
 8003740:	b360      	cbz	r0, 800379c <_vfiprintf_r+0x128>
 8003742:	e024      	b.n	800378e <_vfiprintf_r+0x11a>
 8003744:	4b50      	ldr	r3, [pc, #320]	; (8003888 <_vfiprintf_r+0x214>)
 8003746:	429c      	cmp	r4, r3
 8003748:	d101      	bne.n	800374e <_vfiprintf_r+0xda>
 800374a:	68b4      	ldr	r4, [r6, #8]
 800374c:	e7a2      	b.n	8003694 <_vfiprintf_r+0x20>
 800374e:	4b4f      	ldr	r3, [pc, #316]	; (800388c <_vfiprintf_r+0x218>)
 8003750:	429c      	cmp	r4, r3
 8003752:	bf08      	it	eq
 8003754:	68f4      	ldreq	r4, [r6, #12]
 8003756:	e79d      	b.n	8003694 <_vfiprintf_r+0x20>
 8003758:	4621      	mov	r1, r4
 800375a:	4630      	mov	r0, r6
 800375c:	f7ff fc6c 	bl	8003038 <__swsetup_r>
 8003760:	2800      	cmp	r0, #0
 8003762:	d09d      	beq.n	80036a0 <_vfiprintf_r+0x2c>
 8003764:	f04f 30ff 	mov.w	r0, #4294967295
 8003768:	b01d      	add	sp, #116	; 0x74
 800376a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800376e:	46a8      	mov	r8, r5
 8003770:	e7a2      	b.n	80036b8 <_vfiprintf_r+0x44>
 8003772:	4a44      	ldr	r2, [pc, #272]	; (8003884 <_vfiprintf_r+0x210>)
 8003774:	1a80      	subs	r0, r0, r2
 8003776:	fa0b f000 	lsl.w	r0, fp, r0
 800377a:	4318      	orrs	r0, r3
 800377c:	9004      	str	r0, [sp, #16]
 800377e:	4645      	mov	r5, r8
 8003780:	e7be      	b.n	8003700 <_vfiprintf_r+0x8c>
 8003782:	9a03      	ldr	r2, [sp, #12]
 8003784:	1d11      	adds	r1, r2, #4
 8003786:	6812      	ldr	r2, [r2, #0]
 8003788:	9103      	str	r1, [sp, #12]
 800378a:	2a00      	cmp	r2, #0
 800378c:	db01      	blt.n	8003792 <_vfiprintf_r+0x11e>
 800378e:	9207      	str	r2, [sp, #28]
 8003790:	e004      	b.n	800379c <_vfiprintf_r+0x128>
 8003792:	4252      	negs	r2, r2
 8003794:	f043 0302 	orr.w	r3, r3, #2
 8003798:	9207      	str	r2, [sp, #28]
 800379a:	9304      	str	r3, [sp, #16]
 800379c:	f898 3000 	ldrb.w	r3, [r8]
 80037a0:	2b2e      	cmp	r3, #46	; 0x2e
 80037a2:	d10e      	bne.n	80037c2 <_vfiprintf_r+0x14e>
 80037a4:	f898 3001 	ldrb.w	r3, [r8, #1]
 80037a8:	2b2a      	cmp	r3, #42	; 0x2a
 80037aa:	d138      	bne.n	800381e <_vfiprintf_r+0x1aa>
 80037ac:	9b03      	ldr	r3, [sp, #12]
 80037ae:	1d1a      	adds	r2, r3, #4
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	9203      	str	r2, [sp, #12]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	bfb8      	it	lt
 80037b8:	f04f 33ff 	movlt.w	r3, #4294967295
 80037bc:	f108 0802 	add.w	r8, r8, #2
 80037c0:	9305      	str	r3, [sp, #20]
 80037c2:	4d33      	ldr	r5, [pc, #204]	; (8003890 <_vfiprintf_r+0x21c>)
 80037c4:	f898 1000 	ldrb.w	r1, [r8]
 80037c8:	2203      	movs	r2, #3
 80037ca:	4628      	mov	r0, r5
 80037cc:	f7fc fd00 	bl	80001d0 <memchr>
 80037d0:	b140      	cbz	r0, 80037e4 <_vfiprintf_r+0x170>
 80037d2:	2340      	movs	r3, #64	; 0x40
 80037d4:	1b40      	subs	r0, r0, r5
 80037d6:	fa03 f000 	lsl.w	r0, r3, r0
 80037da:	9b04      	ldr	r3, [sp, #16]
 80037dc:	4303      	orrs	r3, r0
 80037de:	f108 0801 	add.w	r8, r8, #1
 80037e2:	9304      	str	r3, [sp, #16]
 80037e4:	f898 1000 	ldrb.w	r1, [r8]
 80037e8:	482a      	ldr	r0, [pc, #168]	; (8003894 <_vfiprintf_r+0x220>)
 80037ea:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80037ee:	2206      	movs	r2, #6
 80037f0:	f108 0701 	add.w	r7, r8, #1
 80037f4:	f7fc fcec 	bl	80001d0 <memchr>
 80037f8:	2800      	cmp	r0, #0
 80037fa:	d037      	beq.n	800386c <_vfiprintf_r+0x1f8>
 80037fc:	4b26      	ldr	r3, [pc, #152]	; (8003898 <_vfiprintf_r+0x224>)
 80037fe:	bb1b      	cbnz	r3, 8003848 <_vfiprintf_r+0x1d4>
 8003800:	9b03      	ldr	r3, [sp, #12]
 8003802:	3307      	adds	r3, #7
 8003804:	f023 0307 	bic.w	r3, r3, #7
 8003808:	3308      	adds	r3, #8
 800380a:	9303      	str	r3, [sp, #12]
 800380c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800380e:	444b      	add	r3, r9
 8003810:	9309      	str	r3, [sp, #36]	; 0x24
 8003812:	e750      	b.n	80036b6 <_vfiprintf_r+0x42>
 8003814:	fb05 3202 	mla	r2, r5, r2, r3
 8003818:	2001      	movs	r0, #1
 800381a:	4688      	mov	r8, r1
 800381c:	e78a      	b.n	8003734 <_vfiprintf_r+0xc0>
 800381e:	2300      	movs	r3, #0
 8003820:	f108 0801 	add.w	r8, r8, #1
 8003824:	9305      	str	r3, [sp, #20]
 8003826:	4619      	mov	r1, r3
 8003828:	250a      	movs	r5, #10
 800382a:	4640      	mov	r0, r8
 800382c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003830:	3a30      	subs	r2, #48	; 0x30
 8003832:	2a09      	cmp	r2, #9
 8003834:	d903      	bls.n	800383e <_vfiprintf_r+0x1ca>
 8003836:	2b00      	cmp	r3, #0
 8003838:	d0c3      	beq.n	80037c2 <_vfiprintf_r+0x14e>
 800383a:	9105      	str	r1, [sp, #20]
 800383c:	e7c1      	b.n	80037c2 <_vfiprintf_r+0x14e>
 800383e:	fb05 2101 	mla	r1, r5, r1, r2
 8003842:	2301      	movs	r3, #1
 8003844:	4680      	mov	r8, r0
 8003846:	e7f0      	b.n	800382a <_vfiprintf_r+0x1b6>
 8003848:	ab03      	add	r3, sp, #12
 800384a:	9300      	str	r3, [sp, #0]
 800384c:	4622      	mov	r2, r4
 800384e:	4b13      	ldr	r3, [pc, #76]	; (800389c <_vfiprintf_r+0x228>)
 8003850:	a904      	add	r1, sp, #16
 8003852:	4630      	mov	r0, r6
 8003854:	f3af 8000 	nop.w
 8003858:	f1b0 3fff 	cmp.w	r0, #4294967295
 800385c:	4681      	mov	r9, r0
 800385e:	d1d5      	bne.n	800380c <_vfiprintf_r+0x198>
 8003860:	89a3      	ldrh	r3, [r4, #12]
 8003862:	065b      	lsls	r3, r3, #25
 8003864:	f53f af7e 	bmi.w	8003764 <_vfiprintf_r+0xf0>
 8003868:	9809      	ldr	r0, [sp, #36]	; 0x24
 800386a:	e77d      	b.n	8003768 <_vfiprintf_r+0xf4>
 800386c:	ab03      	add	r3, sp, #12
 800386e:	9300      	str	r3, [sp, #0]
 8003870:	4622      	mov	r2, r4
 8003872:	4b0a      	ldr	r3, [pc, #40]	; (800389c <_vfiprintf_r+0x228>)
 8003874:	a904      	add	r1, sp, #16
 8003876:	4630      	mov	r0, r6
 8003878:	f000 f888 	bl	800398c <_printf_i>
 800387c:	e7ec      	b.n	8003858 <_vfiprintf_r+0x1e4>
 800387e:	bf00      	nop
 8003880:	08004144 	.word	0x08004144
 8003884:	08004184 	.word	0x08004184
 8003888:	08004164 	.word	0x08004164
 800388c:	08004124 	.word	0x08004124
 8003890:	0800418a 	.word	0x0800418a
 8003894:	0800418e 	.word	0x0800418e
 8003898:	00000000 	.word	0x00000000
 800389c:	0800364f 	.word	0x0800364f

080038a0 <_printf_common>:
 80038a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80038a4:	4691      	mov	r9, r2
 80038a6:	461f      	mov	r7, r3
 80038a8:	688a      	ldr	r2, [r1, #8]
 80038aa:	690b      	ldr	r3, [r1, #16]
 80038ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80038b0:	4293      	cmp	r3, r2
 80038b2:	bfb8      	it	lt
 80038b4:	4613      	movlt	r3, r2
 80038b6:	f8c9 3000 	str.w	r3, [r9]
 80038ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80038be:	4606      	mov	r6, r0
 80038c0:	460c      	mov	r4, r1
 80038c2:	b112      	cbz	r2, 80038ca <_printf_common+0x2a>
 80038c4:	3301      	adds	r3, #1
 80038c6:	f8c9 3000 	str.w	r3, [r9]
 80038ca:	6823      	ldr	r3, [r4, #0]
 80038cc:	0699      	lsls	r1, r3, #26
 80038ce:	bf42      	ittt	mi
 80038d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80038d4:	3302      	addmi	r3, #2
 80038d6:	f8c9 3000 	strmi.w	r3, [r9]
 80038da:	6825      	ldr	r5, [r4, #0]
 80038dc:	f015 0506 	ands.w	r5, r5, #6
 80038e0:	d107      	bne.n	80038f2 <_printf_common+0x52>
 80038e2:	f104 0a19 	add.w	sl, r4, #25
 80038e6:	68e3      	ldr	r3, [r4, #12]
 80038e8:	f8d9 2000 	ldr.w	r2, [r9]
 80038ec:	1a9b      	subs	r3, r3, r2
 80038ee:	42ab      	cmp	r3, r5
 80038f0:	dc28      	bgt.n	8003944 <_printf_common+0xa4>
 80038f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80038f6:	6822      	ldr	r2, [r4, #0]
 80038f8:	3300      	adds	r3, #0
 80038fa:	bf18      	it	ne
 80038fc:	2301      	movne	r3, #1
 80038fe:	0692      	lsls	r2, r2, #26
 8003900:	d42d      	bmi.n	800395e <_printf_common+0xbe>
 8003902:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003906:	4639      	mov	r1, r7
 8003908:	4630      	mov	r0, r6
 800390a:	47c0      	blx	r8
 800390c:	3001      	adds	r0, #1
 800390e:	d020      	beq.n	8003952 <_printf_common+0xb2>
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	68e5      	ldr	r5, [r4, #12]
 8003914:	f8d9 2000 	ldr.w	r2, [r9]
 8003918:	f003 0306 	and.w	r3, r3, #6
 800391c:	2b04      	cmp	r3, #4
 800391e:	bf08      	it	eq
 8003920:	1aad      	subeq	r5, r5, r2
 8003922:	68a3      	ldr	r3, [r4, #8]
 8003924:	6922      	ldr	r2, [r4, #16]
 8003926:	bf0c      	ite	eq
 8003928:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800392c:	2500      	movne	r5, #0
 800392e:	4293      	cmp	r3, r2
 8003930:	bfc4      	itt	gt
 8003932:	1a9b      	subgt	r3, r3, r2
 8003934:	18ed      	addgt	r5, r5, r3
 8003936:	f04f 0900 	mov.w	r9, #0
 800393a:	341a      	adds	r4, #26
 800393c:	454d      	cmp	r5, r9
 800393e:	d11a      	bne.n	8003976 <_printf_common+0xd6>
 8003940:	2000      	movs	r0, #0
 8003942:	e008      	b.n	8003956 <_printf_common+0xb6>
 8003944:	2301      	movs	r3, #1
 8003946:	4652      	mov	r2, sl
 8003948:	4639      	mov	r1, r7
 800394a:	4630      	mov	r0, r6
 800394c:	47c0      	blx	r8
 800394e:	3001      	adds	r0, #1
 8003950:	d103      	bne.n	800395a <_printf_common+0xba>
 8003952:	f04f 30ff 	mov.w	r0, #4294967295
 8003956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800395a:	3501      	adds	r5, #1
 800395c:	e7c3      	b.n	80038e6 <_printf_common+0x46>
 800395e:	18e1      	adds	r1, r4, r3
 8003960:	1c5a      	adds	r2, r3, #1
 8003962:	2030      	movs	r0, #48	; 0x30
 8003964:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003968:	4422      	add	r2, r4
 800396a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800396e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003972:	3302      	adds	r3, #2
 8003974:	e7c5      	b.n	8003902 <_printf_common+0x62>
 8003976:	2301      	movs	r3, #1
 8003978:	4622      	mov	r2, r4
 800397a:	4639      	mov	r1, r7
 800397c:	4630      	mov	r0, r6
 800397e:	47c0      	blx	r8
 8003980:	3001      	adds	r0, #1
 8003982:	d0e6      	beq.n	8003952 <_printf_common+0xb2>
 8003984:	f109 0901 	add.w	r9, r9, #1
 8003988:	e7d8      	b.n	800393c <_printf_common+0x9c>
	...

0800398c <_printf_i>:
 800398c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003990:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003994:	460c      	mov	r4, r1
 8003996:	7e09      	ldrb	r1, [r1, #24]
 8003998:	b085      	sub	sp, #20
 800399a:	296e      	cmp	r1, #110	; 0x6e
 800399c:	4617      	mov	r7, r2
 800399e:	4606      	mov	r6, r0
 80039a0:	4698      	mov	r8, r3
 80039a2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80039a4:	f000 80b3 	beq.w	8003b0e <_printf_i+0x182>
 80039a8:	d822      	bhi.n	80039f0 <_printf_i+0x64>
 80039aa:	2963      	cmp	r1, #99	; 0x63
 80039ac:	d036      	beq.n	8003a1c <_printf_i+0x90>
 80039ae:	d80a      	bhi.n	80039c6 <_printf_i+0x3a>
 80039b0:	2900      	cmp	r1, #0
 80039b2:	f000 80b9 	beq.w	8003b28 <_printf_i+0x19c>
 80039b6:	2958      	cmp	r1, #88	; 0x58
 80039b8:	f000 8083 	beq.w	8003ac2 <_printf_i+0x136>
 80039bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80039c0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80039c4:	e032      	b.n	8003a2c <_printf_i+0xa0>
 80039c6:	2964      	cmp	r1, #100	; 0x64
 80039c8:	d001      	beq.n	80039ce <_printf_i+0x42>
 80039ca:	2969      	cmp	r1, #105	; 0x69
 80039cc:	d1f6      	bne.n	80039bc <_printf_i+0x30>
 80039ce:	6820      	ldr	r0, [r4, #0]
 80039d0:	6813      	ldr	r3, [r2, #0]
 80039d2:	0605      	lsls	r5, r0, #24
 80039d4:	f103 0104 	add.w	r1, r3, #4
 80039d8:	d52a      	bpl.n	8003a30 <_printf_i+0xa4>
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	6011      	str	r1, [r2, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	da03      	bge.n	80039ea <_printf_i+0x5e>
 80039e2:	222d      	movs	r2, #45	; 0x2d
 80039e4:	425b      	negs	r3, r3
 80039e6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80039ea:	486f      	ldr	r0, [pc, #444]	; (8003ba8 <_printf_i+0x21c>)
 80039ec:	220a      	movs	r2, #10
 80039ee:	e039      	b.n	8003a64 <_printf_i+0xd8>
 80039f0:	2973      	cmp	r1, #115	; 0x73
 80039f2:	f000 809d 	beq.w	8003b30 <_printf_i+0x1a4>
 80039f6:	d808      	bhi.n	8003a0a <_printf_i+0x7e>
 80039f8:	296f      	cmp	r1, #111	; 0x6f
 80039fa:	d020      	beq.n	8003a3e <_printf_i+0xb2>
 80039fc:	2970      	cmp	r1, #112	; 0x70
 80039fe:	d1dd      	bne.n	80039bc <_printf_i+0x30>
 8003a00:	6823      	ldr	r3, [r4, #0]
 8003a02:	f043 0320 	orr.w	r3, r3, #32
 8003a06:	6023      	str	r3, [r4, #0]
 8003a08:	e003      	b.n	8003a12 <_printf_i+0x86>
 8003a0a:	2975      	cmp	r1, #117	; 0x75
 8003a0c:	d017      	beq.n	8003a3e <_printf_i+0xb2>
 8003a0e:	2978      	cmp	r1, #120	; 0x78
 8003a10:	d1d4      	bne.n	80039bc <_printf_i+0x30>
 8003a12:	2378      	movs	r3, #120	; 0x78
 8003a14:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003a18:	4864      	ldr	r0, [pc, #400]	; (8003bac <_printf_i+0x220>)
 8003a1a:	e055      	b.n	8003ac8 <_printf_i+0x13c>
 8003a1c:	6813      	ldr	r3, [r2, #0]
 8003a1e:	1d19      	adds	r1, r3, #4
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6011      	str	r1, [r2, #0]
 8003a24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003a28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e08c      	b.n	8003b4a <_printf_i+0x1be>
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	6011      	str	r1, [r2, #0]
 8003a34:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003a38:	bf18      	it	ne
 8003a3a:	b21b      	sxthne	r3, r3
 8003a3c:	e7cf      	b.n	80039de <_printf_i+0x52>
 8003a3e:	6813      	ldr	r3, [r2, #0]
 8003a40:	6825      	ldr	r5, [r4, #0]
 8003a42:	1d18      	adds	r0, r3, #4
 8003a44:	6010      	str	r0, [r2, #0]
 8003a46:	0628      	lsls	r0, r5, #24
 8003a48:	d501      	bpl.n	8003a4e <_printf_i+0xc2>
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	e002      	b.n	8003a54 <_printf_i+0xc8>
 8003a4e:	0668      	lsls	r0, r5, #25
 8003a50:	d5fb      	bpl.n	8003a4a <_printf_i+0xbe>
 8003a52:	881b      	ldrh	r3, [r3, #0]
 8003a54:	4854      	ldr	r0, [pc, #336]	; (8003ba8 <_printf_i+0x21c>)
 8003a56:	296f      	cmp	r1, #111	; 0x6f
 8003a58:	bf14      	ite	ne
 8003a5a:	220a      	movne	r2, #10
 8003a5c:	2208      	moveq	r2, #8
 8003a5e:	2100      	movs	r1, #0
 8003a60:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003a64:	6865      	ldr	r5, [r4, #4]
 8003a66:	60a5      	str	r5, [r4, #8]
 8003a68:	2d00      	cmp	r5, #0
 8003a6a:	f2c0 8095 	blt.w	8003b98 <_printf_i+0x20c>
 8003a6e:	6821      	ldr	r1, [r4, #0]
 8003a70:	f021 0104 	bic.w	r1, r1, #4
 8003a74:	6021      	str	r1, [r4, #0]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d13d      	bne.n	8003af6 <_printf_i+0x16a>
 8003a7a:	2d00      	cmp	r5, #0
 8003a7c:	f040 808e 	bne.w	8003b9c <_printf_i+0x210>
 8003a80:	4665      	mov	r5, ip
 8003a82:	2a08      	cmp	r2, #8
 8003a84:	d10b      	bne.n	8003a9e <_printf_i+0x112>
 8003a86:	6823      	ldr	r3, [r4, #0]
 8003a88:	07db      	lsls	r3, r3, #31
 8003a8a:	d508      	bpl.n	8003a9e <_printf_i+0x112>
 8003a8c:	6923      	ldr	r3, [r4, #16]
 8003a8e:	6862      	ldr	r2, [r4, #4]
 8003a90:	429a      	cmp	r2, r3
 8003a92:	bfde      	ittt	le
 8003a94:	2330      	movle	r3, #48	; 0x30
 8003a96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003a9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003a9e:	ebac 0305 	sub.w	r3, ip, r5
 8003aa2:	6123      	str	r3, [r4, #16]
 8003aa4:	f8cd 8000 	str.w	r8, [sp]
 8003aa8:	463b      	mov	r3, r7
 8003aaa:	aa03      	add	r2, sp, #12
 8003aac:	4621      	mov	r1, r4
 8003aae:	4630      	mov	r0, r6
 8003ab0:	f7ff fef6 	bl	80038a0 <_printf_common>
 8003ab4:	3001      	adds	r0, #1
 8003ab6:	d14d      	bne.n	8003b54 <_printf_i+0x1c8>
 8003ab8:	f04f 30ff 	mov.w	r0, #4294967295
 8003abc:	b005      	add	sp, #20
 8003abe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003ac2:	4839      	ldr	r0, [pc, #228]	; (8003ba8 <_printf_i+0x21c>)
 8003ac4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003ac8:	6813      	ldr	r3, [r2, #0]
 8003aca:	6821      	ldr	r1, [r4, #0]
 8003acc:	1d1d      	adds	r5, r3, #4
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6015      	str	r5, [r2, #0]
 8003ad2:	060a      	lsls	r2, r1, #24
 8003ad4:	d50b      	bpl.n	8003aee <_printf_i+0x162>
 8003ad6:	07ca      	lsls	r2, r1, #31
 8003ad8:	bf44      	itt	mi
 8003ada:	f041 0120 	orrmi.w	r1, r1, #32
 8003ade:	6021      	strmi	r1, [r4, #0]
 8003ae0:	b91b      	cbnz	r3, 8003aea <_printf_i+0x15e>
 8003ae2:	6822      	ldr	r2, [r4, #0]
 8003ae4:	f022 0220 	bic.w	r2, r2, #32
 8003ae8:	6022      	str	r2, [r4, #0]
 8003aea:	2210      	movs	r2, #16
 8003aec:	e7b7      	b.n	8003a5e <_printf_i+0xd2>
 8003aee:	064d      	lsls	r5, r1, #25
 8003af0:	bf48      	it	mi
 8003af2:	b29b      	uxthmi	r3, r3
 8003af4:	e7ef      	b.n	8003ad6 <_printf_i+0x14a>
 8003af6:	4665      	mov	r5, ip
 8003af8:	fbb3 f1f2 	udiv	r1, r3, r2
 8003afc:	fb02 3311 	mls	r3, r2, r1, r3
 8003b00:	5cc3      	ldrb	r3, [r0, r3]
 8003b02:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003b06:	460b      	mov	r3, r1
 8003b08:	2900      	cmp	r1, #0
 8003b0a:	d1f5      	bne.n	8003af8 <_printf_i+0x16c>
 8003b0c:	e7b9      	b.n	8003a82 <_printf_i+0xf6>
 8003b0e:	6813      	ldr	r3, [r2, #0]
 8003b10:	6825      	ldr	r5, [r4, #0]
 8003b12:	6961      	ldr	r1, [r4, #20]
 8003b14:	1d18      	adds	r0, r3, #4
 8003b16:	6010      	str	r0, [r2, #0]
 8003b18:	0628      	lsls	r0, r5, #24
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	d501      	bpl.n	8003b22 <_printf_i+0x196>
 8003b1e:	6019      	str	r1, [r3, #0]
 8003b20:	e002      	b.n	8003b28 <_printf_i+0x19c>
 8003b22:	066a      	lsls	r2, r5, #25
 8003b24:	d5fb      	bpl.n	8003b1e <_printf_i+0x192>
 8003b26:	8019      	strh	r1, [r3, #0]
 8003b28:	2300      	movs	r3, #0
 8003b2a:	6123      	str	r3, [r4, #16]
 8003b2c:	4665      	mov	r5, ip
 8003b2e:	e7b9      	b.n	8003aa4 <_printf_i+0x118>
 8003b30:	6813      	ldr	r3, [r2, #0]
 8003b32:	1d19      	adds	r1, r3, #4
 8003b34:	6011      	str	r1, [r2, #0]
 8003b36:	681d      	ldr	r5, [r3, #0]
 8003b38:	6862      	ldr	r2, [r4, #4]
 8003b3a:	2100      	movs	r1, #0
 8003b3c:	4628      	mov	r0, r5
 8003b3e:	f7fc fb47 	bl	80001d0 <memchr>
 8003b42:	b108      	cbz	r0, 8003b48 <_printf_i+0x1bc>
 8003b44:	1b40      	subs	r0, r0, r5
 8003b46:	6060      	str	r0, [r4, #4]
 8003b48:	6863      	ldr	r3, [r4, #4]
 8003b4a:	6123      	str	r3, [r4, #16]
 8003b4c:	2300      	movs	r3, #0
 8003b4e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003b52:	e7a7      	b.n	8003aa4 <_printf_i+0x118>
 8003b54:	6923      	ldr	r3, [r4, #16]
 8003b56:	462a      	mov	r2, r5
 8003b58:	4639      	mov	r1, r7
 8003b5a:	4630      	mov	r0, r6
 8003b5c:	47c0      	blx	r8
 8003b5e:	3001      	adds	r0, #1
 8003b60:	d0aa      	beq.n	8003ab8 <_printf_i+0x12c>
 8003b62:	6823      	ldr	r3, [r4, #0]
 8003b64:	079b      	lsls	r3, r3, #30
 8003b66:	d413      	bmi.n	8003b90 <_printf_i+0x204>
 8003b68:	68e0      	ldr	r0, [r4, #12]
 8003b6a:	9b03      	ldr	r3, [sp, #12]
 8003b6c:	4298      	cmp	r0, r3
 8003b6e:	bfb8      	it	lt
 8003b70:	4618      	movlt	r0, r3
 8003b72:	e7a3      	b.n	8003abc <_printf_i+0x130>
 8003b74:	2301      	movs	r3, #1
 8003b76:	464a      	mov	r2, r9
 8003b78:	4639      	mov	r1, r7
 8003b7a:	4630      	mov	r0, r6
 8003b7c:	47c0      	blx	r8
 8003b7e:	3001      	adds	r0, #1
 8003b80:	d09a      	beq.n	8003ab8 <_printf_i+0x12c>
 8003b82:	3501      	adds	r5, #1
 8003b84:	68e3      	ldr	r3, [r4, #12]
 8003b86:	9a03      	ldr	r2, [sp, #12]
 8003b88:	1a9b      	subs	r3, r3, r2
 8003b8a:	42ab      	cmp	r3, r5
 8003b8c:	dcf2      	bgt.n	8003b74 <_printf_i+0x1e8>
 8003b8e:	e7eb      	b.n	8003b68 <_printf_i+0x1dc>
 8003b90:	2500      	movs	r5, #0
 8003b92:	f104 0919 	add.w	r9, r4, #25
 8003b96:	e7f5      	b.n	8003b84 <_printf_i+0x1f8>
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d1ac      	bne.n	8003af6 <_printf_i+0x16a>
 8003b9c:	7803      	ldrb	r3, [r0, #0]
 8003b9e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003ba2:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003ba6:	e76c      	b.n	8003a82 <_printf_i+0xf6>
 8003ba8:	08004195 	.word	0x08004195
 8003bac:	080041a6 	.word	0x080041a6

08003bb0 <_sbrk_r>:
 8003bb0:	b538      	push	{r3, r4, r5, lr}
 8003bb2:	4c06      	ldr	r4, [pc, #24]	; (8003bcc <_sbrk_r+0x1c>)
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	4605      	mov	r5, r0
 8003bb8:	4608      	mov	r0, r1
 8003bba:	6023      	str	r3, [r4, #0]
 8003bbc:	f7fd fce6 	bl	800158c <_sbrk>
 8003bc0:	1c43      	adds	r3, r0, #1
 8003bc2:	d102      	bne.n	8003bca <_sbrk_r+0x1a>
 8003bc4:	6823      	ldr	r3, [r4, #0]
 8003bc6:	b103      	cbz	r3, 8003bca <_sbrk_r+0x1a>
 8003bc8:	602b      	str	r3, [r5, #0]
 8003bca:	bd38      	pop	{r3, r4, r5, pc}
 8003bcc:	20000604 	.word	0x20000604

08003bd0 <__sread>:
 8003bd0:	b510      	push	{r4, lr}
 8003bd2:	460c      	mov	r4, r1
 8003bd4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003bd8:	f000 f896 	bl	8003d08 <_read_r>
 8003bdc:	2800      	cmp	r0, #0
 8003bde:	bfab      	itete	ge
 8003be0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003be2:	89a3      	ldrhlt	r3, [r4, #12]
 8003be4:	181b      	addge	r3, r3, r0
 8003be6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003bea:	bfac      	ite	ge
 8003bec:	6563      	strge	r3, [r4, #84]	; 0x54
 8003bee:	81a3      	strhlt	r3, [r4, #12]
 8003bf0:	bd10      	pop	{r4, pc}

08003bf2 <__swrite>:
 8003bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003bf6:	461f      	mov	r7, r3
 8003bf8:	898b      	ldrh	r3, [r1, #12]
 8003bfa:	05db      	lsls	r3, r3, #23
 8003bfc:	4605      	mov	r5, r0
 8003bfe:	460c      	mov	r4, r1
 8003c00:	4616      	mov	r6, r2
 8003c02:	d505      	bpl.n	8003c10 <__swrite+0x1e>
 8003c04:	2302      	movs	r3, #2
 8003c06:	2200      	movs	r2, #0
 8003c08:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c0c:	f000 f868 	bl	8003ce0 <_lseek_r>
 8003c10:	89a3      	ldrh	r3, [r4, #12]
 8003c12:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003c16:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003c1a:	81a3      	strh	r3, [r4, #12]
 8003c1c:	4632      	mov	r2, r6
 8003c1e:	463b      	mov	r3, r7
 8003c20:	4628      	mov	r0, r5
 8003c22:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003c26:	f000 b817 	b.w	8003c58 <_write_r>

08003c2a <__sseek>:
 8003c2a:	b510      	push	{r4, lr}
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c32:	f000 f855 	bl	8003ce0 <_lseek_r>
 8003c36:	1c43      	adds	r3, r0, #1
 8003c38:	89a3      	ldrh	r3, [r4, #12]
 8003c3a:	bf15      	itete	ne
 8003c3c:	6560      	strne	r0, [r4, #84]	; 0x54
 8003c3e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8003c42:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003c46:	81a3      	strheq	r3, [r4, #12]
 8003c48:	bf18      	it	ne
 8003c4a:	81a3      	strhne	r3, [r4, #12]
 8003c4c:	bd10      	pop	{r4, pc}

08003c4e <__sclose>:
 8003c4e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c52:	f000 b813 	b.w	8003c7c <_close_r>
	...

08003c58 <_write_r>:
 8003c58:	b538      	push	{r3, r4, r5, lr}
 8003c5a:	4c07      	ldr	r4, [pc, #28]	; (8003c78 <_write_r+0x20>)
 8003c5c:	4605      	mov	r5, r0
 8003c5e:	4608      	mov	r0, r1
 8003c60:	4611      	mov	r1, r2
 8003c62:	2200      	movs	r2, #0
 8003c64:	6022      	str	r2, [r4, #0]
 8003c66:	461a      	mov	r2, r3
 8003c68:	f7fd fc40 	bl	80014ec <_write>
 8003c6c:	1c43      	adds	r3, r0, #1
 8003c6e:	d102      	bne.n	8003c76 <_write_r+0x1e>
 8003c70:	6823      	ldr	r3, [r4, #0]
 8003c72:	b103      	cbz	r3, 8003c76 <_write_r+0x1e>
 8003c74:	602b      	str	r3, [r5, #0]
 8003c76:	bd38      	pop	{r3, r4, r5, pc}
 8003c78:	20000604 	.word	0x20000604

08003c7c <_close_r>:
 8003c7c:	b538      	push	{r3, r4, r5, lr}
 8003c7e:	4c06      	ldr	r4, [pc, #24]	; (8003c98 <_close_r+0x1c>)
 8003c80:	2300      	movs	r3, #0
 8003c82:	4605      	mov	r5, r0
 8003c84:	4608      	mov	r0, r1
 8003c86:	6023      	str	r3, [r4, #0]
 8003c88:	f7fd fc4c 	bl	8001524 <_close>
 8003c8c:	1c43      	adds	r3, r0, #1
 8003c8e:	d102      	bne.n	8003c96 <_close_r+0x1a>
 8003c90:	6823      	ldr	r3, [r4, #0]
 8003c92:	b103      	cbz	r3, 8003c96 <_close_r+0x1a>
 8003c94:	602b      	str	r3, [r5, #0]
 8003c96:	bd38      	pop	{r3, r4, r5, pc}
 8003c98:	20000604 	.word	0x20000604

08003c9c <_fstat_r>:
 8003c9c:	b538      	push	{r3, r4, r5, lr}
 8003c9e:	4c07      	ldr	r4, [pc, #28]	; (8003cbc <_fstat_r+0x20>)
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	4605      	mov	r5, r0
 8003ca4:	4608      	mov	r0, r1
 8003ca6:	4611      	mov	r1, r2
 8003ca8:	6023      	str	r3, [r4, #0]
 8003caa:	f7fd fc47 	bl	800153c <_fstat>
 8003cae:	1c43      	adds	r3, r0, #1
 8003cb0:	d102      	bne.n	8003cb8 <_fstat_r+0x1c>
 8003cb2:	6823      	ldr	r3, [r4, #0]
 8003cb4:	b103      	cbz	r3, 8003cb8 <_fstat_r+0x1c>
 8003cb6:	602b      	str	r3, [r5, #0]
 8003cb8:	bd38      	pop	{r3, r4, r5, pc}
 8003cba:	bf00      	nop
 8003cbc:	20000604 	.word	0x20000604

08003cc0 <_isatty_r>:
 8003cc0:	b538      	push	{r3, r4, r5, lr}
 8003cc2:	4c06      	ldr	r4, [pc, #24]	; (8003cdc <_isatty_r+0x1c>)
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	4605      	mov	r5, r0
 8003cc8:	4608      	mov	r0, r1
 8003cca:	6023      	str	r3, [r4, #0]
 8003ccc:	f7fd fc46 	bl	800155c <_isatty>
 8003cd0:	1c43      	adds	r3, r0, #1
 8003cd2:	d102      	bne.n	8003cda <_isatty_r+0x1a>
 8003cd4:	6823      	ldr	r3, [r4, #0]
 8003cd6:	b103      	cbz	r3, 8003cda <_isatty_r+0x1a>
 8003cd8:	602b      	str	r3, [r5, #0]
 8003cda:	bd38      	pop	{r3, r4, r5, pc}
 8003cdc:	20000604 	.word	0x20000604

08003ce0 <_lseek_r>:
 8003ce0:	b538      	push	{r3, r4, r5, lr}
 8003ce2:	4c07      	ldr	r4, [pc, #28]	; (8003d00 <_lseek_r+0x20>)
 8003ce4:	4605      	mov	r5, r0
 8003ce6:	4608      	mov	r0, r1
 8003ce8:	4611      	mov	r1, r2
 8003cea:	2200      	movs	r2, #0
 8003cec:	6022      	str	r2, [r4, #0]
 8003cee:	461a      	mov	r2, r3
 8003cf0:	f7fd fc3f 	bl	8001572 <_lseek>
 8003cf4:	1c43      	adds	r3, r0, #1
 8003cf6:	d102      	bne.n	8003cfe <_lseek_r+0x1e>
 8003cf8:	6823      	ldr	r3, [r4, #0]
 8003cfa:	b103      	cbz	r3, 8003cfe <_lseek_r+0x1e>
 8003cfc:	602b      	str	r3, [r5, #0]
 8003cfe:	bd38      	pop	{r3, r4, r5, pc}
 8003d00:	20000604 	.word	0x20000604

08003d04 <__malloc_lock>:
 8003d04:	4770      	bx	lr

08003d06 <__malloc_unlock>:
 8003d06:	4770      	bx	lr

08003d08 <_read_r>:
 8003d08:	b538      	push	{r3, r4, r5, lr}
 8003d0a:	4c07      	ldr	r4, [pc, #28]	; (8003d28 <_read_r+0x20>)
 8003d0c:	4605      	mov	r5, r0
 8003d0e:	4608      	mov	r0, r1
 8003d10:	4611      	mov	r1, r2
 8003d12:	2200      	movs	r2, #0
 8003d14:	6022      	str	r2, [r4, #0]
 8003d16:	461a      	mov	r2, r3
 8003d18:	f7fd fbcb 	bl	80014b2 <_read>
 8003d1c:	1c43      	adds	r3, r0, #1
 8003d1e:	d102      	bne.n	8003d26 <_read_r+0x1e>
 8003d20:	6823      	ldr	r3, [r4, #0]
 8003d22:	b103      	cbz	r3, 8003d26 <_read_r+0x1e>
 8003d24:	602b      	str	r3, [r5, #0]
 8003d26:	bd38      	pop	{r3, r4, r5, pc}
 8003d28:	20000604 	.word	0x20000604

08003d2c <_init>:
 8003d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d2e:	bf00      	nop
 8003d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d32:	bc08      	pop	{r3}
 8003d34:	469e      	mov	lr, r3
 8003d36:	4770      	bx	lr

08003d38 <_fini>:
 8003d38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d3a:	bf00      	nop
 8003d3c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d3e:	bc08      	pop	{r3}
 8003d40:	469e      	mov	lr, r3
 8003d42:	4770      	bx	lr
