
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000032a0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003664  08003664  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003664  08003664  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003664  08003664  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003664  08003664  00013664  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003668  08003668  00013668  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  0800366c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000068  080036d4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  080036d4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d44e  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002106  00000000  00000000  0002d4e6  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a90  00000000  00000000  0002f5f0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000978  00000000  00000000  00030080  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023b8d  00000000  00000000  000309f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008cb9  00000000  00000000  00054585  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba41c  00000000  00000000  0005d23e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011765a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003108  00000000  00000000  001176d8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003418 	.word	0x08003418

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003418 	.word	0x08003418

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <adns2610_init>:
 *      Author: deros
 */

#include "adns-2610.h"

void adns2610_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	b082      	sub	sp, #8
 8000304:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 8000306:	4b13      	ldr	r3, [pc, #76]	; (8000354 <adns2610_init+0x54>)
 8000308:	681b      	ldr	r3, [r3, #0]
 800030a:	607b      	str	r3, [r7, #4]
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 800030c:	687b      	ldr	r3, [r7, #4]
 800030e:	f003 0302 	and.w	r3, r3, #2
 8000312:	f043 0304 	orr.w	r3, r3, #4
 8000316:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 8000318:	4a0e      	ldr	r2, [pc, #56]	; (8000354 <adns2610_init+0x54>)
 800031a:	687b      	ldr	r3, [r7, #4]
 800031c:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_READ_TIME;
 800031e:	4b0d      	ldr	r3, [pc, #52]	; (8000354 <adns2610_init+0x54>)
 8000320:	2296      	movs	r2, #150	; 0x96
 8000322:	62da      	str	r2, [r3, #44]	; 0x2c
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000324:	4b0b      	ldr	r3, [pc, #44]	; (8000354 <adns2610_init+0x54>)
 8000326:	68db      	ldr	r3, [r3, #12]
 8000328:	4a0a      	ldr	r2, [pc, #40]	; (8000354 <adns2610_init+0x54>)
 800032a:	f043 0301 	orr.w	r3, r3, #1
 800032e:	60d3      	str	r3, [r2, #12]
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <adns2610_init+0x54>)
 8000332:	695b      	ldr	r3, [r3, #20]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <adns2610_init+0x54>)
 8000336:	f043 0301 	orr.w	r3, r3, #1
 800033a:	6153      	str	r3, [r2, #20]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 800033c:	2100      	movs	r1, #0
 800033e:	2019      	movs	r0, #25
 8000340:	f7ff ffb4 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8000344:	2019      	movs	r0, #25
 8000346:	f7ff ff93 	bl	8000270 <__NVIC_EnableIRQ>

}
 800034a:	bf00      	nop
 800034c:	3708      	adds	r7, #8
 800034e:	46bd      	mov	sp, r7
 8000350:	bd80      	pop	{r7, pc}
 8000352:	bf00      	nop
 8000354:	40012c00 	.word	0x40012c00

08000358 <adns2610_start>:

void adns2610_start(void){
 8000358:	b480      	push	{r7}
 800035a:	af00      	add	r7, sp, #0
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 800035c:	4b05      	ldr	r3, [pc, #20]	; (8000374 <adns2610_start+0x1c>)
 800035e:	681b      	ldr	r3, [r3, #0]
 8000360:	4a04      	ldr	r2, [pc, #16]	; (8000374 <adns2610_start+0x1c>)
 8000362:	f043 0301 	orr.w	r3, r3, #1
 8000366:	6013      	str	r3, [r2, #0]
}
 8000368:	bf00      	nop
 800036a:	46bd      	mov	sp, r7
 800036c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000370:	4770      	bx	lr
 8000372:	bf00      	nop
 8000374:	40012c00 	.word	0x40012c00

08000378 <adns2610_processFSM>:

void adns2610_processFSM(void){
 8000378:	b480      	push	{r7}
 800037a:	af00      	add	r7, sp, #0

}
 800037c:	bf00      	nop
 800037e:	46bd      	mov	sp, r7
 8000380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000384:	4770      	bx	lr
	...

08000388 <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 8000388:	b580      	push	{r7, lr}
 800038a:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 800038c:	4b07      	ldr	r3, [pc, #28]	; (80003ac <TIM1_UP_TIM16_IRQHandler+0x24>)
 800038e:	691b      	ldr	r3, [r3, #16]
 8000390:	f003 0301 	and.w	r3, r3, #1
 8000394:	2b00      	cmp	r3, #0
 8000396:	d007      	beq.n	80003a8 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Process FSM
		adns2610_processFSM();
 8000398:	f7ff ffee 	bl	8000378 <adns2610_processFSM>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 800039c:	4b03      	ldr	r3, [pc, #12]	; (80003ac <TIM1_UP_TIM16_IRQHandler+0x24>)
 800039e:	691b      	ldr	r3, [r3, #16]
 80003a0:	4a02      	ldr	r2, [pc, #8]	; (80003ac <TIM1_UP_TIM16_IRQHandler+0x24>)
 80003a2:	f023 0301 	bic.w	r3, r3, #1
 80003a6:	6113      	str	r3, [r2, #16]
	}
}
 80003a8:	bf00      	nop
 80003aa:	bd80      	pop	{r7, pc}
 80003ac:	40012c00 	.word	0x40012c00

080003b0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80003b0:	b480      	push	{r7}
 80003b2:	b085      	sub	sp, #20
 80003b4:	af00      	add	r7, sp, #0
 80003b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80003b8:	4b08      	ldr	r3, [pc, #32]	; (80003dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003bc:	4907      	ldr	r1, [pc, #28]	; (80003dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003be:	687b      	ldr	r3, [r7, #4]
 80003c0:	4313      	orrs	r3, r2
 80003c2:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80003c4:	4b05      	ldr	r3, [pc, #20]	; (80003dc <LL_AHB2_GRP1_EnableClock+0x2c>)
 80003c6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80003c8:	687b      	ldr	r3, [r7, #4]
 80003ca:	4013      	ands	r3, r2
 80003cc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80003ce:	68fb      	ldr	r3, [r7, #12]
}
 80003d0:	bf00      	nop
 80003d2:	3714      	adds	r7, #20
 80003d4:	46bd      	mov	sp, r7
 80003d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003da:	4770      	bx	lr
 80003dc:	40021000 	.word	0x40021000

080003e0 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80003e0:	b480      	push	{r7}
 80003e2:	b087      	sub	sp, #28
 80003e4:	af00      	add	r7, sp, #0
 80003e6:	6078      	str	r0, [r7, #4]
 80003e8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80003ea:	4a17      	ldr	r2, [pc, #92]	; (8000448 <LL_SYSCFG_SetEXTISource+0x68>)
 80003ec:	683b      	ldr	r3, [r7, #0]
 80003ee:	b2db      	uxtb	r3, r3
 80003f0:	3302      	adds	r3, #2
 80003f2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80003f6:	683b      	ldr	r3, [r7, #0]
 80003f8:	0c1b      	lsrs	r3, r3, #16
 80003fa:	43db      	mvns	r3, r3
 80003fc:	ea02 0103 	and.w	r1, r2, r3
 8000400:	683b      	ldr	r3, [r7, #0]
 8000402:	0c1b      	lsrs	r3, r3, #16
 8000404:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000406:	693b      	ldr	r3, [r7, #16]
 8000408:	fa93 f3a3 	rbit	r3, r3
 800040c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800040e:	68fb      	ldr	r3, [r7, #12]
 8000410:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000412:	697b      	ldr	r3, [r7, #20]
 8000414:	2b00      	cmp	r3, #0
 8000416:	d101      	bne.n	800041c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000418:	2320      	movs	r3, #32
 800041a:	e003      	b.n	8000424 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	fab3 f383 	clz	r3, r3
 8000422:	b2db      	uxtb	r3, r3
 8000424:	461a      	mov	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	fa03 f202 	lsl.w	r2, r3, r2
 800042c:	4806      	ldr	r0, [pc, #24]	; (8000448 <LL_SYSCFG_SetEXTISource+0x68>)
 800042e:	683b      	ldr	r3, [r7, #0]
 8000430:	b2db      	uxtb	r3, r3
 8000432:	430a      	orrs	r2, r1
 8000434:	3302      	adds	r3, #2
 8000436:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800043a:	bf00      	nop
 800043c:	371c      	adds	r7, #28
 800043e:	46bd      	mov	sp, r7
 8000440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000444:	4770      	bx	lr
 8000446:	bf00      	nop
 8000448:	40010000 	.word	0x40010000

0800044c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800044c:	b480      	push	{r7}
 800044e:	b08b      	sub	sp, #44	; 0x2c
 8000450:	af00      	add	r7, sp, #0
 8000452:	60f8      	str	r0, [r7, #12]
 8000454:	60b9      	str	r1, [r7, #8]
 8000456:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000458:	68fb      	ldr	r3, [r7, #12]
 800045a:	681a      	ldr	r2, [r3, #0]
 800045c:	68bb      	ldr	r3, [r7, #8]
 800045e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000460:	697b      	ldr	r3, [r7, #20]
 8000462:	fa93 f3a3 	rbit	r3, r3
 8000466:	613b      	str	r3, [r7, #16]
  return result;
 8000468:	693b      	ldr	r3, [r7, #16]
 800046a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800046c:	69bb      	ldr	r3, [r7, #24]
 800046e:	2b00      	cmp	r3, #0
 8000470:	d101      	bne.n	8000476 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8000472:	2320      	movs	r3, #32
 8000474:	e003      	b.n	800047e <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8000476:	69bb      	ldr	r3, [r7, #24]
 8000478:	fab3 f383 	clz	r3, r3
 800047c:	b2db      	uxtb	r3, r3
 800047e:	005b      	lsls	r3, r3, #1
 8000480:	2103      	movs	r1, #3
 8000482:	fa01 f303 	lsl.w	r3, r1, r3
 8000486:	43db      	mvns	r3, r3
 8000488:	401a      	ands	r2, r3
 800048a:	68bb      	ldr	r3, [r7, #8]
 800048c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800048e:	6a3b      	ldr	r3, [r7, #32]
 8000490:	fa93 f3a3 	rbit	r3, r3
 8000494:	61fb      	str	r3, [r7, #28]
  return result;
 8000496:	69fb      	ldr	r3, [r7, #28]
 8000498:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800049a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800049c:	2b00      	cmp	r3, #0
 800049e:	d101      	bne.n	80004a4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80004a0:	2320      	movs	r3, #32
 80004a2:	e003      	b.n	80004ac <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80004a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80004a6:	fab3 f383 	clz	r3, r3
 80004aa:	b2db      	uxtb	r3, r3
 80004ac:	005b      	lsls	r3, r3, #1
 80004ae:	6879      	ldr	r1, [r7, #4]
 80004b0:	fa01 f303 	lsl.w	r3, r1, r3
 80004b4:	431a      	orrs	r2, r3
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	601a      	str	r2, [r3, #0]
}
 80004ba:	bf00      	nop
 80004bc:	372c      	adds	r7, #44	; 0x2c
 80004be:	46bd      	mov	sp, r7
 80004c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004c4:	4770      	bx	lr

080004c6 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80004c6:	b480      	push	{r7}
 80004c8:	b08b      	sub	sp, #44	; 0x2c
 80004ca:	af00      	add	r7, sp, #0
 80004cc:	60f8      	str	r0, [r7, #12]
 80004ce:	60b9      	str	r1, [r7, #8]
 80004d0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	68da      	ldr	r2, [r3, #12]
 80004d6:	68bb      	ldr	r3, [r7, #8]
 80004d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80004da:	697b      	ldr	r3, [r7, #20]
 80004dc:	fa93 f3a3 	rbit	r3, r3
 80004e0:	613b      	str	r3, [r7, #16]
  return result;
 80004e2:	693b      	ldr	r3, [r7, #16]
 80004e4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80004e6:	69bb      	ldr	r3, [r7, #24]
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d101      	bne.n	80004f0 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80004ec:	2320      	movs	r3, #32
 80004ee:	e003      	b.n	80004f8 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80004f0:	69bb      	ldr	r3, [r7, #24]
 80004f2:	fab3 f383 	clz	r3, r3
 80004f6:	b2db      	uxtb	r3, r3
 80004f8:	005b      	lsls	r3, r3, #1
 80004fa:	2103      	movs	r1, #3
 80004fc:	fa01 f303 	lsl.w	r3, r1, r3
 8000500:	43db      	mvns	r3, r3
 8000502:	401a      	ands	r2, r3
 8000504:	68bb      	ldr	r3, [r7, #8]
 8000506:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000508:	6a3b      	ldr	r3, [r7, #32]
 800050a:	fa93 f3a3 	rbit	r3, r3
 800050e:	61fb      	str	r3, [r7, #28]
  return result;
 8000510:	69fb      	ldr	r3, [r7, #28]
 8000512:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000514:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000516:	2b00      	cmp	r3, #0
 8000518:	d101      	bne.n	800051e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800051a:	2320      	movs	r3, #32
 800051c:	e003      	b.n	8000526 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800051e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000520:	fab3 f383 	clz	r3, r3
 8000524:	b2db      	uxtb	r3, r3
 8000526:	005b      	lsls	r3, r3, #1
 8000528:	6879      	ldr	r1, [r7, #4]
 800052a:	fa01 f303 	lsl.w	r3, r1, r3
 800052e:	431a      	orrs	r2, r3
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	60da      	str	r2, [r3, #12]
}
 8000534:	bf00      	nop
 8000536:	372c      	adds	r7, #44	; 0x2c
 8000538:	46bd      	mov	sp, r7
 800053a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053e:	4770      	bx	lr

08000540 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000540:	b480      	push	{r7}
 8000542:	b083      	sub	sp, #12
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
 8000548:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	683a      	ldr	r2, [r7, #0]
 800054e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000550:	bf00      	nop
 8000552:	370c      	adds	r7, #12
 8000554:	46bd      	mov	sp, r7
 8000556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800055a:	4770      	bx	lr

0800055c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b08a      	sub	sp, #40	; 0x28
 8000560:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 8000562:	f107 031c 	add.w	r3, r7, #28
 8000566:	2200      	movs	r2, #0
 8000568:	601a      	str	r2, [r3, #0]
 800056a:	605a      	str	r2, [r3, #4]
 800056c:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	601a      	str	r2, [r3, #0]
 8000574:	605a      	str	r2, [r3, #4]
 8000576:	609a      	str	r2, [r3, #8]
 8000578:	60da      	str	r2, [r3, #12]
 800057a:	611a      	str	r2, [r3, #16]
 800057c:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800057e:	2004      	movs	r0, #4
 8000580:	f7ff ff16 	bl	80003b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8000584:	2080      	movs	r0, #128	; 0x80
 8000586:	f7ff ff13 	bl	80003b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800058a:	2001      	movs	r0, #1
 800058c:	f7ff ff10 	bl	80003b0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000590:	2002      	movs	r0, #2
 8000592:	f7ff ff0d 	bl	80003b0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8000596:	2120      	movs	r1, #32
 8000598:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800059c:	f7ff ffd0 	bl	8000540 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80005a0:	491b      	ldr	r1, [pc, #108]	; (8000610 <MX_GPIO_Init+0xb4>)
 80005a2:	2002      	movs	r0, #2
 80005a4:	f7ff ff1c 	bl	80003e0 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80005a8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80005ac:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80005ae:	2300      	movs	r3, #0
 80005b0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80005b2:	2301      	movs	r3, #1
 80005b4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80005b8:	2300      	movs	r3, #0
 80005ba:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80005be:	2302      	movs	r3, #2
 80005c0:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80005c4:	f107 031c 	add.w	r3, r7, #28
 80005c8:	4618      	mov	r0, r3
 80005ca:	f000 fee5 	bl	8001398 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80005ce:	2200      	movs	r2, #0
 80005d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005d4:	480f      	ldr	r0, [pc, #60]	; (8000614 <MX_GPIO_Init+0xb8>)
 80005d6:	f7ff ff76 	bl	80004c6 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80005e0:	480c      	ldr	r0, [pc, #48]	; (8000614 <MX_GPIO_Init+0xb8>)
 80005e2:	f7ff ff33 	bl	800044c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80005e6:	2320      	movs	r3, #32
 80005e8:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80005ea:	2301      	movs	r3, #1
 80005ec:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	4619      	mov	r1, r3
 80005fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000602:	f001 f900 	bl	8001806 <LL_GPIO_Init>

}
 8000606:	bf00      	nop
 8000608:	3728      	adds	r7, #40	; 0x28
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	00f00003 	.word	0x00f00003
 8000614:	48000800 	.word	0x48000800

08000618 <__NVIC_SetPriorityGrouping>:
{
 8000618:	b480      	push	{r7}
 800061a:	b085      	sub	sp, #20
 800061c:	af00      	add	r7, sp, #0
 800061e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000620:	687b      	ldr	r3, [r7, #4]
 8000622:	f003 0307 	and.w	r3, r3, #7
 8000626:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000628:	4b0c      	ldr	r3, [pc, #48]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800062a:	68db      	ldr	r3, [r3, #12]
 800062c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800062e:	68ba      	ldr	r2, [r7, #8]
 8000630:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000634:	4013      	ands	r3, r2
 8000636:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000638:	68fb      	ldr	r3, [r7, #12]
 800063a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800063c:	68bb      	ldr	r3, [r7, #8]
 800063e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000640:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000644:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000648:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800064a:	4a04      	ldr	r2, [pc, #16]	; (800065c <__NVIC_SetPriorityGrouping+0x44>)
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	60d3      	str	r3, [r2, #12]
}
 8000650:	bf00      	nop
 8000652:	3714      	adds	r7, #20
 8000654:	46bd      	mov	sp, r7
 8000656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065a:	4770      	bx	lr
 800065c:	e000ed00 	.word	0xe000ed00

08000660 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000660:	b480      	push	{r7}
 8000662:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8000664:	4b05      	ldr	r3, [pc, #20]	; (800067c <LL_RCC_HSI_Enable+0x1c>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	4a04      	ldr	r2, [pc, #16]	; (800067c <LL_RCC_HSI_Enable+0x1c>)
 800066a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800066e:	6013      	str	r3, [r2, #0]
}
 8000670:	bf00      	nop
 8000672:	46bd      	mov	sp, r7
 8000674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop
 800067c:	40021000 	.word	0x40021000

08000680 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000680:	b480      	push	{r7}
 8000682:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8000684:	4b07      	ldr	r3, [pc, #28]	; (80006a4 <LL_RCC_HSI_IsReady+0x24>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800068c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000690:	d101      	bne.n	8000696 <LL_RCC_HSI_IsReady+0x16>
 8000692:	2301      	movs	r3, #1
 8000694:	e000      	b.n	8000698 <LL_RCC_HSI_IsReady+0x18>
 8000696:	2300      	movs	r3, #0
}
 8000698:	4618      	mov	r0, r3
 800069a:	46bd      	mov	sp, r7
 800069c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a0:	4770      	bx	lr
 80006a2:	bf00      	nop
 80006a4:	40021000 	.word	0x40021000

080006a8 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80006b0:	4b07      	ldr	r3, [pc, #28]	; (80006d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	061b      	lsls	r3, r3, #24
 80006bc:	4904      	ldr	r1, [pc, #16]	; (80006d0 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80006be:	4313      	orrs	r3, r2
 80006c0:	604b      	str	r3, [r1, #4]
}
 80006c2:	bf00      	nop
 80006c4:	370c      	adds	r7, #12
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	40021000 	.word	0x40021000

080006d4 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b083      	sub	sp, #12
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80006dc:	4b06      	ldr	r3, [pc, #24]	; (80006f8 <LL_RCC_SetSysClkSource+0x24>)
 80006de:	689b      	ldr	r3, [r3, #8]
 80006e0:	f023 0203 	bic.w	r2, r3, #3
 80006e4:	4904      	ldr	r1, [pc, #16]	; (80006f8 <LL_RCC_SetSysClkSource+0x24>)
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	4313      	orrs	r3, r2
 80006ea:	608b      	str	r3, [r1, #8]
}
 80006ec:	bf00      	nop
 80006ee:	370c      	adds	r7, #12
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	40021000 	.word	0x40021000

080006fc <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000700:	4b04      	ldr	r3, [pc, #16]	; (8000714 <LL_RCC_GetSysClkSource+0x18>)
 8000702:	689b      	ldr	r3, [r3, #8]
 8000704:	f003 030c 	and.w	r3, r3, #12
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000718:	b480      	push	{r7}
 800071a:	b083      	sub	sp, #12
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000720:	4b06      	ldr	r3, [pc, #24]	; (800073c <LL_RCC_SetAHBPrescaler+0x24>)
 8000722:	689b      	ldr	r3, [r3, #8]
 8000724:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000728:	4904      	ldr	r1, [pc, #16]	; (800073c <LL_RCC_SetAHBPrescaler+0x24>)
 800072a:	687b      	ldr	r3, [r7, #4]
 800072c:	4313      	orrs	r3, r2
 800072e:	608b      	str	r3, [r1, #8]
}
 8000730:	bf00      	nop
 8000732:	370c      	adds	r7, #12
 8000734:	46bd      	mov	sp, r7
 8000736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073a:	4770      	bx	lr
 800073c:	40021000 	.word	0x40021000

08000740 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000748:	4b06      	ldr	r3, [pc, #24]	; (8000764 <LL_RCC_SetAPB1Prescaler+0x24>)
 800074a:	689b      	ldr	r3, [r3, #8]
 800074c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000750:	4904      	ldr	r1, [pc, #16]	; (8000764 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	4313      	orrs	r3, r2
 8000756:	608b      	str	r3, [r1, #8]
}
 8000758:	bf00      	nop
 800075a:	370c      	adds	r7, #12
 800075c:	46bd      	mov	sp, r7
 800075e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000762:	4770      	bx	lr
 8000764:	40021000 	.word	0x40021000

08000768 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000768:	b480      	push	{r7}
 800076a:	b083      	sub	sp, #12
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000772:	689b      	ldr	r3, [r3, #8]
 8000774:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000778:	4904      	ldr	r1, [pc, #16]	; (800078c <LL_RCC_SetAPB2Prescaler+0x24>)
 800077a:	687b      	ldr	r3, [r7, #4]
 800077c:	4313      	orrs	r3, r2
 800077e:	608b      	str	r3, [r1, #8]
}
 8000780:	bf00      	nop
 8000782:	370c      	adds	r7, #12
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	40021000 	.word	0x40021000

08000790 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000790:	b480      	push	{r7}
 8000792:	b083      	sub	sp, #12
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000798:	4b09      	ldr	r3, [pc, #36]	; (80007c0 <LL_RCC_SetUSARTClockSource+0x30>)
 800079a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800079e:	687b      	ldr	r3, [r7, #4]
 80007a0:	0c1b      	lsrs	r3, r3, #16
 80007a2:	43db      	mvns	r3, r3
 80007a4:	401a      	ands	r2, r3
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	b29b      	uxth	r3, r3
 80007aa:	4905      	ldr	r1, [pc, #20]	; (80007c0 <LL_RCC_SetUSARTClockSource+0x30>)
 80007ac:	4313      	orrs	r3, r2
 80007ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 80007b2:	bf00      	nop
 80007b4:	370c      	adds	r7, #12
 80007b6:	46bd      	mov	sp, r7
 80007b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007bc:	4770      	bx	lr
 80007be:	bf00      	nop
 80007c0:	40021000 	.word	0x40021000

080007c4 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80007c8:	4b05      	ldr	r3, [pc, #20]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	4a04      	ldr	r2, [pc, #16]	; (80007e0 <LL_RCC_PLL_Enable+0x1c>)
 80007ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80007d2:	6013      	str	r3, [r2, #0]
}
 80007d4:	bf00      	nop
 80007d6:	46bd      	mov	sp, r7
 80007d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007dc:	4770      	bx	lr
 80007de:	bf00      	nop
 80007e0:	40021000 	.word	0x40021000

080007e4 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80007e8:	4b07      	ldr	r3, [pc, #28]	; (8000808 <LL_RCC_PLL_IsReady+0x24>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80007f0:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80007f4:	d101      	bne.n	80007fa <LL_RCC_PLL_IsReady+0x16>
 80007f6:	2301      	movs	r3, #1
 80007f8:	e000      	b.n	80007fc <LL_RCC_PLL_IsReady+0x18>
 80007fa:	2300      	movs	r3, #0
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr
 8000806:	bf00      	nop
 8000808:	40021000 	.word	0x40021000

0800080c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 800080c:	b480      	push	{r7}
 800080e:	b085      	sub	sp, #20
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
 8000818:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 800081a:	4b0a      	ldr	r3, [pc, #40]	; (8000844 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 800081c:	68da      	ldr	r2, [r3, #12]
 800081e:	4b0a      	ldr	r3, [pc, #40]	; (8000848 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000820:	4013      	ands	r3, r2
 8000822:	68f9      	ldr	r1, [r7, #12]
 8000824:	68ba      	ldr	r2, [r7, #8]
 8000826:	4311      	orrs	r1, r2
 8000828:	687a      	ldr	r2, [r7, #4]
 800082a:	0212      	lsls	r2, r2, #8
 800082c:	4311      	orrs	r1, r2
 800082e:	683a      	ldr	r2, [r7, #0]
 8000830:	430a      	orrs	r2, r1
 8000832:	4904      	ldr	r1, [pc, #16]	; (8000844 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000834:	4313      	orrs	r3, r2
 8000836:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000838:	bf00      	nop
 800083a:	3714      	adds	r7, #20
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr
 8000844:	40021000 	.word	0x40021000
 8000848:	f9ff808c 	.word	0xf9ff808c

0800084c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000850:	4b05      	ldr	r3, [pc, #20]	; (8000868 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000852:	68db      	ldr	r3, [r3, #12]
 8000854:	4a04      	ldr	r2, [pc, #16]	; (8000868 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000856:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800085a:	60d3      	str	r3, [r2, #12]
}
 800085c:	bf00      	nop
 800085e:	46bd      	mov	sp, r7
 8000860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000864:	4770      	bx	lr
 8000866:	bf00      	nop
 8000868:	40021000 	.word	0x40021000

0800086c <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 800086c:	b480      	push	{r7}
 800086e:	b085      	sub	sp, #20
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000874:	4b08      	ldr	r3, [pc, #32]	; (8000898 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000876:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000878:	4907      	ldr	r1, [pc, #28]	; (8000898 <LL_APB1_GRP1_EnableClock+0x2c>)
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	4313      	orrs	r3, r2
 800087e:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000880:	4b05      	ldr	r3, [pc, #20]	; (8000898 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000882:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	4013      	ands	r3, r2
 8000888:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800088a:	68fb      	ldr	r3, [r7, #12]
}
 800088c:	bf00      	nop
 800088e:	3714      	adds	r7, #20
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr
 8000898:	40021000 	.word	0x40021000

0800089c <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 800089c:	b480      	push	{r7}
 800089e:	b085      	sub	sp, #20
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 80008a4:	4b08      	ldr	r3, [pc, #32]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008a8:	4907      	ldr	r1, [pc, #28]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	4313      	orrs	r3, r2
 80008ae:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80008b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	4013      	ands	r3, r2
 80008b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80008ba:	68fb      	ldr	r3, [r7, #12]
}
 80008bc:	bf00      	nop
 80008be:	3714      	adds	r7, #20
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 80008cc:	b480      	push	{r7}
 80008ce:	b083      	sub	sp, #12
 80008d0:	af00      	add	r7, sp, #0
 80008d2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 80008d4:	4b06      	ldr	r3, [pc, #24]	; (80008f0 <LL_FLASH_SetLatency+0x24>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	f023 0207 	bic.w	r2, r3, #7
 80008dc:	4904      	ldr	r1, [pc, #16]	; (80008f0 <LL_FLASH_SetLatency+0x24>)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	4313      	orrs	r3, r2
 80008e2:	600b      	str	r3, [r1, #0]
}
 80008e4:	bf00      	nop
 80008e6:	370c      	adds	r7, #12
 80008e8:	46bd      	mov	sp, r7
 80008ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ee:	4770      	bx	lr
 80008f0:	40022000 	.word	0x40022000

080008f4 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 80008f4:	b480      	push	{r7}
 80008f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 80008f8:	4b04      	ldr	r3, [pc, #16]	; (800090c <LL_FLASH_GetLatency+0x18>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f003 0307 	and.w	r3, r3, #7
}
 8000900:	4618      	mov	r0, r3
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40022000 	.word	0x40022000

08000910 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <LL_PWR_SetRegulVoltageScaling+0x24>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000920:	4904      	ldr	r1, [pc, #16]	; (8000934 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4313      	orrs	r3, r2
 8000926:	600b      	str	r3, [r1, #0]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40007000 	.word	0x40007000

08000938 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 800093c:	2001      	movs	r0, #1
 800093e:	f7ff ffad 	bl	800089c <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000942:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000946:	f7ff ff91 	bl	800086c <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800094a:	2003      	movs	r0, #3
 800094c:	f7ff fe64 	bl	8000618 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000950:	f000 f810 	bl	8000974 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000954:	f7ff fe02 	bl	800055c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000958:	f000 fb74 	bl	8001044 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 800095c:	f000 f8a8 	bl	8000ab0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000960:	f000 fa90 	bl	8000e84 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8000964:	f000 fb40 	bl	8000fe8 <startupPrint>

  adns2610_init();
 8000968:	f7ff fcca 	bl	8000300 <adns2610_init>
  adns2610_start();
 800096c:	f7ff fcf4 	bl	8000358 <adns2610_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000970:	e7fe      	b.n	8000970 <main+0x38>
	...

08000974 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000978:	2003      	movs	r0, #3
 800097a:	f7ff ffa7 	bl	80008cc <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 800097e:	bf00      	nop
 8000980:	f7ff ffb8 	bl	80008f4 <LL_FLASH_GetLatency>
 8000984:	4603      	mov	r3, r0
 8000986:	2b03      	cmp	r3, #3
 8000988:	d1fa      	bne.n	8000980 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 800098a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800098e:	f7ff ffbf 	bl	8000910 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000992:	f7ff fe65 	bl	8000660 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000996:	bf00      	nop
 8000998:	f7ff fe72 	bl	8000680 <LL_RCC_HSI_IsReady>
 800099c:	4603      	mov	r3, r0
 800099e:	2b01      	cmp	r3, #1
 80009a0:	d1fa      	bne.n	8000998 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 80009a2:	2010      	movs	r0, #16
 80009a4:	f7ff fe80 	bl	80006a8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 80009a8:	2300      	movs	r3, #0
 80009aa:	2208      	movs	r2, #8
 80009ac:	2100      	movs	r1, #0
 80009ae:	2002      	movs	r0, #2
 80009b0:	f7ff ff2c 	bl	800080c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 80009b4:	f7ff ff4a 	bl	800084c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 80009b8:	f7ff ff04 	bl	80007c4 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 80009bc:	bf00      	nop
 80009be:	f7ff ff11 	bl	80007e4 <LL_RCC_PLL_IsReady>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b01      	cmp	r3, #1
 80009c6:	d1fa      	bne.n	80009be <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 80009c8:	2003      	movs	r0, #3
 80009ca:	f7ff fe83 	bl	80006d4 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 80009ce:	bf00      	nop
 80009d0:	f7ff fe94 	bl	80006fc <LL_RCC_GetSysClkSource>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b0c      	cmp	r3, #12
 80009d8:	d1fa      	bne.n	80009d0 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 80009da:	2000      	movs	r0, #0
 80009dc:	f7ff fe9c 	bl	8000718 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 80009e0:	2000      	movs	r0, #0
 80009e2:	f7ff fead 	bl	8000740 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 80009e6:	2000      	movs	r0, #0
 80009e8:	f7ff febe 	bl	8000768 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 80009ec:	4805      	ldr	r0, [pc, #20]	; (8000a04 <SystemClock_Config+0x90>)
 80009ee:	f001 fd7b 	bl	80024e8 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 80009f2:	4804      	ldr	r0, [pc, #16]	; (8000a04 <SystemClock_Config+0x90>)
 80009f4:	f001 fd86 	bl	8002504 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 80009f8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 80009fc:	f7ff fec8 	bl	8000790 <LL_RCC_SetUSARTClockSource>
}
 8000a00:	bf00      	nop
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	03d09000 	.word	0x03d09000

08000a08 <LL_AHB2_GRP1_EnableClock>:
{
 8000a08:	b480      	push	{r7}
 8000a0a:	b085      	sub	sp, #20
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000a10:	4b08      	ldr	r3, [pc, #32]	; (8000a34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a14:	4907      	ldr	r1, [pc, #28]	; (8000a34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a16:	687b      	ldr	r3, [r7, #4]
 8000a18:	4313      	orrs	r3, r2
 8000a1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000a1c:	4b05      	ldr	r3, [pc, #20]	; (8000a34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000a1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	4013      	ands	r3, r2
 8000a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a26:	68fb      	ldr	r3, [r7, #12]
}
 8000a28:	bf00      	nop
 8000a2a:	3714      	adds	r7, #20
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a32:	4770      	bx	lr
 8000a34:	40021000 	.word	0x40021000

08000a38 <LL_APB1_GRP1_EnableClock>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a44:	4907      	ldr	r1, [pc, #28]	; (8000a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	4313      	orrs	r3, r2
 8000a4a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000a4c:	4b05      	ldr	r3, [pc, #20]	; (8000a64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000a4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	4013      	ands	r3, r2
 8000a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000a56:	68fb      	ldr	r3, [r7, #12]
}
 8000a58:	bf00      	nop
 8000a5a:	3714      	adds	r7, #20
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr
 8000a64:	40021000 	.word	0x40021000

08000a68 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	6078      	str	r0, [r7, #4]
 8000a70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f023 0210 	bic.w	r2, r3, #16
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	431a      	orrs	r2, r3
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	605a      	str	r2, [r3, #4]
}
 8000a82:	bf00      	nop
 8000a84:	370c      	adds	r7, #12
 8000a86:	46bd      	mov	sp, r7
 8000a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8c:	4770      	bx	lr

08000a8e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	b083      	sub	sp, #12
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	685b      	ldr	r3, [r3, #4]
 8000a9a:	f023 0208 	bic.w	r2, r3, #8
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	605a      	str	r2, [r3, #4]
}
 8000aa2:	bf00      	nop
 8000aa4:	370c      	adds	r7, #12
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
	...

08000ab0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b090      	sub	sp, #64	; 0x40
 8000ab4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000ab6:	f107 0318 	add.w	r3, r7, #24
 8000aba:	2228      	movs	r2, #40	; 0x28
 8000abc:	2100      	movs	r1, #0
 8000abe:	4618      	mov	r0, r3
 8000ac0:	f001 fd5a 	bl	8002578 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ac4:	463b      	mov	r3, r7
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	601a      	str	r2, [r3, #0]
 8000aca:	605a      	str	r2, [r3, #4]
 8000acc:	609a      	str	r2, [r3, #8]
 8000ace:	60da      	str	r2, [r3, #12]
 8000ad0:	611a      	str	r2, [r3, #16]
 8000ad2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000ad4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000ad8:	f7ff ffae 	bl	8000a38 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000adc:	2004      	movs	r0, #4
 8000ade:	f7ff ff93 	bl	8000a08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000ae2:	2002      	movs	r0, #2
 8000ae4:	f7ff ff90 	bl	8000a08 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000ae8:	230c      	movs	r3, #12
 8000aea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000aec:	2302      	movs	r3, #2
 8000aee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000af0:	2303      	movs	r3, #3
 8000af2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000af4:	2300      	movs	r3, #0
 8000af6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000af8:	2300      	movs	r3, #0
 8000afa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000afc:	2305      	movs	r3, #5
 8000afe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b00:	463b      	mov	r3, r7
 8000b02:	4619      	mov	r1, r3
 8000b04:	481e      	ldr	r0, [pc, #120]	; (8000b80 <MX_SPI2_Init+0xd0>)
 8000b06:	f000 fe7e 	bl	8001806 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000b0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000b10:	2302      	movs	r3, #2
 8000b12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000b14:	2303      	movs	r3, #3
 8000b16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000b20:	2305      	movs	r3, #5
 8000b22:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b24:	463b      	mov	r3, r7
 8000b26:	4619      	mov	r1, r3
 8000b28:	4816      	ldr	r0, [pc, #88]	; (8000b84 <MX_SPI2_Init+0xd4>)
 8000b2a:	f000 fe6c 	bl	8001806 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000b32:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000b36:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000b38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000b3c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000b42:	2301      	movs	r3, #1
 8000b44:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000b46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000b4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8000b4c:	2320      	movs	r3, #32
 8000b4e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000b50:	2300      	movs	r3, #0
 8000b52:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000b58:	2307      	movs	r3, #7
 8000b5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000b5c:	f107 0318 	add.w	r3, r7, #24
 8000b60:	4619      	mov	r1, r3
 8000b62:	4809      	ldr	r0, [pc, #36]	; (8000b88 <MX_SPI2_Init+0xd8>)
 8000b64:	f001 fa9d 	bl	80020a2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4807      	ldr	r0, [pc, #28]	; (8000b88 <MX_SPI2_Init+0xd8>)
 8000b6c:	f7ff ff7c 	bl	8000a68 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8000b70:	4805      	ldr	r0, [pc, #20]	; (8000b88 <MX_SPI2_Init+0xd8>)
 8000b72:	f7ff ff8c 	bl	8000a8e <LL_SPI_DisableNSSPulseMgt>

}
 8000b76:	bf00      	nop
 8000b78:	3740      	adds	r7, #64	; 0x40
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	48000800 	.word	0x48000800
 8000b84:	48000400 	.word	0x48000400
 8000b88:	40003800 	.word	0x40003800

08000b8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b9e:	e7fe      	b.n	8000b9e <HardFault_Handler+0x4>

08000ba0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ba4:	e7fe      	b.n	8000ba4 <MemManage_Handler+0x4>

08000ba6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ba6:	b480      	push	{r7}
 8000ba8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000baa:	e7fe      	b.n	8000baa <BusFault_Handler+0x4>

08000bac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb0:	e7fe      	b.n	8000bb0 <UsageFault_Handler+0x4>

08000bb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bb2:	b480      	push	{r7}
 8000bb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000bb6:	bf00      	nop
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr

08000bc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bc4:	bf00      	nop
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bcc:	4770      	bx	lr

08000bce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bce:	b480      	push	{r7}
 8000bd0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000be0:	bf00      	nop
 8000be2:	46bd      	mov	sp, r7
 8000be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be8:	4770      	bx	lr

08000bea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000bea:	b580      	push	{r7, lr}
 8000bec:	b086      	sub	sp, #24
 8000bee:	af00      	add	r7, sp, #0
 8000bf0:	60f8      	str	r0, [r7, #12]
 8000bf2:	60b9      	str	r1, [r7, #8]
 8000bf4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	617b      	str	r3, [r7, #20]
 8000bfa:	e00a      	b.n	8000c12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000bfc:	f000 f9ec 	bl	8000fd8 <__io_getchar>
 8000c00:	4601      	mov	r1, r0
 8000c02:	68bb      	ldr	r3, [r7, #8]
 8000c04:	1c5a      	adds	r2, r3, #1
 8000c06:	60ba      	str	r2, [r7, #8]
 8000c08:	b2ca      	uxtb	r2, r1
 8000c0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c0c:	697b      	ldr	r3, [r7, #20]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	617b      	str	r3, [r7, #20]
 8000c12:	697a      	ldr	r2, [r7, #20]
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	429a      	cmp	r2, r3
 8000c18:	dbf0      	blt.n	8000bfc <_read+0x12>
	}

return len;
 8000c1a:	687b      	ldr	r3, [r7, #4]
}
 8000c1c:	4618      	mov	r0, r3
 8000c1e:	3718      	adds	r7, #24
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}

08000c24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b086      	sub	sp, #24
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	60f8      	str	r0, [r7, #12]
 8000c2c:	60b9      	str	r1, [r7, #8]
 8000c2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c30:	2300      	movs	r3, #0
 8000c32:	617b      	str	r3, [r7, #20]
 8000c34:	e009      	b.n	8000c4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000c36:	68bb      	ldr	r3, [r7, #8]
 8000c38:	1c5a      	adds	r2, r3, #1
 8000c3a:	60ba      	str	r2, [r7, #8]
 8000c3c:	781b      	ldrb	r3, [r3, #0]
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f000 f9ac 	bl	8000f9c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	3301      	adds	r3, #1
 8000c48:	617b      	str	r3, [r7, #20]
 8000c4a:	697a      	ldr	r2, [r7, #20]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	429a      	cmp	r2, r3
 8000c50:	dbf1      	blt.n	8000c36 <_write+0x12>
	}
	return len;
 8000c52:	687b      	ldr	r3, [r7, #4]
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3718      	adds	r7, #24
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}

08000c5c <_close>:

int _close(int file)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	b083      	sub	sp, #12
 8000c60:	af00      	add	r7, sp, #0
 8000c62:	6078      	str	r0, [r7, #4]
	return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b083      	sub	sp, #12
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
 8000c7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c84:	605a      	str	r2, [r3, #4]
	return 0;
 8000c86:	2300      	movs	r3, #0
}
 8000c88:	4618      	mov	r0, r3
 8000c8a:	370c      	adds	r7, #12
 8000c8c:	46bd      	mov	sp, r7
 8000c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c92:	4770      	bx	lr

08000c94 <_isatty>:

int _isatty(int file)
{
 8000c94:	b480      	push	{r7}
 8000c96:	b083      	sub	sp, #12
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000c9c:	2301      	movs	r3, #1
}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	370c      	adds	r7, #12
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca8:	4770      	bx	lr

08000caa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000caa:	b480      	push	{r7}
 8000cac:	b085      	sub	sp, #20
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	60f8      	str	r0, [r7, #12]
 8000cb2:	60b9      	str	r1, [r7, #8]
 8000cb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000cb6:	2300      	movs	r3, #0
}
 8000cb8:	4618      	mov	r0, r3
 8000cba:	3714      	adds	r7, #20
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc2:	4770      	bx	lr

08000cc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ccc:	4a14      	ldr	r2, [pc, #80]	; (8000d20 <_sbrk+0x5c>)
 8000cce:	4b15      	ldr	r3, [pc, #84]	; (8000d24 <_sbrk+0x60>)
 8000cd0:	1ad3      	subs	r3, r2, r3
 8000cd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000cd4:	697b      	ldr	r3, [r7, #20]
 8000cd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cd8:	4b13      	ldr	r3, [pc, #76]	; (8000d28 <_sbrk+0x64>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d102      	bne.n	8000ce6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ce0:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <_sbrk+0x64>)
 8000ce2:	4a12      	ldr	r2, [pc, #72]	; (8000d2c <_sbrk+0x68>)
 8000ce4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ce6:	4b10      	ldr	r3, [pc, #64]	; (8000d28 <_sbrk+0x64>)
 8000ce8:	681a      	ldr	r2, [r3, #0]
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	4413      	add	r3, r2
 8000cee:	693a      	ldr	r2, [r7, #16]
 8000cf0:	429a      	cmp	r2, r3
 8000cf2:	d207      	bcs.n	8000d04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000cf4:	f001 fc16 	bl	8002524 <__errno>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	230c      	movs	r3, #12
 8000cfc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295
 8000d02:	e009      	b.n	8000d18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d04:	4b08      	ldr	r3, [pc, #32]	; (8000d28 <_sbrk+0x64>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d0a:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <_sbrk+0x64>)
 8000d0c:	681a      	ldr	r2, [r3, #0]
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	4413      	add	r3, r2
 8000d12:	4a05      	ldr	r2, [pc, #20]	; (8000d28 <_sbrk+0x64>)
 8000d14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d16:	68fb      	ldr	r3, [r7, #12]
}
 8000d18:	4618      	mov	r0, r3
 8000d1a:	3718      	adds	r7, #24
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}
 8000d20:	20018000 	.word	0x20018000
 8000d24:	00000400 	.word	0x00000400
 8000d28:	20000084 	.word	0x20000084
 8000d2c:	20000098 	.word	0x20000098

08000d30 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d34:	4b17      	ldr	r3, [pc, #92]	; (8000d94 <SystemInit+0x64>)
 8000d36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d3a:	4a16      	ldr	r2, [pc, #88]	; (8000d94 <SystemInit+0x64>)
 8000d3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d40:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000d44:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <SystemInit+0x68>)
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	4a13      	ldr	r2, [pc, #76]	; (8000d98 <SystemInit+0x68>)
 8000d4a:	f043 0301 	orr.w	r3, r3, #1
 8000d4e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000d50:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <SystemInit+0x68>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000d56:	4b10      	ldr	r3, [pc, #64]	; (8000d98 <SystemInit+0x68>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	4a0f      	ldr	r2, [pc, #60]	; (8000d98 <SystemInit+0x68>)
 8000d5c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000d60:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000d64:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <SystemInit+0x68>)
 8000d68:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000d6c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000d6e:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <SystemInit+0x68>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	4a09      	ldr	r2, [pc, #36]	; (8000d98 <SystemInit+0x68>)
 8000d74:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000d78:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8000d7a:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <SystemInit+0x68>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SystemInit+0x64>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	609a      	str	r2, [r3, #8]
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00
 8000d98:	40021000 	.word	0x40021000

08000d9c <LL_APB2_GRP1_EnableClock>:
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	b085      	sub	sp, #20
 8000da0:	af00      	add	r7, sp, #0
 8000da2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8000da4:	4b08      	ldr	r3, [pc, #32]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000da6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000da8:	4907      	ldr	r1, [pc, #28]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4313      	orrs	r3, r2
 8000dae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000db0:	4b05      	ldr	r3, [pc, #20]	; (8000dc8 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000db2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	4013      	ands	r3, r2
 8000db8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	bf00      	nop
 8000dbe:	3714      	adds	r7, #20
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc6:	4770      	bx	lr
 8000dc8:	40021000 	.word	0x40021000

08000dcc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	b083      	sub	sp, #12
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	601a      	str	r2, [r3, #0]
}
 8000de0:	bf00      	nop
 8000de2:	370c      	adds	r7, #12
 8000de4:	46bd      	mov	sp, r7
 8000de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dea:	4770      	bx	lr

08000dec <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
 8000df4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	689b      	ldr	r3, [r3, #8]
 8000dfa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8000dfe:	f023 0307 	bic.w	r3, r3, #7
 8000e02:	683a      	ldr	r2, [r7, #0]
 8000e04:	431a      	orrs	r2, r3
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	609a      	str	r2, [r3, #8]
}
 8000e0a:	bf00      	nop
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8000e16:	b480      	push	{r7}
 8000e18:	b083      	sub	sp, #12
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	431a      	orrs	r2, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	605a      	str	r2, [r3, #4]
}
 8000e30:	bf00      	nop
 8000e32:	370c      	adds	r7, #12
 8000e34:	46bd      	mov	sp, r7
 8000e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3a:	4770      	bx	lr

08000e3c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8000e3c:	b480      	push	{r7}
 8000e3e:	b083      	sub	sp, #12
 8000e40:	af00      	add	r7, sp, #0
 8000e42:	6078      	str	r0, [r7, #4]
 8000e44:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	431a      	orrs	r2, r3
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	605a      	str	r2, [r3, #4]
}
 8000e56:	bf00      	nop
 8000e58:	370c      	adds	r7, #12
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e60:	4770      	bx	lr

08000e62 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8000e62:	b480      	push	{r7}
 8000e64:	b083      	sub	sp, #12
 8000e66:	af00      	add	r7, sp, #0
 8000e68:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	689b      	ldr	r3, [r3, #8]
 8000e6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	609a      	str	r2, [r3, #8]
}
 8000e76:	bf00      	nop
 8000e78:	370c      	adds	r7, #12
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e80:	4770      	bx	lr
	...

08000e84 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b086      	sub	sp, #24
 8000e88:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8000e8a:	1d3b      	adds	r3, r7, #4
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]
 8000e96:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8000e98:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8000e9c:	f7ff ff7e 	bl	8000d9c <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 8000ea0:	233f      	movs	r3, #63	; 0x3f
 8000ea2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 115;
 8000ea8:	2373      	movs	r3, #115	; 0x73
 8000eaa:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 8000eb4:	1d3b      	adds	r3, r7, #4
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	480c      	ldr	r0, [pc, #48]	; (8000eec <MX_TIM1_Init+0x68>)
 8000eba:	f001 f97b 	bl	80021b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8000ebe:	480b      	ldr	r0, [pc, #44]	; (8000eec <MX_TIM1_Init+0x68>)
 8000ec0:	f7ff ff84 	bl	8000dcc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 8000ec4:	2100      	movs	r1, #0
 8000ec6:	4809      	ldr	r0, [pc, #36]	; (8000eec <MX_TIM1_Init+0x68>)
 8000ec8:	f7ff ff90 	bl	8000dec <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4807      	ldr	r0, [pc, #28]	; (8000eec <MX_TIM1_Init+0x68>)
 8000ed0:	f7ff ffa1 	bl	8000e16 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	4805      	ldr	r0, [pc, #20]	; (8000eec <MX_TIM1_Init+0x68>)
 8000ed8:	f7ff ffb0 	bl	8000e3c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8000edc:	4803      	ldr	r0, [pc, #12]	; (8000eec <MX_TIM1_Init+0x68>)
 8000ede:	f7ff ffc0 	bl	8000e62 <LL_TIM_DisableMasterSlaveMode>

}
 8000ee2:	bf00      	nop
 8000ee4:	3718      	adds	r7, #24
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
 8000eea:	bf00      	nop
 8000eec:	40012c00 	.word	0x40012c00

08000ef0 <LL_AHB2_GRP1_EnableClock>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b085      	sub	sp, #20
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000ef8:	4b08      	ldr	r3, [pc, #32]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000efa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000efc:	4907      	ldr	r1, [pc, #28]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000f04:	4b05      	ldr	r3, [pc, #20]	; (8000f1c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000f06:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	4013      	ands	r3, r2
 8000f0c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f0e:	68fb      	ldr	r3, [r7, #12]
}
 8000f10:	bf00      	nop
 8000f12:	3714      	adds	r7, #20
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr
 8000f1c:	40021000 	.word	0x40021000

08000f20 <LL_APB1_GRP1_EnableClock>:
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000f28:	4b08      	ldr	r3, [pc, #32]	; (8000f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f2a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f2c:	4907      	ldr	r1, [pc, #28]	; (8000f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	4313      	orrs	r3, r2
 8000f32:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000f34:	4b05      	ldr	r3, [pc, #20]	; (8000f4c <LL_APB1_GRP1_EnableClock+0x2c>)
 8000f36:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	4013      	ands	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000f3e:	68fb      	ldr	r3, [r7, #12]
}
 8000f40:	bf00      	nop
 8000f42:	3714      	adds	r7, #20
 8000f44:	46bd      	mov	sp, r7
 8000f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4a:	4770      	bx	lr
 8000f4c:	40021000 	.word	0x40021000

08000f50 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	f043 0201 	orr.w	r2, r3, #1
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	601a      	str	r2, [r3, #0]
}
 8000f64:	bf00      	nop
 8000f66:	370c      	adds	r7, #12
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6e:	4770      	bx	lr

08000f70 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b083      	sub	sp, #12
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	685b      	ldr	r3, [r3, #4]
 8000f7c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	689b      	ldr	r3, [r3, #8]
 8000f88:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	609a      	str	r2, [r3, #8]
}
 8000f90:	bf00      	nop
 8000f92:	370c      	adds	r7, #12
 8000f94:	46bd      	mov	sp, r7
 8000f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9a:	4770      	bx	lr

08000f9c <__io_putchar>:

/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
void __io_putchar(int ch){
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!READ_BIT(USART2->ISR, USART_ISR_TXE));
 8000fa4:	bf00      	nop
 8000fa6:	4b0b      	ldr	r3, [pc, #44]	; (8000fd4 <__io_putchar+0x38>)
 8000fa8:	69db      	ldr	r3, [r3, #28]
 8000faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d0f9      	beq.n	8000fa6 <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8000fb2:	4b08      	ldr	r3, [pc, #32]	; (8000fd4 <__io_putchar+0x38>)
 8000fb4:	687a      	ldr	r2, [r7, #4]
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!READ_BIT(USART2->ISR, USART_ISR_TC));
 8000fba:	bf00      	nop
 8000fbc:	4b05      	ldr	r3, [pc, #20]	; (8000fd4 <__io_putchar+0x38>)
 8000fbe:	69db      	ldr	r3, [r3, #28]
 8000fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d0f9      	beq.n	8000fbc <__io_putchar+0x20>
#endif
}
 8000fc8:	bf00      	nop
 8000fca:	370c      	adds	r7, #12
 8000fcc:	46bd      	mov	sp, r7
 8000fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd2:	4770      	bx	lr
 8000fd4:	40004400 	.word	0x40004400

08000fd8 <__io_getchar>:

void __io_getchar(void){
 8000fd8:	b480      	push	{r7}
 8000fda:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
	...

08000fe8 <startupPrint>:

void startupPrint(void){
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	af00      	add	r7, sp, #0
	printf("\r\n");
 8000fec:	480b      	ldr	r0, [pc, #44]	; (800101c <startupPrint+0x34>)
 8000fee:	f001 fb3f 	bl	8002670 <puts>
	printf("+==============================================================+\r\n");
 8000ff2:	480b      	ldr	r0, [pc, #44]	; (8001020 <startupPrint+0x38>)
 8000ff4:	f001 fb3c 	bl	8002670 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8000ff8:	490a      	ldr	r1, [pc, #40]	; (8001024 <startupPrint+0x3c>)
 8000ffa:	480b      	ldr	r0, [pc, #44]	; (8001028 <startupPrint+0x40>)
 8000ffc:	f001 fac4 	bl	8002588 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8001000:	480a      	ldr	r0, [pc, #40]	; (800102c <startupPrint+0x44>)
 8001002:	f001 fb35 	bl	8002670 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8001006:	4b0a      	ldr	r3, [pc, #40]	; (8001030 <startupPrint+0x48>)
 8001008:	4a0a      	ldr	r2, [pc, #40]	; (8001034 <startupPrint+0x4c>)
 800100a:	490b      	ldr	r1, [pc, #44]	; (8001038 <startupPrint+0x50>)
 800100c:	480b      	ldr	r0, [pc, #44]	; (800103c <startupPrint+0x54>)
 800100e:	f001 fabb 	bl	8002588 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8001012:	480b      	ldr	r0, [pc, #44]	; (8001040 <startupPrint+0x58>)
 8001014:	f001 fb2c 	bl	8002670 <puts>
}
 8001018:	bf00      	nop
 800101a:	bd80      	pop	{r7, pc}
 800101c:	08003430 	.word	0x08003430
 8001020:	08003434 	.word	0x08003434
 8001024:	08003478 	.word	0x08003478
 8001028:	080034a0 	.word	0x080034a0
 800102c:	080034ac 	.word	0x080034ac
 8001030:	080034f0 	.word	0x080034f0
 8001034:	080034f4 	.word	0x080034f4
 8001038:	08003500 	.word	0x08003500
 800103c:	08003514 	.word	0x08003514
 8001040:	08003540 	.word	0x08003540

08001044 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001044:	b580      	push	{r7, lr}
 8001046:	b08e      	sub	sp, #56	; 0x38
 8001048:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800104a:	f107 031c 	add.w	r3, r7, #28
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
 8001052:	605a      	str	r2, [r3, #4]
 8001054:	609a      	str	r2, [r3, #8]
 8001056:	60da      	str	r2, [r3, #12]
 8001058:	611a      	str	r2, [r3, #16]
 800105a:	615a      	str	r2, [r3, #20]
 800105c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800105e:	1d3b      	adds	r3, r7, #4
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
 8001066:	609a      	str	r2, [r3, #8]
 8001068:	60da      	str	r2, [r3, #12]
 800106a:	611a      	str	r2, [r3, #16]
 800106c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800106e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001072:	f7ff ff55 	bl	8000f20 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001076:	2001      	movs	r0, #1
 8001078:	f7ff ff3a 	bl	8000ef0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800107c:	230c      	movs	r3, #12
 800107e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001080:	2302      	movs	r3, #2
 8001082:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001084:	2303      	movs	r3, #3
 8001086:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800108c:	2300      	movs	r3, #0
 800108e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001090:	2307      	movs	r3, #7
 8001092:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001094:	1d3b      	adds	r3, r7, #4
 8001096:	4619      	mov	r1, r3
 8001098:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109c:	f000 fbb3 	bl	8001806 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80010a0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80010a4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80010a6:	2300      	movs	r3, #0
 80010a8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80010aa:	2300      	movs	r3, #0
 80010ac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80010ae:	2300      	movs	r3, #0
 80010b0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80010b2:	230c      	movs	r3, #12
 80010b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80010b6:	2300      	movs	r3, #0
 80010b8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80010ba:	2300      	movs	r3, #0
 80010bc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80010be:	f107 031c 	add.w	r3, r7, #28
 80010c2:	4619      	mov	r1, r3
 80010c4:	4806      	ldr	r0, [pc, #24]	; (80010e0 <MX_USART2_UART_Init+0x9c>)
 80010c6:	f001 f979 	bl	80023bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80010ca:	4805      	ldr	r0, [pc, #20]	; (80010e0 <MX_USART2_UART_Init+0x9c>)
 80010cc:	f7ff ff50 	bl	8000f70 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80010d0:	4803      	ldr	r0, [pc, #12]	; (80010e0 <MX_USART2_UART_Init+0x9c>)
 80010d2:	f7ff ff3d 	bl	8000f50 <LL_USART_Enable>

}
 80010d6:	bf00      	nop
 80010d8:	3738      	adds	r7, #56	; 0x38
 80010da:	46bd      	mov	sp, r7
 80010dc:	bd80      	pop	{r7, pc}
 80010de:	bf00      	nop
 80010e0:	40004400 	.word	0x40004400

080010e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800111c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010e8:	f7ff fe22 	bl	8000d30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80010ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80010ee:	e003      	b.n	80010f8 <LoopCopyDataInit>

080010f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80010f0:	4b0b      	ldr	r3, [pc, #44]	; (8001120 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80010f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80010f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80010f6:	3104      	adds	r1, #4

080010f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80010f8:	480a      	ldr	r0, [pc, #40]	; (8001124 <LoopForever+0xa>)
	ldr	r3, =_edata
 80010fa:	4b0b      	ldr	r3, [pc, #44]	; (8001128 <LoopForever+0xe>)
	adds	r2, r0, r1
 80010fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80010fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001100:	d3f6      	bcc.n	80010f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001104:	e002      	b.n	800110c <LoopFillZerobss>

08001106 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001106:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001108:	f842 3b04 	str.w	r3, [r2], #4

0800110c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800110c:	4b08      	ldr	r3, [pc, #32]	; (8001130 <LoopForever+0x16>)
	cmp	r2, r3
 800110e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001110:	d3f9      	bcc.n	8001106 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001112:	f001 fa0d 	bl	8002530 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001116:	f7ff fc0f 	bl	8000938 <main>

0800111a <LoopForever>:

LoopForever:
    b LoopForever
 800111a:	e7fe      	b.n	800111a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800111c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001120:	0800366c 	.word	0x0800366c
	ldr	r0, =_sdata
 8001124:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001128:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800112c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001130:	20000094 	.word	0x20000094

08001134 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001134:	e7fe      	b.n	8001134 <ADC1_2_IRQHandler>
	...

08001138 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <LL_EXTI_EnableIT_0_31+0x20>)
 8001142:	681a      	ldr	r2, [r3, #0]
 8001144:	4904      	ldr	r1, [pc, #16]	; (8001158 <LL_EXTI_EnableIT_0_31+0x20>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4313      	orrs	r3, r2
 800114a:	600b      	str	r3, [r1, #0]
}
 800114c:	bf00      	nop
 800114e:	370c      	adds	r7, #12
 8001150:	46bd      	mov	sp, r7
 8001152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001156:	4770      	bx	lr
 8001158:	40010400 	.word	0x40010400

0800115c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800115c:	b480      	push	{r7}
 800115e:	b083      	sub	sp, #12
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001164:	4b05      	ldr	r3, [pc, #20]	; (800117c <LL_EXTI_EnableIT_32_63+0x20>)
 8001166:	6a1a      	ldr	r2, [r3, #32]
 8001168:	4904      	ldr	r1, [pc, #16]	; (800117c <LL_EXTI_EnableIT_32_63+0x20>)
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	4313      	orrs	r3, r2
 800116e:	620b      	str	r3, [r1, #32]
}
 8001170:	bf00      	nop
 8001172:	370c      	adds	r7, #12
 8001174:	46bd      	mov	sp, r7
 8001176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117a:	4770      	bx	lr
 800117c:	40010400 	.word	0x40010400

08001180 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001180:	b480      	push	{r7}
 8001182:	b083      	sub	sp, #12
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001188:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800118a:	681a      	ldr	r2, [r3, #0]
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	43db      	mvns	r3, r3
 8001190:	4904      	ldr	r1, [pc, #16]	; (80011a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8001192:	4013      	ands	r3, r2
 8001194:	600b      	str	r3, [r1, #0]
}
 8001196:	bf00      	nop
 8001198:	370c      	adds	r7, #12
 800119a:	46bd      	mov	sp, r7
 800119c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a0:	4770      	bx	lr
 80011a2:	bf00      	nop
 80011a4:	40010400 	.word	0x40010400

080011a8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b083      	sub	sp, #12
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80011b0:	4b06      	ldr	r3, [pc, #24]	; (80011cc <LL_EXTI_DisableIT_32_63+0x24>)
 80011b2:	6a1a      	ldr	r2, [r3, #32]
 80011b4:	687b      	ldr	r3, [r7, #4]
 80011b6:	43db      	mvns	r3, r3
 80011b8:	4904      	ldr	r1, [pc, #16]	; (80011cc <LL_EXTI_DisableIT_32_63+0x24>)
 80011ba:	4013      	ands	r3, r2
 80011bc:	620b      	str	r3, [r1, #32]
}
 80011be:	bf00      	nop
 80011c0:	370c      	adds	r7, #12
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	40010400 	.word	0x40010400

080011d0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80011d0:	b480      	push	{r7}
 80011d2:	b083      	sub	sp, #12
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80011d8:	4b05      	ldr	r3, [pc, #20]	; (80011f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80011da:	685a      	ldr	r2, [r3, #4]
 80011dc:	4904      	ldr	r1, [pc, #16]	; (80011f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	604b      	str	r3, [r1, #4]

}
 80011e4:	bf00      	nop
 80011e6:	370c      	adds	r7, #12
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr
 80011f0:	40010400 	.word	0x40010400

080011f4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80011fc:	4b05      	ldr	r3, [pc, #20]	; (8001214 <LL_EXTI_EnableEvent_32_63+0x20>)
 80011fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001200:	4904      	ldr	r1, [pc, #16]	; (8001214 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4313      	orrs	r3, r2
 8001206:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001208:	bf00      	nop
 800120a:	370c      	adds	r7, #12
 800120c:	46bd      	mov	sp, r7
 800120e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001212:	4770      	bx	lr
 8001214:	40010400 	.word	0x40010400

08001218 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001218:	b480      	push	{r7}
 800121a:	b083      	sub	sp, #12
 800121c:	af00      	add	r7, sp, #0
 800121e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001220:	4b06      	ldr	r3, [pc, #24]	; (800123c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001222:	685a      	ldr	r2, [r3, #4]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	43db      	mvns	r3, r3
 8001228:	4904      	ldr	r1, [pc, #16]	; (800123c <LL_EXTI_DisableEvent_0_31+0x24>)
 800122a:	4013      	ands	r3, r2
 800122c:	604b      	str	r3, [r1, #4]
}
 800122e:	bf00      	nop
 8001230:	370c      	adds	r7, #12
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr
 800123a:	bf00      	nop
 800123c:	40010400 	.word	0x40010400

08001240 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001240:	b480      	push	{r7}
 8001242:	b083      	sub	sp, #12
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001248:	4b06      	ldr	r3, [pc, #24]	; (8001264 <LL_EXTI_DisableEvent_32_63+0x24>)
 800124a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	43db      	mvns	r3, r3
 8001250:	4904      	ldr	r1, [pc, #16]	; (8001264 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001252:	4013      	ands	r3, r2
 8001254:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001256:	bf00      	nop
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	40010400 	.word	0x40010400

08001268 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001270:	4b05      	ldr	r3, [pc, #20]	; (8001288 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001272:	689a      	ldr	r2, [r3, #8]
 8001274:	4904      	ldr	r1, [pc, #16]	; (8001288 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	4313      	orrs	r3, r2
 800127a:	608b      	str	r3, [r1, #8]

}
 800127c:	bf00      	nop
 800127e:	370c      	adds	r7, #12
 8001280:	46bd      	mov	sp, r7
 8001282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001286:	4770      	bx	lr
 8001288:	40010400 	.word	0x40010400

0800128c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800128c:	b480      	push	{r7}
 800128e:	b083      	sub	sp, #12
 8001290:	af00      	add	r7, sp, #0
 8001292:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001294:	4b05      	ldr	r3, [pc, #20]	; (80012ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001296:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001298:	4904      	ldr	r1, [pc, #16]	; (80012ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	4313      	orrs	r3, r2
 800129e:	628b      	str	r3, [r1, #40]	; 0x28
}
 80012a0:	bf00      	nop
 80012a2:	370c      	adds	r7, #12
 80012a4:	46bd      	mov	sp, r7
 80012a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012aa:	4770      	bx	lr
 80012ac:	40010400 	.word	0x40010400

080012b0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b083      	sub	sp, #12
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80012b8:	4b06      	ldr	r3, [pc, #24]	; (80012d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80012ba:	689a      	ldr	r2, [r3, #8]
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	43db      	mvns	r3, r3
 80012c0:	4904      	ldr	r1, [pc, #16]	; (80012d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80012c2:	4013      	ands	r3, r2
 80012c4:	608b      	str	r3, [r1, #8]

}
 80012c6:	bf00      	nop
 80012c8:	370c      	adds	r7, #12
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr
 80012d2:	bf00      	nop
 80012d4:	40010400 	.word	0x40010400

080012d8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80012e0:	4b06      	ldr	r3, [pc, #24]	; (80012fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80012e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	43db      	mvns	r3, r3
 80012e8:	4904      	ldr	r1, [pc, #16]	; (80012fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80012ea:	4013      	ands	r3, r2
 80012ec:	628b      	str	r3, [r1, #40]	; 0x28
}
 80012ee:	bf00      	nop
 80012f0:	370c      	adds	r7, #12
 80012f2:	46bd      	mov	sp, r7
 80012f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f8:	4770      	bx	lr
 80012fa:	bf00      	nop
 80012fc:	40010400 	.word	0x40010400

08001300 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001300:	b480      	push	{r7}
 8001302:	b083      	sub	sp, #12
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001308:	4b05      	ldr	r3, [pc, #20]	; (8001320 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800130a:	68da      	ldr	r2, [r3, #12]
 800130c:	4904      	ldr	r1, [pc, #16]	; (8001320 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	4313      	orrs	r3, r2
 8001312:	60cb      	str	r3, [r1, #12]
}
 8001314:	bf00      	nop
 8001316:	370c      	adds	r7, #12
 8001318:	46bd      	mov	sp, r7
 800131a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131e:	4770      	bx	lr
 8001320:	40010400 	.word	0x40010400

08001324 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800132c:	4b05      	ldr	r3, [pc, #20]	; (8001344 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800132e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001330:	4904      	ldr	r1, [pc, #16]	; (8001344 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4313      	orrs	r3, r2
 8001336:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001338:	bf00      	nop
 800133a:	370c      	adds	r7, #12
 800133c:	46bd      	mov	sp, r7
 800133e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001342:	4770      	bx	lr
 8001344:	40010400 	.word	0x40010400

08001348 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001348:	b480      	push	{r7}
 800134a:	b083      	sub	sp, #12
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001350:	4b06      	ldr	r3, [pc, #24]	; (800136c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001352:	68da      	ldr	r2, [r3, #12]
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	43db      	mvns	r3, r3
 8001358:	4904      	ldr	r1, [pc, #16]	; (800136c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800135a:	4013      	ands	r3, r2
 800135c:	60cb      	str	r3, [r1, #12]
}
 800135e:	bf00      	nop
 8001360:	370c      	adds	r7, #12
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr
 800136a:	bf00      	nop
 800136c:	40010400 	.word	0x40010400

08001370 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001378:	4b06      	ldr	r3, [pc, #24]	; (8001394 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800137a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	43db      	mvns	r3, r3
 8001380:	4904      	ldr	r1, [pc, #16]	; (8001394 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001382:	4013      	ands	r3, r2
 8001384:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001386:	bf00      	nop
 8001388:	370c      	adds	r7, #12
 800138a:	46bd      	mov	sp, r7
 800138c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001390:	4770      	bx	lr
 8001392:	bf00      	nop
 8001394:	40010400 	.word	0x40010400

08001398 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b084      	sub	sp, #16
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80013a0:	2300      	movs	r3, #0
 80013a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	7a1b      	ldrb	r3, [r3, #8]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	f000 80c6 	beq.w	800153a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d05d      	beq.n	8001472 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	7a5b      	ldrb	r3, [r3, #9]
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d00e      	beq.n	80013dc <LL_EXTI_Init+0x44>
 80013be:	2b02      	cmp	r3, #2
 80013c0:	d017      	beq.n	80013f2 <LL_EXTI_Init+0x5a>
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d120      	bne.n	8001408 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4618      	mov	r0, r3
 80013cc:	f7ff ff24 	bl	8001218 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681b      	ldr	r3, [r3, #0]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f7ff feaf 	bl	8001138 <LL_EXTI_EnableIT_0_31>
          break;
 80013da:	e018      	b.n	800140e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	4618      	mov	r0, r3
 80013e2:	f7ff fecd 	bl	8001180 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fef0 	bl	80011d0 <LL_EXTI_EnableEvent_0_31>
          break;
 80013f0:	e00d      	b.n	800140e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff fe9e 	bl	8001138 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4618      	mov	r0, r3
 8001402:	f7ff fee5 	bl	80011d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001406:	e002      	b.n	800140e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001408:	2301      	movs	r3, #1
 800140a:	60fb      	str	r3, [r7, #12]
          break;
 800140c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	7a9b      	ldrb	r3, [r3, #10]
 8001412:	2b00      	cmp	r3, #0
 8001414:	d02d      	beq.n	8001472 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	7a9b      	ldrb	r3, [r3, #10]
 800141a:	2b02      	cmp	r3, #2
 800141c:	d00e      	beq.n	800143c <LL_EXTI_Init+0xa4>
 800141e:	2b03      	cmp	r3, #3
 8001420:	d017      	beq.n	8001452 <LL_EXTI_Init+0xba>
 8001422:	2b01      	cmp	r3, #1
 8001424:	d120      	bne.n	8001468 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	681b      	ldr	r3, [r3, #0]
 800142a:	4618      	mov	r0, r3
 800142c:	f7ff ff8c 	bl	8001348 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4618      	mov	r0, r3
 8001436:	f7ff ff17 	bl	8001268 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800143a:	e01b      	b.n	8001474 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	4618      	mov	r0, r3
 8001442:	f7ff ff35 	bl	80012b0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	4618      	mov	r0, r3
 800144c:	f7ff ff58 	bl	8001300 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001450:	e010      	b.n	8001474 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4618      	mov	r0, r3
 8001458:	f7ff ff06 	bl	8001268 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4618      	mov	r0, r3
 8001462:	f7ff ff4d 	bl	8001300 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001466:	e005      	b.n	8001474 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f043 0302 	orr.w	r3, r3, #2
 800146e:	60fb      	str	r3, [r7, #12]
            break;
 8001470:	e000      	b.n	8001474 <LL_EXTI_Init+0xdc>
        }
      }
 8001472:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d073      	beq.n	8001564 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	7a5b      	ldrb	r3, [r3, #9]
 8001480:	2b01      	cmp	r3, #1
 8001482:	d00e      	beq.n	80014a2 <LL_EXTI_Init+0x10a>
 8001484:	2b02      	cmp	r3, #2
 8001486:	d017      	beq.n	80014b8 <LL_EXTI_Init+0x120>
 8001488:	2b00      	cmp	r3, #0
 800148a:	d120      	bne.n	80014ce <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff fed5 	bl	8001240 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	685b      	ldr	r3, [r3, #4]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fe5e 	bl	800115c <LL_EXTI_EnableIT_32_63>
          break;
 80014a0:	e01a      	b.n	80014d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	685b      	ldr	r3, [r3, #4]
 80014a6:	4618      	mov	r0, r3
 80014a8:	f7ff fe7e 	bl	80011a8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	4618      	mov	r0, r3
 80014b2:	f7ff fe9f 	bl	80011f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80014b6:	e00f      	b.n	80014d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe4d 	bl	800115c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	685b      	ldr	r3, [r3, #4]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fe94 	bl	80011f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80014cc:	e004      	b.n	80014d8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80014ce:	68fb      	ldr	r3, [r7, #12]
 80014d0:	f043 0304 	orr.w	r3, r3, #4
 80014d4:	60fb      	str	r3, [r7, #12]
          break;
 80014d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	7a9b      	ldrb	r3, [r3, #10]
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d041      	beq.n	8001564 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	7a9b      	ldrb	r3, [r3, #10]
 80014e4:	2b02      	cmp	r3, #2
 80014e6:	d00e      	beq.n	8001506 <LL_EXTI_Init+0x16e>
 80014e8:	2b03      	cmp	r3, #3
 80014ea:	d017      	beq.n	800151c <LL_EXTI_Init+0x184>
 80014ec:	2b01      	cmp	r3, #1
 80014ee:	d120      	bne.n	8001532 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	685b      	ldr	r3, [r3, #4]
 80014f4:	4618      	mov	r0, r3
 80014f6:	f7ff ff3b 	bl	8001370 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	4618      	mov	r0, r3
 8001500:	f7ff fec4 	bl	800128c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001504:	e02f      	b.n	8001566 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	685b      	ldr	r3, [r3, #4]
 800150a:	4618      	mov	r0, r3
 800150c:	f7ff fee4 	bl	80012d8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	685b      	ldr	r3, [r3, #4]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff05 	bl	8001324 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800151a:	e024      	b.n	8001566 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	685b      	ldr	r3, [r3, #4]
 8001520:	4618      	mov	r0, r3
 8001522:	f7ff feb3 	bl	800128c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	685b      	ldr	r3, [r3, #4]
 800152a:	4618      	mov	r0, r3
 800152c:	f7ff fefa 	bl	8001324 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001530:	e019      	b.n	8001566 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8001532:	2301      	movs	r3, #1
 8001534:	60fb      	str	r3, [r7, #12]
            break;
 8001536:	bf00      	nop
 8001538:	e015      	b.n	8001566 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4618      	mov	r0, r3
 8001540:	f7ff fe1e 	bl	8001180 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff fe65 	bl	8001218 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe28 	bl	80011a8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff fe6f 	bl	8001240 <LL_EXTI_DisableEvent_32_63>
 8001562:	e000      	b.n	8001566 <LL_EXTI_Init+0x1ce>
      }
 8001564:	bf00      	nop
  }

  return status;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3710      	adds	r7, #16
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}

08001570 <LL_GPIO_SetPinMode>:
{
 8001570:	b480      	push	{r7}
 8001572:	b08b      	sub	sp, #44	; 0x2c
 8001574:	af00      	add	r7, sp, #0
 8001576:	60f8      	str	r0, [r7, #12]
 8001578:	60b9      	str	r1, [r7, #8]
 800157a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	68bb      	ldr	r3, [r7, #8]
 8001582:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	fa93 f3a3 	rbit	r3, r3
 800158a:	613b      	str	r3, [r7, #16]
  return result;
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001590:	69bb      	ldr	r3, [r7, #24]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d101      	bne.n	800159a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001596:	2320      	movs	r3, #32
 8001598:	e003      	b.n	80015a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	fab3 f383 	clz	r3, r3
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	2103      	movs	r1, #3
 80015a6:	fa01 f303 	lsl.w	r3, r1, r3
 80015aa:	43db      	mvns	r3, r3
 80015ac:	401a      	ands	r2, r3
 80015ae:	68bb      	ldr	r3, [r7, #8]
 80015b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015b2:	6a3b      	ldr	r3, [r7, #32]
 80015b4:	fa93 f3a3 	rbit	r3, r3
 80015b8:	61fb      	str	r3, [r7, #28]
  return result;
 80015ba:	69fb      	ldr	r3, [r7, #28]
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80015be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d101      	bne.n	80015c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80015c4:	2320      	movs	r3, #32
 80015c6:	e003      	b.n	80015d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80015c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80015ca:	fab3 f383 	clz	r3, r3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	005b      	lsls	r3, r3, #1
 80015d2:	6879      	ldr	r1, [r7, #4]
 80015d4:	fa01 f303 	lsl.w	r3, r1, r3
 80015d8:	431a      	orrs	r2, r3
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	601a      	str	r2, [r3, #0]
}
 80015de:	bf00      	nop
 80015e0:	372c      	adds	r7, #44	; 0x2c
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr

080015ea <LL_GPIO_SetPinOutputType>:
{
 80015ea:	b480      	push	{r7}
 80015ec:	b085      	sub	sp, #20
 80015ee:	af00      	add	r7, sp, #0
 80015f0:	60f8      	str	r0, [r7, #12]
 80015f2:	60b9      	str	r1, [r7, #8]
 80015f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	685a      	ldr	r2, [r3, #4]
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	43db      	mvns	r3, r3
 80015fe:	401a      	ands	r2, r3
 8001600:	68bb      	ldr	r3, [r7, #8]
 8001602:	6879      	ldr	r1, [r7, #4]
 8001604:	fb01 f303 	mul.w	r3, r1, r3
 8001608:	431a      	orrs	r2, r3
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	605a      	str	r2, [r3, #4]
}
 800160e:	bf00      	nop
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr

0800161a <LL_GPIO_SetPinSpeed>:
{
 800161a:	b480      	push	{r7}
 800161c:	b08b      	sub	sp, #44	; 0x2c
 800161e:	af00      	add	r7, sp, #0
 8001620:	60f8      	str	r0, [r7, #12]
 8001622:	60b9      	str	r1, [r7, #8]
 8001624:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	689a      	ldr	r2, [r3, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
 800162c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	fa93 f3a3 	rbit	r3, r3
 8001634:	613b      	str	r3, [r7, #16]
  return result;
 8001636:	693b      	ldr	r3, [r7, #16]
 8001638:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800163a:	69bb      	ldr	r3, [r7, #24]
 800163c:	2b00      	cmp	r3, #0
 800163e:	d101      	bne.n	8001644 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001640:	2320      	movs	r3, #32
 8001642:	e003      	b.n	800164c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001644:	69bb      	ldr	r3, [r7, #24]
 8001646:	fab3 f383 	clz	r3, r3
 800164a:	b2db      	uxtb	r3, r3
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	2103      	movs	r1, #3
 8001650:	fa01 f303 	lsl.w	r3, r1, r3
 8001654:	43db      	mvns	r3, r3
 8001656:	401a      	ands	r2, r3
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800165c:	6a3b      	ldr	r3, [r7, #32]
 800165e:	fa93 f3a3 	rbit	r3, r3
 8001662:	61fb      	str	r3, [r7, #28]
  return result;
 8001664:	69fb      	ldr	r3, [r7, #28]
 8001666:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001668:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800166a:	2b00      	cmp	r3, #0
 800166c:	d101      	bne.n	8001672 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800166e:	2320      	movs	r3, #32
 8001670:	e003      	b.n	800167a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001674:	fab3 f383 	clz	r3, r3
 8001678:	b2db      	uxtb	r3, r3
 800167a:	005b      	lsls	r3, r3, #1
 800167c:	6879      	ldr	r1, [r7, #4]
 800167e:	fa01 f303 	lsl.w	r3, r1, r3
 8001682:	431a      	orrs	r2, r3
 8001684:	68fb      	ldr	r3, [r7, #12]
 8001686:	609a      	str	r2, [r3, #8]
}
 8001688:	bf00      	nop
 800168a:	372c      	adds	r7, #44	; 0x2c
 800168c:	46bd      	mov	sp, r7
 800168e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001692:	4770      	bx	lr

08001694 <LL_GPIO_SetPinPull>:
{
 8001694:	b480      	push	{r7}
 8001696:	b08b      	sub	sp, #44	; 0x2c
 8001698:	af00      	add	r7, sp, #0
 800169a:	60f8      	str	r0, [r7, #12]
 800169c:	60b9      	str	r1, [r7, #8]
 800169e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	68da      	ldr	r2, [r3, #12]
 80016a4:	68bb      	ldr	r3, [r7, #8]
 80016a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	fa93 f3a3 	rbit	r3, r3
 80016ae:	613b      	str	r3, [r7, #16]
  return result;
 80016b0:	693b      	ldr	r3, [r7, #16]
 80016b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016b4:	69bb      	ldr	r3, [r7, #24]
 80016b6:	2b00      	cmp	r3, #0
 80016b8:	d101      	bne.n	80016be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80016ba:	2320      	movs	r3, #32
 80016bc:	e003      	b.n	80016c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80016be:	69bb      	ldr	r3, [r7, #24]
 80016c0:	fab3 f383 	clz	r3, r3
 80016c4:	b2db      	uxtb	r3, r3
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	2103      	movs	r1, #3
 80016ca:	fa01 f303 	lsl.w	r3, r1, r3
 80016ce:	43db      	mvns	r3, r3
 80016d0:	401a      	ands	r2, r3
 80016d2:	68bb      	ldr	r3, [r7, #8]
 80016d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016d6:	6a3b      	ldr	r3, [r7, #32]
 80016d8:	fa93 f3a3 	rbit	r3, r3
 80016dc:	61fb      	str	r3, [r7, #28]
  return result;
 80016de:	69fb      	ldr	r3, [r7, #28]
 80016e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d101      	bne.n	80016ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016e8:	2320      	movs	r3, #32
 80016ea:	e003      	b.n	80016f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80016ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016ee:	fab3 f383 	clz	r3, r3
 80016f2:	b2db      	uxtb	r3, r3
 80016f4:	005b      	lsls	r3, r3, #1
 80016f6:	6879      	ldr	r1, [r7, #4]
 80016f8:	fa01 f303 	lsl.w	r3, r1, r3
 80016fc:	431a      	orrs	r2, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	60da      	str	r2, [r3, #12]
}
 8001702:	bf00      	nop
 8001704:	372c      	adds	r7, #44	; 0x2c
 8001706:	46bd      	mov	sp, r7
 8001708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170c:	4770      	bx	lr

0800170e <LL_GPIO_SetAFPin_0_7>:
{
 800170e:	b480      	push	{r7}
 8001710:	b08b      	sub	sp, #44	; 0x2c
 8001712:	af00      	add	r7, sp, #0
 8001714:	60f8      	str	r0, [r7, #12]
 8001716:	60b9      	str	r1, [r7, #8]
 8001718:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	6a1a      	ldr	r2, [r3, #32]
 800171e:	68bb      	ldr	r3, [r7, #8]
 8001720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001722:	697b      	ldr	r3, [r7, #20]
 8001724:	fa93 f3a3 	rbit	r3, r3
 8001728:	613b      	str	r3, [r7, #16]
  return result;
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800172e:	69bb      	ldr	r3, [r7, #24]
 8001730:	2b00      	cmp	r3, #0
 8001732:	d101      	bne.n	8001738 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001734:	2320      	movs	r3, #32
 8001736:	e003      	b.n	8001740 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001738:	69bb      	ldr	r3, [r7, #24]
 800173a:	fab3 f383 	clz	r3, r3
 800173e:	b2db      	uxtb	r3, r3
 8001740:	009b      	lsls	r3, r3, #2
 8001742:	210f      	movs	r1, #15
 8001744:	fa01 f303 	lsl.w	r3, r1, r3
 8001748:	43db      	mvns	r3, r3
 800174a:	401a      	ands	r2, r3
 800174c:	68bb      	ldr	r3, [r7, #8]
 800174e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001750:	6a3b      	ldr	r3, [r7, #32]
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	61fb      	str	r3, [r7, #28]
  return result;
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800175c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800175e:	2b00      	cmp	r3, #0
 8001760:	d101      	bne.n	8001766 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001762:	2320      	movs	r3, #32
 8001764:	e003      	b.n	800176e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001768:	fab3 f383 	clz	r3, r3
 800176c:	b2db      	uxtb	r3, r3
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	6879      	ldr	r1, [r7, #4]
 8001772:	fa01 f303 	lsl.w	r3, r1, r3
 8001776:	431a      	orrs	r2, r3
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	621a      	str	r2, [r3, #32]
}
 800177c:	bf00      	nop
 800177e:	372c      	adds	r7, #44	; 0x2c
 8001780:	46bd      	mov	sp, r7
 8001782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001786:	4770      	bx	lr

08001788 <LL_GPIO_SetAFPin_8_15>:
{
 8001788:	b480      	push	{r7}
 800178a:	b08b      	sub	sp, #44	; 0x2c
 800178c:	af00      	add	r7, sp, #0
 800178e:	60f8      	str	r0, [r7, #12]
 8001790:	60b9      	str	r1, [r7, #8]
 8001792:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	0a1b      	lsrs	r3, r3, #8
 800179c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	fa93 f3a3 	rbit	r3, r3
 80017a4:	613b      	str	r3, [r7, #16]
  return result;
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80017aa:	69bb      	ldr	r3, [r7, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 80017b0:	2320      	movs	r3, #32
 80017b2:	e003      	b.n	80017bc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 80017b4:	69bb      	ldr	r3, [r7, #24]
 80017b6:	fab3 f383 	clz	r3, r3
 80017ba:	b2db      	uxtb	r3, r3
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	210f      	movs	r1, #15
 80017c0:	fa01 f303 	lsl.w	r3, r1, r3
 80017c4:	43db      	mvns	r3, r3
 80017c6:	401a      	ands	r2, r3
 80017c8:	68bb      	ldr	r3, [r7, #8]
 80017ca:	0a1b      	lsrs	r3, r3, #8
 80017cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	6a3b      	ldr	r3, [r7, #32]
 80017d0:	fa93 f3a3 	rbit	r3, r3
 80017d4:	61fb      	str	r3, [r7, #28]
  return result;
 80017d6:	69fb      	ldr	r3, [r7, #28]
 80017d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80017e0:	2320      	movs	r3, #32
 80017e2:	e003      	b.n	80017ec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80017e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017e6:	fab3 f383 	clz	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	009b      	lsls	r3, r3, #2
 80017ee:	6879      	ldr	r1, [r7, #4]
 80017f0:	fa01 f303 	lsl.w	r3, r1, r3
 80017f4:	431a      	orrs	r2, r3
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	625a      	str	r2, [r3, #36]	; 0x24
}
 80017fa:	bf00      	nop
 80017fc:	372c      	adds	r7, #44	; 0x2c
 80017fe:	46bd      	mov	sp, r7
 8001800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001804:	4770      	bx	lr

08001806 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b088      	sub	sp, #32
 800180a:	af00      	add	r7, sp, #0
 800180c:	6078      	str	r0, [r7, #4]
 800180e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001810:	683b      	ldr	r3, [r7, #0]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001816:	693b      	ldr	r3, [r7, #16]
 8001818:	fa93 f3a3 	rbit	r3, r3
 800181c:	60fb      	str	r3, [r7, #12]
  return result;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	2b00      	cmp	r3, #0
 8001826:	d101      	bne.n	800182c <LL_GPIO_Init+0x26>
    return 32U;
 8001828:	2320      	movs	r3, #32
 800182a:	e003      	b.n	8001834 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	fab3 f383 	clz	r3, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001836:	e040      	b.n	80018ba <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	2101      	movs	r1, #1
 800183e:	69fb      	ldr	r3, [r7, #28]
 8001840:	fa01 f303 	lsl.w	r3, r1, r3
 8001844:	4013      	ands	r3, r2
 8001846:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001848:	69bb      	ldr	r3, [r7, #24]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d032      	beq.n	80018b4 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 800184e:	683b      	ldr	r3, [r7, #0]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	461a      	mov	r2, r3
 8001854:	69b9      	ldr	r1, [r7, #24]
 8001856:	6878      	ldr	r0, [r7, #4]
 8001858:	f7ff fe8a 	bl	8001570 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 800185c:	683b      	ldr	r3, [r7, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	2b01      	cmp	r3, #1
 8001862:	d003      	beq.n	800186c <LL_GPIO_Init+0x66>
 8001864:	683b      	ldr	r3, [r7, #0]
 8001866:	685b      	ldr	r3, [r3, #4]
 8001868:	2b02      	cmp	r3, #2
 800186a:	d106      	bne.n	800187a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 800186c:	683b      	ldr	r3, [r7, #0]
 800186e:	689b      	ldr	r3, [r3, #8]
 8001870:	461a      	mov	r2, r3
 8001872:	69b9      	ldr	r1, [r7, #24]
 8001874:	6878      	ldr	r0, [r7, #4]
 8001876:	f7ff fed0 	bl	800161a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 800187a:	683b      	ldr	r3, [r7, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	461a      	mov	r2, r3
 8001880:	69b9      	ldr	r1, [r7, #24]
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	f7ff ff06 	bl	8001694 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001888:	683b      	ldr	r3, [r7, #0]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b02      	cmp	r3, #2
 800188e:	d111      	bne.n	80018b4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2bff      	cmp	r3, #255	; 0xff
 8001894:	d807      	bhi.n	80018a6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	695b      	ldr	r3, [r3, #20]
 800189a:	461a      	mov	r2, r3
 800189c:	69b9      	ldr	r1, [r7, #24]
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7ff ff35 	bl	800170e <LL_GPIO_SetAFPin_0_7>
 80018a4:	e006      	b.n	80018b4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 80018a6:	683b      	ldr	r3, [r7, #0]
 80018a8:	695b      	ldr	r3, [r3, #20]
 80018aa:	461a      	mov	r2, r3
 80018ac:	69b9      	ldr	r1, [r7, #24]
 80018ae:	6878      	ldr	r0, [r7, #4]
 80018b0:	f7ff ff6a 	bl	8001788 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 80018b4:	69fb      	ldr	r3, [r7, #28]
 80018b6:	3301      	adds	r3, #1
 80018b8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80018ba:	683b      	ldr	r3, [r7, #0]
 80018bc:	681a      	ldr	r2, [r3, #0]
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	fa22 f303 	lsr.w	r3, r2, r3
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d1b7      	bne.n	8001838 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d003      	beq.n	80018d8 <LL_GPIO_Init+0xd2>
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	685b      	ldr	r3, [r3, #4]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	d107      	bne.n	80018e8 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	6819      	ldr	r1, [r3, #0]
 80018dc:	683b      	ldr	r3, [r7, #0]
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	461a      	mov	r2, r3
 80018e2:	6878      	ldr	r0, [r7, #4]
 80018e4:	f7ff fe81 	bl	80015ea <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80018e8:	2300      	movs	r3, #0
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3720      	adds	r7, #32
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
	...

080018f4 <LL_RCC_HSI_IsReady>:
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80018f8:	4b07      	ldr	r3, [pc, #28]	; (8001918 <LL_RCC_HSI_IsReady+0x24>)
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001904:	d101      	bne.n	800190a <LL_RCC_HSI_IsReady+0x16>
 8001906:	2301      	movs	r3, #1
 8001908:	e000      	b.n	800190c <LL_RCC_HSI_IsReady+0x18>
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	46bd      	mov	sp, r7
 8001910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001914:	4770      	bx	lr
 8001916:	bf00      	nop
 8001918:	40021000 	.word	0x40021000

0800191c <LL_RCC_LSE_IsReady>:
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001920:	4b07      	ldr	r3, [pc, #28]	; (8001940 <LL_RCC_LSE_IsReady+0x24>)
 8001922:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b02      	cmp	r3, #2
 800192c:	d101      	bne.n	8001932 <LL_RCC_LSE_IsReady+0x16>
 800192e:	2301      	movs	r3, #1
 8001930:	e000      	b.n	8001934 <LL_RCC_LSE_IsReady+0x18>
 8001932:	2300      	movs	r3, #0
}
 8001934:	4618      	mov	r0, r3
 8001936:	46bd      	mov	sp, r7
 8001938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	40021000 	.word	0x40021000

08001944 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001948:	4b06      	ldr	r3, [pc, #24]	; (8001964 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0308 	and.w	r3, r3, #8
 8001950:	2b08      	cmp	r3, #8
 8001952:	d101      	bne.n	8001958 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001954:	2301      	movs	r3, #1
 8001956:	e000      	b.n	800195a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	46bd      	mov	sp, r7
 800195e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001962:	4770      	bx	lr
 8001964:	40021000 	.word	0x40021000

08001968 <LL_RCC_MSI_GetRange>:
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 800196c:	4b04      	ldr	r3, [pc, #16]	; (8001980 <LL_RCC_MSI_GetRange+0x18>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001974:	4618      	mov	r0, r3
 8001976:	46bd      	mov	sp, r7
 8001978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197c:	4770      	bx	lr
 800197e:	bf00      	nop
 8001980:	40021000 	.word	0x40021000

08001984 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001984:	b480      	push	{r7}
 8001986:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001988:	4b04      	ldr	r3, [pc, #16]	; (800199c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 800198a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800198e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001992:	4618      	mov	r0, r3
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_RCC_GetSysClkSource>:
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80019a4:	4b04      	ldr	r3, [pc, #16]	; (80019b8 <LL_RCC_GetSysClkSource+0x18>)
 80019a6:	689b      	ldr	r3, [r3, #8]
 80019a8:	f003 030c 	and.w	r3, r3, #12
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40021000 	.word	0x40021000

080019bc <LL_RCC_GetAHBPrescaler>:
{
 80019bc:	b480      	push	{r7}
 80019be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 80019c0:	4b04      	ldr	r3, [pc, #16]	; (80019d4 <LL_RCC_GetAHBPrescaler+0x18>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80019c8:	4618      	mov	r0, r3
 80019ca:	46bd      	mov	sp, r7
 80019cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d0:	4770      	bx	lr
 80019d2:	bf00      	nop
 80019d4:	40021000 	.word	0x40021000

080019d8 <LL_RCC_GetAPB1Prescaler>:
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80019dc:	4b04      	ldr	r3, [pc, #16]	; (80019f0 <LL_RCC_GetAPB1Prescaler+0x18>)
 80019de:	689b      	ldr	r3, [r3, #8]
 80019e0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80019e4:	4618      	mov	r0, r3
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40021000 	.word	0x40021000

080019f4 <LL_RCC_GetAPB2Prescaler>:
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <LL_RCC_GetAPB2Prescaler+0x18>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40021000 	.word	0x40021000

08001a10 <LL_RCC_GetUSARTClockSource>:
{
 8001a10:	b480      	push	{r7}
 8001a12:	b083      	sub	sp, #12
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001a18:	4b06      	ldr	r3, [pc, #24]	; (8001a34 <LL_RCC_GetUSARTClockSource+0x24>)
 8001a1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	401a      	ands	r2, r3
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	041b      	lsls	r3, r3, #16
 8001a26:	4313      	orrs	r3, r2
}
 8001a28:	4618      	mov	r0, r3
 8001a2a:	370c      	adds	r7, #12
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000

08001a38 <LL_RCC_GetUARTClockSource>:
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b083      	sub	sp, #12
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001a40:	4b06      	ldr	r3, [pc, #24]	; (8001a5c <LL_RCC_GetUARTClockSource+0x24>)
 8001a42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	401a      	ands	r2, r3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	041b      	lsls	r3, r3, #16
 8001a4e:	4313      	orrs	r3, r2
}
 8001a50:	4618      	mov	r0, r3
 8001a52:	370c      	adds	r7, #12
 8001a54:	46bd      	mov	sp, r7
 8001a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5a:	4770      	bx	lr
 8001a5c:	40021000 	.word	0x40021000

08001a60 <LL_RCC_PLL_GetMainSource>:
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001a64:	4b04      	ldr	r3, [pc, #16]	; (8001a78 <LL_RCC_PLL_GetMainSource+0x18>)
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	f003 0303 	and.w	r3, r3, #3
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr
 8001a76:	bf00      	nop
 8001a78:	40021000 	.word	0x40021000

08001a7c <LL_RCC_PLL_GetN>:
{
 8001a7c:	b480      	push	{r7}
 8001a7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001a80:	4b04      	ldr	r3, [pc, #16]	; (8001a94 <LL_RCC_PLL_GetN+0x18>)
 8001a82:	68db      	ldr	r3, [r3, #12]
 8001a84:	0a1b      	lsrs	r3, r3, #8
 8001a86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001a8a:	4618      	mov	r0, r3
 8001a8c:	46bd      	mov	sp, r7
 8001a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a92:	4770      	bx	lr
 8001a94:	40021000 	.word	0x40021000

08001a98 <LL_RCC_PLL_GetR>:
{
 8001a98:	b480      	push	{r7}
 8001a9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <LL_RCC_PLL_GetR+0x18>)
 8001a9e:	68db      	ldr	r3, [r3, #12]
 8001aa0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40021000 	.word	0x40021000

08001ab4 <LL_RCC_PLL_GetDivider>:
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <LL_RCC_PLL_GetDivider+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001ac0:	4618      	mov	r0, r3
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	40021000 	.word	0x40021000

08001ad0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b084      	sub	sp, #16
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ad8:	2300      	movs	r3, #0
 8001ada:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d137      	bne.n	8001b52 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001ae2:	6878      	ldr	r0, [r7, #4]
 8001ae4:	f7ff ff94 	bl	8001a10 <LL_RCC_GetUSARTClockSource>
 8001ae8:	4603      	mov	r3, r0
 8001aea:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8001aee:	2b03      	cmp	r3, #3
 8001af0:	f200 80b2 	bhi.w	8001c58 <LL_RCC_GetUSARTClockFreq+0x188>
 8001af4:	a201      	add	r2, pc, #4	; (adr r2, 8001afc <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001af6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001afa:	bf00      	nop
 8001afc:	08001b3b 	.word	0x08001b3b
 8001b00:	08001b0d 	.word	0x08001b0d
 8001b04:	08001b15 	.word	0x08001b15
 8001b08:	08001b27 	.word	0x08001b27
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001b0c:	f000 f952 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001b10:	60f8      	str	r0, [r7, #12]
        break;
 8001b12:	e0b2      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001b14:	f7ff feee 	bl	80018f4 <LL_RCC_HSI_IsReady>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	f000 809e 	beq.w	8001c5c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8001b20:	4b58      	ldr	r3, [pc, #352]	; (8001c84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001b22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001b24:	e09a      	b.n	8001c5c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001b26:	f7ff fef9 	bl	800191c <LL_RCC_LSE_IsReady>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	f000 8097 	beq.w	8001c60 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8001b32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001b36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001b38:	e092      	b.n	8001c60 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001b3a:	f000 f93b 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	4618      	mov	r0, r3
 8001b42:	f000 f9c7 	bl	8001ed4 <RCC_GetHCLKClockFreq>
 8001b46:	4603      	mov	r3, r0
 8001b48:	4618      	mov	r0, r3
 8001b4a:	f000 f9ed 	bl	8001f28 <RCC_GetPCLK2ClockFreq>
 8001b4e:	60f8      	str	r0, [r7, #12]
        break;
 8001b50:	e093      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2b0c      	cmp	r3, #12
 8001b56:	d146      	bne.n	8001be6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff59 	bl	8001a10 <LL_RCC_GetUSARTClockSource>
 8001b5e:	4603      	mov	r3, r0
 8001b60:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001b64:	2b0c      	cmp	r3, #12
 8001b66:	d87d      	bhi.n	8001c64 <LL_RCC_GetUSARTClockFreq+0x194>
 8001b68:	a201      	add	r2, pc, #4	; (adr r2, 8001b70 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b6e:	bf00      	nop
 8001b70:	08001bcf 	.word	0x08001bcf
 8001b74:	08001c65 	.word	0x08001c65
 8001b78:	08001c65 	.word	0x08001c65
 8001b7c:	08001c65 	.word	0x08001c65
 8001b80:	08001ba5 	.word	0x08001ba5
 8001b84:	08001c65 	.word	0x08001c65
 8001b88:	08001c65 	.word	0x08001c65
 8001b8c:	08001c65 	.word	0x08001c65
 8001b90:	08001bad 	.word	0x08001bad
 8001b94:	08001c65 	.word	0x08001c65
 8001b98:	08001c65 	.word	0x08001c65
 8001b9c:	08001c65 	.word	0x08001c65
 8001ba0:	08001bbd 	.word	0x08001bbd
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ba4:	f000 f906 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001ba8:	60f8      	str	r0, [r7, #12]
        break;
 8001baa:	e066      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001bac:	f7ff fea2 	bl	80018f4 <LL_RCC_HSI_IsReady>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d058      	beq.n	8001c68 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8001bb6:	4b33      	ldr	r3, [pc, #204]	; (8001c84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001bb8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bba:	e055      	b.n	8001c68 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001bbc:	f7ff feae 	bl	800191c <LL_RCC_LSE_IsReady>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d052      	beq.n	8001c6c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8001bc6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001bca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001bcc:	e04e      	b.n	8001c6c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001bce:	f000 f8f1 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f000 f97d 	bl	8001ed4 <RCC_GetHCLKClockFreq>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	4618      	mov	r0, r3
 8001bde:	f000 f98f 	bl	8001f00 <RCC_GetPCLK1ClockFreq>
 8001be2:	60f8      	str	r0, [r7, #12]
        break;
 8001be4:	e049      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2b30      	cmp	r3, #48	; 0x30
 8001bea:	d141      	bne.n	8001c70 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001bec:	6878      	ldr	r0, [r7, #4]
 8001bee:	f7ff ff0f 	bl	8001a10 <LL_RCC_GetUSARTClockSource>
 8001bf2:	4603      	mov	r3, r0
 8001bf4:	4a24      	ldr	r2, [pc, #144]	; (8001c88 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001bf6:	4293      	cmp	r3, r2
 8001bf8:	d00d      	beq.n	8001c16 <LL_RCC_GetUSARTClockFreq+0x146>
 8001bfa:	4a23      	ldr	r2, [pc, #140]	; (8001c88 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001bfc:	4293      	cmp	r3, r2
 8001bfe:	d803      	bhi.n	8001c08 <LL_RCC_GetUSARTClockFreq+0x138>
 8001c00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001c04:	d01c      	beq.n	8001c40 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8001c06:	e038      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001c08:	4a20      	ldr	r2, [pc, #128]	; (8001c8c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d007      	beq.n	8001c1e <LL_RCC_GetUSARTClockFreq+0x14e>
 8001c0e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8001c12:	d00c      	beq.n	8001c2e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8001c14:	e031      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8001c16:	f000 f8cd 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001c1a:	60f8      	str	r0, [r7, #12]
          break;
 8001c1c:	e02d      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8001c1e:	f7ff fe69 	bl	80018f4 <LL_RCC_HSI_IsReady>
 8001c22:	4603      	mov	r3, r0
 8001c24:	2b00      	cmp	r3, #0
 8001c26:	d025      	beq.n	8001c74 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8001c28:	4b16      	ldr	r3, [pc, #88]	; (8001c84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001c2a:	60fb      	str	r3, [r7, #12]
          break;
 8001c2c:	e022      	b.n	8001c74 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8001c2e:	f7ff fe75 	bl	800191c <LL_RCC_LSE_IsReady>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d01f      	beq.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8001c38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001c3c:	60fb      	str	r3, [r7, #12]
          break;
 8001c3e:	e01b      	b.n	8001c78 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001c40:	f000 f8b8 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001c44:	4603      	mov	r3, r0
 8001c46:	4618      	mov	r0, r3
 8001c48:	f000 f944 	bl	8001ed4 <RCC_GetHCLKClockFreq>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f000 f956 	bl	8001f00 <RCC_GetPCLK1ClockFreq>
 8001c54:	60f8      	str	r0, [r7, #12]
          break;
 8001c56:	e010      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c58:	bf00      	nop
 8001c5a:	e00e      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c5c:	bf00      	nop
 8001c5e:	e00c      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c60:	bf00      	nop
 8001c62:	e00a      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c64:	bf00      	nop
 8001c66:	e008      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c68:	bf00      	nop
 8001c6a:	e006      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001c6c:	bf00      	nop
 8001c6e:	e004      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8001c70:	bf00      	nop
 8001c72:	e002      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001c74:	bf00      	nop
 8001c76:	e000      	b.n	8001c7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001c78:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001c7a:	68fb      	ldr	r3, [r7, #12]
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	3710      	adds	r7, #16
 8001c80:	46bd      	mov	sp, r7
 8001c82:	bd80      	pop	{r7, pc}
 8001c84:	00f42400 	.word	0x00f42400
 8001c88:	00300010 	.word	0x00300010
 8001c8c:	00300020 	.word	0x00300020

08001c90 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b084      	sub	sp, #16
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2bc0      	cmp	r3, #192	; 0xc0
 8001ca0:	d135      	bne.n	8001d0e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff fec8 	bl	8001a38 <LL_RCC_GetUARTClockSource>
 8001ca8:	4603      	mov	r3, r0
 8001caa:	4a3d      	ldr	r2, [pc, #244]	; (8001da0 <LL_RCC_GetUARTClockFreq+0x110>)
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d00d      	beq.n	8001ccc <LL_RCC_GetUARTClockFreq+0x3c>
 8001cb0:	4a3b      	ldr	r2, [pc, #236]	; (8001da0 <LL_RCC_GetUARTClockFreq+0x110>)
 8001cb2:	4293      	cmp	r3, r2
 8001cb4:	d803      	bhi.n	8001cbe <LL_RCC_GetUARTClockFreq+0x2e>
 8001cb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cba:	d01c      	beq.n	8001cf6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8001cbc:	e02c      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001cbe:	4a39      	ldr	r2, [pc, #228]	; (8001da4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d007      	beq.n	8001cd4 <LL_RCC_GetUARTClockFreq+0x44>
 8001cc4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8001cc8:	d00c      	beq.n	8001ce4 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8001cca:	e025      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8001ccc:	f000 f872 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001cd0:	60f8      	str	r0, [r7, #12]
        break;
 8001cd2:	e021      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001cd4:	f7ff fe0e 	bl	80018f4 <LL_RCC_HSI_IsReady>
 8001cd8:	4603      	mov	r3, r0
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d019      	beq.n	8001d12 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8001cde:	4b32      	ldr	r3, [pc, #200]	; (8001da8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001ce0:	60fb      	str	r3, [r7, #12]
        break;
 8001ce2:	e016      	b.n	8001d12 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001ce4:	f7ff fe1a 	bl	800191c <LL_RCC_LSE_IsReady>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d013      	beq.n	8001d16 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8001cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001cf2:	60fb      	str	r3, [r7, #12]
        break;
 8001cf4:	e00f      	b.n	8001d16 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001cf6:	f000 f85d 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001cfa:	4603      	mov	r3, r0
 8001cfc:	4618      	mov	r0, r3
 8001cfe:	f000 f8e9 	bl	8001ed4 <RCC_GetHCLKClockFreq>
 8001d02:	4603      	mov	r3, r0
 8001d04:	4618      	mov	r0, r3
 8001d06:	f000 f8fb 	bl	8001f00 <RCC_GetPCLK1ClockFreq>
 8001d0a:	60f8      	str	r0, [r7, #12]
        break;
 8001d0c:	e004      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8001d0e:	bf00      	nop
 8001d10:	e002      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001d12:	bf00      	nop
 8001d14:	e000      	b.n	8001d18 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8001d16:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8001d1e:	d135      	bne.n	8001d8c <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7ff fe89 	bl	8001a38 <LL_RCC_GetUARTClockSource>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4a20      	ldr	r2, [pc, #128]	; (8001dac <LL_RCC_GetUARTClockFreq+0x11c>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d00d      	beq.n	8001d4a <LL_RCC_GetUARTClockFreq+0xba>
 8001d2e:	4a1f      	ldr	r2, [pc, #124]	; (8001dac <LL_RCC_GetUARTClockFreq+0x11c>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d803      	bhi.n	8001d3c <LL_RCC_GetUARTClockFreq+0xac>
 8001d34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001d38:	d01c      	beq.n	8001d74 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8001d3a:	e02c      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001d3c:	4a1c      	ldr	r2, [pc, #112]	; (8001db0 <LL_RCC_GetUARTClockFreq+0x120>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d007      	beq.n	8001d52 <LL_RCC_GetUARTClockFreq+0xc2>
 8001d42:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8001d46:	d00c      	beq.n	8001d62 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8001d48:	e025      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8001d4a:	f000 f833 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001d4e:	60f8      	str	r0, [r7, #12]
        break;
 8001d50:	e021      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001d52:	f7ff fdcf 	bl	80018f4 <LL_RCC_HSI_IsReady>
 8001d56:	4603      	mov	r3, r0
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d019      	beq.n	8001d90 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8001d5c:	4b12      	ldr	r3, [pc, #72]	; (8001da8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001d5e:	60fb      	str	r3, [r7, #12]
        break;
 8001d60:	e016      	b.n	8001d90 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001d62:	f7ff fddb 	bl	800191c <LL_RCC_LSE_IsReady>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d013      	beq.n	8001d94 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8001d6c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001d70:	60fb      	str	r3, [r7, #12]
        break;
 8001d72:	e00f      	b.n	8001d94 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001d74:	f000 f81e 	bl	8001db4 <RCC_GetSystemClockFreq>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	4618      	mov	r0, r3
 8001d7c:	f000 f8aa 	bl	8001ed4 <RCC_GetHCLKClockFreq>
 8001d80:	4603      	mov	r3, r0
 8001d82:	4618      	mov	r0, r3
 8001d84:	f000 f8bc 	bl	8001f00 <RCC_GetPCLK1ClockFreq>
 8001d88:	60f8      	str	r0, [r7, #12]
        break;
 8001d8a:	e004      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8001d8c:	bf00      	nop
 8001d8e:	e002      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8001d90:	bf00      	nop
 8001d92:	e000      	b.n	8001d96 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8001d94:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8001d96:	68fb      	ldr	r3, [r7, #12]
}
 8001d98:	4618      	mov	r0, r3
 8001d9a:	3710      	adds	r7, #16
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	00c00040 	.word	0x00c00040
 8001da4:	00c00080 	.word	0x00c00080
 8001da8:	00f42400 	.word	0x00f42400
 8001dac:	03000100 	.word	0x03000100
 8001db0:	03000200 	.word	0x03000200

08001db4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8001dba:	f7ff fdf1 	bl	80019a0 <LL_RCC_GetSysClkSource>
 8001dbe:	4603      	mov	r3, r0
 8001dc0:	2b0c      	cmp	r3, #12
 8001dc2:	d851      	bhi.n	8001e68 <RCC_GetSystemClockFreq+0xb4>
 8001dc4:	a201      	add	r2, pc, #4	; (adr r2, 8001dcc <RCC_GetSystemClockFreq+0x18>)
 8001dc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dca:	bf00      	nop
 8001dcc:	08001e01 	.word	0x08001e01
 8001dd0:	08001e69 	.word	0x08001e69
 8001dd4:	08001e69 	.word	0x08001e69
 8001dd8:	08001e69 	.word	0x08001e69
 8001ddc:	08001e55 	.word	0x08001e55
 8001de0:	08001e69 	.word	0x08001e69
 8001de4:	08001e69 	.word	0x08001e69
 8001de8:	08001e69 	.word	0x08001e69
 8001dec:	08001e5b 	.word	0x08001e5b
 8001df0:	08001e69 	.word	0x08001e69
 8001df4:	08001e69 	.word	0x08001e69
 8001df8:	08001e69 	.word	0x08001e69
 8001dfc:	08001e61 	.word	0x08001e61
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e00:	f7ff fda0 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d111      	bne.n	8001e2e <RCC_GetSystemClockFreq+0x7a>
 8001e0a:	f7ff fd9b 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d004      	beq.n	8001e1e <RCC_GetSystemClockFreq+0x6a>
 8001e14:	f7ff fda8 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	0a1b      	lsrs	r3, r3, #8
 8001e1c:	e003      	b.n	8001e26 <RCC_GetSystemClockFreq+0x72>
 8001e1e:	f7ff fdb1 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e22:	4603      	mov	r3, r0
 8001e24:	0a1b      	lsrs	r3, r3, #8
 8001e26:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <RCC_GetSystemClockFreq+0x114>)
 8001e28:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e2c:	e010      	b.n	8001e50 <RCC_GetSystemClockFreq+0x9c>
 8001e2e:	f7ff fd89 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e32:	4603      	mov	r3, r0
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <RCC_GetSystemClockFreq+0x8e>
 8001e38:	f7ff fd96 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	091b      	lsrs	r3, r3, #4
 8001e40:	e003      	b.n	8001e4a <RCC_GetSystemClockFreq+0x96>
 8001e42:	f7ff fd9f 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e46:	4603      	mov	r3, r0
 8001e48:	091b      	lsrs	r3, r3, #4
 8001e4a:	4a1f      	ldr	r2, [pc, #124]	; (8001ec8 <RCC_GetSystemClockFreq+0x114>)
 8001e4c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e50:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001e52:	e033      	b.n	8001ebc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8001e54:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <RCC_GetSystemClockFreq+0x118>)
 8001e56:	607b      	str	r3, [r7, #4]
      break;
 8001e58:	e030      	b.n	8001ebc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8001e5a:	4b1d      	ldr	r3, [pc, #116]	; (8001ed0 <RCC_GetSystemClockFreq+0x11c>)
 8001e5c:	607b      	str	r3, [r7, #4]
      break;
 8001e5e:	e02d      	b.n	8001ebc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8001e60:	f000 f876 	bl	8001f50 <RCC_PLL_GetFreqDomain_SYS>
 8001e64:	6078      	str	r0, [r7, #4]
      break;
 8001e66:	e029      	b.n	8001ebc <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001e68:	f7ff fd6c 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d111      	bne.n	8001e96 <RCC_GetSystemClockFreq+0xe2>
 8001e72:	f7ff fd67 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d004      	beq.n	8001e86 <RCC_GetSystemClockFreq+0xd2>
 8001e7c:	f7ff fd74 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001e80:	4603      	mov	r3, r0
 8001e82:	0a1b      	lsrs	r3, r3, #8
 8001e84:	e003      	b.n	8001e8e <RCC_GetSystemClockFreq+0xda>
 8001e86:	f7ff fd7d 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	0a1b      	lsrs	r3, r3, #8
 8001e8e:	4a0e      	ldr	r2, [pc, #56]	; (8001ec8 <RCC_GetSystemClockFreq+0x114>)
 8001e90:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e94:	e010      	b.n	8001eb8 <RCC_GetSystemClockFreq+0x104>
 8001e96:	f7ff fd55 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d004      	beq.n	8001eaa <RCC_GetSystemClockFreq+0xf6>
 8001ea0:	f7ff fd62 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	091b      	lsrs	r3, r3, #4
 8001ea8:	e003      	b.n	8001eb2 <RCC_GetSystemClockFreq+0xfe>
 8001eaa:	f7ff fd6b 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	091b      	lsrs	r3, r3, #4
 8001eb2:	4a05      	ldr	r2, [pc, #20]	; (8001ec8 <RCC_GetSystemClockFreq+0x114>)
 8001eb4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001eb8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001eba:	bf00      	nop
  }

  return frequency;
 8001ebc:	687b      	ldr	r3, [r7, #4]
}
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	3708      	adds	r7, #8
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	0800359c 	.word	0x0800359c
 8001ecc:	00f42400 	.word	0x00f42400
 8001ed0:	007a1200 	.word	0x007a1200

08001ed4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8001ed4:	b580      	push	{r7, lr}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8001edc:	f7ff fd6e 	bl	80019bc <LL_RCC_GetAHBPrescaler>
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	091b      	lsrs	r3, r3, #4
 8001ee4:	f003 030f 	and.w	r3, r3, #15
 8001ee8:	4a04      	ldr	r2, [pc, #16]	; (8001efc <RCC_GetHCLKClockFreq+0x28>)
 8001eea:	5cd3      	ldrb	r3, [r2, r3]
 8001eec:	461a      	mov	r2, r3
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	40d3      	lsrs	r3, r2
}
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	08003584 	.word	0x08003584

08001f00 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8001f00:	b580      	push	{r7, lr}
 8001f02:	b082      	sub	sp, #8
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8001f08:	f7ff fd66 	bl	80019d8 <LL_RCC_GetAPB1Prescaler>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	0a1b      	lsrs	r3, r3, #8
 8001f10:	4a04      	ldr	r2, [pc, #16]	; (8001f24 <RCC_GetPCLK1ClockFreq+0x24>)
 8001f12:	5cd3      	ldrb	r3, [r2, r3]
 8001f14:	461a      	mov	r2, r3
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	40d3      	lsrs	r3, r2
}
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	3708      	adds	r7, #8
 8001f1e:	46bd      	mov	sp, r7
 8001f20:	bd80      	pop	{r7, pc}
 8001f22:	bf00      	nop
 8001f24:	08003594 	.word	0x08003594

08001f28 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8001f28:	b580      	push	{r7, lr}
 8001f2a:	b082      	sub	sp, #8
 8001f2c:	af00      	add	r7, sp, #0
 8001f2e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8001f30:	f7ff fd60 	bl	80019f4 <LL_RCC_GetAPB2Prescaler>
 8001f34:	4603      	mov	r3, r0
 8001f36:	0adb      	lsrs	r3, r3, #11
 8001f38:	4a04      	ldr	r2, [pc, #16]	; (8001f4c <RCC_GetPCLK2ClockFreq+0x24>)
 8001f3a:	5cd3      	ldrb	r3, [r2, r3]
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	40d3      	lsrs	r3, r2
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	08003594 	.word	0x08003594

08001f50 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8001f50:	b590      	push	{r4, r7, lr}
 8001f52:	b083      	sub	sp, #12
 8001f54:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8001f56:	f7ff fd83 	bl	8001a60 <LL_RCC_PLL_GetMainSource>
 8001f5a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d02d      	beq.n	8001fbe <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8001f62:	2b03      	cmp	r3, #3
 8001f64:	d02e      	beq.n	8001fc4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8001f66:	2b01      	cmp	r3, #1
 8001f68:	d12f      	bne.n	8001fca <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001f6a:	f7ff fceb 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f6e:	4603      	mov	r3, r0
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d111      	bne.n	8001f98 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8001f74:	f7ff fce6 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f78:	4603      	mov	r3, r0
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d004      	beq.n	8001f88 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8001f7e:	f7ff fcf3 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001f82:	4603      	mov	r3, r0
 8001f84:	0a1b      	lsrs	r3, r3, #8
 8001f86:	e003      	b.n	8001f90 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8001f88:	f7ff fcfc 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	0a1b      	lsrs	r3, r3, #8
 8001f90:	4a2f      	ldr	r2, [pc, #188]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001f92:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f96:	e010      	b.n	8001fba <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8001f98:	f7ff fcd4 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d004      	beq.n	8001fac <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8001fa2:	f7ff fce1 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001fa6:	4603      	mov	r3, r0
 8001fa8:	091b      	lsrs	r3, r3, #4
 8001faa:	e003      	b.n	8001fb4 <RCC_PLL_GetFreqDomain_SYS+0x64>
 8001fac:	f7ff fcea 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	091b      	lsrs	r3, r3, #4
 8001fb4:	4a26      	ldr	r2, [pc, #152]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001fb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001fba:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8001fbc:	e02f      	b.n	800201e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8001fbe:	4b25      	ldr	r3, [pc, #148]	; (8002054 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8001fc0:	607b      	str	r3, [r7, #4]
      break;
 8001fc2:	e02c      	b.n	800201e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8001fc6:	607b      	str	r3, [r7, #4]
      break;
 8001fc8:	e029      	b.n	800201e <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8001fca:	f7ff fcbb 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d111      	bne.n	8001ff8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8001fd4:	f7ff fcb6 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d004      	beq.n	8001fe8 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8001fde:	f7ff fcc3 	bl	8001968 <LL_RCC_MSI_GetRange>
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	0a1b      	lsrs	r3, r3, #8
 8001fe6:	e003      	b.n	8001ff0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8001fe8:	f7ff fccc 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8001fec:	4603      	mov	r3, r0
 8001fee:	0a1b      	lsrs	r3, r3, #8
 8001ff0:	4a17      	ldr	r2, [pc, #92]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8001ff2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ff6:	e010      	b.n	800201a <RCC_PLL_GetFreqDomain_SYS+0xca>
 8001ff8:	f7ff fca4 	bl	8001944 <LL_RCC_MSI_IsEnabledRangeSelect>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d004      	beq.n	800200c <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002002:	f7ff fcb1 	bl	8001968 <LL_RCC_MSI_GetRange>
 8002006:	4603      	mov	r3, r0
 8002008:	091b      	lsrs	r3, r3, #4
 800200a:	e003      	b.n	8002014 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 800200c:	f7ff fcba 	bl	8001984 <LL_RCC_MSI_GetRangeAfterStandby>
 8002010:	4603      	mov	r3, r0
 8002012:	091b      	lsrs	r3, r3, #4
 8002014:	4a0e      	ldr	r2, [pc, #56]	; (8002050 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002016:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800201a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800201c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800201e:	f7ff fd49 	bl	8001ab4 <LL_RCC_PLL_GetDivider>
 8002022:	4603      	mov	r3, r0
 8002024:	091b      	lsrs	r3, r3, #4
 8002026:	3301      	adds	r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	fbb2 f4f3 	udiv	r4, r2, r3
 800202e:	f7ff fd25 	bl	8001a7c <LL_RCC_PLL_GetN>
 8002032:	4603      	mov	r3, r0
 8002034:	fb03 f404 	mul.w	r4, r3, r4
 8002038:	f7ff fd2e 	bl	8001a98 <LL_RCC_PLL_GetR>
 800203c:	4603      	mov	r3, r0
 800203e:	0e5b      	lsrs	r3, r3, #25
 8002040:	3301      	adds	r3, #1
 8002042:	005b      	lsls	r3, r3, #1
 8002044:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002048:	4618      	mov	r0, r3
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	bd90      	pop	{r4, r7, pc}
 8002050:	0800359c 	.word	0x0800359c
 8002054:	00f42400 	.word	0x00f42400
 8002058:	007a1200 	.word	0x007a1200

0800205c <LL_SPI_IsEnabled>:
{
 800205c:	b480      	push	{r7}
 800205e:	b083      	sub	sp, #12
 8002060:	af00      	add	r7, sp, #0
 8002062:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800206c:	2b40      	cmp	r3, #64	; 0x40
 800206e:	d101      	bne.n	8002074 <LL_SPI_IsEnabled+0x18>
 8002070:	2301      	movs	r3, #1
 8002072:	e000      	b.n	8002076 <LL_SPI_IsEnabled+0x1a>
 8002074:	2300      	movs	r3, #0
}
 8002076:	4618      	mov	r0, r3
 8002078:	370c      	adds	r7, #12
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr

08002082 <LL_SPI_SetCRCPolynomial>:
{
 8002082:	b480      	push	{r7}
 8002084:	b083      	sub	sp, #12
 8002086:	af00      	add	r7, sp, #0
 8002088:	6078      	str	r0, [r7, #4]
 800208a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	b29b      	uxth	r3, r3
 8002090:	461a      	mov	r2, r3
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	611a      	str	r2, [r3, #16]
}
 8002096:	bf00      	nop
 8002098:	370c      	adds	r7, #12
 800209a:	46bd      	mov	sp, r7
 800209c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020a0:	4770      	bx	lr

080020a2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b084      	sub	sp, #16
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
 80020aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f7ff ffd3 	bl	800205c <LL_SPI_IsEnabled>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d13b      	bne.n	8002134 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80020c4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80020c8:	683a      	ldr	r2, [r7, #0]
 80020ca:	6811      	ldr	r1, [r2, #0]
 80020cc:	683a      	ldr	r2, [r7, #0]
 80020ce:	6852      	ldr	r2, [r2, #4]
 80020d0:	4311      	orrs	r1, r2
 80020d2:	683a      	ldr	r2, [r7, #0]
 80020d4:	68d2      	ldr	r2, [r2, #12]
 80020d6:	4311      	orrs	r1, r2
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	6912      	ldr	r2, [r2, #16]
 80020dc:	4311      	orrs	r1, r2
 80020de:	683a      	ldr	r2, [r7, #0]
 80020e0:	6952      	ldr	r2, [r2, #20]
 80020e2:	4311      	orrs	r1, r2
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	6992      	ldr	r2, [r2, #24]
 80020e8:	4311      	orrs	r1, r2
 80020ea:	683a      	ldr	r2, [r7, #0]
 80020ec:	69d2      	ldr	r2, [r2, #28]
 80020ee:	4311      	orrs	r1, r2
 80020f0:	683a      	ldr	r2, [r7, #0]
 80020f2:	6a12      	ldr	r2, [r2, #32]
 80020f4:	430a      	orrs	r2, r1
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	685b      	ldr	r3, [r3, #4]
 8002100:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002104:	f023 0304 	bic.w	r3, r3, #4
 8002108:	683a      	ldr	r2, [r7, #0]
 800210a:	6891      	ldr	r1, [r2, #8]
 800210c:	683a      	ldr	r2, [r7, #0]
 800210e:	6952      	ldr	r2, [r2, #20]
 8002110:	0c12      	lsrs	r2, r2, #16
 8002112:	430a      	orrs	r2, r1
 8002114:	431a      	orrs	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	6a1b      	ldr	r3, [r3, #32]
 800211e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002122:	d105      	bne.n	8002130 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002128:	4619      	mov	r1, r3
 800212a:	6878      	ldr	r0, [r7, #4]
 800212c:	f7ff ffa9 	bl	8002082 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002130:	2300      	movs	r3, #0
 8002132:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002134:	7bfb      	ldrb	r3, [r7, #15]
}
 8002136:	4618      	mov	r0, r3
 8002138:	3710      	adds	r7, #16
 800213a:	46bd      	mov	sp, r7
 800213c:	bd80      	pop	{r7, pc}

0800213e <LL_TIM_SetPrescaler>:
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	683a      	ldr	r2, [r7, #0]
 800214c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr

0800215a <LL_TIM_SetAutoReload>:
{
 800215a:	b480      	push	{r7}
 800215c:	b083      	sub	sp, #12
 800215e:	af00      	add	r7, sp, #0
 8002160:	6078      	str	r0, [r7, #4]
 8002162:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	683a      	ldr	r2, [r7, #0]
 8002168:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800216a:	bf00      	nop
 800216c:	370c      	adds	r7, #12
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr

08002176 <LL_TIM_SetRepetitionCounter>:
{
 8002176:	b480      	push	{r7}
 8002178:	b083      	sub	sp, #12
 800217a:	af00      	add	r7, sp, #0
 800217c:	6078      	str	r0, [r7, #4]
 800217e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	683a      	ldr	r2, [r7, #0]
 8002184:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002186:	bf00      	nop
 8002188:	370c      	adds	r7, #12
 800218a:	46bd      	mov	sp, r7
 800218c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002190:	4770      	bx	lr

08002192 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	f043 0201 	orr.w	r2, r3, #1
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	615a      	str	r2, [r3, #20]
}
 80021a6:	bf00      	nop
 80021a8:	370c      	adds	r7, #12
 80021aa:	46bd      	mov	sp, r7
 80021ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b0:	4770      	bx	lr
	...

080021b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b084      	sub	sp, #16
 80021b8:	af00      	add	r7, sp, #0
 80021ba:	6078      	str	r0, [r7, #4]
 80021bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	681b      	ldr	r3, [r3, #0]
 80021c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3d      	ldr	r2, [pc, #244]	; (80022bc <LL_TIM_Init+0x108>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d013      	beq.n	80021f4 <LL_TIM_Init+0x40>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021d2:	d00f      	beq.n	80021f4 <LL_TIM_Init+0x40>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3a      	ldr	r2, [pc, #232]	; (80022c0 <LL_TIM_Init+0x10c>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d00b      	beq.n	80021f4 <LL_TIM_Init+0x40>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	4a39      	ldr	r2, [pc, #228]	; (80022c4 <LL_TIM_Init+0x110>)
 80021e0:	4293      	cmp	r3, r2
 80021e2:	d007      	beq.n	80021f4 <LL_TIM_Init+0x40>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	4a38      	ldr	r2, [pc, #224]	; (80022c8 <LL_TIM_Init+0x114>)
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d003      	beq.n	80021f4 <LL_TIM_Init+0x40>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a37      	ldr	r2, [pc, #220]	; (80022cc <LL_TIM_Init+0x118>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d106      	bne.n	8002202 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4313      	orrs	r3, r2
 8002200:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4a2d      	ldr	r2, [pc, #180]	; (80022bc <LL_TIM_Init+0x108>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d01f      	beq.n	800224a <LL_TIM_Init+0x96>
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002210:	d01b      	beq.n	800224a <LL_TIM_Init+0x96>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	4a2a      	ldr	r2, [pc, #168]	; (80022c0 <LL_TIM_Init+0x10c>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d017      	beq.n	800224a <LL_TIM_Init+0x96>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a29      	ldr	r2, [pc, #164]	; (80022c4 <LL_TIM_Init+0x110>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <LL_TIM_Init+0x96>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a28      	ldr	r2, [pc, #160]	; (80022c8 <LL_TIM_Init+0x114>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <LL_TIM_Init+0x96>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a27      	ldr	r2, [pc, #156]	; (80022cc <LL_TIM_Init+0x118>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <LL_TIM_Init+0x96>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <LL_TIM_Init+0x11c>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <LL_TIM_Init+0x96>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a25      	ldr	r2, [pc, #148]	; (80022d4 <LL_TIM_Init+0x120>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <LL_TIM_Init+0x96>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a24      	ldr	r2, [pc, #144]	; (80022d8 <LL_TIM_Init+0x124>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d106      	bne.n	8002258 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002250:	683b      	ldr	r3, [r7, #0]
 8002252:	68db      	ldr	r3, [r3, #12]
 8002254:	4313      	orrs	r3, r2
 8002256:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	68fa      	ldr	r2, [r7, #12]
 800225c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	689b      	ldr	r3, [r3, #8]
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff ff78 	bl	800215a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	881b      	ldrh	r3, [r3, #0]
 800226e:	4619      	mov	r1, r3
 8002270:	6878      	ldr	r0, [r7, #4]
 8002272:	f7ff ff64 	bl	800213e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4a10      	ldr	r2, [pc, #64]	; (80022bc <LL_TIM_Init+0x108>)
 800227a:	4293      	cmp	r3, r2
 800227c:	d00f      	beq.n	800229e <LL_TIM_Init+0xea>
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	4a12      	ldr	r2, [pc, #72]	; (80022cc <LL_TIM_Init+0x118>)
 8002282:	4293      	cmp	r3, r2
 8002284:	d00b      	beq.n	800229e <LL_TIM_Init+0xea>
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	4a11      	ldr	r2, [pc, #68]	; (80022d0 <LL_TIM_Init+0x11c>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d007      	beq.n	800229e <LL_TIM_Init+0xea>
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	4a10      	ldr	r2, [pc, #64]	; (80022d4 <LL_TIM_Init+0x120>)
 8002292:	4293      	cmp	r3, r2
 8002294:	d003      	beq.n	800229e <LL_TIM_Init+0xea>
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	4a0f      	ldr	r2, [pc, #60]	; (80022d8 <LL_TIM_Init+0x124>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d105      	bne.n	80022aa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800229e:	683b      	ldr	r3, [r7, #0]
 80022a0:	691b      	ldr	r3, [r3, #16]
 80022a2:	4619      	mov	r1, r3
 80022a4:	6878      	ldr	r0, [r7, #4]
 80022a6:	f7ff ff66 	bl	8002176 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff ff71 	bl	8002192 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80022b0:	2300      	movs	r3, #0
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3710      	adds	r7, #16
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	40012c00 	.word	0x40012c00
 80022c0:	40000400 	.word	0x40000400
 80022c4:	40000800 	.word	0x40000800
 80022c8:	40000c00 	.word	0x40000c00
 80022cc:	40013400 	.word	0x40013400
 80022d0:	40014000 	.word	0x40014000
 80022d4:	40014400 	.word	0x40014400
 80022d8:	40014800 	.word	0x40014800

080022dc <LL_USART_IsEnabled>:
{
 80022dc:	b480      	push	{r7}
 80022de:	b083      	sub	sp, #12
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f003 0301 	and.w	r3, r3, #1
 80022ec:	2b01      	cmp	r3, #1
 80022ee:	d101      	bne.n	80022f4 <LL_USART_IsEnabled+0x18>
 80022f0:	2301      	movs	r3, #1
 80022f2:	e000      	b.n	80022f6 <LL_USART_IsEnabled+0x1a>
 80022f4:	2300      	movs	r3, #0
}
 80022f6:	4618      	mov	r0, r3
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr

08002302 <LL_USART_SetStopBitsLength>:
{
 8002302:	b480      	push	{r7}
 8002304:	b083      	sub	sp, #12
 8002306:	af00      	add	r7, sp, #0
 8002308:	6078      	str	r0, [r7, #4]
 800230a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	431a      	orrs	r2, r3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	605a      	str	r2, [r3, #4]
}
 800231c:	bf00      	nop
 800231e:	370c      	adds	r7, #12
 8002320:	46bd      	mov	sp, r7
 8002322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002326:	4770      	bx	lr

08002328 <LL_USART_SetHWFlowCtrl>:
{
 8002328:	b480      	push	{r7}
 800232a:	b083      	sub	sp, #12
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	689b      	ldr	r3, [r3, #8]
 8002336:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	431a      	orrs	r2, r3
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	609a      	str	r2, [r3, #8]
}
 8002342:	bf00      	nop
 8002344:	370c      	adds	r7, #12
 8002346:	46bd      	mov	sp, r7
 8002348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234c:	4770      	bx	lr

0800234e <LL_USART_SetBaudRate>:
{
 800234e:	b480      	push	{r7}
 8002350:	b087      	sub	sp, #28
 8002352:	af00      	add	r7, sp, #0
 8002354:	60f8      	str	r0, [r7, #12]
 8002356:	60b9      	str	r1, [r7, #8]
 8002358:	607a      	str	r2, [r7, #4]
 800235a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002362:	d11a      	bne.n	800239a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002364:	68bb      	ldr	r3, [r7, #8]
 8002366:	005a      	lsls	r2, r3, #1
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	085b      	lsrs	r3, r3, #1
 800236c:	441a      	add	r2, r3
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	fbb2 f3f3 	udiv	r3, r2, r3
 8002374:	b29b      	uxth	r3, r3
 8002376:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002378:	697a      	ldr	r2, [r7, #20]
 800237a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800237e:	4013      	ands	r3, r2
 8002380:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002382:	697b      	ldr	r3, [r7, #20]
 8002384:	085b      	lsrs	r3, r3, #1
 8002386:	b29b      	uxth	r3, r3
 8002388:	f003 0307 	and.w	r3, r3, #7
 800238c:	693a      	ldr	r2, [r7, #16]
 800238e:	4313      	orrs	r3, r2
 8002390:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	693a      	ldr	r2, [r7, #16]
 8002396:	60da      	str	r2, [r3, #12]
}
 8002398:	e00a      	b.n	80023b0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	085a      	lsrs	r2, r3, #1
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	441a      	add	r2, r3
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a8:	b29b      	uxth	r3, r3
 80023aa:	461a      	mov	r2, r3
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	60da      	str	r2, [r3, #12]
}
 80023b0:	bf00      	nop
 80023b2:	371c      	adds	r7, #28
 80023b4:	46bd      	mov	sp, r7
 80023b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ba:	4770      	bx	lr

080023bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	b084      	sub	sp, #16
 80023c0:	af00      	add	r7, sp, #0
 80023c2:	6078      	str	r0, [r7, #4]
 80023c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80023c6:	2301      	movs	r3, #1
 80023c8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80023ca:	2300      	movs	r3, #0
 80023cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff ff84 	bl	80022dc <LL_USART_IsEnabled>
 80023d4:	4603      	mov	r3, r0
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d15b      	bne.n	8002492 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681a      	ldr	r2, [r3, #0]
 80023de:	4b2f      	ldr	r3, [pc, #188]	; (800249c <LL_USART_Init+0xe0>)
 80023e0:	4013      	ands	r3, r2
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	6851      	ldr	r1, [r2, #4]
 80023e6:	683a      	ldr	r2, [r7, #0]
 80023e8:	68d2      	ldr	r2, [r2, #12]
 80023ea:	4311      	orrs	r1, r2
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	6912      	ldr	r2, [r2, #16]
 80023f0:	4311      	orrs	r1, r2
 80023f2:	683a      	ldr	r2, [r7, #0]
 80023f4:	6992      	ldr	r2, [r2, #24]
 80023f6:	430a      	orrs	r2, r1
 80023f8:	431a      	orrs	r2, r3
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	4619      	mov	r1, r3
 8002404:	6878      	ldr	r0, [r7, #4]
 8002406:	f7ff ff7c 	bl	8002302 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	695b      	ldr	r3, [r3, #20]
 800240e:	4619      	mov	r1, r3
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff89 	bl	8002328 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	4a21      	ldr	r2, [pc, #132]	; (80024a0 <LL_USART_Init+0xe4>)
 800241a:	4293      	cmp	r3, r2
 800241c:	d104      	bne.n	8002428 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800241e:	2003      	movs	r0, #3
 8002420:	f7ff fb56 	bl	8001ad0 <LL_RCC_GetUSARTClockFreq>
 8002424:	60b8      	str	r0, [r7, #8]
 8002426:	e023      	b.n	8002470 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	4a1e      	ldr	r2, [pc, #120]	; (80024a4 <LL_USART_Init+0xe8>)
 800242c:	4293      	cmp	r3, r2
 800242e:	d104      	bne.n	800243a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002430:	200c      	movs	r0, #12
 8002432:	f7ff fb4d 	bl	8001ad0 <LL_RCC_GetUSARTClockFreq>
 8002436:	60b8      	str	r0, [r7, #8]
 8002438:	e01a      	b.n	8002470 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	4a1a      	ldr	r2, [pc, #104]	; (80024a8 <LL_USART_Init+0xec>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d104      	bne.n	800244c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002442:	2030      	movs	r0, #48	; 0x30
 8002444:	f7ff fb44 	bl	8001ad0 <LL_RCC_GetUSARTClockFreq>
 8002448:	60b8      	str	r0, [r7, #8]
 800244a:	e011      	b.n	8002470 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	4a17      	ldr	r2, [pc, #92]	; (80024ac <LL_USART_Init+0xf0>)
 8002450:	4293      	cmp	r3, r2
 8002452:	d104      	bne.n	800245e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002454:	20c0      	movs	r0, #192	; 0xc0
 8002456:	f7ff fc1b 	bl	8001c90 <LL_RCC_GetUARTClockFreq>
 800245a:	60b8      	str	r0, [r7, #8]
 800245c:	e008      	b.n	8002470 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	4a13      	ldr	r2, [pc, #76]	; (80024b0 <LL_USART_Init+0xf4>)
 8002462:	4293      	cmp	r3, r2
 8002464:	d104      	bne.n	8002470 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002466:	f44f 7040 	mov.w	r0, #768	; 0x300
 800246a:	f7ff fc11 	bl	8001c90 <LL_RCC_GetUARTClockFreq>
 800246e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d00d      	beq.n	8002492 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002476:	683b      	ldr	r3, [r7, #0]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	2b00      	cmp	r3, #0
 800247c:	d009      	beq.n	8002492 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800247e:	2300      	movs	r3, #0
 8002480:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	699a      	ldr	r2, [r3, #24]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	68b9      	ldr	r1, [r7, #8]
 800248c:	6878      	ldr	r0, [r7, #4]
 800248e:	f7ff ff5e 	bl	800234e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002492:	7bfb      	ldrb	r3, [r7, #15]
}
 8002494:	4618      	mov	r0, r3
 8002496:	3710      	adds	r7, #16
 8002498:	46bd      	mov	sp, r7
 800249a:	bd80      	pop	{r7, pc}
 800249c:	efff69f3 	.word	0xefff69f3
 80024a0:	40013800 	.word	0x40013800
 80024a4:	40004400 	.word	0x40004400
 80024a8:	40004800 	.word	0x40004800
 80024ac:	40004c00 	.word	0x40004c00
 80024b0:	40005000 	.word	0x40005000

080024b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80024b4:	b480      	push	{r7}
 80024b6:	b083      	sub	sp, #12
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80024be:	687a      	ldr	r2, [r7, #4]
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80024c6:	4a07      	ldr	r2, [pc, #28]	; (80024e4 <LL_InitTick+0x30>)
 80024c8:	3b01      	subs	r3, #1
 80024ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <LL_InitTick+0x30>)
 80024ce:	2200      	movs	r2, #0
 80024d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80024d2:	4b04      	ldr	r3, [pc, #16]	; (80024e4 <LL_InitTick+0x30>)
 80024d4:	2205      	movs	r2, #5
 80024d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80024d8:	bf00      	nop
 80024da:	370c      	adds	r7, #12
 80024dc:	46bd      	mov	sp, r7
 80024de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e2:	4770      	bx	lr
 80024e4:	e000e010 	.word	0xe000e010

080024e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80024f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80024f4:	6878      	ldr	r0, [r7, #4]
 80024f6:	f7ff ffdd 	bl	80024b4 <LL_InitTick>
}
 80024fa:	bf00      	nop
 80024fc:	3708      	adds	r7, #8
 80024fe:	46bd      	mov	sp, r7
 8002500:	bd80      	pop	{r7, pc}
	...

08002504 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002504:	b480      	push	{r7}
 8002506:	b083      	sub	sp, #12
 8002508:	af00      	add	r7, sp, #0
 800250a:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 800250c:	4a04      	ldr	r2, [pc, #16]	; (8002520 <LL_SetSystemCoreClock+0x1c>)
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	6013      	str	r3, [r2, #0]
}
 8002512:	bf00      	nop
 8002514:	370c      	adds	r7, #12
 8002516:	46bd      	mov	sp, r7
 8002518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251c:	4770      	bx	lr
 800251e:	bf00      	nop
 8002520:	20000000 	.word	0x20000000

08002524 <__errno>:
 8002524:	4b01      	ldr	r3, [pc, #4]	; (800252c <__errno+0x8>)
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	20000004 	.word	0x20000004

08002530 <__libc_init_array>:
 8002530:	b570      	push	{r4, r5, r6, lr}
 8002532:	4e0d      	ldr	r6, [pc, #52]	; (8002568 <__libc_init_array+0x38>)
 8002534:	4c0d      	ldr	r4, [pc, #52]	; (800256c <__libc_init_array+0x3c>)
 8002536:	1ba4      	subs	r4, r4, r6
 8002538:	10a4      	asrs	r4, r4, #2
 800253a:	2500      	movs	r5, #0
 800253c:	42a5      	cmp	r5, r4
 800253e:	d109      	bne.n	8002554 <__libc_init_array+0x24>
 8002540:	4e0b      	ldr	r6, [pc, #44]	; (8002570 <__libc_init_array+0x40>)
 8002542:	4c0c      	ldr	r4, [pc, #48]	; (8002574 <__libc_init_array+0x44>)
 8002544:	f000 ff68 	bl	8003418 <_init>
 8002548:	1ba4      	subs	r4, r4, r6
 800254a:	10a4      	asrs	r4, r4, #2
 800254c:	2500      	movs	r5, #0
 800254e:	42a5      	cmp	r5, r4
 8002550:	d105      	bne.n	800255e <__libc_init_array+0x2e>
 8002552:	bd70      	pop	{r4, r5, r6, pc}
 8002554:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002558:	4798      	blx	r3
 800255a:	3501      	adds	r5, #1
 800255c:	e7ee      	b.n	800253c <__libc_init_array+0xc>
 800255e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002562:	4798      	blx	r3
 8002564:	3501      	adds	r5, #1
 8002566:	e7f2      	b.n	800254e <__libc_init_array+0x1e>
 8002568:	08003664 	.word	0x08003664
 800256c:	08003664 	.word	0x08003664
 8002570:	08003664 	.word	0x08003664
 8002574:	08003668 	.word	0x08003668

08002578 <memset>:
 8002578:	4402      	add	r2, r0
 800257a:	4603      	mov	r3, r0
 800257c:	4293      	cmp	r3, r2
 800257e:	d100      	bne.n	8002582 <memset+0xa>
 8002580:	4770      	bx	lr
 8002582:	f803 1b01 	strb.w	r1, [r3], #1
 8002586:	e7f9      	b.n	800257c <memset+0x4>

08002588 <iprintf>:
 8002588:	b40f      	push	{r0, r1, r2, r3}
 800258a:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <iprintf+0x2c>)
 800258c:	b513      	push	{r0, r1, r4, lr}
 800258e:	681c      	ldr	r4, [r3, #0]
 8002590:	b124      	cbz	r4, 800259c <iprintf+0x14>
 8002592:	69a3      	ldr	r3, [r4, #24]
 8002594:	b913      	cbnz	r3, 800259c <iprintf+0x14>
 8002596:	4620      	mov	r0, r4
 8002598:	f000 fa22 	bl	80029e0 <__sinit>
 800259c:	ab05      	add	r3, sp, #20
 800259e:	9a04      	ldr	r2, [sp, #16]
 80025a0:	68a1      	ldr	r1, [r4, #8]
 80025a2:	9301      	str	r3, [sp, #4]
 80025a4:	4620      	mov	r0, r4
 80025a6:	f000 fbdb 	bl	8002d60 <_vfiprintf_r>
 80025aa:	b002      	add	sp, #8
 80025ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80025b0:	b004      	add	sp, #16
 80025b2:	4770      	bx	lr
 80025b4:	20000004 	.word	0x20000004

080025b8 <_puts_r>:
 80025b8:	b570      	push	{r4, r5, r6, lr}
 80025ba:	460e      	mov	r6, r1
 80025bc:	4605      	mov	r5, r0
 80025be:	b118      	cbz	r0, 80025c8 <_puts_r+0x10>
 80025c0:	6983      	ldr	r3, [r0, #24]
 80025c2:	b90b      	cbnz	r3, 80025c8 <_puts_r+0x10>
 80025c4:	f000 fa0c 	bl	80029e0 <__sinit>
 80025c8:	69ab      	ldr	r3, [r5, #24]
 80025ca:	68ac      	ldr	r4, [r5, #8]
 80025cc:	b913      	cbnz	r3, 80025d4 <_puts_r+0x1c>
 80025ce:	4628      	mov	r0, r5
 80025d0:	f000 fa06 	bl	80029e0 <__sinit>
 80025d4:	4b23      	ldr	r3, [pc, #140]	; (8002664 <_puts_r+0xac>)
 80025d6:	429c      	cmp	r4, r3
 80025d8:	d117      	bne.n	800260a <_puts_r+0x52>
 80025da:	686c      	ldr	r4, [r5, #4]
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	071b      	lsls	r3, r3, #28
 80025e0:	d51d      	bpl.n	800261e <_puts_r+0x66>
 80025e2:	6923      	ldr	r3, [r4, #16]
 80025e4:	b1db      	cbz	r3, 800261e <_puts_r+0x66>
 80025e6:	3e01      	subs	r6, #1
 80025e8:	68a3      	ldr	r3, [r4, #8]
 80025ea:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80025ee:	3b01      	subs	r3, #1
 80025f0:	60a3      	str	r3, [r4, #8]
 80025f2:	b9e9      	cbnz	r1, 8002630 <_puts_r+0x78>
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	da2e      	bge.n	8002656 <_puts_r+0x9e>
 80025f8:	4622      	mov	r2, r4
 80025fa:	210a      	movs	r1, #10
 80025fc:	4628      	mov	r0, r5
 80025fe:	f000 f83f 	bl	8002680 <__swbuf_r>
 8002602:	3001      	adds	r0, #1
 8002604:	d011      	beq.n	800262a <_puts_r+0x72>
 8002606:	200a      	movs	r0, #10
 8002608:	e011      	b.n	800262e <_puts_r+0x76>
 800260a:	4b17      	ldr	r3, [pc, #92]	; (8002668 <_puts_r+0xb0>)
 800260c:	429c      	cmp	r4, r3
 800260e:	d101      	bne.n	8002614 <_puts_r+0x5c>
 8002610:	68ac      	ldr	r4, [r5, #8]
 8002612:	e7e3      	b.n	80025dc <_puts_r+0x24>
 8002614:	4b15      	ldr	r3, [pc, #84]	; (800266c <_puts_r+0xb4>)
 8002616:	429c      	cmp	r4, r3
 8002618:	bf08      	it	eq
 800261a:	68ec      	ldreq	r4, [r5, #12]
 800261c:	e7de      	b.n	80025dc <_puts_r+0x24>
 800261e:	4621      	mov	r1, r4
 8002620:	4628      	mov	r0, r5
 8002622:	f000 f87f 	bl	8002724 <__swsetup_r>
 8002626:	2800      	cmp	r0, #0
 8002628:	d0dd      	beq.n	80025e6 <_puts_r+0x2e>
 800262a:	f04f 30ff 	mov.w	r0, #4294967295
 800262e:	bd70      	pop	{r4, r5, r6, pc}
 8002630:	2b00      	cmp	r3, #0
 8002632:	da04      	bge.n	800263e <_puts_r+0x86>
 8002634:	69a2      	ldr	r2, [r4, #24]
 8002636:	429a      	cmp	r2, r3
 8002638:	dc06      	bgt.n	8002648 <_puts_r+0x90>
 800263a:	290a      	cmp	r1, #10
 800263c:	d004      	beq.n	8002648 <_puts_r+0x90>
 800263e:	6823      	ldr	r3, [r4, #0]
 8002640:	1c5a      	adds	r2, r3, #1
 8002642:	6022      	str	r2, [r4, #0]
 8002644:	7019      	strb	r1, [r3, #0]
 8002646:	e7cf      	b.n	80025e8 <_puts_r+0x30>
 8002648:	4622      	mov	r2, r4
 800264a:	4628      	mov	r0, r5
 800264c:	f000 f818 	bl	8002680 <__swbuf_r>
 8002650:	3001      	adds	r0, #1
 8002652:	d1c9      	bne.n	80025e8 <_puts_r+0x30>
 8002654:	e7e9      	b.n	800262a <_puts_r+0x72>
 8002656:	6823      	ldr	r3, [r4, #0]
 8002658:	200a      	movs	r0, #10
 800265a:	1c5a      	adds	r2, r3, #1
 800265c:	6022      	str	r2, [r4, #0]
 800265e:	7018      	strb	r0, [r3, #0]
 8002660:	e7e5      	b.n	800262e <_puts_r+0x76>
 8002662:	bf00      	nop
 8002664:	080035f0 	.word	0x080035f0
 8002668:	08003610 	.word	0x08003610
 800266c:	080035d0 	.word	0x080035d0

08002670 <puts>:
 8002670:	4b02      	ldr	r3, [pc, #8]	; (800267c <puts+0xc>)
 8002672:	4601      	mov	r1, r0
 8002674:	6818      	ldr	r0, [r3, #0]
 8002676:	f7ff bf9f 	b.w	80025b8 <_puts_r>
 800267a:	bf00      	nop
 800267c:	20000004 	.word	0x20000004

08002680 <__swbuf_r>:
 8002680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002682:	460e      	mov	r6, r1
 8002684:	4614      	mov	r4, r2
 8002686:	4605      	mov	r5, r0
 8002688:	b118      	cbz	r0, 8002692 <__swbuf_r+0x12>
 800268a:	6983      	ldr	r3, [r0, #24]
 800268c:	b90b      	cbnz	r3, 8002692 <__swbuf_r+0x12>
 800268e:	f000 f9a7 	bl	80029e0 <__sinit>
 8002692:	4b21      	ldr	r3, [pc, #132]	; (8002718 <__swbuf_r+0x98>)
 8002694:	429c      	cmp	r4, r3
 8002696:	d12a      	bne.n	80026ee <__swbuf_r+0x6e>
 8002698:	686c      	ldr	r4, [r5, #4]
 800269a:	69a3      	ldr	r3, [r4, #24]
 800269c:	60a3      	str	r3, [r4, #8]
 800269e:	89a3      	ldrh	r3, [r4, #12]
 80026a0:	071a      	lsls	r2, r3, #28
 80026a2:	d52e      	bpl.n	8002702 <__swbuf_r+0x82>
 80026a4:	6923      	ldr	r3, [r4, #16]
 80026a6:	b363      	cbz	r3, 8002702 <__swbuf_r+0x82>
 80026a8:	6923      	ldr	r3, [r4, #16]
 80026aa:	6820      	ldr	r0, [r4, #0]
 80026ac:	1ac0      	subs	r0, r0, r3
 80026ae:	6963      	ldr	r3, [r4, #20]
 80026b0:	b2f6      	uxtb	r6, r6
 80026b2:	4283      	cmp	r3, r0
 80026b4:	4637      	mov	r7, r6
 80026b6:	dc04      	bgt.n	80026c2 <__swbuf_r+0x42>
 80026b8:	4621      	mov	r1, r4
 80026ba:	4628      	mov	r0, r5
 80026bc:	f000 f926 	bl	800290c <_fflush_r>
 80026c0:	bb28      	cbnz	r0, 800270e <__swbuf_r+0x8e>
 80026c2:	68a3      	ldr	r3, [r4, #8]
 80026c4:	3b01      	subs	r3, #1
 80026c6:	60a3      	str	r3, [r4, #8]
 80026c8:	6823      	ldr	r3, [r4, #0]
 80026ca:	1c5a      	adds	r2, r3, #1
 80026cc:	6022      	str	r2, [r4, #0]
 80026ce:	701e      	strb	r6, [r3, #0]
 80026d0:	6963      	ldr	r3, [r4, #20]
 80026d2:	3001      	adds	r0, #1
 80026d4:	4283      	cmp	r3, r0
 80026d6:	d004      	beq.n	80026e2 <__swbuf_r+0x62>
 80026d8:	89a3      	ldrh	r3, [r4, #12]
 80026da:	07db      	lsls	r3, r3, #31
 80026dc:	d519      	bpl.n	8002712 <__swbuf_r+0x92>
 80026de:	2e0a      	cmp	r6, #10
 80026e0:	d117      	bne.n	8002712 <__swbuf_r+0x92>
 80026e2:	4621      	mov	r1, r4
 80026e4:	4628      	mov	r0, r5
 80026e6:	f000 f911 	bl	800290c <_fflush_r>
 80026ea:	b190      	cbz	r0, 8002712 <__swbuf_r+0x92>
 80026ec:	e00f      	b.n	800270e <__swbuf_r+0x8e>
 80026ee:	4b0b      	ldr	r3, [pc, #44]	; (800271c <__swbuf_r+0x9c>)
 80026f0:	429c      	cmp	r4, r3
 80026f2:	d101      	bne.n	80026f8 <__swbuf_r+0x78>
 80026f4:	68ac      	ldr	r4, [r5, #8]
 80026f6:	e7d0      	b.n	800269a <__swbuf_r+0x1a>
 80026f8:	4b09      	ldr	r3, [pc, #36]	; (8002720 <__swbuf_r+0xa0>)
 80026fa:	429c      	cmp	r4, r3
 80026fc:	bf08      	it	eq
 80026fe:	68ec      	ldreq	r4, [r5, #12]
 8002700:	e7cb      	b.n	800269a <__swbuf_r+0x1a>
 8002702:	4621      	mov	r1, r4
 8002704:	4628      	mov	r0, r5
 8002706:	f000 f80d 	bl	8002724 <__swsetup_r>
 800270a:	2800      	cmp	r0, #0
 800270c:	d0cc      	beq.n	80026a8 <__swbuf_r+0x28>
 800270e:	f04f 37ff 	mov.w	r7, #4294967295
 8002712:	4638      	mov	r0, r7
 8002714:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002716:	bf00      	nop
 8002718:	080035f0 	.word	0x080035f0
 800271c:	08003610 	.word	0x08003610
 8002720:	080035d0 	.word	0x080035d0

08002724 <__swsetup_r>:
 8002724:	4b32      	ldr	r3, [pc, #200]	; (80027f0 <__swsetup_r+0xcc>)
 8002726:	b570      	push	{r4, r5, r6, lr}
 8002728:	681d      	ldr	r5, [r3, #0]
 800272a:	4606      	mov	r6, r0
 800272c:	460c      	mov	r4, r1
 800272e:	b125      	cbz	r5, 800273a <__swsetup_r+0x16>
 8002730:	69ab      	ldr	r3, [r5, #24]
 8002732:	b913      	cbnz	r3, 800273a <__swsetup_r+0x16>
 8002734:	4628      	mov	r0, r5
 8002736:	f000 f953 	bl	80029e0 <__sinit>
 800273a:	4b2e      	ldr	r3, [pc, #184]	; (80027f4 <__swsetup_r+0xd0>)
 800273c:	429c      	cmp	r4, r3
 800273e:	d10f      	bne.n	8002760 <__swsetup_r+0x3c>
 8002740:	686c      	ldr	r4, [r5, #4]
 8002742:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002746:	b29a      	uxth	r2, r3
 8002748:	0715      	lsls	r5, r2, #28
 800274a:	d42c      	bmi.n	80027a6 <__swsetup_r+0x82>
 800274c:	06d0      	lsls	r0, r2, #27
 800274e:	d411      	bmi.n	8002774 <__swsetup_r+0x50>
 8002750:	2209      	movs	r2, #9
 8002752:	6032      	str	r2, [r6, #0]
 8002754:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002758:	81a3      	strh	r3, [r4, #12]
 800275a:	f04f 30ff 	mov.w	r0, #4294967295
 800275e:	e03e      	b.n	80027de <__swsetup_r+0xba>
 8002760:	4b25      	ldr	r3, [pc, #148]	; (80027f8 <__swsetup_r+0xd4>)
 8002762:	429c      	cmp	r4, r3
 8002764:	d101      	bne.n	800276a <__swsetup_r+0x46>
 8002766:	68ac      	ldr	r4, [r5, #8]
 8002768:	e7eb      	b.n	8002742 <__swsetup_r+0x1e>
 800276a:	4b24      	ldr	r3, [pc, #144]	; (80027fc <__swsetup_r+0xd8>)
 800276c:	429c      	cmp	r4, r3
 800276e:	bf08      	it	eq
 8002770:	68ec      	ldreq	r4, [r5, #12]
 8002772:	e7e6      	b.n	8002742 <__swsetup_r+0x1e>
 8002774:	0751      	lsls	r1, r2, #29
 8002776:	d512      	bpl.n	800279e <__swsetup_r+0x7a>
 8002778:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800277a:	b141      	cbz	r1, 800278e <__swsetup_r+0x6a>
 800277c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002780:	4299      	cmp	r1, r3
 8002782:	d002      	beq.n	800278a <__swsetup_r+0x66>
 8002784:	4630      	mov	r0, r6
 8002786:	f000 fa19 	bl	8002bbc <_free_r>
 800278a:	2300      	movs	r3, #0
 800278c:	6363      	str	r3, [r4, #52]	; 0x34
 800278e:	89a3      	ldrh	r3, [r4, #12]
 8002790:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002794:	81a3      	strh	r3, [r4, #12]
 8002796:	2300      	movs	r3, #0
 8002798:	6063      	str	r3, [r4, #4]
 800279a:	6923      	ldr	r3, [r4, #16]
 800279c:	6023      	str	r3, [r4, #0]
 800279e:	89a3      	ldrh	r3, [r4, #12]
 80027a0:	f043 0308 	orr.w	r3, r3, #8
 80027a4:	81a3      	strh	r3, [r4, #12]
 80027a6:	6923      	ldr	r3, [r4, #16]
 80027a8:	b94b      	cbnz	r3, 80027be <__swsetup_r+0x9a>
 80027aa:	89a3      	ldrh	r3, [r4, #12]
 80027ac:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80027b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80027b4:	d003      	beq.n	80027be <__swsetup_r+0x9a>
 80027b6:	4621      	mov	r1, r4
 80027b8:	4630      	mov	r0, r6
 80027ba:	f000 f9bf 	bl	8002b3c <__smakebuf_r>
 80027be:	89a2      	ldrh	r2, [r4, #12]
 80027c0:	f012 0301 	ands.w	r3, r2, #1
 80027c4:	d00c      	beq.n	80027e0 <__swsetup_r+0xbc>
 80027c6:	2300      	movs	r3, #0
 80027c8:	60a3      	str	r3, [r4, #8]
 80027ca:	6963      	ldr	r3, [r4, #20]
 80027cc:	425b      	negs	r3, r3
 80027ce:	61a3      	str	r3, [r4, #24]
 80027d0:	6923      	ldr	r3, [r4, #16]
 80027d2:	b953      	cbnz	r3, 80027ea <__swsetup_r+0xc6>
 80027d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80027d8:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 80027dc:	d1ba      	bne.n	8002754 <__swsetup_r+0x30>
 80027de:	bd70      	pop	{r4, r5, r6, pc}
 80027e0:	0792      	lsls	r2, r2, #30
 80027e2:	bf58      	it	pl
 80027e4:	6963      	ldrpl	r3, [r4, #20]
 80027e6:	60a3      	str	r3, [r4, #8]
 80027e8:	e7f2      	b.n	80027d0 <__swsetup_r+0xac>
 80027ea:	2000      	movs	r0, #0
 80027ec:	e7f7      	b.n	80027de <__swsetup_r+0xba>
 80027ee:	bf00      	nop
 80027f0:	20000004 	.word	0x20000004
 80027f4:	080035f0 	.word	0x080035f0
 80027f8:	08003610 	.word	0x08003610
 80027fc:	080035d0 	.word	0x080035d0

08002800 <__sflush_r>:
 8002800:	898a      	ldrh	r2, [r1, #12]
 8002802:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002806:	4605      	mov	r5, r0
 8002808:	0710      	lsls	r0, r2, #28
 800280a:	460c      	mov	r4, r1
 800280c:	d458      	bmi.n	80028c0 <__sflush_r+0xc0>
 800280e:	684b      	ldr	r3, [r1, #4]
 8002810:	2b00      	cmp	r3, #0
 8002812:	dc05      	bgt.n	8002820 <__sflush_r+0x20>
 8002814:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002816:	2b00      	cmp	r3, #0
 8002818:	dc02      	bgt.n	8002820 <__sflush_r+0x20>
 800281a:	2000      	movs	r0, #0
 800281c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002820:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002822:	2e00      	cmp	r6, #0
 8002824:	d0f9      	beq.n	800281a <__sflush_r+0x1a>
 8002826:	2300      	movs	r3, #0
 8002828:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800282c:	682f      	ldr	r7, [r5, #0]
 800282e:	6a21      	ldr	r1, [r4, #32]
 8002830:	602b      	str	r3, [r5, #0]
 8002832:	d032      	beq.n	800289a <__sflush_r+0x9a>
 8002834:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002836:	89a3      	ldrh	r3, [r4, #12]
 8002838:	075a      	lsls	r2, r3, #29
 800283a:	d505      	bpl.n	8002848 <__sflush_r+0x48>
 800283c:	6863      	ldr	r3, [r4, #4]
 800283e:	1ac0      	subs	r0, r0, r3
 8002840:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002842:	b10b      	cbz	r3, 8002848 <__sflush_r+0x48>
 8002844:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002846:	1ac0      	subs	r0, r0, r3
 8002848:	2300      	movs	r3, #0
 800284a:	4602      	mov	r2, r0
 800284c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800284e:	6a21      	ldr	r1, [r4, #32]
 8002850:	4628      	mov	r0, r5
 8002852:	47b0      	blx	r6
 8002854:	1c43      	adds	r3, r0, #1
 8002856:	89a3      	ldrh	r3, [r4, #12]
 8002858:	d106      	bne.n	8002868 <__sflush_r+0x68>
 800285a:	6829      	ldr	r1, [r5, #0]
 800285c:	291d      	cmp	r1, #29
 800285e:	d848      	bhi.n	80028f2 <__sflush_r+0xf2>
 8002860:	4a29      	ldr	r2, [pc, #164]	; (8002908 <__sflush_r+0x108>)
 8002862:	40ca      	lsrs	r2, r1
 8002864:	07d6      	lsls	r6, r2, #31
 8002866:	d544      	bpl.n	80028f2 <__sflush_r+0xf2>
 8002868:	2200      	movs	r2, #0
 800286a:	6062      	str	r2, [r4, #4]
 800286c:	04d9      	lsls	r1, r3, #19
 800286e:	6922      	ldr	r2, [r4, #16]
 8002870:	6022      	str	r2, [r4, #0]
 8002872:	d504      	bpl.n	800287e <__sflush_r+0x7e>
 8002874:	1c42      	adds	r2, r0, #1
 8002876:	d101      	bne.n	800287c <__sflush_r+0x7c>
 8002878:	682b      	ldr	r3, [r5, #0]
 800287a:	b903      	cbnz	r3, 800287e <__sflush_r+0x7e>
 800287c:	6560      	str	r0, [r4, #84]	; 0x54
 800287e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002880:	602f      	str	r7, [r5, #0]
 8002882:	2900      	cmp	r1, #0
 8002884:	d0c9      	beq.n	800281a <__sflush_r+0x1a>
 8002886:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800288a:	4299      	cmp	r1, r3
 800288c:	d002      	beq.n	8002894 <__sflush_r+0x94>
 800288e:	4628      	mov	r0, r5
 8002890:	f000 f994 	bl	8002bbc <_free_r>
 8002894:	2000      	movs	r0, #0
 8002896:	6360      	str	r0, [r4, #52]	; 0x34
 8002898:	e7c0      	b.n	800281c <__sflush_r+0x1c>
 800289a:	2301      	movs	r3, #1
 800289c:	4628      	mov	r0, r5
 800289e:	47b0      	blx	r6
 80028a0:	1c41      	adds	r1, r0, #1
 80028a2:	d1c8      	bne.n	8002836 <__sflush_r+0x36>
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d0c5      	beq.n	8002836 <__sflush_r+0x36>
 80028aa:	2b1d      	cmp	r3, #29
 80028ac:	d001      	beq.n	80028b2 <__sflush_r+0xb2>
 80028ae:	2b16      	cmp	r3, #22
 80028b0:	d101      	bne.n	80028b6 <__sflush_r+0xb6>
 80028b2:	602f      	str	r7, [r5, #0]
 80028b4:	e7b1      	b.n	800281a <__sflush_r+0x1a>
 80028b6:	89a3      	ldrh	r3, [r4, #12]
 80028b8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028bc:	81a3      	strh	r3, [r4, #12]
 80028be:	e7ad      	b.n	800281c <__sflush_r+0x1c>
 80028c0:	690f      	ldr	r7, [r1, #16]
 80028c2:	2f00      	cmp	r7, #0
 80028c4:	d0a9      	beq.n	800281a <__sflush_r+0x1a>
 80028c6:	0793      	lsls	r3, r2, #30
 80028c8:	680e      	ldr	r6, [r1, #0]
 80028ca:	bf08      	it	eq
 80028cc:	694b      	ldreq	r3, [r1, #20]
 80028ce:	600f      	str	r7, [r1, #0]
 80028d0:	bf18      	it	ne
 80028d2:	2300      	movne	r3, #0
 80028d4:	eba6 0807 	sub.w	r8, r6, r7
 80028d8:	608b      	str	r3, [r1, #8]
 80028da:	f1b8 0f00 	cmp.w	r8, #0
 80028de:	dd9c      	ble.n	800281a <__sflush_r+0x1a>
 80028e0:	4643      	mov	r3, r8
 80028e2:	463a      	mov	r2, r7
 80028e4:	6a21      	ldr	r1, [r4, #32]
 80028e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80028e8:	4628      	mov	r0, r5
 80028ea:	47b0      	blx	r6
 80028ec:	2800      	cmp	r0, #0
 80028ee:	dc06      	bgt.n	80028fe <__sflush_r+0xfe>
 80028f0:	89a3      	ldrh	r3, [r4, #12]
 80028f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80028f6:	81a3      	strh	r3, [r4, #12]
 80028f8:	f04f 30ff 	mov.w	r0, #4294967295
 80028fc:	e78e      	b.n	800281c <__sflush_r+0x1c>
 80028fe:	4407      	add	r7, r0
 8002900:	eba8 0800 	sub.w	r8, r8, r0
 8002904:	e7e9      	b.n	80028da <__sflush_r+0xda>
 8002906:	bf00      	nop
 8002908:	20400001 	.word	0x20400001

0800290c <_fflush_r>:
 800290c:	b538      	push	{r3, r4, r5, lr}
 800290e:	690b      	ldr	r3, [r1, #16]
 8002910:	4605      	mov	r5, r0
 8002912:	460c      	mov	r4, r1
 8002914:	b1db      	cbz	r3, 800294e <_fflush_r+0x42>
 8002916:	b118      	cbz	r0, 8002920 <_fflush_r+0x14>
 8002918:	6983      	ldr	r3, [r0, #24]
 800291a:	b90b      	cbnz	r3, 8002920 <_fflush_r+0x14>
 800291c:	f000 f860 	bl	80029e0 <__sinit>
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <_fflush_r+0x48>)
 8002922:	429c      	cmp	r4, r3
 8002924:	d109      	bne.n	800293a <_fflush_r+0x2e>
 8002926:	686c      	ldr	r4, [r5, #4]
 8002928:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800292c:	b17b      	cbz	r3, 800294e <_fflush_r+0x42>
 800292e:	4621      	mov	r1, r4
 8002930:	4628      	mov	r0, r5
 8002932:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002936:	f7ff bf63 	b.w	8002800 <__sflush_r>
 800293a:	4b07      	ldr	r3, [pc, #28]	; (8002958 <_fflush_r+0x4c>)
 800293c:	429c      	cmp	r4, r3
 800293e:	d101      	bne.n	8002944 <_fflush_r+0x38>
 8002940:	68ac      	ldr	r4, [r5, #8]
 8002942:	e7f1      	b.n	8002928 <_fflush_r+0x1c>
 8002944:	4b05      	ldr	r3, [pc, #20]	; (800295c <_fflush_r+0x50>)
 8002946:	429c      	cmp	r4, r3
 8002948:	bf08      	it	eq
 800294a:	68ec      	ldreq	r4, [r5, #12]
 800294c:	e7ec      	b.n	8002928 <_fflush_r+0x1c>
 800294e:	2000      	movs	r0, #0
 8002950:	bd38      	pop	{r3, r4, r5, pc}
 8002952:	bf00      	nop
 8002954:	080035f0 	.word	0x080035f0
 8002958:	08003610 	.word	0x08003610
 800295c:	080035d0 	.word	0x080035d0

08002960 <std>:
 8002960:	2300      	movs	r3, #0
 8002962:	b510      	push	{r4, lr}
 8002964:	4604      	mov	r4, r0
 8002966:	e9c0 3300 	strd	r3, r3, [r0]
 800296a:	6083      	str	r3, [r0, #8]
 800296c:	8181      	strh	r1, [r0, #12]
 800296e:	6643      	str	r3, [r0, #100]	; 0x64
 8002970:	81c2      	strh	r2, [r0, #14]
 8002972:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002976:	6183      	str	r3, [r0, #24]
 8002978:	4619      	mov	r1, r3
 800297a:	2208      	movs	r2, #8
 800297c:	305c      	adds	r0, #92	; 0x5c
 800297e:	f7ff fdfb 	bl	8002578 <memset>
 8002982:	4b05      	ldr	r3, [pc, #20]	; (8002998 <std+0x38>)
 8002984:	6263      	str	r3, [r4, #36]	; 0x24
 8002986:	4b05      	ldr	r3, [pc, #20]	; (800299c <std+0x3c>)
 8002988:	62a3      	str	r3, [r4, #40]	; 0x28
 800298a:	4b05      	ldr	r3, [pc, #20]	; (80029a0 <std+0x40>)
 800298c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800298e:	4b05      	ldr	r3, [pc, #20]	; (80029a4 <std+0x44>)
 8002990:	6224      	str	r4, [r4, #32]
 8002992:	6323      	str	r3, [r4, #48]	; 0x30
 8002994:	bd10      	pop	{r4, pc}
 8002996:	bf00      	nop
 8002998:	080032bd 	.word	0x080032bd
 800299c:	080032df 	.word	0x080032df
 80029a0:	08003317 	.word	0x08003317
 80029a4:	0800333b 	.word	0x0800333b

080029a8 <_cleanup_r>:
 80029a8:	4901      	ldr	r1, [pc, #4]	; (80029b0 <_cleanup_r+0x8>)
 80029aa:	f000 b885 	b.w	8002ab8 <_fwalk_reent>
 80029ae:	bf00      	nop
 80029b0:	0800290d 	.word	0x0800290d

080029b4 <__sfmoreglue>:
 80029b4:	b570      	push	{r4, r5, r6, lr}
 80029b6:	1e4a      	subs	r2, r1, #1
 80029b8:	2568      	movs	r5, #104	; 0x68
 80029ba:	4355      	muls	r5, r2
 80029bc:	460e      	mov	r6, r1
 80029be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80029c2:	f000 f949 	bl	8002c58 <_malloc_r>
 80029c6:	4604      	mov	r4, r0
 80029c8:	b140      	cbz	r0, 80029dc <__sfmoreglue+0x28>
 80029ca:	2100      	movs	r1, #0
 80029cc:	e9c0 1600 	strd	r1, r6, [r0]
 80029d0:	300c      	adds	r0, #12
 80029d2:	60a0      	str	r0, [r4, #8]
 80029d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80029d8:	f7ff fdce 	bl	8002578 <memset>
 80029dc:	4620      	mov	r0, r4
 80029de:	bd70      	pop	{r4, r5, r6, pc}

080029e0 <__sinit>:
 80029e0:	6983      	ldr	r3, [r0, #24]
 80029e2:	b510      	push	{r4, lr}
 80029e4:	4604      	mov	r4, r0
 80029e6:	bb33      	cbnz	r3, 8002a36 <__sinit+0x56>
 80029e8:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 80029ec:	6503      	str	r3, [r0, #80]	; 0x50
 80029ee:	4b12      	ldr	r3, [pc, #72]	; (8002a38 <__sinit+0x58>)
 80029f0:	4a12      	ldr	r2, [pc, #72]	; (8002a3c <__sinit+0x5c>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	6282      	str	r2, [r0, #40]	; 0x28
 80029f6:	4298      	cmp	r0, r3
 80029f8:	bf04      	itt	eq
 80029fa:	2301      	moveq	r3, #1
 80029fc:	6183      	streq	r3, [r0, #24]
 80029fe:	f000 f81f 	bl	8002a40 <__sfp>
 8002a02:	6060      	str	r0, [r4, #4]
 8002a04:	4620      	mov	r0, r4
 8002a06:	f000 f81b 	bl	8002a40 <__sfp>
 8002a0a:	60a0      	str	r0, [r4, #8]
 8002a0c:	4620      	mov	r0, r4
 8002a0e:	f000 f817 	bl	8002a40 <__sfp>
 8002a12:	2200      	movs	r2, #0
 8002a14:	60e0      	str	r0, [r4, #12]
 8002a16:	2104      	movs	r1, #4
 8002a18:	6860      	ldr	r0, [r4, #4]
 8002a1a:	f7ff ffa1 	bl	8002960 <std>
 8002a1e:	2201      	movs	r2, #1
 8002a20:	2109      	movs	r1, #9
 8002a22:	68a0      	ldr	r0, [r4, #8]
 8002a24:	f7ff ff9c 	bl	8002960 <std>
 8002a28:	2202      	movs	r2, #2
 8002a2a:	2112      	movs	r1, #18
 8002a2c:	68e0      	ldr	r0, [r4, #12]
 8002a2e:	f7ff ff97 	bl	8002960 <std>
 8002a32:	2301      	movs	r3, #1
 8002a34:	61a3      	str	r3, [r4, #24]
 8002a36:	bd10      	pop	{r4, pc}
 8002a38:	080035cc 	.word	0x080035cc
 8002a3c:	080029a9 	.word	0x080029a9

08002a40 <__sfp>:
 8002a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a42:	4b1b      	ldr	r3, [pc, #108]	; (8002ab0 <__sfp+0x70>)
 8002a44:	681e      	ldr	r6, [r3, #0]
 8002a46:	69b3      	ldr	r3, [r6, #24]
 8002a48:	4607      	mov	r7, r0
 8002a4a:	b913      	cbnz	r3, 8002a52 <__sfp+0x12>
 8002a4c:	4630      	mov	r0, r6
 8002a4e:	f7ff ffc7 	bl	80029e0 <__sinit>
 8002a52:	3648      	adds	r6, #72	; 0x48
 8002a54:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002a58:	3b01      	subs	r3, #1
 8002a5a:	d503      	bpl.n	8002a64 <__sfp+0x24>
 8002a5c:	6833      	ldr	r3, [r6, #0]
 8002a5e:	b133      	cbz	r3, 8002a6e <__sfp+0x2e>
 8002a60:	6836      	ldr	r6, [r6, #0]
 8002a62:	e7f7      	b.n	8002a54 <__sfp+0x14>
 8002a64:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002a68:	b16d      	cbz	r5, 8002a86 <__sfp+0x46>
 8002a6a:	3468      	adds	r4, #104	; 0x68
 8002a6c:	e7f4      	b.n	8002a58 <__sfp+0x18>
 8002a6e:	2104      	movs	r1, #4
 8002a70:	4638      	mov	r0, r7
 8002a72:	f7ff ff9f 	bl	80029b4 <__sfmoreglue>
 8002a76:	6030      	str	r0, [r6, #0]
 8002a78:	2800      	cmp	r0, #0
 8002a7a:	d1f1      	bne.n	8002a60 <__sfp+0x20>
 8002a7c:	230c      	movs	r3, #12
 8002a7e:	603b      	str	r3, [r7, #0]
 8002a80:	4604      	mov	r4, r0
 8002a82:	4620      	mov	r0, r4
 8002a84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a86:	4b0b      	ldr	r3, [pc, #44]	; (8002ab4 <__sfp+0x74>)
 8002a88:	6665      	str	r5, [r4, #100]	; 0x64
 8002a8a:	e9c4 5500 	strd	r5, r5, [r4]
 8002a8e:	60a5      	str	r5, [r4, #8]
 8002a90:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002a94:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002a98:	2208      	movs	r2, #8
 8002a9a:	4629      	mov	r1, r5
 8002a9c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002aa0:	f7ff fd6a 	bl	8002578 <memset>
 8002aa4:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002aa8:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002aac:	e7e9      	b.n	8002a82 <__sfp+0x42>
 8002aae:	bf00      	nop
 8002ab0:	080035cc 	.word	0x080035cc
 8002ab4:	ffff0001 	.word	0xffff0001

08002ab8 <_fwalk_reent>:
 8002ab8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002abc:	4680      	mov	r8, r0
 8002abe:	4689      	mov	r9, r1
 8002ac0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002ac4:	2600      	movs	r6, #0
 8002ac6:	b914      	cbnz	r4, 8002ace <_fwalk_reent+0x16>
 8002ac8:	4630      	mov	r0, r6
 8002aca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002ace:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002ad2:	3f01      	subs	r7, #1
 8002ad4:	d501      	bpl.n	8002ada <_fwalk_reent+0x22>
 8002ad6:	6824      	ldr	r4, [r4, #0]
 8002ad8:	e7f5      	b.n	8002ac6 <_fwalk_reent+0xe>
 8002ada:	89ab      	ldrh	r3, [r5, #12]
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	d907      	bls.n	8002af0 <_fwalk_reent+0x38>
 8002ae0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	d003      	beq.n	8002af0 <_fwalk_reent+0x38>
 8002ae8:	4629      	mov	r1, r5
 8002aea:	4640      	mov	r0, r8
 8002aec:	47c8      	blx	r9
 8002aee:	4306      	orrs	r6, r0
 8002af0:	3568      	adds	r5, #104	; 0x68
 8002af2:	e7ee      	b.n	8002ad2 <_fwalk_reent+0x1a>

08002af4 <__swhatbuf_r>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	460e      	mov	r6, r1
 8002af8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002afc:	2900      	cmp	r1, #0
 8002afe:	b096      	sub	sp, #88	; 0x58
 8002b00:	4614      	mov	r4, r2
 8002b02:	461d      	mov	r5, r3
 8002b04:	da07      	bge.n	8002b16 <__swhatbuf_r+0x22>
 8002b06:	2300      	movs	r3, #0
 8002b08:	602b      	str	r3, [r5, #0]
 8002b0a:	89b3      	ldrh	r3, [r6, #12]
 8002b0c:	061a      	lsls	r2, r3, #24
 8002b0e:	d410      	bmi.n	8002b32 <__swhatbuf_r+0x3e>
 8002b10:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b14:	e00e      	b.n	8002b34 <__swhatbuf_r+0x40>
 8002b16:	466a      	mov	r2, sp
 8002b18:	f000 fc36 	bl	8003388 <_fstat_r>
 8002b1c:	2800      	cmp	r0, #0
 8002b1e:	dbf2      	blt.n	8002b06 <__swhatbuf_r+0x12>
 8002b20:	9a01      	ldr	r2, [sp, #4]
 8002b22:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002b26:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002b2a:	425a      	negs	r2, r3
 8002b2c:	415a      	adcs	r2, r3
 8002b2e:	602a      	str	r2, [r5, #0]
 8002b30:	e7ee      	b.n	8002b10 <__swhatbuf_r+0x1c>
 8002b32:	2340      	movs	r3, #64	; 0x40
 8002b34:	2000      	movs	r0, #0
 8002b36:	6023      	str	r3, [r4, #0]
 8002b38:	b016      	add	sp, #88	; 0x58
 8002b3a:	bd70      	pop	{r4, r5, r6, pc}

08002b3c <__smakebuf_r>:
 8002b3c:	898b      	ldrh	r3, [r1, #12]
 8002b3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002b40:	079d      	lsls	r5, r3, #30
 8002b42:	4606      	mov	r6, r0
 8002b44:	460c      	mov	r4, r1
 8002b46:	d507      	bpl.n	8002b58 <__smakebuf_r+0x1c>
 8002b48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002b4c:	6023      	str	r3, [r4, #0]
 8002b4e:	6123      	str	r3, [r4, #16]
 8002b50:	2301      	movs	r3, #1
 8002b52:	6163      	str	r3, [r4, #20]
 8002b54:	b002      	add	sp, #8
 8002b56:	bd70      	pop	{r4, r5, r6, pc}
 8002b58:	ab01      	add	r3, sp, #4
 8002b5a:	466a      	mov	r2, sp
 8002b5c:	f7ff ffca 	bl	8002af4 <__swhatbuf_r>
 8002b60:	9900      	ldr	r1, [sp, #0]
 8002b62:	4605      	mov	r5, r0
 8002b64:	4630      	mov	r0, r6
 8002b66:	f000 f877 	bl	8002c58 <_malloc_r>
 8002b6a:	b948      	cbnz	r0, 8002b80 <__smakebuf_r+0x44>
 8002b6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b70:	059a      	lsls	r2, r3, #22
 8002b72:	d4ef      	bmi.n	8002b54 <__smakebuf_r+0x18>
 8002b74:	f023 0303 	bic.w	r3, r3, #3
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	81a3      	strh	r3, [r4, #12]
 8002b7e:	e7e3      	b.n	8002b48 <__smakebuf_r+0xc>
 8002b80:	4b0d      	ldr	r3, [pc, #52]	; (8002bb8 <__smakebuf_r+0x7c>)
 8002b82:	62b3      	str	r3, [r6, #40]	; 0x28
 8002b84:	89a3      	ldrh	r3, [r4, #12]
 8002b86:	6020      	str	r0, [r4, #0]
 8002b88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b8c:	81a3      	strh	r3, [r4, #12]
 8002b8e:	9b00      	ldr	r3, [sp, #0]
 8002b90:	6163      	str	r3, [r4, #20]
 8002b92:	9b01      	ldr	r3, [sp, #4]
 8002b94:	6120      	str	r0, [r4, #16]
 8002b96:	b15b      	cbz	r3, 8002bb0 <__smakebuf_r+0x74>
 8002b98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002b9c:	4630      	mov	r0, r6
 8002b9e:	f000 fc05 	bl	80033ac <_isatty_r>
 8002ba2:	b128      	cbz	r0, 8002bb0 <__smakebuf_r+0x74>
 8002ba4:	89a3      	ldrh	r3, [r4, #12]
 8002ba6:	f023 0303 	bic.w	r3, r3, #3
 8002baa:	f043 0301 	orr.w	r3, r3, #1
 8002bae:	81a3      	strh	r3, [r4, #12]
 8002bb0:	89a3      	ldrh	r3, [r4, #12]
 8002bb2:	431d      	orrs	r5, r3
 8002bb4:	81a5      	strh	r5, [r4, #12]
 8002bb6:	e7cd      	b.n	8002b54 <__smakebuf_r+0x18>
 8002bb8:	080029a9 	.word	0x080029a9

08002bbc <_free_r>:
 8002bbc:	b538      	push	{r3, r4, r5, lr}
 8002bbe:	4605      	mov	r5, r0
 8002bc0:	2900      	cmp	r1, #0
 8002bc2:	d045      	beq.n	8002c50 <_free_r+0x94>
 8002bc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002bc8:	1f0c      	subs	r4, r1, #4
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	bfb8      	it	lt
 8002bce:	18e4      	addlt	r4, r4, r3
 8002bd0:	f000 fc0e 	bl	80033f0 <__malloc_lock>
 8002bd4:	4a1f      	ldr	r2, [pc, #124]	; (8002c54 <_free_r+0x98>)
 8002bd6:	6813      	ldr	r3, [r2, #0]
 8002bd8:	4610      	mov	r0, r2
 8002bda:	b933      	cbnz	r3, 8002bea <_free_r+0x2e>
 8002bdc:	6063      	str	r3, [r4, #4]
 8002bde:	6014      	str	r4, [r2, #0]
 8002be0:	4628      	mov	r0, r5
 8002be2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002be6:	f000 bc04 	b.w	80033f2 <__malloc_unlock>
 8002bea:	42a3      	cmp	r3, r4
 8002bec:	d90c      	bls.n	8002c08 <_free_r+0x4c>
 8002bee:	6821      	ldr	r1, [r4, #0]
 8002bf0:	1862      	adds	r2, r4, r1
 8002bf2:	4293      	cmp	r3, r2
 8002bf4:	bf04      	itt	eq
 8002bf6:	681a      	ldreq	r2, [r3, #0]
 8002bf8:	685b      	ldreq	r3, [r3, #4]
 8002bfa:	6063      	str	r3, [r4, #4]
 8002bfc:	bf04      	itt	eq
 8002bfe:	1852      	addeq	r2, r2, r1
 8002c00:	6022      	streq	r2, [r4, #0]
 8002c02:	6004      	str	r4, [r0, #0]
 8002c04:	e7ec      	b.n	8002be0 <_free_r+0x24>
 8002c06:	4613      	mov	r3, r2
 8002c08:	685a      	ldr	r2, [r3, #4]
 8002c0a:	b10a      	cbz	r2, 8002c10 <_free_r+0x54>
 8002c0c:	42a2      	cmp	r2, r4
 8002c0e:	d9fa      	bls.n	8002c06 <_free_r+0x4a>
 8002c10:	6819      	ldr	r1, [r3, #0]
 8002c12:	1858      	adds	r0, r3, r1
 8002c14:	42a0      	cmp	r0, r4
 8002c16:	d10b      	bne.n	8002c30 <_free_r+0x74>
 8002c18:	6820      	ldr	r0, [r4, #0]
 8002c1a:	4401      	add	r1, r0
 8002c1c:	1858      	adds	r0, r3, r1
 8002c1e:	4282      	cmp	r2, r0
 8002c20:	6019      	str	r1, [r3, #0]
 8002c22:	d1dd      	bne.n	8002be0 <_free_r+0x24>
 8002c24:	6810      	ldr	r0, [r2, #0]
 8002c26:	6852      	ldr	r2, [r2, #4]
 8002c28:	605a      	str	r2, [r3, #4]
 8002c2a:	4401      	add	r1, r0
 8002c2c:	6019      	str	r1, [r3, #0]
 8002c2e:	e7d7      	b.n	8002be0 <_free_r+0x24>
 8002c30:	d902      	bls.n	8002c38 <_free_r+0x7c>
 8002c32:	230c      	movs	r3, #12
 8002c34:	602b      	str	r3, [r5, #0]
 8002c36:	e7d3      	b.n	8002be0 <_free_r+0x24>
 8002c38:	6820      	ldr	r0, [r4, #0]
 8002c3a:	1821      	adds	r1, r4, r0
 8002c3c:	428a      	cmp	r2, r1
 8002c3e:	bf04      	itt	eq
 8002c40:	6811      	ldreq	r1, [r2, #0]
 8002c42:	6852      	ldreq	r2, [r2, #4]
 8002c44:	6062      	str	r2, [r4, #4]
 8002c46:	bf04      	itt	eq
 8002c48:	1809      	addeq	r1, r1, r0
 8002c4a:	6021      	streq	r1, [r4, #0]
 8002c4c:	605c      	str	r4, [r3, #4]
 8002c4e:	e7c7      	b.n	8002be0 <_free_r+0x24>
 8002c50:	bd38      	pop	{r3, r4, r5, pc}
 8002c52:	bf00      	nop
 8002c54:	20000088 	.word	0x20000088

08002c58 <_malloc_r>:
 8002c58:	b570      	push	{r4, r5, r6, lr}
 8002c5a:	1ccd      	adds	r5, r1, #3
 8002c5c:	f025 0503 	bic.w	r5, r5, #3
 8002c60:	3508      	adds	r5, #8
 8002c62:	2d0c      	cmp	r5, #12
 8002c64:	bf38      	it	cc
 8002c66:	250c      	movcc	r5, #12
 8002c68:	2d00      	cmp	r5, #0
 8002c6a:	4606      	mov	r6, r0
 8002c6c:	db01      	blt.n	8002c72 <_malloc_r+0x1a>
 8002c6e:	42a9      	cmp	r1, r5
 8002c70:	d903      	bls.n	8002c7a <_malloc_r+0x22>
 8002c72:	230c      	movs	r3, #12
 8002c74:	6033      	str	r3, [r6, #0]
 8002c76:	2000      	movs	r0, #0
 8002c78:	bd70      	pop	{r4, r5, r6, pc}
 8002c7a:	f000 fbb9 	bl	80033f0 <__malloc_lock>
 8002c7e:	4a21      	ldr	r2, [pc, #132]	; (8002d04 <_malloc_r+0xac>)
 8002c80:	6814      	ldr	r4, [r2, #0]
 8002c82:	4621      	mov	r1, r4
 8002c84:	b991      	cbnz	r1, 8002cac <_malloc_r+0x54>
 8002c86:	4c20      	ldr	r4, [pc, #128]	; (8002d08 <_malloc_r+0xb0>)
 8002c88:	6823      	ldr	r3, [r4, #0]
 8002c8a:	b91b      	cbnz	r3, 8002c94 <_malloc_r+0x3c>
 8002c8c:	4630      	mov	r0, r6
 8002c8e:	f000 fb05 	bl	800329c <_sbrk_r>
 8002c92:	6020      	str	r0, [r4, #0]
 8002c94:	4629      	mov	r1, r5
 8002c96:	4630      	mov	r0, r6
 8002c98:	f000 fb00 	bl	800329c <_sbrk_r>
 8002c9c:	1c43      	adds	r3, r0, #1
 8002c9e:	d124      	bne.n	8002cea <_malloc_r+0x92>
 8002ca0:	230c      	movs	r3, #12
 8002ca2:	6033      	str	r3, [r6, #0]
 8002ca4:	4630      	mov	r0, r6
 8002ca6:	f000 fba4 	bl	80033f2 <__malloc_unlock>
 8002caa:	e7e4      	b.n	8002c76 <_malloc_r+0x1e>
 8002cac:	680b      	ldr	r3, [r1, #0]
 8002cae:	1b5b      	subs	r3, r3, r5
 8002cb0:	d418      	bmi.n	8002ce4 <_malloc_r+0x8c>
 8002cb2:	2b0b      	cmp	r3, #11
 8002cb4:	d90f      	bls.n	8002cd6 <_malloc_r+0x7e>
 8002cb6:	600b      	str	r3, [r1, #0]
 8002cb8:	50cd      	str	r5, [r1, r3]
 8002cba:	18cc      	adds	r4, r1, r3
 8002cbc:	4630      	mov	r0, r6
 8002cbe:	f000 fb98 	bl	80033f2 <__malloc_unlock>
 8002cc2:	f104 000b 	add.w	r0, r4, #11
 8002cc6:	1d23      	adds	r3, r4, #4
 8002cc8:	f020 0007 	bic.w	r0, r0, #7
 8002ccc:	1ac3      	subs	r3, r0, r3
 8002cce:	d0d3      	beq.n	8002c78 <_malloc_r+0x20>
 8002cd0:	425a      	negs	r2, r3
 8002cd2:	50e2      	str	r2, [r4, r3]
 8002cd4:	e7d0      	b.n	8002c78 <_malloc_r+0x20>
 8002cd6:	428c      	cmp	r4, r1
 8002cd8:	684b      	ldr	r3, [r1, #4]
 8002cda:	bf16      	itet	ne
 8002cdc:	6063      	strne	r3, [r4, #4]
 8002cde:	6013      	streq	r3, [r2, #0]
 8002ce0:	460c      	movne	r4, r1
 8002ce2:	e7eb      	b.n	8002cbc <_malloc_r+0x64>
 8002ce4:	460c      	mov	r4, r1
 8002ce6:	6849      	ldr	r1, [r1, #4]
 8002ce8:	e7cc      	b.n	8002c84 <_malloc_r+0x2c>
 8002cea:	1cc4      	adds	r4, r0, #3
 8002cec:	f024 0403 	bic.w	r4, r4, #3
 8002cf0:	42a0      	cmp	r0, r4
 8002cf2:	d005      	beq.n	8002d00 <_malloc_r+0xa8>
 8002cf4:	1a21      	subs	r1, r4, r0
 8002cf6:	4630      	mov	r0, r6
 8002cf8:	f000 fad0 	bl	800329c <_sbrk_r>
 8002cfc:	3001      	adds	r0, #1
 8002cfe:	d0cf      	beq.n	8002ca0 <_malloc_r+0x48>
 8002d00:	6025      	str	r5, [r4, #0]
 8002d02:	e7db      	b.n	8002cbc <_malloc_r+0x64>
 8002d04:	20000088 	.word	0x20000088
 8002d08:	2000008c 	.word	0x2000008c

08002d0c <__sfputc_r>:
 8002d0c:	6893      	ldr	r3, [r2, #8]
 8002d0e:	3b01      	subs	r3, #1
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	b410      	push	{r4}
 8002d14:	6093      	str	r3, [r2, #8]
 8002d16:	da08      	bge.n	8002d2a <__sfputc_r+0x1e>
 8002d18:	6994      	ldr	r4, [r2, #24]
 8002d1a:	42a3      	cmp	r3, r4
 8002d1c:	db01      	blt.n	8002d22 <__sfputc_r+0x16>
 8002d1e:	290a      	cmp	r1, #10
 8002d20:	d103      	bne.n	8002d2a <__sfputc_r+0x1e>
 8002d22:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d26:	f7ff bcab 	b.w	8002680 <__swbuf_r>
 8002d2a:	6813      	ldr	r3, [r2, #0]
 8002d2c:	1c58      	adds	r0, r3, #1
 8002d2e:	6010      	str	r0, [r2, #0]
 8002d30:	7019      	strb	r1, [r3, #0]
 8002d32:	4608      	mov	r0, r1
 8002d34:	f85d 4b04 	ldr.w	r4, [sp], #4
 8002d38:	4770      	bx	lr

08002d3a <__sfputs_r>:
 8002d3a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d3c:	4606      	mov	r6, r0
 8002d3e:	460f      	mov	r7, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	18d5      	adds	r5, r2, r3
 8002d44:	42ac      	cmp	r4, r5
 8002d46:	d101      	bne.n	8002d4c <__sfputs_r+0x12>
 8002d48:	2000      	movs	r0, #0
 8002d4a:	e007      	b.n	8002d5c <__sfputs_r+0x22>
 8002d4c:	463a      	mov	r2, r7
 8002d4e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8002d52:	4630      	mov	r0, r6
 8002d54:	f7ff ffda 	bl	8002d0c <__sfputc_r>
 8002d58:	1c43      	adds	r3, r0, #1
 8002d5a:	d1f3      	bne.n	8002d44 <__sfputs_r+0xa>
 8002d5c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08002d60 <_vfiprintf_r>:
 8002d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002d64:	460c      	mov	r4, r1
 8002d66:	b09d      	sub	sp, #116	; 0x74
 8002d68:	4617      	mov	r7, r2
 8002d6a:	461d      	mov	r5, r3
 8002d6c:	4606      	mov	r6, r0
 8002d6e:	b118      	cbz	r0, 8002d78 <_vfiprintf_r+0x18>
 8002d70:	6983      	ldr	r3, [r0, #24]
 8002d72:	b90b      	cbnz	r3, 8002d78 <_vfiprintf_r+0x18>
 8002d74:	f7ff fe34 	bl	80029e0 <__sinit>
 8002d78:	4b7c      	ldr	r3, [pc, #496]	; (8002f6c <_vfiprintf_r+0x20c>)
 8002d7a:	429c      	cmp	r4, r3
 8002d7c:	d158      	bne.n	8002e30 <_vfiprintf_r+0xd0>
 8002d7e:	6874      	ldr	r4, [r6, #4]
 8002d80:	89a3      	ldrh	r3, [r4, #12]
 8002d82:	0718      	lsls	r0, r3, #28
 8002d84:	d55e      	bpl.n	8002e44 <_vfiprintf_r+0xe4>
 8002d86:	6923      	ldr	r3, [r4, #16]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d05b      	beq.n	8002e44 <_vfiprintf_r+0xe4>
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	9309      	str	r3, [sp, #36]	; 0x24
 8002d90:	2320      	movs	r3, #32
 8002d92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8002d96:	2330      	movs	r3, #48	; 0x30
 8002d98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8002d9c:	9503      	str	r5, [sp, #12]
 8002d9e:	f04f 0b01 	mov.w	fp, #1
 8002da2:	46b8      	mov	r8, r7
 8002da4:	4645      	mov	r5, r8
 8002da6:	f815 3b01 	ldrb.w	r3, [r5], #1
 8002daa:	b10b      	cbz	r3, 8002db0 <_vfiprintf_r+0x50>
 8002dac:	2b25      	cmp	r3, #37	; 0x25
 8002dae:	d154      	bne.n	8002e5a <_vfiprintf_r+0xfa>
 8002db0:	ebb8 0a07 	subs.w	sl, r8, r7
 8002db4:	d00b      	beq.n	8002dce <_vfiprintf_r+0x6e>
 8002db6:	4653      	mov	r3, sl
 8002db8:	463a      	mov	r2, r7
 8002dba:	4621      	mov	r1, r4
 8002dbc:	4630      	mov	r0, r6
 8002dbe:	f7ff ffbc 	bl	8002d3a <__sfputs_r>
 8002dc2:	3001      	adds	r0, #1
 8002dc4:	f000 80c2 	beq.w	8002f4c <_vfiprintf_r+0x1ec>
 8002dc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002dca:	4453      	add	r3, sl
 8002dcc:	9309      	str	r3, [sp, #36]	; 0x24
 8002dce:	f898 3000 	ldrb.w	r3, [r8]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	f000 80ba 	beq.w	8002f4c <_vfiprintf_r+0x1ec>
 8002dd8:	2300      	movs	r3, #0
 8002dda:	f04f 32ff 	mov.w	r2, #4294967295
 8002dde:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8002de2:	9304      	str	r3, [sp, #16]
 8002de4:	9307      	str	r3, [sp, #28]
 8002de6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8002dea:	931a      	str	r3, [sp, #104]	; 0x68
 8002dec:	46a8      	mov	r8, r5
 8002dee:	2205      	movs	r2, #5
 8002df0:	f818 1b01 	ldrb.w	r1, [r8], #1
 8002df4:	485e      	ldr	r0, [pc, #376]	; (8002f70 <_vfiprintf_r+0x210>)
 8002df6:	f7fd f9eb 	bl	80001d0 <memchr>
 8002dfa:	9b04      	ldr	r3, [sp, #16]
 8002dfc:	bb78      	cbnz	r0, 8002e5e <_vfiprintf_r+0xfe>
 8002dfe:	06d9      	lsls	r1, r3, #27
 8002e00:	bf44      	itt	mi
 8002e02:	2220      	movmi	r2, #32
 8002e04:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e08:	071a      	lsls	r2, r3, #28
 8002e0a:	bf44      	itt	mi
 8002e0c:	222b      	movmi	r2, #43	; 0x2b
 8002e0e:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8002e12:	782a      	ldrb	r2, [r5, #0]
 8002e14:	2a2a      	cmp	r2, #42	; 0x2a
 8002e16:	d02a      	beq.n	8002e6e <_vfiprintf_r+0x10e>
 8002e18:	9a07      	ldr	r2, [sp, #28]
 8002e1a:	46a8      	mov	r8, r5
 8002e1c:	2000      	movs	r0, #0
 8002e1e:	250a      	movs	r5, #10
 8002e20:	4641      	mov	r1, r8
 8002e22:	f811 3b01 	ldrb.w	r3, [r1], #1
 8002e26:	3b30      	subs	r3, #48	; 0x30
 8002e28:	2b09      	cmp	r3, #9
 8002e2a:	d969      	bls.n	8002f00 <_vfiprintf_r+0x1a0>
 8002e2c:	b360      	cbz	r0, 8002e88 <_vfiprintf_r+0x128>
 8002e2e:	e024      	b.n	8002e7a <_vfiprintf_r+0x11a>
 8002e30:	4b50      	ldr	r3, [pc, #320]	; (8002f74 <_vfiprintf_r+0x214>)
 8002e32:	429c      	cmp	r4, r3
 8002e34:	d101      	bne.n	8002e3a <_vfiprintf_r+0xda>
 8002e36:	68b4      	ldr	r4, [r6, #8]
 8002e38:	e7a2      	b.n	8002d80 <_vfiprintf_r+0x20>
 8002e3a:	4b4f      	ldr	r3, [pc, #316]	; (8002f78 <_vfiprintf_r+0x218>)
 8002e3c:	429c      	cmp	r4, r3
 8002e3e:	bf08      	it	eq
 8002e40:	68f4      	ldreq	r4, [r6, #12]
 8002e42:	e79d      	b.n	8002d80 <_vfiprintf_r+0x20>
 8002e44:	4621      	mov	r1, r4
 8002e46:	4630      	mov	r0, r6
 8002e48:	f7ff fc6c 	bl	8002724 <__swsetup_r>
 8002e4c:	2800      	cmp	r0, #0
 8002e4e:	d09d      	beq.n	8002d8c <_vfiprintf_r+0x2c>
 8002e50:	f04f 30ff 	mov.w	r0, #4294967295
 8002e54:	b01d      	add	sp, #116	; 0x74
 8002e56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002e5a:	46a8      	mov	r8, r5
 8002e5c:	e7a2      	b.n	8002da4 <_vfiprintf_r+0x44>
 8002e5e:	4a44      	ldr	r2, [pc, #272]	; (8002f70 <_vfiprintf_r+0x210>)
 8002e60:	1a80      	subs	r0, r0, r2
 8002e62:	fa0b f000 	lsl.w	r0, fp, r0
 8002e66:	4318      	orrs	r0, r3
 8002e68:	9004      	str	r0, [sp, #16]
 8002e6a:	4645      	mov	r5, r8
 8002e6c:	e7be      	b.n	8002dec <_vfiprintf_r+0x8c>
 8002e6e:	9a03      	ldr	r2, [sp, #12]
 8002e70:	1d11      	adds	r1, r2, #4
 8002e72:	6812      	ldr	r2, [r2, #0]
 8002e74:	9103      	str	r1, [sp, #12]
 8002e76:	2a00      	cmp	r2, #0
 8002e78:	db01      	blt.n	8002e7e <_vfiprintf_r+0x11e>
 8002e7a:	9207      	str	r2, [sp, #28]
 8002e7c:	e004      	b.n	8002e88 <_vfiprintf_r+0x128>
 8002e7e:	4252      	negs	r2, r2
 8002e80:	f043 0302 	orr.w	r3, r3, #2
 8002e84:	9207      	str	r2, [sp, #28]
 8002e86:	9304      	str	r3, [sp, #16]
 8002e88:	f898 3000 	ldrb.w	r3, [r8]
 8002e8c:	2b2e      	cmp	r3, #46	; 0x2e
 8002e8e:	d10e      	bne.n	8002eae <_vfiprintf_r+0x14e>
 8002e90:	f898 3001 	ldrb.w	r3, [r8, #1]
 8002e94:	2b2a      	cmp	r3, #42	; 0x2a
 8002e96:	d138      	bne.n	8002f0a <_vfiprintf_r+0x1aa>
 8002e98:	9b03      	ldr	r3, [sp, #12]
 8002e9a:	1d1a      	adds	r2, r3, #4
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	9203      	str	r2, [sp, #12]
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	bfb8      	it	lt
 8002ea4:	f04f 33ff 	movlt.w	r3, #4294967295
 8002ea8:	f108 0802 	add.w	r8, r8, #2
 8002eac:	9305      	str	r3, [sp, #20]
 8002eae:	4d33      	ldr	r5, [pc, #204]	; (8002f7c <_vfiprintf_r+0x21c>)
 8002eb0:	f898 1000 	ldrb.w	r1, [r8]
 8002eb4:	2203      	movs	r2, #3
 8002eb6:	4628      	mov	r0, r5
 8002eb8:	f7fd f98a 	bl	80001d0 <memchr>
 8002ebc:	b140      	cbz	r0, 8002ed0 <_vfiprintf_r+0x170>
 8002ebe:	2340      	movs	r3, #64	; 0x40
 8002ec0:	1b40      	subs	r0, r0, r5
 8002ec2:	fa03 f000 	lsl.w	r0, r3, r0
 8002ec6:	9b04      	ldr	r3, [sp, #16]
 8002ec8:	4303      	orrs	r3, r0
 8002eca:	f108 0801 	add.w	r8, r8, #1
 8002ece:	9304      	str	r3, [sp, #16]
 8002ed0:	f898 1000 	ldrb.w	r1, [r8]
 8002ed4:	482a      	ldr	r0, [pc, #168]	; (8002f80 <_vfiprintf_r+0x220>)
 8002ed6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8002eda:	2206      	movs	r2, #6
 8002edc:	f108 0701 	add.w	r7, r8, #1
 8002ee0:	f7fd f976 	bl	80001d0 <memchr>
 8002ee4:	2800      	cmp	r0, #0
 8002ee6:	d037      	beq.n	8002f58 <_vfiprintf_r+0x1f8>
 8002ee8:	4b26      	ldr	r3, [pc, #152]	; (8002f84 <_vfiprintf_r+0x224>)
 8002eea:	bb1b      	cbnz	r3, 8002f34 <_vfiprintf_r+0x1d4>
 8002eec:	9b03      	ldr	r3, [sp, #12]
 8002eee:	3307      	adds	r3, #7
 8002ef0:	f023 0307 	bic.w	r3, r3, #7
 8002ef4:	3308      	adds	r3, #8
 8002ef6:	9303      	str	r3, [sp, #12]
 8002ef8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8002efa:	444b      	add	r3, r9
 8002efc:	9309      	str	r3, [sp, #36]	; 0x24
 8002efe:	e750      	b.n	8002da2 <_vfiprintf_r+0x42>
 8002f00:	fb05 3202 	mla	r2, r5, r2, r3
 8002f04:	2001      	movs	r0, #1
 8002f06:	4688      	mov	r8, r1
 8002f08:	e78a      	b.n	8002e20 <_vfiprintf_r+0xc0>
 8002f0a:	2300      	movs	r3, #0
 8002f0c:	f108 0801 	add.w	r8, r8, #1
 8002f10:	9305      	str	r3, [sp, #20]
 8002f12:	4619      	mov	r1, r3
 8002f14:	250a      	movs	r5, #10
 8002f16:	4640      	mov	r0, r8
 8002f18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8002f1c:	3a30      	subs	r2, #48	; 0x30
 8002f1e:	2a09      	cmp	r2, #9
 8002f20:	d903      	bls.n	8002f2a <_vfiprintf_r+0x1ca>
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d0c3      	beq.n	8002eae <_vfiprintf_r+0x14e>
 8002f26:	9105      	str	r1, [sp, #20]
 8002f28:	e7c1      	b.n	8002eae <_vfiprintf_r+0x14e>
 8002f2a:	fb05 2101 	mla	r1, r5, r1, r2
 8002f2e:	2301      	movs	r3, #1
 8002f30:	4680      	mov	r8, r0
 8002f32:	e7f0      	b.n	8002f16 <_vfiprintf_r+0x1b6>
 8002f34:	ab03      	add	r3, sp, #12
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	4622      	mov	r2, r4
 8002f3a:	4b13      	ldr	r3, [pc, #76]	; (8002f88 <_vfiprintf_r+0x228>)
 8002f3c:	a904      	add	r1, sp, #16
 8002f3e:	4630      	mov	r0, r6
 8002f40:	f3af 8000 	nop.w
 8002f44:	f1b0 3fff 	cmp.w	r0, #4294967295
 8002f48:	4681      	mov	r9, r0
 8002f4a:	d1d5      	bne.n	8002ef8 <_vfiprintf_r+0x198>
 8002f4c:	89a3      	ldrh	r3, [r4, #12]
 8002f4e:	065b      	lsls	r3, r3, #25
 8002f50:	f53f af7e 	bmi.w	8002e50 <_vfiprintf_r+0xf0>
 8002f54:	9809      	ldr	r0, [sp, #36]	; 0x24
 8002f56:	e77d      	b.n	8002e54 <_vfiprintf_r+0xf4>
 8002f58:	ab03      	add	r3, sp, #12
 8002f5a:	9300      	str	r3, [sp, #0]
 8002f5c:	4622      	mov	r2, r4
 8002f5e:	4b0a      	ldr	r3, [pc, #40]	; (8002f88 <_vfiprintf_r+0x228>)
 8002f60:	a904      	add	r1, sp, #16
 8002f62:	4630      	mov	r0, r6
 8002f64:	f000 f888 	bl	8003078 <_printf_i>
 8002f68:	e7ec      	b.n	8002f44 <_vfiprintf_r+0x1e4>
 8002f6a:	bf00      	nop
 8002f6c:	080035f0 	.word	0x080035f0
 8002f70:	08003630 	.word	0x08003630
 8002f74:	08003610 	.word	0x08003610
 8002f78:	080035d0 	.word	0x080035d0
 8002f7c:	08003636 	.word	0x08003636
 8002f80:	0800363a 	.word	0x0800363a
 8002f84:	00000000 	.word	0x00000000
 8002f88:	08002d3b 	.word	0x08002d3b

08002f8c <_printf_common>:
 8002f8c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8002f90:	4691      	mov	r9, r2
 8002f92:	461f      	mov	r7, r3
 8002f94:	688a      	ldr	r2, [r1, #8]
 8002f96:	690b      	ldr	r3, [r1, #16]
 8002f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	bfb8      	it	lt
 8002fa0:	4613      	movlt	r3, r2
 8002fa2:	f8c9 3000 	str.w	r3, [r9]
 8002fa6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8002faa:	4606      	mov	r6, r0
 8002fac:	460c      	mov	r4, r1
 8002fae:	b112      	cbz	r2, 8002fb6 <_printf_common+0x2a>
 8002fb0:	3301      	adds	r3, #1
 8002fb2:	f8c9 3000 	str.w	r3, [r9]
 8002fb6:	6823      	ldr	r3, [r4, #0]
 8002fb8:	0699      	lsls	r1, r3, #26
 8002fba:	bf42      	ittt	mi
 8002fbc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8002fc0:	3302      	addmi	r3, #2
 8002fc2:	f8c9 3000 	strmi.w	r3, [r9]
 8002fc6:	6825      	ldr	r5, [r4, #0]
 8002fc8:	f015 0506 	ands.w	r5, r5, #6
 8002fcc:	d107      	bne.n	8002fde <_printf_common+0x52>
 8002fce:	f104 0a19 	add.w	sl, r4, #25
 8002fd2:	68e3      	ldr	r3, [r4, #12]
 8002fd4:	f8d9 2000 	ldr.w	r2, [r9]
 8002fd8:	1a9b      	subs	r3, r3, r2
 8002fda:	42ab      	cmp	r3, r5
 8002fdc:	dc28      	bgt.n	8003030 <_printf_common+0xa4>
 8002fde:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8002fe2:	6822      	ldr	r2, [r4, #0]
 8002fe4:	3300      	adds	r3, #0
 8002fe6:	bf18      	it	ne
 8002fe8:	2301      	movne	r3, #1
 8002fea:	0692      	lsls	r2, r2, #26
 8002fec:	d42d      	bmi.n	800304a <_printf_common+0xbe>
 8002fee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8002ff2:	4639      	mov	r1, r7
 8002ff4:	4630      	mov	r0, r6
 8002ff6:	47c0      	blx	r8
 8002ff8:	3001      	adds	r0, #1
 8002ffa:	d020      	beq.n	800303e <_printf_common+0xb2>
 8002ffc:	6823      	ldr	r3, [r4, #0]
 8002ffe:	68e5      	ldr	r5, [r4, #12]
 8003000:	f8d9 2000 	ldr.w	r2, [r9]
 8003004:	f003 0306 	and.w	r3, r3, #6
 8003008:	2b04      	cmp	r3, #4
 800300a:	bf08      	it	eq
 800300c:	1aad      	subeq	r5, r5, r2
 800300e:	68a3      	ldr	r3, [r4, #8]
 8003010:	6922      	ldr	r2, [r4, #16]
 8003012:	bf0c      	ite	eq
 8003014:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003018:	2500      	movne	r5, #0
 800301a:	4293      	cmp	r3, r2
 800301c:	bfc4      	itt	gt
 800301e:	1a9b      	subgt	r3, r3, r2
 8003020:	18ed      	addgt	r5, r5, r3
 8003022:	f04f 0900 	mov.w	r9, #0
 8003026:	341a      	adds	r4, #26
 8003028:	454d      	cmp	r5, r9
 800302a:	d11a      	bne.n	8003062 <_printf_common+0xd6>
 800302c:	2000      	movs	r0, #0
 800302e:	e008      	b.n	8003042 <_printf_common+0xb6>
 8003030:	2301      	movs	r3, #1
 8003032:	4652      	mov	r2, sl
 8003034:	4639      	mov	r1, r7
 8003036:	4630      	mov	r0, r6
 8003038:	47c0      	blx	r8
 800303a:	3001      	adds	r0, #1
 800303c:	d103      	bne.n	8003046 <_printf_common+0xba>
 800303e:	f04f 30ff 	mov.w	r0, #4294967295
 8003042:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003046:	3501      	adds	r5, #1
 8003048:	e7c3      	b.n	8002fd2 <_printf_common+0x46>
 800304a:	18e1      	adds	r1, r4, r3
 800304c:	1c5a      	adds	r2, r3, #1
 800304e:	2030      	movs	r0, #48	; 0x30
 8003050:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003054:	4422      	add	r2, r4
 8003056:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800305a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800305e:	3302      	adds	r3, #2
 8003060:	e7c5      	b.n	8002fee <_printf_common+0x62>
 8003062:	2301      	movs	r3, #1
 8003064:	4622      	mov	r2, r4
 8003066:	4639      	mov	r1, r7
 8003068:	4630      	mov	r0, r6
 800306a:	47c0      	blx	r8
 800306c:	3001      	adds	r0, #1
 800306e:	d0e6      	beq.n	800303e <_printf_common+0xb2>
 8003070:	f109 0901 	add.w	r9, r9, #1
 8003074:	e7d8      	b.n	8003028 <_printf_common+0x9c>
	...

08003078 <_printf_i>:
 8003078:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800307c:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003080:	460c      	mov	r4, r1
 8003082:	7e09      	ldrb	r1, [r1, #24]
 8003084:	b085      	sub	sp, #20
 8003086:	296e      	cmp	r1, #110	; 0x6e
 8003088:	4617      	mov	r7, r2
 800308a:	4606      	mov	r6, r0
 800308c:	4698      	mov	r8, r3
 800308e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003090:	f000 80b3 	beq.w	80031fa <_printf_i+0x182>
 8003094:	d822      	bhi.n	80030dc <_printf_i+0x64>
 8003096:	2963      	cmp	r1, #99	; 0x63
 8003098:	d036      	beq.n	8003108 <_printf_i+0x90>
 800309a:	d80a      	bhi.n	80030b2 <_printf_i+0x3a>
 800309c:	2900      	cmp	r1, #0
 800309e:	f000 80b9 	beq.w	8003214 <_printf_i+0x19c>
 80030a2:	2958      	cmp	r1, #88	; 0x58
 80030a4:	f000 8083 	beq.w	80031ae <_printf_i+0x136>
 80030a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80030ac:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80030b0:	e032      	b.n	8003118 <_printf_i+0xa0>
 80030b2:	2964      	cmp	r1, #100	; 0x64
 80030b4:	d001      	beq.n	80030ba <_printf_i+0x42>
 80030b6:	2969      	cmp	r1, #105	; 0x69
 80030b8:	d1f6      	bne.n	80030a8 <_printf_i+0x30>
 80030ba:	6820      	ldr	r0, [r4, #0]
 80030bc:	6813      	ldr	r3, [r2, #0]
 80030be:	0605      	lsls	r5, r0, #24
 80030c0:	f103 0104 	add.w	r1, r3, #4
 80030c4:	d52a      	bpl.n	800311c <_printf_i+0xa4>
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6011      	str	r1, [r2, #0]
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	da03      	bge.n	80030d6 <_printf_i+0x5e>
 80030ce:	222d      	movs	r2, #45	; 0x2d
 80030d0:	425b      	negs	r3, r3
 80030d2:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80030d6:	486f      	ldr	r0, [pc, #444]	; (8003294 <_printf_i+0x21c>)
 80030d8:	220a      	movs	r2, #10
 80030da:	e039      	b.n	8003150 <_printf_i+0xd8>
 80030dc:	2973      	cmp	r1, #115	; 0x73
 80030de:	f000 809d 	beq.w	800321c <_printf_i+0x1a4>
 80030e2:	d808      	bhi.n	80030f6 <_printf_i+0x7e>
 80030e4:	296f      	cmp	r1, #111	; 0x6f
 80030e6:	d020      	beq.n	800312a <_printf_i+0xb2>
 80030e8:	2970      	cmp	r1, #112	; 0x70
 80030ea:	d1dd      	bne.n	80030a8 <_printf_i+0x30>
 80030ec:	6823      	ldr	r3, [r4, #0]
 80030ee:	f043 0320 	orr.w	r3, r3, #32
 80030f2:	6023      	str	r3, [r4, #0]
 80030f4:	e003      	b.n	80030fe <_printf_i+0x86>
 80030f6:	2975      	cmp	r1, #117	; 0x75
 80030f8:	d017      	beq.n	800312a <_printf_i+0xb2>
 80030fa:	2978      	cmp	r1, #120	; 0x78
 80030fc:	d1d4      	bne.n	80030a8 <_printf_i+0x30>
 80030fe:	2378      	movs	r3, #120	; 0x78
 8003100:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003104:	4864      	ldr	r0, [pc, #400]	; (8003298 <_printf_i+0x220>)
 8003106:	e055      	b.n	80031b4 <_printf_i+0x13c>
 8003108:	6813      	ldr	r3, [r2, #0]
 800310a:	1d19      	adds	r1, r3, #4
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	6011      	str	r1, [r2, #0]
 8003110:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003114:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003118:	2301      	movs	r3, #1
 800311a:	e08c      	b.n	8003236 <_printf_i+0x1be>
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	6011      	str	r1, [r2, #0]
 8003120:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003124:	bf18      	it	ne
 8003126:	b21b      	sxthne	r3, r3
 8003128:	e7cf      	b.n	80030ca <_printf_i+0x52>
 800312a:	6813      	ldr	r3, [r2, #0]
 800312c:	6825      	ldr	r5, [r4, #0]
 800312e:	1d18      	adds	r0, r3, #4
 8003130:	6010      	str	r0, [r2, #0]
 8003132:	0628      	lsls	r0, r5, #24
 8003134:	d501      	bpl.n	800313a <_printf_i+0xc2>
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	e002      	b.n	8003140 <_printf_i+0xc8>
 800313a:	0668      	lsls	r0, r5, #25
 800313c:	d5fb      	bpl.n	8003136 <_printf_i+0xbe>
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	4854      	ldr	r0, [pc, #336]	; (8003294 <_printf_i+0x21c>)
 8003142:	296f      	cmp	r1, #111	; 0x6f
 8003144:	bf14      	ite	ne
 8003146:	220a      	movne	r2, #10
 8003148:	2208      	moveq	r2, #8
 800314a:	2100      	movs	r1, #0
 800314c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003150:	6865      	ldr	r5, [r4, #4]
 8003152:	60a5      	str	r5, [r4, #8]
 8003154:	2d00      	cmp	r5, #0
 8003156:	f2c0 8095 	blt.w	8003284 <_printf_i+0x20c>
 800315a:	6821      	ldr	r1, [r4, #0]
 800315c:	f021 0104 	bic.w	r1, r1, #4
 8003160:	6021      	str	r1, [r4, #0]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d13d      	bne.n	80031e2 <_printf_i+0x16a>
 8003166:	2d00      	cmp	r5, #0
 8003168:	f040 808e 	bne.w	8003288 <_printf_i+0x210>
 800316c:	4665      	mov	r5, ip
 800316e:	2a08      	cmp	r2, #8
 8003170:	d10b      	bne.n	800318a <_printf_i+0x112>
 8003172:	6823      	ldr	r3, [r4, #0]
 8003174:	07db      	lsls	r3, r3, #31
 8003176:	d508      	bpl.n	800318a <_printf_i+0x112>
 8003178:	6923      	ldr	r3, [r4, #16]
 800317a:	6862      	ldr	r2, [r4, #4]
 800317c:	429a      	cmp	r2, r3
 800317e:	bfde      	ittt	le
 8003180:	2330      	movle	r3, #48	; 0x30
 8003182:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003186:	f105 35ff 	addle.w	r5, r5, #4294967295
 800318a:	ebac 0305 	sub.w	r3, ip, r5
 800318e:	6123      	str	r3, [r4, #16]
 8003190:	f8cd 8000 	str.w	r8, [sp]
 8003194:	463b      	mov	r3, r7
 8003196:	aa03      	add	r2, sp, #12
 8003198:	4621      	mov	r1, r4
 800319a:	4630      	mov	r0, r6
 800319c:	f7ff fef6 	bl	8002f8c <_printf_common>
 80031a0:	3001      	adds	r0, #1
 80031a2:	d14d      	bne.n	8003240 <_printf_i+0x1c8>
 80031a4:	f04f 30ff 	mov.w	r0, #4294967295
 80031a8:	b005      	add	sp, #20
 80031aa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80031ae:	4839      	ldr	r0, [pc, #228]	; (8003294 <_printf_i+0x21c>)
 80031b0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80031b4:	6813      	ldr	r3, [r2, #0]
 80031b6:	6821      	ldr	r1, [r4, #0]
 80031b8:	1d1d      	adds	r5, r3, #4
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	6015      	str	r5, [r2, #0]
 80031be:	060a      	lsls	r2, r1, #24
 80031c0:	d50b      	bpl.n	80031da <_printf_i+0x162>
 80031c2:	07ca      	lsls	r2, r1, #31
 80031c4:	bf44      	itt	mi
 80031c6:	f041 0120 	orrmi.w	r1, r1, #32
 80031ca:	6021      	strmi	r1, [r4, #0]
 80031cc:	b91b      	cbnz	r3, 80031d6 <_printf_i+0x15e>
 80031ce:	6822      	ldr	r2, [r4, #0]
 80031d0:	f022 0220 	bic.w	r2, r2, #32
 80031d4:	6022      	str	r2, [r4, #0]
 80031d6:	2210      	movs	r2, #16
 80031d8:	e7b7      	b.n	800314a <_printf_i+0xd2>
 80031da:	064d      	lsls	r5, r1, #25
 80031dc:	bf48      	it	mi
 80031de:	b29b      	uxthmi	r3, r3
 80031e0:	e7ef      	b.n	80031c2 <_printf_i+0x14a>
 80031e2:	4665      	mov	r5, ip
 80031e4:	fbb3 f1f2 	udiv	r1, r3, r2
 80031e8:	fb02 3311 	mls	r3, r2, r1, r3
 80031ec:	5cc3      	ldrb	r3, [r0, r3]
 80031ee:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80031f2:	460b      	mov	r3, r1
 80031f4:	2900      	cmp	r1, #0
 80031f6:	d1f5      	bne.n	80031e4 <_printf_i+0x16c>
 80031f8:	e7b9      	b.n	800316e <_printf_i+0xf6>
 80031fa:	6813      	ldr	r3, [r2, #0]
 80031fc:	6825      	ldr	r5, [r4, #0]
 80031fe:	6961      	ldr	r1, [r4, #20]
 8003200:	1d18      	adds	r0, r3, #4
 8003202:	6010      	str	r0, [r2, #0]
 8003204:	0628      	lsls	r0, r5, #24
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	d501      	bpl.n	800320e <_printf_i+0x196>
 800320a:	6019      	str	r1, [r3, #0]
 800320c:	e002      	b.n	8003214 <_printf_i+0x19c>
 800320e:	066a      	lsls	r2, r5, #25
 8003210:	d5fb      	bpl.n	800320a <_printf_i+0x192>
 8003212:	8019      	strh	r1, [r3, #0]
 8003214:	2300      	movs	r3, #0
 8003216:	6123      	str	r3, [r4, #16]
 8003218:	4665      	mov	r5, ip
 800321a:	e7b9      	b.n	8003190 <_printf_i+0x118>
 800321c:	6813      	ldr	r3, [r2, #0]
 800321e:	1d19      	adds	r1, r3, #4
 8003220:	6011      	str	r1, [r2, #0]
 8003222:	681d      	ldr	r5, [r3, #0]
 8003224:	6862      	ldr	r2, [r4, #4]
 8003226:	2100      	movs	r1, #0
 8003228:	4628      	mov	r0, r5
 800322a:	f7fc ffd1 	bl	80001d0 <memchr>
 800322e:	b108      	cbz	r0, 8003234 <_printf_i+0x1bc>
 8003230:	1b40      	subs	r0, r0, r5
 8003232:	6060      	str	r0, [r4, #4]
 8003234:	6863      	ldr	r3, [r4, #4]
 8003236:	6123      	str	r3, [r4, #16]
 8003238:	2300      	movs	r3, #0
 800323a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800323e:	e7a7      	b.n	8003190 <_printf_i+0x118>
 8003240:	6923      	ldr	r3, [r4, #16]
 8003242:	462a      	mov	r2, r5
 8003244:	4639      	mov	r1, r7
 8003246:	4630      	mov	r0, r6
 8003248:	47c0      	blx	r8
 800324a:	3001      	adds	r0, #1
 800324c:	d0aa      	beq.n	80031a4 <_printf_i+0x12c>
 800324e:	6823      	ldr	r3, [r4, #0]
 8003250:	079b      	lsls	r3, r3, #30
 8003252:	d413      	bmi.n	800327c <_printf_i+0x204>
 8003254:	68e0      	ldr	r0, [r4, #12]
 8003256:	9b03      	ldr	r3, [sp, #12]
 8003258:	4298      	cmp	r0, r3
 800325a:	bfb8      	it	lt
 800325c:	4618      	movlt	r0, r3
 800325e:	e7a3      	b.n	80031a8 <_printf_i+0x130>
 8003260:	2301      	movs	r3, #1
 8003262:	464a      	mov	r2, r9
 8003264:	4639      	mov	r1, r7
 8003266:	4630      	mov	r0, r6
 8003268:	47c0      	blx	r8
 800326a:	3001      	adds	r0, #1
 800326c:	d09a      	beq.n	80031a4 <_printf_i+0x12c>
 800326e:	3501      	adds	r5, #1
 8003270:	68e3      	ldr	r3, [r4, #12]
 8003272:	9a03      	ldr	r2, [sp, #12]
 8003274:	1a9b      	subs	r3, r3, r2
 8003276:	42ab      	cmp	r3, r5
 8003278:	dcf2      	bgt.n	8003260 <_printf_i+0x1e8>
 800327a:	e7eb      	b.n	8003254 <_printf_i+0x1dc>
 800327c:	2500      	movs	r5, #0
 800327e:	f104 0919 	add.w	r9, r4, #25
 8003282:	e7f5      	b.n	8003270 <_printf_i+0x1f8>
 8003284:	2b00      	cmp	r3, #0
 8003286:	d1ac      	bne.n	80031e2 <_printf_i+0x16a>
 8003288:	7803      	ldrb	r3, [r0, #0]
 800328a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800328e:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003292:	e76c      	b.n	800316e <_printf_i+0xf6>
 8003294:	08003641 	.word	0x08003641
 8003298:	08003652 	.word	0x08003652

0800329c <_sbrk_r>:
 800329c:	b538      	push	{r3, r4, r5, lr}
 800329e:	4c06      	ldr	r4, [pc, #24]	; (80032b8 <_sbrk_r+0x1c>)
 80032a0:	2300      	movs	r3, #0
 80032a2:	4605      	mov	r5, r0
 80032a4:	4608      	mov	r0, r1
 80032a6:	6023      	str	r3, [r4, #0]
 80032a8:	f7fd fd0c 	bl	8000cc4 <_sbrk>
 80032ac:	1c43      	adds	r3, r0, #1
 80032ae:	d102      	bne.n	80032b6 <_sbrk_r+0x1a>
 80032b0:	6823      	ldr	r3, [r4, #0]
 80032b2:	b103      	cbz	r3, 80032b6 <_sbrk_r+0x1a>
 80032b4:	602b      	str	r3, [r5, #0]
 80032b6:	bd38      	pop	{r3, r4, r5, pc}
 80032b8:	20000090 	.word	0x20000090

080032bc <__sread>:
 80032bc:	b510      	push	{r4, lr}
 80032be:	460c      	mov	r4, r1
 80032c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032c4:	f000 f896 	bl	80033f4 <_read_r>
 80032c8:	2800      	cmp	r0, #0
 80032ca:	bfab      	itete	ge
 80032cc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80032ce:	89a3      	ldrhlt	r3, [r4, #12]
 80032d0:	181b      	addge	r3, r3, r0
 80032d2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80032d6:	bfac      	ite	ge
 80032d8:	6563      	strge	r3, [r4, #84]	; 0x54
 80032da:	81a3      	strhlt	r3, [r4, #12]
 80032dc:	bd10      	pop	{r4, pc}

080032de <__swrite>:
 80032de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80032e2:	461f      	mov	r7, r3
 80032e4:	898b      	ldrh	r3, [r1, #12]
 80032e6:	05db      	lsls	r3, r3, #23
 80032e8:	4605      	mov	r5, r0
 80032ea:	460c      	mov	r4, r1
 80032ec:	4616      	mov	r6, r2
 80032ee:	d505      	bpl.n	80032fc <__swrite+0x1e>
 80032f0:	2302      	movs	r3, #2
 80032f2:	2200      	movs	r2, #0
 80032f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80032f8:	f000 f868 	bl	80033cc <_lseek_r>
 80032fc:	89a3      	ldrh	r3, [r4, #12]
 80032fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003302:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003306:	81a3      	strh	r3, [r4, #12]
 8003308:	4632      	mov	r2, r6
 800330a:	463b      	mov	r3, r7
 800330c:	4628      	mov	r0, r5
 800330e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003312:	f000 b817 	b.w	8003344 <_write_r>

08003316 <__sseek>:
 8003316:	b510      	push	{r4, lr}
 8003318:	460c      	mov	r4, r1
 800331a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800331e:	f000 f855 	bl	80033cc <_lseek_r>
 8003322:	1c43      	adds	r3, r0, #1
 8003324:	89a3      	ldrh	r3, [r4, #12]
 8003326:	bf15      	itete	ne
 8003328:	6560      	strne	r0, [r4, #84]	; 0x54
 800332a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800332e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8003332:	81a3      	strheq	r3, [r4, #12]
 8003334:	bf18      	it	ne
 8003336:	81a3      	strhne	r3, [r4, #12]
 8003338:	bd10      	pop	{r4, pc}

0800333a <__sclose>:
 800333a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800333e:	f000 b813 	b.w	8003368 <_close_r>
	...

08003344 <_write_r>:
 8003344:	b538      	push	{r3, r4, r5, lr}
 8003346:	4c07      	ldr	r4, [pc, #28]	; (8003364 <_write_r+0x20>)
 8003348:	4605      	mov	r5, r0
 800334a:	4608      	mov	r0, r1
 800334c:	4611      	mov	r1, r2
 800334e:	2200      	movs	r2, #0
 8003350:	6022      	str	r2, [r4, #0]
 8003352:	461a      	mov	r2, r3
 8003354:	f7fd fc66 	bl	8000c24 <_write>
 8003358:	1c43      	adds	r3, r0, #1
 800335a:	d102      	bne.n	8003362 <_write_r+0x1e>
 800335c:	6823      	ldr	r3, [r4, #0]
 800335e:	b103      	cbz	r3, 8003362 <_write_r+0x1e>
 8003360:	602b      	str	r3, [r5, #0]
 8003362:	bd38      	pop	{r3, r4, r5, pc}
 8003364:	20000090 	.word	0x20000090

08003368 <_close_r>:
 8003368:	b538      	push	{r3, r4, r5, lr}
 800336a:	4c06      	ldr	r4, [pc, #24]	; (8003384 <_close_r+0x1c>)
 800336c:	2300      	movs	r3, #0
 800336e:	4605      	mov	r5, r0
 8003370:	4608      	mov	r0, r1
 8003372:	6023      	str	r3, [r4, #0]
 8003374:	f7fd fc72 	bl	8000c5c <_close>
 8003378:	1c43      	adds	r3, r0, #1
 800337a:	d102      	bne.n	8003382 <_close_r+0x1a>
 800337c:	6823      	ldr	r3, [r4, #0]
 800337e:	b103      	cbz	r3, 8003382 <_close_r+0x1a>
 8003380:	602b      	str	r3, [r5, #0]
 8003382:	bd38      	pop	{r3, r4, r5, pc}
 8003384:	20000090 	.word	0x20000090

08003388 <_fstat_r>:
 8003388:	b538      	push	{r3, r4, r5, lr}
 800338a:	4c07      	ldr	r4, [pc, #28]	; (80033a8 <_fstat_r+0x20>)
 800338c:	2300      	movs	r3, #0
 800338e:	4605      	mov	r5, r0
 8003390:	4608      	mov	r0, r1
 8003392:	4611      	mov	r1, r2
 8003394:	6023      	str	r3, [r4, #0]
 8003396:	f7fd fc6d 	bl	8000c74 <_fstat>
 800339a:	1c43      	adds	r3, r0, #1
 800339c:	d102      	bne.n	80033a4 <_fstat_r+0x1c>
 800339e:	6823      	ldr	r3, [r4, #0]
 80033a0:	b103      	cbz	r3, 80033a4 <_fstat_r+0x1c>
 80033a2:	602b      	str	r3, [r5, #0]
 80033a4:	bd38      	pop	{r3, r4, r5, pc}
 80033a6:	bf00      	nop
 80033a8:	20000090 	.word	0x20000090

080033ac <_isatty_r>:
 80033ac:	b538      	push	{r3, r4, r5, lr}
 80033ae:	4c06      	ldr	r4, [pc, #24]	; (80033c8 <_isatty_r+0x1c>)
 80033b0:	2300      	movs	r3, #0
 80033b2:	4605      	mov	r5, r0
 80033b4:	4608      	mov	r0, r1
 80033b6:	6023      	str	r3, [r4, #0]
 80033b8:	f7fd fc6c 	bl	8000c94 <_isatty>
 80033bc:	1c43      	adds	r3, r0, #1
 80033be:	d102      	bne.n	80033c6 <_isatty_r+0x1a>
 80033c0:	6823      	ldr	r3, [r4, #0]
 80033c2:	b103      	cbz	r3, 80033c6 <_isatty_r+0x1a>
 80033c4:	602b      	str	r3, [r5, #0]
 80033c6:	bd38      	pop	{r3, r4, r5, pc}
 80033c8:	20000090 	.word	0x20000090

080033cc <_lseek_r>:
 80033cc:	b538      	push	{r3, r4, r5, lr}
 80033ce:	4c07      	ldr	r4, [pc, #28]	; (80033ec <_lseek_r+0x20>)
 80033d0:	4605      	mov	r5, r0
 80033d2:	4608      	mov	r0, r1
 80033d4:	4611      	mov	r1, r2
 80033d6:	2200      	movs	r2, #0
 80033d8:	6022      	str	r2, [r4, #0]
 80033da:	461a      	mov	r2, r3
 80033dc:	f7fd fc65 	bl	8000caa <_lseek>
 80033e0:	1c43      	adds	r3, r0, #1
 80033e2:	d102      	bne.n	80033ea <_lseek_r+0x1e>
 80033e4:	6823      	ldr	r3, [r4, #0]
 80033e6:	b103      	cbz	r3, 80033ea <_lseek_r+0x1e>
 80033e8:	602b      	str	r3, [r5, #0]
 80033ea:	bd38      	pop	{r3, r4, r5, pc}
 80033ec:	20000090 	.word	0x20000090

080033f0 <__malloc_lock>:
 80033f0:	4770      	bx	lr

080033f2 <__malloc_unlock>:
 80033f2:	4770      	bx	lr

080033f4 <_read_r>:
 80033f4:	b538      	push	{r3, r4, r5, lr}
 80033f6:	4c07      	ldr	r4, [pc, #28]	; (8003414 <_read_r+0x20>)
 80033f8:	4605      	mov	r5, r0
 80033fa:	4608      	mov	r0, r1
 80033fc:	4611      	mov	r1, r2
 80033fe:	2200      	movs	r2, #0
 8003400:	6022      	str	r2, [r4, #0]
 8003402:	461a      	mov	r2, r3
 8003404:	f7fd fbf1 	bl	8000bea <_read>
 8003408:	1c43      	adds	r3, r0, #1
 800340a:	d102      	bne.n	8003412 <_read_r+0x1e>
 800340c:	6823      	ldr	r3, [r4, #0]
 800340e:	b103      	cbz	r3, 8003412 <_read_r+0x1e>
 8003410:	602b      	str	r3, [r5, #0]
 8003412:	bd38      	pop	{r3, r4, r5, pc}
 8003414:	20000090 	.word	0x20000090

08003418 <_init>:
 8003418:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800341a:	bf00      	nop
 800341c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800341e:	bc08      	pop	{r3}
 8003420:	469e      	mov	lr, r3
 8003422:	4770      	bx	lr

08003424 <_fini>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr
