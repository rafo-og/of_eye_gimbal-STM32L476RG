
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003644  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d4  080037d4  080037d4  000137d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003ba8  08003ba8  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003ba8  08003ba8  00013ba8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003bac  08003bac  00013bac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003bb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000030  20000068  08003c18  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000098  08003c18  00020098  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d679  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a2  00000000  00000000  0002d711  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002f8b8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  00030388  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d3a  00000000  00000000  00030d40  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008ec7  00000000  00000000  00054a7a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba92a  00000000  00000000  0005d941  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011826b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  001182e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080037bc 	.word	0x080037bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080037bc 	.word	0x080037bc

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <adns2610_init>:
void adns2610_configureSPI();
void adns2610_receiveByte(Device dev, uint8_t* value);
void adns2610_sendBytes(Device dev, uint8_t* value, uint8_t length);


void adns2610_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	adns2610_configureTIM();
 8000304:	f000 f828 	bl	8000358 <adns2610_configureTIM>

	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI();
 8000308:	f000 f810 	bl	800032c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(ADNS2610_RIGHT);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f85b 	bl	80003c8 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(ADNS2610_RIGHT);
 8000312:	2000      	movs	r0, #0
 8000314:	f000 f8a0 	bl	8000458 <adns2610_config>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <adns2610_processFSM>:
void adns2610_start(void){
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
}

void adns2610_processFSM(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <adns2610_configureSPI>:

void adns2610_configureSPI(){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPI2->CR2, SPI_CR2_FRXTH);
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <adns2610_configureSPI+0x28>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <adns2610_configureSPI+0x28>)
 8000336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033a:	6053      	str	r3, [r2, #4]
	// Enable SPI
	SET_BIT(SPI2->CR1, SPI_CR1_SPE);
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <adns2610_configureSPI+0x28>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <adns2610_configureSPI+0x28>)
 8000342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40003800 	.word	0x40003800

08000358 <adns2610_configureTIM>:

void adns2610_configureTIM(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 800037c:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_READ_TIME;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000384:	2296      	movs	r2, #150	; 0x96
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800039a:	f023 0301 	bic.w	r3, r3, #1
 800039e:	6113      	str	r3, [r2, #16]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <adns2610_configureTIM+0x6c>)
 80003a2:	68db      	ldr	r3, [r3, #12]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <adns2610_configureTIM+0x6c>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2019      	movs	r0, #25
 80003b0:	f7ff ff7c 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80003b4:	2019      	movs	r0, #25
 80003b6:	f7ff ff5b 	bl	8000270 <__NVIC_EnableIRQ>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012c00 	.word	0x40012c00

080003c8 <adns2610_resetCOM>:

void adns2610_resetCOM(Device dev){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b082      	sub	sp, #8
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <adns2610_resetCOM+0x14>
 80003d8:	4b1c      	ldr	r3, [pc, #112]	; (800044c <adns2610_resetCOM+0x84>)
 80003da:	e000      	b.n	80003de <adns2610_resetCOM+0x16>
 80003dc:	4b1c      	ldr	r3, [pc, #112]	; (8000450 <adns2610_resetCOM+0x88>)
 80003de:	4a1d      	ldr	r2, [pc, #116]	; (8000454 <adns2610_resetCOM+0x8c>)
 80003e0:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80003e2:	bf00      	nop
 80003e4:	4b1b      	ldr	r3, [pc, #108]	; (8000454 <adns2610_resetCOM+0x8c>)
 80003e6:	681b      	ldr	r3, [r3, #0]
 80003e8:	689b      	ldr	r3, [r3, #8]
 80003ea:	f003 0302 	and.w	r3, r3, #2
 80003ee:	2b00      	cmp	r3, #0
 80003f0:	d0f8      	beq.n	80003e4 <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 80003f2:	4b18      	ldr	r3, [pc, #96]	; (8000454 <adns2610_resetCOM+0x8c>)
 80003f4:	681b      	ldr	r3, [r3, #0]
 80003f6:	330c      	adds	r3, #12
 80003f8:	2201      	movs	r2, #1
 80003fa:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80003fc:	bf00      	nop
 80003fe:	4b15      	ldr	r3, [pc, #84]	; (8000454 <adns2610_resetCOM+0x8c>)
 8000400:	681b      	ldr	r3, [r3, #0]
 8000402:	689b      	ldr	r3, [r3, #8]
 8000404:	f003 0301 	and.w	r3, r3, #1
 8000408:	2b00      	cmp	r3, #0
 800040a:	d0f8      	beq.n	80003fe <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800040c:	4b11      	ldr	r3, [pc, #68]	; (8000454 <adns2610_resetCOM+0x8c>)
 800040e:	681b      	ldr	r3, [r3, #0]
 8000410:	330c      	adds	r3, #12
 8000412:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000414:	bf00      	nop
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <adns2610_resetCOM+0x8c>)
 8000418:	681b      	ldr	r3, [r3, #0]
 800041a:	689b      	ldr	r3, [r3, #8]
 800041c:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000420:	4b0c      	ldr	r3, [pc, #48]	; (8000454 <adns2610_resetCOM+0x8c>)
 8000422:	681b      	ldr	r3, [r3, #0]
 8000424:	689b      	ldr	r3, [r3, #8]
 8000426:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800042a:	431a      	orrs	r2, r3
 800042c:	4b09      	ldr	r3, [pc, #36]	; (8000454 <adns2610_resetCOM+0x8c>)
 800042e:	681b      	ldr	r3, [r3, #0]
 8000430:	689b      	ldr	r3, [r3, #8]
 8000432:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000436:	4313      	orrs	r3, r2
 8000438:	2b00      	cmp	r3, #0
 800043a:	d1ec      	bne.n	8000416 <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 800043c:	2064      	movs	r0, #100	; 0x64
 800043e:	f002 fa0d 	bl	800285c <LL_mDelay>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	40003800 	.word	0x40003800
 8000450:	40003c00 	.word	0x40003c00
 8000454:	20000084 	.word	0x20000084

08000458 <adns2610_config>:

void adns2610_config(Device dev){
 8000458:	b580      	push	{r7, lr}
 800045a:	b084      	sub	sp, #16
 800045c:	af00      	add	r7, sp, #0
 800045e:	4603      	mov	r3, r0
 8000460:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 8000462:	79fb      	ldrb	r3, [r7, #7]
 8000464:	2b00      	cmp	r3, #0
 8000466:	d101      	bne.n	800046c <adns2610_config+0x14>
 8000468:	4b2b      	ldr	r3, [pc, #172]	; (8000518 <adns2610_config+0xc0>)
 800046a:	e000      	b.n	800046e <adns2610_config+0x16>
 800046c:	4b2b      	ldr	r3, [pc, #172]	; (800051c <adns2610_config+0xc4>)
 800046e:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000470:	68f9      	ldr	r1, [r7, #12]
 8000472:	482b      	ldr	r0, [pc, #172]	; (8000520 <adns2610_config+0xc8>)
 8000474:	f002 fa5a 	bl	800292c <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS_2610_CONFIG));
 8000478:	492a      	ldr	r1, [pc, #168]	; (8000524 <adns2610_config+0xcc>)
 800047a:	482b      	ldr	r0, [pc, #172]	; (8000528 <adns2610_config+0xd0>)
 800047c:	f002 fa56 	bl	800292c <iprintf>
	adns2610_writeRegister(dev, ADNS_2610_CONFIG, CONFIG_C0);
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2201      	movs	r2, #1
 8000484:	2100      	movs	r1, #0
 8000486:	4618      	mov	r0, r3
 8000488:	f000 f8be 	bl	8000608 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS_2610_CONFIG));
 800048c:	4925      	ldr	r1, [pc, #148]	; (8000524 <adns2610_config+0xcc>)
 800048e:	4827      	ldr	r0, [pc, #156]	; (800052c <adns2610_config+0xd4>)
 8000490:	f002 fa4c 	bl	800292c <iprintf>
	if(adns2610_readRegister(dev, ADNS_2610_CONFIG) == CONFIG_C0) printf("OK.\r\n");
 8000494:	79fb      	ldrb	r3, [r7, #7]
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f000 f857 	bl	800054c <adns2610_readRegister>
 800049e:	4603      	mov	r3, r0
 80004a0:	2b01      	cmp	r3, #1
 80004a2:	d10f      	bne.n	80004c4 <adns2610_config+0x6c>
 80004a4:	4822      	ldr	r0, [pc, #136]	; (8000530 <adns2610_config+0xd8>)
 80004a6:	f002 fab5 	bl	8002a14 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS_2610_STATUS));
 80004aa:	4922      	ldr	r1, [pc, #136]	; (8000534 <adns2610_config+0xdc>)
 80004ac:	4822      	ldr	r0, [pc, #136]	; (8000538 <adns2610_config+0xe0>)
 80004ae:	f002 fa3d 	bl	800292c <iprintf>
	if(adns2610_readRegister(dev, ADNS_2610_STATUS) == STATUS_AWAKE) printf("OK.\r\n");
 80004b2:	79fb      	ldrb	r3, [r7, #7]
 80004b4:	2101      	movs	r1, #1
 80004b6:	4618      	mov	r0, r3
 80004b8:	f000 f848 	bl	800054c <adns2610_readRegister>
 80004bc:	4603      	mov	r3, r0
 80004be:	2b01      	cmp	r3, #1
 80004c0:	d116      	bne.n	80004f0 <adns2610_config+0x98>
 80004c2:	e003      	b.n	80004cc <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 80004c4:	481d      	ldr	r0, [pc, #116]	; (800053c <adns2610_config+0xe4>)
 80004c6:	f002 faa5 	bl	8002a14 <puts>
 80004ca:	e7fe      	b.n	80004ca <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS_2610_STATUS) == STATUS_AWAKE) printf("OK.\r\n");
 80004cc:	4818      	ldr	r0, [pc, #96]	; (8000530 <adns2610_config+0xd8>)
 80004ce:	f002 faa1 	bl	8002a14 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS_2610_INVERSE_ID));
 80004d2:	491b      	ldr	r1, [pc, #108]	; (8000540 <adns2610_config+0xe8>)
 80004d4:	481b      	ldr	r0, [pc, #108]	; (8000544 <adns2610_config+0xec>)
 80004d6:	f002 fa29 	bl	800292c <iprintf>
	if((adns2610_readRegister(dev, ADNS_2610_INVERSE_ID) & INV_PROD)  == INV_PROD) printf("OK.\r\n");
 80004da:	79fb      	ldrb	r3, [r7, #7]
 80004dc:	2111      	movs	r1, #17
 80004de:	4618      	mov	r0, r3
 80004e0:	f000 f834 	bl	800054c <adns2610_readRegister>
 80004e4:	4603      	mov	r3, r0
 80004e6:	f003 030f 	and.w	r3, r3, #15
 80004ea:	2b0f      	cmp	r3, #15
 80004ec:	d108      	bne.n	8000500 <adns2610_config+0xa8>
 80004ee:	e003      	b.n	80004f8 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 80004f0:	4812      	ldr	r0, [pc, #72]	; (800053c <adns2610_config+0xe4>)
 80004f2:	f002 fa8f 	bl	8002a14 <puts>
 80004f6:	e7fe      	b.n	80004f6 <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS_2610_INVERSE_ID) & INV_PROD)  == INV_PROD) printf("OK.\r\n");
 80004f8:	480d      	ldr	r0, [pc, #52]	; (8000530 <adns2610_config+0xd8>)
 80004fa:	f002 fa8b 	bl	8002a14 <puts>
 80004fe:	e003      	b.n	8000508 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000500:	480e      	ldr	r0, [pc, #56]	; (800053c <adns2610_config+0xe4>)
 8000502:	f002 fa87 	bl	8002a14 <puts>
 8000506:	e7fe      	b.n	8000506 <adns2610_config+0xae>

	printf("\r\n");
 8000508:	480f      	ldr	r0, [pc, #60]	; (8000548 <adns2610_config+0xf0>)
 800050a:	f002 fa83 	bl	8002a14 <puts>
}
 800050e:	bf00      	nop
 8000510:	3710      	adds	r7, #16
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	080037d4 	.word	0x080037d4
 800051c:	080037e4 	.word	0x080037e4
 8000520:	080037f4 	.word	0x080037f4
 8000524:	08003850 	.word	0x08003850
 8000528:	08003864 	.word	0x08003864
 800052c:	08003894 	.word	0x08003894
 8000530:	080038c0 	.word	0x080038c0
 8000534:	080038d0 	.word	0x080038d0
 8000538:	080038e4 	.word	0x080038e4
 800053c:	080038c8 	.word	0x080038c8
 8000540:	08003910 	.word	0x08003910
 8000544:	08003928 	.word	0x08003928
 8000548:	0800395c 	.word	0x0800395c

0800054c <adns2610_readRegister>:

uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 800054c:	b580      	push	{r7, lr}
 800054e:	b084      	sub	sp, #16
 8000550:	af00      	add	r7, sp, #0
 8000552:	4603      	mov	r3, r0
 8000554:	460a      	mov	r2, r1
 8000556:	71fb      	strb	r3, [r7, #7]
 8000558:	4613      	mov	r3, r2
 800055a:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d101      	bne.n	8000566 <adns2610_readRegister+0x1a>
 8000562:	4b26      	ldr	r3, [pc, #152]	; (80005fc <adns2610_readRegister+0xb0>)
 8000564:	e000      	b.n	8000568 <adns2610_readRegister+0x1c>
 8000566:	4b26      	ldr	r3, [pc, #152]	; (8000600 <adns2610_readRegister+0xb4>)
 8000568:	4a26      	ldr	r2, [pc, #152]	; (8000604 <adns2610_readRegister+0xb8>)
 800056a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800056c:	bf00      	nop
 800056e:	4b25      	ldr	r3, [pc, #148]	; (8000604 <adns2610_readRegister+0xb8>)
 8000570:	681b      	ldr	r3, [r3, #0]
 8000572:	689b      	ldr	r3, [r3, #8]
 8000574:	f003 0302 	and.w	r3, r3, #2
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0f8      	beq.n	800056e <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 800057c:	4b21      	ldr	r3, [pc, #132]	; (8000604 <adns2610_readRegister+0xb8>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	330c      	adds	r3, #12
 8000582:	79ba      	ldrb	r2, [r7, #6]
 8000584:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000586:	bf00      	nop
 8000588:	4b1e      	ldr	r3, [pc, #120]	; (8000604 <adns2610_readRegister+0xb8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	689b      	ldr	r3, [r3, #8]
 800058e:	f003 0301 	and.w	r3, r3, #1
 8000592:	2b00      	cmp	r3, #0
 8000594:	d0f8      	beq.n	8000588 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000596:	4b1b      	ldr	r3, [pc, #108]	; (8000604 <adns2610_readRegister+0xb8>)
 8000598:	681b      	ldr	r3, [r3, #0]
 800059a:	330c      	adds	r3, #12
 800059c:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 800059e:	2001      	movs	r0, #1
 80005a0:	f002 f95c 	bl	800285c <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 80005a4:	4b17      	ldr	r3, [pc, #92]	; (8000604 <adns2610_readRegister+0xb8>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	330c      	adds	r3, #12
 80005aa:	2200      	movs	r2, #0
 80005ac:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80005ae:	bf00      	nop
 80005b0:	4b14      	ldr	r3, [pc, #80]	; (8000604 <adns2610_readRegister+0xb8>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	689b      	ldr	r3, [r3, #8]
 80005b6:	f003 0301 	and.w	r3, r3, #1
 80005ba:	2b00      	cmp	r3, #0
 80005bc:	d0f8      	beq.n	80005b0 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80005be:	4b11      	ldr	r3, [pc, #68]	; (8000604 <adns2610_readRegister+0xb8>)
 80005c0:	681b      	ldr	r3, [r3, #0]
 80005c2:	330c      	adds	r3, #12
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80005c8:	bf00      	nop
 80005ca:	4b0e      	ldr	r3, [pc, #56]	; (8000604 <adns2610_readRegister+0xb8>)
 80005cc:	681b      	ldr	r3, [r3, #0]
 80005ce:	689b      	ldr	r3, [r3, #8]
 80005d0:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80005d4:	4b0b      	ldr	r3, [pc, #44]	; (8000604 <adns2610_readRegister+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	689b      	ldr	r3, [r3, #8]
 80005da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005de:	431a      	orrs	r2, r3
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <adns2610_readRegister+0xb8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	689b      	ldr	r3, [r3, #8]
 80005e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005ea:	4313      	orrs	r3, r2
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d1ec      	bne.n	80005ca <adns2610_readRegister+0x7e>
	return value;
 80005f0:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	3710      	adds	r7, #16
 80005f6:	46bd      	mov	sp, r7
 80005f8:	bd80      	pop	{r7, pc}
 80005fa:	bf00      	nop
 80005fc:	40003800 	.word	0x40003800
 8000600:	40003c00 	.word	0x40003c00
 8000604:	20000084 	.word	0x20000084

08000608 <adns2610_writeRegister>:

void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
 8000612:	460b      	mov	r3, r1
 8000614:	71bb      	strb	r3, [r7, #6]
 8000616:	4613      	mov	r3, r2
 8000618:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b00      	cmp	r3, #0
 800061e:	d101      	bne.n	8000624 <adns2610_writeRegister+0x1c>
 8000620:	4b26      	ldr	r3, [pc, #152]	; (80006bc <adns2610_writeRegister+0xb4>)
 8000622:	e000      	b.n	8000626 <adns2610_writeRegister+0x1e>
 8000624:	4b26      	ldr	r3, [pc, #152]	; (80006c0 <adns2610_writeRegister+0xb8>)
 8000626:	4a27      	ldr	r2, [pc, #156]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000628:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 800062a:	4b26      	ldr	r3, [pc, #152]	; (80006c4 <adns2610_writeRegister+0xbc>)
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	685a      	ldr	r2, [r3, #4]
 8000630:	4b24      	ldr	r3, [pc, #144]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000632:	681b      	ldr	r3, [r3, #0]
 8000634:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8000638:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800063a:	bf00      	nop
 800063c:	4b21      	ldr	r3, [pc, #132]	; (80006c4 <adns2610_writeRegister+0xbc>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	689b      	ldr	r3, [r3, #8]
 8000642:	f003 0302 	and.w	r3, r3, #2
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0f8      	beq.n	800063c <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 800064a:	797b      	ldrb	r3, [r7, #5]
 800064c:	021b      	lsls	r3, r3, #8
 800064e:	4619      	mov	r1, r3
 8000650:	79bb      	ldrb	r3, [r7, #6]
 8000652:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000656:	b2db      	uxtb	r3, r3
 8000658:	461a      	mov	r2, r3
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <adns2610_writeRegister+0xbc>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	430a      	orrs	r2, r1
 8000660:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000662:	bf00      	nop
 8000664:	4b17      	ldr	r3, [pc, #92]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000666:	681b      	ldr	r3, [r3, #0]
 8000668:	689b      	ldr	r3, [r3, #8]
 800066a:	f003 0301 	and.w	r3, r3, #1
 800066e:	2b00      	cmp	r3, #0
 8000670:	d0f8      	beq.n	8000664 <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 8000672:	4b14      	ldr	r3, [pc, #80]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000674:	681b      	ldr	r3, [r3, #0]
 8000676:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000678:	bf00      	nop
 800067a:	4b12      	ldr	r3, [pc, #72]	; (80006c4 <adns2610_writeRegister+0xbc>)
 800067c:	681b      	ldr	r3, [r3, #0]
 800067e:	689b      	ldr	r3, [r3, #8]
 8000680:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000684:	4b0f      	ldr	r3, [pc, #60]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000686:	681b      	ldr	r3, [r3, #0]
 8000688:	689b      	ldr	r3, [r3, #8]
 800068a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800068e:	431a      	orrs	r2, r3
 8000690:	4b0c      	ldr	r3, [pc, #48]	; (80006c4 <adns2610_writeRegister+0xbc>)
 8000692:	681b      	ldr	r3, [r3, #0]
 8000694:	689b      	ldr	r3, [r3, #8]
 8000696:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800069a:	4313      	orrs	r3, r2
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1ec      	bne.n	800067a <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <adns2610_writeRegister+0xbc>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	685a      	ldr	r2, [r3, #4]
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <adns2610_writeRegister+0xbc>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80006ae:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80006b0:	bf00      	nop
 80006b2:	370c      	adds	r7, #12
 80006b4:	46bd      	mov	sp, r7
 80006b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ba:	4770      	bx	lr
 80006bc:	40003800 	.word	0x40003800
 80006c0:	40003c00 	.word	0x40003c00
 80006c4:	20000084 	.word	0x20000084

080006c8 <TIM1_UP_TIM16_IRQHandler>:
	#else	// HALF DUPLEX SPI MODE

	#endif
}

void TIM1_UP_TIM16_IRQHandler(void){
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 80006cc:	4b07      	ldr	r3, [pc, #28]	; (80006ec <TIM1_UP_TIM16_IRQHandler+0x24>)
 80006ce:	691b      	ldr	r3, [r3, #16]
 80006d0:	f003 0301 	and.w	r3, r3, #1
 80006d4:	2b00      	cmp	r3, #0
 80006d6:	d007      	beq.n	80006e8 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Process FSM
		adns2610_processFSM();
 80006d8:	f7ff fe20 	bl	800031c <adns2610_processFSM>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <TIM1_UP_TIM16_IRQHandler+0x24>)
 80006de:	691b      	ldr	r3, [r3, #16]
 80006e0:	4a02      	ldr	r2, [pc, #8]	; (80006ec <TIM1_UP_TIM16_IRQHandler+0x24>)
 80006e2:	f023 0301 	bic.w	r3, r3, #1
 80006e6:	6113      	str	r3, [r2, #16]
	}
}
 80006e8:	bf00      	nop
 80006ea:	bd80      	pop	{r7, pc}
 80006ec:	40012c00 	.word	0x40012c00

080006f0 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b085      	sub	sp, #20
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006fc:	4907      	ldr	r1, [pc, #28]	; (800071c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	4313      	orrs	r3, r2
 8000702:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000704:	4b05      	ldr	r3, [pc, #20]	; (800071c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000706:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4013      	ands	r3, r2
 800070c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800070e:	68fb      	ldr	r3, [r7, #12]
}
 8000710:	bf00      	nop
 8000712:	3714      	adds	r7, #20
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40021000 	.word	0x40021000

08000720 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000720:	b480      	push	{r7}
 8000722:	b087      	sub	sp, #28
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
 8000728:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800072a:	4a17      	ldr	r2, [pc, #92]	; (8000788 <LL_SYSCFG_SetEXTISource+0x68>)
 800072c:	683b      	ldr	r3, [r7, #0]
 800072e:	b2db      	uxtb	r3, r3
 8000730:	3302      	adds	r3, #2
 8000732:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000736:	683b      	ldr	r3, [r7, #0]
 8000738:	0c1b      	lsrs	r3, r3, #16
 800073a:	43db      	mvns	r3, r3
 800073c:	ea02 0103 	and.w	r1, r2, r3
 8000740:	683b      	ldr	r3, [r7, #0]
 8000742:	0c1b      	lsrs	r3, r3, #16
 8000744:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000746:	693b      	ldr	r3, [r7, #16]
 8000748:	fa93 f3a3 	rbit	r3, r3
 800074c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800074e:	68fb      	ldr	r3, [r7, #12]
 8000750:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000752:	697b      	ldr	r3, [r7, #20]
 8000754:	2b00      	cmp	r3, #0
 8000756:	d101      	bne.n	800075c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000758:	2320      	movs	r3, #32
 800075a:	e003      	b.n	8000764 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800075c:	697b      	ldr	r3, [r7, #20]
 800075e:	fab3 f383 	clz	r3, r3
 8000762:	b2db      	uxtb	r3, r3
 8000764:	461a      	mov	r2, r3
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	fa03 f202 	lsl.w	r2, r3, r2
 800076c:	4806      	ldr	r0, [pc, #24]	; (8000788 <LL_SYSCFG_SetEXTISource+0x68>)
 800076e:	683b      	ldr	r3, [r7, #0]
 8000770:	b2db      	uxtb	r3, r3
 8000772:	430a      	orrs	r2, r1
 8000774:	3302      	adds	r3, #2
 8000776:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800077a:	bf00      	nop
 800077c:	371c      	adds	r7, #28
 800077e:	46bd      	mov	sp, r7
 8000780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000784:	4770      	bx	lr
 8000786:	bf00      	nop
 8000788:	40010000 	.word	0x40010000

0800078c <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 800078c:	b480      	push	{r7}
 800078e:	b08b      	sub	sp, #44	; 0x2c
 8000790:	af00      	add	r7, sp, #0
 8000792:	60f8      	str	r0, [r7, #12]
 8000794:	60b9      	str	r1, [r7, #8]
 8000796:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000798:	68fb      	ldr	r3, [r7, #12]
 800079a:	681a      	ldr	r2, [r3, #0]
 800079c:	68bb      	ldr	r3, [r7, #8]
 800079e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007a0:	697b      	ldr	r3, [r7, #20]
 80007a2:	fa93 f3a3 	rbit	r3, r3
 80007a6:	613b      	str	r3, [r7, #16]
  return result;
 80007a8:	693b      	ldr	r3, [r7, #16]
 80007aa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80007ac:	69bb      	ldr	r3, [r7, #24]
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d101      	bne.n	80007b6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80007b2:	2320      	movs	r3, #32
 80007b4:	e003      	b.n	80007be <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80007b6:	69bb      	ldr	r3, [r7, #24]
 80007b8:	fab3 f383 	clz	r3, r3
 80007bc:	b2db      	uxtb	r3, r3
 80007be:	005b      	lsls	r3, r3, #1
 80007c0:	2103      	movs	r1, #3
 80007c2:	fa01 f303 	lsl.w	r3, r1, r3
 80007c6:	43db      	mvns	r3, r3
 80007c8:	401a      	ands	r2, r3
 80007ca:	68bb      	ldr	r3, [r7, #8]
 80007cc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007ce:	6a3b      	ldr	r3, [r7, #32]
 80007d0:	fa93 f3a3 	rbit	r3, r3
 80007d4:	61fb      	str	r3, [r7, #28]
  return result;
 80007d6:	69fb      	ldr	r3, [r7, #28]
 80007d8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80007da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d101      	bne.n	80007e4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80007e0:	2320      	movs	r3, #32
 80007e2:	e003      	b.n	80007ec <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80007e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007e6:	fab3 f383 	clz	r3, r3
 80007ea:	b2db      	uxtb	r3, r3
 80007ec:	005b      	lsls	r3, r3, #1
 80007ee:	6879      	ldr	r1, [r7, #4]
 80007f0:	fa01 f303 	lsl.w	r3, r1, r3
 80007f4:	431a      	orrs	r2, r3
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	601a      	str	r2, [r3, #0]
}
 80007fa:	bf00      	nop
 80007fc:	372c      	adds	r7, #44	; 0x2c
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8000806:	b480      	push	{r7}
 8000808:	b08b      	sub	sp, #44	; 0x2c
 800080a:	af00      	add	r7, sp, #0
 800080c:	60f8      	str	r0, [r7, #12]
 800080e:	60b9      	str	r1, [r7, #8]
 8000810:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000812:	68fb      	ldr	r3, [r7, #12]
 8000814:	68da      	ldr	r2, [r3, #12]
 8000816:	68bb      	ldr	r3, [r7, #8]
 8000818:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800081a:	697b      	ldr	r3, [r7, #20]
 800081c:	fa93 f3a3 	rbit	r3, r3
 8000820:	613b      	str	r3, [r7, #16]
  return result;
 8000822:	693b      	ldr	r3, [r7, #16]
 8000824:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000826:	69bb      	ldr	r3, [r7, #24]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d101      	bne.n	8000830 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800082c:	2320      	movs	r3, #32
 800082e:	e003      	b.n	8000838 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000830:	69bb      	ldr	r3, [r7, #24]
 8000832:	fab3 f383 	clz	r3, r3
 8000836:	b2db      	uxtb	r3, r3
 8000838:	005b      	lsls	r3, r3, #1
 800083a:	2103      	movs	r1, #3
 800083c:	fa01 f303 	lsl.w	r3, r1, r3
 8000840:	43db      	mvns	r3, r3
 8000842:	401a      	ands	r2, r3
 8000844:	68bb      	ldr	r3, [r7, #8]
 8000846:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000848:	6a3b      	ldr	r3, [r7, #32]
 800084a:	fa93 f3a3 	rbit	r3, r3
 800084e:	61fb      	str	r3, [r7, #28]
  return result;
 8000850:	69fb      	ldr	r3, [r7, #28]
 8000852:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000856:	2b00      	cmp	r3, #0
 8000858:	d101      	bne.n	800085e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800085a:	2320      	movs	r3, #32
 800085c:	e003      	b.n	8000866 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800085e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000860:	fab3 f383 	clz	r3, r3
 8000864:	b2db      	uxtb	r3, r3
 8000866:	005b      	lsls	r3, r3, #1
 8000868:	6879      	ldr	r1, [r7, #4]
 800086a:	fa01 f303 	lsl.w	r3, r1, r3
 800086e:	431a      	orrs	r2, r3
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	60da      	str	r2, [r3, #12]
}
 8000874:	bf00      	nop
 8000876:	372c      	adds	r7, #44	; 0x2c
 8000878:	46bd      	mov	sp, r7
 800087a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800087e:	4770      	bx	lr

08000880 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000880:	b480      	push	{r7}
 8000882:	b083      	sub	sp, #12
 8000884:	af00      	add	r7, sp, #0
 8000886:	6078      	str	r0, [r7, #4]
 8000888:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	683a      	ldr	r2, [r7, #0]
 800088e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000890:	bf00      	nop
 8000892:	370c      	adds	r7, #12
 8000894:	46bd      	mov	sp, r7
 8000896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089a:	4770      	bx	lr

0800089c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b08a      	sub	sp, #40	; 0x28
 80008a0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80008a2:	f107 031c 	add.w	r3, r7, #28
 80008a6:	2200      	movs	r2, #0
 80008a8:	601a      	str	r2, [r3, #0]
 80008aa:	605a      	str	r2, [r3, #4]
 80008ac:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ae:	1d3b      	adds	r3, r7, #4
 80008b0:	2200      	movs	r2, #0
 80008b2:	601a      	str	r2, [r3, #0]
 80008b4:	605a      	str	r2, [r3, #4]
 80008b6:	609a      	str	r2, [r3, #8]
 80008b8:	60da      	str	r2, [r3, #12]
 80008ba:	611a      	str	r2, [r3, #16]
 80008bc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80008be:	2004      	movs	r0, #4
 80008c0:	f7ff ff16 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 80008c4:	2080      	movs	r0, #128	; 0x80
 80008c6:	f7ff ff13 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80008ca:	2001      	movs	r0, #1
 80008cc:	f7ff ff10 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80008d0:	2002      	movs	r0, #2
 80008d2:	f7ff ff0d 	bl	80006f0 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80008d6:	2120      	movs	r1, #32
 80008d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008dc:	f7ff ffd0 	bl	8000880 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80008e0:	491b      	ldr	r1, [pc, #108]	; (8000950 <MX_GPIO_Init+0xb4>)
 80008e2:	2002      	movs	r0, #2
 80008e4:	f7ff ff1c 	bl	8000720 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80008e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008ec:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 80008ee:	2300      	movs	r3, #0
 80008f0:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 80008f2:	2301      	movs	r3, #1
 80008f4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008f8:	2300      	movs	r3, #0
 80008fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80008fe:	2302      	movs	r3, #2
 8000900:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4618      	mov	r0, r3
 800090a:	f000 fef1 	bl	80016f0 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800090e:	2200      	movs	r2, #0
 8000910:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000914:	480f      	ldr	r0, [pc, #60]	; (8000954 <MX_GPIO_Init+0xb8>)
 8000916:	f7ff ff76 	bl	8000806 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 800091a:	2200      	movs	r2, #0
 800091c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000920:	480c      	ldr	r0, [pc, #48]	; (8000954 <MX_GPIO_Init+0xb8>)
 8000922:	f7ff ff33 	bl	800078c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8000926:	2320      	movs	r3, #32
 8000928:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800092a:	2301      	movs	r3, #1
 800092c:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	4619      	mov	r1, r3
 800093e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000942:	f001 f90c 	bl	8001b5e <LL_GPIO_Init>

}
 8000946:	bf00      	nop
 8000948:	3728      	adds	r7, #40	; 0x28
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	00f00003 	.word	0x00f00003
 8000954:	48000800 	.word	0x48000800

08000958 <__NVIC_SetPriorityGrouping>:
{
 8000958:	b480      	push	{r7}
 800095a:	b085      	sub	sp, #20
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	f003 0307 	and.w	r3, r3, #7
 8000966:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000968:	4b0c      	ldr	r3, [pc, #48]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800096a:	68db      	ldr	r3, [r3, #12]
 800096c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000974:	4013      	ands	r3, r2
 8000976:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800097c:	68bb      	ldr	r3, [r7, #8]
 800097e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000980:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000984:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000988:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800098a:	4a04      	ldr	r2, [pc, #16]	; (800099c <__NVIC_SetPriorityGrouping+0x44>)
 800098c:	68bb      	ldr	r3, [r7, #8]
 800098e:	60d3      	str	r3, [r2, #12]
}
 8000990:	bf00      	nop
 8000992:	3714      	adds	r7, #20
 8000994:	46bd      	mov	sp, r7
 8000996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800099a:	4770      	bx	lr
 800099c:	e000ed00 	.word	0xe000ed00

080009a0 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80009a0:	b480      	push	{r7}
 80009a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 80009a4:	4b05      	ldr	r3, [pc, #20]	; (80009bc <LL_RCC_HSI_Enable+0x1c>)
 80009a6:	681b      	ldr	r3, [r3, #0]
 80009a8:	4a04      	ldr	r2, [pc, #16]	; (80009bc <LL_RCC_HSI_Enable+0x1c>)
 80009aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009ae:	6013      	str	r3, [r2, #0]
}
 80009b0:	bf00      	nop
 80009b2:	46bd      	mov	sp, r7
 80009b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b8:	4770      	bx	lr
 80009ba:	bf00      	nop
 80009bc:	40021000 	.word	0x40021000

080009c0 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 80009c0:	b480      	push	{r7}
 80009c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80009c4:	4b07      	ldr	r3, [pc, #28]	; (80009e4 <LL_RCC_HSI_IsReady+0x24>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80009cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80009d0:	d101      	bne.n	80009d6 <LL_RCC_HSI_IsReady+0x16>
 80009d2:	2301      	movs	r3, #1
 80009d4:	e000      	b.n	80009d8 <LL_RCC_HSI_IsReady+0x18>
 80009d6:	2300      	movs	r3, #0
}
 80009d8:	4618      	mov	r0, r3
 80009da:	46bd      	mov	sp, r7
 80009dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009e0:	4770      	bx	lr
 80009e2:	bf00      	nop
 80009e4:	40021000 	.word	0x40021000

080009e8 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 80009e8:	b480      	push	{r7}
 80009ea:	b083      	sub	sp, #12
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 80009f0:	4b07      	ldr	r3, [pc, #28]	; (8000a10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	061b      	lsls	r3, r3, #24
 80009fc:	4904      	ldr	r1, [pc, #16]	; (8000a10 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009fe:	4313      	orrs	r3, r2
 8000a00:	604b      	str	r3, [r1, #4]
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	40021000 	.word	0x40021000

08000a14 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <LL_RCC_SetSysClkSource+0x24>)
 8000a1e:	689b      	ldr	r3, [r3, #8]
 8000a20:	f023 0203 	bic.w	r2, r3, #3
 8000a24:	4904      	ldr	r1, [pc, #16]	; (8000a38 <LL_RCC_SetSysClkSource+0x24>)
 8000a26:	687b      	ldr	r3, [r7, #4]
 8000a28:	4313      	orrs	r3, r2
 8000a2a:	608b      	str	r3, [r1, #8]
}
 8000a2c:	bf00      	nop
 8000a2e:	370c      	adds	r7, #12
 8000a30:	46bd      	mov	sp, r7
 8000a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a36:	4770      	bx	lr
 8000a38:	40021000 	.word	0x40021000

08000a3c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000a40:	4b04      	ldr	r3, [pc, #16]	; (8000a54 <LL_RCC_GetSysClkSource+0x18>)
 8000a42:	689b      	ldr	r3, [r3, #8]
 8000a44:	f003 030c 	and.w	r3, r3, #12
}
 8000a48:	4618      	mov	r0, r3
 8000a4a:	46bd      	mov	sp, r7
 8000a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a50:	4770      	bx	lr
 8000a52:	bf00      	nop
 8000a54:	40021000 	.word	0x40021000

08000a58 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a60:	4b06      	ldr	r3, [pc, #24]	; (8000a7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a62:	689b      	ldr	r3, [r3, #8]
 8000a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a68:	4904      	ldr	r1, [pc, #16]	; (8000a7c <LL_RCC_SetAHBPrescaler+0x24>)
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	4313      	orrs	r3, r2
 8000a6e:	608b      	str	r3, [r1, #8]
}
 8000a70:	bf00      	nop
 8000a72:	370c      	adds	r7, #12
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	40021000 	.word	0x40021000

08000a80 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a88:	4b06      	ldr	r3, [pc, #24]	; (8000aa4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a8a:	689b      	ldr	r3, [r3, #8]
 8000a8c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a90:	4904      	ldr	r1, [pc, #16]	; (8000aa4 <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	4313      	orrs	r3, r2
 8000a96:	608b      	str	r3, [r1, #8]
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b083      	sub	sp, #12
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000ab0:	4b06      	ldr	r3, [pc, #24]	; (8000acc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000ab2:	689b      	ldr	r3, [r3, #8]
 8000ab4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000ab8:	4904      	ldr	r1, [pc, #16]	; (8000acc <LL_RCC_SetAPB2Prescaler+0x24>)
 8000aba:	687b      	ldr	r3, [r7, #4]
 8000abc:	4313      	orrs	r3, r2
 8000abe:	608b      	str	r3, [r1, #8]
}
 8000ac0:	bf00      	nop
 8000ac2:	370c      	adds	r7, #12
 8000ac4:	46bd      	mov	sp, r7
 8000ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aca:	4770      	bx	lr
 8000acc:	40021000 	.word	0x40021000

08000ad0 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000ad8:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <LL_RCC_SetUSARTClockSource+0x30>)
 8000ada:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	0c1b      	lsrs	r3, r3, #16
 8000ae2:	43db      	mvns	r3, r3
 8000ae4:	401a      	ands	r2, r3
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	b29b      	uxth	r3, r3
 8000aea:	4905      	ldr	r1, [pc, #20]	; (8000b00 <LL_RCC_SetUSARTClockSource+0x30>)
 8000aec:	4313      	orrs	r3, r2
 8000aee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000af2:	bf00      	nop
 8000af4:	370c      	adds	r7, #12
 8000af6:	46bd      	mov	sp, r7
 8000af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afc:	4770      	bx	lr
 8000afe:	bf00      	nop
 8000b00:	40021000 	.word	0x40021000

08000b04 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000b04:	b480      	push	{r7}
 8000b06:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000b08:	4b05      	ldr	r3, [pc, #20]	; (8000b20 <LL_RCC_PLL_Enable+0x1c>)
 8000b0a:	681b      	ldr	r3, [r3, #0]
 8000b0c:	4a04      	ldr	r2, [pc, #16]	; (8000b20 <LL_RCC_PLL_Enable+0x1c>)
 8000b0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b12:	6013      	str	r3, [r2, #0]
}
 8000b14:	bf00      	nop
 8000b16:	46bd      	mov	sp, r7
 8000b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1c:	4770      	bx	lr
 8000b1e:	bf00      	nop
 8000b20:	40021000 	.word	0x40021000

08000b24 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000b24:	b480      	push	{r7}
 8000b26:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000b28:	4b07      	ldr	r3, [pc, #28]	; (8000b48 <LL_RCC_PLL_IsReady+0x24>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b30:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000b34:	d101      	bne.n	8000b3a <LL_RCC_PLL_IsReady+0x16>
 8000b36:	2301      	movs	r3, #1
 8000b38:	e000      	b.n	8000b3c <LL_RCC_PLL_IsReady+0x18>
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	46bd      	mov	sp, r7
 8000b40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b44:	4770      	bx	lr
 8000b46:	bf00      	nop
 8000b48:	40021000 	.word	0x40021000

08000b4c <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	b085      	sub	sp, #20
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	60f8      	str	r0, [r7, #12]
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b5c:	68da      	ldr	r2, [r3, #12]
 8000b5e:	4b0a      	ldr	r3, [pc, #40]	; (8000b88 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000b60:	4013      	ands	r3, r2
 8000b62:	68f9      	ldr	r1, [r7, #12]
 8000b64:	68ba      	ldr	r2, [r7, #8]
 8000b66:	4311      	orrs	r1, r2
 8000b68:	687a      	ldr	r2, [r7, #4]
 8000b6a:	0212      	lsls	r2, r2, #8
 8000b6c:	4311      	orrs	r1, r2
 8000b6e:	683a      	ldr	r2, [r7, #0]
 8000b70:	430a      	orrs	r2, r1
 8000b72:	4904      	ldr	r1, [pc, #16]	; (8000b84 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b74:	4313      	orrs	r3, r2
 8000b76:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000b78:	bf00      	nop
 8000b7a:	3714      	adds	r7, #20
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	40021000 	.word	0x40021000
 8000b88:	f9ff808c 	.word	0xf9ff808c

08000b8c <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000b90:	4b05      	ldr	r3, [pc, #20]	; (8000ba8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b92:	68db      	ldr	r3, [r3, #12]
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b9a:	60d3      	str	r3, [r2, #12]
}
 8000b9c:	bf00      	nop
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop
 8000ba8:	40021000 	.word	0x40021000

08000bac <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000bac:	b480      	push	{r7}
 8000bae:	b085      	sub	sp, #20
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000bb4:	4b08      	ldr	r3, [pc, #32]	; (8000bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bb6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bb8:	4907      	ldr	r1, [pc, #28]	; (8000bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	4313      	orrs	r3, r2
 8000bbe:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000bc0:	4b05      	ldr	r3, [pc, #20]	; (8000bd8 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000bc2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	4013      	ands	r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bca:	68fb      	ldr	r3, [r7, #12]
}
 8000bcc:	bf00      	nop
 8000bce:	3714      	adds	r7, #20
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40021000 	.word	0x40021000

08000bdc <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b085      	sub	sp, #20
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000be4:	4b08      	ldr	r3, [pc, #32]	; (8000c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000be6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000be8:	4907      	ldr	r1, [pc, #28]	; (8000c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	4313      	orrs	r3, r2
 8000bee:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000bf0:	4b05      	ldr	r3, [pc, #20]	; (8000c08 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000bf2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000bf4:	687b      	ldr	r3, [r7, #4]
 8000bf6:	4013      	ands	r3, r2
 8000bf8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000bfa:	68fb      	ldr	r3, [r7, #12]
}
 8000bfc:	bf00      	nop
 8000bfe:	3714      	adds	r7, #20
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr
 8000c08:	40021000 	.word	0x40021000

08000c0c <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000c14:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <LL_FLASH_SetLatency+0x24>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	f023 0207 	bic.w	r2, r3, #7
 8000c1c:	4904      	ldr	r1, [pc, #16]	; (8000c30 <LL_FLASH_SetLatency+0x24>)
 8000c1e:	687b      	ldr	r3, [r7, #4]
 8000c20:	4313      	orrs	r3, r2
 8000c22:	600b      	str	r3, [r1, #0]
}
 8000c24:	bf00      	nop
 8000c26:	370c      	adds	r7, #12
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2e:	4770      	bx	lr
 8000c30:	40022000 	.word	0x40022000

08000c34 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000c38:	4b04      	ldr	r3, [pc, #16]	; (8000c4c <LL_FLASH_GetLatency+0x18>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	f003 0307 	and.w	r3, r3, #7
}
 8000c40:	4618      	mov	r0, r3
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	40022000 	.word	0x40022000

08000c50 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000c50:	b480      	push	{r7}
 8000c52:	b083      	sub	sp, #12
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c58:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000c60:	4904      	ldr	r1, [pc, #16]	; (8000c74 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	4313      	orrs	r3, r2
 8000c66:	600b      	str	r3, [r1, #0]
}
 8000c68:	bf00      	nop
 8000c6a:	370c      	adds	r7, #12
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr
 8000c74:	40007000 	.word	0x40007000

08000c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f7ff ffad 	bl	8000bdc <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c82:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c86:	f7ff ff91 	bl	8000bac <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c8a:	2003      	movs	r0, #3
 8000c8c:	f7ff fe64 	bl	8000958 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c90:	f000 f81c 	bl	8000ccc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c94:	f7ff fe02 	bl	800089c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c98:	f000 fb80 	bl	800139c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c9c:	f000 f8b4 	bl	8000e08 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000ca0:	f000 fa9c 	bl	80011dc <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8000ca4:	f000 fb4c 	bl	8001340 <startupPrint>

  adns2610_init();
 8000ca8:	f7ff fb2a 	bl	8000300 <adns2610_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("PIXEL SUM 0x%02X\r\n", adns2610_readRegister(ADNS2610_RIGHT, ADNS_2610_PIXEL_SUM));
 8000cac:	2107      	movs	r1, #7
 8000cae:	2000      	movs	r0, #0
 8000cb0:	f7ff fc4c 	bl	800054c <adns2610_readRegister>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	4619      	mov	r1, r3
 8000cb8:	4803      	ldr	r0, [pc, #12]	; (8000cc8 <main+0x50>)
 8000cba:	f001 fe37 	bl	800292c <iprintf>
	  LL_mDelay(1000);
 8000cbe:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000cc2:	f001 fdcb 	bl	800285c <LL_mDelay>
	  printf("PIXEL SUM 0x%02X\r\n", adns2610_readRegister(ADNS2610_RIGHT, ADNS_2610_PIXEL_SUM));
 8000cc6:	e7f1      	b.n	8000cac <main+0x34>
 8000cc8:	08003960 	.word	0x08003960

08000ccc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000cd0:	2003      	movs	r0, #3
 8000cd2:	f7ff ff9b 	bl	8000c0c <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000cd6:	bf00      	nop
 8000cd8:	f7ff ffac 	bl	8000c34 <LL_FLASH_GetLatency>
 8000cdc:	4603      	mov	r3, r0
 8000cde:	2b03      	cmp	r3, #3
 8000ce0:	d1fa      	bne.n	8000cd8 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000ce2:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000ce6:	f7ff ffb3 	bl	8000c50 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000cea:	f7ff fe59 	bl	80009a0 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000cee:	bf00      	nop
 8000cf0:	f7ff fe66 	bl	80009c0 <LL_RCC_HSI_IsReady>
 8000cf4:	4603      	mov	r3, r0
 8000cf6:	2b01      	cmp	r3, #1
 8000cf8:	d1fa      	bne.n	8000cf0 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000cfa:	2010      	movs	r0, #16
 8000cfc:	f7ff fe74 	bl	80009e8 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000d00:	2300      	movs	r3, #0
 8000d02:	2208      	movs	r2, #8
 8000d04:	2100      	movs	r1, #0
 8000d06:	2002      	movs	r0, #2
 8000d08:	f7ff ff20 	bl	8000b4c <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000d0c:	f7ff ff3e 	bl	8000b8c <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d10:	f7ff fef8 	bl	8000b04 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d14:	bf00      	nop
 8000d16:	f7ff ff05 	bl	8000b24 <LL_RCC_PLL_IsReady>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b01      	cmp	r3, #1
 8000d1e:	d1fa      	bne.n	8000d16 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d20:	2003      	movs	r0, #3
 8000d22:	f7ff fe77 	bl	8000a14 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d26:	bf00      	nop
 8000d28:	f7ff fe88 	bl	8000a3c <LL_RCC_GetSysClkSource>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	2b0c      	cmp	r3, #12
 8000d30:	d1fa      	bne.n	8000d28 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d32:	2000      	movs	r0, #0
 8000d34:	f7ff fe90 	bl	8000a58 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d38:	2000      	movs	r0, #0
 8000d3a:	f7ff fea1 	bl	8000a80 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d3e:	2000      	movs	r0, #0
 8000d40:	f7ff feb2 	bl	8000aa8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8000d44:	4805      	ldr	r0, [pc, #20]	; (8000d5c <SystemClock_Config+0x90>)
 8000d46:	f001 fd7b 	bl	8002840 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8000d4a:	4804      	ldr	r0, [pc, #16]	; (8000d5c <SystemClock_Config+0x90>)
 8000d4c:	f001 fdac 	bl	80028a8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000d50:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000d54:	f7ff febc 	bl	8000ad0 <LL_RCC_SetUSARTClockSource>
}
 8000d58:	bf00      	nop
 8000d5a:	bd80      	pop	{r7, pc}
 8000d5c:	03d09000 	.word	0x03d09000

08000d60 <LL_AHB2_GRP1_EnableClock>:
{
 8000d60:	b480      	push	{r7}
 8000d62:	b085      	sub	sp, #20
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d68:	4b08      	ldr	r3, [pc, #32]	; (8000d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d6a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d6c:	4907      	ldr	r1, [pc, #28]	; (8000d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	4313      	orrs	r3, r2
 8000d72:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d74:	4b05      	ldr	r3, [pc, #20]	; (8000d8c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d76:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4013      	ands	r3, r2
 8000d7c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d7e:	68fb      	ldr	r3, [r7, #12]
}
 8000d80:	bf00      	nop
 8000d82:	3714      	adds	r7, #20
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	40021000 	.word	0x40021000

08000d90 <LL_APB1_GRP1_EnableClock>:
{
 8000d90:	b480      	push	{r7}
 8000d92:	b085      	sub	sp, #20
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d98:	4b08      	ldr	r3, [pc, #32]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d9c:	4907      	ldr	r1, [pc, #28]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	4313      	orrs	r3, r2
 8000da2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000da4:	4b05      	ldr	r3, [pc, #20]	; (8000dbc <LL_APB1_GRP1_EnableClock+0x2c>)
 8000da6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	4013      	ands	r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000dae:	68fb      	ldr	r3, [r7, #12]
}
 8000db0:	bf00      	nop
 8000db2:	3714      	adds	r7, #20
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr
 8000dbc:	40021000 	.word	0x40021000

08000dc0 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000dc0:	b480      	push	{r7}
 8000dc2:	b083      	sub	sp, #12
 8000dc4:	af00      	add	r7, sp, #0
 8000dc6:	6078      	str	r0, [r7, #4]
 8000dc8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	685b      	ldr	r3, [r3, #4]
 8000dce:	f023 0210 	bic.w	r2, r3, #16
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	431a      	orrs	r2, r3
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	605a      	str	r2, [r3, #4]
}
 8000dda:	bf00      	nop
 8000ddc:	370c      	adds	r7, #12
 8000dde:	46bd      	mov	sp, r7
 8000de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de4:	4770      	bx	lr

08000de6 <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000de6:	b480      	push	{r7}
 8000de8:	b083      	sub	sp, #12
 8000dea:	af00      	add	r7, sp, #0
 8000dec:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	685b      	ldr	r3, [r3, #4]
 8000df2:	f023 0208 	bic.w	r2, r3, #8
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	605a      	str	r2, [r3, #4]
}
 8000dfa:	bf00      	nop
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr
	...

08000e08 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	; 0x40
 8000e0c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	2228      	movs	r2, #40	; 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fd80 	bl	800291c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e1c:	463b      	mov	r3, r7
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]
 8000e2a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000e2c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000e30:	f7ff ffae 	bl	8000d90 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000e34:	2004      	movs	r0, #4
 8000e36:	f7ff ff93 	bl	8000d60 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000e3a:	2002      	movs	r0, #2
 8000e3c:	f7ff ff90 	bl	8000d60 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000e40:	230c      	movs	r3, #12
 8000e42:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e44:	2302      	movs	r3, #2
 8000e46:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e48:	2303      	movs	r3, #3
 8000e4a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e50:	2300      	movs	r3, #0
 8000e52:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e54:	2305      	movs	r3, #5
 8000e56:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e58:	463b      	mov	r3, r7
 8000e5a:	4619      	mov	r1, r3
 8000e5c:	481e      	ldr	r0, [pc, #120]	; (8000ed8 <MX_SPI2_Init+0xd0>)
 8000e5e:	f000 fe7e 	bl	8001b5e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000e62:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e66:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e68:	2302      	movs	r3, #2
 8000e6a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e6c:	2303      	movs	r3, #3
 8000e6e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e74:	2300      	movs	r3, #0
 8000e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e78:	2305      	movs	r3, #5
 8000e7a:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e7c:	463b      	mov	r3, r7
 8000e7e:	4619      	mov	r1, r3
 8000e80:	4816      	ldr	r0, [pc, #88]	; (8000edc <MX_SPI2_Init+0xd4>)
 8000e82:	f000 fe6c 	bl	8001b5e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e86:	2300      	movs	r3, #0
 8000e88:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e8a:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e8e:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e90:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e94:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e96:	2302      	movs	r3, #2
 8000e98:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000e9a:	2301      	movs	r3, #1
 8000e9c:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e9e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8000ea4:	2320      	movs	r3, #32
 8000ea6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000eac:	2300      	movs	r3, #0
 8000eae:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000eb0:	2307      	movs	r3, #7
 8000eb2:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000eb4:	f107 0318 	add.w	r3, r7, #24
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4809      	ldr	r0, [pc, #36]	; (8000ee0 <MX_SPI2_Init+0xd8>)
 8000ebc:	f001 fa9d 	bl	80023fa <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	4807      	ldr	r0, [pc, #28]	; (8000ee0 <MX_SPI2_Init+0xd8>)
 8000ec4:	f7ff ff7c 	bl	8000dc0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8000ec8:	4805      	ldr	r0, [pc, #20]	; (8000ee0 <MX_SPI2_Init+0xd8>)
 8000eca:	f7ff ff8c 	bl	8000de6 <LL_SPI_DisableNSSPulseMgt>

}
 8000ece:	bf00      	nop
 8000ed0:	3740      	adds	r7, #64	; 0x40
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	48000400 	.word	0x48000400
 8000ee0:	40003800 	.word	0x40003800

08000ee4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ee4:	b480      	push	{r7}
 8000ee6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000ee8:	bf00      	nop
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ef6:	e7fe      	b.n	8000ef6 <HardFault_Handler+0x4>

08000ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000efc:	e7fe      	b.n	8000efc <MemManage_Handler+0x4>

08000efe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000efe:	b480      	push	{r7}
 8000f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <BusFault_Handler+0x4>

08000f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f08:	e7fe      	b.n	8000f08 <UsageFault_Handler+0x4>

08000f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f0e:	bf00      	nop
 8000f10:	46bd      	mov	sp, r7
 8000f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f16:	4770      	bx	lr

08000f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f18:	b480      	push	{r7}
 8000f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f1c:	bf00      	nop
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f24:	4770      	bx	lr

08000f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f26:	b480      	push	{r7}
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f2a:	bf00      	nop
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f32:	4770      	bx	lr

08000f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f34:	b480      	push	{r7}
 8000f36:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f38:	bf00      	nop
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr

08000f42 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000f42:	b580      	push	{r7, lr}
 8000f44:	b086      	sub	sp, #24
 8000f46:	af00      	add	r7, sp, #0
 8000f48:	60f8      	str	r0, [r7, #12]
 8000f4a:	60b9      	str	r1, [r7, #8]
 8000f4c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f4e:	2300      	movs	r3, #0
 8000f50:	617b      	str	r3, [r7, #20]
 8000f52:	e00a      	b.n	8000f6a <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000f54:	f000 f9ec 	bl	8001330 <__io_getchar>
 8000f58:	4601      	mov	r1, r0
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	1c5a      	adds	r2, r3, #1
 8000f5e:	60ba      	str	r2, [r7, #8]
 8000f60:	b2ca      	uxtb	r2, r1
 8000f62:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	3301      	adds	r3, #1
 8000f68:	617b      	str	r3, [r7, #20]
 8000f6a:	697a      	ldr	r2, [r7, #20]
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	429a      	cmp	r2, r3
 8000f70:	dbf0      	blt.n	8000f54 <_read+0x12>
	}

return len;
 8000f72:	687b      	ldr	r3, [r7, #4]
}
 8000f74:	4618      	mov	r0, r3
 8000f76:	3718      	adds	r7, #24
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	bd80      	pop	{r7, pc}

08000f7c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	60f8      	str	r0, [r7, #12]
 8000f84:	60b9      	str	r1, [r7, #8]
 8000f86:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f88:	2300      	movs	r3, #0
 8000f8a:	617b      	str	r3, [r7, #20]
 8000f8c:	e009      	b.n	8000fa2 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f8e:	68bb      	ldr	r3, [r7, #8]
 8000f90:	1c5a      	adds	r2, r3, #1
 8000f92:	60ba      	str	r2, [r7, #8]
 8000f94:	781b      	ldrb	r3, [r3, #0]
 8000f96:	4618      	mov	r0, r3
 8000f98:	f000 f9ac 	bl	80012f4 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f9c:	697b      	ldr	r3, [r7, #20]
 8000f9e:	3301      	adds	r3, #1
 8000fa0:	617b      	str	r3, [r7, #20]
 8000fa2:	697a      	ldr	r2, [r7, #20]
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	429a      	cmp	r2, r3
 8000fa8:	dbf1      	blt.n	8000f8e <_write+0x12>
	}
	return len;
 8000faa:	687b      	ldr	r3, [r7, #4]
}
 8000fac:	4618      	mov	r0, r3
 8000fae:	3718      	adds	r7, #24
 8000fb0:	46bd      	mov	sp, r7
 8000fb2:	bd80      	pop	{r7, pc}

08000fb4 <_close>:

int _close(int file)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	return -1;
 8000fbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	370c      	adds	r7, #12
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fca:	4770      	bx	lr

08000fcc <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	b083      	sub	sp, #12
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
 8000fd4:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000fd6:	683b      	ldr	r3, [r7, #0]
 8000fd8:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000fdc:	605a      	str	r2, [r3, #4]
	return 0;
 8000fde:	2300      	movs	r3, #0
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr

08000fec <_isatty>:

int _isatty(int file)
{
 8000fec:	b480      	push	{r7}
 8000fee:	b083      	sub	sp, #12
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	return 1;
 8000ff4:	2301      	movs	r3, #1
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	370c      	adds	r7, #12
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr

08001002 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001002:	b480      	push	{r7}
 8001004:	b085      	sub	sp, #20
 8001006:	af00      	add	r7, sp, #0
 8001008:	60f8      	str	r0, [r7, #12]
 800100a:	60b9      	str	r1, [r7, #8]
 800100c:	607a      	str	r2, [r7, #4]
	return 0;
 800100e:	2300      	movs	r3, #0
}
 8001010:	4618      	mov	r0, r3
 8001012:	3714      	adds	r7, #20
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	b086      	sub	sp, #24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001024:	4a14      	ldr	r2, [pc, #80]	; (8001078 <_sbrk+0x5c>)
 8001026:	4b15      	ldr	r3, [pc, #84]	; (800107c <_sbrk+0x60>)
 8001028:	1ad3      	subs	r3, r2, r3
 800102a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800102c:	697b      	ldr	r3, [r7, #20]
 800102e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001030:	4b13      	ldr	r3, [pc, #76]	; (8001080 <_sbrk+0x64>)
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d102      	bne.n	800103e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001038:	4b11      	ldr	r3, [pc, #68]	; (8001080 <_sbrk+0x64>)
 800103a:	4a12      	ldr	r2, [pc, #72]	; (8001084 <_sbrk+0x68>)
 800103c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800103e:	4b10      	ldr	r3, [pc, #64]	; (8001080 <_sbrk+0x64>)
 8001040:	681a      	ldr	r2, [r3, #0]
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	4413      	add	r3, r2
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	429a      	cmp	r2, r3
 800104a:	d207      	bcs.n	800105c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800104c:	f001 fc3c 	bl	80028c8 <__errno>
 8001050:	4602      	mov	r2, r0
 8001052:	230c      	movs	r3, #12
 8001054:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8001056:	f04f 33ff 	mov.w	r3, #4294967295
 800105a:	e009      	b.n	8001070 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800105c:	4b08      	ldr	r3, [pc, #32]	; (8001080 <_sbrk+0x64>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001062:	4b07      	ldr	r3, [pc, #28]	; (8001080 <_sbrk+0x64>)
 8001064:	681a      	ldr	r2, [r3, #0]
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	4413      	add	r3, r2
 800106a:	4a05      	ldr	r2, [pc, #20]	; (8001080 <_sbrk+0x64>)
 800106c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800106e:	68fb      	ldr	r3, [r7, #12]
}
 8001070:	4618      	mov	r0, r3
 8001072:	3718      	adds	r7, #24
 8001074:	46bd      	mov	sp, r7
 8001076:	bd80      	pop	{r7, pc}
 8001078:	20018000 	.word	0x20018000
 800107c:	00000400 	.word	0x00000400
 8001080:	20000088 	.word	0x20000088
 8001084:	20000098 	.word	0x20000098

08001088 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <SystemInit+0x64>)
 800108e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001092:	4a16      	ldr	r2, [pc, #88]	; (80010ec <SystemInit+0x64>)
 8001094:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001098:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 800109c:	4b14      	ldr	r3, [pc, #80]	; (80010f0 <SystemInit+0x68>)
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	4a13      	ldr	r2, [pc, #76]	; (80010f0 <SystemInit+0x68>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80010a8:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <SystemInit+0x68>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80010ae:	4b10      	ldr	r3, [pc, #64]	; (80010f0 <SystemInit+0x68>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	4a0f      	ldr	r2, [pc, #60]	; (80010f0 <SystemInit+0x68>)
 80010b4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80010b8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80010bc:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <SystemInit+0x68>)
 80010c0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80010c4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <SystemInit+0x68>)
 80010c8:	681b      	ldr	r3, [r3, #0]
 80010ca:	4a09      	ldr	r2, [pc, #36]	; (80010f0 <SystemInit+0x68>)
 80010cc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80010d0:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80010d2:	4b07      	ldr	r3, [pc, #28]	; (80010f0 <SystemInit+0x68>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80010d8:	4b04      	ldr	r3, [pc, #16]	; (80010ec <SystemInit+0x64>)
 80010da:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80010de:	609a      	str	r2, [r3, #8]
#endif
}
 80010e0:	bf00      	nop
 80010e2:	46bd      	mov	sp, r7
 80010e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e8:	4770      	bx	lr
 80010ea:	bf00      	nop
 80010ec:	e000ed00 	.word	0xe000ed00
 80010f0:	40021000 	.word	0x40021000

080010f4 <LL_APB2_GRP1_EnableClock>:
{
 80010f4:	b480      	push	{r7}
 80010f6:	b085      	sub	sp, #20
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010fc:	4b08      	ldr	r3, [pc, #32]	; (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010fe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001100:	4907      	ldr	r1, [pc, #28]	; (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	4313      	orrs	r3, r2
 8001106:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001108:	4b05      	ldr	r3, [pc, #20]	; (8001120 <LL_APB2_GRP1_EnableClock+0x2c>)
 800110a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	4013      	ands	r3, r2
 8001110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001112:	68fb      	ldr	r3, [r7, #12]
}
 8001114:	bf00      	nop
 8001116:	3714      	adds	r7, #20
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	40021000 	.word	0x40021000

08001124 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	601a      	str	r2, [r3, #0]
}
 8001138:	bf00      	nop
 800113a:	370c      	adds	r7, #12
 800113c:	46bd      	mov	sp, r7
 800113e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001142:	4770      	bx	lr

08001144 <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 8001144:	b480      	push	{r7}
 8001146:	b083      	sub	sp, #12
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	689b      	ldr	r3, [r3, #8]
 8001152:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 8001156:	f023 0307 	bic.w	r3, r3, #7
 800115a:	683a      	ldr	r2, [r7, #0]
 800115c:	431a      	orrs	r2, r3
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	609a      	str	r2, [r3, #8]
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr

0800116e <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 800116e:	b480      	push	{r7}
 8001170:	b083      	sub	sp, #12
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
 8001176:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	431a      	orrs	r2, r3
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	605a      	str	r2, [r3, #4]
}
 8001188:	bf00      	nop
 800118a:	370c      	adds	r7, #12
 800118c:	46bd      	mov	sp, r7
 800118e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001192:	4770      	bx	lr

08001194 <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 8001194:	b480      	push	{r7}
 8001196:	b083      	sub	sp, #12
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
 800119c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	685b      	ldr	r3, [r3, #4]
 80011a2:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	605a      	str	r2, [r3, #4]
}
 80011ae:	bf00      	nop
 80011b0:	370c      	adds	r7, #12
 80011b2:	46bd      	mov	sp, r7
 80011b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b8:	4770      	bx	lr

080011ba <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80011ba:	b480      	push	{r7}
 80011bc:	b083      	sub	sp, #12
 80011be:	af00      	add	r7, sp, #0
 80011c0:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	689b      	ldr	r3, [r3, #8]
 80011c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	609a      	str	r2, [r3, #8]
}
 80011ce:	bf00      	nop
 80011d0:	370c      	adds	r7, #12
 80011d2:	46bd      	mov	sp, r7
 80011d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d8:	4770      	bx	lr
	...

080011dc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b086      	sub	sp, #24
 80011e0:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80011e2:	1d3b      	adds	r3, r7, #4
 80011e4:	2200      	movs	r2, #0
 80011e6:	601a      	str	r2, [r3, #0]
 80011e8:	605a      	str	r2, [r3, #4]
 80011ea:	609a      	str	r2, [r3, #8]
 80011ec:	60da      	str	r2, [r3, #12]
 80011ee:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 80011f0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80011f4:	f7ff ff7e 	bl	80010f4 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 80011f8:	233f      	movs	r3, #63	; 0x3f
 80011fa:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011fc:	2300      	movs	r3, #0
 80011fe:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 115;
 8001200:	2373      	movs	r3, #115	; 0x73
 8001202:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800120c:	1d3b      	adds	r3, r7, #4
 800120e:	4619      	mov	r1, r3
 8001210:	480c      	ldr	r0, [pc, #48]	; (8001244 <MX_TIM1_Init+0x68>)
 8001212:	f001 f97b 	bl	800250c <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8001216:	480b      	ldr	r0, [pc, #44]	; (8001244 <MX_TIM1_Init+0x68>)
 8001218:	f7ff ff84 	bl	8001124 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800121c:	2100      	movs	r1, #0
 800121e:	4809      	ldr	r0, [pc, #36]	; (8001244 <MX_TIM1_Init+0x68>)
 8001220:	f7ff ff90 	bl	8001144 <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8001224:	2100      	movs	r1, #0
 8001226:	4807      	ldr	r0, [pc, #28]	; (8001244 <MX_TIM1_Init+0x68>)
 8001228:	f7ff ffa1 	bl	800116e <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800122c:	2100      	movs	r1, #0
 800122e:	4805      	ldr	r0, [pc, #20]	; (8001244 <MX_TIM1_Init+0x68>)
 8001230:	f7ff ffb0 	bl	8001194 <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8001234:	4803      	ldr	r0, [pc, #12]	; (8001244 <MX_TIM1_Init+0x68>)
 8001236:	f7ff ffc0 	bl	80011ba <LL_TIM_DisableMasterSlaveMode>

}
 800123a:	bf00      	nop
 800123c:	3718      	adds	r7, #24
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	40012c00 	.word	0x40012c00

08001248 <LL_AHB2_GRP1_EnableClock>:
{
 8001248:	b480      	push	{r7}
 800124a:	b085      	sub	sp, #20
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001250:	4b08      	ldr	r3, [pc, #32]	; (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001252:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001254:	4907      	ldr	r1, [pc, #28]	; (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	4313      	orrs	r3, r2
 800125a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800125c:	4b05      	ldr	r3, [pc, #20]	; (8001274 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800125e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	4013      	ands	r3, r2
 8001264:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001266:	68fb      	ldr	r3, [r7, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	40021000 	.word	0x40021000

08001278 <LL_APB1_GRP1_EnableClock>:
{
 8001278:	b480      	push	{r7}
 800127a:	b085      	sub	sp, #20
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001280:	4b08      	ldr	r3, [pc, #32]	; (80012a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001282:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001284:	4907      	ldr	r1, [pc, #28]	; (80012a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4313      	orrs	r3, r2
 800128a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800128c:	4b05      	ldr	r3, [pc, #20]	; (80012a4 <LL_APB1_GRP1_EnableClock+0x2c>)
 800128e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	4013      	ands	r3, r2
 8001294:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001296:	68fb      	ldr	r3, [r7, #12]
}
 8001298:	bf00      	nop
 800129a:	3714      	adds	r7, #20
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr
 80012a4:	40021000 	.word	0x40021000

080012a8 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80012a8:	b480      	push	{r7}
 80012aa:	b083      	sub	sp, #12
 80012ac:	af00      	add	r7, sp, #0
 80012ae:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	f043 0201 	orr.w	r2, r3, #1
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	601a      	str	r2, [r3, #0]
}
 80012bc:	bf00      	nop
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	689b      	ldr	r3, [r3, #8]
 80012e0:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	609a      	str	r2, [r3, #8]
}
 80012e8:	bf00      	nop
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <__io_putchar>:

/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
void __io_putchar(int ch){
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!READ_BIT(USART2->ISR, USART_ISR_TXE));
 80012fc:	bf00      	nop
 80012fe:	4b0b      	ldr	r3, [pc, #44]	; (800132c <__io_putchar+0x38>)
 8001300:	69db      	ldr	r3, [r3, #28]
 8001302:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001306:	2b00      	cmp	r3, #0
 8001308:	d0f9      	beq.n	80012fe <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 800130a:	4b08      	ldr	r3, [pc, #32]	; (800132c <__io_putchar+0x38>)
 800130c:	687a      	ldr	r2, [r7, #4]
 800130e:	b292      	uxth	r2, r2
 8001310:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!READ_BIT(USART2->ISR, USART_ISR_TC));
 8001312:	bf00      	nop
 8001314:	4b05      	ldr	r3, [pc, #20]	; (800132c <__io_putchar+0x38>)
 8001316:	69db      	ldr	r3, [r3, #28]
 8001318:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800131c:	2b00      	cmp	r3, #0
 800131e:	d0f9      	beq.n	8001314 <__io_putchar+0x20>
#endif
}
 8001320:	bf00      	nop
 8001322:	370c      	adds	r7, #12
 8001324:	46bd      	mov	sp, r7
 8001326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800132a:	4770      	bx	lr
 800132c:	40004400 	.word	0x40004400

08001330 <__io_getchar>:

void __io_getchar(void){
 8001330:	b480      	push	{r7}
 8001332:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8001334:	bf00      	nop
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <startupPrint>:

void startupPrint(void){
 8001340:	b580      	push	{r7, lr}
 8001342:	af00      	add	r7, sp, #0
	printf("\r\n");
 8001344:	480b      	ldr	r0, [pc, #44]	; (8001374 <startupPrint+0x34>)
 8001346:	f001 fb65 	bl	8002a14 <puts>
	printf("+==============================================================+\r\n");
 800134a:	480b      	ldr	r0, [pc, #44]	; (8001378 <startupPrint+0x38>)
 800134c:	f001 fb62 	bl	8002a14 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8001350:	490a      	ldr	r1, [pc, #40]	; (800137c <startupPrint+0x3c>)
 8001352:	480b      	ldr	r0, [pc, #44]	; (8001380 <startupPrint+0x40>)
 8001354:	f001 faea 	bl	800292c <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8001358:	480a      	ldr	r0, [pc, #40]	; (8001384 <startupPrint+0x44>)
 800135a:	f001 fb5b 	bl	8002a14 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 800135e:	4b0a      	ldr	r3, [pc, #40]	; (8001388 <startupPrint+0x48>)
 8001360:	4a0a      	ldr	r2, [pc, #40]	; (800138c <startupPrint+0x4c>)
 8001362:	490b      	ldr	r1, [pc, #44]	; (8001390 <startupPrint+0x50>)
 8001364:	480b      	ldr	r0, [pc, #44]	; (8001394 <startupPrint+0x54>)
 8001366:	f001 fae1 	bl	800292c <iprintf>
	printf("+==============================================================+\r\n\r\n");
 800136a:	480b      	ldr	r0, [pc, #44]	; (8001398 <startupPrint+0x58>)
 800136c:	f001 fb52 	bl	8002a14 <puts>
}
 8001370:	bf00      	nop
 8001372:	bd80      	pop	{r7, pc}
 8001374:	08003974 	.word	0x08003974
 8001378:	08003978 	.word	0x08003978
 800137c:	080039bc 	.word	0x080039bc
 8001380:	080039e4 	.word	0x080039e4
 8001384:	080039f0 	.word	0x080039f0
 8001388:	08003a34 	.word	0x08003a34
 800138c:	08003a38 	.word	0x08003a38
 8001390:	08003a44 	.word	0x08003a44
 8001394:	08003a58 	.word	0x08003a58
 8001398:	08003a84 	.word	0x08003a84

0800139c <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08e      	sub	sp, #56	; 0x38
 80013a0:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 80013a2:	f107 031c 	add.w	r3, r7, #28
 80013a6:	2200      	movs	r2, #0
 80013a8:	601a      	str	r2, [r3, #0]
 80013aa:	605a      	str	r2, [r3, #4]
 80013ac:	609a      	str	r2, [r3, #8]
 80013ae:	60da      	str	r2, [r3, #12]
 80013b0:	611a      	str	r2, [r3, #16]
 80013b2:	615a      	str	r2, [r3, #20]
 80013b4:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013b6:	1d3b      	adds	r3, r7, #4
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
 80013be:	609a      	str	r2, [r3, #8]
 80013c0:	60da      	str	r2, [r3, #12]
 80013c2:	611a      	str	r2, [r3, #16]
 80013c4:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 80013c6:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 80013ca:	f7ff ff55 	bl	8001278 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80013ce:	2001      	movs	r0, #1
 80013d0:	f7ff ff3a 	bl	8001248 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80013d4:	230c      	movs	r3, #12
 80013d6:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80013d8:	2302      	movs	r3, #2
 80013da:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80013dc:	2303      	movs	r3, #3
 80013de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80013e0:	2300      	movs	r3, #0
 80013e2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80013e4:	2300      	movs	r3, #0
 80013e6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 80013e8:	2307      	movs	r3, #7
 80013ea:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	4619      	mov	r1, r3
 80013f0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013f4:	f000 fbb3 	bl	8001b5e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80013f8:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80013fc:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013fe:	2300      	movs	r3, #0
 8001400:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8001402:	2300      	movs	r3, #0
 8001404:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 800140a:	230c      	movs	r3, #12
 800140c:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 800140e:	2300      	movs	r3, #0
 8001410:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8001412:	2300      	movs	r3, #0
 8001414:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8001416:	f107 031c 	add.w	r3, r7, #28
 800141a:	4619      	mov	r1, r3
 800141c:	4806      	ldr	r0, [pc, #24]	; (8001438 <MX_USART2_UART_Init+0x9c>)
 800141e:	f001 f979 	bl	8002714 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8001422:	4805      	ldr	r0, [pc, #20]	; (8001438 <MX_USART2_UART_Init+0x9c>)
 8001424:	f7ff ff50 	bl	80012c8 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8001428:	4803      	ldr	r0, [pc, #12]	; (8001438 <MX_USART2_UART_Init+0x9c>)
 800142a:	f7ff ff3d 	bl	80012a8 <LL_USART_Enable>

}
 800142e:	bf00      	nop
 8001430:	3738      	adds	r7, #56	; 0x38
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	40004400 	.word	0x40004400

0800143c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800143c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001474 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001440:	f7ff fe22 	bl	8001088 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001444:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8001446:	e003      	b.n	8001450 <LoopCopyDataInit>

08001448 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8001448:	4b0b      	ldr	r3, [pc, #44]	; (8001478 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800144a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 800144c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800144e:	3104      	adds	r1, #4

08001450 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001450:	480a      	ldr	r0, [pc, #40]	; (800147c <LoopForever+0xa>)
	ldr	r3, =_edata
 8001452:	4b0b      	ldr	r3, [pc, #44]	; (8001480 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001454:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8001456:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001458:	d3f6      	bcc.n	8001448 <CopyDataInit>
	ldr	r2, =_sbss
 800145a:	4a0a      	ldr	r2, [pc, #40]	; (8001484 <LoopForever+0x12>)
	b	LoopFillZerobss
 800145c:	e002      	b.n	8001464 <LoopFillZerobss>

0800145e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800145e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001460:	f842 3b04 	str.w	r3, [r2], #4

08001464 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001464:	4b08      	ldr	r3, [pc, #32]	; (8001488 <LoopForever+0x16>)
	cmp	r2, r3
 8001466:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001468:	d3f9      	bcc.n	800145e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800146a:	f001 fa33 	bl	80028d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800146e:	f7ff fc03 	bl	8000c78 <main>

08001472 <LoopForever>:

LoopForever:
    b LoopForever
 8001472:	e7fe      	b.n	8001472 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001474:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001478:	08003bb0 	.word	0x08003bb0
	ldr	r0, =_sdata
 800147c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001480:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 8001484:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001488:	20000098 	.word	0x20000098

0800148c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800148c:	e7fe      	b.n	800148c <ADC1_2_IRQHandler>
	...

08001490 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001490:	b480      	push	{r7}
 8001492:	b083      	sub	sp, #12
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001498:	4b05      	ldr	r3, [pc, #20]	; (80014b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4904      	ldr	r1, [pc, #16]	; (80014b0 <LL_EXTI_EnableIT_0_31+0x20>)
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	4313      	orrs	r3, r2
 80014a2:	600b      	str	r3, [r1, #0]
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr
 80014b0:	40010400 	.word	0x40010400

080014b4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 80014bc:	4b05      	ldr	r3, [pc, #20]	; (80014d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80014be:	6a1a      	ldr	r2, [r3, #32]
 80014c0:	4904      	ldr	r1, [pc, #16]	; (80014d4 <LL_EXTI_EnableIT_32_63+0x20>)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	620b      	str	r3, [r1, #32]
}
 80014c8:	bf00      	nop
 80014ca:	370c      	adds	r7, #12
 80014cc:	46bd      	mov	sp, r7
 80014ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d2:	4770      	bx	lr
 80014d4:	40010400 	.word	0x40010400

080014d8 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 80014d8:	b480      	push	{r7}
 80014da:	b083      	sub	sp, #12
 80014dc:	af00      	add	r7, sp, #0
 80014de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 80014e0:	4b06      	ldr	r3, [pc, #24]	; (80014fc <LL_EXTI_DisableIT_0_31+0x24>)
 80014e2:	681a      	ldr	r2, [r3, #0]
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	43db      	mvns	r3, r3
 80014e8:	4904      	ldr	r1, [pc, #16]	; (80014fc <LL_EXTI_DisableIT_0_31+0x24>)
 80014ea:	4013      	ands	r3, r2
 80014ec:	600b      	str	r3, [r1, #0]
}
 80014ee:	bf00      	nop
 80014f0:	370c      	adds	r7, #12
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	40010400 	.word	0x40010400

08001500 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8001500:	b480      	push	{r7}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <LL_EXTI_DisableIT_32_63+0x24>)
 800150a:	6a1a      	ldr	r2, [r3, #32]
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	43db      	mvns	r3, r3
 8001510:	4904      	ldr	r1, [pc, #16]	; (8001524 <LL_EXTI_DisableIT_32_63+0x24>)
 8001512:	4013      	ands	r3, r2
 8001514:	620b      	str	r3, [r1, #32]
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001520:	4770      	bx	lr
 8001522:	bf00      	nop
 8001524:	40010400 	.word	0x40010400

08001528 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8001530:	4b05      	ldr	r3, [pc, #20]	; (8001548 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001532:	685a      	ldr	r2, [r3, #4]
 8001534:	4904      	ldr	r1, [pc, #16]	; (8001548 <LL_EXTI_EnableEvent_0_31+0x20>)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4313      	orrs	r3, r2
 800153a:	604b      	str	r3, [r1, #4]

}
 800153c:	bf00      	nop
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr
 8001548:	40010400 	.word	0x40010400

0800154c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 800154c:	b480      	push	{r7}
 800154e:	b083      	sub	sp, #12
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001554:	4b05      	ldr	r3, [pc, #20]	; (800156c <LL_EXTI_EnableEvent_32_63+0x20>)
 8001556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001558:	4904      	ldr	r1, [pc, #16]	; (800156c <LL_EXTI_EnableEvent_32_63+0x20>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001560:	bf00      	nop
 8001562:	370c      	adds	r7, #12
 8001564:	46bd      	mov	sp, r7
 8001566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156a:	4770      	bx	lr
 800156c:	40010400 	.word	0x40010400

08001570 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001570:	b480      	push	{r7}
 8001572:	b083      	sub	sp, #12
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <LL_EXTI_DisableEvent_0_31+0x24>)
 800157a:	685a      	ldr	r2, [r3, #4]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	43db      	mvns	r3, r3
 8001580:	4904      	ldr	r1, [pc, #16]	; (8001594 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001582:	4013      	ands	r3, r2
 8001584:	604b      	str	r3, [r1, #4]
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
 8001592:	bf00      	nop
 8001594:	40010400 	.word	0x40010400

08001598 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 80015a0:	4b06      	ldr	r3, [pc, #24]	; (80015bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	43db      	mvns	r3, r3
 80015a8:	4904      	ldr	r1, [pc, #16]	; (80015bc <LL_EXTI_DisableEvent_32_63+0x24>)
 80015aa:	4013      	ands	r3, r2
 80015ac:	624b      	str	r3, [r1, #36]	; 0x24
}
 80015ae:	bf00      	nop
 80015b0:	370c      	adds	r7, #12
 80015b2:	46bd      	mov	sp, r7
 80015b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b8:	4770      	bx	lr
 80015ba:	bf00      	nop
 80015bc:	40010400 	.word	0x40010400

080015c0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 80015c8:	4b05      	ldr	r3, [pc, #20]	; (80015e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	4904      	ldr	r1, [pc, #16]	; (80015e0 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	4313      	orrs	r3, r2
 80015d2:	608b      	str	r3, [r1, #8]

}
 80015d4:	bf00      	nop
 80015d6:	370c      	adds	r7, #12
 80015d8:	46bd      	mov	sp, r7
 80015da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015de:	4770      	bx	lr
 80015e0:	40010400 	.word	0x40010400

080015e4 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 80015ec:	4b05      	ldr	r3, [pc, #20]	; (8001604 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80015ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015f0:	4904      	ldr	r1, [pc, #16]	; (8001604 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	40010400 	.word	0x40010400

08001608 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8001610:	4b06      	ldr	r3, [pc, #24]	; (800162c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8001612:	689a      	ldr	r2, [r3, #8]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	43db      	mvns	r3, r3
 8001618:	4904      	ldr	r1, [pc, #16]	; (800162c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800161a:	4013      	ands	r3, r2
 800161c:	608b      	str	r3, [r1, #8]

}
 800161e:	bf00      	nop
 8001620:	370c      	adds	r7, #12
 8001622:	46bd      	mov	sp, r7
 8001624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	40010400 	.word	0x40010400

08001630 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001630:	b480      	push	{r7}
 8001632:	b083      	sub	sp, #12
 8001634:	af00      	add	r7, sp, #0
 8001636:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8001638:	4b06      	ldr	r3, [pc, #24]	; (8001654 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800163a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	43db      	mvns	r3, r3
 8001640:	4904      	ldr	r1, [pc, #16]	; (8001654 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8001642:	4013      	ands	r3, r2
 8001644:	628b      	str	r3, [r1, #40]	; 0x28
}
 8001646:	bf00      	nop
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr
 8001652:	bf00      	nop
 8001654:	40010400 	.word	0x40010400

08001658 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001660:	4b05      	ldr	r3, [pc, #20]	; (8001678 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001662:	68da      	ldr	r2, [r3, #12]
 8001664:	4904      	ldr	r1, [pc, #16]	; (8001678 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	4313      	orrs	r3, r2
 800166a:	60cb      	str	r3, [r1, #12]
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	40010400 	.word	0x40010400

0800167c <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 800167c:	b480      	push	{r7}
 800167e:	b083      	sub	sp, #12
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001686:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001688:	4904      	ldr	r1, [pc, #16]	; (800169c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	4313      	orrs	r3, r2
 800168e:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001690:	bf00      	nop
 8001692:	370c      	adds	r7, #12
 8001694:	46bd      	mov	sp, r7
 8001696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169a:	4770      	bx	lr
 800169c:	40010400 	.word	0x40010400

080016a0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016aa:	68da      	ldr	r2, [r3, #12]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	43db      	mvns	r3, r3
 80016b0:	4904      	ldr	r1, [pc, #16]	; (80016c4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80016b2:	4013      	ands	r3, r2
 80016b4:	60cb      	str	r3, [r1, #12]
}
 80016b6:	bf00      	nop
 80016b8:	370c      	adds	r7, #12
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	40010400 	.word	0x40010400

080016c8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b083      	sub	sp, #12
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 80016d0:	4b06      	ldr	r3, [pc, #24]	; (80016ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80016d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	43db      	mvns	r3, r3
 80016d8:	4904      	ldr	r1, [pc, #16]	; (80016ec <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 80016da:	4013      	ands	r3, r2
 80016dc:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80016de:	bf00      	nop
 80016e0:	370c      	adds	r7, #12
 80016e2:	46bd      	mov	sp, r7
 80016e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	40010400 	.word	0x40010400

080016f0 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 80016f0:	b580      	push	{r7, lr}
 80016f2:	b084      	sub	sp, #16
 80016f4:	af00      	add	r7, sp, #0
 80016f6:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80016f8:	2300      	movs	r3, #0
 80016fa:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	7a1b      	ldrb	r3, [r3, #8]
 8001700:	2b00      	cmp	r3, #0
 8001702:	f000 80c6 	beq.w	8001892 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d05d      	beq.n	80017ca <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7a5b      	ldrb	r3, [r3, #9]
 8001712:	2b01      	cmp	r3, #1
 8001714:	d00e      	beq.n	8001734 <LL_EXTI_Init+0x44>
 8001716:	2b02      	cmp	r3, #2
 8001718:	d017      	beq.n	800174a <LL_EXTI_Init+0x5a>
 800171a:	2b00      	cmp	r3, #0
 800171c:	d120      	bne.n	8001760 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4618      	mov	r0, r3
 8001724:	f7ff ff24 	bl	8001570 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4618      	mov	r0, r3
 800172e:	f7ff feaf 	bl	8001490 <LL_EXTI_EnableIT_0_31>
          break;
 8001732:	e018      	b.n	8001766 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4618      	mov	r0, r3
 800173a:	f7ff fecd 	bl	80014d8 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7ff fef0 	bl	8001528 <LL_EXTI_EnableEvent_0_31>
          break;
 8001748:	e00d      	b.n	8001766 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	4618      	mov	r0, r3
 8001750:	f7ff fe9e 	bl	8001490 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff fee5 	bl	8001528 <LL_EXTI_EnableEvent_0_31>
          break;
 800175e:	e002      	b.n	8001766 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001760:	2301      	movs	r3, #1
 8001762:	60fb      	str	r3, [r7, #12]
          break;
 8001764:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	7a9b      	ldrb	r3, [r3, #10]
 800176a:	2b00      	cmp	r3, #0
 800176c:	d02d      	beq.n	80017ca <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	7a9b      	ldrb	r3, [r3, #10]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d00e      	beq.n	8001794 <LL_EXTI_Init+0xa4>
 8001776:	2b03      	cmp	r3, #3
 8001778:	d017      	beq.n	80017aa <LL_EXTI_Init+0xba>
 800177a:	2b01      	cmp	r3, #1
 800177c:	d120      	bne.n	80017c0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7ff ff8c 	bl	80016a0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4618      	mov	r0, r3
 800178e:	f7ff ff17 	bl	80015c0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001792:	e01b      	b.n	80017cc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4618      	mov	r0, r3
 800179a:	f7ff ff35 	bl	8001608 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4618      	mov	r0, r3
 80017a4:	f7ff ff58 	bl	8001658 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80017a8:	e010      	b.n	80017cc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4618      	mov	r0, r3
 80017b0:	f7ff ff06 	bl	80015c0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4618      	mov	r0, r3
 80017ba:	f7ff ff4d 	bl	8001658 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80017be:	e005      	b.n	80017cc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	f043 0302 	orr.w	r3, r3, #2
 80017c6:	60fb      	str	r3, [r7, #12]
            break;
 80017c8:	e000      	b.n	80017cc <LL_EXTI_Init+0xdc>
        }
      }
 80017ca:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d073      	beq.n	80018bc <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	7a5b      	ldrb	r3, [r3, #9]
 80017d8:	2b01      	cmp	r3, #1
 80017da:	d00e      	beq.n	80017fa <LL_EXTI_Init+0x10a>
 80017dc:	2b02      	cmp	r3, #2
 80017de:	d017      	beq.n	8001810 <LL_EXTI_Init+0x120>
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d120      	bne.n	8001826 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	4618      	mov	r0, r3
 80017ea:	f7ff fed5 	bl	8001598 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	685b      	ldr	r3, [r3, #4]
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fe5e 	bl	80014b4 <LL_EXTI_EnableIT_32_63>
          break;
 80017f8:	e01a      	b.n	8001830 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fe7e 	bl	8001500 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	685b      	ldr	r3, [r3, #4]
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fe9f 	bl	800154c <LL_EXTI_EnableEvent_32_63>
          break;
 800180e:	e00f      	b.n	8001830 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff fe4d 	bl	80014b4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4618      	mov	r0, r3
 8001820:	f7ff fe94 	bl	800154c <LL_EXTI_EnableEvent_32_63>
          break;
 8001824:	e004      	b.n	8001830 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f043 0304 	orr.w	r3, r3, #4
 800182c:	60fb      	str	r3, [r7, #12]
          break;
 800182e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	7a9b      	ldrb	r3, [r3, #10]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d041      	beq.n	80018bc <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	7a9b      	ldrb	r3, [r3, #10]
 800183c:	2b02      	cmp	r3, #2
 800183e:	d00e      	beq.n	800185e <LL_EXTI_Init+0x16e>
 8001840:	2b03      	cmp	r3, #3
 8001842:	d017      	beq.n	8001874 <LL_EXTI_Init+0x184>
 8001844:	2b01      	cmp	r3, #1
 8001846:	d120      	bne.n	800188a <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	4618      	mov	r0, r3
 800184e:	f7ff ff3b 	bl	80016c8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	685b      	ldr	r3, [r3, #4]
 8001856:	4618      	mov	r0, r3
 8001858:	f7ff fec4 	bl	80015e4 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800185c:	e02f      	b.n	80018be <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	685b      	ldr	r3, [r3, #4]
 8001862:	4618      	mov	r0, r3
 8001864:	f7ff fee4 	bl	8001630 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	4618      	mov	r0, r3
 800186e:	f7ff ff05 	bl	800167c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001872:	e024      	b.n	80018be <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	685b      	ldr	r3, [r3, #4]
 8001878:	4618      	mov	r0, r3
 800187a:	f7ff feb3 	bl	80015e4 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	4618      	mov	r0, r3
 8001884:	f7ff fefa 	bl	800167c <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001888:	e019      	b.n	80018be <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 800188a:	2301      	movs	r3, #1
 800188c:	60fb      	str	r3, [r7, #12]
            break;
 800188e:	bf00      	nop
 8001890:	e015      	b.n	80018be <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff fe1e 	bl	80014d8 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4618      	mov	r0, r3
 80018a2:	f7ff fe65 	bl	8001570 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	685b      	ldr	r3, [r3, #4]
 80018aa:	4618      	mov	r0, r3
 80018ac:	f7ff fe28 	bl	8001500 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	4618      	mov	r0, r3
 80018b6:	f7ff fe6f 	bl	8001598 <LL_EXTI_DisableEvent_32_63>
 80018ba:	e000      	b.n	80018be <LL_EXTI_Init+0x1ce>
      }
 80018bc:	bf00      	nop
  }

  return status;
 80018be:	68fb      	ldr	r3, [r7, #12]
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	3710      	adds	r7, #16
 80018c4:	46bd      	mov	sp, r7
 80018c6:	bd80      	pop	{r7, pc}

080018c8 <LL_GPIO_SetPinMode>:
{
 80018c8:	b480      	push	{r7}
 80018ca:	b08b      	sub	sp, #44	; 0x2c
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	60f8      	str	r0, [r7, #12]
 80018d0:	60b9      	str	r1, [r7, #8]
 80018d2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	681a      	ldr	r2, [r3, #0]
 80018d8:	68bb      	ldr	r3, [r7, #8]
 80018da:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	fa93 f3a3 	rbit	r3, r3
 80018e2:	613b      	str	r3, [r7, #16]
  return result;
 80018e4:	693b      	ldr	r3, [r7, #16]
 80018e6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80018e8:	69bb      	ldr	r3, [r7, #24]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d101      	bne.n	80018f2 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80018ee:	2320      	movs	r3, #32
 80018f0:	e003      	b.n	80018fa <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80018f2:	69bb      	ldr	r3, [r7, #24]
 80018f4:	fab3 f383 	clz	r3, r3
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	005b      	lsls	r3, r3, #1
 80018fc:	2103      	movs	r1, #3
 80018fe:	fa01 f303 	lsl.w	r3, r1, r3
 8001902:	43db      	mvns	r3, r3
 8001904:	401a      	ands	r2, r3
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800190a:	6a3b      	ldr	r3, [r7, #32]
 800190c:	fa93 f3a3 	rbit	r3, r3
 8001910:	61fb      	str	r3, [r7, #28]
  return result;
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001918:	2b00      	cmp	r3, #0
 800191a:	d101      	bne.n	8001920 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800191c:	2320      	movs	r3, #32
 800191e:	e003      	b.n	8001928 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001920:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001922:	fab3 f383 	clz	r3, r3
 8001926:	b2db      	uxtb	r3, r3
 8001928:	005b      	lsls	r3, r3, #1
 800192a:	6879      	ldr	r1, [r7, #4]
 800192c:	fa01 f303 	lsl.w	r3, r1, r3
 8001930:	431a      	orrs	r2, r3
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	601a      	str	r2, [r3, #0]
}
 8001936:	bf00      	nop
 8001938:	372c      	adds	r7, #44	; 0x2c
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr

08001942 <LL_GPIO_SetPinOutputType>:
{
 8001942:	b480      	push	{r7}
 8001944:	b085      	sub	sp, #20
 8001946:	af00      	add	r7, sp, #0
 8001948:	60f8      	str	r0, [r7, #12]
 800194a:	60b9      	str	r1, [r7, #8]
 800194c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	685a      	ldr	r2, [r3, #4]
 8001952:	68bb      	ldr	r3, [r7, #8]
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	6879      	ldr	r1, [r7, #4]
 800195c:	fb01 f303 	mul.w	r3, r1, r3
 8001960:	431a      	orrs	r2, r3
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	605a      	str	r2, [r3, #4]
}
 8001966:	bf00      	nop
 8001968:	3714      	adds	r7, #20
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr

08001972 <LL_GPIO_SetPinSpeed>:
{
 8001972:	b480      	push	{r7}
 8001974:	b08b      	sub	sp, #44	; 0x2c
 8001976:	af00      	add	r7, sp, #0
 8001978:	60f8      	str	r0, [r7, #12]
 800197a:	60b9      	str	r1, [r7, #8]
 800197c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	689a      	ldr	r2, [r3, #8]
 8001982:	68bb      	ldr	r3, [r7, #8]
 8001984:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	fa93 f3a3 	rbit	r3, r3
 800198c:	613b      	str	r3, [r7, #16]
  return result;
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	2b00      	cmp	r3, #0
 8001996:	d101      	bne.n	800199c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001998:	2320      	movs	r3, #32
 800199a:	e003      	b.n	80019a4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800199c:	69bb      	ldr	r3, [r7, #24]
 800199e:	fab3 f383 	clz	r3, r3
 80019a2:	b2db      	uxtb	r3, r3
 80019a4:	005b      	lsls	r3, r3, #1
 80019a6:	2103      	movs	r1, #3
 80019a8:	fa01 f303 	lsl.w	r3, r1, r3
 80019ac:	43db      	mvns	r3, r3
 80019ae:	401a      	ands	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019b4:	6a3b      	ldr	r3, [r7, #32]
 80019b6:	fa93 f3a3 	rbit	r3, r3
 80019ba:	61fb      	str	r3, [r7, #28]
  return result;
 80019bc:	69fb      	ldr	r3, [r7, #28]
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80019c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80019c6:	2320      	movs	r3, #32
 80019c8:	e003      	b.n	80019d2 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80019ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019cc:	fab3 f383 	clz	r3, r3
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	005b      	lsls	r3, r3, #1
 80019d4:	6879      	ldr	r1, [r7, #4]
 80019d6:	fa01 f303 	lsl.w	r3, r1, r3
 80019da:	431a      	orrs	r2, r3
 80019dc:	68fb      	ldr	r3, [r7, #12]
 80019de:	609a      	str	r2, [r3, #8]
}
 80019e0:	bf00      	nop
 80019e2:	372c      	adds	r7, #44	; 0x2c
 80019e4:	46bd      	mov	sp, r7
 80019e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ea:	4770      	bx	lr

080019ec <LL_GPIO_SetPinPull>:
{
 80019ec:	b480      	push	{r7}
 80019ee:	b08b      	sub	sp, #44	; 0x2c
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	68da      	ldr	r2, [r3, #12]
 80019fc:	68bb      	ldr	r3, [r7, #8]
 80019fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a00:	697b      	ldr	r3, [r7, #20]
 8001a02:	fa93 f3a3 	rbit	r3, r3
 8001a06:	613b      	str	r3, [r7, #16]
  return result;
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a0c:	69bb      	ldr	r3, [r7, #24]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d101      	bne.n	8001a16 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001a12:	2320      	movs	r3, #32
 8001a14:	e003      	b.n	8001a1e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001a16:	69bb      	ldr	r3, [r7, #24]
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	2103      	movs	r1, #3
 8001a22:	fa01 f303 	lsl.w	r3, r1, r3
 8001a26:	43db      	mvns	r3, r3
 8001a28:	401a      	ands	r2, r3
 8001a2a:	68bb      	ldr	r3, [r7, #8]
 8001a2c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a2e:	6a3b      	ldr	r3, [r7, #32]
 8001a30:	fa93 f3a3 	rbit	r3, r3
 8001a34:	61fb      	str	r3, [r7, #28]
  return result;
 8001a36:	69fb      	ldr	r3, [r7, #28]
 8001a38:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d101      	bne.n	8001a44 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001a40:	2320      	movs	r3, #32
 8001a42:	e003      	b.n	8001a4c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001a44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a46:	fab3 f383 	clz	r3, r3
 8001a4a:	b2db      	uxtb	r3, r3
 8001a4c:	005b      	lsls	r3, r3, #1
 8001a4e:	6879      	ldr	r1, [r7, #4]
 8001a50:	fa01 f303 	lsl.w	r3, r1, r3
 8001a54:	431a      	orrs	r2, r3
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	60da      	str	r2, [r3, #12]
}
 8001a5a:	bf00      	nop
 8001a5c:	372c      	adds	r7, #44	; 0x2c
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr

08001a66 <LL_GPIO_SetAFPin_0_7>:
{
 8001a66:	b480      	push	{r7}
 8001a68:	b08b      	sub	sp, #44	; 0x2c
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	60f8      	str	r0, [r7, #12]
 8001a6e:	60b9      	str	r1, [r7, #8]
 8001a70:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	6a1a      	ldr	r2, [r3, #32]
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	fa93 f3a3 	rbit	r3, r3
 8001a80:	613b      	str	r3, [r7, #16]
  return result;
 8001a82:	693b      	ldr	r3, [r7, #16]
 8001a84:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a86:	69bb      	ldr	r3, [r7, #24]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d101      	bne.n	8001a90 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001a8c:	2320      	movs	r3, #32
 8001a8e:	e003      	b.n	8001a98 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001a90:	69bb      	ldr	r3, [r7, #24]
 8001a92:	fab3 f383 	clz	r3, r3
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	009b      	lsls	r3, r3, #2
 8001a9a:	210f      	movs	r1, #15
 8001a9c:	fa01 f303 	lsl.w	r3, r1, r3
 8001aa0:	43db      	mvns	r3, r3
 8001aa2:	401a      	ands	r2, r3
 8001aa4:	68bb      	ldr	r3, [r7, #8]
 8001aa6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa8:	6a3b      	ldr	r3, [r7, #32]
 8001aaa:	fa93 f3a3 	rbit	r3, r3
 8001aae:	61fb      	str	r3, [r7, #28]
  return result;
 8001ab0:	69fb      	ldr	r3, [r7, #28]
 8001ab2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ab4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d101      	bne.n	8001abe <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001aba:	2320      	movs	r3, #32
 8001abc:	e003      	b.n	8001ac6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ac0:	fab3 f383 	clz	r3, r3
 8001ac4:	b2db      	uxtb	r3, r3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	6879      	ldr	r1, [r7, #4]
 8001aca:	fa01 f303 	lsl.w	r3, r1, r3
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	621a      	str	r2, [r3, #32]
}
 8001ad4:	bf00      	nop
 8001ad6:	372c      	adds	r7, #44	; 0x2c
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <LL_GPIO_SetAFPin_8_15>:
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b08b      	sub	sp, #44	; 0x2c
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	0a1b      	lsrs	r3, r3, #8
 8001af4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af6:	697b      	ldr	r3, [r7, #20]
 8001af8:	fa93 f3a3 	rbit	r3, r3
 8001afc:	613b      	str	r3, [r7, #16]
  return result;
 8001afe:	693b      	ldr	r3, [r7, #16]
 8001b00:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001b02:	69bb      	ldr	r3, [r7, #24]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001b08:	2320      	movs	r3, #32
 8001b0a:	e003      	b.n	8001b14 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001b0c:	69bb      	ldr	r3, [r7, #24]
 8001b0e:	fab3 f383 	clz	r3, r3
 8001b12:	b2db      	uxtb	r3, r3
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	210f      	movs	r1, #15
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	68bb      	ldr	r3, [r7, #8]
 8001b22:	0a1b      	lsrs	r3, r3, #8
 8001b24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b26:	6a3b      	ldr	r3, [r7, #32]
 8001b28:	fa93 f3a3 	rbit	r3, r3
 8001b2c:	61fb      	str	r3, [r7, #28]
  return result;
 8001b2e:	69fb      	ldr	r3, [r7, #28]
 8001b30:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d101      	bne.n	8001b3c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001b38:	2320      	movs	r3, #32
 8001b3a:	e003      	b.n	8001b44 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001b3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b3e:	fab3 f383 	clz	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	009b      	lsls	r3, r3, #2
 8001b46:	6879      	ldr	r1, [r7, #4]
 8001b48:	fa01 f303 	lsl.w	r3, r1, r3
 8001b4c:	431a      	orrs	r2, r3
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001b52:	bf00      	nop
 8001b54:	372c      	adds	r7, #44	; 0x2c
 8001b56:	46bd      	mov	sp, r7
 8001b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b5c:	4770      	bx	lr

08001b5e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b5e:	b580      	push	{r7, lr}
 8001b60:	b088      	sub	sp, #32
 8001b62:	af00      	add	r7, sp, #0
 8001b64:	6078      	str	r0, [r7, #4]
 8001b66:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	fa93 f3a3 	rbit	r3, r3
 8001b74:	60fb      	str	r3, [r7, #12]
  return result;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b7a:	697b      	ldr	r3, [r7, #20]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <LL_GPIO_Init+0x26>
    return 32U;
 8001b80:	2320      	movs	r3, #32
 8001b82:	e003      	b.n	8001b8c <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	fab3 f383 	clz	r3, r3
 8001b8a:	b2db      	uxtb	r3, r3
 8001b8c:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b8e:	e040      	b.n	8001c12 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	2101      	movs	r1, #1
 8001b96:	69fb      	ldr	r3, [r7, #28]
 8001b98:	fa01 f303 	lsl.w	r3, r1, r3
 8001b9c:	4013      	ands	r3, r2
 8001b9e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001ba0:	69bb      	ldr	r3, [r7, #24]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d032      	beq.n	8001c0c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	685b      	ldr	r3, [r3, #4]
 8001baa:	461a      	mov	r2, r3
 8001bac:	69b9      	ldr	r1, [r7, #24]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff fe8a 	bl	80018c8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	d003      	beq.n	8001bc4 <LL_GPIO_Init+0x66>
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	685b      	ldr	r3, [r3, #4]
 8001bc0:	2b02      	cmp	r3, #2
 8001bc2:	d106      	bne.n	8001bd2 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	461a      	mov	r2, r3
 8001bca:	69b9      	ldr	r1, [r7, #24]
 8001bcc:	6878      	ldr	r0, [r7, #4]
 8001bce:	f7ff fed0 	bl	8001972 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	691b      	ldr	r3, [r3, #16]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	69b9      	ldr	r1, [r7, #24]
 8001bda:	6878      	ldr	r0, [r7, #4]
 8001bdc:	f7ff ff06 	bl	80019ec <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d111      	bne.n	8001c0c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	2bff      	cmp	r3, #255	; 0xff
 8001bec:	d807      	bhi.n	8001bfe <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	695b      	ldr	r3, [r3, #20]
 8001bf2:	461a      	mov	r2, r3
 8001bf4:	69b9      	ldr	r1, [r7, #24]
 8001bf6:	6878      	ldr	r0, [r7, #4]
 8001bf8:	f7ff ff35 	bl	8001a66 <LL_GPIO_SetAFPin_0_7>
 8001bfc:	e006      	b.n	8001c0c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001bfe:	683b      	ldr	r3, [r7, #0]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	461a      	mov	r2, r3
 8001c04:	69b9      	ldr	r1, [r7, #24]
 8001c06:	6878      	ldr	r0, [r7, #4]
 8001c08:	f7ff ff6a 	bl	8001ae0 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001c0c:	69fb      	ldr	r3, [r7, #28]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d1b7      	bne.n	8001b90 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d003      	beq.n	8001c30 <LL_GPIO_Init+0xd2>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d107      	bne.n	8001c40 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	6819      	ldr	r1, [r3, #0]
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	461a      	mov	r2, r3
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f7ff fe81 	bl	8001942 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	3720      	adds	r7, #32
 8001c46:	46bd      	mov	sp, r7
 8001c48:	bd80      	pop	{r7, pc}
	...

08001c4c <LL_RCC_HSI_IsReady>:
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001c50:	4b07      	ldr	r3, [pc, #28]	; (8001c70 <LL_RCC_HSI_IsReady+0x24>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c5c:	d101      	bne.n	8001c62 <LL_RCC_HSI_IsReady+0x16>
 8001c5e:	2301      	movs	r3, #1
 8001c60:	e000      	b.n	8001c64 <LL_RCC_HSI_IsReady+0x18>
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	46bd      	mov	sp, r7
 8001c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6c:	4770      	bx	lr
 8001c6e:	bf00      	nop
 8001c70:	40021000 	.word	0x40021000

08001c74 <LL_RCC_LSE_IsReady>:
{
 8001c74:	b480      	push	{r7}
 8001c76:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001c78:	4b07      	ldr	r3, [pc, #28]	; (8001c98 <LL_RCC_LSE_IsReady+0x24>)
 8001c7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c7e:	f003 0302 	and.w	r3, r3, #2
 8001c82:	2b02      	cmp	r3, #2
 8001c84:	d101      	bne.n	8001c8a <LL_RCC_LSE_IsReady+0x16>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_RCC_LSE_IsReady+0x18>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c94:	4770      	bx	lr
 8001c96:	bf00      	nop
 8001c98:	40021000 	.word	0x40021000

08001c9c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001ca0:	4b06      	ldr	r3, [pc, #24]	; (8001cbc <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	f003 0308 	and.w	r3, r3, #8
 8001ca8:	2b08      	cmp	r3, #8
 8001caa:	d101      	bne.n	8001cb0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001cac:	2301      	movs	r3, #1
 8001cae:	e000      	b.n	8001cb2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001cb0:	2300      	movs	r3, #0
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr
 8001cbc:	40021000 	.word	0x40021000

08001cc0 <LL_RCC_MSI_GetRange>:
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001cc4:	4b04      	ldr	r3, [pc, #16]	; (8001cd8 <LL_RCC_MSI_GetRange+0x18>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000

08001cdc <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001cdc:	b480      	push	{r7}
 8001cde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001ce0:	4b04      	ldr	r3, [pc, #16]	; (8001cf4 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001ce2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ce6:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001cea:	4618      	mov	r0, r3
 8001cec:	46bd      	mov	sp, r7
 8001cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf2:	4770      	bx	lr
 8001cf4:	40021000 	.word	0x40021000

08001cf8 <LL_RCC_GetSysClkSource>:
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001cfc:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <LL_RCC_GetSysClkSource+0x18>)
 8001cfe:	689b      	ldr	r3, [r3, #8]
 8001d00:	f003 030c 	and.w	r3, r3, #12
}
 8001d04:	4618      	mov	r0, r3
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
 8001d0e:	bf00      	nop
 8001d10:	40021000 	.word	0x40021000

08001d14 <LL_RCC_GetAHBPrescaler>:
{
 8001d14:	b480      	push	{r7}
 8001d16:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001d18:	4b04      	ldr	r3, [pc, #16]	; (8001d2c <LL_RCC_GetAHBPrescaler+0x18>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	46bd      	mov	sp, r7
 8001d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d28:	4770      	bx	lr
 8001d2a:	bf00      	nop
 8001d2c:	40021000 	.word	0x40021000

08001d30 <LL_RCC_GetAPB1Prescaler>:
{
 8001d30:	b480      	push	{r7}
 8001d32:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001d34:	4b04      	ldr	r3, [pc, #16]	; (8001d48 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d44:	4770      	bx	lr
 8001d46:	bf00      	nop
 8001d48:	40021000 	.word	0x40021000

08001d4c <LL_RCC_GetAPB2Prescaler>:
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001d50:	4b04      	ldr	r3, [pc, #16]	; (8001d64 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001d52:	689b      	ldr	r3, [r3, #8]
 8001d54:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40021000 	.word	0x40021000

08001d68 <LL_RCC_GetUSARTClockSource>:
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b083      	sub	sp, #12
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001d70:	4b06      	ldr	r3, [pc, #24]	; (8001d8c <LL_RCC_GetUSARTClockSource+0x24>)
 8001d72:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	401a      	ands	r2, r3
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	041b      	lsls	r3, r3, #16
 8001d7e:	4313      	orrs	r3, r2
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	370c      	adds	r7, #12
 8001d84:	46bd      	mov	sp, r7
 8001d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d8a:	4770      	bx	lr
 8001d8c:	40021000 	.word	0x40021000

08001d90 <LL_RCC_GetUARTClockSource>:
{
 8001d90:	b480      	push	{r7}
 8001d92:	b083      	sub	sp, #12
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001d98:	4b06      	ldr	r3, [pc, #24]	; (8001db4 <LL_RCC_GetUARTClockSource+0x24>)
 8001d9a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	401a      	ands	r2, r3
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	041b      	lsls	r3, r3, #16
 8001da6:	4313      	orrs	r3, r2
}
 8001da8:	4618      	mov	r0, r3
 8001daa:	370c      	adds	r7, #12
 8001dac:	46bd      	mov	sp, r7
 8001dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db2:	4770      	bx	lr
 8001db4:	40021000 	.word	0x40021000

08001db8 <LL_RCC_PLL_GetMainSource>:
{
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001dbc:	4b04      	ldr	r3, [pc, #16]	; (8001dd0 <LL_RCC_PLL_GetMainSource+0x18>)
 8001dbe:	68db      	ldr	r3, [r3, #12]
 8001dc0:	f003 0303 	and.w	r3, r3, #3
}
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dcc:	4770      	bx	lr
 8001dce:	bf00      	nop
 8001dd0:	40021000 	.word	0x40021000

08001dd4 <LL_RCC_PLL_GetN>:
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001dd8:	4b04      	ldr	r3, [pc, #16]	; (8001dec <LL_RCC_PLL_GetN+0x18>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	0a1b      	lsrs	r3, r3, #8
 8001dde:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001de2:	4618      	mov	r0, r3
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr
 8001dec:	40021000 	.word	0x40021000

08001df0 <LL_RCC_PLL_GetR>:
{
 8001df0:	b480      	push	{r7}
 8001df2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001df4:	4b04      	ldr	r3, [pc, #16]	; (8001e08 <LL_RCC_PLL_GetR+0x18>)
 8001df6:	68db      	ldr	r3, [r3, #12]
 8001df8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e04:	4770      	bx	lr
 8001e06:	bf00      	nop
 8001e08:	40021000 	.word	0x40021000

08001e0c <LL_RCC_PLL_GetDivider>:
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001e10:	4b04      	ldr	r3, [pc, #16]	; (8001e24 <LL_RCC_PLL_GetDivider+0x18>)
 8001e12:	68db      	ldr	r3, [r3, #12]
 8001e14:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e20:	4770      	bx	lr
 8001e22:	bf00      	nop
 8001e24:	40021000 	.word	0x40021000

08001e28 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001e30:	2300      	movs	r3, #0
 8001e32:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	2b03      	cmp	r3, #3
 8001e38:	d137      	bne.n	8001eaa <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e3a:	6878      	ldr	r0, [r7, #4]
 8001e3c:	f7ff ff94 	bl	8001d68 <LL_RCC_GetUSARTClockSource>
 8001e40:	4603      	mov	r3, r0
 8001e42:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8001e46:	2b03      	cmp	r3, #3
 8001e48:	f200 80b2 	bhi.w	8001fb0 <LL_RCC_GetUSARTClockFreq+0x188>
 8001e4c:	a201      	add	r2, pc, #4	; (adr r2, 8001e54 <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e52:	bf00      	nop
 8001e54:	08001e93 	.word	0x08001e93
 8001e58:	08001e65 	.word	0x08001e65
 8001e5c:	08001e6d 	.word	0x08001e6d
 8001e60:	08001e7f 	.word	0x08001e7f
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001e64:	f000 f952 	bl	800210c <RCC_GetSystemClockFreq>
 8001e68:	60f8      	str	r0, [r7, #12]
        break;
 8001e6a:	e0b2      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001e6c:	f7ff feee 	bl	8001c4c <LL_RCC_HSI_IsReady>
 8001e70:	4603      	mov	r3, r0
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	f000 809e 	beq.w	8001fb4 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8001e78:	4b58      	ldr	r3, [pc, #352]	; (8001fdc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001e7a:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e7c:	e09a      	b.n	8001fb4 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001e7e:	f7ff fef9 	bl	8001c74 <LL_RCC_LSE_IsReady>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 8097 	beq.w	8001fb8 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8001e8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e8e:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e90:	e092      	b.n	8001fb8 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e92:	f000 f93b 	bl	800210c <RCC_GetSystemClockFreq>
 8001e96:	4603      	mov	r3, r0
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f9c7 	bl	800222c <RCC_GetHCLKClockFreq>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f000 f9ed 	bl	8002280 <RCC_GetPCLK2ClockFreq>
 8001ea6:	60f8      	str	r0, [r7, #12]
        break;
 8001ea8:	e093      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	2b0c      	cmp	r3, #12
 8001eae:	d146      	bne.n	8001f3e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7ff ff59 	bl	8001d68 <LL_RCC_GetUSARTClockSource>
 8001eb6:	4603      	mov	r3, r0
 8001eb8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001ebc:	2b0c      	cmp	r3, #12
 8001ebe:	d87d      	bhi.n	8001fbc <LL_RCC_GetUSARTClockFreq+0x194>
 8001ec0:	a201      	add	r2, pc, #4	; (adr r2, 8001ec8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001ec2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec6:	bf00      	nop
 8001ec8:	08001f27 	.word	0x08001f27
 8001ecc:	08001fbd 	.word	0x08001fbd
 8001ed0:	08001fbd 	.word	0x08001fbd
 8001ed4:	08001fbd 	.word	0x08001fbd
 8001ed8:	08001efd 	.word	0x08001efd
 8001edc:	08001fbd 	.word	0x08001fbd
 8001ee0:	08001fbd 	.word	0x08001fbd
 8001ee4:	08001fbd 	.word	0x08001fbd
 8001ee8:	08001f05 	.word	0x08001f05
 8001eec:	08001fbd 	.word	0x08001fbd
 8001ef0:	08001fbd 	.word	0x08001fbd
 8001ef4:	08001fbd 	.word	0x08001fbd
 8001ef8:	08001f15 	.word	0x08001f15
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001efc:	f000 f906 	bl	800210c <RCC_GetSystemClockFreq>
 8001f00:	60f8      	str	r0, [r7, #12]
        break;
 8001f02:	e066      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001f04:	f7ff fea2 	bl	8001c4c <LL_RCC_HSI_IsReady>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d058      	beq.n	8001fc0 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8001f0e:	4b33      	ldr	r3, [pc, #204]	; (8001fdc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001f10:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001f12:	e055      	b.n	8001fc0 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001f14:	f7ff feae 	bl	8001c74 <LL_RCC_LSE_IsReady>
 8001f18:	4603      	mov	r3, r0
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d052      	beq.n	8001fc4 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8001f1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001f24:	e04e      	b.n	8001fc4 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001f26:	f000 f8f1 	bl	800210c <RCC_GetSystemClockFreq>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	f000 f97d 	bl	800222c <RCC_GetHCLKClockFreq>
 8001f32:	4603      	mov	r3, r0
 8001f34:	4618      	mov	r0, r3
 8001f36:	f000 f98f 	bl	8002258 <RCC_GetPCLK1ClockFreq>
 8001f3a:	60f8      	str	r0, [r7, #12]
        break;
 8001f3c:	e049      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	2b30      	cmp	r3, #48	; 0x30
 8001f42:	d141      	bne.n	8001fc8 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f7ff ff0f 	bl	8001d68 <LL_RCC_GetUSARTClockSource>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a24      	ldr	r2, [pc, #144]	; (8001fe0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001f4e:	4293      	cmp	r3, r2
 8001f50:	d00d      	beq.n	8001f6e <LL_RCC_GetUSARTClockFreq+0x146>
 8001f52:	4a23      	ldr	r2, [pc, #140]	; (8001fe0 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001f54:	4293      	cmp	r3, r2
 8001f56:	d803      	bhi.n	8001f60 <LL_RCC_GetUSARTClockFreq+0x138>
 8001f58:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f5c:	d01c      	beq.n	8001f98 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8001f5e:	e038      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001f60:	4a20      	ldr	r2, [pc, #128]	; (8001fe4 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d007      	beq.n	8001f76 <LL_RCC_GetUSARTClockFreq+0x14e>
 8001f66:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8001f6a:	d00c      	beq.n	8001f86 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8001f6c:	e031      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8001f6e:	f000 f8cd 	bl	800210c <RCC_GetSystemClockFreq>
 8001f72:	60f8      	str	r0, [r7, #12]
          break;
 8001f74:	e02d      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8001f76:	f7ff fe69 	bl	8001c4c <LL_RCC_HSI_IsReady>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d025      	beq.n	8001fcc <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8001f80:	4b16      	ldr	r3, [pc, #88]	; (8001fdc <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001f82:	60fb      	str	r3, [r7, #12]
          break;
 8001f84:	e022      	b.n	8001fcc <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8001f86:	f7ff fe75 	bl	8001c74 <LL_RCC_LSE_IsReady>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01f      	beq.n	8001fd0 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8001f90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f94:	60fb      	str	r3, [r7, #12]
          break;
 8001f96:	e01b      	b.n	8001fd0 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001f98:	f000 f8b8 	bl	800210c <RCC_GetSystemClockFreq>
 8001f9c:	4603      	mov	r3, r0
 8001f9e:	4618      	mov	r0, r3
 8001fa0:	f000 f944 	bl	800222c <RCC_GetHCLKClockFreq>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	4618      	mov	r0, r3
 8001fa8:	f000 f956 	bl	8002258 <RCC_GetPCLK1ClockFreq>
 8001fac:	60f8      	str	r0, [r7, #12]
          break;
 8001fae:	e010      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fb0:	bf00      	nop
 8001fb2:	e00e      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fb4:	bf00      	nop
 8001fb6:	e00c      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fb8:	bf00      	nop
 8001fba:	e00a      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fbc:	bf00      	nop
 8001fbe:	e008      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fc0:	bf00      	nop
 8001fc2:	e006      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001fc4:	bf00      	nop
 8001fc6:	e004      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8001fc8:	bf00      	nop
 8001fca:	e002      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001fcc:	bf00      	nop
 8001fce:	e000      	b.n	8001fd2 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001fd0:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001fd2:	68fb      	ldr	r3, [r7, #12]
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3710      	adds	r7, #16
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	00f42400 	.word	0x00f42400
 8001fe0:	00300010 	.word	0x00300010
 8001fe4:	00300020 	.word	0x00300020

08001fe8 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001fe8:	b580      	push	{r7, lr}
 8001fea:	b084      	sub	sp, #16
 8001fec:	af00      	add	r7, sp, #0
 8001fee:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	2bc0      	cmp	r3, #192	; 0xc0
 8001ff8:	d135      	bne.n	8002066 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001ffa:	6878      	ldr	r0, [r7, #4]
 8001ffc:	f7ff fec8 	bl	8001d90 <LL_RCC_GetUARTClockSource>
 8002000:	4603      	mov	r3, r0
 8002002:	4a3d      	ldr	r2, [pc, #244]	; (80020f8 <LL_RCC_GetUARTClockFreq+0x110>)
 8002004:	4293      	cmp	r3, r2
 8002006:	d00d      	beq.n	8002024 <LL_RCC_GetUARTClockFreq+0x3c>
 8002008:	4a3b      	ldr	r2, [pc, #236]	; (80020f8 <LL_RCC_GetUARTClockFreq+0x110>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d803      	bhi.n	8002016 <LL_RCC_GetUARTClockFreq+0x2e>
 800200e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002012:	d01c      	beq.n	800204e <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002014:	e02c      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002016:	4a39      	ldr	r2, [pc, #228]	; (80020fc <LL_RCC_GetUARTClockFreq+0x114>)
 8002018:	4293      	cmp	r3, r2
 800201a:	d007      	beq.n	800202c <LL_RCC_GetUARTClockFreq+0x44>
 800201c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8002020:	d00c      	beq.n	800203c <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8002022:	e025      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8002024:	f000 f872 	bl	800210c <RCC_GetSystemClockFreq>
 8002028:	60f8      	str	r0, [r7, #12]
        break;
 800202a:	e021      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 800202c:	f7ff fe0e 	bl	8001c4c <LL_RCC_HSI_IsReady>
 8002030:	4603      	mov	r3, r0
 8002032:	2b00      	cmp	r3, #0
 8002034:	d019      	beq.n	800206a <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8002036:	4b32      	ldr	r3, [pc, #200]	; (8002100 <LL_RCC_GetUARTClockFreq+0x118>)
 8002038:	60fb      	str	r3, [r7, #12]
        break;
 800203a:	e016      	b.n	800206a <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 800203c:	f7ff fe1a 	bl	8001c74 <LL_RCC_LSE_IsReady>
 8002040:	4603      	mov	r3, r0
 8002042:	2b00      	cmp	r3, #0
 8002044:	d013      	beq.n	800206e <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8002046:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800204a:	60fb      	str	r3, [r7, #12]
        break;
 800204c:	e00f      	b.n	800206e <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800204e:	f000 f85d 	bl	800210c <RCC_GetSystemClockFreq>
 8002052:	4603      	mov	r3, r0
 8002054:	4618      	mov	r0, r3
 8002056:	f000 f8e9 	bl	800222c <RCC_GetHCLKClockFreq>
 800205a:	4603      	mov	r3, r0
 800205c:	4618      	mov	r0, r3
 800205e:	f000 f8fb 	bl	8002258 <RCC_GetPCLK1ClockFreq>
 8002062:	60f8      	str	r0, [r7, #12]
        break;
 8002064:	e004      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8002066:	bf00      	nop
 8002068:	e002      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800206a:	bf00      	nop
 800206c:	e000      	b.n	8002070 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 800206e:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002076:	d135      	bne.n	80020e4 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002078:	6878      	ldr	r0, [r7, #4]
 800207a:	f7ff fe89 	bl	8001d90 <LL_RCC_GetUARTClockSource>
 800207e:	4603      	mov	r3, r0
 8002080:	4a20      	ldr	r2, [pc, #128]	; (8002104 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002082:	4293      	cmp	r3, r2
 8002084:	d00d      	beq.n	80020a2 <LL_RCC_GetUARTClockFreq+0xba>
 8002086:	4a1f      	ldr	r2, [pc, #124]	; (8002104 <LL_RCC_GetUARTClockFreq+0x11c>)
 8002088:	4293      	cmp	r3, r2
 800208a:	d803      	bhi.n	8002094 <LL_RCC_GetUARTClockFreq+0xac>
 800208c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002090:	d01c      	beq.n	80020cc <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8002092:	e02c      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002094:	4a1c      	ldr	r2, [pc, #112]	; (8002108 <LL_RCC_GetUARTClockFreq+0x120>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d007      	beq.n	80020aa <LL_RCC_GetUARTClockFreq+0xc2>
 800209a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800209e:	d00c      	beq.n	80020ba <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 80020a0:	e025      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 80020a2:	f000 f833 	bl	800210c <RCC_GetSystemClockFreq>
 80020a6:	60f8      	str	r0, [r7, #12]
        break;
 80020a8:	e021      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 80020aa:	f7ff fdcf 	bl	8001c4c <LL_RCC_HSI_IsReady>
 80020ae:	4603      	mov	r3, r0
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d019      	beq.n	80020e8 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 80020b4:	4b12      	ldr	r3, [pc, #72]	; (8002100 <LL_RCC_GetUARTClockFreq+0x118>)
 80020b6:	60fb      	str	r3, [r7, #12]
        break;
 80020b8:	e016      	b.n	80020e8 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 80020ba:	f7ff fddb 	bl	8001c74 <LL_RCC_LSE_IsReady>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d013      	beq.n	80020ec <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 80020c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020c8:	60fb      	str	r3, [r7, #12]
        break;
 80020ca:	e00f      	b.n	80020ec <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80020cc:	f000 f81e 	bl	800210c <RCC_GetSystemClockFreq>
 80020d0:	4603      	mov	r3, r0
 80020d2:	4618      	mov	r0, r3
 80020d4:	f000 f8aa 	bl	800222c <RCC_GetHCLKClockFreq>
 80020d8:	4603      	mov	r3, r0
 80020da:	4618      	mov	r0, r3
 80020dc:	f000 f8bc 	bl	8002258 <RCC_GetPCLK1ClockFreq>
 80020e0:	60f8      	str	r0, [r7, #12]
        break;
 80020e2:	e004      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 80020e4:	bf00      	nop
 80020e6:	e002      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80020e8:	bf00      	nop
 80020ea:	e000      	b.n	80020ee <LL_RCC_GetUARTClockFreq+0x106>
        break;
 80020ec:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80020ee:	68fb      	ldr	r3, [r7, #12]
}
 80020f0:	4618      	mov	r0, r3
 80020f2:	3710      	adds	r7, #16
 80020f4:	46bd      	mov	sp, r7
 80020f6:	bd80      	pop	{r7, pc}
 80020f8:	00c00040 	.word	0x00c00040
 80020fc:	00c00080 	.word	0x00c00080
 8002100:	00f42400 	.word	0x00f42400
 8002104:	03000100 	.word	0x03000100
 8002108:	03000200 	.word	0x03000200

0800210c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8002112:	f7ff fdf1 	bl	8001cf8 <LL_RCC_GetSysClkSource>
 8002116:	4603      	mov	r3, r0
 8002118:	2b0c      	cmp	r3, #12
 800211a:	d851      	bhi.n	80021c0 <RCC_GetSystemClockFreq+0xb4>
 800211c:	a201      	add	r2, pc, #4	; (adr r2, 8002124 <RCC_GetSystemClockFreq+0x18>)
 800211e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002122:	bf00      	nop
 8002124:	08002159 	.word	0x08002159
 8002128:	080021c1 	.word	0x080021c1
 800212c:	080021c1 	.word	0x080021c1
 8002130:	080021c1 	.word	0x080021c1
 8002134:	080021ad 	.word	0x080021ad
 8002138:	080021c1 	.word	0x080021c1
 800213c:	080021c1 	.word	0x080021c1
 8002140:	080021c1 	.word	0x080021c1
 8002144:	080021b3 	.word	0x080021b3
 8002148:	080021c1 	.word	0x080021c1
 800214c:	080021c1 	.word	0x080021c1
 8002150:	080021c1 	.word	0x080021c1
 8002154:	080021b9 	.word	0x080021b9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002158:	f7ff fda0 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 800215c:	4603      	mov	r3, r0
 800215e:	2b00      	cmp	r3, #0
 8002160:	d111      	bne.n	8002186 <RCC_GetSystemClockFreq+0x7a>
 8002162:	f7ff fd9b 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d004      	beq.n	8002176 <RCC_GetSystemClockFreq+0x6a>
 800216c:	f7ff fda8 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 8002170:	4603      	mov	r3, r0
 8002172:	0a1b      	lsrs	r3, r3, #8
 8002174:	e003      	b.n	800217e <RCC_GetSystemClockFreq+0x72>
 8002176:	f7ff fdb1 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 800217a:	4603      	mov	r3, r0
 800217c:	0a1b      	lsrs	r3, r3, #8
 800217e:	4a28      	ldr	r2, [pc, #160]	; (8002220 <RCC_GetSystemClockFreq+0x114>)
 8002180:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002184:	e010      	b.n	80021a8 <RCC_GetSystemClockFreq+0x9c>
 8002186:	f7ff fd89 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	d004      	beq.n	800219a <RCC_GetSystemClockFreq+0x8e>
 8002190:	f7ff fd96 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 8002194:	4603      	mov	r3, r0
 8002196:	091b      	lsrs	r3, r3, #4
 8002198:	e003      	b.n	80021a2 <RCC_GetSystemClockFreq+0x96>
 800219a:	f7ff fd9f 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 800219e:	4603      	mov	r3, r0
 80021a0:	091b      	lsrs	r3, r3, #4
 80021a2:	4a1f      	ldr	r2, [pc, #124]	; (8002220 <RCC_GetSystemClockFreq+0x114>)
 80021a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80021aa:	e033      	b.n	8002214 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <RCC_GetSystemClockFreq+0x118>)
 80021ae:	607b      	str	r3, [r7, #4]
      break;
 80021b0:	e030      	b.n	8002214 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 80021b2:	4b1d      	ldr	r3, [pc, #116]	; (8002228 <RCC_GetSystemClockFreq+0x11c>)
 80021b4:	607b      	str	r3, [r7, #4]
      break;
 80021b6:	e02d      	b.n	8002214 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 80021b8:	f000 f876 	bl	80022a8 <RCC_PLL_GetFreqDomain_SYS>
 80021bc:	6078      	str	r0, [r7, #4]
      break;
 80021be:	e029      	b.n	8002214 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80021c0:	f7ff fd6c 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d111      	bne.n	80021ee <RCC_GetSystemClockFreq+0xe2>
 80021ca:	f7ff fd67 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d004      	beq.n	80021de <RCC_GetSystemClockFreq+0xd2>
 80021d4:	f7ff fd74 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 80021d8:	4603      	mov	r3, r0
 80021da:	0a1b      	lsrs	r3, r3, #8
 80021dc:	e003      	b.n	80021e6 <RCC_GetSystemClockFreq+0xda>
 80021de:	f7ff fd7d 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 80021e2:	4603      	mov	r3, r0
 80021e4:	0a1b      	lsrs	r3, r3, #8
 80021e6:	4a0e      	ldr	r2, [pc, #56]	; (8002220 <RCC_GetSystemClockFreq+0x114>)
 80021e8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021ec:	e010      	b.n	8002210 <RCC_GetSystemClockFreq+0x104>
 80021ee:	f7ff fd55 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d004      	beq.n	8002202 <RCC_GetSystemClockFreq+0xf6>
 80021f8:	f7ff fd62 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 80021fc:	4603      	mov	r3, r0
 80021fe:	091b      	lsrs	r3, r3, #4
 8002200:	e003      	b.n	800220a <RCC_GetSystemClockFreq+0xfe>
 8002202:	f7ff fd6b 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 8002206:	4603      	mov	r3, r0
 8002208:	091b      	lsrs	r3, r3, #4
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <RCC_GetSystemClockFreq+0x114>)
 800220c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002210:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002212:	bf00      	nop
  }

  return frequency;
 8002214:	687b      	ldr	r3, [r7, #4]
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	08003ae0 	.word	0x08003ae0
 8002224:	00f42400 	.word	0x00f42400
 8002228:	007a1200 	.word	0x007a1200

0800222c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b082      	sub	sp, #8
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8002234:	f7ff fd6e 	bl	8001d14 <LL_RCC_GetAHBPrescaler>
 8002238:	4603      	mov	r3, r0
 800223a:	091b      	lsrs	r3, r3, #4
 800223c:	f003 030f 	and.w	r3, r3, #15
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <RCC_GetHCLKClockFreq+0x28>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	461a      	mov	r2, r3
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	40d3      	lsrs	r3, r2
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	08003ac8 	.word	0x08003ac8

08002258 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002260:	f7ff fd66 	bl	8001d30 <LL_RCC_GetAPB1Prescaler>
 8002264:	4603      	mov	r3, r0
 8002266:	0a1b      	lsrs	r3, r3, #8
 8002268:	4a04      	ldr	r2, [pc, #16]	; (800227c <RCC_GetPCLK1ClockFreq+0x24>)
 800226a:	5cd3      	ldrb	r3, [r2, r3]
 800226c:	461a      	mov	r2, r3
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	40d3      	lsrs	r3, r2
}
 8002272:	4618      	mov	r0, r3
 8002274:	3708      	adds	r7, #8
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	08003ad8 	.word	0x08003ad8

08002280 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	b082      	sub	sp, #8
 8002284:	af00      	add	r7, sp, #0
 8002286:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002288:	f7ff fd60 	bl	8001d4c <LL_RCC_GetAPB2Prescaler>
 800228c:	4603      	mov	r3, r0
 800228e:	0adb      	lsrs	r3, r3, #11
 8002290:	4a04      	ldr	r2, [pc, #16]	; (80022a4 <RCC_GetPCLK2ClockFreq+0x24>)
 8002292:	5cd3      	ldrb	r3, [r2, r3]
 8002294:	461a      	mov	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	40d3      	lsrs	r3, r2
}
 800229a:	4618      	mov	r0, r3
 800229c:	3708      	adds	r7, #8
 800229e:	46bd      	mov	sp, r7
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	08003ad8 	.word	0x08003ad8

080022a8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 80022a8:	b590      	push	{r4, r7, lr}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 80022ae:	f7ff fd83 	bl	8001db8 <LL_RCC_PLL_GetMainSource>
 80022b2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	2b02      	cmp	r3, #2
 80022b8:	d02d      	beq.n	8002316 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d02e      	beq.n	800231c <RCC_PLL_GetFreqDomain_SYS+0x74>
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d12f      	bne.n	8002322 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80022c2:	f7ff fceb 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80022c6:	4603      	mov	r3, r0
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d111      	bne.n	80022f0 <RCC_PLL_GetFreqDomain_SYS+0x48>
 80022cc:	f7ff fce6 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d004      	beq.n	80022e0 <RCC_PLL_GetFreqDomain_SYS+0x38>
 80022d6:	f7ff fcf3 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 80022da:	4603      	mov	r3, r0
 80022dc:	0a1b      	lsrs	r3, r3, #8
 80022de:	e003      	b.n	80022e8 <RCC_PLL_GetFreqDomain_SYS+0x40>
 80022e0:	f7ff fcfc 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 80022e4:	4603      	mov	r3, r0
 80022e6:	0a1b      	lsrs	r3, r3, #8
 80022e8:	4a2f      	ldr	r2, [pc, #188]	; (80023a8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80022ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ee:	e010      	b.n	8002312 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 80022f0:	f7ff fcd4 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 80022f4:	4603      	mov	r3, r0
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d004      	beq.n	8002304 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80022fa:	f7ff fce1 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 80022fe:	4603      	mov	r3, r0
 8002300:	091b      	lsrs	r3, r3, #4
 8002302:	e003      	b.n	800230c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8002304:	f7ff fcea 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 8002308:	4603      	mov	r3, r0
 800230a:	091b      	lsrs	r3, r3, #4
 800230c:	4a26      	ldr	r2, [pc, #152]	; (80023a8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800230e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002312:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002314:	e02f      	b.n	8002376 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8002316:	4b25      	ldr	r3, [pc, #148]	; (80023ac <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8002318:	607b      	str	r3, [r7, #4]
      break;
 800231a:	e02c      	b.n	8002376 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800231c:	4b24      	ldr	r3, [pc, #144]	; (80023b0 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 800231e:	607b      	str	r3, [r7, #4]
      break;
 8002320:	e029      	b.n	8002376 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002322:	f7ff fcbb 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d111      	bne.n	8002350 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 800232c:	f7ff fcb6 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002330:	4603      	mov	r3, r0
 8002332:	2b00      	cmp	r3, #0
 8002334:	d004      	beq.n	8002340 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8002336:	f7ff fcc3 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 800233a:	4603      	mov	r3, r0
 800233c:	0a1b      	lsrs	r3, r3, #8
 800233e:	e003      	b.n	8002348 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8002340:	f7ff fccc 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 8002344:	4603      	mov	r3, r0
 8002346:	0a1b      	lsrs	r3, r3, #8
 8002348:	4a17      	ldr	r2, [pc, #92]	; (80023a8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800234a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800234e:	e010      	b.n	8002372 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8002350:	f7ff fca4 	bl	8001c9c <LL_RCC_MSI_IsEnabledRangeSelect>
 8002354:	4603      	mov	r3, r0
 8002356:	2b00      	cmp	r3, #0
 8002358:	d004      	beq.n	8002364 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 800235a:	f7ff fcb1 	bl	8001cc0 <LL_RCC_MSI_GetRange>
 800235e:	4603      	mov	r3, r0
 8002360:	091b      	lsrs	r3, r3, #4
 8002362:	e003      	b.n	800236c <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8002364:	f7ff fcba 	bl	8001cdc <LL_RCC_MSI_GetRangeAfterStandby>
 8002368:	4603      	mov	r3, r0
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	4a0e      	ldr	r2, [pc, #56]	; (80023a8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 800236e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002372:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002374:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002376:	f7ff fd49 	bl	8001e0c <LL_RCC_PLL_GetDivider>
 800237a:	4603      	mov	r3, r0
 800237c:	091b      	lsrs	r3, r3, #4
 800237e:	3301      	adds	r3, #1
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	fbb2 f4f3 	udiv	r4, r2, r3
 8002386:	f7ff fd25 	bl	8001dd4 <LL_RCC_PLL_GetN>
 800238a:	4603      	mov	r3, r0
 800238c:	fb03 f404 	mul.w	r4, r3, r4
 8002390:	f7ff fd2e 	bl	8001df0 <LL_RCC_PLL_GetR>
 8002394:	4603      	mov	r3, r0
 8002396:	0e5b      	lsrs	r3, r3, #25
 8002398:	3301      	adds	r3, #1
 800239a:	005b      	lsls	r3, r3, #1
 800239c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 80023a0:	4618      	mov	r0, r3
 80023a2:	370c      	adds	r7, #12
 80023a4:	46bd      	mov	sp, r7
 80023a6:	bd90      	pop	{r4, r7, pc}
 80023a8:	08003ae0 	.word	0x08003ae0
 80023ac:	00f42400 	.word	0x00f42400
 80023b0:	007a1200 	.word	0x007a1200

080023b4 <LL_SPI_IsEnabled>:
{
 80023b4:	b480      	push	{r7}
 80023b6:	b083      	sub	sp, #12
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023c4:	2b40      	cmp	r3, #64	; 0x40
 80023c6:	d101      	bne.n	80023cc <LL_SPI_IsEnabled+0x18>
 80023c8:	2301      	movs	r3, #1
 80023ca:	e000      	b.n	80023ce <LL_SPI_IsEnabled+0x1a>
 80023cc:	2300      	movs	r3, #0
}
 80023ce:	4618      	mov	r0, r3
 80023d0:	370c      	adds	r7, #12
 80023d2:	46bd      	mov	sp, r7
 80023d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d8:	4770      	bx	lr

080023da <LL_SPI_SetCRCPolynomial>:
{
 80023da:	b480      	push	{r7}
 80023dc:	b083      	sub	sp, #12
 80023de:	af00      	add	r7, sp, #0
 80023e0:	6078      	str	r0, [r7, #4]
 80023e2:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80023e4:	683b      	ldr	r3, [r7, #0]
 80023e6:	b29b      	uxth	r3, r3
 80023e8:	461a      	mov	r2, r3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	611a      	str	r2, [r3, #16]
}
 80023ee:	bf00      	nop
 80023f0:	370c      	adds	r7, #12
 80023f2:	46bd      	mov	sp, r7
 80023f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f8:	4770      	bx	lr

080023fa <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80023fa:	b580      	push	{r7, lr}
 80023fc:	b084      	sub	sp, #16
 80023fe:	af00      	add	r7, sp, #0
 8002400:	6078      	str	r0, [r7, #4]
 8002402:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	f7ff ffd3 	bl	80023b4 <LL_SPI_IsEnabled>
 800240e:	4603      	mov	r3, r0
 8002410:	2b00      	cmp	r3, #0
 8002412:	d13b      	bne.n	800248c <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800241c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002420:	683a      	ldr	r2, [r7, #0]
 8002422:	6811      	ldr	r1, [r2, #0]
 8002424:	683a      	ldr	r2, [r7, #0]
 8002426:	6852      	ldr	r2, [r2, #4]
 8002428:	4311      	orrs	r1, r2
 800242a:	683a      	ldr	r2, [r7, #0]
 800242c:	68d2      	ldr	r2, [r2, #12]
 800242e:	4311      	orrs	r1, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	6912      	ldr	r2, [r2, #16]
 8002434:	4311      	orrs	r1, r2
 8002436:	683a      	ldr	r2, [r7, #0]
 8002438:	6952      	ldr	r2, [r2, #20]
 800243a:	4311      	orrs	r1, r2
 800243c:	683a      	ldr	r2, [r7, #0]
 800243e:	6992      	ldr	r2, [r2, #24]
 8002440:	4311      	orrs	r1, r2
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	69d2      	ldr	r2, [r2, #28]
 8002446:	4311      	orrs	r1, r2
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	6a12      	ldr	r2, [r2, #32]
 800244c:	430a      	orrs	r2, r1
 800244e:	431a      	orrs	r2, r3
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800245c:	f023 0304 	bic.w	r3, r3, #4
 8002460:	683a      	ldr	r2, [r7, #0]
 8002462:	6891      	ldr	r1, [r2, #8]
 8002464:	683a      	ldr	r2, [r7, #0]
 8002466:	6952      	ldr	r2, [r2, #20]
 8002468:	0c12      	lsrs	r2, r2, #16
 800246a:	430a      	orrs	r2, r1
 800246c:	431a      	orrs	r2, r3
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	6a1b      	ldr	r3, [r3, #32]
 8002476:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800247a:	d105      	bne.n	8002488 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002480:	4619      	mov	r1, r3
 8002482:	6878      	ldr	r0, [r7, #4]
 8002484:	f7ff ffa9 	bl	80023da <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002488:	2300      	movs	r3, #0
 800248a:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 800248c:	7bfb      	ldrb	r3, [r7, #15]
}
 800248e:	4618      	mov	r0, r3
 8002490:	3710      	adds	r7, #16
 8002492:	46bd      	mov	sp, r7
 8002494:	bd80      	pop	{r7, pc}

08002496 <LL_TIM_SetPrescaler>:
{
 8002496:	b480      	push	{r7}
 8002498:	b083      	sub	sp, #12
 800249a:	af00      	add	r7, sp, #0
 800249c:	6078      	str	r0, [r7, #4]
 800249e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	629a      	str	r2, [r3, #40]	; 0x28
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr

080024b2 <LL_TIM_SetAutoReload>:
{
 80024b2:	b480      	push	{r7}
 80024b4:	b083      	sub	sp, #12
 80024b6:	af00      	add	r7, sp, #0
 80024b8:	6078      	str	r0, [r7, #4]
 80024ba:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	683a      	ldr	r2, [r7, #0]
 80024c0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80024c2:	bf00      	nop
 80024c4:	370c      	adds	r7, #12
 80024c6:	46bd      	mov	sp, r7
 80024c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024cc:	4770      	bx	lr

080024ce <LL_TIM_SetRepetitionCounter>:
{
 80024ce:	b480      	push	{r7}
 80024d0:	b083      	sub	sp, #12
 80024d2:	af00      	add	r7, sp, #0
 80024d4:	6078      	str	r0, [r7, #4]
 80024d6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr

080024ea <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 80024ea:	b480      	push	{r7}
 80024ec:	b083      	sub	sp, #12
 80024ee:	af00      	add	r7, sp, #0
 80024f0:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	695b      	ldr	r3, [r3, #20]
 80024f6:	f043 0201 	orr.w	r2, r3, #1
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	615a      	str	r2, [r3, #20]
}
 80024fe:	bf00      	nop
 8002500:	370c      	adds	r7, #12
 8002502:	46bd      	mov	sp, r7
 8002504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002508:	4770      	bx	lr
	...

0800250c <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b084      	sub	sp, #16
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
 8002514:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	4a3d      	ldr	r2, [pc, #244]	; (8002614 <LL_TIM_Init+0x108>)
 8002520:	4293      	cmp	r3, r2
 8002522:	d013      	beq.n	800254c <LL_TIM_Init+0x40>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800252a:	d00f      	beq.n	800254c <LL_TIM_Init+0x40>
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	4a3a      	ldr	r2, [pc, #232]	; (8002618 <LL_TIM_Init+0x10c>)
 8002530:	4293      	cmp	r3, r2
 8002532:	d00b      	beq.n	800254c <LL_TIM_Init+0x40>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	4a39      	ldr	r2, [pc, #228]	; (800261c <LL_TIM_Init+0x110>)
 8002538:	4293      	cmp	r3, r2
 800253a:	d007      	beq.n	800254c <LL_TIM_Init+0x40>
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	4a38      	ldr	r2, [pc, #224]	; (8002620 <LL_TIM_Init+0x114>)
 8002540:	4293      	cmp	r3, r2
 8002542:	d003      	beq.n	800254c <LL_TIM_Init+0x40>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	4a37      	ldr	r2, [pc, #220]	; (8002624 <LL_TIM_Init+0x118>)
 8002548:	4293      	cmp	r3, r2
 800254a:	d106      	bne.n	800255a <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	4313      	orrs	r3, r2
 8002558:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	4a2d      	ldr	r2, [pc, #180]	; (8002614 <LL_TIM_Init+0x108>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d01f      	beq.n	80025a2 <LL_TIM_Init+0x96>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002568:	d01b      	beq.n	80025a2 <LL_TIM_Init+0x96>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a2a      	ldr	r2, [pc, #168]	; (8002618 <LL_TIM_Init+0x10c>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d017      	beq.n	80025a2 <LL_TIM_Init+0x96>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a29      	ldr	r2, [pc, #164]	; (800261c <LL_TIM_Init+0x110>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d013      	beq.n	80025a2 <LL_TIM_Init+0x96>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a28      	ldr	r2, [pc, #160]	; (8002620 <LL_TIM_Init+0x114>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d00f      	beq.n	80025a2 <LL_TIM_Init+0x96>
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	4a27      	ldr	r2, [pc, #156]	; (8002624 <LL_TIM_Init+0x118>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d00b      	beq.n	80025a2 <LL_TIM_Init+0x96>
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a26      	ldr	r2, [pc, #152]	; (8002628 <LL_TIM_Init+0x11c>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d007      	beq.n	80025a2 <LL_TIM_Init+0x96>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a25      	ldr	r2, [pc, #148]	; (800262c <LL_TIM_Init+0x120>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d003      	beq.n	80025a2 <LL_TIM_Init+0x96>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a24      	ldr	r2, [pc, #144]	; (8002630 <LL_TIM_Init+0x124>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d106      	bne.n	80025b0 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a8:	683b      	ldr	r3, [r7, #0]
 80025aa:	68db      	ldr	r3, [r3, #12]
 80025ac:	4313      	orrs	r3, r2
 80025ae:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	68fa      	ldr	r2, [r7, #12]
 80025b4:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80025b6:	683b      	ldr	r3, [r7, #0]
 80025b8:	689b      	ldr	r3, [r3, #8]
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f7ff ff78 	bl	80024b2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4619      	mov	r1, r3
 80025c8:	6878      	ldr	r0, [r7, #4]
 80025ca:	f7ff ff64 	bl	8002496 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	4a10      	ldr	r2, [pc, #64]	; (8002614 <LL_TIM_Init+0x108>)
 80025d2:	4293      	cmp	r3, r2
 80025d4:	d00f      	beq.n	80025f6 <LL_TIM_Init+0xea>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	4a12      	ldr	r2, [pc, #72]	; (8002624 <LL_TIM_Init+0x118>)
 80025da:	4293      	cmp	r3, r2
 80025dc:	d00b      	beq.n	80025f6 <LL_TIM_Init+0xea>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	4a11      	ldr	r2, [pc, #68]	; (8002628 <LL_TIM_Init+0x11c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d007      	beq.n	80025f6 <LL_TIM_Init+0xea>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a10      	ldr	r2, [pc, #64]	; (800262c <LL_TIM_Init+0x120>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d003      	beq.n	80025f6 <LL_TIM_Init+0xea>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	4a0f      	ldr	r2, [pc, #60]	; (8002630 <LL_TIM_Init+0x124>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d105      	bne.n	8002602 <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	691b      	ldr	r3, [r3, #16]
 80025fa:	4619      	mov	r1, r3
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f7ff ff66 	bl	80024ce <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 8002602:	6878      	ldr	r0, [r7, #4]
 8002604:	f7ff ff71 	bl	80024ea <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8002608:	2300      	movs	r3, #0
}
 800260a:	4618      	mov	r0, r3
 800260c:	3710      	adds	r7, #16
 800260e:	46bd      	mov	sp, r7
 8002610:	bd80      	pop	{r7, pc}
 8002612:	bf00      	nop
 8002614:	40012c00 	.word	0x40012c00
 8002618:	40000400 	.word	0x40000400
 800261c:	40000800 	.word	0x40000800
 8002620:	40000c00 	.word	0x40000c00
 8002624:	40013400 	.word	0x40013400
 8002628:	40014000 	.word	0x40014000
 800262c:	40014400 	.word	0x40014400
 8002630:	40014800 	.word	0x40014800

08002634 <LL_USART_IsEnabled>:
{
 8002634:	b480      	push	{r7}
 8002636:	b083      	sub	sp, #12
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0301 	and.w	r3, r3, #1
 8002644:	2b01      	cmp	r3, #1
 8002646:	d101      	bne.n	800264c <LL_USART_IsEnabled+0x18>
 8002648:	2301      	movs	r3, #1
 800264a:	e000      	b.n	800264e <LL_USART_IsEnabled+0x1a>
 800264c:	2300      	movs	r3, #0
}
 800264e:	4618      	mov	r0, r3
 8002650:	370c      	adds	r7, #12
 8002652:	46bd      	mov	sp, r7
 8002654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002658:	4770      	bx	lr

0800265a <LL_USART_SetStopBitsLength>:
{
 800265a:	b480      	push	{r7}
 800265c:	b083      	sub	sp, #12
 800265e:	af00      	add	r7, sp, #0
 8002660:	6078      	str	r0, [r7, #4]
 8002662:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	431a      	orrs	r2, r3
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	605a      	str	r2, [r3, #4]
}
 8002674:	bf00      	nop
 8002676:	370c      	adds	r7, #12
 8002678:	46bd      	mov	sp, r7
 800267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267e:	4770      	bx	lr

08002680 <LL_USART_SetHWFlowCtrl>:
{
 8002680:	b480      	push	{r7}
 8002682:	b083      	sub	sp, #12
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
 8002688:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002692:	683b      	ldr	r3, [r7, #0]
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	609a      	str	r2, [r3, #8]
}
 800269a:	bf00      	nop
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <LL_USART_SetBaudRate>:
{
 80026a6:	b480      	push	{r7}
 80026a8:	b087      	sub	sp, #28
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	60f8      	str	r0, [r7, #12]
 80026ae:	60b9      	str	r1, [r7, #8]
 80026b0:	607a      	str	r2, [r7, #4]
 80026b2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80026ba:	d11a      	bne.n	80026f2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80026bc:	68bb      	ldr	r3, [r7, #8]
 80026be:	005a      	lsls	r2, r3, #1
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	085b      	lsrs	r3, r3, #1
 80026c4:	441a      	add	r2, r3
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80026d6:	4013      	ands	r3, r2
 80026d8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80026da:	697b      	ldr	r3, [r7, #20]
 80026dc:	085b      	lsrs	r3, r3, #1
 80026de:	b29b      	uxth	r3, r3
 80026e0:	f003 0307 	and.w	r3, r3, #7
 80026e4:	693a      	ldr	r2, [r7, #16]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	693a      	ldr	r2, [r7, #16]
 80026ee:	60da      	str	r2, [r3, #12]
}
 80026f0:	e00a      	b.n	8002708 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	085a      	lsrs	r2, r3, #1
 80026f6:	68bb      	ldr	r3, [r7, #8]
 80026f8:	441a      	add	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002700:	b29b      	uxth	r3, r3
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	60da      	str	r2, [r3, #12]
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002712:	4770      	bx	lr

08002714 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b084      	sub	sp, #16
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
 800271c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800271e:	2301      	movs	r3, #1
 8002720:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8002722:	2300      	movs	r3, #0
 8002724:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002726:	6878      	ldr	r0, [r7, #4]
 8002728:	f7ff ff84 	bl	8002634 <LL_USART_IsEnabled>
 800272c:	4603      	mov	r3, r0
 800272e:	2b00      	cmp	r3, #0
 8002730:	d15b      	bne.n	80027ea <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681a      	ldr	r2, [r3, #0]
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <LL_USART_Init+0xe0>)
 8002738:	4013      	ands	r3, r2
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	6851      	ldr	r1, [r2, #4]
 800273e:	683a      	ldr	r2, [r7, #0]
 8002740:	68d2      	ldr	r2, [r2, #12]
 8002742:	4311      	orrs	r1, r2
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	6912      	ldr	r2, [r2, #16]
 8002748:	4311      	orrs	r1, r2
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6992      	ldr	r2, [r2, #24]
 800274e:	430a      	orrs	r2, r1
 8002750:	431a      	orrs	r2, r3
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	4619      	mov	r1, r3
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	f7ff ff7c 	bl	800265a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8002762:	683b      	ldr	r3, [r7, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	4619      	mov	r1, r3
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f7ff ff89 	bl	8002680 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	4a21      	ldr	r2, [pc, #132]	; (80027f8 <LL_USART_Init+0xe4>)
 8002772:	4293      	cmp	r3, r2
 8002774:	d104      	bne.n	8002780 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8002776:	2003      	movs	r0, #3
 8002778:	f7ff fb56 	bl	8001e28 <LL_RCC_GetUSARTClockFreq>
 800277c:	60b8      	str	r0, [r7, #8]
 800277e:	e023      	b.n	80027c8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	4a1e      	ldr	r2, [pc, #120]	; (80027fc <LL_USART_Init+0xe8>)
 8002784:	4293      	cmp	r3, r2
 8002786:	d104      	bne.n	8002792 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002788:	200c      	movs	r0, #12
 800278a:	f7ff fb4d 	bl	8001e28 <LL_RCC_GetUSARTClockFreq>
 800278e:	60b8      	str	r0, [r7, #8]
 8002790:	e01a      	b.n	80027c8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	4a1a      	ldr	r2, [pc, #104]	; (8002800 <LL_USART_Init+0xec>)
 8002796:	4293      	cmp	r3, r2
 8002798:	d104      	bne.n	80027a4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800279a:	2030      	movs	r0, #48	; 0x30
 800279c:	f7ff fb44 	bl	8001e28 <LL_RCC_GetUSARTClockFreq>
 80027a0:	60b8      	str	r0, [r7, #8]
 80027a2:	e011      	b.n	80027c8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	4a17      	ldr	r2, [pc, #92]	; (8002804 <LL_USART_Init+0xf0>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	d104      	bne.n	80027b6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80027ac:	20c0      	movs	r0, #192	; 0xc0
 80027ae:	f7ff fc1b 	bl	8001fe8 <LL_RCC_GetUARTClockFreq>
 80027b2:	60b8      	str	r0, [r7, #8]
 80027b4:	e008      	b.n	80027c8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	4a13      	ldr	r2, [pc, #76]	; (8002808 <LL_USART_Init+0xf4>)
 80027ba:	4293      	cmp	r3, r2
 80027bc:	d104      	bne.n	80027c8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80027be:	f44f 7040 	mov.w	r0, #768	; 0x300
 80027c2:	f7ff fc11 	bl	8001fe8 <LL_RCC_GetUARTClockFreq>
 80027c6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80027c8:	68bb      	ldr	r3, [r7, #8]
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d00d      	beq.n	80027ea <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80027ce:	683b      	ldr	r3, [r7, #0]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d009      	beq.n	80027ea <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	699a      	ldr	r2, [r3, #24]
 80027de:	683b      	ldr	r3, [r7, #0]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68b9      	ldr	r1, [r7, #8]
 80027e4:	6878      	ldr	r0, [r7, #4]
 80027e6:	f7ff ff5e 	bl	80026a6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	efff69f3 	.word	0xefff69f3
 80027f8:	40013800 	.word	0x40013800
 80027fc:	40004400 	.word	0x40004400
 8002800:	40004800 	.word	0x40004800
 8002804:	40004c00 	.word	0x40004c00
 8002808:	40005000 	.word	0x40005000

0800280c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800280c:	b480      	push	{r7}
 800280e:	b083      	sub	sp, #12
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
 8002814:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	fbb2 f3f3 	udiv	r3, r2, r3
 800281e:	4a07      	ldr	r2, [pc, #28]	; (800283c <LL_InitTick+0x30>)
 8002820:	3b01      	subs	r3, #1
 8002822:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002824:	4b05      	ldr	r3, [pc, #20]	; (800283c <LL_InitTick+0x30>)
 8002826:	2200      	movs	r2, #0
 8002828:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <LL_InitTick+0x30>)
 800282c:	2205      	movs	r2, #5
 800282e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8002830:	bf00      	nop
 8002832:	370c      	adds	r7, #12
 8002834:	46bd      	mov	sp, r7
 8002836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283a:	4770      	bx	lr
 800283c:	e000e010 	.word	0xe000e010

08002840 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	b082      	sub	sp, #8
 8002844:	af00      	add	r7, sp, #0
 8002846:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8002848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800284c:	6878      	ldr	r0, [r7, #4]
 800284e:	f7ff ffdd 	bl	800280c <LL_InitTick>
}
 8002852:	bf00      	nop
 8002854:	3708      	adds	r7, #8
 8002856:	46bd      	mov	sp, r7
 8002858:	bd80      	pop	{r7, pc}
	...

0800285c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800285c:	b480      	push	{r7}
 800285e:	b085      	sub	sp, #20
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8002864:	4b0f      	ldr	r3, [pc, #60]	; (80028a4 <LL_mDelay+0x48>)
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800286e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002876:	d00c      	beq.n	8002892 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	3301      	adds	r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800287e:	e008      	b.n	8002892 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002880:	4b08      	ldr	r3, [pc, #32]	; (80028a4 <LL_mDelay+0x48>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d002      	beq.n	8002892 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3b01      	subs	r3, #1
 8002890:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d1f3      	bne.n	8002880 <LL_mDelay+0x24>
    }
  }
}
 8002898:	bf00      	nop
 800289a:	3714      	adds	r7, #20
 800289c:	46bd      	mov	sp, r7
 800289e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a2:	4770      	bx	lr
 80028a4:	e000e010 	.word	0xe000e010

080028a8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80028b0:	4a04      	ldr	r2, [pc, #16]	; (80028c4 <LL_SetSystemCoreClock+0x1c>)
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	6013      	str	r3, [r2, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	20000000 	.word	0x20000000

080028c8 <__errno>:
 80028c8:	4b01      	ldr	r3, [pc, #4]	; (80028d0 <__errno+0x8>)
 80028ca:	6818      	ldr	r0, [r3, #0]
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	20000004 	.word	0x20000004

080028d4 <__libc_init_array>:
 80028d4:	b570      	push	{r4, r5, r6, lr}
 80028d6:	4e0d      	ldr	r6, [pc, #52]	; (800290c <__libc_init_array+0x38>)
 80028d8:	4c0d      	ldr	r4, [pc, #52]	; (8002910 <__libc_init_array+0x3c>)
 80028da:	1ba4      	subs	r4, r4, r6
 80028dc:	10a4      	asrs	r4, r4, #2
 80028de:	2500      	movs	r5, #0
 80028e0:	42a5      	cmp	r5, r4
 80028e2:	d109      	bne.n	80028f8 <__libc_init_array+0x24>
 80028e4:	4e0b      	ldr	r6, [pc, #44]	; (8002914 <__libc_init_array+0x40>)
 80028e6:	4c0c      	ldr	r4, [pc, #48]	; (8002918 <__libc_init_array+0x44>)
 80028e8:	f000 ff68 	bl	80037bc <_init>
 80028ec:	1ba4      	subs	r4, r4, r6
 80028ee:	10a4      	asrs	r4, r4, #2
 80028f0:	2500      	movs	r5, #0
 80028f2:	42a5      	cmp	r5, r4
 80028f4:	d105      	bne.n	8002902 <__libc_init_array+0x2e>
 80028f6:	bd70      	pop	{r4, r5, r6, pc}
 80028f8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028fc:	4798      	blx	r3
 80028fe:	3501      	adds	r5, #1
 8002900:	e7ee      	b.n	80028e0 <__libc_init_array+0xc>
 8002902:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8002906:	4798      	blx	r3
 8002908:	3501      	adds	r5, #1
 800290a:	e7f2      	b.n	80028f2 <__libc_init_array+0x1e>
 800290c:	08003ba8 	.word	0x08003ba8
 8002910:	08003ba8 	.word	0x08003ba8
 8002914:	08003ba8 	.word	0x08003ba8
 8002918:	08003bac 	.word	0x08003bac

0800291c <memset>:
 800291c:	4402      	add	r2, r0
 800291e:	4603      	mov	r3, r0
 8002920:	4293      	cmp	r3, r2
 8002922:	d100      	bne.n	8002926 <memset+0xa>
 8002924:	4770      	bx	lr
 8002926:	f803 1b01 	strb.w	r1, [r3], #1
 800292a:	e7f9      	b.n	8002920 <memset+0x4>

0800292c <iprintf>:
 800292c:	b40f      	push	{r0, r1, r2, r3}
 800292e:	4b0a      	ldr	r3, [pc, #40]	; (8002958 <iprintf+0x2c>)
 8002930:	b513      	push	{r0, r1, r4, lr}
 8002932:	681c      	ldr	r4, [r3, #0]
 8002934:	b124      	cbz	r4, 8002940 <iprintf+0x14>
 8002936:	69a3      	ldr	r3, [r4, #24]
 8002938:	b913      	cbnz	r3, 8002940 <iprintf+0x14>
 800293a:	4620      	mov	r0, r4
 800293c:	f000 fa22 	bl	8002d84 <__sinit>
 8002940:	ab05      	add	r3, sp, #20
 8002942:	9a04      	ldr	r2, [sp, #16]
 8002944:	68a1      	ldr	r1, [r4, #8]
 8002946:	9301      	str	r3, [sp, #4]
 8002948:	4620      	mov	r0, r4
 800294a:	f000 fbdb 	bl	8003104 <_vfiprintf_r>
 800294e:	b002      	add	sp, #8
 8002950:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002954:	b004      	add	sp, #16
 8002956:	4770      	bx	lr
 8002958:	20000004 	.word	0x20000004

0800295c <_puts_r>:
 800295c:	b570      	push	{r4, r5, r6, lr}
 800295e:	460e      	mov	r6, r1
 8002960:	4605      	mov	r5, r0
 8002962:	b118      	cbz	r0, 800296c <_puts_r+0x10>
 8002964:	6983      	ldr	r3, [r0, #24]
 8002966:	b90b      	cbnz	r3, 800296c <_puts_r+0x10>
 8002968:	f000 fa0c 	bl	8002d84 <__sinit>
 800296c:	69ab      	ldr	r3, [r5, #24]
 800296e:	68ac      	ldr	r4, [r5, #8]
 8002970:	b913      	cbnz	r3, 8002978 <_puts_r+0x1c>
 8002972:	4628      	mov	r0, r5
 8002974:	f000 fa06 	bl	8002d84 <__sinit>
 8002978:	4b23      	ldr	r3, [pc, #140]	; (8002a08 <_puts_r+0xac>)
 800297a:	429c      	cmp	r4, r3
 800297c:	d117      	bne.n	80029ae <_puts_r+0x52>
 800297e:	686c      	ldr	r4, [r5, #4]
 8002980:	89a3      	ldrh	r3, [r4, #12]
 8002982:	071b      	lsls	r3, r3, #28
 8002984:	d51d      	bpl.n	80029c2 <_puts_r+0x66>
 8002986:	6923      	ldr	r3, [r4, #16]
 8002988:	b1db      	cbz	r3, 80029c2 <_puts_r+0x66>
 800298a:	3e01      	subs	r6, #1
 800298c:	68a3      	ldr	r3, [r4, #8]
 800298e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002992:	3b01      	subs	r3, #1
 8002994:	60a3      	str	r3, [r4, #8]
 8002996:	b9e9      	cbnz	r1, 80029d4 <_puts_r+0x78>
 8002998:	2b00      	cmp	r3, #0
 800299a:	da2e      	bge.n	80029fa <_puts_r+0x9e>
 800299c:	4622      	mov	r2, r4
 800299e:	210a      	movs	r1, #10
 80029a0:	4628      	mov	r0, r5
 80029a2:	f000 f83f 	bl	8002a24 <__swbuf_r>
 80029a6:	3001      	adds	r0, #1
 80029a8:	d011      	beq.n	80029ce <_puts_r+0x72>
 80029aa:	200a      	movs	r0, #10
 80029ac:	e011      	b.n	80029d2 <_puts_r+0x76>
 80029ae:	4b17      	ldr	r3, [pc, #92]	; (8002a0c <_puts_r+0xb0>)
 80029b0:	429c      	cmp	r4, r3
 80029b2:	d101      	bne.n	80029b8 <_puts_r+0x5c>
 80029b4:	68ac      	ldr	r4, [r5, #8]
 80029b6:	e7e3      	b.n	8002980 <_puts_r+0x24>
 80029b8:	4b15      	ldr	r3, [pc, #84]	; (8002a10 <_puts_r+0xb4>)
 80029ba:	429c      	cmp	r4, r3
 80029bc:	bf08      	it	eq
 80029be:	68ec      	ldreq	r4, [r5, #12]
 80029c0:	e7de      	b.n	8002980 <_puts_r+0x24>
 80029c2:	4621      	mov	r1, r4
 80029c4:	4628      	mov	r0, r5
 80029c6:	f000 f87f 	bl	8002ac8 <__swsetup_r>
 80029ca:	2800      	cmp	r0, #0
 80029cc:	d0dd      	beq.n	800298a <_puts_r+0x2e>
 80029ce:	f04f 30ff 	mov.w	r0, #4294967295
 80029d2:	bd70      	pop	{r4, r5, r6, pc}
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	da04      	bge.n	80029e2 <_puts_r+0x86>
 80029d8:	69a2      	ldr	r2, [r4, #24]
 80029da:	429a      	cmp	r2, r3
 80029dc:	dc06      	bgt.n	80029ec <_puts_r+0x90>
 80029de:	290a      	cmp	r1, #10
 80029e0:	d004      	beq.n	80029ec <_puts_r+0x90>
 80029e2:	6823      	ldr	r3, [r4, #0]
 80029e4:	1c5a      	adds	r2, r3, #1
 80029e6:	6022      	str	r2, [r4, #0]
 80029e8:	7019      	strb	r1, [r3, #0]
 80029ea:	e7cf      	b.n	800298c <_puts_r+0x30>
 80029ec:	4622      	mov	r2, r4
 80029ee:	4628      	mov	r0, r5
 80029f0:	f000 f818 	bl	8002a24 <__swbuf_r>
 80029f4:	3001      	adds	r0, #1
 80029f6:	d1c9      	bne.n	800298c <_puts_r+0x30>
 80029f8:	e7e9      	b.n	80029ce <_puts_r+0x72>
 80029fa:	6823      	ldr	r3, [r4, #0]
 80029fc:	200a      	movs	r0, #10
 80029fe:	1c5a      	adds	r2, r3, #1
 8002a00:	6022      	str	r2, [r4, #0]
 8002a02:	7018      	strb	r0, [r3, #0]
 8002a04:	e7e5      	b.n	80029d2 <_puts_r+0x76>
 8002a06:	bf00      	nop
 8002a08:	08003b34 	.word	0x08003b34
 8002a0c:	08003b54 	.word	0x08003b54
 8002a10:	08003b14 	.word	0x08003b14

08002a14 <puts>:
 8002a14:	4b02      	ldr	r3, [pc, #8]	; (8002a20 <puts+0xc>)
 8002a16:	4601      	mov	r1, r0
 8002a18:	6818      	ldr	r0, [r3, #0]
 8002a1a:	f7ff bf9f 	b.w	800295c <_puts_r>
 8002a1e:	bf00      	nop
 8002a20:	20000004 	.word	0x20000004

08002a24 <__swbuf_r>:
 8002a24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a26:	460e      	mov	r6, r1
 8002a28:	4614      	mov	r4, r2
 8002a2a:	4605      	mov	r5, r0
 8002a2c:	b118      	cbz	r0, 8002a36 <__swbuf_r+0x12>
 8002a2e:	6983      	ldr	r3, [r0, #24]
 8002a30:	b90b      	cbnz	r3, 8002a36 <__swbuf_r+0x12>
 8002a32:	f000 f9a7 	bl	8002d84 <__sinit>
 8002a36:	4b21      	ldr	r3, [pc, #132]	; (8002abc <__swbuf_r+0x98>)
 8002a38:	429c      	cmp	r4, r3
 8002a3a:	d12a      	bne.n	8002a92 <__swbuf_r+0x6e>
 8002a3c:	686c      	ldr	r4, [r5, #4]
 8002a3e:	69a3      	ldr	r3, [r4, #24]
 8002a40:	60a3      	str	r3, [r4, #8]
 8002a42:	89a3      	ldrh	r3, [r4, #12]
 8002a44:	071a      	lsls	r2, r3, #28
 8002a46:	d52e      	bpl.n	8002aa6 <__swbuf_r+0x82>
 8002a48:	6923      	ldr	r3, [r4, #16]
 8002a4a:	b363      	cbz	r3, 8002aa6 <__swbuf_r+0x82>
 8002a4c:	6923      	ldr	r3, [r4, #16]
 8002a4e:	6820      	ldr	r0, [r4, #0]
 8002a50:	1ac0      	subs	r0, r0, r3
 8002a52:	6963      	ldr	r3, [r4, #20]
 8002a54:	b2f6      	uxtb	r6, r6
 8002a56:	4283      	cmp	r3, r0
 8002a58:	4637      	mov	r7, r6
 8002a5a:	dc04      	bgt.n	8002a66 <__swbuf_r+0x42>
 8002a5c:	4621      	mov	r1, r4
 8002a5e:	4628      	mov	r0, r5
 8002a60:	f000 f926 	bl	8002cb0 <_fflush_r>
 8002a64:	bb28      	cbnz	r0, 8002ab2 <__swbuf_r+0x8e>
 8002a66:	68a3      	ldr	r3, [r4, #8]
 8002a68:	3b01      	subs	r3, #1
 8002a6a:	60a3      	str	r3, [r4, #8]
 8002a6c:	6823      	ldr	r3, [r4, #0]
 8002a6e:	1c5a      	adds	r2, r3, #1
 8002a70:	6022      	str	r2, [r4, #0]
 8002a72:	701e      	strb	r6, [r3, #0]
 8002a74:	6963      	ldr	r3, [r4, #20]
 8002a76:	3001      	adds	r0, #1
 8002a78:	4283      	cmp	r3, r0
 8002a7a:	d004      	beq.n	8002a86 <__swbuf_r+0x62>
 8002a7c:	89a3      	ldrh	r3, [r4, #12]
 8002a7e:	07db      	lsls	r3, r3, #31
 8002a80:	d519      	bpl.n	8002ab6 <__swbuf_r+0x92>
 8002a82:	2e0a      	cmp	r6, #10
 8002a84:	d117      	bne.n	8002ab6 <__swbuf_r+0x92>
 8002a86:	4621      	mov	r1, r4
 8002a88:	4628      	mov	r0, r5
 8002a8a:	f000 f911 	bl	8002cb0 <_fflush_r>
 8002a8e:	b190      	cbz	r0, 8002ab6 <__swbuf_r+0x92>
 8002a90:	e00f      	b.n	8002ab2 <__swbuf_r+0x8e>
 8002a92:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <__swbuf_r+0x9c>)
 8002a94:	429c      	cmp	r4, r3
 8002a96:	d101      	bne.n	8002a9c <__swbuf_r+0x78>
 8002a98:	68ac      	ldr	r4, [r5, #8]
 8002a9a:	e7d0      	b.n	8002a3e <__swbuf_r+0x1a>
 8002a9c:	4b09      	ldr	r3, [pc, #36]	; (8002ac4 <__swbuf_r+0xa0>)
 8002a9e:	429c      	cmp	r4, r3
 8002aa0:	bf08      	it	eq
 8002aa2:	68ec      	ldreq	r4, [r5, #12]
 8002aa4:	e7cb      	b.n	8002a3e <__swbuf_r+0x1a>
 8002aa6:	4621      	mov	r1, r4
 8002aa8:	4628      	mov	r0, r5
 8002aaa:	f000 f80d 	bl	8002ac8 <__swsetup_r>
 8002aae:	2800      	cmp	r0, #0
 8002ab0:	d0cc      	beq.n	8002a4c <__swbuf_r+0x28>
 8002ab2:	f04f 37ff 	mov.w	r7, #4294967295
 8002ab6:	4638      	mov	r0, r7
 8002ab8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aba:	bf00      	nop
 8002abc:	08003b34 	.word	0x08003b34
 8002ac0:	08003b54 	.word	0x08003b54
 8002ac4:	08003b14 	.word	0x08003b14

08002ac8 <__swsetup_r>:
 8002ac8:	4b32      	ldr	r3, [pc, #200]	; (8002b94 <__swsetup_r+0xcc>)
 8002aca:	b570      	push	{r4, r5, r6, lr}
 8002acc:	681d      	ldr	r5, [r3, #0]
 8002ace:	4606      	mov	r6, r0
 8002ad0:	460c      	mov	r4, r1
 8002ad2:	b125      	cbz	r5, 8002ade <__swsetup_r+0x16>
 8002ad4:	69ab      	ldr	r3, [r5, #24]
 8002ad6:	b913      	cbnz	r3, 8002ade <__swsetup_r+0x16>
 8002ad8:	4628      	mov	r0, r5
 8002ada:	f000 f953 	bl	8002d84 <__sinit>
 8002ade:	4b2e      	ldr	r3, [pc, #184]	; (8002b98 <__swsetup_r+0xd0>)
 8002ae0:	429c      	cmp	r4, r3
 8002ae2:	d10f      	bne.n	8002b04 <__swsetup_r+0x3c>
 8002ae4:	686c      	ldr	r4, [r5, #4]
 8002ae6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002aea:	b29a      	uxth	r2, r3
 8002aec:	0715      	lsls	r5, r2, #28
 8002aee:	d42c      	bmi.n	8002b4a <__swsetup_r+0x82>
 8002af0:	06d0      	lsls	r0, r2, #27
 8002af2:	d411      	bmi.n	8002b18 <__swsetup_r+0x50>
 8002af4:	2209      	movs	r2, #9
 8002af6:	6032      	str	r2, [r6, #0]
 8002af8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002afc:	81a3      	strh	r3, [r4, #12]
 8002afe:	f04f 30ff 	mov.w	r0, #4294967295
 8002b02:	e03e      	b.n	8002b82 <__swsetup_r+0xba>
 8002b04:	4b25      	ldr	r3, [pc, #148]	; (8002b9c <__swsetup_r+0xd4>)
 8002b06:	429c      	cmp	r4, r3
 8002b08:	d101      	bne.n	8002b0e <__swsetup_r+0x46>
 8002b0a:	68ac      	ldr	r4, [r5, #8]
 8002b0c:	e7eb      	b.n	8002ae6 <__swsetup_r+0x1e>
 8002b0e:	4b24      	ldr	r3, [pc, #144]	; (8002ba0 <__swsetup_r+0xd8>)
 8002b10:	429c      	cmp	r4, r3
 8002b12:	bf08      	it	eq
 8002b14:	68ec      	ldreq	r4, [r5, #12]
 8002b16:	e7e6      	b.n	8002ae6 <__swsetup_r+0x1e>
 8002b18:	0751      	lsls	r1, r2, #29
 8002b1a:	d512      	bpl.n	8002b42 <__swsetup_r+0x7a>
 8002b1c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002b1e:	b141      	cbz	r1, 8002b32 <__swsetup_r+0x6a>
 8002b20:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002b24:	4299      	cmp	r1, r3
 8002b26:	d002      	beq.n	8002b2e <__swsetup_r+0x66>
 8002b28:	4630      	mov	r0, r6
 8002b2a:	f000 fa19 	bl	8002f60 <_free_r>
 8002b2e:	2300      	movs	r3, #0
 8002b30:	6363      	str	r3, [r4, #52]	; 0x34
 8002b32:	89a3      	ldrh	r3, [r4, #12]
 8002b34:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002b38:	81a3      	strh	r3, [r4, #12]
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	6063      	str	r3, [r4, #4]
 8002b3e:	6923      	ldr	r3, [r4, #16]
 8002b40:	6023      	str	r3, [r4, #0]
 8002b42:	89a3      	ldrh	r3, [r4, #12]
 8002b44:	f043 0308 	orr.w	r3, r3, #8
 8002b48:	81a3      	strh	r3, [r4, #12]
 8002b4a:	6923      	ldr	r3, [r4, #16]
 8002b4c:	b94b      	cbnz	r3, 8002b62 <__swsetup_r+0x9a>
 8002b4e:	89a3      	ldrh	r3, [r4, #12]
 8002b50:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b58:	d003      	beq.n	8002b62 <__swsetup_r+0x9a>
 8002b5a:	4621      	mov	r1, r4
 8002b5c:	4630      	mov	r0, r6
 8002b5e:	f000 f9bf 	bl	8002ee0 <__smakebuf_r>
 8002b62:	89a2      	ldrh	r2, [r4, #12]
 8002b64:	f012 0301 	ands.w	r3, r2, #1
 8002b68:	d00c      	beq.n	8002b84 <__swsetup_r+0xbc>
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	60a3      	str	r3, [r4, #8]
 8002b6e:	6963      	ldr	r3, [r4, #20]
 8002b70:	425b      	negs	r3, r3
 8002b72:	61a3      	str	r3, [r4, #24]
 8002b74:	6923      	ldr	r3, [r4, #16]
 8002b76:	b953      	cbnz	r3, 8002b8e <__swsetup_r+0xc6>
 8002b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b7c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b80:	d1ba      	bne.n	8002af8 <__swsetup_r+0x30>
 8002b82:	bd70      	pop	{r4, r5, r6, pc}
 8002b84:	0792      	lsls	r2, r2, #30
 8002b86:	bf58      	it	pl
 8002b88:	6963      	ldrpl	r3, [r4, #20]
 8002b8a:	60a3      	str	r3, [r4, #8]
 8002b8c:	e7f2      	b.n	8002b74 <__swsetup_r+0xac>
 8002b8e:	2000      	movs	r0, #0
 8002b90:	e7f7      	b.n	8002b82 <__swsetup_r+0xba>
 8002b92:	bf00      	nop
 8002b94:	20000004 	.word	0x20000004
 8002b98:	08003b34 	.word	0x08003b34
 8002b9c:	08003b54 	.word	0x08003b54
 8002ba0:	08003b14 	.word	0x08003b14

08002ba4 <__sflush_r>:
 8002ba4:	898a      	ldrh	r2, [r1, #12]
 8002ba6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002baa:	4605      	mov	r5, r0
 8002bac:	0710      	lsls	r0, r2, #28
 8002bae:	460c      	mov	r4, r1
 8002bb0:	d458      	bmi.n	8002c64 <__sflush_r+0xc0>
 8002bb2:	684b      	ldr	r3, [r1, #4]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	dc05      	bgt.n	8002bc4 <__sflush_r+0x20>
 8002bb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	dc02      	bgt.n	8002bc4 <__sflush_r+0x20>
 8002bbe:	2000      	movs	r0, #0
 8002bc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002bc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bc6:	2e00      	cmp	r6, #0
 8002bc8:	d0f9      	beq.n	8002bbe <__sflush_r+0x1a>
 8002bca:	2300      	movs	r3, #0
 8002bcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002bd0:	682f      	ldr	r7, [r5, #0]
 8002bd2:	6a21      	ldr	r1, [r4, #32]
 8002bd4:	602b      	str	r3, [r5, #0]
 8002bd6:	d032      	beq.n	8002c3e <__sflush_r+0x9a>
 8002bd8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002bda:	89a3      	ldrh	r3, [r4, #12]
 8002bdc:	075a      	lsls	r2, r3, #29
 8002bde:	d505      	bpl.n	8002bec <__sflush_r+0x48>
 8002be0:	6863      	ldr	r3, [r4, #4]
 8002be2:	1ac0      	subs	r0, r0, r3
 8002be4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002be6:	b10b      	cbz	r3, 8002bec <__sflush_r+0x48>
 8002be8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002bea:	1ac0      	subs	r0, r0, r3
 8002bec:	2300      	movs	r3, #0
 8002bee:	4602      	mov	r2, r0
 8002bf0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002bf2:	6a21      	ldr	r1, [r4, #32]
 8002bf4:	4628      	mov	r0, r5
 8002bf6:	47b0      	blx	r6
 8002bf8:	1c43      	adds	r3, r0, #1
 8002bfa:	89a3      	ldrh	r3, [r4, #12]
 8002bfc:	d106      	bne.n	8002c0c <__sflush_r+0x68>
 8002bfe:	6829      	ldr	r1, [r5, #0]
 8002c00:	291d      	cmp	r1, #29
 8002c02:	d848      	bhi.n	8002c96 <__sflush_r+0xf2>
 8002c04:	4a29      	ldr	r2, [pc, #164]	; (8002cac <__sflush_r+0x108>)
 8002c06:	40ca      	lsrs	r2, r1
 8002c08:	07d6      	lsls	r6, r2, #31
 8002c0a:	d544      	bpl.n	8002c96 <__sflush_r+0xf2>
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	6062      	str	r2, [r4, #4]
 8002c10:	04d9      	lsls	r1, r3, #19
 8002c12:	6922      	ldr	r2, [r4, #16]
 8002c14:	6022      	str	r2, [r4, #0]
 8002c16:	d504      	bpl.n	8002c22 <__sflush_r+0x7e>
 8002c18:	1c42      	adds	r2, r0, #1
 8002c1a:	d101      	bne.n	8002c20 <__sflush_r+0x7c>
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	b903      	cbnz	r3, 8002c22 <__sflush_r+0x7e>
 8002c20:	6560      	str	r0, [r4, #84]	; 0x54
 8002c22:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002c24:	602f      	str	r7, [r5, #0]
 8002c26:	2900      	cmp	r1, #0
 8002c28:	d0c9      	beq.n	8002bbe <__sflush_r+0x1a>
 8002c2a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002c2e:	4299      	cmp	r1, r3
 8002c30:	d002      	beq.n	8002c38 <__sflush_r+0x94>
 8002c32:	4628      	mov	r0, r5
 8002c34:	f000 f994 	bl	8002f60 <_free_r>
 8002c38:	2000      	movs	r0, #0
 8002c3a:	6360      	str	r0, [r4, #52]	; 0x34
 8002c3c:	e7c0      	b.n	8002bc0 <__sflush_r+0x1c>
 8002c3e:	2301      	movs	r3, #1
 8002c40:	4628      	mov	r0, r5
 8002c42:	47b0      	blx	r6
 8002c44:	1c41      	adds	r1, r0, #1
 8002c46:	d1c8      	bne.n	8002bda <__sflush_r+0x36>
 8002c48:	682b      	ldr	r3, [r5, #0]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d0c5      	beq.n	8002bda <__sflush_r+0x36>
 8002c4e:	2b1d      	cmp	r3, #29
 8002c50:	d001      	beq.n	8002c56 <__sflush_r+0xb2>
 8002c52:	2b16      	cmp	r3, #22
 8002c54:	d101      	bne.n	8002c5a <__sflush_r+0xb6>
 8002c56:	602f      	str	r7, [r5, #0]
 8002c58:	e7b1      	b.n	8002bbe <__sflush_r+0x1a>
 8002c5a:	89a3      	ldrh	r3, [r4, #12]
 8002c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c60:	81a3      	strh	r3, [r4, #12]
 8002c62:	e7ad      	b.n	8002bc0 <__sflush_r+0x1c>
 8002c64:	690f      	ldr	r7, [r1, #16]
 8002c66:	2f00      	cmp	r7, #0
 8002c68:	d0a9      	beq.n	8002bbe <__sflush_r+0x1a>
 8002c6a:	0793      	lsls	r3, r2, #30
 8002c6c:	680e      	ldr	r6, [r1, #0]
 8002c6e:	bf08      	it	eq
 8002c70:	694b      	ldreq	r3, [r1, #20]
 8002c72:	600f      	str	r7, [r1, #0]
 8002c74:	bf18      	it	ne
 8002c76:	2300      	movne	r3, #0
 8002c78:	eba6 0807 	sub.w	r8, r6, r7
 8002c7c:	608b      	str	r3, [r1, #8]
 8002c7e:	f1b8 0f00 	cmp.w	r8, #0
 8002c82:	dd9c      	ble.n	8002bbe <__sflush_r+0x1a>
 8002c84:	4643      	mov	r3, r8
 8002c86:	463a      	mov	r2, r7
 8002c88:	6a21      	ldr	r1, [r4, #32]
 8002c8a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	47b0      	blx	r6
 8002c90:	2800      	cmp	r0, #0
 8002c92:	dc06      	bgt.n	8002ca2 <__sflush_r+0xfe>
 8002c94:	89a3      	ldrh	r3, [r4, #12]
 8002c96:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c9a:	81a3      	strh	r3, [r4, #12]
 8002c9c:	f04f 30ff 	mov.w	r0, #4294967295
 8002ca0:	e78e      	b.n	8002bc0 <__sflush_r+0x1c>
 8002ca2:	4407      	add	r7, r0
 8002ca4:	eba8 0800 	sub.w	r8, r8, r0
 8002ca8:	e7e9      	b.n	8002c7e <__sflush_r+0xda>
 8002caa:	bf00      	nop
 8002cac:	20400001 	.word	0x20400001

08002cb0 <_fflush_r>:
 8002cb0:	b538      	push	{r3, r4, r5, lr}
 8002cb2:	690b      	ldr	r3, [r1, #16]
 8002cb4:	4605      	mov	r5, r0
 8002cb6:	460c      	mov	r4, r1
 8002cb8:	b1db      	cbz	r3, 8002cf2 <_fflush_r+0x42>
 8002cba:	b118      	cbz	r0, 8002cc4 <_fflush_r+0x14>
 8002cbc:	6983      	ldr	r3, [r0, #24]
 8002cbe:	b90b      	cbnz	r3, 8002cc4 <_fflush_r+0x14>
 8002cc0:	f000 f860 	bl	8002d84 <__sinit>
 8002cc4:	4b0c      	ldr	r3, [pc, #48]	; (8002cf8 <_fflush_r+0x48>)
 8002cc6:	429c      	cmp	r4, r3
 8002cc8:	d109      	bne.n	8002cde <_fflush_r+0x2e>
 8002cca:	686c      	ldr	r4, [r5, #4]
 8002ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002cd0:	b17b      	cbz	r3, 8002cf2 <_fflush_r+0x42>
 8002cd2:	4621      	mov	r1, r4
 8002cd4:	4628      	mov	r0, r5
 8002cd6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002cda:	f7ff bf63 	b.w	8002ba4 <__sflush_r>
 8002cde:	4b07      	ldr	r3, [pc, #28]	; (8002cfc <_fflush_r+0x4c>)
 8002ce0:	429c      	cmp	r4, r3
 8002ce2:	d101      	bne.n	8002ce8 <_fflush_r+0x38>
 8002ce4:	68ac      	ldr	r4, [r5, #8]
 8002ce6:	e7f1      	b.n	8002ccc <_fflush_r+0x1c>
 8002ce8:	4b05      	ldr	r3, [pc, #20]	; (8002d00 <_fflush_r+0x50>)
 8002cea:	429c      	cmp	r4, r3
 8002cec:	bf08      	it	eq
 8002cee:	68ec      	ldreq	r4, [r5, #12]
 8002cf0:	e7ec      	b.n	8002ccc <_fflush_r+0x1c>
 8002cf2:	2000      	movs	r0, #0
 8002cf4:	bd38      	pop	{r3, r4, r5, pc}
 8002cf6:	bf00      	nop
 8002cf8:	08003b34 	.word	0x08003b34
 8002cfc:	08003b54 	.word	0x08003b54
 8002d00:	08003b14 	.word	0x08003b14

08002d04 <std>:
 8002d04:	2300      	movs	r3, #0
 8002d06:	b510      	push	{r4, lr}
 8002d08:	4604      	mov	r4, r0
 8002d0a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d0e:	6083      	str	r3, [r0, #8]
 8002d10:	8181      	strh	r1, [r0, #12]
 8002d12:	6643      	str	r3, [r0, #100]	; 0x64
 8002d14:	81c2      	strh	r2, [r0, #14]
 8002d16:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d1a:	6183      	str	r3, [r0, #24]
 8002d1c:	4619      	mov	r1, r3
 8002d1e:	2208      	movs	r2, #8
 8002d20:	305c      	adds	r0, #92	; 0x5c
 8002d22:	f7ff fdfb 	bl	800291c <memset>
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <std+0x38>)
 8002d28:	6263      	str	r3, [r4, #36]	; 0x24
 8002d2a:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <std+0x3c>)
 8002d2c:	62a3      	str	r3, [r4, #40]	; 0x28
 8002d2e:	4b05      	ldr	r3, [pc, #20]	; (8002d44 <std+0x40>)
 8002d30:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002d32:	4b05      	ldr	r3, [pc, #20]	; (8002d48 <std+0x44>)
 8002d34:	6224      	str	r4, [r4, #32]
 8002d36:	6323      	str	r3, [r4, #48]	; 0x30
 8002d38:	bd10      	pop	{r4, pc}
 8002d3a:	bf00      	nop
 8002d3c:	08003661 	.word	0x08003661
 8002d40:	08003683 	.word	0x08003683
 8002d44:	080036bb 	.word	0x080036bb
 8002d48:	080036df 	.word	0x080036df

08002d4c <_cleanup_r>:
 8002d4c:	4901      	ldr	r1, [pc, #4]	; (8002d54 <_cleanup_r+0x8>)
 8002d4e:	f000 b885 	b.w	8002e5c <_fwalk_reent>
 8002d52:	bf00      	nop
 8002d54:	08002cb1 	.word	0x08002cb1

08002d58 <__sfmoreglue>:
 8002d58:	b570      	push	{r4, r5, r6, lr}
 8002d5a:	1e4a      	subs	r2, r1, #1
 8002d5c:	2568      	movs	r5, #104	; 0x68
 8002d5e:	4355      	muls	r5, r2
 8002d60:	460e      	mov	r6, r1
 8002d62:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d66:	f000 f949 	bl	8002ffc <_malloc_r>
 8002d6a:	4604      	mov	r4, r0
 8002d6c:	b140      	cbz	r0, 8002d80 <__sfmoreglue+0x28>
 8002d6e:	2100      	movs	r1, #0
 8002d70:	e9c0 1600 	strd	r1, r6, [r0]
 8002d74:	300c      	adds	r0, #12
 8002d76:	60a0      	str	r0, [r4, #8]
 8002d78:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d7c:	f7ff fdce 	bl	800291c <memset>
 8002d80:	4620      	mov	r0, r4
 8002d82:	bd70      	pop	{r4, r5, r6, pc}

08002d84 <__sinit>:
 8002d84:	6983      	ldr	r3, [r0, #24]
 8002d86:	b510      	push	{r4, lr}
 8002d88:	4604      	mov	r4, r0
 8002d8a:	bb33      	cbnz	r3, 8002dda <__sinit+0x56>
 8002d8c:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002d90:	6503      	str	r3, [r0, #80]	; 0x50
 8002d92:	4b12      	ldr	r3, [pc, #72]	; (8002ddc <__sinit+0x58>)
 8002d94:	4a12      	ldr	r2, [pc, #72]	; (8002de0 <__sinit+0x5c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6282      	str	r2, [r0, #40]	; 0x28
 8002d9a:	4298      	cmp	r0, r3
 8002d9c:	bf04      	itt	eq
 8002d9e:	2301      	moveq	r3, #1
 8002da0:	6183      	streq	r3, [r0, #24]
 8002da2:	f000 f81f 	bl	8002de4 <__sfp>
 8002da6:	6060      	str	r0, [r4, #4]
 8002da8:	4620      	mov	r0, r4
 8002daa:	f000 f81b 	bl	8002de4 <__sfp>
 8002dae:	60a0      	str	r0, [r4, #8]
 8002db0:	4620      	mov	r0, r4
 8002db2:	f000 f817 	bl	8002de4 <__sfp>
 8002db6:	2200      	movs	r2, #0
 8002db8:	60e0      	str	r0, [r4, #12]
 8002dba:	2104      	movs	r1, #4
 8002dbc:	6860      	ldr	r0, [r4, #4]
 8002dbe:	f7ff ffa1 	bl	8002d04 <std>
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	2109      	movs	r1, #9
 8002dc6:	68a0      	ldr	r0, [r4, #8]
 8002dc8:	f7ff ff9c 	bl	8002d04 <std>
 8002dcc:	2202      	movs	r2, #2
 8002dce:	2112      	movs	r1, #18
 8002dd0:	68e0      	ldr	r0, [r4, #12]
 8002dd2:	f7ff ff97 	bl	8002d04 <std>
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	61a3      	str	r3, [r4, #24]
 8002dda:	bd10      	pop	{r4, pc}
 8002ddc:	08003b10 	.word	0x08003b10
 8002de0:	08002d4d 	.word	0x08002d4d

08002de4 <__sfp>:
 8002de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002de6:	4b1b      	ldr	r3, [pc, #108]	; (8002e54 <__sfp+0x70>)
 8002de8:	681e      	ldr	r6, [r3, #0]
 8002dea:	69b3      	ldr	r3, [r6, #24]
 8002dec:	4607      	mov	r7, r0
 8002dee:	b913      	cbnz	r3, 8002df6 <__sfp+0x12>
 8002df0:	4630      	mov	r0, r6
 8002df2:	f7ff ffc7 	bl	8002d84 <__sinit>
 8002df6:	3648      	adds	r6, #72	; 0x48
 8002df8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	d503      	bpl.n	8002e08 <__sfp+0x24>
 8002e00:	6833      	ldr	r3, [r6, #0]
 8002e02:	b133      	cbz	r3, 8002e12 <__sfp+0x2e>
 8002e04:	6836      	ldr	r6, [r6, #0]
 8002e06:	e7f7      	b.n	8002df8 <__sfp+0x14>
 8002e08:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002e0c:	b16d      	cbz	r5, 8002e2a <__sfp+0x46>
 8002e0e:	3468      	adds	r4, #104	; 0x68
 8002e10:	e7f4      	b.n	8002dfc <__sfp+0x18>
 8002e12:	2104      	movs	r1, #4
 8002e14:	4638      	mov	r0, r7
 8002e16:	f7ff ff9f 	bl	8002d58 <__sfmoreglue>
 8002e1a:	6030      	str	r0, [r6, #0]
 8002e1c:	2800      	cmp	r0, #0
 8002e1e:	d1f1      	bne.n	8002e04 <__sfp+0x20>
 8002e20:	230c      	movs	r3, #12
 8002e22:	603b      	str	r3, [r7, #0]
 8002e24:	4604      	mov	r4, r0
 8002e26:	4620      	mov	r0, r4
 8002e28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	; (8002e58 <__sfp+0x74>)
 8002e2c:	6665      	str	r5, [r4, #100]	; 0x64
 8002e2e:	e9c4 5500 	strd	r5, r5, [r4]
 8002e32:	60a5      	str	r5, [r4, #8]
 8002e34:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002e38:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002e3c:	2208      	movs	r2, #8
 8002e3e:	4629      	mov	r1, r5
 8002e40:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002e44:	f7ff fd6a 	bl	800291c <memset>
 8002e48:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002e4c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002e50:	e7e9      	b.n	8002e26 <__sfp+0x42>
 8002e52:	bf00      	nop
 8002e54:	08003b10 	.word	0x08003b10
 8002e58:	ffff0001 	.word	0xffff0001

08002e5c <_fwalk_reent>:
 8002e5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e60:	4680      	mov	r8, r0
 8002e62:	4689      	mov	r9, r1
 8002e64:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e68:	2600      	movs	r6, #0
 8002e6a:	b914      	cbnz	r4, 8002e72 <_fwalk_reent+0x16>
 8002e6c:	4630      	mov	r0, r6
 8002e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e72:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002e76:	3f01      	subs	r7, #1
 8002e78:	d501      	bpl.n	8002e7e <_fwalk_reent+0x22>
 8002e7a:	6824      	ldr	r4, [r4, #0]
 8002e7c:	e7f5      	b.n	8002e6a <_fwalk_reent+0xe>
 8002e7e:	89ab      	ldrh	r3, [r5, #12]
 8002e80:	2b01      	cmp	r3, #1
 8002e82:	d907      	bls.n	8002e94 <_fwalk_reent+0x38>
 8002e84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	d003      	beq.n	8002e94 <_fwalk_reent+0x38>
 8002e8c:	4629      	mov	r1, r5
 8002e8e:	4640      	mov	r0, r8
 8002e90:	47c8      	blx	r9
 8002e92:	4306      	orrs	r6, r0
 8002e94:	3568      	adds	r5, #104	; 0x68
 8002e96:	e7ee      	b.n	8002e76 <_fwalk_reent+0x1a>

08002e98 <__swhatbuf_r>:
 8002e98:	b570      	push	{r4, r5, r6, lr}
 8002e9a:	460e      	mov	r6, r1
 8002e9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ea0:	2900      	cmp	r1, #0
 8002ea2:	b096      	sub	sp, #88	; 0x58
 8002ea4:	4614      	mov	r4, r2
 8002ea6:	461d      	mov	r5, r3
 8002ea8:	da07      	bge.n	8002eba <__swhatbuf_r+0x22>
 8002eaa:	2300      	movs	r3, #0
 8002eac:	602b      	str	r3, [r5, #0]
 8002eae:	89b3      	ldrh	r3, [r6, #12]
 8002eb0:	061a      	lsls	r2, r3, #24
 8002eb2:	d410      	bmi.n	8002ed6 <__swhatbuf_r+0x3e>
 8002eb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002eb8:	e00e      	b.n	8002ed8 <__swhatbuf_r+0x40>
 8002eba:	466a      	mov	r2, sp
 8002ebc:	f000 fc36 	bl	800372c <_fstat_r>
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	dbf2      	blt.n	8002eaa <__swhatbuf_r+0x12>
 8002ec4:	9a01      	ldr	r2, [sp, #4]
 8002ec6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002eca:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002ece:	425a      	negs	r2, r3
 8002ed0:	415a      	adcs	r2, r3
 8002ed2:	602a      	str	r2, [r5, #0]
 8002ed4:	e7ee      	b.n	8002eb4 <__swhatbuf_r+0x1c>
 8002ed6:	2340      	movs	r3, #64	; 0x40
 8002ed8:	2000      	movs	r0, #0
 8002eda:	6023      	str	r3, [r4, #0]
 8002edc:	b016      	add	sp, #88	; 0x58
 8002ede:	bd70      	pop	{r4, r5, r6, pc}

08002ee0 <__smakebuf_r>:
 8002ee0:	898b      	ldrh	r3, [r1, #12]
 8002ee2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002ee4:	079d      	lsls	r5, r3, #30
 8002ee6:	4606      	mov	r6, r0
 8002ee8:	460c      	mov	r4, r1
 8002eea:	d507      	bpl.n	8002efc <__smakebuf_r+0x1c>
 8002eec:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002ef0:	6023      	str	r3, [r4, #0]
 8002ef2:	6123      	str	r3, [r4, #16]
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	6163      	str	r3, [r4, #20]
 8002ef8:	b002      	add	sp, #8
 8002efa:	bd70      	pop	{r4, r5, r6, pc}
 8002efc:	ab01      	add	r3, sp, #4
 8002efe:	466a      	mov	r2, sp
 8002f00:	f7ff ffca 	bl	8002e98 <__swhatbuf_r>
 8002f04:	9900      	ldr	r1, [sp, #0]
 8002f06:	4605      	mov	r5, r0
 8002f08:	4630      	mov	r0, r6
 8002f0a:	f000 f877 	bl	8002ffc <_malloc_r>
 8002f0e:	b948      	cbnz	r0, 8002f24 <__smakebuf_r+0x44>
 8002f10:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002f14:	059a      	lsls	r2, r3, #22
 8002f16:	d4ef      	bmi.n	8002ef8 <__smakebuf_r+0x18>
 8002f18:	f023 0303 	bic.w	r3, r3, #3
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	81a3      	strh	r3, [r4, #12]
 8002f22:	e7e3      	b.n	8002eec <__smakebuf_r+0xc>
 8002f24:	4b0d      	ldr	r3, [pc, #52]	; (8002f5c <__smakebuf_r+0x7c>)
 8002f26:	62b3      	str	r3, [r6, #40]	; 0x28
 8002f28:	89a3      	ldrh	r3, [r4, #12]
 8002f2a:	6020      	str	r0, [r4, #0]
 8002f2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f30:	81a3      	strh	r3, [r4, #12]
 8002f32:	9b00      	ldr	r3, [sp, #0]
 8002f34:	6163      	str	r3, [r4, #20]
 8002f36:	9b01      	ldr	r3, [sp, #4]
 8002f38:	6120      	str	r0, [r4, #16]
 8002f3a:	b15b      	cbz	r3, 8002f54 <__smakebuf_r+0x74>
 8002f3c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f40:	4630      	mov	r0, r6
 8002f42:	f000 fc05 	bl	8003750 <_isatty_r>
 8002f46:	b128      	cbz	r0, 8002f54 <__smakebuf_r+0x74>
 8002f48:	89a3      	ldrh	r3, [r4, #12]
 8002f4a:	f023 0303 	bic.w	r3, r3, #3
 8002f4e:	f043 0301 	orr.w	r3, r3, #1
 8002f52:	81a3      	strh	r3, [r4, #12]
 8002f54:	89a3      	ldrh	r3, [r4, #12]
 8002f56:	431d      	orrs	r5, r3
 8002f58:	81a5      	strh	r5, [r4, #12]
 8002f5a:	e7cd      	b.n	8002ef8 <__smakebuf_r+0x18>
 8002f5c:	08002d4d 	.word	0x08002d4d

08002f60 <_free_r>:
 8002f60:	b538      	push	{r3, r4, r5, lr}
 8002f62:	4605      	mov	r5, r0
 8002f64:	2900      	cmp	r1, #0
 8002f66:	d045      	beq.n	8002ff4 <_free_r+0x94>
 8002f68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f6c:	1f0c      	subs	r4, r1, #4
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	bfb8      	it	lt
 8002f72:	18e4      	addlt	r4, r4, r3
 8002f74:	f000 fc0e 	bl	8003794 <__malloc_lock>
 8002f78:	4a1f      	ldr	r2, [pc, #124]	; (8002ff8 <_free_r+0x98>)
 8002f7a:	6813      	ldr	r3, [r2, #0]
 8002f7c:	4610      	mov	r0, r2
 8002f7e:	b933      	cbnz	r3, 8002f8e <_free_r+0x2e>
 8002f80:	6063      	str	r3, [r4, #4]
 8002f82:	6014      	str	r4, [r2, #0]
 8002f84:	4628      	mov	r0, r5
 8002f86:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f8a:	f000 bc04 	b.w	8003796 <__malloc_unlock>
 8002f8e:	42a3      	cmp	r3, r4
 8002f90:	d90c      	bls.n	8002fac <_free_r+0x4c>
 8002f92:	6821      	ldr	r1, [r4, #0]
 8002f94:	1862      	adds	r2, r4, r1
 8002f96:	4293      	cmp	r3, r2
 8002f98:	bf04      	itt	eq
 8002f9a:	681a      	ldreq	r2, [r3, #0]
 8002f9c:	685b      	ldreq	r3, [r3, #4]
 8002f9e:	6063      	str	r3, [r4, #4]
 8002fa0:	bf04      	itt	eq
 8002fa2:	1852      	addeq	r2, r2, r1
 8002fa4:	6022      	streq	r2, [r4, #0]
 8002fa6:	6004      	str	r4, [r0, #0]
 8002fa8:	e7ec      	b.n	8002f84 <_free_r+0x24>
 8002faa:	4613      	mov	r3, r2
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	b10a      	cbz	r2, 8002fb4 <_free_r+0x54>
 8002fb0:	42a2      	cmp	r2, r4
 8002fb2:	d9fa      	bls.n	8002faa <_free_r+0x4a>
 8002fb4:	6819      	ldr	r1, [r3, #0]
 8002fb6:	1858      	adds	r0, r3, r1
 8002fb8:	42a0      	cmp	r0, r4
 8002fba:	d10b      	bne.n	8002fd4 <_free_r+0x74>
 8002fbc:	6820      	ldr	r0, [r4, #0]
 8002fbe:	4401      	add	r1, r0
 8002fc0:	1858      	adds	r0, r3, r1
 8002fc2:	4282      	cmp	r2, r0
 8002fc4:	6019      	str	r1, [r3, #0]
 8002fc6:	d1dd      	bne.n	8002f84 <_free_r+0x24>
 8002fc8:	6810      	ldr	r0, [r2, #0]
 8002fca:	6852      	ldr	r2, [r2, #4]
 8002fcc:	605a      	str	r2, [r3, #4]
 8002fce:	4401      	add	r1, r0
 8002fd0:	6019      	str	r1, [r3, #0]
 8002fd2:	e7d7      	b.n	8002f84 <_free_r+0x24>
 8002fd4:	d902      	bls.n	8002fdc <_free_r+0x7c>
 8002fd6:	230c      	movs	r3, #12
 8002fd8:	602b      	str	r3, [r5, #0]
 8002fda:	e7d3      	b.n	8002f84 <_free_r+0x24>
 8002fdc:	6820      	ldr	r0, [r4, #0]
 8002fde:	1821      	adds	r1, r4, r0
 8002fe0:	428a      	cmp	r2, r1
 8002fe2:	bf04      	itt	eq
 8002fe4:	6811      	ldreq	r1, [r2, #0]
 8002fe6:	6852      	ldreq	r2, [r2, #4]
 8002fe8:	6062      	str	r2, [r4, #4]
 8002fea:	bf04      	itt	eq
 8002fec:	1809      	addeq	r1, r1, r0
 8002fee:	6021      	streq	r1, [r4, #0]
 8002ff0:	605c      	str	r4, [r3, #4]
 8002ff2:	e7c7      	b.n	8002f84 <_free_r+0x24>
 8002ff4:	bd38      	pop	{r3, r4, r5, pc}
 8002ff6:	bf00      	nop
 8002ff8:	2000008c 	.word	0x2000008c

08002ffc <_malloc_r>:
 8002ffc:	b570      	push	{r4, r5, r6, lr}
 8002ffe:	1ccd      	adds	r5, r1, #3
 8003000:	f025 0503 	bic.w	r5, r5, #3
 8003004:	3508      	adds	r5, #8
 8003006:	2d0c      	cmp	r5, #12
 8003008:	bf38      	it	cc
 800300a:	250c      	movcc	r5, #12
 800300c:	2d00      	cmp	r5, #0
 800300e:	4606      	mov	r6, r0
 8003010:	db01      	blt.n	8003016 <_malloc_r+0x1a>
 8003012:	42a9      	cmp	r1, r5
 8003014:	d903      	bls.n	800301e <_malloc_r+0x22>
 8003016:	230c      	movs	r3, #12
 8003018:	6033      	str	r3, [r6, #0]
 800301a:	2000      	movs	r0, #0
 800301c:	bd70      	pop	{r4, r5, r6, pc}
 800301e:	f000 fbb9 	bl	8003794 <__malloc_lock>
 8003022:	4a21      	ldr	r2, [pc, #132]	; (80030a8 <_malloc_r+0xac>)
 8003024:	6814      	ldr	r4, [r2, #0]
 8003026:	4621      	mov	r1, r4
 8003028:	b991      	cbnz	r1, 8003050 <_malloc_r+0x54>
 800302a:	4c20      	ldr	r4, [pc, #128]	; (80030ac <_malloc_r+0xb0>)
 800302c:	6823      	ldr	r3, [r4, #0]
 800302e:	b91b      	cbnz	r3, 8003038 <_malloc_r+0x3c>
 8003030:	4630      	mov	r0, r6
 8003032:	f000 fb05 	bl	8003640 <_sbrk_r>
 8003036:	6020      	str	r0, [r4, #0]
 8003038:	4629      	mov	r1, r5
 800303a:	4630      	mov	r0, r6
 800303c:	f000 fb00 	bl	8003640 <_sbrk_r>
 8003040:	1c43      	adds	r3, r0, #1
 8003042:	d124      	bne.n	800308e <_malloc_r+0x92>
 8003044:	230c      	movs	r3, #12
 8003046:	6033      	str	r3, [r6, #0]
 8003048:	4630      	mov	r0, r6
 800304a:	f000 fba4 	bl	8003796 <__malloc_unlock>
 800304e:	e7e4      	b.n	800301a <_malloc_r+0x1e>
 8003050:	680b      	ldr	r3, [r1, #0]
 8003052:	1b5b      	subs	r3, r3, r5
 8003054:	d418      	bmi.n	8003088 <_malloc_r+0x8c>
 8003056:	2b0b      	cmp	r3, #11
 8003058:	d90f      	bls.n	800307a <_malloc_r+0x7e>
 800305a:	600b      	str	r3, [r1, #0]
 800305c:	50cd      	str	r5, [r1, r3]
 800305e:	18cc      	adds	r4, r1, r3
 8003060:	4630      	mov	r0, r6
 8003062:	f000 fb98 	bl	8003796 <__malloc_unlock>
 8003066:	f104 000b 	add.w	r0, r4, #11
 800306a:	1d23      	adds	r3, r4, #4
 800306c:	f020 0007 	bic.w	r0, r0, #7
 8003070:	1ac3      	subs	r3, r0, r3
 8003072:	d0d3      	beq.n	800301c <_malloc_r+0x20>
 8003074:	425a      	negs	r2, r3
 8003076:	50e2      	str	r2, [r4, r3]
 8003078:	e7d0      	b.n	800301c <_malloc_r+0x20>
 800307a:	428c      	cmp	r4, r1
 800307c:	684b      	ldr	r3, [r1, #4]
 800307e:	bf16      	itet	ne
 8003080:	6063      	strne	r3, [r4, #4]
 8003082:	6013      	streq	r3, [r2, #0]
 8003084:	460c      	movne	r4, r1
 8003086:	e7eb      	b.n	8003060 <_malloc_r+0x64>
 8003088:	460c      	mov	r4, r1
 800308a:	6849      	ldr	r1, [r1, #4]
 800308c:	e7cc      	b.n	8003028 <_malloc_r+0x2c>
 800308e:	1cc4      	adds	r4, r0, #3
 8003090:	f024 0403 	bic.w	r4, r4, #3
 8003094:	42a0      	cmp	r0, r4
 8003096:	d005      	beq.n	80030a4 <_malloc_r+0xa8>
 8003098:	1a21      	subs	r1, r4, r0
 800309a:	4630      	mov	r0, r6
 800309c:	f000 fad0 	bl	8003640 <_sbrk_r>
 80030a0:	3001      	adds	r0, #1
 80030a2:	d0cf      	beq.n	8003044 <_malloc_r+0x48>
 80030a4:	6025      	str	r5, [r4, #0]
 80030a6:	e7db      	b.n	8003060 <_malloc_r+0x64>
 80030a8:	2000008c 	.word	0x2000008c
 80030ac:	20000090 	.word	0x20000090

080030b0 <__sfputc_r>:
 80030b0:	6893      	ldr	r3, [r2, #8]
 80030b2:	3b01      	subs	r3, #1
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	b410      	push	{r4}
 80030b8:	6093      	str	r3, [r2, #8]
 80030ba:	da08      	bge.n	80030ce <__sfputc_r+0x1e>
 80030bc:	6994      	ldr	r4, [r2, #24]
 80030be:	42a3      	cmp	r3, r4
 80030c0:	db01      	blt.n	80030c6 <__sfputc_r+0x16>
 80030c2:	290a      	cmp	r1, #10
 80030c4:	d103      	bne.n	80030ce <__sfputc_r+0x1e>
 80030c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030ca:	f7ff bcab 	b.w	8002a24 <__swbuf_r>
 80030ce:	6813      	ldr	r3, [r2, #0]
 80030d0:	1c58      	adds	r0, r3, #1
 80030d2:	6010      	str	r0, [r2, #0]
 80030d4:	7019      	strb	r1, [r3, #0]
 80030d6:	4608      	mov	r0, r1
 80030d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030dc:	4770      	bx	lr

080030de <__sfputs_r>:
 80030de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030e0:	4606      	mov	r6, r0
 80030e2:	460f      	mov	r7, r1
 80030e4:	4614      	mov	r4, r2
 80030e6:	18d5      	adds	r5, r2, r3
 80030e8:	42ac      	cmp	r4, r5
 80030ea:	d101      	bne.n	80030f0 <__sfputs_r+0x12>
 80030ec:	2000      	movs	r0, #0
 80030ee:	e007      	b.n	8003100 <__sfputs_r+0x22>
 80030f0:	463a      	mov	r2, r7
 80030f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030f6:	4630      	mov	r0, r6
 80030f8:	f7ff ffda 	bl	80030b0 <__sfputc_r>
 80030fc:	1c43      	adds	r3, r0, #1
 80030fe:	d1f3      	bne.n	80030e8 <__sfputs_r+0xa>
 8003100:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003104 <_vfiprintf_r>:
 8003104:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003108:	460c      	mov	r4, r1
 800310a:	b09d      	sub	sp, #116	; 0x74
 800310c:	4617      	mov	r7, r2
 800310e:	461d      	mov	r5, r3
 8003110:	4606      	mov	r6, r0
 8003112:	b118      	cbz	r0, 800311c <_vfiprintf_r+0x18>
 8003114:	6983      	ldr	r3, [r0, #24]
 8003116:	b90b      	cbnz	r3, 800311c <_vfiprintf_r+0x18>
 8003118:	f7ff fe34 	bl	8002d84 <__sinit>
 800311c:	4b7c      	ldr	r3, [pc, #496]	; (8003310 <_vfiprintf_r+0x20c>)
 800311e:	429c      	cmp	r4, r3
 8003120:	d158      	bne.n	80031d4 <_vfiprintf_r+0xd0>
 8003122:	6874      	ldr	r4, [r6, #4]
 8003124:	89a3      	ldrh	r3, [r4, #12]
 8003126:	0718      	lsls	r0, r3, #28
 8003128:	d55e      	bpl.n	80031e8 <_vfiprintf_r+0xe4>
 800312a:	6923      	ldr	r3, [r4, #16]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d05b      	beq.n	80031e8 <_vfiprintf_r+0xe4>
 8003130:	2300      	movs	r3, #0
 8003132:	9309      	str	r3, [sp, #36]	; 0x24
 8003134:	2320      	movs	r3, #32
 8003136:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800313a:	2330      	movs	r3, #48	; 0x30
 800313c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003140:	9503      	str	r5, [sp, #12]
 8003142:	f04f 0b01 	mov.w	fp, #1
 8003146:	46b8      	mov	r8, r7
 8003148:	4645      	mov	r5, r8
 800314a:	f815 3b01 	ldrb.w	r3, [r5], #1
 800314e:	b10b      	cbz	r3, 8003154 <_vfiprintf_r+0x50>
 8003150:	2b25      	cmp	r3, #37	; 0x25
 8003152:	d154      	bne.n	80031fe <_vfiprintf_r+0xfa>
 8003154:	ebb8 0a07 	subs.w	sl, r8, r7
 8003158:	d00b      	beq.n	8003172 <_vfiprintf_r+0x6e>
 800315a:	4653      	mov	r3, sl
 800315c:	463a      	mov	r2, r7
 800315e:	4621      	mov	r1, r4
 8003160:	4630      	mov	r0, r6
 8003162:	f7ff ffbc 	bl	80030de <__sfputs_r>
 8003166:	3001      	adds	r0, #1
 8003168:	f000 80c2 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 800316c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800316e:	4453      	add	r3, sl
 8003170:	9309      	str	r3, [sp, #36]	; 0x24
 8003172:	f898 3000 	ldrb.w	r3, [r8]
 8003176:	2b00      	cmp	r3, #0
 8003178:	f000 80ba 	beq.w	80032f0 <_vfiprintf_r+0x1ec>
 800317c:	2300      	movs	r3, #0
 800317e:	f04f 32ff 	mov.w	r2, #4294967295
 8003182:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003186:	9304      	str	r3, [sp, #16]
 8003188:	9307      	str	r3, [sp, #28]
 800318a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800318e:	931a      	str	r3, [sp, #104]	; 0x68
 8003190:	46a8      	mov	r8, r5
 8003192:	2205      	movs	r2, #5
 8003194:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003198:	485e      	ldr	r0, [pc, #376]	; (8003314 <_vfiprintf_r+0x210>)
 800319a:	f7fd f819 	bl	80001d0 <memchr>
 800319e:	9b04      	ldr	r3, [sp, #16]
 80031a0:	bb78      	cbnz	r0, 8003202 <_vfiprintf_r+0xfe>
 80031a2:	06d9      	lsls	r1, r3, #27
 80031a4:	bf44      	itt	mi
 80031a6:	2220      	movmi	r2, #32
 80031a8:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031ac:	071a      	lsls	r2, r3, #28
 80031ae:	bf44      	itt	mi
 80031b0:	222b      	movmi	r2, #43	; 0x2b
 80031b2:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80031b6:	782a      	ldrb	r2, [r5, #0]
 80031b8:	2a2a      	cmp	r2, #42	; 0x2a
 80031ba:	d02a      	beq.n	8003212 <_vfiprintf_r+0x10e>
 80031bc:	9a07      	ldr	r2, [sp, #28]
 80031be:	46a8      	mov	r8, r5
 80031c0:	2000      	movs	r0, #0
 80031c2:	250a      	movs	r5, #10
 80031c4:	4641      	mov	r1, r8
 80031c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031ca:	3b30      	subs	r3, #48	; 0x30
 80031cc:	2b09      	cmp	r3, #9
 80031ce:	d969      	bls.n	80032a4 <_vfiprintf_r+0x1a0>
 80031d0:	b360      	cbz	r0, 800322c <_vfiprintf_r+0x128>
 80031d2:	e024      	b.n	800321e <_vfiprintf_r+0x11a>
 80031d4:	4b50      	ldr	r3, [pc, #320]	; (8003318 <_vfiprintf_r+0x214>)
 80031d6:	429c      	cmp	r4, r3
 80031d8:	d101      	bne.n	80031de <_vfiprintf_r+0xda>
 80031da:	68b4      	ldr	r4, [r6, #8]
 80031dc:	e7a2      	b.n	8003124 <_vfiprintf_r+0x20>
 80031de:	4b4f      	ldr	r3, [pc, #316]	; (800331c <_vfiprintf_r+0x218>)
 80031e0:	429c      	cmp	r4, r3
 80031e2:	bf08      	it	eq
 80031e4:	68f4      	ldreq	r4, [r6, #12]
 80031e6:	e79d      	b.n	8003124 <_vfiprintf_r+0x20>
 80031e8:	4621      	mov	r1, r4
 80031ea:	4630      	mov	r0, r6
 80031ec:	f7ff fc6c 	bl	8002ac8 <__swsetup_r>
 80031f0:	2800      	cmp	r0, #0
 80031f2:	d09d      	beq.n	8003130 <_vfiprintf_r+0x2c>
 80031f4:	f04f 30ff 	mov.w	r0, #4294967295
 80031f8:	b01d      	add	sp, #116	; 0x74
 80031fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031fe:	46a8      	mov	r8, r5
 8003200:	e7a2      	b.n	8003148 <_vfiprintf_r+0x44>
 8003202:	4a44      	ldr	r2, [pc, #272]	; (8003314 <_vfiprintf_r+0x210>)
 8003204:	1a80      	subs	r0, r0, r2
 8003206:	fa0b f000 	lsl.w	r0, fp, r0
 800320a:	4318      	orrs	r0, r3
 800320c:	9004      	str	r0, [sp, #16]
 800320e:	4645      	mov	r5, r8
 8003210:	e7be      	b.n	8003190 <_vfiprintf_r+0x8c>
 8003212:	9a03      	ldr	r2, [sp, #12]
 8003214:	1d11      	adds	r1, r2, #4
 8003216:	6812      	ldr	r2, [r2, #0]
 8003218:	9103      	str	r1, [sp, #12]
 800321a:	2a00      	cmp	r2, #0
 800321c:	db01      	blt.n	8003222 <_vfiprintf_r+0x11e>
 800321e:	9207      	str	r2, [sp, #28]
 8003220:	e004      	b.n	800322c <_vfiprintf_r+0x128>
 8003222:	4252      	negs	r2, r2
 8003224:	f043 0302 	orr.w	r3, r3, #2
 8003228:	9207      	str	r2, [sp, #28]
 800322a:	9304      	str	r3, [sp, #16]
 800322c:	f898 3000 	ldrb.w	r3, [r8]
 8003230:	2b2e      	cmp	r3, #46	; 0x2e
 8003232:	d10e      	bne.n	8003252 <_vfiprintf_r+0x14e>
 8003234:	f898 3001 	ldrb.w	r3, [r8, #1]
 8003238:	2b2a      	cmp	r3, #42	; 0x2a
 800323a:	d138      	bne.n	80032ae <_vfiprintf_r+0x1aa>
 800323c:	9b03      	ldr	r3, [sp, #12]
 800323e:	1d1a      	adds	r2, r3, #4
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	9203      	str	r2, [sp, #12]
 8003244:	2b00      	cmp	r3, #0
 8003246:	bfb8      	it	lt
 8003248:	f04f 33ff 	movlt.w	r3, #4294967295
 800324c:	f108 0802 	add.w	r8, r8, #2
 8003250:	9305      	str	r3, [sp, #20]
 8003252:	4d33      	ldr	r5, [pc, #204]	; (8003320 <_vfiprintf_r+0x21c>)
 8003254:	f898 1000 	ldrb.w	r1, [r8]
 8003258:	2203      	movs	r2, #3
 800325a:	4628      	mov	r0, r5
 800325c:	f7fc ffb8 	bl	80001d0 <memchr>
 8003260:	b140      	cbz	r0, 8003274 <_vfiprintf_r+0x170>
 8003262:	2340      	movs	r3, #64	; 0x40
 8003264:	1b40      	subs	r0, r0, r5
 8003266:	fa03 f000 	lsl.w	r0, r3, r0
 800326a:	9b04      	ldr	r3, [sp, #16]
 800326c:	4303      	orrs	r3, r0
 800326e:	f108 0801 	add.w	r8, r8, #1
 8003272:	9304      	str	r3, [sp, #16]
 8003274:	f898 1000 	ldrb.w	r1, [r8]
 8003278:	482a      	ldr	r0, [pc, #168]	; (8003324 <_vfiprintf_r+0x220>)
 800327a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800327e:	2206      	movs	r2, #6
 8003280:	f108 0701 	add.w	r7, r8, #1
 8003284:	f7fc ffa4 	bl	80001d0 <memchr>
 8003288:	2800      	cmp	r0, #0
 800328a:	d037      	beq.n	80032fc <_vfiprintf_r+0x1f8>
 800328c:	4b26      	ldr	r3, [pc, #152]	; (8003328 <_vfiprintf_r+0x224>)
 800328e:	bb1b      	cbnz	r3, 80032d8 <_vfiprintf_r+0x1d4>
 8003290:	9b03      	ldr	r3, [sp, #12]
 8003292:	3307      	adds	r3, #7
 8003294:	f023 0307 	bic.w	r3, r3, #7
 8003298:	3308      	adds	r3, #8
 800329a:	9303      	str	r3, [sp, #12]
 800329c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800329e:	444b      	add	r3, r9
 80032a0:	9309      	str	r3, [sp, #36]	; 0x24
 80032a2:	e750      	b.n	8003146 <_vfiprintf_r+0x42>
 80032a4:	fb05 3202 	mla	r2, r5, r2, r3
 80032a8:	2001      	movs	r0, #1
 80032aa:	4688      	mov	r8, r1
 80032ac:	e78a      	b.n	80031c4 <_vfiprintf_r+0xc0>
 80032ae:	2300      	movs	r3, #0
 80032b0:	f108 0801 	add.w	r8, r8, #1
 80032b4:	9305      	str	r3, [sp, #20]
 80032b6:	4619      	mov	r1, r3
 80032b8:	250a      	movs	r5, #10
 80032ba:	4640      	mov	r0, r8
 80032bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80032c0:	3a30      	subs	r2, #48	; 0x30
 80032c2:	2a09      	cmp	r2, #9
 80032c4:	d903      	bls.n	80032ce <_vfiprintf_r+0x1ca>
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d0c3      	beq.n	8003252 <_vfiprintf_r+0x14e>
 80032ca:	9105      	str	r1, [sp, #20]
 80032cc:	e7c1      	b.n	8003252 <_vfiprintf_r+0x14e>
 80032ce:	fb05 2101 	mla	r1, r5, r1, r2
 80032d2:	2301      	movs	r3, #1
 80032d4:	4680      	mov	r8, r0
 80032d6:	e7f0      	b.n	80032ba <_vfiprintf_r+0x1b6>
 80032d8:	ab03      	add	r3, sp, #12
 80032da:	9300      	str	r3, [sp, #0]
 80032dc:	4622      	mov	r2, r4
 80032de:	4b13      	ldr	r3, [pc, #76]	; (800332c <_vfiprintf_r+0x228>)
 80032e0:	a904      	add	r1, sp, #16
 80032e2:	4630      	mov	r0, r6
 80032e4:	f3af 8000 	nop.w
 80032e8:	f1b0 3fff 	cmp.w	r0, #4294967295
 80032ec:	4681      	mov	r9, r0
 80032ee:	d1d5      	bne.n	800329c <_vfiprintf_r+0x198>
 80032f0:	89a3      	ldrh	r3, [r4, #12]
 80032f2:	065b      	lsls	r3, r3, #25
 80032f4:	f53f af7e 	bmi.w	80031f4 <_vfiprintf_r+0xf0>
 80032f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032fa:	e77d      	b.n	80031f8 <_vfiprintf_r+0xf4>
 80032fc:	ab03      	add	r3, sp, #12
 80032fe:	9300      	str	r3, [sp, #0]
 8003300:	4622      	mov	r2, r4
 8003302:	4b0a      	ldr	r3, [pc, #40]	; (800332c <_vfiprintf_r+0x228>)
 8003304:	a904      	add	r1, sp, #16
 8003306:	4630      	mov	r0, r6
 8003308:	f000 f888 	bl	800341c <_printf_i>
 800330c:	e7ec      	b.n	80032e8 <_vfiprintf_r+0x1e4>
 800330e:	bf00      	nop
 8003310:	08003b34 	.word	0x08003b34
 8003314:	08003b74 	.word	0x08003b74
 8003318:	08003b54 	.word	0x08003b54
 800331c:	08003b14 	.word	0x08003b14
 8003320:	08003b7a 	.word	0x08003b7a
 8003324:	08003b7e 	.word	0x08003b7e
 8003328:	00000000 	.word	0x00000000
 800332c:	080030df 	.word	0x080030df

08003330 <_printf_common>:
 8003330:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003334:	4691      	mov	r9, r2
 8003336:	461f      	mov	r7, r3
 8003338:	688a      	ldr	r2, [r1, #8]
 800333a:	690b      	ldr	r3, [r1, #16]
 800333c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003340:	4293      	cmp	r3, r2
 8003342:	bfb8      	it	lt
 8003344:	4613      	movlt	r3, r2
 8003346:	f8c9 3000 	str.w	r3, [r9]
 800334a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800334e:	4606      	mov	r6, r0
 8003350:	460c      	mov	r4, r1
 8003352:	b112      	cbz	r2, 800335a <_printf_common+0x2a>
 8003354:	3301      	adds	r3, #1
 8003356:	f8c9 3000 	str.w	r3, [r9]
 800335a:	6823      	ldr	r3, [r4, #0]
 800335c:	0699      	lsls	r1, r3, #26
 800335e:	bf42      	ittt	mi
 8003360:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003364:	3302      	addmi	r3, #2
 8003366:	f8c9 3000 	strmi.w	r3, [r9]
 800336a:	6825      	ldr	r5, [r4, #0]
 800336c:	f015 0506 	ands.w	r5, r5, #6
 8003370:	d107      	bne.n	8003382 <_printf_common+0x52>
 8003372:	f104 0a19 	add.w	sl, r4, #25
 8003376:	68e3      	ldr	r3, [r4, #12]
 8003378:	f8d9 2000 	ldr.w	r2, [r9]
 800337c:	1a9b      	subs	r3, r3, r2
 800337e:	42ab      	cmp	r3, r5
 8003380:	dc28      	bgt.n	80033d4 <_printf_common+0xa4>
 8003382:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003386:	6822      	ldr	r2, [r4, #0]
 8003388:	3300      	adds	r3, #0
 800338a:	bf18      	it	ne
 800338c:	2301      	movne	r3, #1
 800338e:	0692      	lsls	r2, r2, #26
 8003390:	d42d      	bmi.n	80033ee <_printf_common+0xbe>
 8003392:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003396:	4639      	mov	r1, r7
 8003398:	4630      	mov	r0, r6
 800339a:	47c0      	blx	r8
 800339c:	3001      	adds	r0, #1
 800339e:	d020      	beq.n	80033e2 <_printf_common+0xb2>
 80033a0:	6823      	ldr	r3, [r4, #0]
 80033a2:	68e5      	ldr	r5, [r4, #12]
 80033a4:	f8d9 2000 	ldr.w	r2, [r9]
 80033a8:	f003 0306 	and.w	r3, r3, #6
 80033ac:	2b04      	cmp	r3, #4
 80033ae:	bf08      	it	eq
 80033b0:	1aad      	subeq	r5, r5, r2
 80033b2:	68a3      	ldr	r3, [r4, #8]
 80033b4:	6922      	ldr	r2, [r4, #16]
 80033b6:	bf0c      	ite	eq
 80033b8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80033bc:	2500      	movne	r5, #0
 80033be:	4293      	cmp	r3, r2
 80033c0:	bfc4      	itt	gt
 80033c2:	1a9b      	subgt	r3, r3, r2
 80033c4:	18ed      	addgt	r5, r5, r3
 80033c6:	f04f 0900 	mov.w	r9, #0
 80033ca:	341a      	adds	r4, #26
 80033cc:	454d      	cmp	r5, r9
 80033ce:	d11a      	bne.n	8003406 <_printf_common+0xd6>
 80033d0:	2000      	movs	r0, #0
 80033d2:	e008      	b.n	80033e6 <_printf_common+0xb6>
 80033d4:	2301      	movs	r3, #1
 80033d6:	4652      	mov	r2, sl
 80033d8:	4639      	mov	r1, r7
 80033da:	4630      	mov	r0, r6
 80033dc:	47c0      	blx	r8
 80033de:	3001      	adds	r0, #1
 80033e0:	d103      	bne.n	80033ea <_printf_common+0xba>
 80033e2:	f04f 30ff 	mov.w	r0, #4294967295
 80033e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033ea:	3501      	adds	r5, #1
 80033ec:	e7c3      	b.n	8003376 <_printf_common+0x46>
 80033ee:	18e1      	adds	r1, r4, r3
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	2030      	movs	r0, #48	; 0x30
 80033f4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033f8:	4422      	add	r2, r4
 80033fa:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033fe:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003402:	3302      	adds	r3, #2
 8003404:	e7c5      	b.n	8003392 <_printf_common+0x62>
 8003406:	2301      	movs	r3, #1
 8003408:	4622      	mov	r2, r4
 800340a:	4639      	mov	r1, r7
 800340c:	4630      	mov	r0, r6
 800340e:	47c0      	blx	r8
 8003410:	3001      	adds	r0, #1
 8003412:	d0e6      	beq.n	80033e2 <_printf_common+0xb2>
 8003414:	f109 0901 	add.w	r9, r9, #1
 8003418:	e7d8      	b.n	80033cc <_printf_common+0x9c>
	...

0800341c <_printf_i>:
 800341c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003420:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8003424:	460c      	mov	r4, r1
 8003426:	7e09      	ldrb	r1, [r1, #24]
 8003428:	b085      	sub	sp, #20
 800342a:	296e      	cmp	r1, #110	; 0x6e
 800342c:	4617      	mov	r7, r2
 800342e:	4606      	mov	r6, r0
 8003430:	4698      	mov	r8, r3
 8003432:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003434:	f000 80b3 	beq.w	800359e <_printf_i+0x182>
 8003438:	d822      	bhi.n	8003480 <_printf_i+0x64>
 800343a:	2963      	cmp	r1, #99	; 0x63
 800343c:	d036      	beq.n	80034ac <_printf_i+0x90>
 800343e:	d80a      	bhi.n	8003456 <_printf_i+0x3a>
 8003440:	2900      	cmp	r1, #0
 8003442:	f000 80b9 	beq.w	80035b8 <_printf_i+0x19c>
 8003446:	2958      	cmp	r1, #88	; 0x58
 8003448:	f000 8083 	beq.w	8003552 <_printf_i+0x136>
 800344c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003450:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003454:	e032      	b.n	80034bc <_printf_i+0xa0>
 8003456:	2964      	cmp	r1, #100	; 0x64
 8003458:	d001      	beq.n	800345e <_printf_i+0x42>
 800345a:	2969      	cmp	r1, #105	; 0x69
 800345c:	d1f6      	bne.n	800344c <_printf_i+0x30>
 800345e:	6820      	ldr	r0, [r4, #0]
 8003460:	6813      	ldr	r3, [r2, #0]
 8003462:	0605      	lsls	r5, r0, #24
 8003464:	f103 0104 	add.w	r1, r3, #4
 8003468:	d52a      	bpl.n	80034c0 <_printf_i+0xa4>
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	6011      	str	r1, [r2, #0]
 800346e:	2b00      	cmp	r3, #0
 8003470:	da03      	bge.n	800347a <_printf_i+0x5e>
 8003472:	222d      	movs	r2, #45	; 0x2d
 8003474:	425b      	negs	r3, r3
 8003476:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800347a:	486f      	ldr	r0, [pc, #444]	; (8003638 <_printf_i+0x21c>)
 800347c:	220a      	movs	r2, #10
 800347e:	e039      	b.n	80034f4 <_printf_i+0xd8>
 8003480:	2973      	cmp	r1, #115	; 0x73
 8003482:	f000 809d 	beq.w	80035c0 <_printf_i+0x1a4>
 8003486:	d808      	bhi.n	800349a <_printf_i+0x7e>
 8003488:	296f      	cmp	r1, #111	; 0x6f
 800348a:	d020      	beq.n	80034ce <_printf_i+0xb2>
 800348c:	2970      	cmp	r1, #112	; 0x70
 800348e:	d1dd      	bne.n	800344c <_printf_i+0x30>
 8003490:	6823      	ldr	r3, [r4, #0]
 8003492:	f043 0320 	orr.w	r3, r3, #32
 8003496:	6023      	str	r3, [r4, #0]
 8003498:	e003      	b.n	80034a2 <_printf_i+0x86>
 800349a:	2975      	cmp	r1, #117	; 0x75
 800349c:	d017      	beq.n	80034ce <_printf_i+0xb2>
 800349e:	2978      	cmp	r1, #120	; 0x78
 80034a0:	d1d4      	bne.n	800344c <_printf_i+0x30>
 80034a2:	2378      	movs	r3, #120	; 0x78
 80034a4:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80034a8:	4864      	ldr	r0, [pc, #400]	; (800363c <_printf_i+0x220>)
 80034aa:	e055      	b.n	8003558 <_printf_i+0x13c>
 80034ac:	6813      	ldr	r3, [r2, #0]
 80034ae:	1d19      	adds	r1, r3, #4
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6011      	str	r1, [r2, #0]
 80034b4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80034b8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80034bc:	2301      	movs	r3, #1
 80034be:	e08c      	b.n	80035da <_printf_i+0x1be>
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	6011      	str	r1, [r2, #0]
 80034c4:	f010 0f40 	tst.w	r0, #64	; 0x40
 80034c8:	bf18      	it	ne
 80034ca:	b21b      	sxthne	r3, r3
 80034cc:	e7cf      	b.n	800346e <_printf_i+0x52>
 80034ce:	6813      	ldr	r3, [r2, #0]
 80034d0:	6825      	ldr	r5, [r4, #0]
 80034d2:	1d18      	adds	r0, r3, #4
 80034d4:	6010      	str	r0, [r2, #0]
 80034d6:	0628      	lsls	r0, r5, #24
 80034d8:	d501      	bpl.n	80034de <_printf_i+0xc2>
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	e002      	b.n	80034e4 <_printf_i+0xc8>
 80034de:	0668      	lsls	r0, r5, #25
 80034e0:	d5fb      	bpl.n	80034da <_printf_i+0xbe>
 80034e2:	881b      	ldrh	r3, [r3, #0]
 80034e4:	4854      	ldr	r0, [pc, #336]	; (8003638 <_printf_i+0x21c>)
 80034e6:	296f      	cmp	r1, #111	; 0x6f
 80034e8:	bf14      	ite	ne
 80034ea:	220a      	movne	r2, #10
 80034ec:	2208      	moveq	r2, #8
 80034ee:	2100      	movs	r1, #0
 80034f0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80034f4:	6865      	ldr	r5, [r4, #4]
 80034f6:	60a5      	str	r5, [r4, #8]
 80034f8:	2d00      	cmp	r5, #0
 80034fa:	f2c0 8095 	blt.w	8003628 <_printf_i+0x20c>
 80034fe:	6821      	ldr	r1, [r4, #0]
 8003500:	f021 0104 	bic.w	r1, r1, #4
 8003504:	6021      	str	r1, [r4, #0]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d13d      	bne.n	8003586 <_printf_i+0x16a>
 800350a:	2d00      	cmp	r5, #0
 800350c:	f040 808e 	bne.w	800362c <_printf_i+0x210>
 8003510:	4665      	mov	r5, ip
 8003512:	2a08      	cmp	r2, #8
 8003514:	d10b      	bne.n	800352e <_printf_i+0x112>
 8003516:	6823      	ldr	r3, [r4, #0]
 8003518:	07db      	lsls	r3, r3, #31
 800351a:	d508      	bpl.n	800352e <_printf_i+0x112>
 800351c:	6923      	ldr	r3, [r4, #16]
 800351e:	6862      	ldr	r2, [r4, #4]
 8003520:	429a      	cmp	r2, r3
 8003522:	bfde      	ittt	le
 8003524:	2330      	movle	r3, #48	; 0x30
 8003526:	f805 3c01 	strble.w	r3, [r5, #-1]
 800352a:	f105 35ff 	addle.w	r5, r5, #4294967295
 800352e:	ebac 0305 	sub.w	r3, ip, r5
 8003532:	6123      	str	r3, [r4, #16]
 8003534:	f8cd 8000 	str.w	r8, [sp]
 8003538:	463b      	mov	r3, r7
 800353a:	aa03      	add	r2, sp, #12
 800353c:	4621      	mov	r1, r4
 800353e:	4630      	mov	r0, r6
 8003540:	f7ff fef6 	bl	8003330 <_printf_common>
 8003544:	3001      	adds	r0, #1
 8003546:	d14d      	bne.n	80035e4 <_printf_i+0x1c8>
 8003548:	f04f 30ff 	mov.w	r0, #4294967295
 800354c:	b005      	add	sp, #20
 800354e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003552:	4839      	ldr	r0, [pc, #228]	; (8003638 <_printf_i+0x21c>)
 8003554:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003558:	6813      	ldr	r3, [r2, #0]
 800355a:	6821      	ldr	r1, [r4, #0]
 800355c:	1d1d      	adds	r5, r3, #4
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	6015      	str	r5, [r2, #0]
 8003562:	060a      	lsls	r2, r1, #24
 8003564:	d50b      	bpl.n	800357e <_printf_i+0x162>
 8003566:	07ca      	lsls	r2, r1, #31
 8003568:	bf44      	itt	mi
 800356a:	f041 0120 	orrmi.w	r1, r1, #32
 800356e:	6021      	strmi	r1, [r4, #0]
 8003570:	b91b      	cbnz	r3, 800357a <_printf_i+0x15e>
 8003572:	6822      	ldr	r2, [r4, #0]
 8003574:	f022 0220 	bic.w	r2, r2, #32
 8003578:	6022      	str	r2, [r4, #0]
 800357a:	2210      	movs	r2, #16
 800357c:	e7b7      	b.n	80034ee <_printf_i+0xd2>
 800357e:	064d      	lsls	r5, r1, #25
 8003580:	bf48      	it	mi
 8003582:	b29b      	uxthmi	r3, r3
 8003584:	e7ef      	b.n	8003566 <_printf_i+0x14a>
 8003586:	4665      	mov	r5, ip
 8003588:	fbb3 f1f2 	udiv	r1, r3, r2
 800358c:	fb02 3311 	mls	r3, r2, r1, r3
 8003590:	5cc3      	ldrb	r3, [r0, r3]
 8003592:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003596:	460b      	mov	r3, r1
 8003598:	2900      	cmp	r1, #0
 800359a:	d1f5      	bne.n	8003588 <_printf_i+0x16c>
 800359c:	e7b9      	b.n	8003512 <_printf_i+0xf6>
 800359e:	6813      	ldr	r3, [r2, #0]
 80035a0:	6825      	ldr	r5, [r4, #0]
 80035a2:	6961      	ldr	r1, [r4, #20]
 80035a4:	1d18      	adds	r0, r3, #4
 80035a6:	6010      	str	r0, [r2, #0]
 80035a8:	0628      	lsls	r0, r5, #24
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	d501      	bpl.n	80035b2 <_printf_i+0x196>
 80035ae:	6019      	str	r1, [r3, #0]
 80035b0:	e002      	b.n	80035b8 <_printf_i+0x19c>
 80035b2:	066a      	lsls	r2, r5, #25
 80035b4:	d5fb      	bpl.n	80035ae <_printf_i+0x192>
 80035b6:	8019      	strh	r1, [r3, #0]
 80035b8:	2300      	movs	r3, #0
 80035ba:	6123      	str	r3, [r4, #16]
 80035bc:	4665      	mov	r5, ip
 80035be:	e7b9      	b.n	8003534 <_printf_i+0x118>
 80035c0:	6813      	ldr	r3, [r2, #0]
 80035c2:	1d19      	adds	r1, r3, #4
 80035c4:	6011      	str	r1, [r2, #0]
 80035c6:	681d      	ldr	r5, [r3, #0]
 80035c8:	6862      	ldr	r2, [r4, #4]
 80035ca:	2100      	movs	r1, #0
 80035cc:	4628      	mov	r0, r5
 80035ce:	f7fc fdff 	bl	80001d0 <memchr>
 80035d2:	b108      	cbz	r0, 80035d8 <_printf_i+0x1bc>
 80035d4:	1b40      	subs	r0, r0, r5
 80035d6:	6060      	str	r0, [r4, #4]
 80035d8:	6863      	ldr	r3, [r4, #4]
 80035da:	6123      	str	r3, [r4, #16]
 80035dc:	2300      	movs	r3, #0
 80035de:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80035e2:	e7a7      	b.n	8003534 <_printf_i+0x118>
 80035e4:	6923      	ldr	r3, [r4, #16]
 80035e6:	462a      	mov	r2, r5
 80035e8:	4639      	mov	r1, r7
 80035ea:	4630      	mov	r0, r6
 80035ec:	47c0      	blx	r8
 80035ee:	3001      	adds	r0, #1
 80035f0:	d0aa      	beq.n	8003548 <_printf_i+0x12c>
 80035f2:	6823      	ldr	r3, [r4, #0]
 80035f4:	079b      	lsls	r3, r3, #30
 80035f6:	d413      	bmi.n	8003620 <_printf_i+0x204>
 80035f8:	68e0      	ldr	r0, [r4, #12]
 80035fa:	9b03      	ldr	r3, [sp, #12]
 80035fc:	4298      	cmp	r0, r3
 80035fe:	bfb8      	it	lt
 8003600:	4618      	movlt	r0, r3
 8003602:	e7a3      	b.n	800354c <_printf_i+0x130>
 8003604:	2301      	movs	r3, #1
 8003606:	464a      	mov	r2, r9
 8003608:	4639      	mov	r1, r7
 800360a:	4630      	mov	r0, r6
 800360c:	47c0      	blx	r8
 800360e:	3001      	adds	r0, #1
 8003610:	d09a      	beq.n	8003548 <_printf_i+0x12c>
 8003612:	3501      	adds	r5, #1
 8003614:	68e3      	ldr	r3, [r4, #12]
 8003616:	9a03      	ldr	r2, [sp, #12]
 8003618:	1a9b      	subs	r3, r3, r2
 800361a:	42ab      	cmp	r3, r5
 800361c:	dcf2      	bgt.n	8003604 <_printf_i+0x1e8>
 800361e:	e7eb      	b.n	80035f8 <_printf_i+0x1dc>
 8003620:	2500      	movs	r5, #0
 8003622:	f104 0919 	add.w	r9, r4, #25
 8003626:	e7f5      	b.n	8003614 <_printf_i+0x1f8>
 8003628:	2b00      	cmp	r3, #0
 800362a:	d1ac      	bne.n	8003586 <_printf_i+0x16a>
 800362c:	7803      	ldrb	r3, [r0, #0]
 800362e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003632:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003636:	e76c      	b.n	8003512 <_printf_i+0xf6>
 8003638:	08003b85 	.word	0x08003b85
 800363c:	08003b96 	.word	0x08003b96

08003640 <_sbrk_r>:
 8003640:	b538      	push	{r3, r4, r5, lr}
 8003642:	4c06      	ldr	r4, [pc, #24]	; (800365c <_sbrk_r+0x1c>)
 8003644:	2300      	movs	r3, #0
 8003646:	4605      	mov	r5, r0
 8003648:	4608      	mov	r0, r1
 800364a:	6023      	str	r3, [r4, #0]
 800364c:	f7fd fce6 	bl	800101c <_sbrk>
 8003650:	1c43      	adds	r3, r0, #1
 8003652:	d102      	bne.n	800365a <_sbrk_r+0x1a>
 8003654:	6823      	ldr	r3, [r4, #0]
 8003656:	b103      	cbz	r3, 800365a <_sbrk_r+0x1a>
 8003658:	602b      	str	r3, [r5, #0]
 800365a:	bd38      	pop	{r3, r4, r5, pc}
 800365c:	20000094 	.word	0x20000094

08003660 <__sread>:
 8003660:	b510      	push	{r4, lr}
 8003662:	460c      	mov	r4, r1
 8003664:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003668:	f000 f896 	bl	8003798 <_read_r>
 800366c:	2800      	cmp	r0, #0
 800366e:	bfab      	itete	ge
 8003670:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8003672:	89a3      	ldrhlt	r3, [r4, #12]
 8003674:	181b      	addge	r3, r3, r0
 8003676:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800367a:	bfac      	ite	ge
 800367c:	6563      	strge	r3, [r4, #84]	; 0x54
 800367e:	81a3      	strhlt	r3, [r4, #12]
 8003680:	bd10      	pop	{r4, pc}

08003682 <__swrite>:
 8003682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003686:	461f      	mov	r7, r3
 8003688:	898b      	ldrh	r3, [r1, #12]
 800368a:	05db      	lsls	r3, r3, #23
 800368c:	4605      	mov	r5, r0
 800368e:	460c      	mov	r4, r1
 8003690:	4616      	mov	r6, r2
 8003692:	d505      	bpl.n	80036a0 <__swrite+0x1e>
 8003694:	2302      	movs	r3, #2
 8003696:	2200      	movs	r2, #0
 8003698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800369c:	f000 f868 	bl	8003770 <_lseek_r>
 80036a0:	89a3      	ldrh	r3, [r4, #12]
 80036a2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80036a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80036aa:	81a3      	strh	r3, [r4, #12]
 80036ac:	4632      	mov	r2, r6
 80036ae:	463b      	mov	r3, r7
 80036b0:	4628      	mov	r0, r5
 80036b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80036b6:	f000 b817 	b.w	80036e8 <_write_r>

080036ba <__sseek>:
 80036ba:	b510      	push	{r4, lr}
 80036bc:	460c      	mov	r4, r1
 80036be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036c2:	f000 f855 	bl	8003770 <_lseek_r>
 80036c6:	1c43      	adds	r3, r0, #1
 80036c8:	89a3      	ldrh	r3, [r4, #12]
 80036ca:	bf15      	itete	ne
 80036cc:	6560      	strne	r0, [r4, #84]	; 0x54
 80036ce:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80036d2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80036d6:	81a3      	strheq	r3, [r4, #12]
 80036d8:	bf18      	it	ne
 80036da:	81a3      	strhne	r3, [r4, #12]
 80036dc:	bd10      	pop	{r4, pc}

080036de <__sclose>:
 80036de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80036e2:	f000 b813 	b.w	800370c <_close_r>
	...

080036e8 <_write_r>:
 80036e8:	b538      	push	{r3, r4, r5, lr}
 80036ea:	4c07      	ldr	r4, [pc, #28]	; (8003708 <_write_r+0x20>)
 80036ec:	4605      	mov	r5, r0
 80036ee:	4608      	mov	r0, r1
 80036f0:	4611      	mov	r1, r2
 80036f2:	2200      	movs	r2, #0
 80036f4:	6022      	str	r2, [r4, #0]
 80036f6:	461a      	mov	r2, r3
 80036f8:	f7fd fc40 	bl	8000f7c <_write>
 80036fc:	1c43      	adds	r3, r0, #1
 80036fe:	d102      	bne.n	8003706 <_write_r+0x1e>
 8003700:	6823      	ldr	r3, [r4, #0]
 8003702:	b103      	cbz	r3, 8003706 <_write_r+0x1e>
 8003704:	602b      	str	r3, [r5, #0]
 8003706:	bd38      	pop	{r3, r4, r5, pc}
 8003708:	20000094 	.word	0x20000094

0800370c <_close_r>:
 800370c:	b538      	push	{r3, r4, r5, lr}
 800370e:	4c06      	ldr	r4, [pc, #24]	; (8003728 <_close_r+0x1c>)
 8003710:	2300      	movs	r3, #0
 8003712:	4605      	mov	r5, r0
 8003714:	4608      	mov	r0, r1
 8003716:	6023      	str	r3, [r4, #0]
 8003718:	f7fd fc4c 	bl	8000fb4 <_close>
 800371c:	1c43      	adds	r3, r0, #1
 800371e:	d102      	bne.n	8003726 <_close_r+0x1a>
 8003720:	6823      	ldr	r3, [r4, #0]
 8003722:	b103      	cbz	r3, 8003726 <_close_r+0x1a>
 8003724:	602b      	str	r3, [r5, #0]
 8003726:	bd38      	pop	{r3, r4, r5, pc}
 8003728:	20000094 	.word	0x20000094

0800372c <_fstat_r>:
 800372c:	b538      	push	{r3, r4, r5, lr}
 800372e:	4c07      	ldr	r4, [pc, #28]	; (800374c <_fstat_r+0x20>)
 8003730:	2300      	movs	r3, #0
 8003732:	4605      	mov	r5, r0
 8003734:	4608      	mov	r0, r1
 8003736:	4611      	mov	r1, r2
 8003738:	6023      	str	r3, [r4, #0]
 800373a:	f7fd fc47 	bl	8000fcc <_fstat>
 800373e:	1c43      	adds	r3, r0, #1
 8003740:	d102      	bne.n	8003748 <_fstat_r+0x1c>
 8003742:	6823      	ldr	r3, [r4, #0]
 8003744:	b103      	cbz	r3, 8003748 <_fstat_r+0x1c>
 8003746:	602b      	str	r3, [r5, #0]
 8003748:	bd38      	pop	{r3, r4, r5, pc}
 800374a:	bf00      	nop
 800374c:	20000094 	.word	0x20000094

08003750 <_isatty_r>:
 8003750:	b538      	push	{r3, r4, r5, lr}
 8003752:	4c06      	ldr	r4, [pc, #24]	; (800376c <_isatty_r+0x1c>)
 8003754:	2300      	movs	r3, #0
 8003756:	4605      	mov	r5, r0
 8003758:	4608      	mov	r0, r1
 800375a:	6023      	str	r3, [r4, #0]
 800375c:	f7fd fc46 	bl	8000fec <_isatty>
 8003760:	1c43      	adds	r3, r0, #1
 8003762:	d102      	bne.n	800376a <_isatty_r+0x1a>
 8003764:	6823      	ldr	r3, [r4, #0]
 8003766:	b103      	cbz	r3, 800376a <_isatty_r+0x1a>
 8003768:	602b      	str	r3, [r5, #0]
 800376a:	bd38      	pop	{r3, r4, r5, pc}
 800376c:	20000094 	.word	0x20000094

08003770 <_lseek_r>:
 8003770:	b538      	push	{r3, r4, r5, lr}
 8003772:	4c07      	ldr	r4, [pc, #28]	; (8003790 <_lseek_r+0x20>)
 8003774:	4605      	mov	r5, r0
 8003776:	4608      	mov	r0, r1
 8003778:	4611      	mov	r1, r2
 800377a:	2200      	movs	r2, #0
 800377c:	6022      	str	r2, [r4, #0]
 800377e:	461a      	mov	r2, r3
 8003780:	f7fd fc3f 	bl	8001002 <_lseek>
 8003784:	1c43      	adds	r3, r0, #1
 8003786:	d102      	bne.n	800378e <_lseek_r+0x1e>
 8003788:	6823      	ldr	r3, [r4, #0]
 800378a:	b103      	cbz	r3, 800378e <_lseek_r+0x1e>
 800378c:	602b      	str	r3, [r5, #0]
 800378e:	bd38      	pop	{r3, r4, r5, pc}
 8003790:	20000094 	.word	0x20000094

08003794 <__malloc_lock>:
 8003794:	4770      	bx	lr

08003796 <__malloc_unlock>:
 8003796:	4770      	bx	lr

08003798 <_read_r>:
 8003798:	b538      	push	{r3, r4, r5, lr}
 800379a:	4c07      	ldr	r4, [pc, #28]	; (80037b8 <_read_r+0x20>)
 800379c:	4605      	mov	r5, r0
 800379e:	4608      	mov	r0, r1
 80037a0:	4611      	mov	r1, r2
 80037a2:	2200      	movs	r2, #0
 80037a4:	6022      	str	r2, [r4, #0]
 80037a6:	461a      	mov	r2, r3
 80037a8:	f7fd fbcb 	bl	8000f42 <_read>
 80037ac:	1c43      	adds	r3, r0, #1
 80037ae:	d102      	bne.n	80037b6 <_read_r+0x1e>
 80037b0:	6823      	ldr	r3, [r4, #0]
 80037b2:	b103      	cbz	r3, 80037b6 <_read_r+0x1e>
 80037b4:	602b      	str	r3, [r5, #0]
 80037b6:	bd38      	pop	{r3, r4, r5, pc}
 80037b8:	20000094 	.word	0x20000094

080037bc <_init>:
 80037bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037be:	bf00      	nop
 80037c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037c2:	bc08      	pop	{r3}
 80037c4:	469e      	mov	lr, r3
 80037c6:	4770      	bx	lr

080037c8 <_fini>:
 80037c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80037ca:	bf00      	nop
 80037cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80037ce:	bc08      	pop	{r3}
 80037d0:	469e      	mov	lr, r3
 80037d2:	4770      	bx	lr
