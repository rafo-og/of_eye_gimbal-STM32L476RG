
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035ec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c8  0800377c  0800377c  0001377c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003b44  08003b44  00020068  2**0
                  CONTENTS
  4 .ARM          00000000  08003b44  08003b44  00020068  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003b44  08003b44  00020068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003b44  08003b44  00013b44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003b48  08003b48  00013b48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000068  20000000  08003b4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000002c  20000068  08003bb4  00020068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000094  08003bb4  00020094  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d6a0  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000021a2  00000000  00000000  0002d738  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ad0  00000000  00000000  0002f8e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000009b8  00000000  00000000  000303b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00023d3a  00000000  00000000  00030d68  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008e73  00000000  00000000  00054aa2  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000ba932  00000000  00000000  0005d915  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00118247  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003228  00000000  00000000  001182c4  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08003764 	.word	0x08003764

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	08003764 	.word	0x08003764

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000270:	b480      	push	{r7}
 8000272:	b083      	sub	sp, #12
 8000274:	af00      	add	r7, sp, #0
 8000276:	4603      	mov	r3, r0
 8000278:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800027a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800027e:	2b00      	cmp	r3, #0
 8000280:	db0b      	blt.n	800029a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000282:	79fb      	ldrb	r3, [r7, #7]
 8000284:	f003 021f 	and.w	r2, r3, #31
 8000288:	4907      	ldr	r1, [pc, #28]	; (80002a8 <__NVIC_EnableIRQ+0x38>)
 800028a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800028e:	095b      	lsrs	r3, r3, #5
 8000290:	2001      	movs	r0, #1
 8000292:	fa00 f202 	lsl.w	r2, r0, r2
 8000296:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800029a:	bf00      	nop
 800029c:	370c      	adds	r7, #12
 800029e:	46bd      	mov	sp, r7
 80002a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002a4:	4770      	bx	lr
 80002a6:	bf00      	nop
 80002a8:	e000e100 	.word	0xe000e100

080002ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80002ac:	b480      	push	{r7}
 80002ae:	b083      	sub	sp, #12
 80002b0:	af00      	add	r7, sp, #0
 80002b2:	4603      	mov	r3, r0
 80002b4:	6039      	str	r1, [r7, #0]
 80002b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80002b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002bc:	2b00      	cmp	r3, #0
 80002be:	db0a      	blt.n	80002d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002c0:	683b      	ldr	r3, [r7, #0]
 80002c2:	b2da      	uxtb	r2, r3
 80002c4:	490c      	ldr	r1, [pc, #48]	; (80002f8 <__NVIC_SetPriority+0x4c>)
 80002c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80002ca:	0112      	lsls	r2, r2, #4
 80002cc:	b2d2      	uxtb	r2, r2
 80002ce:	440b      	add	r3, r1
 80002d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80002d4:	e00a      	b.n	80002ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80002d6:	683b      	ldr	r3, [r7, #0]
 80002d8:	b2da      	uxtb	r2, r3
 80002da:	4908      	ldr	r1, [pc, #32]	; (80002fc <__NVIC_SetPriority+0x50>)
 80002dc:	79fb      	ldrb	r3, [r7, #7]
 80002de:	f003 030f 	and.w	r3, r3, #15
 80002e2:	3b04      	subs	r3, #4
 80002e4:	0112      	lsls	r2, r2, #4
 80002e6:	b2d2      	uxtb	r2, r2
 80002e8:	440b      	add	r3, r1
 80002ea:	761a      	strb	r2, [r3, #24]
}
 80002ec:	bf00      	nop
 80002ee:	370c      	adds	r7, #12
 80002f0:	46bd      	mov	sp, r7
 80002f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f6:	4770      	bx	lr
 80002f8:	e000e100 	.word	0xe000e100
 80002fc:	e000ed00 	.word	0xe000ed00

08000300 <adns2610_init>:
void adns2610_configureSPI();
void adns2610_receiveByte(Device dev, uint8_t* value);
void adns2610_sendBytes(Device dev, uint8_t* value, uint8_t length);


void adns2610_init(void){
 8000300:	b580      	push	{r7, lr}
 8000302:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	adns2610_configureTIM();
 8000304:	f000 f828 	bl	8000358 <adns2610_configureTIM>

	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI();
 8000308:	f000 f810 	bl	800032c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(ADNS2610_RIGHT);
 800030c:	2000      	movs	r0, #0
 800030e:	f000 f85b 	bl	80003c8 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(ADNS2610_RIGHT);
 8000312:	2000      	movs	r0, #0
 8000314:	f000 f896 	bl	8000444 <adns2610_config>
}
 8000318:	bf00      	nop
 800031a:	bd80      	pop	{r7, pc}

0800031c <adns2610_processFSM>:
void adns2610_start(void){
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
}

void adns2610_processFSM(void){
 800031c:	b480      	push	{r7}
 800031e:	af00      	add	r7, sp, #0

}
 8000320:	bf00      	nop
 8000322:	46bd      	mov	sp, r7
 8000324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000328:	4770      	bx	lr
	...

0800032c <adns2610_configureSPI>:

void adns2610_configureSPI(){
 800032c:	b480      	push	{r7}
 800032e:	af00      	add	r7, sp, #0
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPI2->CR2, SPI_CR2_FRXTH);
 8000330:	4b08      	ldr	r3, [pc, #32]	; (8000354 <adns2610_configureSPI+0x28>)
 8000332:	685b      	ldr	r3, [r3, #4]
 8000334:	4a07      	ldr	r2, [pc, #28]	; (8000354 <adns2610_configureSPI+0x28>)
 8000336:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800033a:	6053      	str	r3, [r2, #4]
	// Enable SPI
	SET_BIT(SPI2->CR1, SPI_CR1_SPE);
 800033c:	4b05      	ldr	r3, [pc, #20]	; (8000354 <adns2610_configureSPI+0x28>)
 800033e:	681b      	ldr	r3, [r3, #0]
 8000340:	4a04      	ldr	r2, [pc, #16]	; (8000354 <adns2610_configureSPI+0x28>)
 8000342:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000346:	6013      	str	r3, [r2, #0]
}
 8000348:	bf00      	nop
 800034a:	46bd      	mov	sp, r7
 800034c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000350:	4770      	bx	lr
 8000352:	bf00      	nop
 8000354:	40003800 	.word	0x40003800

08000358 <adns2610_configureTIM>:

void adns2610_configureTIM(){
 8000358:	b580      	push	{r7, lr}
 800035a:	b082      	sub	sp, #8
 800035c:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 800035e:	4b19      	ldr	r3, [pc, #100]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000360:	681b      	ldr	r3, [r3, #0]
 8000362:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000364:	4b17      	ldr	r3, [pc, #92]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000366:	68db      	ldr	r3, [r3, #12]
 8000368:	4a16      	ldr	r2, [pc, #88]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800036a:	f043 0301 	orr.w	r3, r3, #1
 800036e:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 8000370:	687b      	ldr	r3, [r7, #4]
 8000372:	f003 0302 	and.w	r3, r3, #2
 8000376:	f043 0304 	orr.w	r3, r3, #4
 800037a:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 800037c:	4a11      	ldr	r2, [pc, #68]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800037e:	687b      	ldr	r3, [r7, #4]
 8000380:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_READ_TIME;
 8000382:	4b10      	ldr	r3, [pc, #64]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000384:	2296      	movs	r2, #150	; 0x96
 8000386:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 8000388:	4b0e      	ldr	r3, [pc, #56]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800038a:	695b      	ldr	r3, [r3, #20]
 800038c:	4a0d      	ldr	r2, [pc, #52]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800038e:	f043 0301 	orr.w	r3, r3, #1
 8000392:	6153      	str	r3, [r2, #20]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 8000394:	4b0b      	ldr	r3, [pc, #44]	; (80003c4 <adns2610_configureTIM+0x6c>)
 8000396:	68db      	ldr	r3, [r3, #12]
 8000398:	4a0a      	ldr	r2, [pc, #40]	; (80003c4 <adns2610_configureTIM+0x6c>)
 800039a:	f043 0301 	orr.w	r3, r3, #1
 800039e:	60d3      	str	r3, [r2, #12]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80003a0:	4b08      	ldr	r3, [pc, #32]	; (80003c4 <adns2610_configureTIM+0x6c>)
 80003a2:	691b      	ldr	r3, [r3, #16]
 80003a4:	4a07      	ldr	r2, [pc, #28]	; (80003c4 <adns2610_configureTIM+0x6c>)
 80003a6:	f023 0301 	bic.w	r3, r3, #1
 80003aa:	6113      	str	r3, [r2, #16]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 80003ac:	2100      	movs	r1, #0
 80003ae:	2019      	movs	r0, #25
 80003b0:	f7ff ff7c 	bl	80002ac <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80003b4:	2019      	movs	r0, #25
 80003b6:	f7ff ff5b 	bl	8000270 <__NVIC_EnableIRQ>
}
 80003ba:	bf00      	nop
 80003bc:	3708      	adds	r7, #8
 80003be:	46bd      	mov	sp, r7
 80003c0:	bd80      	pop	{r7, pc}
 80003c2:	bf00      	nop
 80003c4:	40012c00 	.word	0x40012c00

080003c8 <adns2610_resetCOM>:

void adns2610_resetCOM(Device dev){
 80003c8:	b580      	push	{r7, lr}
 80003ca:	b084      	sub	sp, #16
 80003cc:	af00      	add	r7, sp, #0
 80003ce:	4603      	mov	r3, r0
 80003d0:	71fb      	strb	r3, [r7, #7]
	SPI_TypeDef * SPIx;

	GET_SPI_PERIPH(dev, SPIx);
 80003d2:	79fb      	ldrb	r3, [r7, #7]
 80003d4:	2b00      	cmp	r3, #0
 80003d6:	d101      	bne.n	80003dc <adns2610_resetCOM+0x14>
 80003d8:	4b18      	ldr	r3, [pc, #96]	; (800043c <adns2610_resetCOM+0x74>)
 80003da:	e000      	b.n	80003de <adns2610_resetCOM+0x16>
 80003dc:	4b18      	ldr	r3, [pc, #96]	; (8000440 <adns2610_resetCOM+0x78>)
 80003de:	60fb      	str	r3, [r7, #12]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80003e0:	bf00      	nop
 80003e2:	68fb      	ldr	r3, [r7, #12]
 80003e4:	689b      	ldr	r3, [r3, #8]
 80003e6:	f003 0302 	and.w	r3, r3, #2
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d0f9      	beq.n	80003e2 <adns2610_resetCOM+0x1a>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 80003ee:	68fb      	ldr	r3, [r7, #12]
 80003f0:	330c      	adds	r3, #12
 80003f2:	2201      	movs	r2, #1
 80003f4:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80003f6:	bf00      	nop
 80003f8:	68fb      	ldr	r3, [r7, #12]
 80003fa:	689b      	ldr	r3, [r3, #8]
 80003fc:	f003 0301 	and.w	r3, r3, #1
 8000400:	2b00      	cmp	r3, #0
 8000402:	d0f9      	beq.n	80003f8 <adns2610_resetCOM+0x30>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000404:	68fb      	ldr	r3, [r7, #12]
 8000406:	330c      	adds	r3, #12
 8000408:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800040a:	bf00      	nop
 800040c:	68fb      	ldr	r3, [r7, #12]
 800040e:	689b      	ldr	r3, [r3, #8]
 8000410:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000414:	68fb      	ldr	r3, [r7, #12]
 8000416:	689b      	ldr	r3, [r3, #8]
 8000418:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800041c:	431a      	orrs	r2, r3
 800041e:	68fb      	ldr	r3, [r7, #12]
 8000420:	689b      	ldr	r3, [r3, #8]
 8000422:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000426:	4313      	orrs	r3, r2
 8000428:	2b00      	cmp	r3, #0
 800042a:	d1ef      	bne.n	800040c <adns2610_resetCOM+0x44>
	LL_mDelay(100);
 800042c:	2064      	movs	r0, #100	; 0x64
 800042e:	f002 f9e9 	bl	8002804 <LL_mDelay>
}
 8000432:	bf00      	nop
 8000434:	3710      	adds	r7, #16
 8000436:	46bd      	mov	sp, r7
 8000438:	bd80      	pop	{r7, pc}
 800043a:	bf00      	nop
 800043c:	40003800 	.word	0x40003800
 8000440:	40003c00 	.word	0x40003c00

08000444 <adns2610_config>:

void adns2610_config(Device dev){
 8000444:	b580      	push	{r7, lr}
 8000446:	b084      	sub	sp, #16
 8000448:	af00      	add	r7, sp, #0
 800044a:	4603      	mov	r3, r0
 800044c:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 800044e:	79fb      	ldrb	r3, [r7, #7]
 8000450:	2b00      	cmp	r3, #0
 8000452:	d101      	bne.n	8000458 <adns2610_config+0x14>
 8000454:	4b29      	ldr	r3, [pc, #164]	; (80004fc <adns2610_config+0xb8>)
 8000456:	e000      	b.n	800045a <adns2610_config+0x16>
 8000458:	4b29      	ldr	r3, [pc, #164]	; (8000500 <adns2610_config+0xbc>)
 800045a:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 800045c:	68f9      	ldr	r1, [r7, #12]
 800045e:	4829      	ldr	r0, [pc, #164]	; (8000504 <adns2610_config+0xc0>)
 8000460:	f002 fa38 	bl	80028d4 <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS_2610_CONFIG));
 8000464:	4928      	ldr	r1, [pc, #160]	; (8000508 <adns2610_config+0xc4>)
 8000466:	4829      	ldr	r0, [pc, #164]	; (800050c <adns2610_config+0xc8>)
 8000468:	f002 fa34 	bl	80028d4 <iprintf>
	adns2610_writeRegister(dev, ADNS_2610_CONFIG, CONFIG_C0);
 800046c:	79fb      	ldrb	r3, [r7, #7]
 800046e:	2201      	movs	r2, #1
 8000470:	2100      	movs	r1, #0
 8000472:	4618      	mov	r0, r3
 8000474:	f000 f8aa 	bl	80005cc <adns2610_writeRegister>

	printf("Checking %s has been written well... ", _(ADNS_2610_CONFIG));
 8000478:	4923      	ldr	r1, [pc, #140]	; (8000508 <adns2610_config+0xc4>)
 800047a:	4825      	ldr	r0, [pc, #148]	; (8000510 <adns2610_config+0xcc>)
 800047c:	f002 fa2a 	bl	80028d4 <iprintf>
	if(adns2610_readRegister(dev, ADNS_2610_CONFIG) == CONFIG_C0) printf("OK.\r\n");
 8000480:	79fb      	ldrb	r3, [r7, #7]
 8000482:	2100      	movs	r1, #0
 8000484:	4618      	mov	r0, r3
 8000486:	f000 f851 	bl	800052c <adns2610_readRegister>
 800048a:	4603      	mov	r3, r0
 800048c:	2b01      	cmp	r3, #1
 800048e:	d10f      	bne.n	80004b0 <adns2610_config+0x6c>
 8000490:	4820      	ldr	r0, [pc, #128]	; (8000514 <adns2610_config+0xd0>)
 8000492:	f002 fa93 	bl	80029bc <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking in %s if the sensor is awake... ", _(ADNS_2610_STATUS));
 8000496:	4920      	ldr	r1, [pc, #128]	; (8000518 <adns2610_config+0xd4>)
 8000498:	4820      	ldr	r0, [pc, #128]	; (800051c <adns2610_config+0xd8>)
 800049a:	f002 fa1b 	bl	80028d4 <iprintf>
	if(adns2610_readRegister(dev, ADNS_2610_STATUS) == STATUS_AWAKE) printf("OK.\r\n");
 800049e:	79fb      	ldrb	r3, [r7, #7]
 80004a0:	2101      	movs	r1, #1
 80004a2:	4618      	mov	r0, r3
 80004a4:	f000 f842 	bl	800052c <adns2610_readRegister>
 80004a8:	4603      	mov	r3, r0
 80004aa:	2b01      	cmp	r3, #1
 80004ac:	d116      	bne.n	80004dc <adns2610_config+0x98>
 80004ae:	e003      	b.n	80004b8 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 80004b0:	481b      	ldr	r0, [pc, #108]	; (8000520 <adns2610_config+0xdc>)
 80004b2:	f002 fa83 	bl	80029bc <puts>
 80004b6:	e7fe      	b.n	80004b6 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS_2610_STATUS) == STATUS_AWAKE) printf("OK.\r\n");
 80004b8:	4816      	ldr	r0, [pc, #88]	; (8000514 <adns2610_config+0xd0>)
 80004ba:	f002 fa7f 	bl	80029bc <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking in %s if the sensor responds well... ", _(ADNS_2610_INVERSE_ID));
 80004be:	4919      	ldr	r1, [pc, #100]	; (8000524 <adns2610_config+0xe0>)
 80004c0:	4819      	ldr	r0, [pc, #100]	; (8000528 <adns2610_config+0xe4>)
 80004c2:	f002 fa07 	bl	80028d4 <iprintf>
	if((adns2610_readRegister(dev, ADNS_2610_INVERSE_ID) & INV_PROD)  == INV_PROD) printf("OK.\r\n");
 80004c6:	79fb      	ldrb	r3, [r7, #7]
 80004c8:	2111      	movs	r1, #17
 80004ca:	4618      	mov	r0, r3
 80004cc:	f000 f82e 	bl	800052c <adns2610_readRegister>
 80004d0:	4603      	mov	r3, r0
 80004d2:	f003 030f 	and.w	r3, r3, #15
 80004d6:	2b0f      	cmp	r3, #15
 80004d8:	d108      	bne.n	80004ec <adns2610_config+0xa8>
 80004da:	e003      	b.n	80004e4 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 80004dc:	4810      	ldr	r0, [pc, #64]	; (8000520 <adns2610_config+0xdc>)
 80004de:	f002 fa6d 	bl	80029bc <puts>
 80004e2:	e7fe      	b.n	80004e2 <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS_2610_INVERSE_ID) & INV_PROD)  == INV_PROD) printf("OK.\r\n");
 80004e4:	480b      	ldr	r0, [pc, #44]	; (8000514 <adns2610_config+0xd0>)
 80004e6:	f002 fa69 	bl	80029bc <puts>
	else{ printf("ERROR.\r\n"); while(1);}
}
 80004ea:	e003      	b.n	80004f4 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 80004ec:	480c      	ldr	r0, [pc, #48]	; (8000520 <adns2610_config+0xdc>)
 80004ee:	f002 fa65 	bl	80029bc <puts>
 80004f2:	e7fe      	b.n	80004f2 <adns2610_config+0xae>
}
 80004f4:	3710      	adds	r7, #16
 80004f6:	46bd      	mov	sp, r7
 80004f8:	bd80      	pop	{r7, pc}
 80004fa:	bf00      	nop
 80004fc:	0800377c 	.word	0x0800377c
 8000500:	0800378c 	.word	0x0800378c
 8000504:	0800379c 	.word	0x0800379c
 8000508:	080037f8 	.word	0x080037f8
 800050c:	0800380c 	.word	0x0800380c
 8000510:	0800383c 	.word	0x0800383c
 8000514:	08003864 	.word	0x08003864
 8000518:	08003874 	.word	0x08003874
 800051c:	08003888 	.word	0x08003888
 8000520:	0800386c 	.word	0x0800386c
 8000524:	080038b4 	.word	0x080038b4
 8000528:	080038cc 	.word	0x080038cc

0800052c <adns2610_readRegister>:

uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	460a      	mov	r2, r1
 8000536:	71fb      	strb	r3, [r7, #7]
 8000538:	4613      	mov	r3, r2
 800053a:	71bb      	strb	r3, [r7, #6]
	uint8_t value;
	SPI_TypeDef * SPIx;

	GET_SPI_PERIPH(dev, SPIx);
 800053c:	79fb      	ldrb	r3, [r7, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d101      	bne.n	8000546 <adns2610_readRegister+0x1a>
 8000542:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <adns2610_readRegister+0x98>)
 8000544:	e000      	b.n	8000548 <adns2610_readRegister+0x1c>
 8000546:	4b20      	ldr	r3, [pc, #128]	; (80005c8 <adns2610_readRegister+0x9c>)
 8000548:	60fb      	str	r3, [r7, #12]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800054a:	bf00      	nop
 800054c:	68fb      	ldr	r3, [r7, #12]
 800054e:	689b      	ldr	r3, [r3, #8]
 8000550:	f003 0302 	and.w	r3, r3, #2
 8000554:	2b00      	cmp	r3, #0
 8000556:	d0f9      	beq.n	800054c <adns2610_readRegister+0x20>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8000558:	68fb      	ldr	r3, [r7, #12]
 800055a:	330c      	adds	r3, #12
 800055c:	79ba      	ldrb	r2, [r7, #6]
 800055e:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000560:	bf00      	nop
 8000562:	68fb      	ldr	r3, [r7, #12]
 8000564:	689b      	ldr	r3, [r3, #8]
 8000566:	f003 0301 	and.w	r3, r3, #1
 800056a:	2b00      	cmp	r3, #0
 800056c:	d0f9      	beq.n	8000562 <adns2610_readRegister+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	330c      	adds	r3, #12
 8000572:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8000574:	2001      	movs	r0, #1
 8000576:	f002 f945 	bl	8002804 <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800057a:	68fb      	ldr	r3, [r7, #12]
 800057c:	330c      	adds	r3, #12
 800057e:	2200      	movs	r2, #0
 8000580:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000582:	bf00      	nop
 8000584:	68fb      	ldr	r3, [r7, #12]
 8000586:	689b      	ldr	r3, [r3, #8]
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	2b00      	cmp	r3, #0
 800058e:	d0f9      	beq.n	8000584 <adns2610_readRegister+0x58>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000590:	68fb      	ldr	r3, [r7, #12]
 8000592:	330c      	adds	r3, #12
 8000594:	781b      	ldrb	r3, [r3, #0]
 8000596:	72fb      	strb	r3, [r7, #11]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000598:	bf00      	nop
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	689b      	ldr	r3, [r3, #8]
 800059e:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80005a2:	68fb      	ldr	r3, [r7, #12]
 80005a4:	689b      	ldr	r3, [r3, #8]
 80005a6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80005aa:	431a      	orrs	r2, r3
 80005ac:	68fb      	ldr	r3, [r7, #12]
 80005ae:	689b      	ldr	r3, [r3, #8]
 80005b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005b4:	4313      	orrs	r3, r2
 80005b6:	2b00      	cmp	r3, #0
 80005b8:	d1ef      	bne.n	800059a <adns2610_readRegister+0x6e>
	return value;
 80005ba:	7afb      	ldrb	r3, [r7, #11]
}
 80005bc:	4618      	mov	r0, r3
 80005be:	3710      	adds	r7, #16
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	40003800 	.word	0x40003800
 80005c8:	40003c00 	.word	0x40003c00

080005cc <adns2610_writeRegister>:

void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80005cc:	b480      	push	{r7}
 80005ce:	b085      	sub	sp, #20
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	4603      	mov	r3, r0
 80005d4:	71fb      	strb	r3, [r7, #7]
 80005d6:	460b      	mov	r3, r1
 80005d8:	71bb      	strb	r3, [r7, #6]
 80005da:	4613      	mov	r3, r2
 80005dc:	717b      	strb	r3, [r7, #5]

	SPI_TypeDef * SPIx;

	GET_SPI_PERIPH(dev, SPIx);
 80005de:	79fb      	ldrb	r3, [r7, #7]
 80005e0:	2b00      	cmp	r3, #0
 80005e2:	d101      	bne.n	80005e8 <adns2610_writeRegister+0x1c>
 80005e4:	4b20      	ldr	r3, [pc, #128]	; (8000668 <adns2610_writeRegister+0x9c>)
 80005e6:	e000      	b.n	80005ea <adns2610_writeRegister+0x1e>
 80005e8:	4b20      	ldr	r3, [pc, #128]	; (800066c <adns2610_writeRegister+0xa0>)
 80005ea:	60fb      	str	r3, [r7, #12]

	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	685b      	ldr	r3, [r3, #4]
 80005f0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80005f8:	bf00      	nop
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	689b      	ldr	r3, [r3, #8]
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	2b00      	cmp	r3, #0
 8000604:	d0f9      	beq.n	80005fa <adns2610_writeRegister+0x2e>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 8000606:	797b      	ldrb	r3, [r7, #5]
 8000608:	021b      	lsls	r3, r3, #8
 800060a:	461a      	mov	r2, r3
 800060c:	79bb      	ldrb	r3, [r7, #6]
 800060e:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000612:	b2db      	uxtb	r3, r3
 8000614:	431a      	orrs	r2, r3
 8000616:	68fb      	ldr	r3, [r7, #12]
 8000618:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800061a:	bf00      	nop
 800061c:	68fb      	ldr	r3, [r7, #12]
 800061e:	689b      	ldr	r3, [r3, #8]
 8000620:	f003 0301 	and.w	r3, r3, #1
 8000624:	2b00      	cmp	r3, #0
 8000626:	d0f9      	beq.n	800061c <adns2610_writeRegister+0x50>
	READ_REG(SPIx->DR);
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 800062c:	bf00      	nop
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	689b      	ldr	r3, [r3, #8]
 8000632:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 8000636:	68fb      	ldr	r3, [r7, #12]
 8000638:	689b      	ldr	r3, [r3, #8]
 800063a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800063e:	431a      	orrs	r2, r3
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	689b      	ldr	r3, [r3, #8]
 8000644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000648:	4313      	orrs	r3, r2
 800064a:	2b00      	cmp	r3, #0
 800064c:	d1ef      	bne.n	800062e <adns2610_writeRegister+0x62>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	685b      	ldr	r3, [r3, #4]
 8000652:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000656:	68fb      	ldr	r3, [r7, #12]
 8000658:	605a      	str	r2, [r3, #4]
}
 800065a:	bf00      	nop
 800065c:	3714      	adds	r7, #20
 800065e:	46bd      	mov	sp, r7
 8000660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000664:	4770      	bx	lr
 8000666:	bf00      	nop
 8000668:	40003800 	.word	0x40003800
 800066c:	40003c00 	.word	0x40003c00

08000670 <TIM1_UP_TIM16_IRQHandler>:
	#else

	#endif
}

void TIM1_UP_TIM16_IRQHandler(void){
 8000670:	b580      	push	{r7, lr}
 8000672:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8000674:	4b07      	ldr	r3, [pc, #28]	; (8000694 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000676:	691b      	ldr	r3, [r3, #16]
 8000678:	f003 0301 	and.w	r3, r3, #1
 800067c:	2b00      	cmp	r3, #0
 800067e:	d007      	beq.n	8000690 <TIM1_UP_TIM16_IRQHandler+0x20>
		// Process FSM
		adns2610_processFSM();
 8000680:	f7ff fe4c 	bl	800031c <adns2610_processFSM>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 8000684:	4b03      	ldr	r3, [pc, #12]	; (8000694 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8000686:	691b      	ldr	r3, [r3, #16]
 8000688:	4a02      	ldr	r2, [pc, #8]	; (8000694 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800068a:	f023 0301 	bic.w	r3, r3, #1
 800068e:	6113      	str	r3, [r2, #16]
	}
}
 8000690:	bf00      	nop
 8000692:	bd80      	pop	{r7, pc}
 8000694:	40012c00 	.word	0x40012c00

08000698 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000698:	b480      	push	{r7}
 800069a:	b085      	sub	sp, #20
 800069c:	af00      	add	r7, sp, #0
 800069e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 80006a0:	4b08      	ldr	r3, [pc, #32]	; (80006c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006a4:	4907      	ldr	r1, [pc, #28]	; (80006c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	4313      	orrs	r3, r2
 80006aa:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80006ac:	4b05      	ldr	r3, [pc, #20]	; (80006c4 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80006ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	4013      	ands	r3, r2
 80006b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80006b6:	68fb      	ldr	r3, [r7, #12]
}
 80006b8:	bf00      	nop
 80006ba:	3714      	adds	r7, #20
 80006bc:	46bd      	mov	sp, r7
 80006be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006c2:	4770      	bx	lr
 80006c4:	40021000 	.word	0x40021000

080006c8 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80006c8:	b480      	push	{r7}
 80006ca:	b087      	sub	sp, #28
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
 80006d0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80006d2:	4a17      	ldr	r2, [pc, #92]	; (8000730 <LL_SYSCFG_SetEXTISource+0x68>)
 80006d4:	683b      	ldr	r3, [r7, #0]
 80006d6:	b2db      	uxtb	r3, r3
 80006d8:	3302      	adds	r3, #2
 80006da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80006de:	683b      	ldr	r3, [r7, #0]
 80006e0:	0c1b      	lsrs	r3, r3, #16
 80006e2:	43db      	mvns	r3, r3
 80006e4:	ea02 0103 	and.w	r1, r2, r3
 80006e8:	683b      	ldr	r3, [r7, #0]
 80006ea:	0c1b      	lsrs	r3, r3, #16
 80006ec:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80006ee:	693b      	ldr	r3, [r7, #16]
 80006f0:	fa93 f3a3 	rbit	r3, r3
 80006f4:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000700:	2320      	movs	r3, #32
 8000702:	e003      	b.n	800070c <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 8000704:	697b      	ldr	r3, [r7, #20]
 8000706:	fab3 f383 	clz	r3, r3
 800070a:	b2db      	uxtb	r3, r3
 800070c:	461a      	mov	r2, r3
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	fa03 f202 	lsl.w	r2, r3, r2
 8000714:	4806      	ldr	r0, [pc, #24]	; (8000730 <LL_SYSCFG_SetEXTISource+0x68>)
 8000716:	683b      	ldr	r3, [r7, #0]
 8000718:	b2db      	uxtb	r3, r3
 800071a:	430a      	orrs	r2, r1
 800071c:	3302      	adds	r3, #2
 800071e:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000722:	bf00      	nop
 8000724:	371c      	adds	r7, #28
 8000726:	46bd      	mov	sp, r7
 8000728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800072c:	4770      	bx	lr
 800072e:	bf00      	nop
 8000730:	40010000 	.word	0x40010000

08000734 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8000734:	b480      	push	{r7}
 8000736:	b08b      	sub	sp, #44	; 0x2c
 8000738:	af00      	add	r7, sp, #0
 800073a:	60f8      	str	r0, [r7, #12]
 800073c:	60b9      	str	r1, [r7, #8]
 800073e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8000740:	68fb      	ldr	r3, [r7, #12]
 8000742:	681a      	ldr	r2, [r3, #0]
 8000744:	68bb      	ldr	r3, [r7, #8]
 8000746:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000748:	697b      	ldr	r3, [r7, #20]
 800074a:	fa93 f3a3 	rbit	r3, r3
 800074e:	613b      	str	r3, [r7, #16]
  return result;
 8000750:	693b      	ldr	r3, [r7, #16]
 8000752:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000754:	69bb      	ldr	r3, [r7, #24]
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800075a:	2320      	movs	r3, #32
 800075c:	e003      	b.n	8000766 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800075e:	69bb      	ldr	r3, [r7, #24]
 8000760:	fab3 f383 	clz	r3, r3
 8000764:	b2db      	uxtb	r3, r3
 8000766:	005b      	lsls	r3, r3, #1
 8000768:	2103      	movs	r1, #3
 800076a:	fa01 f303 	lsl.w	r3, r1, r3
 800076e:	43db      	mvns	r3, r3
 8000770:	401a      	ands	r2, r3
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000776:	6a3b      	ldr	r3, [r7, #32]
 8000778:	fa93 f3a3 	rbit	r3, r3
 800077c:	61fb      	str	r3, [r7, #28]
  return result;
 800077e:	69fb      	ldr	r3, [r7, #28]
 8000780:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000784:	2b00      	cmp	r3, #0
 8000786:	d101      	bne.n	800078c <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8000788:	2320      	movs	r3, #32
 800078a:	e003      	b.n	8000794 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 800078c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800078e:	fab3 f383 	clz	r3, r3
 8000792:	b2db      	uxtb	r3, r3
 8000794:	005b      	lsls	r3, r3, #1
 8000796:	6879      	ldr	r1, [r7, #4]
 8000798:	fa01 f303 	lsl.w	r3, r1, r3
 800079c:	431a      	orrs	r2, r3
 800079e:	68fb      	ldr	r3, [r7, #12]
 80007a0:	601a      	str	r2, [r3, #0]
}
 80007a2:	bf00      	nop
 80007a4:	372c      	adds	r7, #44	; 0x2c
 80007a6:	46bd      	mov	sp, r7
 80007a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ac:	4770      	bx	lr

080007ae <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80007ae:	b480      	push	{r7}
 80007b0:	b08b      	sub	sp, #44	; 0x2c
 80007b2:	af00      	add	r7, sp, #0
 80007b4:	60f8      	str	r0, [r7, #12]
 80007b6:	60b9      	str	r1, [r7, #8]
 80007b8:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	68da      	ldr	r2, [r3, #12]
 80007be:	68bb      	ldr	r3, [r7, #8]
 80007c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007c2:	697b      	ldr	r3, [r7, #20]
 80007c4:	fa93 f3a3 	rbit	r3, r3
 80007c8:	613b      	str	r3, [r7, #16]
  return result;
 80007ca:	693b      	ldr	r3, [r7, #16]
 80007cc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80007ce:	69bb      	ldr	r3, [r7, #24]
 80007d0:	2b00      	cmp	r3, #0
 80007d2:	d101      	bne.n	80007d8 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80007d4:	2320      	movs	r3, #32
 80007d6:	e003      	b.n	80007e0 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80007d8:	69bb      	ldr	r3, [r7, #24]
 80007da:	fab3 f383 	clz	r3, r3
 80007de:	b2db      	uxtb	r3, r3
 80007e0:	005b      	lsls	r3, r3, #1
 80007e2:	2103      	movs	r1, #3
 80007e4:	fa01 f303 	lsl.w	r3, r1, r3
 80007e8:	43db      	mvns	r3, r3
 80007ea:	401a      	ands	r2, r3
 80007ec:	68bb      	ldr	r3, [r7, #8]
 80007ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80007f0:	6a3b      	ldr	r3, [r7, #32]
 80007f2:	fa93 f3a3 	rbit	r3, r3
 80007f6:	61fb      	str	r3, [r7, #28]
  return result;
 80007f8:	69fb      	ldr	r3, [r7, #28]
 80007fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80007fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d101      	bne.n	8000806 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8000802:	2320      	movs	r3, #32
 8000804:	e003      	b.n	800080e <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8000806:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000808:	fab3 f383 	clz	r3, r3
 800080c:	b2db      	uxtb	r3, r3
 800080e:	005b      	lsls	r3, r3, #1
 8000810:	6879      	ldr	r1, [r7, #4]
 8000812:	fa01 f303 	lsl.w	r3, r1, r3
 8000816:	431a      	orrs	r2, r3
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	60da      	str	r2, [r3, #12]
}
 800081c:	bf00      	nop
 800081e:	372c      	adds	r7, #44	; 0x2c
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	683a      	ldr	r2, [r7, #0]
 8000836:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000838:	bf00      	nop
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	b08a      	sub	sp, #40	; 0x28
 8000848:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800084a:	f107 031c 	add.w	r3, r7, #28
 800084e:	2200      	movs	r2, #0
 8000850:	601a      	str	r2, [r3, #0]
 8000852:	605a      	str	r2, [r3, #4]
 8000854:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000856:	1d3b      	adds	r3, r7, #4
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
 800085e:	609a      	str	r2, [r3, #8]
 8000860:	60da      	str	r2, [r3, #12]
 8000862:	611a      	str	r2, [r3, #16]
 8000864:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000866:	2004      	movs	r0, #4
 8000868:	f7ff ff16 	bl	8000698 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 800086c:	2080      	movs	r0, #128	; 0x80
 800086e:	f7ff ff13 	bl	8000698 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8000872:	2001      	movs	r0, #1
 8000874:	f7ff ff10 	bl	8000698 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000878:	2002      	movs	r0, #2
 800087a:	f7ff ff0d 	bl	8000698 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 800087e:	2120      	movs	r1, #32
 8000880:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000884:	f7ff ffd0 	bl	8000828 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 8000888:	491b      	ldr	r1, [pc, #108]	; (80008f8 <MX_GPIO_Init+0xb4>)
 800088a:	2002      	movs	r0, #2
 800088c:	f7ff ff1c 	bl	80006c8 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8000890:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000894:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800089a:	2301      	movs	r3, #1
 800089c:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 80008a0:	2300      	movs	r3, #0
 80008a2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 80008a6:	2302      	movs	r3, #2
 80008a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80008ac:	f107 031c 	add.w	r3, r7, #28
 80008b0:	4618      	mov	r0, r3
 80008b2:	f000 fef1 	bl	8001698 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80008b6:	2200      	movs	r2, #0
 80008b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008bc:	480f      	ldr	r0, [pc, #60]	; (80008fc <MX_GPIO_Init+0xb8>)
 80008be:	f7ff ff76 	bl	80007ae <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80008c2:	2200      	movs	r2, #0
 80008c4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80008c8:	480c      	ldr	r0, [pc, #48]	; (80008fc <MX_GPIO_Init+0xb8>)
 80008ca:	f7ff ff33 	bl	8000734 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80008ce:	2320      	movs	r3, #32
 80008d0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80008d2:	2301      	movs	r3, #1
 80008d4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80008d6:	2300      	movs	r3, #0
 80008d8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80008da:	2300      	movs	r3, #0
 80008dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80008de:	2300      	movs	r3, #0
 80008e0:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80008e2:	1d3b      	adds	r3, r7, #4
 80008e4:	4619      	mov	r1, r3
 80008e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008ea:	f001 f90c 	bl	8001b06 <LL_GPIO_Init>

}
 80008ee:	bf00      	nop
 80008f0:	3728      	adds	r7, #40	; 0x28
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
 80008f6:	bf00      	nop
 80008f8:	00f00003 	.word	0x00f00003
 80008fc:	48000800 	.word	0x48000800

08000900 <__NVIC_SetPriorityGrouping>:
{
 8000900:	b480      	push	{r7}
 8000902:	b085      	sub	sp, #20
 8000904:	af00      	add	r7, sp, #0
 8000906:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f003 0307 	and.w	r3, r3, #7
 800090e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000910:	4b0c      	ldr	r3, [pc, #48]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000912:	68db      	ldr	r3, [r3, #12]
 8000914:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000916:	68ba      	ldr	r2, [r7, #8]
 8000918:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800091c:	4013      	ands	r3, r2
 800091e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000920:	68fb      	ldr	r3, [r7, #12]
 8000922:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000924:	68bb      	ldr	r3, [r7, #8]
 8000926:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000928:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800092c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000930:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000932:	4a04      	ldr	r2, [pc, #16]	; (8000944 <__NVIC_SetPriorityGrouping+0x44>)
 8000934:	68bb      	ldr	r3, [r7, #8]
 8000936:	60d3      	str	r3, [r2, #12]
}
 8000938:	bf00      	nop
 800093a:	3714      	adds	r7, #20
 800093c:	46bd      	mov	sp, r7
 800093e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000942:	4770      	bx	lr
 8000944:	e000ed00 	.word	0xe000ed00

08000948 <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 8000948:	b480      	push	{r7}
 800094a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 800094c:	4b05      	ldr	r3, [pc, #20]	; (8000964 <LL_RCC_HSI_Enable+0x1c>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	4a04      	ldr	r2, [pc, #16]	; (8000964 <LL_RCC_HSI_Enable+0x1c>)
 8000952:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000956:	6013      	str	r3, [r2, #0]
}
 8000958:	bf00      	nop
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40021000 	.word	0x40021000

08000968 <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 8000968:	b480      	push	{r7}
 800096a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 800096c:	4b07      	ldr	r3, [pc, #28]	; (800098c <LL_RCC_HSI_IsReady+0x24>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000974:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000978:	d101      	bne.n	800097e <LL_RCC_HSI_IsReady+0x16>
 800097a:	2301      	movs	r3, #1
 800097c:	e000      	b.n	8000980 <LL_RCC_HSI_IsReady+0x18>
 800097e:	2300      	movs	r3, #0
}
 8000980:	4618      	mov	r0, r3
 8000982:	46bd      	mov	sp, r7
 8000984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop
 800098c:	40021000 	.word	0x40021000

08000990 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8000990:	b480      	push	{r7}
 8000992:	b083      	sub	sp, #12
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 8000998:	4b07      	ldr	r3, [pc, #28]	; (80009b8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80009a0:	687b      	ldr	r3, [r7, #4]
 80009a2:	061b      	lsls	r3, r3, #24
 80009a4:	4904      	ldr	r1, [pc, #16]	; (80009b8 <LL_RCC_HSI_SetCalibTrimming+0x28>)
 80009a6:	4313      	orrs	r3, r2
 80009a8:	604b      	str	r3, [r1, #4]
}
 80009aa:	bf00      	nop
 80009ac:	370c      	adds	r7, #12
 80009ae:	46bd      	mov	sp, r7
 80009b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	40021000 	.word	0x40021000

080009bc <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80009bc:	b480      	push	{r7}
 80009be:	b083      	sub	sp, #12
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80009c4:	4b06      	ldr	r3, [pc, #24]	; (80009e0 <LL_RCC_SetSysClkSource+0x24>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	f023 0203 	bic.w	r2, r3, #3
 80009cc:	4904      	ldr	r1, [pc, #16]	; (80009e0 <LL_RCC_SetSysClkSource+0x24>)
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	4313      	orrs	r3, r2
 80009d2:	608b      	str	r3, [r1, #8]
}
 80009d4:	bf00      	nop
 80009d6:	370c      	adds	r7, #12
 80009d8:	46bd      	mov	sp, r7
 80009da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009de:	4770      	bx	lr
 80009e0:	40021000 	.word	0x40021000

080009e4 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80009e4:	b480      	push	{r7}
 80009e6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80009e8:	4b04      	ldr	r3, [pc, #16]	; (80009fc <LL_RCC_GetSysClkSource+0x18>)
 80009ea:	689b      	ldr	r3, [r3, #8]
 80009ec:	f003 030c 	and.w	r3, r3, #12
}
 80009f0:	4618      	mov	r0, r3
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	40021000 	.word	0x40021000

08000a00 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000a00:	b480      	push	{r7}
 8000a02:	b083      	sub	sp, #12
 8000a04:	af00      	add	r7, sp, #0
 8000a06:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000a08:	4b06      	ldr	r3, [pc, #24]	; (8000a24 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000a10:	4904      	ldr	r1, [pc, #16]	; (8000a24 <LL_RCC_SetAHBPrescaler+0x24>)
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	4313      	orrs	r3, r2
 8000a16:	608b      	str	r3, [r1, #8]
}
 8000a18:	bf00      	nop
 8000a1a:	370c      	adds	r7, #12
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a22:	4770      	bx	lr
 8000a24:	40021000 	.word	0x40021000

08000a28 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	b083      	sub	sp, #12
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a32:	689b      	ldr	r3, [r3, #8]
 8000a34:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8000a38:	4904      	ldr	r1, [pc, #16]	; (8000a4c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	4313      	orrs	r3, r2
 8000a3e:	608b      	str	r3, [r1, #8]
}
 8000a40:	bf00      	nop
 8000a42:	370c      	adds	r7, #12
 8000a44:	46bd      	mov	sp, r7
 8000a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a4a:	4770      	bx	lr
 8000a4c:	40021000 	.word	0x40021000

08000a50 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a58:	4b06      	ldr	r3, [pc, #24]	; (8000a74 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a5a:	689b      	ldr	r3, [r3, #8]
 8000a5c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000a60:	4904      	ldr	r1, [pc, #16]	; (8000a74 <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	4313      	orrs	r3, r2
 8000a66:	608b      	str	r3, [r1, #8]
}
 8000a68:	bf00      	nop
 8000a6a:	370c      	adds	r7, #12
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	40021000 	.word	0x40021000

08000a78 <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 8000a78:	b480      	push	{r7}
 8000a7a:	b083      	sub	sp, #12
 8000a7c:	af00      	add	r7, sp, #0
 8000a7e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8000a80:	4b09      	ldr	r3, [pc, #36]	; (8000aa8 <LL_RCC_SetUSARTClockSource+0x30>)
 8000a82:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	0c1b      	lsrs	r3, r3, #16
 8000a8a:	43db      	mvns	r3, r3
 8000a8c:	401a      	ands	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	b29b      	uxth	r3, r3
 8000a92:	4905      	ldr	r1, [pc, #20]	; (8000aa8 <LL_RCC_SetUSARTClockSource+0x30>)
 8000a94:	4313      	orrs	r3, r2
 8000a96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	40021000 	.word	0x40021000

08000aac <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000aac:	b480      	push	{r7}
 8000aae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <LL_RCC_PLL_Enable+0x1c>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4a04      	ldr	r2, [pc, #16]	; (8000ac8 <LL_RCC_PLL_Enable+0x1c>)
 8000ab6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000aba:	6013      	str	r3, [r2, #0]
}
 8000abc:	bf00      	nop
 8000abe:	46bd      	mov	sp, r7
 8000ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop
 8000ac8:	40021000 	.word	0x40021000

08000acc <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000acc:	b480      	push	{r7}
 8000ace:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000ad0:	4b07      	ldr	r3, [pc, #28]	; (8000af0 <LL_RCC_PLL_IsReady+0x24>)
 8000ad2:	681b      	ldr	r3, [r3, #0]
 8000ad4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ad8:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000adc:	d101      	bne.n	8000ae2 <LL_RCC_PLL_IsReady+0x16>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	e000      	b.n	8000ae4 <LL_RCC_PLL_IsReady+0x18>
 8000ae2:	2300      	movs	r3, #0
}
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	46bd      	mov	sp, r7
 8000ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop
 8000af0:	40021000 	.word	0x40021000

08000af4 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000af4:	b480      	push	{r7}
 8000af6:	b085      	sub	sp, #20
 8000af8:	af00      	add	r7, sp, #0
 8000afa:	60f8      	str	r0, [r7, #12]
 8000afc:	60b9      	str	r1, [r7, #8]
 8000afe:	607a      	str	r2, [r7, #4]
 8000b00:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000b02:	4b0a      	ldr	r3, [pc, #40]	; (8000b2c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b04:	68da      	ldr	r2, [r3, #12]
 8000b06:	4b0a      	ldr	r3, [pc, #40]	; (8000b30 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000b08:	4013      	ands	r3, r2
 8000b0a:	68f9      	ldr	r1, [r7, #12]
 8000b0c:	68ba      	ldr	r2, [r7, #8]
 8000b0e:	4311      	orrs	r1, r2
 8000b10:	687a      	ldr	r2, [r7, #4]
 8000b12:	0212      	lsls	r2, r2, #8
 8000b14:	4311      	orrs	r1, r2
 8000b16:	683a      	ldr	r2, [r7, #0]
 8000b18:	430a      	orrs	r2, r1
 8000b1a:	4904      	ldr	r1, [pc, #16]	; (8000b2c <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000b20:	bf00      	nop
 8000b22:	3714      	adds	r7, #20
 8000b24:	46bd      	mov	sp, r7
 8000b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2a:	4770      	bx	lr
 8000b2c:	40021000 	.word	0x40021000
 8000b30:	f9ff808c 	.word	0xf9ff808c

08000b34 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000b34:	b480      	push	{r7}
 8000b36:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000b38:	4b05      	ldr	r3, [pc, #20]	; (8000b50 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b3a:	68db      	ldr	r3, [r3, #12]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000b3e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000b42:	60d3      	str	r3, [r2, #12]
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	40021000 	.word	0x40021000

08000b54 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000b54:	b480      	push	{r7}
 8000b56:	b085      	sub	sp, #20
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000b5c:	4b08      	ldr	r3, [pc, #32]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b60:	4907      	ldr	r1, [pc, #28]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	4313      	orrs	r3, r2
 8000b66:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000b68:	4b05      	ldr	r3, [pc, #20]	; (8000b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000b6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	4013      	ands	r3, r2
 8000b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b72:	68fb      	ldr	r3, [r7, #12]
}
 8000b74:	bf00      	nop
 8000b76:	3714      	adds	r7, #20
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7e:	4770      	bx	lr
 8000b80:	40021000 	.word	0x40021000

08000b84 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000b84:	b480      	push	{r7}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b8c:	4b08      	ldr	r3, [pc, #32]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b90:	4907      	ldr	r1, [pc, #28]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b92:	687b      	ldr	r3, [r7, #4]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b98:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b9a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	4013      	ands	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ba2:	68fb      	ldr	r3, [r7, #12]
}
 8000ba4:	bf00      	nop
 8000ba6:	3714      	adds	r7, #20
 8000ba8:	46bd      	mov	sp, r7
 8000baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bae:	4770      	bx	lr
 8000bb0:	40021000 	.word	0x40021000

08000bb4 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	b083      	sub	sp, #12
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <LL_FLASH_SetLatency+0x24>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	f023 0207 	bic.w	r2, r3, #7
 8000bc4:	4904      	ldr	r1, [pc, #16]	; (8000bd8 <LL_FLASH_SetLatency+0x24>)
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	4313      	orrs	r3, r2
 8000bca:	600b      	str	r3, [r1, #0]
}
 8000bcc:	bf00      	nop
 8000bce:	370c      	adds	r7, #12
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd6:	4770      	bx	lr
 8000bd8:	40022000 	.word	0x40022000

08000bdc <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000bdc:	b480      	push	{r7}
 8000bde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000be0:	4b04      	ldr	r3, [pc, #16]	; (8000bf4 <LL_FLASH_GetLatency+0x18>)
 8000be2:	681b      	ldr	r3, [r3, #0]
 8000be4:	f003 0307 	and.w	r3, r3, #7
}
 8000be8:	4618      	mov	r0, r3
 8000bea:	46bd      	mov	sp, r7
 8000bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf0:	4770      	bx	lr
 8000bf2:	bf00      	nop
 8000bf4:	40022000 	.word	0x40022000

08000bf8 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	b083      	sub	sp, #12
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000c00:	4b06      	ldr	r3, [pc, #24]	; (8000c1c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000c08:	4904      	ldr	r1, [pc, #16]	; (8000c1c <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	4313      	orrs	r3, r2
 8000c0e:	600b      	str	r3, [r1, #0]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr
 8000c1c:	40007000 	.word	0x40007000

08000c20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c24:	2001      	movs	r0, #1
 8000c26:	f7ff ffad 	bl	8000b84 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c2a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c2e:	f7ff ff91 	bl	8000b54 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c32:	2003      	movs	r0, #3
 8000c34:	f7ff fe64 	bl	8000900 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c38:	f000 f81c 	bl	8000c74 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3c:	f7ff fe02 	bl	8000844 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c40:	f000 fb80 	bl	8001344 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000c44:	f000 f8b4 	bl	8000db0 <MX_SPI2_Init>
  MX_TIM1_Init();
 8000c48:	f000 fa9c 	bl	8001184 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8000c4c:	f000 fb4c 	bl	80012e8 <startupPrint>

  adns2610_init();
 8000c50:	f7ff fb56 	bl	8000300 <adns2610_init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("PIXEL SUM 0x%02X\r\n", adns2610_readRegister(ADNS2610_RIGHT, ADNS_2610_PIXEL_SUM));
 8000c54:	2107      	movs	r1, #7
 8000c56:	2000      	movs	r0, #0
 8000c58:	f7ff fc68 	bl	800052c <adns2610_readRegister>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4803      	ldr	r0, [pc, #12]	; (8000c70 <main+0x50>)
 8000c62:	f001 fe37 	bl	80028d4 <iprintf>
	  LL_mDelay(1000);
 8000c66:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000c6a:	f001 fdcb 	bl	8002804 <LL_mDelay>
	  printf("PIXEL SUM 0x%02X\r\n", adns2610_readRegister(ADNS2610_RIGHT, ADNS_2610_PIXEL_SUM));
 8000c6e:	e7f1      	b.n	8000c54 <main+0x34>
 8000c70:	080038fc 	.word	0x080038fc

08000c74 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8000c78:	2003      	movs	r0, #3
 8000c7a:	f7ff ff9b 	bl	8000bb4 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8000c7e:	bf00      	nop
 8000c80:	f7ff ffac 	bl	8000bdc <LL_FLASH_GetLatency>
 8000c84:	4603      	mov	r3, r0
 8000c86:	2b03      	cmp	r3, #3
 8000c88:	d1fa      	bne.n	8000c80 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000c8a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000c8e:	f7ff ffb3 	bl	8000bf8 <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8000c92:	f7ff fe59 	bl	8000948 <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8000c96:	bf00      	nop
 8000c98:	f7ff fe66 	bl	8000968 <LL_RCC_HSI_IsReady>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b01      	cmp	r3, #1
 8000ca0:	d1fa      	bne.n	8000c98 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8000ca2:	2010      	movs	r0, #16
 8000ca4:	f7ff fe74 	bl	8000990 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8000ca8:	2300      	movs	r3, #0
 8000caa:	2208      	movs	r2, #8
 8000cac:	2100      	movs	r1, #0
 8000cae:	2002      	movs	r0, #2
 8000cb0:	f7ff ff20 	bl	8000af4 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000cb4:	f7ff ff3e 	bl	8000b34 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000cb8:	f7ff fef8 	bl	8000aac <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000cbc:	bf00      	nop
 8000cbe:	f7ff ff05 	bl	8000acc <LL_RCC_PLL_IsReady>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	2b01      	cmp	r3, #1
 8000cc6:	d1fa      	bne.n	8000cbe <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000cc8:	2003      	movs	r0, #3
 8000cca:	f7ff fe77 	bl	80009bc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000cce:	bf00      	nop
 8000cd0:	f7ff fe88 	bl	80009e4 <LL_RCC_GetSysClkSource>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b0c      	cmp	r3, #12
 8000cd8:	d1fa      	bne.n	8000cd0 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000cda:	2000      	movs	r0, #0
 8000cdc:	f7ff fe90 	bl	8000a00 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000ce0:	2000      	movs	r0, #0
 8000ce2:	f7ff fea1 	bl	8000a28 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000ce6:	2000      	movs	r0, #0
 8000ce8:	f7ff feb2 	bl	8000a50 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8000cec:	4805      	ldr	r0, [pc, #20]	; (8000d04 <SystemClock_Config+0x90>)
 8000cee:	f001 fd7b 	bl	80027e8 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8000cf2:	4804      	ldr	r0, [pc, #16]	; (8000d04 <SystemClock_Config+0x90>)
 8000cf4:	f001 fdac 	bl	8002850 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8000cf8:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8000cfc:	f7ff febc 	bl	8000a78 <LL_RCC_SetUSARTClockSource>
}
 8000d00:	bf00      	nop
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	03d09000 	.word	0x03d09000

08000d08 <LL_AHB2_GRP1_EnableClock>:
{
 8000d08:	b480      	push	{r7}
 8000d0a:	b085      	sub	sp, #20
 8000d0c:	af00      	add	r7, sp, #0
 8000d0e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000d10:	4b08      	ldr	r3, [pc, #32]	; (8000d34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d12:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d14:	4907      	ldr	r1, [pc, #28]	; (8000d34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000d1c:	4b05      	ldr	r3, [pc, #20]	; (8000d34 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000d1e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000d20:	687b      	ldr	r3, [r7, #4]
 8000d22:	4013      	ands	r3, r2
 8000d24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d26:	68fb      	ldr	r3, [r7, #12]
}
 8000d28:	bf00      	nop
 8000d2a:	3714      	adds	r7, #20
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	40021000 	.word	0x40021000

08000d38 <LL_APB1_GRP1_EnableClock>:
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b085      	sub	sp, #20
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000d40:	4b08      	ldr	r3, [pc, #32]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d42:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d44:	4907      	ldr	r1, [pc, #28]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d46:	687b      	ldr	r3, [r7, #4]
 8000d48:	4313      	orrs	r3, r2
 8000d4a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000d4c:	4b05      	ldr	r3, [pc, #20]	; (8000d64 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000d4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4013      	ands	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000d56:	68fb      	ldr	r3, [r7, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000

08000d68 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b083      	sub	sp, #12
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
 8000d70:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f023 0210 	bic.w	r2, r3, #16
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	431a      	orrs	r2, r3
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	605a      	str	r2, [r3, #4]
}
 8000d82:	bf00      	nop
 8000d84:	370c      	adds	r7, #12
 8000d86:	46bd      	mov	sp, r7
 8000d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8c:	4770      	bx	lr

08000d8e <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 8000d8e:	b480      	push	{r7}
 8000d90:	b083      	sub	sp, #12
 8000d92:	af00      	add	r7, sp, #0
 8000d94:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	685b      	ldr	r3, [r3, #4]
 8000d9a:	f023 0208 	bic.w	r2, r3, #8
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	605a      	str	r2, [r3, #4]
}
 8000da2:	bf00      	nop
 8000da4:	370c      	adds	r7, #12
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
	...

08000db0 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b090      	sub	sp, #64	; 0x40
 8000db4:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000db6:	f107 0318 	add.w	r3, r7, #24
 8000dba:	2228      	movs	r2, #40	; 0x28
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f001 fd80 	bl	80028c4 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	463b      	mov	r3, r7
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	601a      	str	r2, [r3, #0]
 8000dca:	605a      	str	r2, [r3, #4]
 8000dcc:	609a      	str	r2, [r3, #8]
 8000dce:	60da      	str	r2, [r3, #12]
 8000dd0:	611a      	str	r2, [r3, #16]
 8000dd2:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000dd4:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000dd8:	f7ff ffae 	bl	8000d38 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000ddc:	2004      	movs	r0, #4
 8000dde:	f7ff ff93 	bl	8000d08 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000de2:	2002      	movs	r0, #2
 8000de4:	f7ff ff90 	bl	8000d08 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000de8:	230c      	movs	r3, #12
 8000dea:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000dec:	2302      	movs	r3, #2
 8000dee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000df0:	2303      	movs	r3, #3
 8000df2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000df4:	2300      	movs	r3, #0
 8000df6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000dfc:	2305      	movs	r3, #5
 8000dfe:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000e00:	463b      	mov	r3, r7
 8000e02:	4619      	mov	r1, r3
 8000e04:	481e      	ldr	r0, [pc, #120]	; (8000e80 <MX_SPI2_Init+0xd0>)
 8000e06:	f000 fe7e 	bl	8001b06 <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000e0a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e0e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000e10:	2302      	movs	r3, #2
 8000e12:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000e14:	2303      	movs	r3, #3
 8000e16:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000e20:	2305      	movs	r3, #5
 8000e22:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	463b      	mov	r3, r7
 8000e26:	4619      	mov	r1, r3
 8000e28:	4816      	ldr	r0, [pc, #88]	; (8000e84 <MX_SPI2_Init+0xd4>)
 8000e2a:	f000 fe6c 	bl	8001b06 <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000e32:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000e36:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000e38:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000e3c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 8000e3e:	2302      	movs	r3, #2
 8000e40:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 8000e42:	2301      	movs	r3, #1
 8000e44:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000e46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8000e4c:	2320      	movs	r3, #32
 8000e4e:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000e50:	2300      	movs	r3, #0
 8000e52:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000e54:	2300      	movs	r3, #0
 8000e56:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8000e58:	2307      	movs	r3, #7
 8000e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8000e5c:	f107 0318 	add.w	r3, r7, #24
 8000e60:	4619      	mov	r1, r3
 8000e62:	4809      	ldr	r0, [pc, #36]	; (8000e88 <MX_SPI2_Init+0xd8>)
 8000e64:	f001 fa9d 	bl	80023a2 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8000e68:	2100      	movs	r1, #0
 8000e6a:	4807      	ldr	r0, [pc, #28]	; (8000e88 <MX_SPI2_Init+0xd8>)
 8000e6c:	f7ff ff7c 	bl	8000d68 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8000e70:	4805      	ldr	r0, [pc, #20]	; (8000e88 <MX_SPI2_Init+0xd8>)
 8000e72:	f7ff ff8c 	bl	8000d8e <LL_SPI_DisableNSSPulseMgt>

}
 8000e76:	bf00      	nop
 8000e78:	3740      	adds	r7, #64	; 0x40
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	48000800 	.word	0x48000800
 8000e84:	48000400 	.word	0x48000400
 8000e88:	40003800 	.word	0x40003800

08000e8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000e90:	bf00      	nop
 8000e92:	46bd      	mov	sp, r7
 8000e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e98:	4770      	bx	lr

08000e9a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e9a:	b480      	push	{r7}
 8000e9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e9e:	e7fe      	b.n	8000e9e <HardFault_Handler+0x4>

08000ea0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ea4:	e7fe      	b.n	8000ea4 <MemManage_Handler+0x4>

08000ea6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ea6:	b480      	push	{r7}
 8000ea8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eaa:	e7fe      	b.n	8000eaa <BusFault_Handler+0x4>

08000eac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eac:	b480      	push	{r7}
 8000eae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <UsageFault_Handler+0x4>

08000eb2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000eb2:	b480      	push	{r7}
 8000eb4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eb6:	bf00      	nop
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr

08000ec0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ecc:	4770      	bx	lr

08000ece <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eda:	4770      	bx	lr

08000edc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee8:	4770      	bx	lr

08000eea <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b086      	sub	sp, #24
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	60f8      	str	r0, [r7, #12]
 8000ef2:	60b9      	str	r1, [r7, #8]
 8000ef4:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
 8000efa:	e00a      	b.n	8000f12 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000efc:	f000 f9ec 	bl	80012d8 <__io_getchar>
 8000f00:	4601      	mov	r1, r0
 8000f02:	68bb      	ldr	r3, [r7, #8]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	60ba      	str	r2, [r7, #8]
 8000f08:	b2ca      	uxtb	r2, r1
 8000f0a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	617b      	str	r3, [r7, #20]
 8000f12:	697a      	ldr	r2, [r7, #20]
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	429a      	cmp	r2, r3
 8000f18:	dbf0      	blt.n	8000efc <_read+0x12>
	}

return len;
 8000f1a:	687b      	ldr	r3, [r7, #4]
}
 8000f1c:	4618      	mov	r0, r3
 8000f1e:	3718      	adds	r7, #24
 8000f20:	46bd      	mov	sp, r7
 8000f22:	bd80      	pop	{r7, pc}

08000f24 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f30:	2300      	movs	r3, #0
 8000f32:	617b      	str	r3, [r7, #20]
 8000f34:	e009      	b.n	8000f4a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	1c5a      	adds	r2, r3, #1
 8000f3a:	60ba      	str	r2, [r7, #8]
 8000f3c:	781b      	ldrb	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f000 f9ac 	bl	800129c <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000f44:	697b      	ldr	r3, [r7, #20]
 8000f46:	3301      	adds	r3, #1
 8000f48:	617b      	str	r3, [r7, #20]
 8000f4a:	697a      	ldr	r2, [r7, #20]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	429a      	cmp	r2, r3
 8000f50:	dbf1      	blt.n	8000f36 <_write+0x12>
	}
	return len;
 8000f52:	687b      	ldr	r3, [r7, #4]
}
 8000f54:	4618      	mov	r0, r3
 8000f56:	3718      	adds	r7, #24
 8000f58:	46bd      	mov	sp, r7
 8000f5a:	bd80      	pop	{r7, pc}

08000f5c <_close>:

int _close(int file)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	b083      	sub	sp, #12
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
	return -1;
 8000f64:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	370c      	adds	r7, #12
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f72:	4770      	bx	lr

08000f74 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
 8000f7c:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f84:	605a      	str	r2, [r3, #4]
	return 0;
 8000f86:	2300      	movs	r3, #0
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	370c      	adds	r7, #12
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr

08000f94 <_isatty>:

int _isatty(int file)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	6078      	str	r0, [r7, #4]
	return 1;
 8000f9c:	2301      	movs	r3, #1
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	370c      	adds	r7, #12
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa8:	4770      	bx	lr

08000faa <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000faa:	b480      	push	{r7}
 8000fac:	b085      	sub	sp, #20
 8000fae:	af00      	add	r7, sp, #0
 8000fb0:	60f8      	str	r0, [r7, #12]
 8000fb2:	60b9      	str	r1, [r7, #8]
 8000fb4:	607a      	str	r2, [r7, #4]
	return 0;
 8000fb6:	2300      	movs	r3, #0
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr

08000fc4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000fc4:	b580      	push	{r7, lr}
 8000fc6:	b086      	sub	sp, #24
 8000fc8:	af00      	add	r7, sp, #0
 8000fca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000fcc:	4a14      	ldr	r2, [pc, #80]	; (8001020 <_sbrk+0x5c>)
 8000fce:	4b15      	ldr	r3, [pc, #84]	; (8001024 <_sbrk+0x60>)
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000fd4:	697b      	ldr	r3, [r7, #20]
 8000fd6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000fd8:	4b13      	ldr	r3, [pc, #76]	; (8001028 <_sbrk+0x64>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d102      	bne.n	8000fe6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000fe0:	4b11      	ldr	r3, [pc, #68]	; (8001028 <_sbrk+0x64>)
 8000fe2:	4a12      	ldr	r2, [pc, #72]	; (800102c <_sbrk+0x68>)
 8000fe4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000fe6:	4b10      	ldr	r3, [pc, #64]	; (8001028 <_sbrk+0x64>)
 8000fe8:	681a      	ldr	r2, [r3, #0]
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	4413      	add	r3, r2
 8000fee:	693a      	ldr	r2, [r7, #16]
 8000ff0:	429a      	cmp	r2, r3
 8000ff2:	d207      	bcs.n	8001004 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ff4:	f001 fc3c 	bl	8002870 <__errno>
 8000ff8:	4602      	mov	r2, r0
 8000ffa:	230c      	movs	r3, #12
 8000ffc:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 8000ffe:	f04f 33ff 	mov.w	r3, #4294967295
 8001002:	e009      	b.n	8001018 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001004:	4b08      	ldr	r3, [pc, #32]	; (8001028 <_sbrk+0x64>)
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800100a:	4b07      	ldr	r3, [pc, #28]	; (8001028 <_sbrk+0x64>)
 800100c:	681a      	ldr	r2, [r3, #0]
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	4413      	add	r3, r2
 8001012:	4a05      	ldr	r2, [pc, #20]	; (8001028 <_sbrk+0x64>)
 8001014:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001016:	68fb      	ldr	r3, [r7, #12]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3718      	adds	r7, #24
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	20018000 	.word	0x20018000
 8001024:	00000400 	.word	0x00000400
 8001028:	20000084 	.word	0x20000084
 800102c:	20000098 	.word	0x20000098

08001030 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001034:	4b17      	ldr	r3, [pc, #92]	; (8001094 <SystemInit+0x64>)
 8001036:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800103a:	4a16      	ldr	r2, [pc, #88]	; (8001094 <SystemInit+0x64>)
 800103c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001040:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8001044:	4b14      	ldr	r3, [pc, #80]	; (8001098 <SystemInit+0x68>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a13      	ldr	r2, [pc, #76]	; (8001098 <SystemInit+0x68>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8001050:	4b11      	ldr	r3, [pc, #68]	; (8001098 <SystemInit+0x68>)
 8001052:	2200      	movs	r2, #0
 8001054:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <SystemInit+0x68>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	4a0f      	ldr	r2, [pc, #60]	; (8001098 <SystemInit+0x68>)
 800105c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8001060:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8001064:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8001066:	4b0c      	ldr	r3, [pc, #48]	; (8001098 <SystemInit+0x68>)
 8001068:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800106c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <SystemInit+0x68>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	4a09      	ldr	r2, [pc, #36]	; (8001098 <SystemInit+0x68>)
 8001074:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001078:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800107a:	4b07      	ldr	r3, [pc, #28]	; (8001098 <SystemInit+0x68>)
 800107c:	2200      	movs	r2, #0
 800107e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001080:	4b04      	ldr	r3, [pc, #16]	; (8001094 <SystemInit+0x64>)
 8001082:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001086:	609a      	str	r2, [r3, #8]
#endif
}
 8001088:	bf00      	nop
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	e000ed00 	.word	0xe000ed00
 8001098:	40021000 	.word	0x40021000

0800109c <LL_APB2_GRP1_EnableClock>:
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80010a4:	4b08      	ldr	r3, [pc, #32]	; (80010c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010a6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010a8:	4907      	ldr	r1, [pc, #28]	; (80010c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	4313      	orrs	r3, r2
 80010ae:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80010b0:	4b05      	ldr	r3, [pc, #20]	; (80010c8 <LL_APB2_GRP1_EnableClock+0x2c>)
 80010b2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	4013      	ands	r3, r2
 80010b8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80010ba:	68fb      	ldr	r3, [r7, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	40021000 	.word	0x40021000

080010cc <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	601a      	str	r2, [r3, #0]
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	689b      	ldr	r3, [r3, #8]
 80010fa:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80010fe:	f023 0307 	bic.w	r3, r3, #7
 8001102:	683a      	ldr	r2, [r7, #0]
 8001104:	431a      	orrs	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	609a      	str	r2, [r3, #8]
}
 800110a:	bf00      	nop
 800110c:	370c      	adds	r7, #12
 800110e:	46bd      	mov	sp, r7
 8001110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001114:	4770      	bx	lr

08001116 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8001116:	b480      	push	{r7}
 8001118:	b083      	sub	sp, #12
 800111a:	af00      	add	r7, sp, #0
 800111c:	6078      	str	r0, [r7, #4]
 800111e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	431a      	orrs	r2, r3
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	605a      	str	r2, [r3, #4]
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
 800114a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800114e:	683b      	ldr	r3, [r7, #0]
 8001150:	431a      	orrs	r2, r3
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	605a      	str	r2, [r3, #4]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8001162:	b480      	push	{r7}
 8001164:	b083      	sub	sp, #12
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	689b      	ldr	r3, [r3, #8]
 800116e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	609a      	str	r2, [r3, #8]
}
 8001176:	bf00      	nop
 8001178:	370c      	adds	r7, #12
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
	...

08001184 <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001184:	b580      	push	{r7, lr}
 8001186:	b086      	sub	sp, #24
 8001188:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8001198:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800119c:	f7ff ff7e 	bl	800109c <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 80011a0:	233f      	movs	r3, #63	; 0x3f
 80011a2:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80011a4:	2300      	movs	r3, #0
 80011a6:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 115;
 80011a8:	2373      	movs	r3, #115	; 0x73
 80011aa:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80011ac:	2300      	movs	r3, #0
 80011ae:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 80011b4:	1d3b      	adds	r3, r7, #4
 80011b6:	4619      	mov	r1, r3
 80011b8:	480c      	ldr	r0, [pc, #48]	; (80011ec <MX_TIM1_Init+0x68>)
 80011ba:	f001 f97b 	bl	80024b4 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 80011be:	480b      	ldr	r0, [pc, #44]	; (80011ec <MX_TIM1_Init+0x68>)
 80011c0:	f7ff ff84 	bl	80010cc <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 80011c4:	2100      	movs	r1, #0
 80011c6:	4809      	ldr	r0, [pc, #36]	; (80011ec <MX_TIM1_Init+0x68>)
 80011c8:	f7ff ff90 	bl	80010ec <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 80011cc:	2100      	movs	r1, #0
 80011ce:	4807      	ldr	r0, [pc, #28]	; (80011ec <MX_TIM1_Init+0x68>)
 80011d0:	f7ff ffa1 	bl	8001116 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 80011d4:	2100      	movs	r1, #0
 80011d6:	4805      	ldr	r0, [pc, #20]	; (80011ec <MX_TIM1_Init+0x68>)
 80011d8:	f7ff ffb0 	bl	800113c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 80011dc:	4803      	ldr	r0, [pc, #12]	; (80011ec <MX_TIM1_Init+0x68>)
 80011de:	f7ff ffc0 	bl	8001162 <LL_TIM_DisableMasterSlaveMode>

}
 80011e2:	bf00      	nop
 80011e4:	3718      	adds	r7, #24
 80011e6:	46bd      	mov	sp, r7
 80011e8:	bd80      	pop	{r7, pc}
 80011ea:	bf00      	nop
 80011ec:	40012c00 	.word	0x40012c00

080011f0 <LL_AHB2_GRP1_EnableClock>:
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80011f8:	4b08      	ldr	r3, [pc, #32]	; (800121c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80011fa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80011fc:	4907      	ldr	r1, [pc, #28]	; (800121c <LL_AHB2_GRP1_EnableClock+0x2c>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	4313      	orrs	r3, r2
 8001202:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001204:	4b05      	ldr	r3, [pc, #20]	; (800121c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001206:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	4013      	ands	r3, r2
 800120c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800120e:	68fb      	ldr	r3, [r7, #12]
}
 8001210:	bf00      	nop
 8001212:	3714      	adds	r7, #20
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr
 800121c:	40021000 	.word	0x40021000

08001220 <LL_APB1_GRP1_EnableClock>:
{
 8001220:	b480      	push	{r7}
 8001222:	b085      	sub	sp, #20
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001228:	4b08      	ldr	r3, [pc, #32]	; (800124c <LL_APB1_GRP1_EnableClock+0x2c>)
 800122a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800122c:	4907      	ldr	r1, [pc, #28]	; (800124c <LL_APB1_GRP1_EnableClock+0x2c>)
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	4313      	orrs	r3, r2
 8001232:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001234:	4b05      	ldr	r3, [pc, #20]	; (800124c <LL_APB1_GRP1_EnableClock+0x2c>)
 8001236:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	4013      	ands	r3, r2
 800123c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800123e:	68fb      	ldr	r3, [r7, #12]
}
 8001240:	bf00      	nop
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	40021000 	.word	0x40021000

08001250 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8001250:	b480      	push	{r7}
 8001252:	b083      	sub	sp, #12
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f043 0201 	orr.w	r2, r3, #1
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	601a      	str	r2, [r3, #0]
}
 8001264:	bf00      	nop
 8001266:	370c      	adds	r7, #12
 8001268:	46bd      	mov	sp, r7
 800126a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800126e:	4770      	bx	lr

08001270 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8001270:	b480      	push	{r7}
 8001272:	b083      	sub	sp, #12
 8001274:	af00      	add	r7, sp, #0
 8001276:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	689b      	ldr	r3, [r3, #8]
 8001288:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	609a      	str	r2, [r3, #8]
}
 8001290:	bf00      	nop
 8001292:	370c      	adds	r7, #12
 8001294:	46bd      	mov	sp, r7
 8001296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800129a:	4770      	bx	lr

0800129c <__io_putchar>:

/* Includes ------------------------------------------------------------------*/
#include "usart.h"

/* USER CODE BEGIN 0 */
void __io_putchar(int ch){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!READ_BIT(USART2->ISR, USART_ISR_TXE));
 80012a4:	bf00      	nop
 80012a6:	4b0b      	ldr	r3, [pc, #44]	; (80012d4 <__io_putchar+0x38>)
 80012a8:	69db      	ldr	r3, [r3, #28]
 80012aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d0f9      	beq.n	80012a6 <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 80012b2:	4b08      	ldr	r3, [pc, #32]	; (80012d4 <__io_putchar+0x38>)
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	b292      	uxth	r2, r2
 80012b8:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!READ_BIT(USART2->ISR, USART_ISR_TC));
 80012ba:	bf00      	nop
 80012bc:	4b05      	ldr	r3, [pc, #20]	; (80012d4 <__io_putchar+0x38>)
 80012be:	69db      	ldr	r3, [r3, #28]
 80012c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d0f9      	beq.n	80012bc <__io_putchar+0x20>
#endif
}
 80012c8:	bf00      	nop
 80012ca:	370c      	adds	r7, #12
 80012cc:	46bd      	mov	sp, r7
 80012ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d2:	4770      	bx	lr
 80012d4:	40004400 	.word	0x40004400

080012d8 <__io_getchar>:

void __io_getchar(void){
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 80012dc:	bf00      	nop
 80012de:	46bd      	mov	sp, r7
 80012e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e4:	4770      	bx	lr
	...

080012e8 <startupPrint>:

void startupPrint(void){
 80012e8:	b580      	push	{r7, lr}
 80012ea:	af00      	add	r7, sp, #0
	printf("\r\n");
 80012ec:	480b      	ldr	r0, [pc, #44]	; (800131c <startupPrint+0x34>)
 80012ee:	f001 fb65 	bl	80029bc <puts>
	printf("+==============================================================+\r\n");
 80012f2:	480b      	ldr	r0, [pc, #44]	; (8001320 <startupPrint+0x38>)
 80012f4:	f001 fb62 	bl	80029bc <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 80012f8:	490a      	ldr	r1, [pc, #40]	; (8001324 <startupPrint+0x3c>)
 80012fa:	480b      	ldr	r0, [pc, #44]	; (8001328 <startupPrint+0x40>)
 80012fc:	f001 faea 	bl	80028d4 <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8001300:	480a      	ldr	r0, [pc, #40]	; (800132c <startupPrint+0x44>)
 8001302:	f001 fb5b 	bl	80029bc <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8001306:	4b0a      	ldr	r3, [pc, #40]	; (8001330 <startupPrint+0x48>)
 8001308:	4a0a      	ldr	r2, [pc, #40]	; (8001334 <startupPrint+0x4c>)
 800130a:	490b      	ldr	r1, [pc, #44]	; (8001338 <startupPrint+0x50>)
 800130c:	480b      	ldr	r0, [pc, #44]	; (800133c <startupPrint+0x54>)
 800130e:	f001 fae1 	bl	80028d4 <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8001312:	480b      	ldr	r0, [pc, #44]	; (8001340 <startupPrint+0x58>)
 8001314:	f001 fb52 	bl	80029bc <puts>
}
 8001318:	bf00      	nop
 800131a:	bd80      	pop	{r7, pc}
 800131c:	08003910 	.word	0x08003910
 8001320:	08003914 	.word	0x08003914
 8001324:	08003958 	.word	0x08003958
 8001328:	08003980 	.word	0x08003980
 800132c:	0800398c 	.word	0x0800398c
 8001330:	080039d0 	.word	0x080039d0
 8001334:	080039d4 	.word	0x080039d4
 8001338:	080039e0 	.word	0x080039e0
 800133c:	080039f4 	.word	0x080039f4
 8001340:	08003a20 	.word	0x08003a20

08001344 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b08e      	sub	sp, #56	; 0x38
 8001348:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 800134a:	f107 031c 	add.w	r3, r7, #28
 800134e:	2200      	movs	r2, #0
 8001350:	601a      	str	r2, [r3, #0]
 8001352:	605a      	str	r2, [r3, #4]
 8001354:	609a      	str	r2, [r3, #8]
 8001356:	60da      	str	r2, [r3, #12]
 8001358:	611a      	str	r2, [r3, #16]
 800135a:	615a      	str	r2, [r3, #20]
 800135c:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800135e:	1d3b      	adds	r3, r7, #4
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
 8001366:	609a      	str	r2, [r3, #8]
 8001368:	60da      	str	r2, [r3, #12]
 800136a:	611a      	str	r2, [r3, #16]
 800136c:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 800136e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001372:	f7ff ff55 	bl	8001220 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001376:	2001      	movs	r0, #1
 8001378:	f7ff ff3a 	bl	80011f0 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800137c:	230c      	movs	r3, #12
 800137e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001380:	2302      	movs	r3, #2
 8001382:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001384:	2303      	movs	r3, #3
 8001386:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8001388:	2300      	movs	r3, #0
 800138a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800138c:	2300      	movs	r3, #0
 800138e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001390:	2307      	movs	r3, #7
 8001392:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	1d3b      	adds	r3, r7, #4
 8001396:	4619      	mov	r1, r3
 8001398:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800139c:	f000 fbb3 	bl	8001b06 <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 80013a0:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 80013a4:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80013a6:	2300      	movs	r3, #0
 80013a8:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 80013aa:	2300      	movs	r3, #0
 80013ac:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80013b2:	230c      	movs	r3, #12
 80013b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80013b6:	2300      	movs	r3, #0
 80013b8:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80013ba:	2300      	movs	r3, #0
 80013bc:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80013be:	f107 031c 	add.w	r3, r7, #28
 80013c2:	4619      	mov	r1, r3
 80013c4:	4806      	ldr	r0, [pc, #24]	; (80013e0 <MX_USART2_UART_Init+0x9c>)
 80013c6:	f001 f979 	bl	80026bc <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80013ca:	4805      	ldr	r0, [pc, #20]	; (80013e0 <MX_USART2_UART_Init+0x9c>)
 80013cc:	f7ff ff50 	bl	8001270 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80013d0:	4803      	ldr	r0, [pc, #12]	; (80013e0 <MX_USART2_UART_Init+0x9c>)
 80013d2:	f7ff ff3d 	bl	8001250 <LL_USART_Enable>

}
 80013d6:	bf00      	nop
 80013d8:	3738      	adds	r7, #56	; 0x38
 80013da:	46bd      	mov	sp, r7
 80013dc:	bd80      	pop	{r7, pc}
 80013de:	bf00      	nop
 80013e0:	40004400 	.word	0x40004400

080013e4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80013e4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800141c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80013e8:	f7ff fe22 	bl	8001030 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80013ec:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80013ee:	e003      	b.n	80013f8 <LoopCopyDataInit>

080013f0 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 80013f0:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 80013f2:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 80013f4:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 80013f6:	3104      	adds	r1, #4

080013f8 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 80013f8:	480a      	ldr	r0, [pc, #40]	; (8001424 <LoopForever+0xa>)
	ldr	r3, =_edata
 80013fa:	4b0b      	ldr	r3, [pc, #44]	; (8001428 <LoopForever+0xe>)
	adds	r2, r0, r1
 80013fc:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 80013fe:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8001400:	d3f6      	bcc.n	80013f0 <CopyDataInit>
	ldr	r2, =_sbss
 8001402:	4a0a      	ldr	r2, [pc, #40]	; (800142c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001404:	e002      	b.n	800140c <LoopFillZerobss>

08001406 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001406:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001408:	f842 3b04 	str.w	r3, [r2], #4

0800140c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800140c:	4b08      	ldr	r3, [pc, #32]	; (8001430 <LoopForever+0x16>)
	cmp	r2, r3
 800140e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8001410:	d3f9      	bcc.n	8001406 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001412:	f001 fa33 	bl	800287c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001416:	f7ff fc03 	bl	8000c20 <main>

0800141a <LoopForever>:

LoopForever:
    b LoopForever
 800141a:	e7fe      	b.n	800141a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800141c:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8001420:	08003b4c 	.word	0x08003b4c
	ldr	r0, =_sdata
 8001424:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001428:	20000068 	.word	0x20000068
	ldr	r2, =_sbss
 800142c:	20000068 	.word	0x20000068
	ldr	r3, = _ebss
 8001430:	20000094 	.word	0x20000094

08001434 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001434:	e7fe      	b.n	8001434 <ADC1_2_IRQHandler>
	...

08001438 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8001438:	b480      	push	{r7}
 800143a:	b083      	sub	sp, #12
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <LL_EXTI_EnableIT_0_31+0x20>)
 8001442:	681a      	ldr	r2, [r3, #0]
 8001444:	4904      	ldr	r1, [pc, #16]	; (8001458 <LL_EXTI_EnableIT_0_31+0x20>)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	4313      	orrs	r3, r2
 800144a:	600b      	str	r3, [r1, #0]
}
 800144c:	bf00      	nop
 800144e:	370c      	adds	r7, #12
 8001450:	46bd      	mov	sp, r7
 8001452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001456:	4770      	bx	lr
 8001458:	40010400 	.word	0x40010400

0800145c <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001464:	4b05      	ldr	r3, [pc, #20]	; (800147c <LL_EXTI_EnableIT_32_63+0x20>)
 8001466:	6a1a      	ldr	r2, [r3, #32]
 8001468:	4904      	ldr	r1, [pc, #16]	; (800147c <LL_EXTI_EnableIT_32_63+0x20>)
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4313      	orrs	r3, r2
 800146e:	620b      	str	r3, [r1, #32]
}
 8001470:	bf00      	nop
 8001472:	370c      	adds	r7, #12
 8001474:	46bd      	mov	sp, r7
 8001476:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147a:	4770      	bx	lr
 800147c:	40010400 	.word	0x40010400

08001480 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8001488:	4b06      	ldr	r3, [pc, #24]	; (80014a4 <LL_EXTI_DisableIT_0_31+0x24>)
 800148a:	681a      	ldr	r2, [r3, #0]
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	43db      	mvns	r3, r3
 8001490:	4904      	ldr	r1, [pc, #16]	; (80014a4 <LL_EXTI_DisableIT_0_31+0x24>)
 8001492:	4013      	ands	r3, r2
 8001494:	600b      	str	r3, [r1, #0]
}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a0:	4770      	bx	lr
 80014a2:	bf00      	nop
 80014a4:	40010400 	.word	0x40010400

080014a8 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80014b0:	4b06      	ldr	r3, [pc, #24]	; (80014cc <LL_EXTI_DisableIT_32_63+0x24>)
 80014b2:	6a1a      	ldr	r2, [r3, #32]
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	43db      	mvns	r3, r3
 80014b8:	4904      	ldr	r1, [pc, #16]	; (80014cc <LL_EXTI_DisableIT_32_63+0x24>)
 80014ba:	4013      	ands	r3, r2
 80014bc:	620b      	str	r3, [r1, #32]
}
 80014be:	bf00      	nop
 80014c0:	370c      	adds	r7, #12
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40010400 	.word	0x40010400

080014d0 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80014d0:	b480      	push	{r7}
 80014d2:	b083      	sub	sp, #12
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80014d8:	4b05      	ldr	r3, [pc, #20]	; (80014f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014da:	685a      	ldr	r2, [r3, #4]
 80014dc:	4904      	ldr	r1, [pc, #16]	; (80014f0 <LL_EXTI_EnableEvent_0_31+0x20>)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	604b      	str	r3, [r1, #4]

}
 80014e4:	bf00      	nop
 80014e6:	370c      	adds	r7, #12
 80014e8:	46bd      	mov	sp, r7
 80014ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ee:	4770      	bx	lr
 80014f0:	40010400 	.word	0x40010400

080014f4 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 80014fc:	4b05      	ldr	r3, [pc, #20]	; (8001514 <LL_EXTI_EnableEvent_32_63+0x20>)
 80014fe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001500:	4904      	ldr	r1, [pc, #16]	; (8001514 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4313      	orrs	r3, r2
 8001506:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001508:	bf00      	nop
 800150a:	370c      	adds	r7, #12
 800150c:	46bd      	mov	sp, r7
 800150e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001512:	4770      	bx	lr
 8001514:	40010400 	.word	0x40010400

08001518 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001520:	4b06      	ldr	r3, [pc, #24]	; (800153c <LL_EXTI_DisableEvent_0_31+0x24>)
 8001522:	685a      	ldr	r2, [r3, #4]
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	43db      	mvns	r3, r3
 8001528:	4904      	ldr	r1, [pc, #16]	; (800153c <LL_EXTI_DisableEvent_0_31+0x24>)
 800152a:	4013      	ands	r3, r2
 800152c:	604b      	str	r3, [r1, #4]
}
 800152e:	bf00      	nop
 8001530:	370c      	adds	r7, #12
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	40010400 	.word	0x40010400

08001540 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8001548:	4b06      	ldr	r3, [pc, #24]	; (8001564 <LL_EXTI_DisableEvent_32_63+0x24>)
 800154a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	43db      	mvns	r3, r3
 8001550:	4904      	ldr	r1, [pc, #16]	; (8001564 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001552:	4013      	ands	r3, r2
 8001554:	624b      	str	r3, [r1, #36]	; 0x24
}
 8001556:	bf00      	nop
 8001558:	370c      	adds	r7, #12
 800155a:	46bd      	mov	sp, r7
 800155c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001560:	4770      	bx	lr
 8001562:	bf00      	nop
 8001564:	40010400 	.word	0x40010400

08001568 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001570:	4b05      	ldr	r3, [pc, #20]	; (8001588 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001572:	689a      	ldr	r2, [r3, #8]
 8001574:	4904      	ldr	r1, [pc, #16]	; (8001588 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	4313      	orrs	r3, r2
 800157a:	608b      	str	r3, [r1, #8]

}
 800157c:	bf00      	nop
 800157e:	370c      	adds	r7, #12
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr
 8001588:	40010400 	.word	0x40010400

0800158c <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 800158c:	b480      	push	{r7}
 800158e:	b083      	sub	sp, #12
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001594:	4b05      	ldr	r3, [pc, #20]	; (80015ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8001596:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001598:	4904      	ldr	r1, [pc, #16]	; (80015ac <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4313      	orrs	r3, r2
 800159e:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015a0:	bf00      	nop
 80015a2:	370c      	adds	r7, #12
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	40010400 	.word	0x40010400

080015b0 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80015b8:	4b06      	ldr	r3, [pc, #24]	; (80015d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015ba:	689a      	ldr	r2, [r3, #8]
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	43db      	mvns	r3, r3
 80015c0:	4904      	ldr	r1, [pc, #16]	; (80015d4 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80015c2:	4013      	ands	r3, r2
 80015c4:	608b      	str	r3, [r1, #8]

}
 80015c6:	bf00      	nop
 80015c8:	370c      	adds	r7, #12
 80015ca:	46bd      	mov	sp, r7
 80015cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d0:	4770      	bx	lr
 80015d2:	bf00      	nop
 80015d4:	40010400 	.word	0x40010400

080015d8 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80015d8:	b480      	push	{r7}
 80015da:	b083      	sub	sp, #12
 80015dc:	af00      	add	r7, sp, #0
 80015de:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80015e0:	4b06      	ldr	r3, [pc, #24]	; (80015fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	43db      	mvns	r3, r3
 80015e8:	4904      	ldr	r1, [pc, #16]	; (80015fc <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80015ea:	4013      	ands	r3, r2
 80015ec:	628b      	str	r3, [r1, #40]	; 0x28
}
 80015ee:	bf00      	nop
 80015f0:	370c      	adds	r7, #12
 80015f2:	46bd      	mov	sp, r7
 80015f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f8:	4770      	bx	lr
 80015fa:	bf00      	nop
 80015fc:	40010400 	.word	0x40010400

08001600 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001600:	b480      	push	{r7}
 8001602:	b083      	sub	sp, #12
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8001608:	4b05      	ldr	r3, [pc, #20]	; (8001620 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800160a:	68da      	ldr	r2, [r3, #12]
 800160c:	4904      	ldr	r1, [pc, #16]	; (8001620 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	4313      	orrs	r3, r2
 8001612:	60cb      	str	r3, [r1, #12]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr
 8001620:	40010400 	.word	0x40010400

08001624 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001624:	b480      	push	{r7}
 8001626:	b083      	sub	sp, #12
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 800162c:	4b05      	ldr	r3, [pc, #20]	; (8001644 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 800162e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001630:	4904      	ldr	r1, [pc, #16]	; (8001644 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4313      	orrs	r3, r2
 8001636:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001638:	bf00      	nop
 800163a:	370c      	adds	r7, #12
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40010400 	.word	0x40010400

08001648 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001648:	b480      	push	{r7}
 800164a:	b083      	sub	sp, #12
 800164c:	af00      	add	r7, sp, #0
 800164e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001650:	4b06      	ldr	r3, [pc, #24]	; (800166c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001652:	68da      	ldr	r2, [r3, #12]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	43db      	mvns	r3, r3
 8001658:	4904      	ldr	r1, [pc, #16]	; (800166c <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800165a:	4013      	ands	r3, r2
 800165c:	60cb      	str	r3, [r1, #12]
}
 800165e:	bf00      	nop
 8001660:	370c      	adds	r7, #12
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40010400 	.word	0x40010400

08001670 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8001678:	4b06      	ldr	r3, [pc, #24]	; (8001694 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800167a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	43db      	mvns	r3, r3
 8001680:	4904      	ldr	r1, [pc, #16]	; (8001694 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001682:	4013      	ands	r3, r2
 8001684:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8001686:	bf00      	nop
 8001688:	370c      	adds	r7, #12
 800168a:	46bd      	mov	sp, r7
 800168c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001690:	4770      	bx	lr
 8001692:	bf00      	nop
 8001694:	40010400 	.word	0x40010400

08001698 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b084      	sub	sp, #16
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80016a0:	2300      	movs	r3, #0
 80016a2:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	7a1b      	ldrb	r3, [r3, #8]
 80016a8:	2b00      	cmp	r3, #0
 80016aa:	f000 80c6 	beq.w	800183a <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d05d      	beq.n	8001772 <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	7a5b      	ldrb	r3, [r3, #9]
 80016ba:	2b01      	cmp	r3, #1
 80016bc:	d00e      	beq.n	80016dc <LL_EXTI_Init+0x44>
 80016be:	2b02      	cmp	r3, #2
 80016c0:	d017      	beq.n	80016f2 <LL_EXTI_Init+0x5a>
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d120      	bne.n	8001708 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4618      	mov	r0, r3
 80016cc:	f7ff ff24 	bl	8001518 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	4618      	mov	r0, r3
 80016d6:	f7ff feaf 	bl	8001438 <LL_EXTI_EnableIT_0_31>
          break;
 80016da:	e018      	b.n	800170e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff fecd 	bl	8001480 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	4618      	mov	r0, r3
 80016ec:	f7ff fef0 	bl	80014d0 <LL_EXTI_EnableEvent_0_31>
          break;
 80016f0:	e00d      	b.n	800170e <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4618      	mov	r0, r3
 80016f8:	f7ff fe9e 	bl	8001438 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4618      	mov	r0, r3
 8001702:	f7ff fee5 	bl	80014d0 <LL_EXTI_EnableEvent_0_31>
          break;
 8001706:	e002      	b.n	800170e <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8001708:	2301      	movs	r3, #1
 800170a:	60fb      	str	r3, [r7, #12]
          break;
 800170c:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	7a9b      	ldrb	r3, [r3, #10]
 8001712:	2b00      	cmp	r3, #0
 8001714:	d02d      	beq.n	8001772 <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	7a9b      	ldrb	r3, [r3, #10]
 800171a:	2b02      	cmp	r3, #2
 800171c:	d00e      	beq.n	800173c <LL_EXTI_Init+0xa4>
 800171e:	2b03      	cmp	r3, #3
 8001720:	d017      	beq.n	8001752 <LL_EXTI_Init+0xba>
 8001722:	2b01      	cmp	r3, #1
 8001724:	d120      	bne.n	8001768 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7ff ff8c 	bl	8001648 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7ff ff17 	bl	8001568 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 800173a:	e01b      	b.n	8001774 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	4618      	mov	r0, r3
 8001742:	f7ff ff35 	bl	80015b0 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7ff ff58 	bl	8001600 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001750:	e010      	b.n	8001774 <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4618      	mov	r0, r3
 8001758:	f7ff ff06 	bl	8001568 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4618      	mov	r0, r3
 8001762:	f7ff ff4d 	bl	8001600 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001766:	e005      	b.n	8001774 <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f043 0302 	orr.w	r3, r3, #2
 800176e:	60fb      	str	r3, [r7, #12]
            break;
 8001770:	e000      	b.n	8001774 <LL_EXTI_Init+0xdc>
        }
      }
 8001772:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	685b      	ldr	r3, [r3, #4]
 8001778:	2b00      	cmp	r3, #0
 800177a:	d073      	beq.n	8001864 <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	7a5b      	ldrb	r3, [r3, #9]
 8001780:	2b01      	cmp	r3, #1
 8001782:	d00e      	beq.n	80017a2 <LL_EXTI_Init+0x10a>
 8001784:	2b02      	cmp	r3, #2
 8001786:	d017      	beq.n	80017b8 <LL_EXTI_Init+0x120>
 8001788:	2b00      	cmp	r3, #0
 800178a:	d120      	bne.n	80017ce <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fed5 	bl	8001540 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	685b      	ldr	r3, [r3, #4]
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fe5e 	bl	800145c <LL_EXTI_EnableIT_32_63>
          break;
 80017a0:	e01a      	b.n	80017d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	685b      	ldr	r3, [r3, #4]
 80017a6:	4618      	mov	r0, r3
 80017a8:	f7ff fe7e 	bl	80014a8 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f7ff fe9f 	bl	80014f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80017b6:	e00f      	b.n	80017d8 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	685b      	ldr	r3, [r3, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff fe4d 	bl	800145c <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe94 	bl	80014f4 <LL_EXTI_EnableEvent_32_63>
          break;
 80017cc:	e004      	b.n	80017d8 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	60fb      	str	r3, [r7, #12]
          break;
 80017d6:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	7a9b      	ldrb	r3, [r3, #10]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d041      	beq.n	8001864 <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	7a9b      	ldrb	r3, [r3, #10]
 80017e4:	2b02      	cmp	r3, #2
 80017e6:	d00e      	beq.n	8001806 <LL_EXTI_Init+0x16e>
 80017e8:	2b03      	cmp	r3, #3
 80017ea:	d017      	beq.n	800181c <LL_EXTI_Init+0x184>
 80017ec:	2b01      	cmp	r3, #1
 80017ee:	d120      	bne.n	8001832 <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	4618      	mov	r0, r3
 80017f6:	f7ff ff3b 	bl	8001670 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	685b      	ldr	r3, [r3, #4]
 80017fe:	4618      	mov	r0, r3
 8001800:	f7ff fec4 	bl	800158c <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001804:	e02f      	b.n	8001866 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685b      	ldr	r3, [r3, #4]
 800180a:	4618      	mov	r0, r3
 800180c:	f7ff fee4 	bl	80015d8 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	4618      	mov	r0, r3
 8001816:	f7ff ff05 	bl	8001624 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 800181a:	e024      	b.n	8001866 <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	685b      	ldr	r3, [r3, #4]
 8001820:	4618      	mov	r0, r3
 8001822:	f7ff feb3 	bl	800158c <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	685b      	ldr	r3, [r3, #4]
 800182a:	4618      	mov	r0, r3
 800182c:	f7ff fefa 	bl	8001624 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001830:	e019      	b.n	8001866 <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	60fb      	str	r3, [r7, #12]
            break;
 8001836:	bf00      	nop
 8001838:	e015      	b.n	8001866 <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4618      	mov	r0, r3
 8001840:	f7ff fe1e 	bl	8001480 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff fe65 	bl	8001518 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	685b      	ldr	r3, [r3, #4]
 8001852:	4618      	mov	r0, r3
 8001854:	f7ff fe28 	bl	80014a8 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	685b      	ldr	r3, [r3, #4]
 800185c:	4618      	mov	r0, r3
 800185e:	f7ff fe6f 	bl	8001540 <LL_EXTI_DisableEvent_32_63>
 8001862:	e000      	b.n	8001866 <LL_EXTI_Init+0x1ce>
      }
 8001864:	bf00      	nop
  }

  return status;
 8001866:	68fb      	ldr	r3, [r7, #12]
}
 8001868:	4618      	mov	r0, r3
 800186a:	3710      	adds	r7, #16
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}

08001870 <LL_GPIO_SetPinMode>:
{
 8001870:	b480      	push	{r7}
 8001872:	b08b      	sub	sp, #44	; 0x2c
 8001874:	af00      	add	r7, sp, #0
 8001876:	60f8      	str	r0, [r7, #12]
 8001878:	60b9      	str	r1, [r7, #8]
 800187a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681a      	ldr	r2, [r3, #0]
 8001880:	68bb      	ldr	r3, [r7, #8]
 8001882:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	fa93 f3a3 	rbit	r3, r3
 800188a:	613b      	str	r3, [r7, #16]
  return result;
 800188c:	693b      	ldr	r3, [r7, #16]
 800188e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	2b00      	cmp	r3, #0
 8001894:	d101      	bne.n	800189a <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001896:	2320      	movs	r3, #32
 8001898:	e003      	b.n	80018a2 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	fab3 f383 	clz	r3, r3
 80018a0:	b2db      	uxtb	r3, r3
 80018a2:	005b      	lsls	r3, r3, #1
 80018a4:	2103      	movs	r1, #3
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43db      	mvns	r3, r3
 80018ac:	401a      	ands	r2, r3
 80018ae:	68bb      	ldr	r3, [r7, #8]
 80018b0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	6a3b      	ldr	r3, [r7, #32]
 80018b4:	fa93 f3a3 	rbit	r3, r3
 80018b8:	61fb      	str	r3, [r7, #28]
  return result;
 80018ba:	69fb      	ldr	r3, [r7, #28]
 80018bc:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d101      	bne.n	80018c8 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80018c4:	2320      	movs	r3, #32
 80018c6:	e003      	b.n	80018d0 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80018c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ca:	fab3 f383 	clz	r3, r3
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	005b      	lsls	r3, r3, #1
 80018d2:	6879      	ldr	r1, [r7, #4]
 80018d4:	fa01 f303 	lsl.w	r3, r1, r3
 80018d8:	431a      	orrs	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	601a      	str	r2, [r3, #0]
}
 80018de:	bf00      	nop
 80018e0:	372c      	adds	r7, #44	; 0x2c
 80018e2:	46bd      	mov	sp, r7
 80018e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e8:	4770      	bx	lr

080018ea <LL_GPIO_SetPinOutputType>:
{
 80018ea:	b480      	push	{r7}
 80018ec:	b085      	sub	sp, #20
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	60f8      	str	r0, [r7, #12]
 80018f2:	60b9      	str	r1, [r7, #8]
 80018f4:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	685a      	ldr	r2, [r3, #4]
 80018fa:	68bb      	ldr	r3, [r7, #8]
 80018fc:	43db      	mvns	r3, r3
 80018fe:	401a      	ands	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	6879      	ldr	r1, [r7, #4]
 8001904:	fb01 f303 	mul.w	r3, r1, r3
 8001908:	431a      	orrs	r2, r3
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	605a      	str	r2, [r3, #4]
}
 800190e:	bf00      	nop
 8001910:	3714      	adds	r7, #20
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr

0800191a <LL_GPIO_SetPinSpeed>:
{
 800191a:	b480      	push	{r7}
 800191c:	b08b      	sub	sp, #44	; 0x2c
 800191e:	af00      	add	r7, sp, #0
 8001920:	60f8      	str	r0, [r7, #12]
 8001922:	60b9      	str	r1, [r7, #8]
 8001924:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	689a      	ldr	r2, [r3, #8]
 800192a:	68bb      	ldr	r3, [r7, #8]
 800192c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	fa93 f3a3 	rbit	r3, r3
 8001934:	613b      	str	r3, [r7, #16]
  return result;
 8001936:	693b      	ldr	r3, [r7, #16]
 8001938:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800193a:	69bb      	ldr	r3, [r7, #24]
 800193c:	2b00      	cmp	r3, #0
 800193e:	d101      	bne.n	8001944 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001940:	2320      	movs	r3, #32
 8001942:	e003      	b.n	800194c <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fab3 f383 	clz	r3, r3
 800194a:	b2db      	uxtb	r3, r3
 800194c:	005b      	lsls	r3, r3, #1
 800194e:	2103      	movs	r1, #3
 8001950:	fa01 f303 	lsl.w	r3, r1, r3
 8001954:	43db      	mvns	r3, r3
 8001956:	401a      	ands	r2, r3
 8001958:	68bb      	ldr	r3, [r7, #8]
 800195a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	fa93 f3a3 	rbit	r3, r3
 8001962:	61fb      	str	r3, [r7, #28]
  return result;
 8001964:	69fb      	ldr	r3, [r7, #28]
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001968:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800196a:	2b00      	cmp	r3, #0
 800196c:	d101      	bne.n	8001972 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 800196e:	2320      	movs	r3, #32
 8001970:	e003      	b.n	800197a <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001974:	fab3 f383 	clz	r3, r3
 8001978:	b2db      	uxtb	r3, r3
 800197a:	005b      	lsls	r3, r3, #1
 800197c:	6879      	ldr	r1, [r7, #4]
 800197e:	fa01 f303 	lsl.w	r3, r1, r3
 8001982:	431a      	orrs	r2, r3
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	372c      	adds	r7, #44	; 0x2c
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_GPIO_SetPinPull>:
{
 8001994:	b480      	push	{r7}
 8001996:	b08b      	sub	sp, #44	; 0x2c
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80019a0:	68fb      	ldr	r3, [r7, #12]
 80019a2:	68da      	ldr	r2, [r3, #12]
 80019a4:	68bb      	ldr	r3, [r7, #8]
 80019a6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	fa93 f3a3 	rbit	r3, r3
 80019ae:	613b      	str	r3, [r7, #16]
  return result;
 80019b0:	693b      	ldr	r3, [r7, #16]
 80019b2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80019b4:	69bb      	ldr	r3, [r7, #24]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d101      	bne.n	80019be <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80019ba:	2320      	movs	r3, #32
 80019bc:	e003      	b.n	80019c6 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80019be:	69bb      	ldr	r3, [r7, #24]
 80019c0:	fab3 f383 	clz	r3, r3
 80019c4:	b2db      	uxtb	r3, r3
 80019c6:	005b      	lsls	r3, r3, #1
 80019c8:	2103      	movs	r1, #3
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	401a      	ands	r2, r3
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019d6:	6a3b      	ldr	r3, [r7, #32]
 80019d8:	fa93 f3a3 	rbit	r3, r3
 80019dc:	61fb      	str	r3, [r7, #28]
  return result;
 80019de:	69fb      	ldr	r3, [r7, #28]
 80019e0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80019e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d101      	bne.n	80019ec <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80019e8:	2320      	movs	r3, #32
 80019ea:	e003      	b.n	80019f4 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80019ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019ee:	fab3 f383 	clz	r3, r3
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	005b      	lsls	r3, r3, #1
 80019f6:	6879      	ldr	r1, [r7, #4]
 80019f8:	fa01 f303 	lsl.w	r3, r1, r3
 80019fc:	431a      	orrs	r2, r3
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	60da      	str	r2, [r3, #12]
}
 8001a02:	bf00      	nop
 8001a04:	372c      	adds	r7, #44	; 0x2c
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr

08001a0e <LL_GPIO_SetAFPin_0_7>:
{
 8001a0e:	b480      	push	{r7}
 8001a10:	b08b      	sub	sp, #44	; 0x2c
 8001a12:	af00      	add	r7, sp, #0
 8001a14:	60f8      	str	r0, [r7, #12]
 8001a16:	60b9      	str	r1, [r7, #8]
 8001a18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	6a1a      	ldr	r2, [r3, #32]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
 8001a20:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	fa93 f3a3 	rbit	r3, r3
 8001a28:	613b      	str	r3, [r7, #16]
  return result;
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001a2e:	69bb      	ldr	r3, [r7, #24]
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d101      	bne.n	8001a38 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001a34:	2320      	movs	r3, #32
 8001a36:	e003      	b.n	8001a40 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001a38:	69bb      	ldr	r3, [r7, #24]
 8001a3a:	fab3 f383 	clz	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
 8001a40:	009b      	lsls	r3, r3, #2
 8001a42:	210f      	movs	r1, #15
 8001a44:	fa01 f303 	lsl.w	r3, r1, r3
 8001a48:	43db      	mvns	r3, r3
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	68bb      	ldr	r3, [r7, #8]
 8001a4e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a50:	6a3b      	ldr	r3, [r7, #32]
 8001a52:	fa93 f3a3 	rbit	r3, r3
 8001a56:	61fb      	str	r3, [r7, #28]
  return result;
 8001a58:	69fb      	ldr	r3, [r7, #28]
 8001a5a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d101      	bne.n	8001a66 <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001a62:	2320      	movs	r3, #32
 8001a64:	e003      	b.n	8001a6e <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a68:	fab3 f383 	clz	r3, r3
 8001a6c:	b2db      	uxtb	r3, r3
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	6879      	ldr	r1, [r7, #4]
 8001a72:	fa01 f303 	lsl.w	r3, r1, r3
 8001a76:	431a      	orrs	r2, r3
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	621a      	str	r2, [r3, #32]
}
 8001a7c:	bf00      	nop
 8001a7e:	372c      	adds	r7, #44	; 0x2c
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr

08001a88 <LL_GPIO_SetAFPin_8_15>:
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b08b      	sub	sp, #44	; 0x2c
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	60f8      	str	r0, [r7, #12]
 8001a90:	60b9      	str	r1, [r7, #8]
 8001a92:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	0a1b      	lsrs	r3, r3, #8
 8001a9c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	fa93 f3a3 	rbit	r3, r3
 8001aa4:	613b      	str	r3, [r7, #16]
  return result;
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001aaa:	69bb      	ldr	r3, [r7, #24]
 8001aac:	2b00      	cmp	r3, #0
 8001aae:	d101      	bne.n	8001ab4 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001ab0:	2320      	movs	r3, #32
 8001ab2:	e003      	b.n	8001abc <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	fab3 f383 	clz	r3, r3
 8001aba:	b2db      	uxtb	r3, r3
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	210f      	movs	r1, #15
 8001ac0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ac4:	43db      	mvns	r3, r3
 8001ac6:	401a      	ands	r2, r3
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	0a1b      	lsrs	r3, r3, #8
 8001acc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	6a3b      	ldr	r3, [r7, #32]
 8001ad0:	fa93 f3a3 	rbit	r3, r3
 8001ad4:	61fb      	str	r3, [r7, #28]
  return result;
 8001ad6:	69fb      	ldr	r3, [r7, #28]
 8001ad8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d101      	bne.n	8001ae4 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001ae0:	2320      	movs	r3, #32
 8001ae2:	e003      	b.n	8001aec <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ae6:	fab3 f383 	clz	r3, r3
 8001aea:	b2db      	uxtb	r3, r3
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	6879      	ldr	r1, [r7, #4]
 8001af0:	fa01 f303 	lsl.w	r3, r1, r3
 8001af4:	431a      	orrs	r2, r3
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001afa:	bf00      	nop
 8001afc:	372c      	adds	r7, #44	; 0x2c
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr

08001b06 <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001b06:	b580      	push	{r7, lr}
 8001b08:	b088      	sub	sp, #32
 8001b0a:	af00      	add	r7, sp, #0
 8001b0c:	6078      	str	r0, [r7, #4]
 8001b0e:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	fa93 f3a3 	rbit	r3, r3
 8001b1c:	60fb      	str	r3, [r7, #12]
  return result;
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d101      	bne.n	8001b2c <LL_GPIO_Init+0x26>
    return 32U;
 8001b28:	2320      	movs	r3, #32
 8001b2a:	e003      	b.n	8001b34 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	fab3 f383 	clz	r3, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001b36:	e040      	b.n	8001bba <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	681a      	ldr	r2, [r3, #0]
 8001b3c:	2101      	movs	r1, #1
 8001b3e:	69fb      	ldr	r3, [r7, #28]
 8001b40:	fa01 f303 	lsl.w	r3, r1, r3
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001b48:	69bb      	ldr	r3, [r7, #24]
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d032      	beq.n	8001bb4 <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	685b      	ldr	r3, [r3, #4]
 8001b52:	461a      	mov	r2, r3
 8001b54:	69b9      	ldr	r1, [r7, #24]
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f7ff fe8a 	bl	8001870 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	685b      	ldr	r3, [r3, #4]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d003      	beq.n	8001b6c <LL_GPIO_Init+0x66>
 8001b64:	683b      	ldr	r3, [r7, #0]
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	2b02      	cmp	r3, #2
 8001b6a:	d106      	bne.n	8001b7a <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	689b      	ldr	r3, [r3, #8]
 8001b70:	461a      	mov	r2, r3
 8001b72:	69b9      	ldr	r1, [r7, #24]
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f7ff fed0 	bl	800191a <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	691b      	ldr	r3, [r3, #16]
 8001b7e:	461a      	mov	r2, r3
 8001b80:	69b9      	ldr	r1, [r7, #24]
 8001b82:	6878      	ldr	r0, [r7, #4]
 8001b84:	f7ff ff06 	bl	8001994 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	685b      	ldr	r3, [r3, #4]
 8001b8c:	2b02      	cmp	r3, #2
 8001b8e:	d111      	bne.n	8001bb4 <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001b90:	69bb      	ldr	r3, [r7, #24]
 8001b92:	2bff      	cmp	r3, #255	; 0xff
 8001b94:	d807      	bhi.n	8001ba6 <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001b96:	683b      	ldr	r3, [r7, #0]
 8001b98:	695b      	ldr	r3, [r3, #20]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	69b9      	ldr	r1, [r7, #24]
 8001b9e:	6878      	ldr	r0, [r7, #4]
 8001ba0:	f7ff ff35 	bl	8001a0e <LL_GPIO_SetAFPin_0_7>
 8001ba4:	e006      	b.n	8001bb4 <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	695b      	ldr	r3, [r3, #20]
 8001baa:	461a      	mov	r2, r3
 8001bac:	69b9      	ldr	r1, [r7, #24]
 8001bae:	6878      	ldr	r0, [r7, #4]
 8001bb0:	f7ff ff6a 	bl	8001a88 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	681a      	ldr	r2, [r3, #0]
 8001bbe:	69fb      	ldr	r3, [r7, #28]
 8001bc0:	fa22 f303 	lsr.w	r3, r2, r3
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d1b7      	bne.n	8001b38 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	685b      	ldr	r3, [r3, #4]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d003      	beq.n	8001bd8 <LL_GPIO_Init+0xd2>
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	685b      	ldr	r3, [r3, #4]
 8001bd4:	2b02      	cmp	r3, #2
 8001bd6:	d107      	bne.n	8001be8 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001bd8:	683b      	ldr	r3, [r7, #0]
 8001bda:	6819      	ldr	r1, [r3, #0]
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	68db      	ldr	r3, [r3, #12]
 8001be0:	461a      	mov	r2, r3
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7ff fe81 	bl	80018ea <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8001be8:	2300      	movs	r3, #0
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3720      	adds	r7, #32
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}
	...

08001bf4 <LL_RCC_HSI_IsReady>:
{
 8001bf4:	b480      	push	{r7}
 8001bf6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001bf8:	4b07      	ldr	r3, [pc, #28]	; (8001c18 <LL_RCC_HSI_IsReady+0x24>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c00:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001c04:	d101      	bne.n	8001c0a <LL_RCC_HSI_IsReady+0x16>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <LL_RCC_HSI_IsReady+0x18>
 8001c0a:	2300      	movs	r3, #0
}
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c14:	4770      	bx	lr
 8001c16:	bf00      	nop
 8001c18:	40021000 	.word	0x40021000

08001c1c <LL_RCC_LSE_IsReady>:
{
 8001c1c:	b480      	push	{r7}
 8001c1e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001c20:	4b07      	ldr	r3, [pc, #28]	; (8001c40 <LL_RCC_LSE_IsReady+0x24>)
 8001c22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c26:	f003 0302 	and.w	r3, r3, #2
 8001c2a:	2b02      	cmp	r3, #2
 8001c2c:	d101      	bne.n	8001c32 <LL_RCC_LSE_IsReady+0x16>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e000      	b.n	8001c34 <LL_RCC_LSE_IsReady+0x18>
 8001c32:	2300      	movs	r3, #0
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	40021000 	.word	0x40021000

08001c44 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001c44:	b480      	push	{r7}
 8001c46:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001c48:	4b06      	ldr	r3, [pc, #24]	; (8001c64 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f003 0308 	and.w	r3, r3, #8
 8001c50:	2b08      	cmp	r3, #8
 8001c52:	d101      	bne.n	8001c58 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001c54:	2301      	movs	r3, #1
 8001c56:	e000      	b.n	8001c5a <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c62:	4770      	bx	lr
 8001c64:	40021000 	.word	0x40021000

08001c68 <LL_RCC_MSI_GetRange>:
{
 8001c68:	b480      	push	{r7}
 8001c6a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001c6c:	4b04      	ldr	r3, [pc, #16]	; (8001c80 <LL_RCC_MSI_GetRange+0x18>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	40021000 	.word	0x40021000

08001c84 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001c84:	b480      	push	{r7}
 8001c86:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001c88:	4b04      	ldr	r3, [pc, #16]	; (8001c9c <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001c8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c8e:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr
 8001c9c:	40021000 	.word	0x40021000

08001ca0 <LL_RCC_GetSysClkSource>:
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001ca4:	4b04      	ldr	r3, [pc, #16]	; (8001cb8 <LL_RCC_GetSysClkSource+0x18>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f003 030c 	and.w	r3, r3, #12
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb4:	4770      	bx	lr
 8001cb6:	bf00      	nop
 8001cb8:	40021000 	.word	0x40021000

08001cbc <LL_RCC_GetAHBPrescaler>:
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001cc0:	4b04      	ldr	r3, [pc, #16]	; (8001cd4 <LL_RCC_GetAHBPrescaler+0x18>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	46bd      	mov	sp, r7
 8001ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd0:	4770      	bx	lr
 8001cd2:	bf00      	nop
 8001cd4:	40021000 	.word	0x40021000

08001cd8 <LL_RCC_GetAPB1Prescaler>:
{
 8001cd8:	b480      	push	{r7}
 8001cda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001cdc:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001ce4:	4618      	mov	r0, r3
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40021000 	.word	0x40021000

08001cf4 <LL_RCC_GetAPB2Prescaler>:
{
 8001cf4:	b480      	push	{r7}
 8001cf6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001cf8:	4b04      	ldr	r3, [pc, #16]	; (8001d0c <LL_RCC_GetAPB2Prescaler+0x18>)
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	46bd      	mov	sp, r7
 8001d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d08:	4770      	bx	lr
 8001d0a:	bf00      	nop
 8001d0c:	40021000 	.word	0x40021000

08001d10 <LL_RCC_GetUSARTClockSource>:
{
 8001d10:	b480      	push	{r7}
 8001d12:	b083      	sub	sp, #12
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 8001d18:	4b06      	ldr	r3, [pc, #24]	; (8001d34 <LL_RCC_GetUSARTClockSource+0x24>)
 8001d1a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	401a      	ands	r2, r3
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	041b      	lsls	r3, r3, #16
 8001d26:	4313      	orrs	r3, r2
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr
 8001d34:	40021000 	.word	0x40021000

08001d38 <LL_RCC_GetUARTClockSource>:
{
 8001d38:	b480      	push	{r7}
 8001d3a:	b083      	sub	sp, #12
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8001d40:	4b06      	ldr	r3, [pc, #24]	; (8001d5c <LL_RCC_GetUARTClockSource+0x24>)
 8001d42:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	401a      	ands	r2, r3
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	041b      	lsls	r3, r3, #16
 8001d4e:	4313      	orrs	r3, r2
}
 8001d50:	4618      	mov	r0, r3
 8001d52:	370c      	adds	r7, #12
 8001d54:	46bd      	mov	sp, r7
 8001d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d5a:	4770      	bx	lr
 8001d5c:	40021000 	.word	0x40021000

08001d60 <LL_RCC_PLL_GetMainSource>:
{
 8001d60:	b480      	push	{r7}
 8001d62:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8001d64:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <LL_RCC_PLL_GetMainSource+0x18>)
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0303 	and.w	r3, r3, #3
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	40021000 	.word	0x40021000

08001d7c <LL_RCC_PLL_GetN>:
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8001d80:	4b04      	ldr	r3, [pc, #16]	; (8001d94 <LL_RCC_PLL_GetN+0x18>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	0a1b      	lsrs	r3, r3, #8
 8001d86:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	40021000 	.word	0x40021000

08001d98 <LL_RCC_PLL_GetR>:
{
 8001d98:	b480      	push	{r7}
 8001d9a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8001d9c:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <LL_RCC_PLL_GetR+0x18>)
 8001d9e:	68db      	ldr	r3, [r3, #12]
 8001da0:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	46bd      	mov	sp, r7
 8001da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dac:	4770      	bx	lr
 8001dae:	bf00      	nop
 8001db0:	40021000 	.word	0x40021000

08001db4 <LL_RCC_PLL_GetDivider>:
{
 8001db4:	b480      	push	{r7}
 8001db6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8001db8:	4b04      	ldr	r3, [pc, #16]	; (8001dcc <LL_RCC_PLL_GetDivider+0x18>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000

08001dd0 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b084      	sub	sp, #16
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2b03      	cmp	r3, #3
 8001de0:	d137      	bne.n	8001e52 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f7ff ff94 	bl	8001d10 <LL_RCC_GetUSARTClockSource>
 8001de8:	4603      	mov	r3, r0
 8001dea:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8001dee:	2b03      	cmp	r3, #3
 8001df0:	f200 80b2 	bhi.w	8001f58 <LL_RCC_GetUSARTClockFreq+0x188>
 8001df4:	a201      	add	r2, pc, #4	; (adr r2, 8001dfc <LL_RCC_GetUSARTClockFreq+0x2c>)
 8001df6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dfa:	bf00      	nop
 8001dfc:	08001e3b 	.word	0x08001e3b
 8001e00:	08001e0d 	.word	0x08001e0d
 8001e04:	08001e15 	.word	0x08001e15
 8001e08:	08001e27 	.word	0x08001e27
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001e0c:	f000 f952 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001e10:	60f8      	str	r0, [r7, #12]
        break;
 8001e12:	e0b2      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001e14:	f7ff feee 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001e18:	4603      	mov	r3, r0
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 809e 	beq.w	8001f5c <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 8001e20:	4b58      	ldr	r3, [pc, #352]	; (8001f84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001e22:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e24:	e09a      	b.n	8001f5c <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001e26:	f7ff fef9 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001e2a:	4603      	mov	r3, r0
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	f000 8097 	beq.w	8001f60 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 8001e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e36:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001e38:	e092      	b.n	8001f60 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001e3a:	f000 f93b 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	4618      	mov	r0, r3
 8001e42:	f000 f9c7 	bl	80021d4 <RCC_GetHCLKClockFreq>
 8001e46:	4603      	mov	r3, r0
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f000 f9ed 	bl	8002228 <RCC_GetPCLK2ClockFreq>
 8001e4e:	60f8      	str	r0, [r7, #12]
        break;
 8001e50:	e093      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0c      	cmp	r3, #12
 8001e56:	d146      	bne.n	8001ee6 <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff ff59 	bl	8001d10 <LL_RCC_GetUSARTClockSource>
 8001e5e:	4603      	mov	r3, r0
 8001e60:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8001e64:	2b0c      	cmp	r3, #12
 8001e66:	d87d      	bhi.n	8001f64 <LL_RCC_GetUSARTClockFreq+0x194>
 8001e68:	a201      	add	r2, pc, #4	; (adr r2, 8001e70 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8001e6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e6e:	bf00      	nop
 8001e70:	08001ecf 	.word	0x08001ecf
 8001e74:	08001f65 	.word	0x08001f65
 8001e78:	08001f65 	.word	0x08001f65
 8001e7c:	08001f65 	.word	0x08001f65
 8001e80:	08001ea5 	.word	0x08001ea5
 8001e84:	08001f65 	.word	0x08001f65
 8001e88:	08001f65 	.word	0x08001f65
 8001e8c:	08001f65 	.word	0x08001f65
 8001e90:	08001ead 	.word	0x08001ead
 8001e94:	08001f65 	.word	0x08001f65
 8001e98:	08001f65 	.word	0x08001f65
 8001e9c:	08001f65 	.word	0x08001f65
 8001ea0:	08001ebd 	.word	0x08001ebd
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8001ea4:	f000 f906 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001ea8:	60f8      	str	r0, [r7, #12]
        break;
 8001eaa:	e066      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8001eac:	f7ff fea2 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001eb0:	4603      	mov	r3, r0
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d058      	beq.n	8001f68 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 8001eb6:	4b33      	ldr	r3, [pc, #204]	; (8001f84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001eb8:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001eba:	e055      	b.n	8001f68 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8001ebc:	f7ff feae 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d052      	beq.n	8001f6c <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 8001ec6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001eca:	60fb      	str	r3, [r7, #12]
        }
        break;
 8001ecc:	e04e      	b.n	8001f6c <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ece:	f000 f8f1 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	4618      	mov	r0, r3
 8001ed6:	f000 f97d 	bl	80021d4 <RCC_GetHCLKClockFreq>
 8001eda:	4603      	mov	r3, r0
 8001edc:	4618      	mov	r0, r3
 8001ede:	f000 f98f 	bl	8002200 <RCC_GetPCLK1ClockFreq>
 8001ee2:	60f8      	str	r0, [r7, #12]
        break;
 8001ee4:	e049      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2b30      	cmp	r3, #48	; 0x30
 8001eea:	d141      	bne.n	8001f70 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff0f 	bl	8001d10 <LL_RCC_GetUSARTClockSource>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	4a24      	ldr	r2, [pc, #144]	; (8001f88 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d00d      	beq.n	8001f16 <LL_RCC_GetUSARTClockFreq+0x146>
 8001efa:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8001efc:	4293      	cmp	r3, r2
 8001efe:	d803      	bhi.n	8001f08 <LL_RCC_GetUSARTClockFreq+0x138>
 8001f00:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8001f04:	d01c      	beq.n	8001f40 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 8001f06:	e038      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8001f08:	4a20      	ldr	r2, [pc, #128]	; (8001f8c <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d007      	beq.n	8001f1e <LL_RCC_GetUSARTClockFreq+0x14e>
 8001f0e:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8001f12:	d00c      	beq.n	8001f2e <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 8001f14:	e031      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 8001f16:	f000 f8cd 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001f1a:	60f8      	str	r0, [r7, #12]
          break;
 8001f1c:	e02d      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 8001f1e:	f7ff fe69 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d025      	beq.n	8001f74 <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 8001f28:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8001f2a:	60fb      	str	r3, [r7, #12]
          break;
 8001f2c:	e022      	b.n	8001f74 <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 8001f2e:	f7ff fe75 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001f32:	4603      	mov	r3, r0
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d01f      	beq.n	8001f78 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8001f38:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f3c:	60fb      	str	r3, [r7, #12]
          break;
 8001f3e:	e01b      	b.n	8001f78 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001f40:	f000 f8b8 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4618      	mov	r0, r3
 8001f48:	f000 f944 	bl	80021d4 <RCC_GetHCLKClockFreq>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f000 f956 	bl	8002200 <RCC_GetPCLK1ClockFreq>
 8001f54:	60f8      	str	r0, [r7, #12]
          break;
 8001f56:	e010      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f58:	bf00      	nop
 8001f5a:	e00e      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f5c:	bf00      	nop
 8001f5e:	e00c      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f60:	bf00      	nop
 8001f62:	e00a      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f64:	bf00      	nop
 8001f66:	e008      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f68:	bf00      	nop
 8001f6a:	e006      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8001f6c:	bf00      	nop
 8001f6e:	e004      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8001f70:	bf00      	nop
 8001f72:	e002      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001f74:	bf00      	nop
 8001f76:	e000      	b.n	8001f7a <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8001f78:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3710      	adds	r7, #16
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	00f42400 	.word	0x00f42400
 8001f88:	00300010 	.word	0x00300010
 8001f8c:	00300020 	.word	0x00300020

08001f90 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	b084      	sub	sp, #16
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2bc0      	cmp	r3, #192	; 0xc0
 8001fa0:	d135      	bne.n	800200e <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001fa2:	6878      	ldr	r0, [r7, #4]
 8001fa4:	f7ff fec8 	bl	8001d38 <LL_RCC_GetUARTClockSource>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a3d      	ldr	r2, [pc, #244]	; (80020a0 <LL_RCC_GetUARTClockFreq+0x110>)
 8001fac:	4293      	cmp	r3, r2
 8001fae:	d00d      	beq.n	8001fcc <LL_RCC_GetUARTClockFreq+0x3c>
 8001fb0:	4a3b      	ldr	r2, [pc, #236]	; (80020a0 <LL_RCC_GetUARTClockFreq+0x110>)
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d803      	bhi.n	8001fbe <LL_RCC_GetUARTClockFreq+0x2e>
 8001fb6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001fba:	d01c      	beq.n	8001ff6 <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8001fbc:	e02c      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8001fbe:	4a39      	ldr	r2, [pc, #228]	; (80020a4 <LL_RCC_GetUARTClockFreq+0x114>)
 8001fc0:	4293      	cmp	r3, r2
 8001fc2:	d007      	beq.n	8001fd4 <LL_RCC_GetUARTClockFreq+0x44>
 8001fc4:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8001fc8:	d00c      	beq.n	8001fe4 <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8001fca:	e025      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8001fcc:	f000 f872 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001fd0:	60f8      	str	r0, [r7, #12]
        break;
 8001fd2:	e021      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8001fd4:	f7ff fe0e 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8001fd8:	4603      	mov	r3, r0
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d019      	beq.n	8002012 <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8001fde:	4b32      	ldr	r3, [pc, #200]	; (80020a8 <LL_RCC_GetUARTClockFreq+0x118>)
 8001fe0:	60fb      	str	r3, [r7, #12]
        break;
 8001fe2:	e016      	b.n	8002012 <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8001fe4:	f7ff fe1a 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d013      	beq.n	8002016 <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8001fee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001ff2:	60fb      	str	r3, [r7, #12]
        break;
 8001ff4:	e00f      	b.n	8002016 <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8001ff6:	f000 f85d 	bl	80020b4 <RCC_GetSystemClockFreq>
 8001ffa:	4603      	mov	r3, r0
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f8e9 	bl	80021d4 <RCC_GetHCLKClockFreq>
 8002002:	4603      	mov	r3, r0
 8002004:	4618      	mov	r0, r3
 8002006:	f000 f8fb 	bl	8002200 <RCC_GetPCLK1ClockFreq>
 800200a:	60f8      	str	r0, [r7, #12]
        break;
 800200c:	e004      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 800200e:	bf00      	nop
 8002010:	e002      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8002012:	bf00      	nop
 8002014:	e000      	b.n	8002018 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8002016:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800201e:	d135      	bne.n	800208c <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8002020:	6878      	ldr	r0, [r7, #4]
 8002022:	f7ff fe89 	bl	8001d38 <LL_RCC_GetUARTClockSource>
 8002026:	4603      	mov	r3, r0
 8002028:	4a20      	ldr	r2, [pc, #128]	; (80020ac <LL_RCC_GetUARTClockFreq+0x11c>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d00d      	beq.n	800204a <LL_RCC_GetUARTClockFreq+0xba>
 800202e:	4a1f      	ldr	r2, [pc, #124]	; (80020ac <LL_RCC_GetUARTClockFreq+0x11c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d803      	bhi.n	800203c <LL_RCC_GetUARTClockFreq+0xac>
 8002034:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8002038:	d01c      	beq.n	8002074 <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 800203a:	e02c      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800203c:	4a1c      	ldr	r2, [pc, #112]	; (80020b0 <LL_RCC_GetUARTClockFreq+0x120>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d007      	beq.n	8002052 <LL_RCC_GetUARTClockFreq+0xc2>
 8002042:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002046:	d00c      	beq.n	8002062 <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8002048:	e025      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 800204a:	f000 f833 	bl	80020b4 <RCC_GetSystemClockFreq>
 800204e:	60f8      	str	r0, [r7, #12]
        break;
 8002050:	e021      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8002052:	f7ff fdcf 	bl	8001bf4 <LL_RCC_HSI_IsReady>
 8002056:	4603      	mov	r3, r0
 8002058:	2b00      	cmp	r3, #0
 800205a:	d019      	beq.n	8002090 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 800205c:	4b12      	ldr	r3, [pc, #72]	; (80020a8 <LL_RCC_GetUARTClockFreq+0x118>)
 800205e:	60fb      	str	r3, [r7, #12]
        break;
 8002060:	e016      	b.n	8002090 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8002062:	f7ff fddb 	bl	8001c1c <LL_RCC_LSE_IsReady>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d013      	beq.n	8002094 <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 800206c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002070:	60fb      	str	r3, [r7, #12]
        break;
 8002072:	e00f      	b.n	8002094 <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002074:	f000 f81e 	bl	80020b4 <RCC_GetSystemClockFreq>
 8002078:	4603      	mov	r3, r0
 800207a:	4618      	mov	r0, r3
 800207c:	f000 f8aa 	bl	80021d4 <RCC_GetHCLKClockFreq>
 8002080:	4603      	mov	r3, r0
 8002082:	4618      	mov	r0, r3
 8002084:	f000 f8bc 	bl	8002200 <RCC_GetPCLK1ClockFreq>
 8002088:	60f8      	str	r0, [r7, #12]
        break;
 800208a:	e004      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 800208c:	bf00      	nop
 800208e:	e002      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8002090:	bf00      	nop
 8002092:	e000      	b.n	8002096 <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8002094:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8002096:	68fb      	ldr	r3, [r7, #12]
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}
 80020a0:	00c00040 	.word	0x00c00040
 80020a4:	00c00080 	.word	0x00c00080
 80020a8:	00f42400 	.word	0x00f42400
 80020ac:	03000100 	.word	0x03000100
 80020b0:	03000200 	.word	0x03000200

080020b4 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b082      	sub	sp, #8
 80020b8:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80020ba:	f7ff fdf1 	bl	8001ca0 <LL_RCC_GetSysClkSource>
 80020be:	4603      	mov	r3, r0
 80020c0:	2b0c      	cmp	r3, #12
 80020c2:	d851      	bhi.n	8002168 <RCC_GetSystemClockFreq+0xb4>
 80020c4:	a201      	add	r2, pc, #4	; (adr r2, 80020cc <RCC_GetSystemClockFreq+0x18>)
 80020c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020ca:	bf00      	nop
 80020cc:	08002101 	.word	0x08002101
 80020d0:	08002169 	.word	0x08002169
 80020d4:	08002169 	.word	0x08002169
 80020d8:	08002169 	.word	0x08002169
 80020dc:	08002155 	.word	0x08002155
 80020e0:	08002169 	.word	0x08002169
 80020e4:	08002169 	.word	0x08002169
 80020e8:	08002169 	.word	0x08002169
 80020ec:	0800215b 	.word	0x0800215b
 80020f0:	08002169 	.word	0x08002169
 80020f4:	08002169 	.word	0x08002169
 80020f8:	08002169 	.word	0x08002169
 80020fc:	08002161 	.word	0x08002161
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002100:	f7ff fda0 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002104:	4603      	mov	r3, r0
 8002106:	2b00      	cmp	r3, #0
 8002108:	d111      	bne.n	800212e <RCC_GetSystemClockFreq+0x7a>
 800210a:	f7ff fd9b 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d004      	beq.n	800211e <RCC_GetSystemClockFreq+0x6a>
 8002114:	f7ff fda8 	bl	8001c68 <LL_RCC_MSI_GetRange>
 8002118:	4603      	mov	r3, r0
 800211a:	0a1b      	lsrs	r3, r3, #8
 800211c:	e003      	b.n	8002126 <RCC_GetSystemClockFreq+0x72>
 800211e:	f7ff fdb1 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 8002122:	4603      	mov	r3, r0
 8002124:	0a1b      	lsrs	r3, r3, #8
 8002126:	4a28      	ldr	r2, [pc, #160]	; (80021c8 <RCC_GetSystemClockFreq+0x114>)
 8002128:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800212c:	e010      	b.n	8002150 <RCC_GetSystemClockFreq+0x9c>
 800212e:	f7ff fd89 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d004      	beq.n	8002142 <RCC_GetSystemClockFreq+0x8e>
 8002138:	f7ff fd96 	bl	8001c68 <LL_RCC_MSI_GetRange>
 800213c:	4603      	mov	r3, r0
 800213e:	091b      	lsrs	r3, r3, #4
 8002140:	e003      	b.n	800214a <RCC_GetSystemClockFreq+0x96>
 8002142:	f7ff fd9f 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 8002146:	4603      	mov	r3, r0
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <RCC_GetSystemClockFreq+0x114>)
 800214c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002150:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002152:	e033      	b.n	80021bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002154:	4b1d      	ldr	r3, [pc, #116]	; (80021cc <RCC_GetSystemClockFreq+0x118>)
 8002156:	607b      	str	r3, [r7, #4]
      break;
 8002158:	e030      	b.n	80021bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800215a:	4b1d      	ldr	r3, [pc, #116]	; (80021d0 <RCC_GetSystemClockFreq+0x11c>)
 800215c:	607b      	str	r3, [r7, #4]
      break;
 800215e:	e02d      	b.n	80021bc <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8002160:	f000 f876 	bl	8002250 <RCC_PLL_GetFreqDomain_SYS>
 8002164:	6078      	str	r0, [r7, #4]
      break;
 8002166:	e029      	b.n	80021bc <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002168:	f7ff fd6c 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800216c:	4603      	mov	r3, r0
 800216e:	2b00      	cmp	r3, #0
 8002170:	d111      	bne.n	8002196 <RCC_GetSystemClockFreq+0xe2>
 8002172:	f7ff fd67 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002176:	4603      	mov	r3, r0
 8002178:	2b00      	cmp	r3, #0
 800217a:	d004      	beq.n	8002186 <RCC_GetSystemClockFreq+0xd2>
 800217c:	f7ff fd74 	bl	8001c68 <LL_RCC_MSI_GetRange>
 8002180:	4603      	mov	r3, r0
 8002182:	0a1b      	lsrs	r3, r3, #8
 8002184:	e003      	b.n	800218e <RCC_GetSystemClockFreq+0xda>
 8002186:	f7ff fd7d 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 800218a:	4603      	mov	r3, r0
 800218c:	0a1b      	lsrs	r3, r3, #8
 800218e:	4a0e      	ldr	r2, [pc, #56]	; (80021c8 <RCC_GetSystemClockFreq+0x114>)
 8002190:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002194:	e010      	b.n	80021b8 <RCC_GetSystemClockFreq+0x104>
 8002196:	f7ff fd55 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d004      	beq.n	80021aa <RCC_GetSystemClockFreq+0xf6>
 80021a0:	f7ff fd62 	bl	8001c68 <LL_RCC_MSI_GetRange>
 80021a4:	4603      	mov	r3, r0
 80021a6:	091b      	lsrs	r3, r3, #4
 80021a8:	e003      	b.n	80021b2 <RCC_GetSystemClockFreq+0xfe>
 80021aa:	f7ff fd6b 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 80021ae:	4603      	mov	r3, r0
 80021b0:	091b      	lsrs	r3, r3, #4
 80021b2:	4a05      	ldr	r2, [pc, #20]	; (80021c8 <RCC_GetSystemClockFreq+0x114>)
 80021b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021b8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80021ba:	bf00      	nop
  }

  return frequency;
 80021bc:	687b      	ldr	r3, [r7, #4]
}
 80021be:	4618      	mov	r0, r3
 80021c0:	3708      	adds	r7, #8
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	08003a7c 	.word	0x08003a7c
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80021dc:	f7ff fd6e 	bl	8001cbc <LL_RCC_GetAHBPrescaler>
 80021e0:	4603      	mov	r3, r0
 80021e2:	091b      	lsrs	r3, r3, #4
 80021e4:	f003 030f 	and.w	r3, r3, #15
 80021e8:	4a04      	ldr	r2, [pc, #16]	; (80021fc <RCC_GetHCLKClockFreq+0x28>)
 80021ea:	5cd3      	ldrb	r3, [r2, r3]
 80021ec:	461a      	mov	r2, r3
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	40d3      	lsrs	r3, r2
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3708      	adds	r7, #8
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	08003a64 	.word	0x08003a64

08002200 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b082      	sub	sp, #8
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002208:	f7ff fd66 	bl	8001cd8 <LL_RCC_GetAPB1Prescaler>
 800220c:	4603      	mov	r3, r0
 800220e:	0a1b      	lsrs	r3, r3, #8
 8002210:	4a04      	ldr	r2, [pc, #16]	; (8002224 <RCC_GetPCLK1ClockFreq+0x24>)
 8002212:	5cd3      	ldrb	r3, [r2, r3]
 8002214:	461a      	mov	r2, r3
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	40d3      	lsrs	r3, r2
}
 800221a:	4618      	mov	r0, r3
 800221c:	3708      	adds	r7, #8
 800221e:	46bd      	mov	sp, r7
 8002220:	bd80      	pop	{r7, pc}
 8002222:	bf00      	nop
 8002224:	08003a74 	.word	0x08003a74

08002228 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002228:	b580      	push	{r7, lr}
 800222a:	b082      	sub	sp, #8
 800222c:	af00      	add	r7, sp, #0
 800222e:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8002230:	f7ff fd60 	bl	8001cf4 <LL_RCC_GetAPB2Prescaler>
 8002234:	4603      	mov	r3, r0
 8002236:	0adb      	lsrs	r3, r3, #11
 8002238:	4a04      	ldr	r2, [pc, #16]	; (800224c <RCC_GetPCLK2ClockFreq+0x24>)
 800223a:	5cd3      	ldrb	r3, [r2, r3]
 800223c:	461a      	mov	r2, r3
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	40d3      	lsrs	r3, r2
}
 8002242:	4618      	mov	r0, r3
 8002244:	3708      	adds	r7, #8
 8002246:	46bd      	mov	sp, r7
 8002248:	bd80      	pop	{r7, pc}
 800224a:	bf00      	nop
 800224c:	08003a74 	.word	0x08003a74

08002250 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8002250:	b590      	push	{r4, r7, lr}
 8002252:	b083      	sub	sp, #12
 8002254:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002256:	f7ff fd83 	bl	8001d60 <LL_RCC_PLL_GetMainSource>
 800225a:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	2b02      	cmp	r3, #2
 8002260:	d02d      	beq.n	80022be <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8002262:	2b03      	cmp	r3, #3
 8002264:	d02e      	beq.n	80022c4 <RCC_PLL_GetFreqDomain_SYS+0x74>
 8002266:	2b01      	cmp	r3, #1
 8002268:	d12f      	bne.n	80022ca <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800226a:	f7ff fceb 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800226e:	4603      	mov	r3, r0
 8002270:	2b00      	cmp	r3, #0
 8002272:	d111      	bne.n	8002298 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8002274:	f7ff fce6 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002278:	4603      	mov	r3, r0
 800227a:	2b00      	cmp	r3, #0
 800227c:	d004      	beq.n	8002288 <RCC_PLL_GetFreqDomain_SYS+0x38>
 800227e:	f7ff fcf3 	bl	8001c68 <LL_RCC_MSI_GetRange>
 8002282:	4603      	mov	r3, r0
 8002284:	0a1b      	lsrs	r3, r3, #8
 8002286:	e003      	b.n	8002290 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8002288:	f7ff fcfc 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 800228c:	4603      	mov	r3, r0
 800228e:	0a1b      	lsrs	r3, r3, #8
 8002290:	4a2f      	ldr	r2, [pc, #188]	; (8002350 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002296:	e010      	b.n	80022ba <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8002298:	f7ff fcd4 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 800229c:	4603      	mov	r3, r0
 800229e:	2b00      	cmp	r3, #0
 80022a0:	d004      	beq.n	80022ac <RCC_PLL_GetFreqDomain_SYS+0x5c>
 80022a2:	f7ff fce1 	bl	8001c68 <LL_RCC_MSI_GetRange>
 80022a6:	4603      	mov	r3, r0
 80022a8:	091b      	lsrs	r3, r3, #4
 80022aa:	e003      	b.n	80022b4 <RCC_PLL_GetFreqDomain_SYS+0x64>
 80022ac:	f7ff fcea 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 80022b0:	4603      	mov	r3, r0
 80022b2:	091b      	lsrs	r3, r3, #4
 80022b4:	4a26      	ldr	r2, [pc, #152]	; (8002350 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80022b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022ba:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80022bc:	e02f      	b.n	800231e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80022be:	4b25      	ldr	r3, [pc, #148]	; (8002354 <RCC_PLL_GetFreqDomain_SYS+0x104>)
 80022c0:	607b      	str	r3, [r7, #4]
      break;
 80022c2:	e02c      	b.n	800231e <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80022c4:	4b24      	ldr	r3, [pc, #144]	; (8002358 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 80022c6:	607b      	str	r3, [r7, #4]
      break;
 80022c8:	e029      	b.n	800231e <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80022ca:	f7ff fcbb 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d111      	bne.n	80022f8 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 80022d4:	f7ff fcb6 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80022d8:	4603      	mov	r3, r0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d004      	beq.n	80022e8 <RCC_PLL_GetFreqDomain_SYS+0x98>
 80022de:	f7ff fcc3 	bl	8001c68 <LL_RCC_MSI_GetRange>
 80022e2:	4603      	mov	r3, r0
 80022e4:	0a1b      	lsrs	r3, r3, #8
 80022e6:	e003      	b.n	80022f0 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 80022e8:	f7ff fccc 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 80022ec:	4603      	mov	r3, r0
 80022ee:	0a1b      	lsrs	r3, r3, #8
 80022f0:	4a17      	ldr	r2, [pc, #92]	; (8002350 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 80022f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022f6:	e010      	b.n	800231a <RCC_PLL_GetFreqDomain_SYS+0xca>
 80022f8:	f7ff fca4 	bl	8001c44 <LL_RCC_MSI_IsEnabledRangeSelect>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d004      	beq.n	800230c <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8002302:	f7ff fcb1 	bl	8001c68 <LL_RCC_MSI_GetRange>
 8002306:	4603      	mov	r3, r0
 8002308:	091b      	lsrs	r3, r3, #4
 800230a:	e003      	b.n	8002314 <RCC_PLL_GetFreqDomain_SYS+0xc4>
 800230c:	f7ff fcba 	bl	8001c84 <LL_RCC_MSI_GetRangeAfterStandby>
 8002310:	4603      	mov	r3, r0
 8002312:	091b      	lsrs	r3, r3, #4
 8002314:	4a0e      	ldr	r2, [pc, #56]	; (8002350 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8002316:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800231a:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800231c:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800231e:	f7ff fd49 	bl	8001db4 <LL_RCC_PLL_GetDivider>
 8002322:	4603      	mov	r3, r0
 8002324:	091b      	lsrs	r3, r3, #4
 8002326:	3301      	adds	r3, #1
 8002328:	687a      	ldr	r2, [r7, #4]
 800232a:	fbb2 f4f3 	udiv	r4, r2, r3
 800232e:	f7ff fd25 	bl	8001d7c <LL_RCC_PLL_GetN>
 8002332:	4603      	mov	r3, r0
 8002334:	fb03 f404 	mul.w	r4, r3, r4
 8002338:	f7ff fd2e 	bl	8001d98 <LL_RCC_PLL_GetR>
 800233c:	4603      	mov	r3, r0
 800233e:	0e5b      	lsrs	r3, r3, #25
 8002340:	3301      	adds	r3, #1
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002348:	4618      	mov	r0, r3
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	bd90      	pop	{r4, r7, pc}
 8002350:	08003a7c 	.word	0x08003a7c
 8002354:	00f42400 	.word	0x00f42400
 8002358:	007a1200 	.word	0x007a1200

0800235c <LL_SPI_IsEnabled>:
{
 800235c:	b480      	push	{r7}
 800235e:	b083      	sub	sp, #12
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800236c:	2b40      	cmp	r3, #64	; 0x40
 800236e:	d101      	bne.n	8002374 <LL_SPI_IsEnabled+0x18>
 8002370:	2301      	movs	r3, #1
 8002372:	e000      	b.n	8002376 <LL_SPI_IsEnabled+0x1a>
 8002374:	2300      	movs	r3, #0
}
 8002376:	4618      	mov	r0, r3
 8002378:	370c      	adds	r7, #12
 800237a:	46bd      	mov	sp, r7
 800237c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002380:	4770      	bx	lr

08002382 <LL_SPI_SetCRCPolynomial>:
{
 8002382:	b480      	push	{r7}
 8002384:	b083      	sub	sp, #12
 8002386:	af00      	add	r7, sp, #0
 8002388:	6078      	str	r0, [r7, #4]
 800238a:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	b29b      	uxth	r3, r3
 8002390:	461a      	mov	r2, r3
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	611a      	str	r2, [r3, #16]
}
 8002396:	bf00      	nop
 8002398:	370c      	adds	r7, #12
 800239a:	46bd      	mov	sp, r7
 800239c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a0:	4770      	bx	lr

080023a2 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80023a2:	b580      	push	{r7, lr}
 80023a4:	b084      	sub	sp, #16
 80023a6:	af00      	add	r7, sp, #0
 80023a8:	6078      	str	r0, [r7, #4]
 80023aa:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80023ac:	2301      	movs	r3, #1
 80023ae:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ffd3 	bl	800235c <LL_SPI_IsEnabled>
 80023b6:	4603      	mov	r3, r0
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d13b      	bne.n	8002434 <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80023c4:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 80023c8:	683a      	ldr	r2, [r7, #0]
 80023ca:	6811      	ldr	r1, [r2, #0]
 80023cc:	683a      	ldr	r2, [r7, #0]
 80023ce:	6852      	ldr	r2, [r2, #4]
 80023d0:	4311      	orrs	r1, r2
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	68d2      	ldr	r2, [r2, #12]
 80023d6:	4311      	orrs	r1, r2
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	6912      	ldr	r2, [r2, #16]
 80023dc:	4311      	orrs	r1, r2
 80023de:	683a      	ldr	r2, [r7, #0]
 80023e0:	6952      	ldr	r2, [r2, #20]
 80023e2:	4311      	orrs	r1, r2
 80023e4:	683a      	ldr	r2, [r7, #0]
 80023e6:	6992      	ldr	r2, [r2, #24]
 80023e8:	4311      	orrs	r1, r2
 80023ea:	683a      	ldr	r2, [r7, #0]
 80023ec:	69d2      	ldr	r2, [r2, #28]
 80023ee:	4311      	orrs	r1, r2
 80023f0:	683a      	ldr	r2, [r7, #0]
 80023f2:	6a12      	ldr	r2, [r2, #32]
 80023f4:	430a      	orrs	r2, r1
 80023f6:	431a      	orrs	r2, r3
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002404:	f023 0304 	bic.w	r3, r3, #4
 8002408:	683a      	ldr	r2, [r7, #0]
 800240a:	6891      	ldr	r1, [r2, #8]
 800240c:	683a      	ldr	r2, [r7, #0]
 800240e:	6952      	ldr	r2, [r2, #20]
 8002410:	0c12      	lsrs	r2, r2, #16
 8002412:	430a      	orrs	r2, r1
 8002414:	431a      	orrs	r2, r3
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	6a1b      	ldr	r3, [r3, #32]
 800241e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002422:	d105      	bne.n	8002430 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002428:	4619      	mov	r1, r3
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f7ff ffa9 	bl	8002382 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002430:	2300      	movs	r3, #0
 8002432:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002434:	7bfb      	ldrb	r3, [r7, #15]
}
 8002436:	4618      	mov	r0, r3
 8002438:	3710      	adds	r7, #16
 800243a:	46bd      	mov	sp, r7
 800243c:	bd80      	pop	{r7, pc}

0800243e <LL_TIM_SetPrescaler>:
{
 800243e:	b480      	push	{r7}
 8002440:	b083      	sub	sp, #12
 8002442:	af00      	add	r7, sp, #0
 8002444:	6078      	str	r0, [r7, #4]
 8002446:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	683a      	ldr	r2, [r7, #0]
 800244c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800244e:	bf00      	nop
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <LL_TIM_SetAutoReload>:
{
 800245a:	b480      	push	{r7}
 800245c:	b083      	sub	sp, #12
 800245e:	af00      	add	r7, sp, #0
 8002460:	6078      	str	r0, [r7, #4]
 8002462:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	683a      	ldr	r2, [r7, #0]
 8002468:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800246a:	bf00      	nop
 800246c:	370c      	adds	r7, #12
 800246e:	46bd      	mov	sp, r7
 8002470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002474:	4770      	bx	lr

08002476 <LL_TIM_SetRepetitionCounter>:
{
 8002476:	b480      	push	{r7}
 8002478:	b083      	sub	sp, #12
 800247a:	af00      	add	r7, sp, #0
 800247c:	6078      	str	r0, [r7, #4]
 800247e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	683a      	ldr	r2, [r7, #0]
 8002484:	631a      	str	r2, [r3, #48]	; 0x30
}
 8002486:	bf00      	nop
 8002488:	370c      	adds	r7, #12
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8002492:	b480      	push	{r7}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	695b      	ldr	r3, [r3, #20]
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	615a      	str	r2, [r3, #20]
}
 80024a6:	bf00      	nop
 80024a8:	370c      	adds	r7, #12
 80024aa:	46bd      	mov	sp, r7
 80024ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b0:	4770      	bx	lr
	...

080024b4 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b084      	sub	sp, #16
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	4a3d      	ldr	r2, [pc, #244]	; (80025bc <LL_TIM_Init+0x108>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d013      	beq.n	80024f4 <LL_TIM_Init+0x40>
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80024d2:	d00f      	beq.n	80024f4 <LL_TIM_Init+0x40>
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	4a3a      	ldr	r2, [pc, #232]	; (80025c0 <LL_TIM_Init+0x10c>)
 80024d8:	4293      	cmp	r3, r2
 80024da:	d00b      	beq.n	80024f4 <LL_TIM_Init+0x40>
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	4a39      	ldr	r2, [pc, #228]	; (80025c4 <LL_TIM_Init+0x110>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	d007      	beq.n	80024f4 <LL_TIM_Init+0x40>
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	4a38      	ldr	r2, [pc, #224]	; (80025c8 <LL_TIM_Init+0x114>)
 80024e8:	4293      	cmp	r3, r2
 80024ea:	d003      	beq.n	80024f4 <LL_TIM_Init+0x40>
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	4a37      	ldr	r2, [pc, #220]	; (80025cc <LL_TIM_Init+0x118>)
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d106      	bne.n	8002502 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	4313      	orrs	r3, r2
 8002500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	4a2d      	ldr	r2, [pc, #180]	; (80025bc <LL_TIM_Init+0x108>)
 8002506:	4293      	cmp	r3, r2
 8002508:	d01f      	beq.n	800254a <LL_TIM_Init+0x96>
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002510:	d01b      	beq.n	800254a <LL_TIM_Init+0x96>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	4a2a      	ldr	r2, [pc, #168]	; (80025c0 <LL_TIM_Init+0x10c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d017      	beq.n	800254a <LL_TIM_Init+0x96>
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	4a29      	ldr	r2, [pc, #164]	; (80025c4 <LL_TIM_Init+0x110>)
 800251e:	4293      	cmp	r3, r2
 8002520:	d013      	beq.n	800254a <LL_TIM_Init+0x96>
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	4a28      	ldr	r2, [pc, #160]	; (80025c8 <LL_TIM_Init+0x114>)
 8002526:	4293      	cmp	r3, r2
 8002528:	d00f      	beq.n	800254a <LL_TIM_Init+0x96>
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	4a27      	ldr	r2, [pc, #156]	; (80025cc <LL_TIM_Init+0x118>)
 800252e:	4293      	cmp	r3, r2
 8002530:	d00b      	beq.n	800254a <LL_TIM_Init+0x96>
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	4a26      	ldr	r2, [pc, #152]	; (80025d0 <LL_TIM_Init+0x11c>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d007      	beq.n	800254a <LL_TIM_Init+0x96>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	4a25      	ldr	r2, [pc, #148]	; (80025d4 <LL_TIM_Init+0x120>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d003      	beq.n	800254a <LL_TIM_Init+0x96>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	4a24      	ldr	r2, [pc, #144]	; (80025d8 <LL_TIM_Init+0x124>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d106      	bne.n	8002558 <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002550:	683b      	ldr	r3, [r7, #0]
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4313      	orrs	r3, r2
 8002556:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	689b      	ldr	r3, [r3, #8]
 8002562:	4619      	mov	r1, r3
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	f7ff ff78 	bl	800245a <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800256a:	683b      	ldr	r3, [r7, #0]
 800256c:	881b      	ldrh	r3, [r3, #0]
 800256e:	4619      	mov	r1, r3
 8002570:	6878      	ldr	r0, [r7, #4]
 8002572:	f7ff ff64 	bl	800243e <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4a10      	ldr	r2, [pc, #64]	; (80025bc <LL_TIM_Init+0x108>)
 800257a:	4293      	cmp	r3, r2
 800257c:	d00f      	beq.n	800259e <LL_TIM_Init+0xea>
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4a12      	ldr	r2, [pc, #72]	; (80025cc <LL_TIM_Init+0x118>)
 8002582:	4293      	cmp	r3, r2
 8002584:	d00b      	beq.n	800259e <LL_TIM_Init+0xea>
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	4a11      	ldr	r2, [pc, #68]	; (80025d0 <LL_TIM_Init+0x11c>)
 800258a:	4293      	cmp	r3, r2
 800258c:	d007      	beq.n	800259e <LL_TIM_Init+0xea>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	4a10      	ldr	r2, [pc, #64]	; (80025d4 <LL_TIM_Init+0x120>)
 8002592:	4293      	cmp	r3, r2
 8002594:	d003      	beq.n	800259e <LL_TIM_Init+0xea>
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	4a0f      	ldr	r2, [pc, #60]	; (80025d8 <LL_TIM_Init+0x124>)
 800259a:	4293      	cmp	r3, r2
 800259c:	d105      	bne.n	80025aa <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 800259e:	683b      	ldr	r3, [r7, #0]
 80025a0:	691b      	ldr	r3, [r3, #16]
 80025a2:	4619      	mov	r1, r3
 80025a4:	6878      	ldr	r0, [r7, #4]
 80025a6:	f7ff ff66 	bl	8002476 <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7ff ff71 	bl	8002492 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3710      	adds	r7, #16
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	40012c00 	.word	0x40012c00
 80025c0:	40000400 	.word	0x40000400
 80025c4:	40000800 	.word	0x40000800
 80025c8:	40000c00 	.word	0x40000c00
 80025cc:	40013400 	.word	0x40013400
 80025d0:	40014000 	.word	0x40014000
 80025d4:	40014400 	.word	0x40014400
 80025d8:	40014800 	.word	0x40014800

080025dc <LL_USART_IsEnabled>:
{
 80025dc:	b480      	push	{r7}
 80025de:	b083      	sub	sp, #12
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	f003 0301 	and.w	r3, r3, #1
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d101      	bne.n	80025f4 <LL_USART_IsEnabled+0x18>
 80025f0:	2301      	movs	r3, #1
 80025f2:	e000      	b.n	80025f6 <LL_USART_IsEnabled+0x1a>
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	370c      	adds	r7, #12
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr

08002602 <LL_USART_SetStopBitsLength>:
{
 8002602:	b480      	push	{r7}
 8002604:	b083      	sub	sp, #12
 8002606:	af00      	add	r7, sp, #0
 8002608:	6078      	str	r0, [r7, #4]
 800260a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	431a      	orrs	r2, r3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	605a      	str	r2, [r3, #4]
}
 800261c:	bf00      	nop
 800261e:	370c      	adds	r7, #12
 8002620:	46bd      	mov	sp, r7
 8002622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002626:	4770      	bx	lr

08002628 <LL_USART_SetHWFlowCtrl>:
{
 8002628:	b480      	push	{r7}
 800262a:	b083      	sub	sp, #12
 800262c:	af00      	add	r7, sp, #0
 800262e:	6078      	str	r0, [r7, #4]
 8002630:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	689b      	ldr	r3, [r3, #8]
 8002636:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	609a      	str	r2, [r3, #8]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <LL_USART_SetBaudRate>:
{
 800264e:	b480      	push	{r7}
 8002650:	b087      	sub	sp, #28
 8002652:	af00      	add	r7, sp, #0
 8002654:	60f8      	str	r0, [r7, #12]
 8002656:	60b9      	str	r1, [r7, #8]
 8002658:	607a      	str	r2, [r7, #4]
 800265a:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002662:	d11a      	bne.n	800269a <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	005a      	lsls	r2, r3, #1
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	085b      	lsrs	r3, r3, #1
 800266c:	441a      	add	r2, r3
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	fbb2 f3f3 	udiv	r3, r2, r3
 8002674:	b29b      	uxth	r3, r3
 8002676:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8002678:	697a      	ldr	r2, [r7, #20]
 800267a:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 800267e:	4013      	ands	r3, r2
 8002680:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002682:	697b      	ldr	r3, [r7, #20]
 8002684:	085b      	lsrs	r3, r3, #1
 8002686:	b29b      	uxth	r3, r3
 8002688:	f003 0307 	and.w	r3, r3, #7
 800268c:	693a      	ldr	r2, [r7, #16]
 800268e:	4313      	orrs	r3, r2
 8002690:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	693a      	ldr	r2, [r7, #16]
 8002696:	60da      	str	r2, [r3, #12]
}
 8002698:	e00a      	b.n	80026b0 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	085a      	lsrs	r2, r3, #1
 800269e:	68bb      	ldr	r3, [r7, #8]
 80026a0:	441a      	add	r2, r3
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80026a8:	b29b      	uxth	r3, r3
 80026aa:	461a      	mov	r2, r3
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	60da      	str	r2, [r3, #12]
}
 80026b0:	bf00      	nop
 80026b2:	371c      	adds	r7, #28
 80026b4:	46bd      	mov	sp, r7
 80026b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ba:	4770      	bx	lr

080026bc <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b084      	sub	sp, #16
 80026c0:	af00      	add	r7, sp, #0
 80026c2:	6078      	str	r0, [r7, #4]
 80026c4:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026c6:	2301      	movs	r3, #1
 80026c8:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 80026ca:	2300      	movs	r3, #0
 80026cc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 80026ce:	6878      	ldr	r0, [r7, #4]
 80026d0:	f7ff ff84 	bl	80025dc <LL_USART_IsEnabled>
 80026d4:	4603      	mov	r3, r0
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d15b      	bne.n	8002792 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b2f      	ldr	r3, [pc, #188]	; (800279c <LL_USART_Init+0xe0>)
 80026e0:	4013      	ands	r3, r2
 80026e2:	683a      	ldr	r2, [r7, #0]
 80026e4:	6851      	ldr	r1, [r2, #4]
 80026e6:	683a      	ldr	r2, [r7, #0]
 80026e8:	68d2      	ldr	r2, [r2, #12]
 80026ea:	4311      	orrs	r1, r2
 80026ec:	683a      	ldr	r2, [r7, #0]
 80026ee:	6912      	ldr	r2, [r2, #16]
 80026f0:	4311      	orrs	r1, r2
 80026f2:	683a      	ldr	r2, [r7, #0]
 80026f4:	6992      	ldr	r2, [r2, #24]
 80026f6:	430a      	orrs	r2, r1
 80026f8:	431a      	orrs	r2, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	689b      	ldr	r3, [r3, #8]
 8002702:	4619      	mov	r1, r3
 8002704:	6878      	ldr	r0, [r7, #4]
 8002706:	f7ff ff7c 	bl	8002602 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 800270a:	683b      	ldr	r3, [r7, #0]
 800270c:	695b      	ldr	r3, [r3, #20]
 800270e:	4619      	mov	r1, r3
 8002710:	6878      	ldr	r0, [r7, #4]
 8002712:	f7ff ff89 	bl	8002628 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <LL_USART_Init+0xe4>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d104      	bne.n	8002728 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 800271e:	2003      	movs	r0, #3
 8002720:	f7ff fb56 	bl	8001dd0 <LL_RCC_GetUSARTClockFreq>
 8002724:	60b8      	str	r0, [r7, #8]
 8002726:	e023      	b.n	8002770 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	4a1e      	ldr	r2, [pc, #120]	; (80027a4 <LL_USART_Init+0xe8>)
 800272c:	4293      	cmp	r3, r2
 800272e:	d104      	bne.n	800273a <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8002730:	200c      	movs	r0, #12
 8002732:	f7ff fb4d 	bl	8001dd0 <LL_RCC_GetUSARTClockFreq>
 8002736:	60b8      	str	r0, [r7, #8]
 8002738:	e01a      	b.n	8002770 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	4a1a      	ldr	r2, [pc, #104]	; (80027a8 <LL_USART_Init+0xec>)
 800273e:	4293      	cmp	r3, r2
 8002740:	d104      	bne.n	800274c <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 8002742:	2030      	movs	r0, #48	; 0x30
 8002744:	f7ff fb44 	bl	8001dd0 <LL_RCC_GetUSARTClockFreq>
 8002748:	60b8      	str	r0, [r7, #8]
 800274a:	e011      	b.n	8002770 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	4a17      	ldr	r2, [pc, #92]	; (80027ac <LL_USART_Init+0xf0>)
 8002750:	4293      	cmp	r3, r2
 8002752:	d104      	bne.n	800275e <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002754:	20c0      	movs	r0, #192	; 0xc0
 8002756:	f7ff fc1b 	bl	8001f90 <LL_RCC_GetUARTClockFreq>
 800275a:	60b8      	str	r0, [r7, #8]
 800275c:	e008      	b.n	8002770 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	4a13      	ldr	r2, [pc, #76]	; (80027b0 <LL_USART_Init+0xf4>)
 8002762:	4293      	cmp	r3, r2
 8002764:	d104      	bne.n	8002770 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 8002766:	f44f 7040 	mov.w	r0, #768	; 0x300
 800276a:	f7ff fc11 	bl	8001f90 <LL_RCC_GetUARTClockFreq>
 800276e:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002770:	68bb      	ldr	r3, [r7, #8]
 8002772:	2b00      	cmp	r3, #0
 8002774:	d00d      	beq.n	8002792 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	2b00      	cmp	r3, #0
 800277c:	d009      	beq.n	8002792 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 800277e:	2300      	movs	r3, #0
 8002780:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	699a      	ldr	r2, [r3, #24]
 8002786:	683b      	ldr	r3, [r7, #0]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	68b9      	ldr	r1, [r7, #8]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f7ff ff5e 	bl	800264e <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002792:	7bfb      	ldrb	r3, [r7, #15]
}
 8002794:	4618      	mov	r0, r3
 8002796:	3710      	adds	r7, #16
 8002798:	46bd      	mov	sp, r7
 800279a:	bd80      	pop	{r7, pc}
 800279c:	efff69f3 	.word	0xefff69f3
 80027a0:	40013800 	.word	0x40013800
 80027a4:	40004400 	.word	0x40004400
 80027a8:	40004800 	.word	0x40004800
 80027ac:	40004c00 	.word	0x40004c00
 80027b0:	40005000 	.word	0x40005000

080027b4 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 80027be:	687a      	ldr	r2, [r7, #4]
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80027c6:	4a07      	ldr	r2, [pc, #28]	; (80027e4 <LL_InitTick+0x30>)
 80027c8:	3b01      	subs	r3, #1
 80027ca:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 80027cc:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <LL_InitTick+0x30>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80027d2:	4b04      	ldr	r3, [pc, #16]	; (80027e4 <LL_InitTick+0x30>)
 80027d4:	2205      	movs	r2, #5
 80027d6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 80027d8:	bf00      	nop
 80027da:	370c      	adds	r7, #12
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	e000e010 	.word	0xe000e010

080027e8 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b082      	sub	sp, #8
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80027f0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7ff ffdd 	bl	80027b4 <LL_InitTick>
}
 80027fa:	bf00      	nop
 80027fc:	3708      	adds	r7, #8
 80027fe:	46bd      	mov	sp, r7
 8002800:	bd80      	pop	{r7, pc}
	...

08002804 <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 800280c:	4b0f      	ldr	r3, [pc, #60]	; (800284c <LL_mDelay+0x48>)
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 8002816:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800281e:	d00c      	beq.n	800283a <LL_mDelay+0x36>
  {
    tmpDelay++;
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3301      	adds	r3, #1
 8002824:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 8002826:	e008      	b.n	800283a <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8002828:	4b08      	ldr	r3, [pc, #32]	; (800284c <LL_mDelay+0x48>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002830:	2b00      	cmp	r3, #0
 8002832:	d002      	beq.n	800283a <LL_mDelay+0x36>
    {
      tmpDelay--;
 8002834:	68fb      	ldr	r3, [r7, #12]
 8002836:	3b01      	subs	r3, #1
 8002838:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 800283a:	68fb      	ldr	r3, [r7, #12]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d1f3      	bne.n	8002828 <LL_mDelay+0x24>
    }
  }
}
 8002840:	bf00      	nop
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	e000e010 	.word	0xe000e010

08002850 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8002850:	b480      	push	{r7}
 8002852:	b083      	sub	sp, #12
 8002854:	af00      	add	r7, sp, #0
 8002856:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8002858:	4a04      	ldr	r2, [pc, #16]	; (800286c <LL_SetSystemCoreClock+0x1c>)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6013      	str	r3, [r2, #0]
}
 800285e:	bf00      	nop
 8002860:	370c      	adds	r7, #12
 8002862:	46bd      	mov	sp, r7
 8002864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002868:	4770      	bx	lr
 800286a:	bf00      	nop
 800286c:	20000000 	.word	0x20000000

08002870 <__errno>:
 8002870:	4b01      	ldr	r3, [pc, #4]	; (8002878 <__errno+0x8>)
 8002872:	6818      	ldr	r0, [r3, #0]
 8002874:	4770      	bx	lr
 8002876:	bf00      	nop
 8002878:	20000004 	.word	0x20000004

0800287c <__libc_init_array>:
 800287c:	b570      	push	{r4, r5, r6, lr}
 800287e:	4e0d      	ldr	r6, [pc, #52]	; (80028b4 <__libc_init_array+0x38>)
 8002880:	4c0d      	ldr	r4, [pc, #52]	; (80028b8 <__libc_init_array+0x3c>)
 8002882:	1ba4      	subs	r4, r4, r6
 8002884:	10a4      	asrs	r4, r4, #2
 8002886:	2500      	movs	r5, #0
 8002888:	42a5      	cmp	r5, r4
 800288a:	d109      	bne.n	80028a0 <__libc_init_array+0x24>
 800288c:	4e0b      	ldr	r6, [pc, #44]	; (80028bc <__libc_init_array+0x40>)
 800288e:	4c0c      	ldr	r4, [pc, #48]	; (80028c0 <__libc_init_array+0x44>)
 8002890:	f000 ff68 	bl	8003764 <_init>
 8002894:	1ba4      	subs	r4, r4, r6
 8002896:	10a4      	asrs	r4, r4, #2
 8002898:	2500      	movs	r5, #0
 800289a:	42a5      	cmp	r5, r4
 800289c:	d105      	bne.n	80028aa <__libc_init_array+0x2e>
 800289e:	bd70      	pop	{r4, r5, r6, pc}
 80028a0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028a4:	4798      	blx	r3
 80028a6:	3501      	adds	r5, #1
 80028a8:	e7ee      	b.n	8002888 <__libc_init_array+0xc>
 80028aa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80028ae:	4798      	blx	r3
 80028b0:	3501      	adds	r5, #1
 80028b2:	e7f2      	b.n	800289a <__libc_init_array+0x1e>
 80028b4:	08003b44 	.word	0x08003b44
 80028b8:	08003b44 	.word	0x08003b44
 80028bc:	08003b44 	.word	0x08003b44
 80028c0:	08003b48 	.word	0x08003b48

080028c4 <memset>:
 80028c4:	4402      	add	r2, r0
 80028c6:	4603      	mov	r3, r0
 80028c8:	4293      	cmp	r3, r2
 80028ca:	d100      	bne.n	80028ce <memset+0xa>
 80028cc:	4770      	bx	lr
 80028ce:	f803 1b01 	strb.w	r1, [r3], #1
 80028d2:	e7f9      	b.n	80028c8 <memset+0x4>

080028d4 <iprintf>:
 80028d4:	b40f      	push	{r0, r1, r2, r3}
 80028d6:	4b0a      	ldr	r3, [pc, #40]	; (8002900 <iprintf+0x2c>)
 80028d8:	b513      	push	{r0, r1, r4, lr}
 80028da:	681c      	ldr	r4, [r3, #0]
 80028dc:	b124      	cbz	r4, 80028e8 <iprintf+0x14>
 80028de:	69a3      	ldr	r3, [r4, #24]
 80028e0:	b913      	cbnz	r3, 80028e8 <iprintf+0x14>
 80028e2:	4620      	mov	r0, r4
 80028e4:	f000 fa22 	bl	8002d2c <__sinit>
 80028e8:	ab05      	add	r3, sp, #20
 80028ea:	9a04      	ldr	r2, [sp, #16]
 80028ec:	68a1      	ldr	r1, [r4, #8]
 80028ee:	9301      	str	r3, [sp, #4]
 80028f0:	4620      	mov	r0, r4
 80028f2:	f000 fbdb 	bl	80030ac <_vfiprintf_r>
 80028f6:	b002      	add	sp, #8
 80028f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80028fc:	b004      	add	sp, #16
 80028fe:	4770      	bx	lr
 8002900:	20000004 	.word	0x20000004

08002904 <_puts_r>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	460e      	mov	r6, r1
 8002908:	4605      	mov	r5, r0
 800290a:	b118      	cbz	r0, 8002914 <_puts_r+0x10>
 800290c:	6983      	ldr	r3, [r0, #24]
 800290e:	b90b      	cbnz	r3, 8002914 <_puts_r+0x10>
 8002910:	f000 fa0c 	bl	8002d2c <__sinit>
 8002914:	69ab      	ldr	r3, [r5, #24]
 8002916:	68ac      	ldr	r4, [r5, #8]
 8002918:	b913      	cbnz	r3, 8002920 <_puts_r+0x1c>
 800291a:	4628      	mov	r0, r5
 800291c:	f000 fa06 	bl	8002d2c <__sinit>
 8002920:	4b23      	ldr	r3, [pc, #140]	; (80029b0 <_puts_r+0xac>)
 8002922:	429c      	cmp	r4, r3
 8002924:	d117      	bne.n	8002956 <_puts_r+0x52>
 8002926:	686c      	ldr	r4, [r5, #4]
 8002928:	89a3      	ldrh	r3, [r4, #12]
 800292a:	071b      	lsls	r3, r3, #28
 800292c:	d51d      	bpl.n	800296a <_puts_r+0x66>
 800292e:	6923      	ldr	r3, [r4, #16]
 8002930:	b1db      	cbz	r3, 800296a <_puts_r+0x66>
 8002932:	3e01      	subs	r6, #1
 8002934:	68a3      	ldr	r3, [r4, #8]
 8002936:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800293a:	3b01      	subs	r3, #1
 800293c:	60a3      	str	r3, [r4, #8]
 800293e:	b9e9      	cbnz	r1, 800297c <_puts_r+0x78>
 8002940:	2b00      	cmp	r3, #0
 8002942:	da2e      	bge.n	80029a2 <_puts_r+0x9e>
 8002944:	4622      	mov	r2, r4
 8002946:	210a      	movs	r1, #10
 8002948:	4628      	mov	r0, r5
 800294a:	f000 f83f 	bl	80029cc <__swbuf_r>
 800294e:	3001      	adds	r0, #1
 8002950:	d011      	beq.n	8002976 <_puts_r+0x72>
 8002952:	200a      	movs	r0, #10
 8002954:	e011      	b.n	800297a <_puts_r+0x76>
 8002956:	4b17      	ldr	r3, [pc, #92]	; (80029b4 <_puts_r+0xb0>)
 8002958:	429c      	cmp	r4, r3
 800295a:	d101      	bne.n	8002960 <_puts_r+0x5c>
 800295c:	68ac      	ldr	r4, [r5, #8]
 800295e:	e7e3      	b.n	8002928 <_puts_r+0x24>
 8002960:	4b15      	ldr	r3, [pc, #84]	; (80029b8 <_puts_r+0xb4>)
 8002962:	429c      	cmp	r4, r3
 8002964:	bf08      	it	eq
 8002966:	68ec      	ldreq	r4, [r5, #12]
 8002968:	e7de      	b.n	8002928 <_puts_r+0x24>
 800296a:	4621      	mov	r1, r4
 800296c:	4628      	mov	r0, r5
 800296e:	f000 f87f 	bl	8002a70 <__swsetup_r>
 8002972:	2800      	cmp	r0, #0
 8002974:	d0dd      	beq.n	8002932 <_puts_r+0x2e>
 8002976:	f04f 30ff 	mov.w	r0, #4294967295
 800297a:	bd70      	pop	{r4, r5, r6, pc}
 800297c:	2b00      	cmp	r3, #0
 800297e:	da04      	bge.n	800298a <_puts_r+0x86>
 8002980:	69a2      	ldr	r2, [r4, #24]
 8002982:	429a      	cmp	r2, r3
 8002984:	dc06      	bgt.n	8002994 <_puts_r+0x90>
 8002986:	290a      	cmp	r1, #10
 8002988:	d004      	beq.n	8002994 <_puts_r+0x90>
 800298a:	6823      	ldr	r3, [r4, #0]
 800298c:	1c5a      	adds	r2, r3, #1
 800298e:	6022      	str	r2, [r4, #0]
 8002990:	7019      	strb	r1, [r3, #0]
 8002992:	e7cf      	b.n	8002934 <_puts_r+0x30>
 8002994:	4622      	mov	r2, r4
 8002996:	4628      	mov	r0, r5
 8002998:	f000 f818 	bl	80029cc <__swbuf_r>
 800299c:	3001      	adds	r0, #1
 800299e:	d1c9      	bne.n	8002934 <_puts_r+0x30>
 80029a0:	e7e9      	b.n	8002976 <_puts_r+0x72>
 80029a2:	6823      	ldr	r3, [r4, #0]
 80029a4:	200a      	movs	r0, #10
 80029a6:	1c5a      	adds	r2, r3, #1
 80029a8:	6022      	str	r2, [r4, #0]
 80029aa:	7018      	strb	r0, [r3, #0]
 80029ac:	e7e5      	b.n	800297a <_puts_r+0x76>
 80029ae:	bf00      	nop
 80029b0:	08003ad0 	.word	0x08003ad0
 80029b4:	08003af0 	.word	0x08003af0
 80029b8:	08003ab0 	.word	0x08003ab0

080029bc <puts>:
 80029bc:	4b02      	ldr	r3, [pc, #8]	; (80029c8 <puts+0xc>)
 80029be:	4601      	mov	r1, r0
 80029c0:	6818      	ldr	r0, [r3, #0]
 80029c2:	f7ff bf9f 	b.w	8002904 <_puts_r>
 80029c6:	bf00      	nop
 80029c8:	20000004 	.word	0x20000004

080029cc <__swbuf_r>:
 80029cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80029ce:	460e      	mov	r6, r1
 80029d0:	4614      	mov	r4, r2
 80029d2:	4605      	mov	r5, r0
 80029d4:	b118      	cbz	r0, 80029de <__swbuf_r+0x12>
 80029d6:	6983      	ldr	r3, [r0, #24]
 80029d8:	b90b      	cbnz	r3, 80029de <__swbuf_r+0x12>
 80029da:	f000 f9a7 	bl	8002d2c <__sinit>
 80029de:	4b21      	ldr	r3, [pc, #132]	; (8002a64 <__swbuf_r+0x98>)
 80029e0:	429c      	cmp	r4, r3
 80029e2:	d12a      	bne.n	8002a3a <__swbuf_r+0x6e>
 80029e4:	686c      	ldr	r4, [r5, #4]
 80029e6:	69a3      	ldr	r3, [r4, #24]
 80029e8:	60a3      	str	r3, [r4, #8]
 80029ea:	89a3      	ldrh	r3, [r4, #12]
 80029ec:	071a      	lsls	r2, r3, #28
 80029ee:	d52e      	bpl.n	8002a4e <__swbuf_r+0x82>
 80029f0:	6923      	ldr	r3, [r4, #16]
 80029f2:	b363      	cbz	r3, 8002a4e <__swbuf_r+0x82>
 80029f4:	6923      	ldr	r3, [r4, #16]
 80029f6:	6820      	ldr	r0, [r4, #0]
 80029f8:	1ac0      	subs	r0, r0, r3
 80029fa:	6963      	ldr	r3, [r4, #20]
 80029fc:	b2f6      	uxtb	r6, r6
 80029fe:	4283      	cmp	r3, r0
 8002a00:	4637      	mov	r7, r6
 8002a02:	dc04      	bgt.n	8002a0e <__swbuf_r+0x42>
 8002a04:	4621      	mov	r1, r4
 8002a06:	4628      	mov	r0, r5
 8002a08:	f000 f926 	bl	8002c58 <_fflush_r>
 8002a0c:	bb28      	cbnz	r0, 8002a5a <__swbuf_r+0x8e>
 8002a0e:	68a3      	ldr	r3, [r4, #8]
 8002a10:	3b01      	subs	r3, #1
 8002a12:	60a3      	str	r3, [r4, #8]
 8002a14:	6823      	ldr	r3, [r4, #0]
 8002a16:	1c5a      	adds	r2, r3, #1
 8002a18:	6022      	str	r2, [r4, #0]
 8002a1a:	701e      	strb	r6, [r3, #0]
 8002a1c:	6963      	ldr	r3, [r4, #20]
 8002a1e:	3001      	adds	r0, #1
 8002a20:	4283      	cmp	r3, r0
 8002a22:	d004      	beq.n	8002a2e <__swbuf_r+0x62>
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	07db      	lsls	r3, r3, #31
 8002a28:	d519      	bpl.n	8002a5e <__swbuf_r+0x92>
 8002a2a:	2e0a      	cmp	r6, #10
 8002a2c:	d117      	bne.n	8002a5e <__swbuf_r+0x92>
 8002a2e:	4621      	mov	r1, r4
 8002a30:	4628      	mov	r0, r5
 8002a32:	f000 f911 	bl	8002c58 <_fflush_r>
 8002a36:	b190      	cbz	r0, 8002a5e <__swbuf_r+0x92>
 8002a38:	e00f      	b.n	8002a5a <__swbuf_r+0x8e>
 8002a3a:	4b0b      	ldr	r3, [pc, #44]	; (8002a68 <__swbuf_r+0x9c>)
 8002a3c:	429c      	cmp	r4, r3
 8002a3e:	d101      	bne.n	8002a44 <__swbuf_r+0x78>
 8002a40:	68ac      	ldr	r4, [r5, #8]
 8002a42:	e7d0      	b.n	80029e6 <__swbuf_r+0x1a>
 8002a44:	4b09      	ldr	r3, [pc, #36]	; (8002a6c <__swbuf_r+0xa0>)
 8002a46:	429c      	cmp	r4, r3
 8002a48:	bf08      	it	eq
 8002a4a:	68ec      	ldreq	r4, [r5, #12]
 8002a4c:	e7cb      	b.n	80029e6 <__swbuf_r+0x1a>
 8002a4e:	4621      	mov	r1, r4
 8002a50:	4628      	mov	r0, r5
 8002a52:	f000 f80d 	bl	8002a70 <__swsetup_r>
 8002a56:	2800      	cmp	r0, #0
 8002a58:	d0cc      	beq.n	80029f4 <__swbuf_r+0x28>
 8002a5a:	f04f 37ff 	mov.w	r7, #4294967295
 8002a5e:	4638      	mov	r0, r7
 8002a60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002a62:	bf00      	nop
 8002a64:	08003ad0 	.word	0x08003ad0
 8002a68:	08003af0 	.word	0x08003af0
 8002a6c:	08003ab0 	.word	0x08003ab0

08002a70 <__swsetup_r>:
 8002a70:	4b32      	ldr	r3, [pc, #200]	; (8002b3c <__swsetup_r+0xcc>)
 8002a72:	b570      	push	{r4, r5, r6, lr}
 8002a74:	681d      	ldr	r5, [r3, #0]
 8002a76:	4606      	mov	r6, r0
 8002a78:	460c      	mov	r4, r1
 8002a7a:	b125      	cbz	r5, 8002a86 <__swsetup_r+0x16>
 8002a7c:	69ab      	ldr	r3, [r5, #24]
 8002a7e:	b913      	cbnz	r3, 8002a86 <__swsetup_r+0x16>
 8002a80:	4628      	mov	r0, r5
 8002a82:	f000 f953 	bl	8002d2c <__sinit>
 8002a86:	4b2e      	ldr	r3, [pc, #184]	; (8002b40 <__swsetup_r+0xd0>)
 8002a88:	429c      	cmp	r4, r3
 8002a8a:	d10f      	bne.n	8002aac <__swsetup_r+0x3c>
 8002a8c:	686c      	ldr	r4, [r5, #4]
 8002a8e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a92:	b29a      	uxth	r2, r3
 8002a94:	0715      	lsls	r5, r2, #28
 8002a96:	d42c      	bmi.n	8002af2 <__swsetup_r+0x82>
 8002a98:	06d0      	lsls	r0, r2, #27
 8002a9a:	d411      	bmi.n	8002ac0 <__swsetup_r+0x50>
 8002a9c:	2209      	movs	r2, #9
 8002a9e:	6032      	str	r2, [r6, #0]
 8002aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002aa4:	81a3      	strh	r3, [r4, #12]
 8002aa6:	f04f 30ff 	mov.w	r0, #4294967295
 8002aaa:	e03e      	b.n	8002b2a <__swsetup_r+0xba>
 8002aac:	4b25      	ldr	r3, [pc, #148]	; (8002b44 <__swsetup_r+0xd4>)
 8002aae:	429c      	cmp	r4, r3
 8002ab0:	d101      	bne.n	8002ab6 <__swsetup_r+0x46>
 8002ab2:	68ac      	ldr	r4, [r5, #8]
 8002ab4:	e7eb      	b.n	8002a8e <__swsetup_r+0x1e>
 8002ab6:	4b24      	ldr	r3, [pc, #144]	; (8002b48 <__swsetup_r+0xd8>)
 8002ab8:	429c      	cmp	r4, r3
 8002aba:	bf08      	it	eq
 8002abc:	68ec      	ldreq	r4, [r5, #12]
 8002abe:	e7e6      	b.n	8002a8e <__swsetup_r+0x1e>
 8002ac0:	0751      	lsls	r1, r2, #29
 8002ac2:	d512      	bpl.n	8002aea <__swsetup_r+0x7a>
 8002ac4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002ac6:	b141      	cbz	r1, 8002ada <__swsetup_r+0x6a>
 8002ac8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002acc:	4299      	cmp	r1, r3
 8002ace:	d002      	beq.n	8002ad6 <__swsetup_r+0x66>
 8002ad0:	4630      	mov	r0, r6
 8002ad2:	f000 fa19 	bl	8002f08 <_free_r>
 8002ad6:	2300      	movs	r3, #0
 8002ad8:	6363      	str	r3, [r4, #52]	; 0x34
 8002ada:	89a3      	ldrh	r3, [r4, #12]
 8002adc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8002ae0:	81a3      	strh	r3, [r4, #12]
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	6063      	str	r3, [r4, #4]
 8002ae6:	6923      	ldr	r3, [r4, #16]
 8002ae8:	6023      	str	r3, [r4, #0]
 8002aea:	89a3      	ldrh	r3, [r4, #12]
 8002aec:	f043 0308 	orr.w	r3, r3, #8
 8002af0:	81a3      	strh	r3, [r4, #12]
 8002af2:	6923      	ldr	r3, [r4, #16]
 8002af4:	b94b      	cbnz	r3, 8002b0a <__swsetup_r+0x9a>
 8002af6:	89a3      	ldrh	r3, [r4, #12]
 8002af8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8002afc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b00:	d003      	beq.n	8002b0a <__swsetup_r+0x9a>
 8002b02:	4621      	mov	r1, r4
 8002b04:	4630      	mov	r0, r6
 8002b06:	f000 f9bf 	bl	8002e88 <__smakebuf_r>
 8002b0a:	89a2      	ldrh	r2, [r4, #12]
 8002b0c:	f012 0301 	ands.w	r3, r2, #1
 8002b10:	d00c      	beq.n	8002b2c <__swsetup_r+0xbc>
 8002b12:	2300      	movs	r3, #0
 8002b14:	60a3      	str	r3, [r4, #8]
 8002b16:	6963      	ldr	r3, [r4, #20]
 8002b18:	425b      	negs	r3, r3
 8002b1a:	61a3      	str	r3, [r4, #24]
 8002b1c:	6923      	ldr	r3, [r4, #16]
 8002b1e:	b953      	cbnz	r3, 8002b36 <__swsetup_r+0xc6>
 8002b20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002b24:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8002b28:	d1ba      	bne.n	8002aa0 <__swsetup_r+0x30>
 8002b2a:	bd70      	pop	{r4, r5, r6, pc}
 8002b2c:	0792      	lsls	r2, r2, #30
 8002b2e:	bf58      	it	pl
 8002b30:	6963      	ldrpl	r3, [r4, #20]
 8002b32:	60a3      	str	r3, [r4, #8]
 8002b34:	e7f2      	b.n	8002b1c <__swsetup_r+0xac>
 8002b36:	2000      	movs	r0, #0
 8002b38:	e7f7      	b.n	8002b2a <__swsetup_r+0xba>
 8002b3a:	bf00      	nop
 8002b3c:	20000004 	.word	0x20000004
 8002b40:	08003ad0 	.word	0x08003ad0
 8002b44:	08003af0 	.word	0x08003af0
 8002b48:	08003ab0 	.word	0x08003ab0

08002b4c <__sflush_r>:
 8002b4c:	898a      	ldrh	r2, [r1, #12]
 8002b4e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b52:	4605      	mov	r5, r0
 8002b54:	0710      	lsls	r0, r2, #28
 8002b56:	460c      	mov	r4, r1
 8002b58:	d458      	bmi.n	8002c0c <__sflush_r+0xc0>
 8002b5a:	684b      	ldr	r3, [r1, #4]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	dc05      	bgt.n	8002b6c <__sflush_r+0x20>
 8002b60:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	dc02      	bgt.n	8002b6c <__sflush_r+0x20>
 8002b66:	2000      	movs	r0, #0
 8002b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b6c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b6e:	2e00      	cmp	r6, #0
 8002b70:	d0f9      	beq.n	8002b66 <__sflush_r+0x1a>
 8002b72:	2300      	movs	r3, #0
 8002b74:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002b78:	682f      	ldr	r7, [r5, #0]
 8002b7a:	6a21      	ldr	r1, [r4, #32]
 8002b7c:	602b      	str	r3, [r5, #0]
 8002b7e:	d032      	beq.n	8002be6 <__sflush_r+0x9a>
 8002b80:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002b82:	89a3      	ldrh	r3, [r4, #12]
 8002b84:	075a      	lsls	r2, r3, #29
 8002b86:	d505      	bpl.n	8002b94 <__sflush_r+0x48>
 8002b88:	6863      	ldr	r3, [r4, #4]
 8002b8a:	1ac0      	subs	r0, r0, r3
 8002b8c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8002b8e:	b10b      	cbz	r3, 8002b94 <__sflush_r+0x48>
 8002b90:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002b92:	1ac0      	subs	r0, r0, r3
 8002b94:	2300      	movs	r3, #0
 8002b96:	4602      	mov	r2, r0
 8002b98:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002b9a:	6a21      	ldr	r1, [r4, #32]
 8002b9c:	4628      	mov	r0, r5
 8002b9e:	47b0      	blx	r6
 8002ba0:	1c43      	adds	r3, r0, #1
 8002ba2:	89a3      	ldrh	r3, [r4, #12]
 8002ba4:	d106      	bne.n	8002bb4 <__sflush_r+0x68>
 8002ba6:	6829      	ldr	r1, [r5, #0]
 8002ba8:	291d      	cmp	r1, #29
 8002baa:	d848      	bhi.n	8002c3e <__sflush_r+0xf2>
 8002bac:	4a29      	ldr	r2, [pc, #164]	; (8002c54 <__sflush_r+0x108>)
 8002bae:	40ca      	lsrs	r2, r1
 8002bb0:	07d6      	lsls	r6, r2, #31
 8002bb2:	d544      	bpl.n	8002c3e <__sflush_r+0xf2>
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	6062      	str	r2, [r4, #4]
 8002bb8:	04d9      	lsls	r1, r3, #19
 8002bba:	6922      	ldr	r2, [r4, #16]
 8002bbc:	6022      	str	r2, [r4, #0]
 8002bbe:	d504      	bpl.n	8002bca <__sflush_r+0x7e>
 8002bc0:	1c42      	adds	r2, r0, #1
 8002bc2:	d101      	bne.n	8002bc8 <__sflush_r+0x7c>
 8002bc4:	682b      	ldr	r3, [r5, #0]
 8002bc6:	b903      	cbnz	r3, 8002bca <__sflush_r+0x7e>
 8002bc8:	6560      	str	r0, [r4, #84]	; 0x54
 8002bca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002bcc:	602f      	str	r7, [r5, #0]
 8002bce:	2900      	cmp	r1, #0
 8002bd0:	d0c9      	beq.n	8002b66 <__sflush_r+0x1a>
 8002bd2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8002bd6:	4299      	cmp	r1, r3
 8002bd8:	d002      	beq.n	8002be0 <__sflush_r+0x94>
 8002bda:	4628      	mov	r0, r5
 8002bdc:	f000 f994 	bl	8002f08 <_free_r>
 8002be0:	2000      	movs	r0, #0
 8002be2:	6360      	str	r0, [r4, #52]	; 0x34
 8002be4:	e7c0      	b.n	8002b68 <__sflush_r+0x1c>
 8002be6:	2301      	movs	r3, #1
 8002be8:	4628      	mov	r0, r5
 8002bea:	47b0      	blx	r6
 8002bec:	1c41      	adds	r1, r0, #1
 8002bee:	d1c8      	bne.n	8002b82 <__sflush_r+0x36>
 8002bf0:	682b      	ldr	r3, [r5, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d0c5      	beq.n	8002b82 <__sflush_r+0x36>
 8002bf6:	2b1d      	cmp	r3, #29
 8002bf8:	d001      	beq.n	8002bfe <__sflush_r+0xb2>
 8002bfa:	2b16      	cmp	r3, #22
 8002bfc:	d101      	bne.n	8002c02 <__sflush_r+0xb6>
 8002bfe:	602f      	str	r7, [r5, #0]
 8002c00:	e7b1      	b.n	8002b66 <__sflush_r+0x1a>
 8002c02:	89a3      	ldrh	r3, [r4, #12]
 8002c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c08:	81a3      	strh	r3, [r4, #12]
 8002c0a:	e7ad      	b.n	8002b68 <__sflush_r+0x1c>
 8002c0c:	690f      	ldr	r7, [r1, #16]
 8002c0e:	2f00      	cmp	r7, #0
 8002c10:	d0a9      	beq.n	8002b66 <__sflush_r+0x1a>
 8002c12:	0793      	lsls	r3, r2, #30
 8002c14:	680e      	ldr	r6, [r1, #0]
 8002c16:	bf08      	it	eq
 8002c18:	694b      	ldreq	r3, [r1, #20]
 8002c1a:	600f      	str	r7, [r1, #0]
 8002c1c:	bf18      	it	ne
 8002c1e:	2300      	movne	r3, #0
 8002c20:	eba6 0807 	sub.w	r8, r6, r7
 8002c24:	608b      	str	r3, [r1, #8]
 8002c26:	f1b8 0f00 	cmp.w	r8, #0
 8002c2a:	dd9c      	ble.n	8002b66 <__sflush_r+0x1a>
 8002c2c:	4643      	mov	r3, r8
 8002c2e:	463a      	mov	r2, r7
 8002c30:	6a21      	ldr	r1, [r4, #32]
 8002c32:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002c34:	4628      	mov	r0, r5
 8002c36:	47b0      	blx	r6
 8002c38:	2800      	cmp	r0, #0
 8002c3a:	dc06      	bgt.n	8002c4a <__sflush_r+0xfe>
 8002c3c:	89a3      	ldrh	r3, [r4, #12]
 8002c3e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002c42:	81a3      	strh	r3, [r4, #12]
 8002c44:	f04f 30ff 	mov.w	r0, #4294967295
 8002c48:	e78e      	b.n	8002b68 <__sflush_r+0x1c>
 8002c4a:	4407      	add	r7, r0
 8002c4c:	eba8 0800 	sub.w	r8, r8, r0
 8002c50:	e7e9      	b.n	8002c26 <__sflush_r+0xda>
 8002c52:	bf00      	nop
 8002c54:	20400001 	.word	0x20400001

08002c58 <_fflush_r>:
 8002c58:	b538      	push	{r3, r4, r5, lr}
 8002c5a:	690b      	ldr	r3, [r1, #16]
 8002c5c:	4605      	mov	r5, r0
 8002c5e:	460c      	mov	r4, r1
 8002c60:	b1db      	cbz	r3, 8002c9a <_fflush_r+0x42>
 8002c62:	b118      	cbz	r0, 8002c6c <_fflush_r+0x14>
 8002c64:	6983      	ldr	r3, [r0, #24]
 8002c66:	b90b      	cbnz	r3, 8002c6c <_fflush_r+0x14>
 8002c68:	f000 f860 	bl	8002d2c <__sinit>
 8002c6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ca0 <_fflush_r+0x48>)
 8002c6e:	429c      	cmp	r4, r3
 8002c70:	d109      	bne.n	8002c86 <_fflush_r+0x2e>
 8002c72:	686c      	ldr	r4, [r5, #4]
 8002c74:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002c78:	b17b      	cbz	r3, 8002c9a <_fflush_r+0x42>
 8002c7a:	4621      	mov	r1, r4
 8002c7c:	4628      	mov	r0, r5
 8002c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002c82:	f7ff bf63 	b.w	8002b4c <__sflush_r>
 8002c86:	4b07      	ldr	r3, [pc, #28]	; (8002ca4 <_fflush_r+0x4c>)
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	d101      	bne.n	8002c90 <_fflush_r+0x38>
 8002c8c:	68ac      	ldr	r4, [r5, #8]
 8002c8e:	e7f1      	b.n	8002c74 <_fflush_r+0x1c>
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <_fflush_r+0x50>)
 8002c92:	429c      	cmp	r4, r3
 8002c94:	bf08      	it	eq
 8002c96:	68ec      	ldreq	r4, [r5, #12]
 8002c98:	e7ec      	b.n	8002c74 <_fflush_r+0x1c>
 8002c9a:	2000      	movs	r0, #0
 8002c9c:	bd38      	pop	{r3, r4, r5, pc}
 8002c9e:	bf00      	nop
 8002ca0:	08003ad0 	.word	0x08003ad0
 8002ca4:	08003af0 	.word	0x08003af0
 8002ca8:	08003ab0 	.word	0x08003ab0

08002cac <std>:
 8002cac:	2300      	movs	r3, #0
 8002cae:	b510      	push	{r4, lr}
 8002cb0:	4604      	mov	r4, r0
 8002cb2:	e9c0 3300 	strd	r3, r3, [r0]
 8002cb6:	6083      	str	r3, [r0, #8]
 8002cb8:	8181      	strh	r1, [r0, #12]
 8002cba:	6643      	str	r3, [r0, #100]	; 0x64
 8002cbc:	81c2      	strh	r2, [r0, #14]
 8002cbe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002cc2:	6183      	str	r3, [r0, #24]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	2208      	movs	r2, #8
 8002cc8:	305c      	adds	r0, #92	; 0x5c
 8002cca:	f7ff fdfb 	bl	80028c4 <memset>
 8002cce:	4b05      	ldr	r3, [pc, #20]	; (8002ce4 <std+0x38>)
 8002cd0:	6263      	str	r3, [r4, #36]	; 0x24
 8002cd2:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <std+0x3c>)
 8002cd4:	62a3      	str	r3, [r4, #40]	; 0x28
 8002cd6:	4b05      	ldr	r3, [pc, #20]	; (8002cec <std+0x40>)
 8002cd8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8002cda:	4b05      	ldr	r3, [pc, #20]	; (8002cf0 <std+0x44>)
 8002cdc:	6224      	str	r4, [r4, #32]
 8002cde:	6323      	str	r3, [r4, #48]	; 0x30
 8002ce0:	bd10      	pop	{r4, pc}
 8002ce2:	bf00      	nop
 8002ce4:	08003609 	.word	0x08003609
 8002ce8:	0800362b 	.word	0x0800362b
 8002cec:	08003663 	.word	0x08003663
 8002cf0:	08003687 	.word	0x08003687

08002cf4 <_cleanup_r>:
 8002cf4:	4901      	ldr	r1, [pc, #4]	; (8002cfc <_cleanup_r+0x8>)
 8002cf6:	f000 b885 	b.w	8002e04 <_fwalk_reent>
 8002cfa:	bf00      	nop
 8002cfc:	08002c59 	.word	0x08002c59

08002d00 <__sfmoreglue>:
 8002d00:	b570      	push	{r4, r5, r6, lr}
 8002d02:	1e4a      	subs	r2, r1, #1
 8002d04:	2568      	movs	r5, #104	; 0x68
 8002d06:	4355      	muls	r5, r2
 8002d08:	460e      	mov	r6, r1
 8002d0a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002d0e:	f000 f949 	bl	8002fa4 <_malloc_r>
 8002d12:	4604      	mov	r4, r0
 8002d14:	b140      	cbz	r0, 8002d28 <__sfmoreglue+0x28>
 8002d16:	2100      	movs	r1, #0
 8002d18:	e9c0 1600 	strd	r1, r6, [r0]
 8002d1c:	300c      	adds	r0, #12
 8002d1e:	60a0      	str	r0, [r4, #8]
 8002d20:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002d24:	f7ff fdce 	bl	80028c4 <memset>
 8002d28:	4620      	mov	r0, r4
 8002d2a:	bd70      	pop	{r4, r5, r6, pc}

08002d2c <__sinit>:
 8002d2c:	6983      	ldr	r3, [r0, #24]
 8002d2e:	b510      	push	{r4, lr}
 8002d30:	4604      	mov	r4, r0
 8002d32:	bb33      	cbnz	r3, 8002d82 <__sinit+0x56>
 8002d34:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8002d38:	6503      	str	r3, [r0, #80]	; 0x50
 8002d3a:	4b12      	ldr	r3, [pc, #72]	; (8002d84 <__sinit+0x58>)
 8002d3c:	4a12      	ldr	r2, [pc, #72]	; (8002d88 <__sinit+0x5c>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6282      	str	r2, [r0, #40]	; 0x28
 8002d42:	4298      	cmp	r0, r3
 8002d44:	bf04      	itt	eq
 8002d46:	2301      	moveq	r3, #1
 8002d48:	6183      	streq	r3, [r0, #24]
 8002d4a:	f000 f81f 	bl	8002d8c <__sfp>
 8002d4e:	6060      	str	r0, [r4, #4]
 8002d50:	4620      	mov	r0, r4
 8002d52:	f000 f81b 	bl	8002d8c <__sfp>
 8002d56:	60a0      	str	r0, [r4, #8]
 8002d58:	4620      	mov	r0, r4
 8002d5a:	f000 f817 	bl	8002d8c <__sfp>
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60e0      	str	r0, [r4, #12]
 8002d62:	2104      	movs	r1, #4
 8002d64:	6860      	ldr	r0, [r4, #4]
 8002d66:	f7ff ffa1 	bl	8002cac <std>
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	2109      	movs	r1, #9
 8002d6e:	68a0      	ldr	r0, [r4, #8]
 8002d70:	f7ff ff9c 	bl	8002cac <std>
 8002d74:	2202      	movs	r2, #2
 8002d76:	2112      	movs	r1, #18
 8002d78:	68e0      	ldr	r0, [r4, #12]
 8002d7a:	f7ff ff97 	bl	8002cac <std>
 8002d7e:	2301      	movs	r3, #1
 8002d80:	61a3      	str	r3, [r4, #24]
 8002d82:	bd10      	pop	{r4, pc}
 8002d84:	08003aac 	.word	0x08003aac
 8002d88:	08002cf5 	.word	0x08002cf5

08002d8c <__sfp>:
 8002d8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d8e:	4b1b      	ldr	r3, [pc, #108]	; (8002dfc <__sfp+0x70>)
 8002d90:	681e      	ldr	r6, [r3, #0]
 8002d92:	69b3      	ldr	r3, [r6, #24]
 8002d94:	4607      	mov	r7, r0
 8002d96:	b913      	cbnz	r3, 8002d9e <__sfp+0x12>
 8002d98:	4630      	mov	r0, r6
 8002d9a:	f7ff ffc7 	bl	8002d2c <__sinit>
 8002d9e:	3648      	adds	r6, #72	; 0x48
 8002da0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8002da4:	3b01      	subs	r3, #1
 8002da6:	d503      	bpl.n	8002db0 <__sfp+0x24>
 8002da8:	6833      	ldr	r3, [r6, #0]
 8002daa:	b133      	cbz	r3, 8002dba <__sfp+0x2e>
 8002dac:	6836      	ldr	r6, [r6, #0]
 8002dae:	e7f7      	b.n	8002da0 <__sfp+0x14>
 8002db0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8002db4:	b16d      	cbz	r5, 8002dd2 <__sfp+0x46>
 8002db6:	3468      	adds	r4, #104	; 0x68
 8002db8:	e7f4      	b.n	8002da4 <__sfp+0x18>
 8002dba:	2104      	movs	r1, #4
 8002dbc:	4638      	mov	r0, r7
 8002dbe:	f7ff ff9f 	bl	8002d00 <__sfmoreglue>
 8002dc2:	6030      	str	r0, [r6, #0]
 8002dc4:	2800      	cmp	r0, #0
 8002dc6:	d1f1      	bne.n	8002dac <__sfp+0x20>
 8002dc8:	230c      	movs	r3, #12
 8002dca:	603b      	str	r3, [r7, #0]
 8002dcc:	4604      	mov	r4, r0
 8002dce:	4620      	mov	r0, r4
 8002dd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dd2:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <__sfp+0x74>)
 8002dd4:	6665      	str	r5, [r4, #100]	; 0x64
 8002dd6:	e9c4 5500 	strd	r5, r5, [r4]
 8002dda:	60a5      	str	r5, [r4, #8]
 8002ddc:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8002de0:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8002de4:	2208      	movs	r2, #8
 8002de6:	4629      	mov	r1, r5
 8002de8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002dec:	f7ff fd6a 	bl	80028c4 <memset>
 8002df0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8002df4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002df8:	e7e9      	b.n	8002dce <__sfp+0x42>
 8002dfa:	bf00      	nop
 8002dfc:	08003aac 	.word	0x08003aac
 8002e00:	ffff0001 	.word	0xffff0001

08002e04 <_fwalk_reent>:
 8002e04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e08:	4680      	mov	r8, r0
 8002e0a:	4689      	mov	r9, r1
 8002e0c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002e10:	2600      	movs	r6, #0
 8002e12:	b914      	cbnz	r4, 8002e1a <_fwalk_reent+0x16>
 8002e14:	4630      	mov	r0, r6
 8002e16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e1a:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8002e1e:	3f01      	subs	r7, #1
 8002e20:	d501      	bpl.n	8002e26 <_fwalk_reent+0x22>
 8002e22:	6824      	ldr	r4, [r4, #0]
 8002e24:	e7f5      	b.n	8002e12 <_fwalk_reent+0xe>
 8002e26:	89ab      	ldrh	r3, [r5, #12]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d907      	bls.n	8002e3c <_fwalk_reent+0x38>
 8002e2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002e30:	3301      	adds	r3, #1
 8002e32:	d003      	beq.n	8002e3c <_fwalk_reent+0x38>
 8002e34:	4629      	mov	r1, r5
 8002e36:	4640      	mov	r0, r8
 8002e38:	47c8      	blx	r9
 8002e3a:	4306      	orrs	r6, r0
 8002e3c:	3568      	adds	r5, #104	; 0x68
 8002e3e:	e7ee      	b.n	8002e1e <_fwalk_reent+0x1a>

08002e40 <__swhatbuf_r>:
 8002e40:	b570      	push	{r4, r5, r6, lr}
 8002e42:	460e      	mov	r6, r1
 8002e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002e48:	2900      	cmp	r1, #0
 8002e4a:	b096      	sub	sp, #88	; 0x58
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	da07      	bge.n	8002e62 <__swhatbuf_r+0x22>
 8002e52:	2300      	movs	r3, #0
 8002e54:	602b      	str	r3, [r5, #0]
 8002e56:	89b3      	ldrh	r3, [r6, #12]
 8002e58:	061a      	lsls	r2, r3, #24
 8002e5a:	d410      	bmi.n	8002e7e <__swhatbuf_r+0x3e>
 8002e5c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002e60:	e00e      	b.n	8002e80 <__swhatbuf_r+0x40>
 8002e62:	466a      	mov	r2, sp
 8002e64:	f000 fc36 	bl	80036d4 <_fstat_r>
 8002e68:	2800      	cmp	r0, #0
 8002e6a:	dbf2      	blt.n	8002e52 <__swhatbuf_r+0x12>
 8002e6c:	9a01      	ldr	r2, [sp, #4]
 8002e6e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8002e72:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8002e76:	425a      	negs	r2, r3
 8002e78:	415a      	adcs	r2, r3
 8002e7a:	602a      	str	r2, [r5, #0]
 8002e7c:	e7ee      	b.n	8002e5c <__swhatbuf_r+0x1c>
 8002e7e:	2340      	movs	r3, #64	; 0x40
 8002e80:	2000      	movs	r0, #0
 8002e82:	6023      	str	r3, [r4, #0]
 8002e84:	b016      	add	sp, #88	; 0x58
 8002e86:	bd70      	pop	{r4, r5, r6, pc}

08002e88 <__smakebuf_r>:
 8002e88:	898b      	ldrh	r3, [r1, #12]
 8002e8a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002e8c:	079d      	lsls	r5, r3, #30
 8002e8e:	4606      	mov	r6, r0
 8002e90:	460c      	mov	r4, r1
 8002e92:	d507      	bpl.n	8002ea4 <__smakebuf_r+0x1c>
 8002e94:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8002e98:	6023      	str	r3, [r4, #0]
 8002e9a:	6123      	str	r3, [r4, #16]
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	6163      	str	r3, [r4, #20]
 8002ea0:	b002      	add	sp, #8
 8002ea2:	bd70      	pop	{r4, r5, r6, pc}
 8002ea4:	ab01      	add	r3, sp, #4
 8002ea6:	466a      	mov	r2, sp
 8002ea8:	f7ff ffca 	bl	8002e40 <__swhatbuf_r>
 8002eac:	9900      	ldr	r1, [sp, #0]
 8002eae:	4605      	mov	r5, r0
 8002eb0:	4630      	mov	r0, r6
 8002eb2:	f000 f877 	bl	8002fa4 <_malloc_r>
 8002eb6:	b948      	cbnz	r0, 8002ecc <__smakebuf_r+0x44>
 8002eb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002ebc:	059a      	lsls	r2, r3, #22
 8002ebe:	d4ef      	bmi.n	8002ea0 <__smakebuf_r+0x18>
 8002ec0:	f023 0303 	bic.w	r3, r3, #3
 8002ec4:	f043 0302 	orr.w	r3, r3, #2
 8002ec8:	81a3      	strh	r3, [r4, #12]
 8002eca:	e7e3      	b.n	8002e94 <__smakebuf_r+0xc>
 8002ecc:	4b0d      	ldr	r3, [pc, #52]	; (8002f04 <__smakebuf_r+0x7c>)
 8002ece:	62b3      	str	r3, [r6, #40]	; 0x28
 8002ed0:	89a3      	ldrh	r3, [r4, #12]
 8002ed2:	6020      	str	r0, [r4, #0]
 8002ed4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ed8:	81a3      	strh	r3, [r4, #12]
 8002eda:	9b00      	ldr	r3, [sp, #0]
 8002edc:	6163      	str	r3, [r4, #20]
 8002ede:	9b01      	ldr	r3, [sp, #4]
 8002ee0:	6120      	str	r0, [r4, #16]
 8002ee2:	b15b      	cbz	r3, 8002efc <__smakebuf_r+0x74>
 8002ee4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002ee8:	4630      	mov	r0, r6
 8002eea:	f000 fc05 	bl	80036f8 <_isatty_r>
 8002eee:	b128      	cbz	r0, 8002efc <__smakebuf_r+0x74>
 8002ef0:	89a3      	ldrh	r3, [r4, #12]
 8002ef2:	f023 0303 	bic.w	r3, r3, #3
 8002ef6:	f043 0301 	orr.w	r3, r3, #1
 8002efa:	81a3      	strh	r3, [r4, #12]
 8002efc:	89a3      	ldrh	r3, [r4, #12]
 8002efe:	431d      	orrs	r5, r3
 8002f00:	81a5      	strh	r5, [r4, #12]
 8002f02:	e7cd      	b.n	8002ea0 <__smakebuf_r+0x18>
 8002f04:	08002cf5 	.word	0x08002cf5

08002f08 <_free_r>:
 8002f08:	b538      	push	{r3, r4, r5, lr}
 8002f0a:	4605      	mov	r5, r0
 8002f0c:	2900      	cmp	r1, #0
 8002f0e:	d045      	beq.n	8002f9c <_free_r+0x94>
 8002f10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002f14:	1f0c      	subs	r4, r1, #4
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bfb8      	it	lt
 8002f1a:	18e4      	addlt	r4, r4, r3
 8002f1c:	f000 fc0e 	bl	800373c <__malloc_lock>
 8002f20:	4a1f      	ldr	r2, [pc, #124]	; (8002fa0 <_free_r+0x98>)
 8002f22:	6813      	ldr	r3, [r2, #0]
 8002f24:	4610      	mov	r0, r2
 8002f26:	b933      	cbnz	r3, 8002f36 <_free_r+0x2e>
 8002f28:	6063      	str	r3, [r4, #4]
 8002f2a:	6014      	str	r4, [r2, #0]
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002f32:	f000 bc04 	b.w	800373e <__malloc_unlock>
 8002f36:	42a3      	cmp	r3, r4
 8002f38:	d90c      	bls.n	8002f54 <_free_r+0x4c>
 8002f3a:	6821      	ldr	r1, [r4, #0]
 8002f3c:	1862      	adds	r2, r4, r1
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	bf04      	itt	eq
 8002f42:	681a      	ldreq	r2, [r3, #0]
 8002f44:	685b      	ldreq	r3, [r3, #4]
 8002f46:	6063      	str	r3, [r4, #4]
 8002f48:	bf04      	itt	eq
 8002f4a:	1852      	addeq	r2, r2, r1
 8002f4c:	6022      	streq	r2, [r4, #0]
 8002f4e:	6004      	str	r4, [r0, #0]
 8002f50:	e7ec      	b.n	8002f2c <_free_r+0x24>
 8002f52:	4613      	mov	r3, r2
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	b10a      	cbz	r2, 8002f5c <_free_r+0x54>
 8002f58:	42a2      	cmp	r2, r4
 8002f5a:	d9fa      	bls.n	8002f52 <_free_r+0x4a>
 8002f5c:	6819      	ldr	r1, [r3, #0]
 8002f5e:	1858      	adds	r0, r3, r1
 8002f60:	42a0      	cmp	r0, r4
 8002f62:	d10b      	bne.n	8002f7c <_free_r+0x74>
 8002f64:	6820      	ldr	r0, [r4, #0]
 8002f66:	4401      	add	r1, r0
 8002f68:	1858      	adds	r0, r3, r1
 8002f6a:	4282      	cmp	r2, r0
 8002f6c:	6019      	str	r1, [r3, #0]
 8002f6e:	d1dd      	bne.n	8002f2c <_free_r+0x24>
 8002f70:	6810      	ldr	r0, [r2, #0]
 8002f72:	6852      	ldr	r2, [r2, #4]
 8002f74:	605a      	str	r2, [r3, #4]
 8002f76:	4401      	add	r1, r0
 8002f78:	6019      	str	r1, [r3, #0]
 8002f7a:	e7d7      	b.n	8002f2c <_free_r+0x24>
 8002f7c:	d902      	bls.n	8002f84 <_free_r+0x7c>
 8002f7e:	230c      	movs	r3, #12
 8002f80:	602b      	str	r3, [r5, #0]
 8002f82:	e7d3      	b.n	8002f2c <_free_r+0x24>
 8002f84:	6820      	ldr	r0, [r4, #0]
 8002f86:	1821      	adds	r1, r4, r0
 8002f88:	428a      	cmp	r2, r1
 8002f8a:	bf04      	itt	eq
 8002f8c:	6811      	ldreq	r1, [r2, #0]
 8002f8e:	6852      	ldreq	r2, [r2, #4]
 8002f90:	6062      	str	r2, [r4, #4]
 8002f92:	bf04      	itt	eq
 8002f94:	1809      	addeq	r1, r1, r0
 8002f96:	6021      	streq	r1, [r4, #0]
 8002f98:	605c      	str	r4, [r3, #4]
 8002f9a:	e7c7      	b.n	8002f2c <_free_r+0x24>
 8002f9c:	bd38      	pop	{r3, r4, r5, pc}
 8002f9e:	bf00      	nop
 8002fa0:	20000088 	.word	0x20000088

08002fa4 <_malloc_r>:
 8002fa4:	b570      	push	{r4, r5, r6, lr}
 8002fa6:	1ccd      	adds	r5, r1, #3
 8002fa8:	f025 0503 	bic.w	r5, r5, #3
 8002fac:	3508      	adds	r5, #8
 8002fae:	2d0c      	cmp	r5, #12
 8002fb0:	bf38      	it	cc
 8002fb2:	250c      	movcc	r5, #12
 8002fb4:	2d00      	cmp	r5, #0
 8002fb6:	4606      	mov	r6, r0
 8002fb8:	db01      	blt.n	8002fbe <_malloc_r+0x1a>
 8002fba:	42a9      	cmp	r1, r5
 8002fbc:	d903      	bls.n	8002fc6 <_malloc_r+0x22>
 8002fbe:	230c      	movs	r3, #12
 8002fc0:	6033      	str	r3, [r6, #0]
 8002fc2:	2000      	movs	r0, #0
 8002fc4:	bd70      	pop	{r4, r5, r6, pc}
 8002fc6:	f000 fbb9 	bl	800373c <__malloc_lock>
 8002fca:	4a21      	ldr	r2, [pc, #132]	; (8003050 <_malloc_r+0xac>)
 8002fcc:	6814      	ldr	r4, [r2, #0]
 8002fce:	4621      	mov	r1, r4
 8002fd0:	b991      	cbnz	r1, 8002ff8 <_malloc_r+0x54>
 8002fd2:	4c20      	ldr	r4, [pc, #128]	; (8003054 <_malloc_r+0xb0>)
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	b91b      	cbnz	r3, 8002fe0 <_malloc_r+0x3c>
 8002fd8:	4630      	mov	r0, r6
 8002fda:	f000 fb05 	bl	80035e8 <_sbrk_r>
 8002fde:	6020      	str	r0, [r4, #0]
 8002fe0:	4629      	mov	r1, r5
 8002fe2:	4630      	mov	r0, r6
 8002fe4:	f000 fb00 	bl	80035e8 <_sbrk_r>
 8002fe8:	1c43      	adds	r3, r0, #1
 8002fea:	d124      	bne.n	8003036 <_malloc_r+0x92>
 8002fec:	230c      	movs	r3, #12
 8002fee:	6033      	str	r3, [r6, #0]
 8002ff0:	4630      	mov	r0, r6
 8002ff2:	f000 fba4 	bl	800373e <__malloc_unlock>
 8002ff6:	e7e4      	b.n	8002fc2 <_malloc_r+0x1e>
 8002ff8:	680b      	ldr	r3, [r1, #0]
 8002ffa:	1b5b      	subs	r3, r3, r5
 8002ffc:	d418      	bmi.n	8003030 <_malloc_r+0x8c>
 8002ffe:	2b0b      	cmp	r3, #11
 8003000:	d90f      	bls.n	8003022 <_malloc_r+0x7e>
 8003002:	600b      	str	r3, [r1, #0]
 8003004:	50cd      	str	r5, [r1, r3]
 8003006:	18cc      	adds	r4, r1, r3
 8003008:	4630      	mov	r0, r6
 800300a:	f000 fb98 	bl	800373e <__malloc_unlock>
 800300e:	f104 000b 	add.w	r0, r4, #11
 8003012:	1d23      	adds	r3, r4, #4
 8003014:	f020 0007 	bic.w	r0, r0, #7
 8003018:	1ac3      	subs	r3, r0, r3
 800301a:	d0d3      	beq.n	8002fc4 <_malloc_r+0x20>
 800301c:	425a      	negs	r2, r3
 800301e:	50e2      	str	r2, [r4, r3]
 8003020:	e7d0      	b.n	8002fc4 <_malloc_r+0x20>
 8003022:	428c      	cmp	r4, r1
 8003024:	684b      	ldr	r3, [r1, #4]
 8003026:	bf16      	itet	ne
 8003028:	6063      	strne	r3, [r4, #4]
 800302a:	6013      	streq	r3, [r2, #0]
 800302c:	460c      	movne	r4, r1
 800302e:	e7eb      	b.n	8003008 <_malloc_r+0x64>
 8003030:	460c      	mov	r4, r1
 8003032:	6849      	ldr	r1, [r1, #4]
 8003034:	e7cc      	b.n	8002fd0 <_malloc_r+0x2c>
 8003036:	1cc4      	adds	r4, r0, #3
 8003038:	f024 0403 	bic.w	r4, r4, #3
 800303c:	42a0      	cmp	r0, r4
 800303e:	d005      	beq.n	800304c <_malloc_r+0xa8>
 8003040:	1a21      	subs	r1, r4, r0
 8003042:	4630      	mov	r0, r6
 8003044:	f000 fad0 	bl	80035e8 <_sbrk_r>
 8003048:	3001      	adds	r0, #1
 800304a:	d0cf      	beq.n	8002fec <_malloc_r+0x48>
 800304c:	6025      	str	r5, [r4, #0]
 800304e:	e7db      	b.n	8003008 <_malloc_r+0x64>
 8003050:	20000088 	.word	0x20000088
 8003054:	2000008c 	.word	0x2000008c

08003058 <__sfputc_r>:
 8003058:	6893      	ldr	r3, [r2, #8]
 800305a:	3b01      	subs	r3, #1
 800305c:	2b00      	cmp	r3, #0
 800305e:	b410      	push	{r4}
 8003060:	6093      	str	r3, [r2, #8]
 8003062:	da08      	bge.n	8003076 <__sfputc_r+0x1e>
 8003064:	6994      	ldr	r4, [r2, #24]
 8003066:	42a3      	cmp	r3, r4
 8003068:	db01      	blt.n	800306e <__sfputc_r+0x16>
 800306a:	290a      	cmp	r1, #10
 800306c:	d103      	bne.n	8003076 <__sfputc_r+0x1e>
 800306e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003072:	f7ff bcab 	b.w	80029cc <__swbuf_r>
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	1c58      	adds	r0, r3, #1
 800307a:	6010      	str	r0, [r2, #0]
 800307c:	7019      	strb	r1, [r3, #0]
 800307e:	4608      	mov	r0, r1
 8003080:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003084:	4770      	bx	lr

08003086 <__sfputs_r>:
 8003086:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003088:	4606      	mov	r6, r0
 800308a:	460f      	mov	r7, r1
 800308c:	4614      	mov	r4, r2
 800308e:	18d5      	adds	r5, r2, r3
 8003090:	42ac      	cmp	r4, r5
 8003092:	d101      	bne.n	8003098 <__sfputs_r+0x12>
 8003094:	2000      	movs	r0, #0
 8003096:	e007      	b.n	80030a8 <__sfputs_r+0x22>
 8003098:	463a      	mov	r2, r7
 800309a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800309e:	4630      	mov	r0, r6
 80030a0:	f7ff ffda 	bl	8003058 <__sfputc_r>
 80030a4:	1c43      	adds	r3, r0, #1
 80030a6:	d1f3      	bne.n	8003090 <__sfputs_r+0xa>
 80030a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030ac <_vfiprintf_r>:
 80030ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030b0:	460c      	mov	r4, r1
 80030b2:	b09d      	sub	sp, #116	; 0x74
 80030b4:	4617      	mov	r7, r2
 80030b6:	461d      	mov	r5, r3
 80030b8:	4606      	mov	r6, r0
 80030ba:	b118      	cbz	r0, 80030c4 <_vfiprintf_r+0x18>
 80030bc:	6983      	ldr	r3, [r0, #24]
 80030be:	b90b      	cbnz	r3, 80030c4 <_vfiprintf_r+0x18>
 80030c0:	f7ff fe34 	bl	8002d2c <__sinit>
 80030c4:	4b7c      	ldr	r3, [pc, #496]	; (80032b8 <_vfiprintf_r+0x20c>)
 80030c6:	429c      	cmp	r4, r3
 80030c8:	d158      	bne.n	800317c <_vfiprintf_r+0xd0>
 80030ca:	6874      	ldr	r4, [r6, #4]
 80030cc:	89a3      	ldrh	r3, [r4, #12]
 80030ce:	0718      	lsls	r0, r3, #28
 80030d0:	d55e      	bpl.n	8003190 <_vfiprintf_r+0xe4>
 80030d2:	6923      	ldr	r3, [r4, #16]
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d05b      	beq.n	8003190 <_vfiprintf_r+0xe4>
 80030d8:	2300      	movs	r3, #0
 80030da:	9309      	str	r3, [sp, #36]	; 0x24
 80030dc:	2320      	movs	r3, #32
 80030de:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80030e2:	2330      	movs	r3, #48	; 0x30
 80030e4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80030e8:	9503      	str	r5, [sp, #12]
 80030ea:	f04f 0b01 	mov.w	fp, #1
 80030ee:	46b8      	mov	r8, r7
 80030f0:	4645      	mov	r5, r8
 80030f2:	f815 3b01 	ldrb.w	r3, [r5], #1
 80030f6:	b10b      	cbz	r3, 80030fc <_vfiprintf_r+0x50>
 80030f8:	2b25      	cmp	r3, #37	; 0x25
 80030fa:	d154      	bne.n	80031a6 <_vfiprintf_r+0xfa>
 80030fc:	ebb8 0a07 	subs.w	sl, r8, r7
 8003100:	d00b      	beq.n	800311a <_vfiprintf_r+0x6e>
 8003102:	4653      	mov	r3, sl
 8003104:	463a      	mov	r2, r7
 8003106:	4621      	mov	r1, r4
 8003108:	4630      	mov	r0, r6
 800310a:	f7ff ffbc 	bl	8003086 <__sfputs_r>
 800310e:	3001      	adds	r0, #1
 8003110:	f000 80c2 	beq.w	8003298 <_vfiprintf_r+0x1ec>
 8003114:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003116:	4453      	add	r3, sl
 8003118:	9309      	str	r3, [sp, #36]	; 0x24
 800311a:	f898 3000 	ldrb.w	r3, [r8]
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80ba 	beq.w	8003298 <_vfiprintf_r+0x1ec>
 8003124:	2300      	movs	r3, #0
 8003126:	f04f 32ff 	mov.w	r2, #4294967295
 800312a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800312e:	9304      	str	r3, [sp, #16]
 8003130:	9307      	str	r3, [sp, #28]
 8003132:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8003136:	931a      	str	r3, [sp, #104]	; 0x68
 8003138:	46a8      	mov	r8, r5
 800313a:	2205      	movs	r2, #5
 800313c:	f818 1b01 	ldrb.w	r1, [r8], #1
 8003140:	485e      	ldr	r0, [pc, #376]	; (80032bc <_vfiprintf_r+0x210>)
 8003142:	f7fd f845 	bl	80001d0 <memchr>
 8003146:	9b04      	ldr	r3, [sp, #16]
 8003148:	bb78      	cbnz	r0, 80031aa <_vfiprintf_r+0xfe>
 800314a:	06d9      	lsls	r1, r3, #27
 800314c:	bf44      	itt	mi
 800314e:	2220      	movmi	r2, #32
 8003150:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8003154:	071a      	lsls	r2, r3, #28
 8003156:	bf44      	itt	mi
 8003158:	222b      	movmi	r2, #43	; 0x2b
 800315a:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800315e:	782a      	ldrb	r2, [r5, #0]
 8003160:	2a2a      	cmp	r2, #42	; 0x2a
 8003162:	d02a      	beq.n	80031ba <_vfiprintf_r+0x10e>
 8003164:	9a07      	ldr	r2, [sp, #28]
 8003166:	46a8      	mov	r8, r5
 8003168:	2000      	movs	r0, #0
 800316a:	250a      	movs	r5, #10
 800316c:	4641      	mov	r1, r8
 800316e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003172:	3b30      	subs	r3, #48	; 0x30
 8003174:	2b09      	cmp	r3, #9
 8003176:	d969      	bls.n	800324c <_vfiprintf_r+0x1a0>
 8003178:	b360      	cbz	r0, 80031d4 <_vfiprintf_r+0x128>
 800317a:	e024      	b.n	80031c6 <_vfiprintf_r+0x11a>
 800317c:	4b50      	ldr	r3, [pc, #320]	; (80032c0 <_vfiprintf_r+0x214>)
 800317e:	429c      	cmp	r4, r3
 8003180:	d101      	bne.n	8003186 <_vfiprintf_r+0xda>
 8003182:	68b4      	ldr	r4, [r6, #8]
 8003184:	e7a2      	b.n	80030cc <_vfiprintf_r+0x20>
 8003186:	4b4f      	ldr	r3, [pc, #316]	; (80032c4 <_vfiprintf_r+0x218>)
 8003188:	429c      	cmp	r4, r3
 800318a:	bf08      	it	eq
 800318c:	68f4      	ldreq	r4, [r6, #12]
 800318e:	e79d      	b.n	80030cc <_vfiprintf_r+0x20>
 8003190:	4621      	mov	r1, r4
 8003192:	4630      	mov	r0, r6
 8003194:	f7ff fc6c 	bl	8002a70 <__swsetup_r>
 8003198:	2800      	cmp	r0, #0
 800319a:	d09d      	beq.n	80030d8 <_vfiprintf_r+0x2c>
 800319c:	f04f 30ff 	mov.w	r0, #4294967295
 80031a0:	b01d      	add	sp, #116	; 0x74
 80031a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80031a6:	46a8      	mov	r8, r5
 80031a8:	e7a2      	b.n	80030f0 <_vfiprintf_r+0x44>
 80031aa:	4a44      	ldr	r2, [pc, #272]	; (80032bc <_vfiprintf_r+0x210>)
 80031ac:	1a80      	subs	r0, r0, r2
 80031ae:	fa0b f000 	lsl.w	r0, fp, r0
 80031b2:	4318      	orrs	r0, r3
 80031b4:	9004      	str	r0, [sp, #16]
 80031b6:	4645      	mov	r5, r8
 80031b8:	e7be      	b.n	8003138 <_vfiprintf_r+0x8c>
 80031ba:	9a03      	ldr	r2, [sp, #12]
 80031bc:	1d11      	adds	r1, r2, #4
 80031be:	6812      	ldr	r2, [r2, #0]
 80031c0:	9103      	str	r1, [sp, #12]
 80031c2:	2a00      	cmp	r2, #0
 80031c4:	db01      	blt.n	80031ca <_vfiprintf_r+0x11e>
 80031c6:	9207      	str	r2, [sp, #28]
 80031c8:	e004      	b.n	80031d4 <_vfiprintf_r+0x128>
 80031ca:	4252      	negs	r2, r2
 80031cc:	f043 0302 	orr.w	r3, r3, #2
 80031d0:	9207      	str	r2, [sp, #28]
 80031d2:	9304      	str	r3, [sp, #16]
 80031d4:	f898 3000 	ldrb.w	r3, [r8]
 80031d8:	2b2e      	cmp	r3, #46	; 0x2e
 80031da:	d10e      	bne.n	80031fa <_vfiprintf_r+0x14e>
 80031dc:	f898 3001 	ldrb.w	r3, [r8, #1]
 80031e0:	2b2a      	cmp	r3, #42	; 0x2a
 80031e2:	d138      	bne.n	8003256 <_vfiprintf_r+0x1aa>
 80031e4:	9b03      	ldr	r3, [sp, #12]
 80031e6:	1d1a      	adds	r2, r3, #4
 80031e8:	681b      	ldr	r3, [r3, #0]
 80031ea:	9203      	str	r2, [sp, #12]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	bfb8      	it	lt
 80031f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80031f4:	f108 0802 	add.w	r8, r8, #2
 80031f8:	9305      	str	r3, [sp, #20]
 80031fa:	4d33      	ldr	r5, [pc, #204]	; (80032c8 <_vfiprintf_r+0x21c>)
 80031fc:	f898 1000 	ldrb.w	r1, [r8]
 8003200:	2203      	movs	r2, #3
 8003202:	4628      	mov	r0, r5
 8003204:	f7fc ffe4 	bl	80001d0 <memchr>
 8003208:	b140      	cbz	r0, 800321c <_vfiprintf_r+0x170>
 800320a:	2340      	movs	r3, #64	; 0x40
 800320c:	1b40      	subs	r0, r0, r5
 800320e:	fa03 f000 	lsl.w	r0, r3, r0
 8003212:	9b04      	ldr	r3, [sp, #16]
 8003214:	4303      	orrs	r3, r0
 8003216:	f108 0801 	add.w	r8, r8, #1
 800321a:	9304      	str	r3, [sp, #16]
 800321c:	f898 1000 	ldrb.w	r1, [r8]
 8003220:	482a      	ldr	r0, [pc, #168]	; (80032cc <_vfiprintf_r+0x220>)
 8003222:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8003226:	2206      	movs	r2, #6
 8003228:	f108 0701 	add.w	r7, r8, #1
 800322c:	f7fc ffd0 	bl	80001d0 <memchr>
 8003230:	2800      	cmp	r0, #0
 8003232:	d037      	beq.n	80032a4 <_vfiprintf_r+0x1f8>
 8003234:	4b26      	ldr	r3, [pc, #152]	; (80032d0 <_vfiprintf_r+0x224>)
 8003236:	bb1b      	cbnz	r3, 8003280 <_vfiprintf_r+0x1d4>
 8003238:	9b03      	ldr	r3, [sp, #12]
 800323a:	3307      	adds	r3, #7
 800323c:	f023 0307 	bic.w	r3, r3, #7
 8003240:	3308      	adds	r3, #8
 8003242:	9303      	str	r3, [sp, #12]
 8003244:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003246:	444b      	add	r3, r9
 8003248:	9309      	str	r3, [sp, #36]	; 0x24
 800324a:	e750      	b.n	80030ee <_vfiprintf_r+0x42>
 800324c:	fb05 3202 	mla	r2, r5, r2, r3
 8003250:	2001      	movs	r0, #1
 8003252:	4688      	mov	r8, r1
 8003254:	e78a      	b.n	800316c <_vfiprintf_r+0xc0>
 8003256:	2300      	movs	r3, #0
 8003258:	f108 0801 	add.w	r8, r8, #1
 800325c:	9305      	str	r3, [sp, #20]
 800325e:	4619      	mov	r1, r3
 8003260:	250a      	movs	r5, #10
 8003262:	4640      	mov	r0, r8
 8003264:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003268:	3a30      	subs	r2, #48	; 0x30
 800326a:	2a09      	cmp	r2, #9
 800326c:	d903      	bls.n	8003276 <_vfiprintf_r+0x1ca>
 800326e:	2b00      	cmp	r3, #0
 8003270:	d0c3      	beq.n	80031fa <_vfiprintf_r+0x14e>
 8003272:	9105      	str	r1, [sp, #20]
 8003274:	e7c1      	b.n	80031fa <_vfiprintf_r+0x14e>
 8003276:	fb05 2101 	mla	r1, r5, r1, r2
 800327a:	2301      	movs	r3, #1
 800327c:	4680      	mov	r8, r0
 800327e:	e7f0      	b.n	8003262 <_vfiprintf_r+0x1b6>
 8003280:	ab03      	add	r3, sp, #12
 8003282:	9300      	str	r3, [sp, #0]
 8003284:	4622      	mov	r2, r4
 8003286:	4b13      	ldr	r3, [pc, #76]	; (80032d4 <_vfiprintf_r+0x228>)
 8003288:	a904      	add	r1, sp, #16
 800328a:	4630      	mov	r0, r6
 800328c:	f3af 8000 	nop.w
 8003290:	f1b0 3fff 	cmp.w	r0, #4294967295
 8003294:	4681      	mov	r9, r0
 8003296:	d1d5      	bne.n	8003244 <_vfiprintf_r+0x198>
 8003298:	89a3      	ldrh	r3, [r4, #12]
 800329a:	065b      	lsls	r3, r3, #25
 800329c:	f53f af7e 	bmi.w	800319c <_vfiprintf_r+0xf0>
 80032a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80032a2:	e77d      	b.n	80031a0 <_vfiprintf_r+0xf4>
 80032a4:	ab03      	add	r3, sp, #12
 80032a6:	9300      	str	r3, [sp, #0]
 80032a8:	4622      	mov	r2, r4
 80032aa:	4b0a      	ldr	r3, [pc, #40]	; (80032d4 <_vfiprintf_r+0x228>)
 80032ac:	a904      	add	r1, sp, #16
 80032ae:	4630      	mov	r0, r6
 80032b0:	f000 f888 	bl	80033c4 <_printf_i>
 80032b4:	e7ec      	b.n	8003290 <_vfiprintf_r+0x1e4>
 80032b6:	bf00      	nop
 80032b8:	08003ad0 	.word	0x08003ad0
 80032bc:	08003b10 	.word	0x08003b10
 80032c0:	08003af0 	.word	0x08003af0
 80032c4:	08003ab0 	.word	0x08003ab0
 80032c8:	08003b16 	.word	0x08003b16
 80032cc:	08003b1a 	.word	0x08003b1a
 80032d0:	00000000 	.word	0x00000000
 80032d4:	08003087 	.word	0x08003087

080032d8 <_printf_common>:
 80032d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80032dc:	4691      	mov	r9, r2
 80032de:	461f      	mov	r7, r3
 80032e0:	688a      	ldr	r2, [r1, #8]
 80032e2:	690b      	ldr	r3, [r1, #16]
 80032e4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80032e8:	4293      	cmp	r3, r2
 80032ea:	bfb8      	it	lt
 80032ec:	4613      	movlt	r3, r2
 80032ee:	f8c9 3000 	str.w	r3, [r9]
 80032f2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80032f6:	4606      	mov	r6, r0
 80032f8:	460c      	mov	r4, r1
 80032fa:	b112      	cbz	r2, 8003302 <_printf_common+0x2a>
 80032fc:	3301      	adds	r3, #1
 80032fe:	f8c9 3000 	str.w	r3, [r9]
 8003302:	6823      	ldr	r3, [r4, #0]
 8003304:	0699      	lsls	r1, r3, #26
 8003306:	bf42      	ittt	mi
 8003308:	f8d9 3000 	ldrmi.w	r3, [r9]
 800330c:	3302      	addmi	r3, #2
 800330e:	f8c9 3000 	strmi.w	r3, [r9]
 8003312:	6825      	ldr	r5, [r4, #0]
 8003314:	f015 0506 	ands.w	r5, r5, #6
 8003318:	d107      	bne.n	800332a <_printf_common+0x52>
 800331a:	f104 0a19 	add.w	sl, r4, #25
 800331e:	68e3      	ldr	r3, [r4, #12]
 8003320:	f8d9 2000 	ldr.w	r2, [r9]
 8003324:	1a9b      	subs	r3, r3, r2
 8003326:	42ab      	cmp	r3, r5
 8003328:	dc28      	bgt.n	800337c <_printf_common+0xa4>
 800332a:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800332e:	6822      	ldr	r2, [r4, #0]
 8003330:	3300      	adds	r3, #0
 8003332:	bf18      	it	ne
 8003334:	2301      	movne	r3, #1
 8003336:	0692      	lsls	r2, r2, #26
 8003338:	d42d      	bmi.n	8003396 <_printf_common+0xbe>
 800333a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800333e:	4639      	mov	r1, r7
 8003340:	4630      	mov	r0, r6
 8003342:	47c0      	blx	r8
 8003344:	3001      	adds	r0, #1
 8003346:	d020      	beq.n	800338a <_printf_common+0xb2>
 8003348:	6823      	ldr	r3, [r4, #0]
 800334a:	68e5      	ldr	r5, [r4, #12]
 800334c:	f8d9 2000 	ldr.w	r2, [r9]
 8003350:	f003 0306 	and.w	r3, r3, #6
 8003354:	2b04      	cmp	r3, #4
 8003356:	bf08      	it	eq
 8003358:	1aad      	subeq	r5, r5, r2
 800335a:	68a3      	ldr	r3, [r4, #8]
 800335c:	6922      	ldr	r2, [r4, #16]
 800335e:	bf0c      	ite	eq
 8003360:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003364:	2500      	movne	r5, #0
 8003366:	4293      	cmp	r3, r2
 8003368:	bfc4      	itt	gt
 800336a:	1a9b      	subgt	r3, r3, r2
 800336c:	18ed      	addgt	r5, r5, r3
 800336e:	f04f 0900 	mov.w	r9, #0
 8003372:	341a      	adds	r4, #26
 8003374:	454d      	cmp	r5, r9
 8003376:	d11a      	bne.n	80033ae <_printf_common+0xd6>
 8003378:	2000      	movs	r0, #0
 800337a:	e008      	b.n	800338e <_printf_common+0xb6>
 800337c:	2301      	movs	r3, #1
 800337e:	4652      	mov	r2, sl
 8003380:	4639      	mov	r1, r7
 8003382:	4630      	mov	r0, r6
 8003384:	47c0      	blx	r8
 8003386:	3001      	adds	r0, #1
 8003388:	d103      	bne.n	8003392 <_printf_common+0xba>
 800338a:	f04f 30ff 	mov.w	r0, #4294967295
 800338e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003392:	3501      	adds	r5, #1
 8003394:	e7c3      	b.n	800331e <_printf_common+0x46>
 8003396:	18e1      	adds	r1, r4, r3
 8003398:	1c5a      	adds	r2, r3, #1
 800339a:	2030      	movs	r0, #48	; 0x30
 800339c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80033a0:	4422      	add	r2, r4
 80033a2:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80033a6:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80033aa:	3302      	adds	r3, #2
 80033ac:	e7c5      	b.n	800333a <_printf_common+0x62>
 80033ae:	2301      	movs	r3, #1
 80033b0:	4622      	mov	r2, r4
 80033b2:	4639      	mov	r1, r7
 80033b4:	4630      	mov	r0, r6
 80033b6:	47c0      	blx	r8
 80033b8:	3001      	adds	r0, #1
 80033ba:	d0e6      	beq.n	800338a <_printf_common+0xb2>
 80033bc:	f109 0901 	add.w	r9, r9, #1
 80033c0:	e7d8      	b.n	8003374 <_printf_common+0x9c>
	...

080033c4 <_printf_i>:
 80033c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80033c8:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80033cc:	460c      	mov	r4, r1
 80033ce:	7e09      	ldrb	r1, [r1, #24]
 80033d0:	b085      	sub	sp, #20
 80033d2:	296e      	cmp	r1, #110	; 0x6e
 80033d4:	4617      	mov	r7, r2
 80033d6:	4606      	mov	r6, r0
 80033d8:	4698      	mov	r8, r3
 80033da:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80033dc:	f000 80b3 	beq.w	8003546 <_printf_i+0x182>
 80033e0:	d822      	bhi.n	8003428 <_printf_i+0x64>
 80033e2:	2963      	cmp	r1, #99	; 0x63
 80033e4:	d036      	beq.n	8003454 <_printf_i+0x90>
 80033e6:	d80a      	bhi.n	80033fe <_printf_i+0x3a>
 80033e8:	2900      	cmp	r1, #0
 80033ea:	f000 80b9 	beq.w	8003560 <_printf_i+0x19c>
 80033ee:	2958      	cmp	r1, #88	; 0x58
 80033f0:	f000 8083 	beq.w	80034fa <_printf_i+0x136>
 80033f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80033f8:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80033fc:	e032      	b.n	8003464 <_printf_i+0xa0>
 80033fe:	2964      	cmp	r1, #100	; 0x64
 8003400:	d001      	beq.n	8003406 <_printf_i+0x42>
 8003402:	2969      	cmp	r1, #105	; 0x69
 8003404:	d1f6      	bne.n	80033f4 <_printf_i+0x30>
 8003406:	6820      	ldr	r0, [r4, #0]
 8003408:	6813      	ldr	r3, [r2, #0]
 800340a:	0605      	lsls	r5, r0, #24
 800340c:	f103 0104 	add.w	r1, r3, #4
 8003410:	d52a      	bpl.n	8003468 <_printf_i+0xa4>
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6011      	str	r1, [r2, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	da03      	bge.n	8003422 <_printf_i+0x5e>
 800341a:	222d      	movs	r2, #45	; 0x2d
 800341c:	425b      	negs	r3, r3
 800341e:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8003422:	486f      	ldr	r0, [pc, #444]	; (80035e0 <_printf_i+0x21c>)
 8003424:	220a      	movs	r2, #10
 8003426:	e039      	b.n	800349c <_printf_i+0xd8>
 8003428:	2973      	cmp	r1, #115	; 0x73
 800342a:	f000 809d 	beq.w	8003568 <_printf_i+0x1a4>
 800342e:	d808      	bhi.n	8003442 <_printf_i+0x7e>
 8003430:	296f      	cmp	r1, #111	; 0x6f
 8003432:	d020      	beq.n	8003476 <_printf_i+0xb2>
 8003434:	2970      	cmp	r1, #112	; 0x70
 8003436:	d1dd      	bne.n	80033f4 <_printf_i+0x30>
 8003438:	6823      	ldr	r3, [r4, #0]
 800343a:	f043 0320 	orr.w	r3, r3, #32
 800343e:	6023      	str	r3, [r4, #0]
 8003440:	e003      	b.n	800344a <_printf_i+0x86>
 8003442:	2975      	cmp	r1, #117	; 0x75
 8003444:	d017      	beq.n	8003476 <_printf_i+0xb2>
 8003446:	2978      	cmp	r1, #120	; 0x78
 8003448:	d1d4      	bne.n	80033f4 <_printf_i+0x30>
 800344a:	2378      	movs	r3, #120	; 0x78
 800344c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003450:	4864      	ldr	r0, [pc, #400]	; (80035e4 <_printf_i+0x220>)
 8003452:	e055      	b.n	8003500 <_printf_i+0x13c>
 8003454:	6813      	ldr	r3, [r2, #0]
 8003456:	1d19      	adds	r1, r3, #4
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6011      	str	r1, [r2, #0]
 800345c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003460:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003464:	2301      	movs	r3, #1
 8003466:	e08c      	b.n	8003582 <_printf_i+0x1be>
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	6011      	str	r1, [r2, #0]
 800346c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003470:	bf18      	it	ne
 8003472:	b21b      	sxthne	r3, r3
 8003474:	e7cf      	b.n	8003416 <_printf_i+0x52>
 8003476:	6813      	ldr	r3, [r2, #0]
 8003478:	6825      	ldr	r5, [r4, #0]
 800347a:	1d18      	adds	r0, r3, #4
 800347c:	6010      	str	r0, [r2, #0]
 800347e:	0628      	lsls	r0, r5, #24
 8003480:	d501      	bpl.n	8003486 <_printf_i+0xc2>
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	e002      	b.n	800348c <_printf_i+0xc8>
 8003486:	0668      	lsls	r0, r5, #25
 8003488:	d5fb      	bpl.n	8003482 <_printf_i+0xbe>
 800348a:	881b      	ldrh	r3, [r3, #0]
 800348c:	4854      	ldr	r0, [pc, #336]	; (80035e0 <_printf_i+0x21c>)
 800348e:	296f      	cmp	r1, #111	; 0x6f
 8003490:	bf14      	ite	ne
 8003492:	220a      	movne	r2, #10
 8003494:	2208      	moveq	r2, #8
 8003496:	2100      	movs	r1, #0
 8003498:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800349c:	6865      	ldr	r5, [r4, #4]
 800349e:	60a5      	str	r5, [r4, #8]
 80034a0:	2d00      	cmp	r5, #0
 80034a2:	f2c0 8095 	blt.w	80035d0 <_printf_i+0x20c>
 80034a6:	6821      	ldr	r1, [r4, #0]
 80034a8:	f021 0104 	bic.w	r1, r1, #4
 80034ac:	6021      	str	r1, [r4, #0]
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d13d      	bne.n	800352e <_printf_i+0x16a>
 80034b2:	2d00      	cmp	r5, #0
 80034b4:	f040 808e 	bne.w	80035d4 <_printf_i+0x210>
 80034b8:	4665      	mov	r5, ip
 80034ba:	2a08      	cmp	r2, #8
 80034bc:	d10b      	bne.n	80034d6 <_printf_i+0x112>
 80034be:	6823      	ldr	r3, [r4, #0]
 80034c0:	07db      	lsls	r3, r3, #31
 80034c2:	d508      	bpl.n	80034d6 <_printf_i+0x112>
 80034c4:	6923      	ldr	r3, [r4, #16]
 80034c6:	6862      	ldr	r2, [r4, #4]
 80034c8:	429a      	cmp	r2, r3
 80034ca:	bfde      	ittt	le
 80034cc:	2330      	movle	r3, #48	; 0x30
 80034ce:	f805 3c01 	strble.w	r3, [r5, #-1]
 80034d2:	f105 35ff 	addle.w	r5, r5, #4294967295
 80034d6:	ebac 0305 	sub.w	r3, ip, r5
 80034da:	6123      	str	r3, [r4, #16]
 80034dc:	f8cd 8000 	str.w	r8, [sp]
 80034e0:	463b      	mov	r3, r7
 80034e2:	aa03      	add	r2, sp, #12
 80034e4:	4621      	mov	r1, r4
 80034e6:	4630      	mov	r0, r6
 80034e8:	f7ff fef6 	bl	80032d8 <_printf_common>
 80034ec:	3001      	adds	r0, #1
 80034ee:	d14d      	bne.n	800358c <_printf_i+0x1c8>
 80034f0:	f04f 30ff 	mov.w	r0, #4294967295
 80034f4:	b005      	add	sp, #20
 80034f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80034fa:	4839      	ldr	r0, [pc, #228]	; (80035e0 <_printf_i+0x21c>)
 80034fc:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003500:	6813      	ldr	r3, [r2, #0]
 8003502:	6821      	ldr	r1, [r4, #0]
 8003504:	1d1d      	adds	r5, r3, #4
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	6015      	str	r5, [r2, #0]
 800350a:	060a      	lsls	r2, r1, #24
 800350c:	d50b      	bpl.n	8003526 <_printf_i+0x162>
 800350e:	07ca      	lsls	r2, r1, #31
 8003510:	bf44      	itt	mi
 8003512:	f041 0120 	orrmi.w	r1, r1, #32
 8003516:	6021      	strmi	r1, [r4, #0]
 8003518:	b91b      	cbnz	r3, 8003522 <_printf_i+0x15e>
 800351a:	6822      	ldr	r2, [r4, #0]
 800351c:	f022 0220 	bic.w	r2, r2, #32
 8003520:	6022      	str	r2, [r4, #0]
 8003522:	2210      	movs	r2, #16
 8003524:	e7b7      	b.n	8003496 <_printf_i+0xd2>
 8003526:	064d      	lsls	r5, r1, #25
 8003528:	bf48      	it	mi
 800352a:	b29b      	uxthmi	r3, r3
 800352c:	e7ef      	b.n	800350e <_printf_i+0x14a>
 800352e:	4665      	mov	r5, ip
 8003530:	fbb3 f1f2 	udiv	r1, r3, r2
 8003534:	fb02 3311 	mls	r3, r2, r1, r3
 8003538:	5cc3      	ldrb	r3, [r0, r3]
 800353a:	f805 3d01 	strb.w	r3, [r5, #-1]!
 800353e:	460b      	mov	r3, r1
 8003540:	2900      	cmp	r1, #0
 8003542:	d1f5      	bne.n	8003530 <_printf_i+0x16c>
 8003544:	e7b9      	b.n	80034ba <_printf_i+0xf6>
 8003546:	6813      	ldr	r3, [r2, #0]
 8003548:	6825      	ldr	r5, [r4, #0]
 800354a:	6961      	ldr	r1, [r4, #20]
 800354c:	1d18      	adds	r0, r3, #4
 800354e:	6010      	str	r0, [r2, #0]
 8003550:	0628      	lsls	r0, r5, #24
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	d501      	bpl.n	800355a <_printf_i+0x196>
 8003556:	6019      	str	r1, [r3, #0]
 8003558:	e002      	b.n	8003560 <_printf_i+0x19c>
 800355a:	066a      	lsls	r2, r5, #25
 800355c:	d5fb      	bpl.n	8003556 <_printf_i+0x192>
 800355e:	8019      	strh	r1, [r3, #0]
 8003560:	2300      	movs	r3, #0
 8003562:	6123      	str	r3, [r4, #16]
 8003564:	4665      	mov	r5, ip
 8003566:	e7b9      	b.n	80034dc <_printf_i+0x118>
 8003568:	6813      	ldr	r3, [r2, #0]
 800356a:	1d19      	adds	r1, r3, #4
 800356c:	6011      	str	r1, [r2, #0]
 800356e:	681d      	ldr	r5, [r3, #0]
 8003570:	6862      	ldr	r2, [r4, #4]
 8003572:	2100      	movs	r1, #0
 8003574:	4628      	mov	r0, r5
 8003576:	f7fc fe2b 	bl	80001d0 <memchr>
 800357a:	b108      	cbz	r0, 8003580 <_printf_i+0x1bc>
 800357c:	1b40      	subs	r0, r0, r5
 800357e:	6060      	str	r0, [r4, #4]
 8003580:	6863      	ldr	r3, [r4, #4]
 8003582:	6123      	str	r3, [r4, #16]
 8003584:	2300      	movs	r3, #0
 8003586:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800358a:	e7a7      	b.n	80034dc <_printf_i+0x118>
 800358c:	6923      	ldr	r3, [r4, #16]
 800358e:	462a      	mov	r2, r5
 8003590:	4639      	mov	r1, r7
 8003592:	4630      	mov	r0, r6
 8003594:	47c0      	blx	r8
 8003596:	3001      	adds	r0, #1
 8003598:	d0aa      	beq.n	80034f0 <_printf_i+0x12c>
 800359a:	6823      	ldr	r3, [r4, #0]
 800359c:	079b      	lsls	r3, r3, #30
 800359e:	d413      	bmi.n	80035c8 <_printf_i+0x204>
 80035a0:	68e0      	ldr	r0, [r4, #12]
 80035a2:	9b03      	ldr	r3, [sp, #12]
 80035a4:	4298      	cmp	r0, r3
 80035a6:	bfb8      	it	lt
 80035a8:	4618      	movlt	r0, r3
 80035aa:	e7a3      	b.n	80034f4 <_printf_i+0x130>
 80035ac:	2301      	movs	r3, #1
 80035ae:	464a      	mov	r2, r9
 80035b0:	4639      	mov	r1, r7
 80035b2:	4630      	mov	r0, r6
 80035b4:	47c0      	blx	r8
 80035b6:	3001      	adds	r0, #1
 80035b8:	d09a      	beq.n	80034f0 <_printf_i+0x12c>
 80035ba:	3501      	adds	r5, #1
 80035bc:	68e3      	ldr	r3, [r4, #12]
 80035be:	9a03      	ldr	r2, [sp, #12]
 80035c0:	1a9b      	subs	r3, r3, r2
 80035c2:	42ab      	cmp	r3, r5
 80035c4:	dcf2      	bgt.n	80035ac <_printf_i+0x1e8>
 80035c6:	e7eb      	b.n	80035a0 <_printf_i+0x1dc>
 80035c8:	2500      	movs	r5, #0
 80035ca:	f104 0919 	add.w	r9, r4, #25
 80035ce:	e7f5      	b.n	80035bc <_printf_i+0x1f8>
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d1ac      	bne.n	800352e <_printf_i+0x16a>
 80035d4:	7803      	ldrb	r3, [r0, #0]
 80035d6:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80035da:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80035de:	e76c      	b.n	80034ba <_printf_i+0xf6>
 80035e0:	08003b21 	.word	0x08003b21
 80035e4:	08003b32 	.word	0x08003b32

080035e8 <_sbrk_r>:
 80035e8:	b538      	push	{r3, r4, r5, lr}
 80035ea:	4c06      	ldr	r4, [pc, #24]	; (8003604 <_sbrk_r+0x1c>)
 80035ec:	2300      	movs	r3, #0
 80035ee:	4605      	mov	r5, r0
 80035f0:	4608      	mov	r0, r1
 80035f2:	6023      	str	r3, [r4, #0]
 80035f4:	f7fd fce6 	bl	8000fc4 <_sbrk>
 80035f8:	1c43      	adds	r3, r0, #1
 80035fa:	d102      	bne.n	8003602 <_sbrk_r+0x1a>
 80035fc:	6823      	ldr	r3, [r4, #0]
 80035fe:	b103      	cbz	r3, 8003602 <_sbrk_r+0x1a>
 8003600:	602b      	str	r3, [r5, #0]
 8003602:	bd38      	pop	{r3, r4, r5, pc}
 8003604:	20000090 	.word	0x20000090

08003608 <__sread>:
 8003608:	b510      	push	{r4, lr}
 800360a:	460c      	mov	r4, r1
 800360c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003610:	f000 f896 	bl	8003740 <_read_r>
 8003614:	2800      	cmp	r0, #0
 8003616:	bfab      	itete	ge
 8003618:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800361a:	89a3      	ldrhlt	r3, [r4, #12]
 800361c:	181b      	addge	r3, r3, r0
 800361e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8003622:	bfac      	ite	ge
 8003624:	6563      	strge	r3, [r4, #84]	; 0x54
 8003626:	81a3      	strhlt	r3, [r4, #12]
 8003628:	bd10      	pop	{r4, pc}

0800362a <__swrite>:
 800362a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800362e:	461f      	mov	r7, r3
 8003630:	898b      	ldrh	r3, [r1, #12]
 8003632:	05db      	lsls	r3, r3, #23
 8003634:	4605      	mov	r5, r0
 8003636:	460c      	mov	r4, r1
 8003638:	4616      	mov	r6, r2
 800363a:	d505      	bpl.n	8003648 <__swrite+0x1e>
 800363c:	2302      	movs	r3, #2
 800363e:	2200      	movs	r2, #0
 8003640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003644:	f000 f868 	bl	8003718 <_lseek_r>
 8003648:	89a3      	ldrh	r3, [r4, #12]
 800364a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800364e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003652:	81a3      	strh	r3, [r4, #12]
 8003654:	4632      	mov	r2, r6
 8003656:	463b      	mov	r3, r7
 8003658:	4628      	mov	r0, r5
 800365a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800365e:	f000 b817 	b.w	8003690 <_write_r>

08003662 <__sseek>:
 8003662:	b510      	push	{r4, lr}
 8003664:	460c      	mov	r4, r1
 8003666:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800366a:	f000 f855 	bl	8003718 <_lseek_r>
 800366e:	1c43      	adds	r3, r0, #1
 8003670:	89a3      	ldrh	r3, [r4, #12]
 8003672:	bf15      	itete	ne
 8003674:	6560      	strne	r0, [r4, #84]	; 0x54
 8003676:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800367a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800367e:	81a3      	strheq	r3, [r4, #12]
 8003680:	bf18      	it	ne
 8003682:	81a3      	strhne	r3, [r4, #12]
 8003684:	bd10      	pop	{r4, pc}

08003686 <__sclose>:
 8003686:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800368a:	f000 b813 	b.w	80036b4 <_close_r>
	...

08003690 <_write_r>:
 8003690:	b538      	push	{r3, r4, r5, lr}
 8003692:	4c07      	ldr	r4, [pc, #28]	; (80036b0 <_write_r+0x20>)
 8003694:	4605      	mov	r5, r0
 8003696:	4608      	mov	r0, r1
 8003698:	4611      	mov	r1, r2
 800369a:	2200      	movs	r2, #0
 800369c:	6022      	str	r2, [r4, #0]
 800369e:	461a      	mov	r2, r3
 80036a0:	f7fd fc40 	bl	8000f24 <_write>
 80036a4:	1c43      	adds	r3, r0, #1
 80036a6:	d102      	bne.n	80036ae <_write_r+0x1e>
 80036a8:	6823      	ldr	r3, [r4, #0]
 80036aa:	b103      	cbz	r3, 80036ae <_write_r+0x1e>
 80036ac:	602b      	str	r3, [r5, #0]
 80036ae:	bd38      	pop	{r3, r4, r5, pc}
 80036b0:	20000090 	.word	0x20000090

080036b4 <_close_r>:
 80036b4:	b538      	push	{r3, r4, r5, lr}
 80036b6:	4c06      	ldr	r4, [pc, #24]	; (80036d0 <_close_r+0x1c>)
 80036b8:	2300      	movs	r3, #0
 80036ba:	4605      	mov	r5, r0
 80036bc:	4608      	mov	r0, r1
 80036be:	6023      	str	r3, [r4, #0]
 80036c0:	f7fd fc4c 	bl	8000f5c <_close>
 80036c4:	1c43      	adds	r3, r0, #1
 80036c6:	d102      	bne.n	80036ce <_close_r+0x1a>
 80036c8:	6823      	ldr	r3, [r4, #0]
 80036ca:	b103      	cbz	r3, 80036ce <_close_r+0x1a>
 80036cc:	602b      	str	r3, [r5, #0]
 80036ce:	bd38      	pop	{r3, r4, r5, pc}
 80036d0:	20000090 	.word	0x20000090

080036d4 <_fstat_r>:
 80036d4:	b538      	push	{r3, r4, r5, lr}
 80036d6:	4c07      	ldr	r4, [pc, #28]	; (80036f4 <_fstat_r+0x20>)
 80036d8:	2300      	movs	r3, #0
 80036da:	4605      	mov	r5, r0
 80036dc:	4608      	mov	r0, r1
 80036de:	4611      	mov	r1, r2
 80036e0:	6023      	str	r3, [r4, #0]
 80036e2:	f7fd fc47 	bl	8000f74 <_fstat>
 80036e6:	1c43      	adds	r3, r0, #1
 80036e8:	d102      	bne.n	80036f0 <_fstat_r+0x1c>
 80036ea:	6823      	ldr	r3, [r4, #0]
 80036ec:	b103      	cbz	r3, 80036f0 <_fstat_r+0x1c>
 80036ee:	602b      	str	r3, [r5, #0]
 80036f0:	bd38      	pop	{r3, r4, r5, pc}
 80036f2:	bf00      	nop
 80036f4:	20000090 	.word	0x20000090

080036f8 <_isatty_r>:
 80036f8:	b538      	push	{r3, r4, r5, lr}
 80036fa:	4c06      	ldr	r4, [pc, #24]	; (8003714 <_isatty_r+0x1c>)
 80036fc:	2300      	movs	r3, #0
 80036fe:	4605      	mov	r5, r0
 8003700:	4608      	mov	r0, r1
 8003702:	6023      	str	r3, [r4, #0]
 8003704:	f7fd fc46 	bl	8000f94 <_isatty>
 8003708:	1c43      	adds	r3, r0, #1
 800370a:	d102      	bne.n	8003712 <_isatty_r+0x1a>
 800370c:	6823      	ldr	r3, [r4, #0]
 800370e:	b103      	cbz	r3, 8003712 <_isatty_r+0x1a>
 8003710:	602b      	str	r3, [r5, #0]
 8003712:	bd38      	pop	{r3, r4, r5, pc}
 8003714:	20000090 	.word	0x20000090

08003718 <_lseek_r>:
 8003718:	b538      	push	{r3, r4, r5, lr}
 800371a:	4c07      	ldr	r4, [pc, #28]	; (8003738 <_lseek_r+0x20>)
 800371c:	4605      	mov	r5, r0
 800371e:	4608      	mov	r0, r1
 8003720:	4611      	mov	r1, r2
 8003722:	2200      	movs	r2, #0
 8003724:	6022      	str	r2, [r4, #0]
 8003726:	461a      	mov	r2, r3
 8003728:	f7fd fc3f 	bl	8000faa <_lseek>
 800372c:	1c43      	adds	r3, r0, #1
 800372e:	d102      	bne.n	8003736 <_lseek_r+0x1e>
 8003730:	6823      	ldr	r3, [r4, #0]
 8003732:	b103      	cbz	r3, 8003736 <_lseek_r+0x1e>
 8003734:	602b      	str	r3, [r5, #0]
 8003736:	bd38      	pop	{r3, r4, r5, pc}
 8003738:	20000090 	.word	0x20000090

0800373c <__malloc_lock>:
 800373c:	4770      	bx	lr

0800373e <__malloc_unlock>:
 800373e:	4770      	bx	lr

08003740 <_read_r>:
 8003740:	b538      	push	{r3, r4, r5, lr}
 8003742:	4c07      	ldr	r4, [pc, #28]	; (8003760 <_read_r+0x20>)
 8003744:	4605      	mov	r5, r0
 8003746:	4608      	mov	r0, r1
 8003748:	4611      	mov	r1, r2
 800374a:	2200      	movs	r2, #0
 800374c:	6022      	str	r2, [r4, #0]
 800374e:	461a      	mov	r2, r3
 8003750:	f7fd fbcb 	bl	8000eea <_read>
 8003754:	1c43      	adds	r3, r0, #1
 8003756:	d102      	bne.n	800375e <_read_r+0x1e>
 8003758:	6823      	ldr	r3, [r4, #0]
 800375a:	b103      	cbz	r3, 800375e <_read_r+0x1e>
 800375c:	602b      	str	r3, [r5, #0]
 800375e:	bd38      	pop	{r3, r4, r5, pc}
 8003760:	20000090 	.word	0x20000090

08003764 <_init>:
 8003764:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003766:	bf00      	nop
 8003768:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800376a:	bc08      	pop	{r3}
 800376c:	469e      	mov	lr, r3
 800376e:	4770      	bx	lr

08003770 <_fini>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	bf00      	nop
 8003774:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003776:	bc08      	pop	{r3}
 8003778:	469e      	mov	lr, r3
 800377a:	4770      	bx	lr
