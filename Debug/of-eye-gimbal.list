
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005798  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  08005928  08005928  00015928  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800690c  0800690c  000205c4  2**0
                  CONTENTS
  4 .ARM          00000008  0800690c  0800690c  0001690c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006914  08006914  000205c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006914  08006914  00016914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006918  08006918  00016918  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c4  20000000  0800691c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200005c8  08006ee0  000205c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08006ee0  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f25  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000296a  00000000  00000000  00031519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247fe  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad3b  00000000  00000000  00059d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb359  00000000  00000000  00064ad9  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fe32  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  0011feb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c8 	.word	0x200005c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005910 	.word	0x08005910

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005cc 	.word	0x200005cc
 80001cc:	08005910 	.word	0x08005910

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9a5 	b.w	80005dc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f835 	bl	8000310 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f828 	bl	8000310 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f817 	bl	8000310 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f809 	bl	8000310 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f80d 	bl	800060c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f833 	bl	8000660 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f877 	bl	80006f0 <adns2610_config>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <adns2610_configureSPI+0x14>
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <adns2610_configureSPI+0x48>)
 800061e:	e000      	b.n	8000622 <adns2610_configureSPI+0x16>
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <adns2610_configureSPI+0x4c>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <adns2610_configureSPI+0x50>)
 8000624:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <adns2610_configureSPI+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <adns2610_configureSPI+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000634:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <adns2610_configureSPI+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <adns2610_configureSPI+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40003800 	.word	0x40003800
 8000658:	40003c00 	.word	0x40003c00
 800065c:	200005e4 	.word	0x200005e4

08000660 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <adns2610_resetCOM+0x14>
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <adns2610_resetCOM+0x84>)
 8000672:	e000      	b.n	8000676 <adns2610_resetCOM+0x16>
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <adns2610_resetCOM+0x88>)
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000678:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800067a:	bf00      	nop
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <adns2610_resetCOM+0x8c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <adns2610_resetCOM+0x8c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	330c      	adds	r3, #12
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000694:	bf00      	nop
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80006ac:	bf00      	nop
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	4313      	orrs	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ec      	bne.n	80006ae <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f004 f959 	bl	800498c <LL_mDelay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003800 	.word	0x40003800
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	200005e4 	.word	0x200005e4

080006f0 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <adns2610_config+0x14>
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <adns2610_config+0xc0>)
 8000702:	e000      	b.n	8000706 <adns2610_config+0x16>
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <adns2610_config+0xc4>)
 8000706:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	482b      	ldr	r0, [pc, #172]	; (80007b8 <adns2610_config+0xc8>)
 800070c:	f004 f9a6 	bl	8004a5c <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <adns2610_config+0xcc>)
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <adns2610_config+0xd0>)
 8000714:	f004 f9a2 	bl	8004a5c <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f8be 	bl	80008a0 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 8000724:	4925      	ldr	r1, [pc, #148]	; (80007bc <adns2610_config+0xcc>)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <adns2610_config+0xd4>)
 8000728:	f004 f998 	bl	8004a5c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f857 	bl	80007e4 <adns2610_readRegister>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10f      	bne.n	800075c <adns2610_config+0x6c>
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <adns2610_config+0xd8>)
 800073e:	f004 fa01 	bl	8004b44 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <adns2610_config+0xdc>)
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <adns2610_config+0xe0>)
 8000746:	f004 f989 	bl	8004a5c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f848 	bl	80007e4 <adns2610_readRegister>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d116      	bne.n	8000788 <adns2610_config+0x98>
 800075a:	e003      	b.n	8000764 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <adns2610_config+0xe4>)
 800075e:	f004 f9f1 	bl	8004b44 <puts>
 8000762:	e7fe      	b.n	8000762 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <adns2610_config+0xd8>)
 8000766:	f004 f9ed 	bl	8004b44 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 800076a:	491b      	ldr	r1, [pc, #108]	; (80007d8 <adns2610_config+0xe8>)
 800076c:	481b      	ldr	r0, [pc, #108]	; (80007dc <adns2610_config+0xec>)
 800076e:	f004 f975 	bl	8004a5c <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2111      	movs	r1, #17
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f834 	bl	80007e4 <adns2610_readRegister>
 800077c:	4603      	mov	r3, r0
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d108      	bne.n	8000798 <adns2610_config+0xa8>
 8000786:	e003      	b.n	8000790 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <adns2610_config+0xe4>)
 800078a:	f004 f9db 	bl	8004b44 <puts>
 800078e:	e7fe      	b.n	800078e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <adns2610_config+0xd8>)
 8000792:	f004 f9d7 	bl	8004b44 <puts>
 8000796:	e003      	b.n	80007a0 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <adns2610_config+0xe4>)
 800079a:	f004 f9d3 	bl	8004b44 <puts>
 800079e:	e7fe      	b.n	800079e <adns2610_config+0xae>

	printf("\r\n");
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <adns2610_config+0xf0>)
 80007a2:	f004 f9cf 	bl	8004b44 <puts>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	08005928 	.word	0x08005928
 80007b4:	08005938 	.word	0x08005938
 80007b8:	08005948 	.word	0x08005948
 80007bc:	080059a4 	.word	0x080059a4
 80007c0:	080059b4 	.word	0x080059b4
 80007c4:	080059e4 	.word	0x080059e4
 80007c8:	08005a10 	.word	0x08005a10
 80007cc:	08005a20 	.word	0x08005a20
 80007d0:	08005a30 	.word	0x08005a30
 80007d4:	08005a18 	.word	0x08005a18
 80007d8:	08005a5c 	.word	0x08005a5c
 80007dc:	08005a70 	.word	0x08005a70
 80007e0:	08005aa4 	.word	0x08005aa4

080007e4 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <adns2610_readRegister+0x1a>
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <adns2610_readRegister+0xb0>)
 80007fc:	e000      	b.n	8000800 <adns2610_readRegister+0x1c>
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <adns2610_readRegister+0xb4>)
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <adns2610_readRegister+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000804:	bf00      	nop
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <adns2610_readRegister+0xb8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f8      	beq.n	8000806 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <adns2610_readRegister+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	330c      	adds	r3, #12
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800081e:	bf00      	nop
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <adns2610_readRegister+0xb8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <adns2610_readRegister+0xb8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f004 f8a8 	bl	800498c <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <adns2610_readRegister+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330c      	adds	r3, #12
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000846:	bf00      	nop
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <adns2610_readRegister+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <adns2610_readRegister+0xb8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	330c      	adds	r3, #12
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000860:	bf00      	nop
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <adns2610_readRegister+0xb8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <adns2610_readRegister+0xb8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000876:	431a      	orrs	r2, r3
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <adns2610_readRegister+0xb8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	4313      	orrs	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <adns2610_readRegister+0x7e>
	return value;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00
 800089c:	200005e4 	.word	0x200005e4

080008a0 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <adns2610_writeRegister+0x1c>
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <adns2610_writeRegister+0xb4>)
 80008ba:	e000      	b.n	80008be <adns2610_writeRegister+0x1e>
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <adns2610_writeRegister+0xb8>)
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c0:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <adns2610_writeRegister+0xbc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008d0:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80008d2:	bf00      	nop
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <adns2610_writeRegister+0xbc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <adns2610_writeRegister+0xbc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80008fa:	bf00      	nop
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <adns2610_writeRegister+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <adns2610_writeRegister+0xbc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000910:	bf00      	nop
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <adns2610_writeRegister+0xbc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <adns2610_writeRegister+0xbc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000926:	431a      	orrs	r2, r3
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <adns2610_writeRegister+0xbc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	4313      	orrs	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ec      	bne.n	8000912 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <adns2610_writeRegister+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <adns2610_writeRegister+0xbc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000946:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40003800 	.word	0x40003800
 8000958:	40003c00 	.word	0x40003c00
 800095c:	200005e4 	.word	0x200005e4

08000960 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <adns2610_receiveByte+0x16>
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <adns2610_receiveByte+0x78>)
 8000974:	e000      	b.n	8000978 <adns2610_receiveByte+0x18>
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <adns2610_receiveByte+0x7c>)
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	330c      	adds	r3, #12
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000986:	bf00      	nop
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <adns2610_receiveByte+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <adns2610_receiveByte+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	330c      	adds	r3, #12
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80009a4:	bf00      	nop
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	4313      	orrs	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	200005e4 	.word	0x200005e4

080009e4 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <adns2610_sendByte+0x1a>
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <adns2610_sendByte+0x60>)
 80009fc:	e000      	b.n	8000a00 <adns2610_sendByte+0x1c>
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <adns2610_sendByte+0x64>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a02:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000a04:	bf00      	nop
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f8      	beq.n	8000a06 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	79ba      	ldrb	r2, [r7, #6]
 8000a1c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000a1e:	bf00      	nop
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	330c      	adds	r3, #12
 8000a34:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40003c00 	.word	0x40003c00
 8000a4c:	200005e4 	.word	0x200005e4

08000a50 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da01      	bge.n	8000a72 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e009      	b.n	8000a86 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000a72:	2302      	movs	r3, #2
 8000a74:	e007      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da01      	bge.n	8000a84 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000a84:	2303      	movs	r3, #3
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40020080 	.word	0x40020080

08000b64 <eyes_init>:
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

/** @brief Initialize the
 *
 */
void eyes_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 8000b68:	f000 faa4 	bl	80010b4 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fd37 	bl	80005e0 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd34 	bl	80005e0 <adns2610_init>
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <eyes_init+0x34>)
 8000b7e:	f002 f8eb 	bl	8002d58 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <eyes_init+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <eyes_init+0x3c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

	// Initialization done
	initialized = true;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <eyes_init+0x40>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	2000066c 	.word	0x2000066c
 8000ba0:	2000066d 	.word	0x2000066d
 8000ba4:	200005e9 	.word	0x200005e9

08000ba8 <eyes_start>:

void eyes_start(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	if(!initialized) eyes_init();
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <eyes_start+0x2c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <eyes_start+0x16>
 8000bba:	f7ff ffd3 	bl	8000b64 <eyes_init>

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <eyes_start+0x30>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <eyes_start+0x30>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <eyes_start+0x34>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200005e9 	.word	0x200005e9
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	200005e8 	.word	0x200005e8

08000be0 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	switch(FSMstate){
 8000be6:	4ba7      	ldr	r3, [pc, #668]	; (8000e84 <eyes_FSM+0x2a4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	f200 8243 	bhi.w	8001076 <eyes_FSM+0x496>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <eyes_FSM+0x18>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c0d 	.word	0x08000c0d
 8000bfc:	08000c57 	.word	0x08000c57
 8000c00:	08000ebd 	.word	0x08000ebd
 8000c04:	08000d05 	.word	0x08000d05
 8000c08:	08000f7d 	.word	0x08000f7d
	/* SENSOR_RESET state --------------------------------------------------------- */
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c0c:	4b9e      	ldr	r3, [pc, #632]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	805a      	strh	r2, [r3, #2]
#endif
		/* Stop the interrupt timer and reset all the relevant values */
		eyes_stopWaitIT();
 8000c18:	f000 fab2 	bl	8001180 <eyes_stopWaitIT>
		pixelIdx[0] = pixelIdx[1] = 0;
 8000c1c:	4b9a      	ldr	r3, [pc, #616]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	805a      	strh	r2, [r3, #2]
 8000c22:	4b99      	ldr	r3, [pc, #612]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c24:	885a      	ldrh	r2, [r3, #2]
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c28:	801a      	strh	r2, [r3, #0]
		pixelStatus[0] = pixelIdx[1] = 0;
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	805a      	strh	r2, [r3, #2]
 8000c30:	4b96      	ldr	r3, [pc, #600]	; (8000e8c <eyes_FSM+0x2ac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
		firstPixelRead = true;
 8000c36:	4b96      	ldr	r3, [pc, #600]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		firstFrameRead = true;
 8000c3c:	4b95      	ldr	r3, [pc, #596]	; (8000e94 <eyes_FSM+0x2b4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		seqTemp = 0;
 8000c42:	4b95      	ldr	r3, [pc, #596]	; (8000e98 <eyes_FSM+0x2b8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		initialized = false;
 8000c48:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <eyes_FSM+0x2bc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		collisionFlag = 0;
 8000c4e:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		return;
 8000c54:	e215      	b.n	8001082 <eyes_FSM+0x4a2>
	/* TRIGGER_FRAME state --------------------------------------------------------- */
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 8000c56:	f000 fa93 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000c5a:	4b91      	ldr	r3, [pc, #580]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8204 	bne.w	800106c <eyes_FSM+0x48c>
 8000c64:	4b8e      	ldr	r3, [pc, #568]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		/* Write pixel data register to reset the HW */
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe16 	bl	80008a0 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2108      	movs	r1, #8
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fe11 	bl	80008a0 <adns2610_writeRegister>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Increasing the SEQ number
		 * 	- Transfer all data by means of DMA
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000c7e:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000c82:	f000 fa55 	bl	8001130 <eyes_waitIT>
		firstPixelRead = true;
 8000c86:	4b82      	ldr	r3, [pc, #520]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
		FSMstate = REQ_READING_FRAME;
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <eyes_FSM+0x2a4>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	805a      	strh	r2, [r3, #2]
#endif
		if(!firstFrameRead){
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <eyes_FSM+0x2b4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d024      	beq.n	8000cf6 <eyes_FSM+0x116>
			frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 8000cac:	4b7a      	ldr	r3, [pc, #488]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	b2d1      	uxtb	r1, r2
 8000cb4:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cb6:	7011      	strb	r1, [r2, #0]
 8000cb8:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc2:	b2d9      	uxtb	r1, r3
 8000cc4:	4a78      	ldr	r2, [pc, #480]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000cc6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000cca:	fb03 f300 	mul.w	r3, r3, r0
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
			transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000ce0:	fb03 f302 	mul.w	r3, r3, r2
 8000ce4:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f240 21a9 	movw	r1, #681	; 0x2a9
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff19 	bl	8000b24 <transferDMA_USART2_TX>
			OF_ResetCoefficients();
 8000cf2:	f000 ff7d 	bl	8001bf0 <OF_ResetCoefficients>
		}
		collisionFlag = 0;
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <eyes_FSM+0x2cc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]
		return;
 8000d02:	e1be      	b.n	8001082 <eyes_FSM+0x4a2>
	/* REQ_READING_FRAME state --------------------------------------------------------- */
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 8000d04:	f000 fa3c 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000d08:	4b65      	ldr	r3, [pc, #404]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 81af 	bne.w	8001070 <eyes_FSM+0x490>
 8000d12:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		/* Send a pixel data read request if there are pixels to read*/
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d20:	d203      	bcs.n	8000d2a <eyes_FSM+0x14a>
 8000d22:	2108      	movs	r1, #8
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe5d 	bl	80009e4 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d2c:	885b      	ldrh	r3, [r3, #2]
 8000d2e:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d32:	d203      	bcs.n	8000d3c <eyes_FSM+0x15c>
 8000d34:	2108      	movs	r1, #8
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fe54 	bl	80009e4 <adns2610_sendByte>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Check the last received pixel status and take decision related to it
		 * 	- Compute OF coefficients when it was possible
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8000d3c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000d40:	f000 f9f6 	bl	8001130 <eyes_waitIT>
		if(!firstPixelRead){
 8000d44:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <eyes_FSM+0x2b0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 808e 	beq.w	8000e70 <eyes_FSM+0x290>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d64:	fb03 f301 	mul.w	r3, r3, r1
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3305      	adds	r3, #5
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe6d 	bl	8000a50 <adns2610_checkPixel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <eyes_FSM+0x2ac>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d8e:	fb03 f301 	mul.w	r3, r3, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000d98:	4a43      	ldr	r2, [pc, #268]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3305      	adds	r3, #5
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe56 	bl	8000a50 <adns2610_checkPixel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <eyes_FSM+0x2ac>)
 8000daa:	705a      	strb	r2, [r3, #1]
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <eyes_FSM+0x2d4>)
 8000dae:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <eyes_FSM+0x2a8>)
 8000db0:	4941      	ldr	r1, [pc, #260]	; (8000eb8 <eyes_FSM+0x2d8>)
 8000db2:	4836      	ldr	r0, [pc, #216]	; (8000e8c <eyes_FSM+0x2ac>)
 8000db4:	f000 f9f4 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d04e      	beq.n	8000e5c <eyes_FSM+0x27c>
				FSMstate = READING_FRAME;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <eyes_FSM+0x2a4>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d003      	beq.n	8000dd4 <eyes_FSM+0x1f4>
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <eyes_FSM+0x200>
					errorCounter++;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <eyes_FSM+0x2cc>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <eyes_FSM+0x2cc>)
 8000dde:	801a      	strh	r2, [r3, #0]
				}
				if(!firstFrameRead){
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <eyes_FSM+0x2b4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d046      	beq.n	8000e7c <eyes_FSM+0x29c>
					OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000df8:	fb03 f302 	mul.w	r3, r3, r2
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	1d59      	adds	r1, r3, #5
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e0c:	fb03 f302 	mul.w	r3, r3, r2
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e12:	4413      	add	r3, r2
 8000e14:	1d5a      	adds	r2, r3, #5
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 ff3c 	bl	8001c98 <OF_ComputeCoefficients>
#if SECOND_SENSOR_IMPLEMENTED
					OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_LEFT], frames[lastFrameIdx].frame[ADNS2610_LEFT], pixelIdx[ADNS2610_LEFT]);
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e2a:	fb03 f302 	mul.w	r3, r3, r2
 8000e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e34:	4413      	add	r3, r2
 8000e36:	1d59      	adds	r1, r3, #5
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e42:	fb03 f302 	mul.w	r3, r3, r2
 8000e46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	1d5a      	adds	r2, r3, #5
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 ff1f 	bl	8001c98 <OF_ComputeCoefficients>
 8000e5a:	e00f      	b.n	8000e7c <eyes_FSM+0x29c>
#endif
				}
			}
			else{
				eyes_stopWaitIT();
 8000e5c:	f000 f990 	bl	8001180 <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000e66:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000e6a:	f000 f961 	bl	8001130 <eyes_waitIT>
 8000e6e:	e005      	b.n	8000e7c <eyes_FSM+0x29c>
			}
		}
		else{
			firstPixelRead = false;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <eyes_FSM+0x2b0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		return;
 8000e82:	e0fe      	b.n	8001082 <eyes_FSM+0x4a2>
 8000e84:	200005e8 	.word	0x200005e8
 8000e88:	200005ec 	.word	0x200005ec
 8000e8c:	200005f0 	.word	0x200005f0
 8000e90:	20000552 	.word	0x20000552
 8000e94:	20000553 	.word	0x20000553
 8000e98:	200005f2 	.word	0x200005f2
 8000e9c:	200005e9 	.word	0x200005e9
 8000ea0:	200005f3 	.word	0x200005f3
 8000ea4:	2000066d 	.word	0x2000066d
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	200005f4 	.word	0x200005f4
 8000eb0:	2000066c 	.word	0x2000066c
 8000eb4:	200005ee 	.word	0x200005ee
 8000eb8:	200005f1 	.word	0x200005f1
	/* READING_FRAME state ---------------------------------------------------------------- */
	case READING_FRAME:
		eyes_stopWaitIT();
 8000ebc:	f000 f960 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000ec0:	4b71      	ldr	r3, [pc, #452]	; (8001088 <eyes_FSM+0x4a8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80d5 	bne.w	8001074 <eyes_FSM+0x494>
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <eyes_FSM+0x4a8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		/* Read pixel data register */
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	; (800108c <eyes_FSM+0x4ac>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000ed8:	d211      	bcs.n	8000efe <eyes_FSM+0x31e>
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <eyes_FSM+0x4b0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <eyes_FSM+0x4ac>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000eea:	fb03 f301 	mul.w	r3, r3, r1
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a68      	ldr	r2, [pc, #416]	; (8001094 <eyes_FSM+0x4b4>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3305      	adds	r3, #5
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fd31 	bl	8000960 <adns2610_receiveByte>
		/* Check the last pixel status. This is done because if all is good, the next state is PROCESSING, not REQ_READING_FRAME state */
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_LEFT, &frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <eyes_FSM+0x4ac>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000f06:	d213      	bcs.n	8000f30 <eyes_FSM+0x350>
 8000f08:	4b61      	ldr	r3, [pc, #388]	; (8001090 <eyes_FSM+0x4b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <eyes_FSM+0x4ac>)
 8000f10:	885b      	ldrh	r3, [r3, #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f18:	fb03 f301 	mul.w	r3, r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000f22:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <eyes_FSM+0x4b4>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3305      	adds	r3, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fd18 	bl	8000960 <adns2610_receiveByte>

		if((pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1) && pixelIdx[ADNS2610_LEFT] == PIXEL_QTY-1){
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <eyes_FSM+0x4ac>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f240 1243 	movw	r2, #323	; 0x143
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d112      	bne.n	8000f62 <eyes_FSM+0x382>
 8000f3c:	4b53      	ldr	r3, [pc, #332]	; (800108c <eyes_FSM+0x4ac>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	f240 1243 	movw	r2, #323	; 0x143
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d10c      	bne.n	8000f62 <eyes_FSM+0x382>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <eyes_FSM+0x4b8>)
 8000f4a:	4a50      	ldr	r2, [pc, #320]	; (800108c <eyes_FSM+0x4ac>)
 8000f4c:	4953      	ldr	r1, [pc, #332]	; (800109c <eyes_FSM+0x4bc>)
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <eyes_FSM+0x4c0>)
 8000f50:	f000 f926 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00d      	beq.n	8000f76 <eyes_FSM+0x396>
				FSMstate = PROCESSING;
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f60:	e009      	b.n	8000f76 <eyes_FSM+0x396>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	701a      	strb	r2, [r3, #0]
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000f68:	20c8      	movs	r0, #200	; 0xc8
 8000f6a:	f000 f8e1 	bl	8001130 <eyes_waitIT>
			collisionFlag = 0;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <eyes_FSM+0x4a8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			return;
 8000f74:	e085      	b.n	8001082 <eyes_FSM+0x4a2>
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
			collisionFlag = 0;
			return;
		}
#endif
		collisionFlag = 0;
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <eyes_FSM+0x4a8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	/* PROCESSING state ---------------------------------------------------------------- */
	case PROCESSING:
		/* Check if it's the first frame read */
		if(firstFrameRead){
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <eyes_FSM+0x3ac>
			firstFrameRead = false;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e05e      	b.n	800104a <eyes_FSM+0x46a>
		}
		else{
			/* Compute the Optical Flow from the previous computed coefficients */
			OF_Compute(ADNS2610_RIGHT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <eyes_FSM+0x4b0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f96:	fb03 f302 	mul.w	r3, r3, r2
 8000f9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <eyes_FSM+0x4b4>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1d59      	adds	r1, r3, #5
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <eyes_FSM+0x4b0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fae:	fb03 f302 	mul.w	r3, r3, r2
 8000fb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <eyes_FSM+0x4b4>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	3309      	adds	r3, #9
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 ff7e 	bl	8001ec0 <OF_Compute>
#if SECOND_SENSOR_IMPLEMENTED
			OF_Compute(ADNS2610_LEFT, &(frames[currentFrameIdx].oFLeft.x), &(frames[currentFrameIdx].oFLeft.y));
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <eyes_FSM+0x4b0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fce:	fb03 f302 	mul.w	r3, r3, r2
 8000fd2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <eyes_FSM+0x4b4>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	1d59      	adds	r1, r3, #5
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <eyes_FSM+0x4b0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fe6:	fb03 f302 	mul.w	r3, r3, r2
 8000fea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <eyes_FSM+0x4b4>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3309      	adds	r3, #9
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 ff62 	bl	8001ec0 <OF_Compute>
			OF_ComputeFused(&frames[currentFrameIdx].oFRight, &frames[currentFrameIdx].oFLeft, &frames[currentFrameIdx].oFFused);
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <eyes_FSM+0x4b0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001006:	fb03 f302 	mul.w	r3, r3, r2
 800100a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <eyes_FSM+0x4b4>)
 8001010:	4413      	add	r3, r2
 8001012:	1d58      	adds	r0, r3, #5
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <eyes_FSM+0x4b0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f240 23a9 	movw	r3, #681	; 0x2a9
 800101e:	fb03 f302 	mul.w	r3, r3, r2
 8001022:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <eyes_FSM+0x4b4>)
 8001028:	4413      	add	r3, r2
 800102a:	1d59      	adds	r1, r3, #5
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <eyes_FSM+0x4b0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001036:	fb03 f302 	mul.w	r3, r3, r2
 800103a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <eyes_FSM+0x4b4>)
 8001040:	4413      	add	r3, r2
 8001042:	3305      	adds	r3, #5
 8001044:	461a      	mov	r2, r3
 8001046:	f001 f821 	bl	800208c <OF_ComputeFused>
#endif
		}
		/* Switch the frame structures to store the new frame in the "oldest" data buffer */
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <eyes_FSM+0x4cc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <eyes_FSM+0x4b0>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <eyes_FSM+0x4cc>)
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <eyes_FSM+0x4b0>)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	7013      	strb	r3, [r2, #0]
		FSMstate = TRIGGER_FRAME;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <eyes_FSM+0x4c4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8001064:	20c8      	movs	r0, #200	; 0xc8
 8001066:	f000 f863 	bl	8001130 <eyes_waitIT>
		return;
 800106a:	e00a      	b.n	8001082 <eyes_FSM+0x4a2>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 800106c:	bf00      	nop
 800106e:	e002      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001070:	bf00      	nop
 8001072:	e000      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001074:	bf00      	nop
	}

	// Check for collisions between interrupts callings
	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <eyes_FSM+0x4d0>)
 8001078:	f003 fd64 	bl	8004b44 <puts>
		eyes_stopWaitIT();
 800107c:	f000 f880 	bl	8001180 <eyes_stopWaitIT>
		while(1);
 8001080:	e7fe      	b.n	8001080 <eyes_FSM+0x4a0>
}
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200005f3 	.word	0x200005f3
 800108c:	200005ec 	.word	0x200005ec
 8001090:	2000066c 	.word	0x2000066c
 8001094:	20000000 	.word	0x20000000
 8001098:	200005ee 	.word	0x200005ee
 800109c:	200005f1 	.word	0x200005f1
 80010a0:	200005f0 	.word	0x200005f0
 80010a4:	200005e8 	.word	0x200005e8
 80010a8:	20000553 	.word	0x20000553
 80010ac:	2000066d 	.word	0x2000066d
 80010b0:	08005b34 	.word	0x08005b34

080010b4 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <eyes_configureFSM_TIM+0x78>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	2019      	movs	r0, #25
 800111a:	f7ff fcd9 	bl	8000ad0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800111e:	2019      	movs	r0, #25
 8001120:	f7ff fcb8 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40012c00 	.word	0x40012c00

08001130 <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <eyes_waitIT+0x4c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <eyes_waitIT+0x4c>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <eyes_waitIT+0x4c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <eyes_waitIT+0x4c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <eyes_waitIT+0x4c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <eyes_waitIT+0x4c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <eyes_waitIT+0x4c>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <eyes_waitIT+0x4c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <eyes_waitIT+0x4c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00

08001180 <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <eyes_stopWaitIT+0x1c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <eyes_stopWaitIT+0x1c>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40012c00 	.word	0x40012c00

080011a0 <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	e024      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10f      	bne.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80011e4:	d806      	bhi.n	80011f4 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	e010      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10c      	bne.n	8001216 <eyes_computeIdxFromStatus+0x76>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	801a      	strh	r2, [r3, #0]
		return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e034      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#if SECOND_SENSOR_IMPLEMENTED
	if((*status2 == VALID_SOF) && (*idx2 == 0)){
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
		(*idx2)++;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	801a      	strh	r2, [r3, #0]
 8001232:	e024      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID) && (*idx2 != 0) && (*idx2 < PIXEL_QTY-1)){
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10f      	bne.n	800125c <eyes_computeIdxFromStatus+0xbc>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <eyes_computeIdxFromStatus+0xbc>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 800124c:	d806      	bhi.n	800125c <eyes_computeIdxFromStatus+0xbc>
		(*idx2)++;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e010      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <eyes_computeIdxFromStatus+0xde>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <eyes_computeIdxFromStatus+0xde>
		(*idx1) = (*idx2) = 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	801a      	strh	r2, [r3, #0]
		return false;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#endif
	return true;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 80012a8:	f7ff fc9a 	bl	8000be0 <eyes_FSM>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <gimbalControlInit>:
void disablePWM();

/**
 * @brief Setting up all the peripherals (UART and TIMER) needed to control de gimbal position
 */
void gimbalControlInit(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	// Configure UART2 interrupt to receive data from PC
	configure_IRQ_USART_RX();
 80012b8:	f001 fda6 	bl	8002e08 <configure_IRQ_USART_RX>

	// Flag to know PWM signal state
	pwmEn = false;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <gimbalControlInit+0x18>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]

	// Flag to know if tracking function is enable/disable
	trackingEn = false;
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <gimbalControlInit+0x1c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000067b 	.word	0x2000067b
 80012d0:	2000067a 	.word	0x2000067a

080012d4 <decodeCmd>:
 * @brief Receive a string and decode the command type related to it
 * @param cmdString	The command in string format
 * @param length	The length of the command
 * @return	The command type in cmdTypeDef format
 */
cmdTypeDef decodeCmd(char const * cmdString, int length){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]

	// Tracking enable command
	if(strncmp(cmdString, "TRON\n", length) == 0){
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	461a      	mov	r2, r3
 80012e2:	494e      	ldr	r1, [pc, #312]	; (800141c <decodeCmd+0x148>)
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	f003 fc35 	bl	8004b54 <strncmp>
 80012ea:	4603      	mov	r3, r0
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d104      	bne.n	80012fa <decodeCmd+0x26>
		trackingEn = true;
 80012f0:	4b4b      	ldr	r3, [pc, #300]	; (8001420 <decodeCmd+0x14c>)
 80012f2:	2201      	movs	r2, #1
 80012f4:	701a      	strb	r2, [r3, #0]
		return TRACKING_ON;
 80012f6:	2307      	movs	r3, #7
 80012f8:	e08b      	b.n	8001412 <decodeCmd+0x13e>
	}
	if(strncmp(cmdString, "TROFF\n", length) == 0){
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	461a      	mov	r2, r3
 80012fe:	4949      	ldr	r1, [pc, #292]	; (8001424 <decodeCmd+0x150>)
 8001300:	6878      	ldr	r0, [r7, #4]
 8001302:	f003 fc27 	bl	8004b54 <strncmp>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d104      	bne.n	8001316 <decodeCmd+0x42>
		trackingEn = false;
 800130c:	4b44      	ldr	r3, [pc, #272]	; (8001420 <decodeCmd+0x14c>)
 800130e:	2200      	movs	r2, #0
 8001310:	701a      	strb	r2, [r3, #0]
		return TRACKING_OFF;
 8001312:	2308      	movs	r3, #8
 8001314:	e07d      	b.n	8001412 <decodeCmd+0x13e>
	}

	// Tracking enable so It isn't able to perform any command
	if(trackingEn) return NA;
 8001316:	4b42      	ldr	r3, [pc, #264]	; (8001420 <decodeCmd+0x14c>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <decodeCmd+0x4e>
 800131e:	2309      	movs	r3, #9
 8001320:	e077      	b.n	8001412 <decodeCmd+0x13e>

	// Center command
	if(strncmp(cmdString, "CN\n", length) == 0){
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	461a      	mov	r2, r3
 8001326:	4940      	ldr	r1, [pc, #256]	; (8001428 <decodeCmd+0x154>)
 8001328:	6878      	ldr	r0, [r7, #4]
 800132a:	f003 fc13 	bl	8004b54 <strncmp>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d103      	bne.n	800133c <decodeCmd+0x68>
		disablePWM();
 8001334:	f000 f8ae 	bl	8001494 <disablePWM>
		return CENTER;
 8001338:	2306      	movs	r3, #6
 800133a:	e06a      	b.n	8001412 <decodeCmd+0x13e>
	}

	// Enable PWM if it was disabled
	if(!pwmEn)	enablePWM();
 800133c:	4b3b      	ldr	r3, [pc, #236]	; (800142c <decodeCmd+0x158>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	f083 0301 	eor.w	r3, r3, #1
 8001344:	b2db      	uxtb	r3, r3
 8001346:	2b00      	cmp	r3, #0
 8001348:	d001      	beq.n	800134e <decodeCmd+0x7a>
 800134a:	f000 f881 	bl	8001450 <enablePWM>

	// Up command
	if(strncmp(cmdString, "UP\n", length) == 0){
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	461a      	mov	r2, r3
 8001352:	4937      	ldr	r1, [pc, #220]	; (8001430 <decodeCmd+0x15c>)
 8001354:	6878      	ldr	r0, [r7, #4]
 8001356:	f003 fbfd 	bl	8004b54 <strncmp>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d101      	bne.n	8001364 <decodeCmd+0x90>
		return UP;
 8001360:	2300      	movs	r3, #0
 8001362:	e056      	b.n	8001412 <decodeCmd+0x13e>
	}
	// Down command
	if(strncmp(cmdString, "DW\n", length) == 0){
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	461a      	mov	r2, r3
 8001368:	4932      	ldr	r1, [pc, #200]	; (8001434 <decodeCmd+0x160>)
 800136a:	6878      	ldr	r0, [r7, #4]
 800136c:	f003 fbf2 	bl	8004b54 <strncmp>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <decodeCmd+0xa6>
		return DOWN;
 8001376:	2301      	movs	r3, #1
 8001378:	e04b      	b.n	8001412 <decodeCmd+0x13e>
	}
	// Left command
	if(strncmp(cmdString, "LF\n", length) == 0){
 800137a:	683b      	ldr	r3, [r7, #0]
 800137c:	461a      	mov	r2, r3
 800137e:	492e      	ldr	r1, [pc, #184]	; (8001438 <decodeCmd+0x164>)
 8001380:	6878      	ldr	r0, [r7, #4]
 8001382:	f003 fbe7 	bl	8004b54 <strncmp>
 8001386:	4603      	mov	r3, r0
 8001388:	2b00      	cmp	r3, #0
 800138a:	d110      	bne.n	80013ae <decodeCmd+0xda>
		if(motorPos.yawPos > MIN_POS) motorPos.yawPos -= DELTA_POS;
 800138c:	4b2b      	ldr	r3, [pc, #172]	; (800143c <decodeCmd+0x168>)
 800138e:	889b      	ldrh	r3, [r3, #4]
 8001390:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001394:	d305      	bcc.n	80013a2 <decodeCmd+0xce>
 8001396:	4b29      	ldr	r3, [pc, #164]	; (800143c <decodeCmd+0x168>)
 8001398:	889b      	ldrh	r3, [r3, #4]
 800139a:	3b0a      	subs	r3, #10
 800139c:	b29a      	uxth	r2, r3
 800139e:	4b27      	ldr	r3, [pc, #156]	; (800143c <decodeCmd+0x168>)
 80013a0:	809a      	strh	r2, [r3, #4]
		TIM3->CCR4 = motorPos.yawPos;
 80013a2:	4b26      	ldr	r3, [pc, #152]	; (800143c <decodeCmd+0x168>)
 80013a4:	889a      	ldrh	r2, [r3, #4]
 80013a6:	4b26      	ldr	r3, [pc, #152]	; (8001440 <decodeCmd+0x16c>)
 80013a8:	641a      	str	r2, [r3, #64]	; 0x40
		return LEFT;
 80013aa:	2302      	movs	r3, #2
 80013ac:	e031      	b.n	8001412 <decodeCmd+0x13e>
	}
	// Right command
	if(strncmp(cmdString, "RH\n", length) == 0){
 80013ae:	683b      	ldr	r3, [r7, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4924      	ldr	r1, [pc, #144]	; (8001444 <decodeCmd+0x170>)
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	f003 fbcd 	bl	8004b54 <strncmp>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d111      	bne.n	80013e4 <decodeCmd+0x110>
		if(motorPos.yawPos < MAX_POS) motorPos.yawPos += DELTA_POS;
 80013c0:	4b1e      	ldr	r3, [pc, #120]	; (800143c <decodeCmd+0x168>)
 80013c2:	889b      	ldrh	r3, [r3, #4]
 80013c4:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80013c8:	4293      	cmp	r3, r2
 80013ca:	d805      	bhi.n	80013d8 <decodeCmd+0x104>
 80013cc:	4b1b      	ldr	r3, [pc, #108]	; (800143c <decodeCmd+0x168>)
 80013ce:	889b      	ldrh	r3, [r3, #4]
 80013d0:	330a      	adds	r3, #10
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	4b19      	ldr	r3, [pc, #100]	; (800143c <decodeCmd+0x168>)
 80013d6:	809a      	strh	r2, [r3, #4]
		TIM3->CCR4 = motorPos.yawPos;
 80013d8:	4b18      	ldr	r3, [pc, #96]	; (800143c <decodeCmd+0x168>)
 80013da:	889a      	ldrh	r2, [r3, #4]
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <decodeCmd+0x16c>)
 80013de:	641a      	str	r2, [r3, #64]	; 0x40
		return RIGHT;
 80013e0:	2303      	movs	r3, #3
 80013e2:	e016      	b.n	8001412 <decodeCmd+0x13e>
	}

	// Rotate left command
	if(strncmp(cmdString, "RLF\n", length) == 0){
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	461a      	mov	r2, r3
 80013e8:	4917      	ldr	r1, [pc, #92]	; (8001448 <decodeCmd+0x174>)
 80013ea:	6878      	ldr	r0, [r7, #4]
 80013ec:	f003 fbb2 	bl	8004b54 <strncmp>
 80013f0:	4603      	mov	r3, r0
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d101      	bne.n	80013fa <decodeCmd+0x126>
		return ROTATE_LEFT;
 80013f6:	2304      	movs	r3, #4
 80013f8:	e00b      	b.n	8001412 <decodeCmd+0x13e>
	}
	// Rotate right command
	if(strncmp(cmdString, "RRH\n", length) == 0){
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	461a      	mov	r2, r3
 80013fe:	4913      	ldr	r1, [pc, #76]	; (800144c <decodeCmd+0x178>)
 8001400:	6878      	ldr	r0, [r7, #4]
 8001402:	f003 fba7 	bl	8004b54 <strncmp>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d101      	bne.n	8001410 <decodeCmd+0x13c>
		return ROTATE_RIGHT;
 800140c:	2305      	movs	r3, #5
 800140e:	e000      	b.n	8001412 <decodeCmd+0x13e>
	}
	return NA;
 8001410:	2309      	movs	r3, #9
}
 8001412:	4618      	mov	r0, r3
 8001414:	3708      	adds	r7, #8
 8001416:	46bd      	mov	sp, r7
 8001418:	bd80      	pop	{r7, pc}
 800141a:	bf00      	nop
 800141c:	08005b48 	.word	0x08005b48
 8001420:	2000067a 	.word	0x2000067a
 8001424:	08005b50 	.word	0x08005b50
 8001428:	08005b58 	.word	0x08005b58
 800142c:	2000067b 	.word	0x2000067b
 8001430:	08005b5c 	.word	0x08005b5c
 8001434:	08005b60 	.word	0x08005b60
 8001438:	08005b64 	.word	0x08005b64
 800143c:	20000554 	.word	0x20000554
 8001440:	40000400 	.word	0x40000400
 8001444:	08005b68 	.word	0x08005b68
 8001448:	08005b6c 	.word	0x08005b6c
 800144c:	08005b74 	.word	0x08005b74

08001450 <enablePWM>:

void enablePWM(){
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
	// Enable output compare OCx channels
	SET_BIT(TIM3->CCER, TIM_CCER_CC4E);
 8001454:	4b0d      	ldr	r3, [pc, #52]	; (800148c <enablePWM+0x3c>)
 8001456:	6a1b      	ldr	r3, [r3, #32]
 8001458:	4a0c      	ldr	r2, [pc, #48]	; (800148c <enablePWM+0x3c>)
 800145a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800145e:	6213      	str	r3, [r2, #32]
	/*MODIFY_REG(TIM3->CCER, ~(TIM_CCER_CC1NE | TIM_CCER_CC2NE),
			(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC4E));*/

	// Enable master output
	MODIFY_REG(TIM3->BDTR, ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR), TIM_BDTR_MOE);
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <enablePWM+0x3c>)
 8001462:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001464:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001468:	4a08      	ldr	r2, [pc, #32]	; (800148c <enablePWM+0x3c>)
 800146a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800146e:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable counter
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 8001470:	4b06      	ldr	r3, [pc, #24]	; (800148c <enablePWM+0x3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	4a05      	ldr	r2, [pc, #20]	; (800148c <enablePWM+0x3c>)
 8001476:	f043 0301 	orr.w	r3, r3, #1
 800147a:	6013      	str	r3, [r2, #0]

	pwmEn = true;
 800147c:	4b04      	ldr	r3, [pc, #16]	; (8001490 <enablePWM+0x40>)
 800147e:	2201      	movs	r2, #1
 8001480:	701a      	strb	r2, [r3, #0]
}
 8001482:	bf00      	nop
 8001484:	46bd      	mov	sp, r7
 8001486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800148a:	4770      	bx	lr
 800148c:	40000400 	.word	0x40000400
 8001490:	2000067b 	.word	0x2000067b

08001494 <disablePWM>:

void disablePWM(){
 8001494:	b480      	push	{r7}
 8001496:	af00      	add	r7, sp, #0
	// Disable output
	CLEAR_BIT(TIM3->CCER, TIM_CCER_CC4E);
 8001498:	4b12      	ldr	r3, [pc, #72]	; (80014e4 <disablePWM+0x50>)
 800149a:	6a1b      	ldr	r3, [r3, #32]
 800149c:	4a11      	ldr	r2, [pc, #68]	; (80014e4 <disablePWM+0x50>)
 800149e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80014a2:	6213      	str	r3, [r2, #32]
	//CLEAR_BIT(TIM3->CCER, (TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC4E));

	// Disable master output
	CLEAR_BIT(TIM3->BDTR, TIM_BDTR_MOE);
 80014a4:	4b0f      	ldr	r3, [pc, #60]	; (80014e4 <disablePWM+0x50>)
 80014a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a8:	4a0e      	ldr	r2, [pc, #56]	; (80014e4 <disablePWM+0x50>)
 80014aa:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80014ae:	6453      	str	r3, [r2, #68]	; 0x44

	// Disable counter
	CLEAR_BIT(TIM3->CR1, TIM_CR1_CEN);
 80014b0:	4b0c      	ldr	r3, [pc, #48]	; (80014e4 <disablePWM+0x50>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a0b      	ldr	r2, [pc, #44]	; (80014e4 <disablePWM+0x50>)
 80014b6:	f023 0301 	bic.w	r3, r3, #1
 80014ba:	6013      	str	r3, [r2, #0]

	// Reset motor position struct to initial values
	motorPos.pitchPos = CENTER_POS;
 80014bc:	4b0a      	ldr	r3, [pc, #40]	; (80014e8 <disablePWM+0x54>)
 80014be:	f240 52db 	movw	r2, #1499	; 0x5db
 80014c2:	801a      	strh	r2, [r3, #0]
	motorPos.rollPos = CENTER_POS;
 80014c4:	4b08      	ldr	r3, [pc, #32]	; (80014e8 <disablePWM+0x54>)
 80014c6:	f240 52db 	movw	r2, #1499	; 0x5db
 80014ca:	805a      	strh	r2, [r3, #2]
	motorPos.yawPos = CENTER_POS;
 80014cc:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <disablePWM+0x54>)
 80014ce:	f240 52db 	movw	r2, #1499	; 0x5db
 80014d2:	809a      	strh	r2, [r3, #4]

	pwmEn = false;
 80014d4:	4b05      	ldr	r3, [pc, #20]	; (80014ec <disablePWM+0x58>)
 80014d6:	2200      	movs	r2, #0
 80014d8:	701a      	strb	r2, [r3, #0]
}
 80014da:	bf00      	nop
 80014dc:	46bd      	mov	sp, r7
 80014de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e2:	4770      	bx	lr
 80014e4:	40000400 	.word	0x40000400
 80014e8:	20000554 	.word	0x20000554
 80014ec:	2000067b 	.word	0x2000067b

080014f0 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 80014f0:	b580      	push	{r7, lr}
 80014f2:	af00      	add	r7, sp, #0
	if(READ_BIT(USART2->ISR, USART_ISR_ORE)){
 80014f4:	4b22      	ldr	r3, [pc, #136]	; (8001580 <USART2_IRQHandler+0x90>)
 80014f6:	69db      	ldr	r3, [r3, #28]
 80014f8:	f003 0308 	and.w	r3, r3, #8
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d00d      	beq.n	800151c <USART2_IRQHandler+0x2c>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);
 8001500:	4b1f      	ldr	r3, [pc, #124]	; (8001580 <USART2_IRQHandler+0x90>)
 8001502:	6a1b      	ldr	r3, [r3, #32]
 8001504:	4a1e      	ldr	r2, [pc, #120]	; (8001580 <USART2_IRQHandler+0x90>)
 8001506:	f043 0308 	orr.w	r3, r3, #8
 800150a:	6213      	str	r3, [r2, #32]
		// Flush all data in USART RX
		SET_BIT(USART2->RQR, USART_RQR_RXFRQ);
 800150c:	4b1c      	ldr	r3, [pc, #112]	; (8001580 <USART2_IRQHandler+0x90>)
 800150e:	8b1b      	ldrh	r3, [r3, #24]
 8001510:	b29b      	uxth	r3, r3
 8001512:	4a1b      	ldr	r2, [pc, #108]	; (8001580 <USART2_IRQHandler+0x90>)
 8001514:	f043 0308 	orr.w	r3, r3, #8
 8001518:	b29b      	uxth	r3, r3
 800151a:	8313      	strh	r3, [r2, #24]
	}
	if(READ_BIT(USART2->ISR, USART_ISR_RXNE)){
 800151c:	4b18      	ldr	r3, [pc, #96]	; (8001580 <USART2_IRQHandler+0x90>)
 800151e:	69db      	ldr	r3, [r3, #28]
 8001520:	f003 0320 	and.w	r3, r3, #32
 8001524:	2b00      	cmp	r3, #0
 8001526:	d029      	beq.n	800157c <USART2_IRQHandler+0x8c>
		bufferIn[i] = READ_REG(USART2->RDR);
 8001528:	4b15      	ldr	r3, [pc, #84]	; (8001580 <USART2_IRQHandler+0x90>)
 800152a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800152c:	b29a      	uxth	r2, r3
 800152e:	4b15      	ldr	r3, [pc, #84]	; (8001584 <USART2_IRQHandler+0x94>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	b2d1      	uxtb	r1, r2
 8001534:	4a14      	ldr	r2, [pc, #80]	; (8001588 <USART2_IRQHandler+0x98>)
 8001536:	54d1      	strb	r1, [r2, r3]

		if(bufferIn[i] == TAIL_CHAR){
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <USART2_IRQHandler+0x94>)
 800153a:	681b      	ldr	r3, [r3, #0]
 800153c:	4a12      	ldr	r2, [pc, #72]	; (8001588 <USART2_IRQHandler+0x98>)
 800153e:	5cd3      	ldrb	r3, [r2, r3]
 8001540:	2b0a      	cmp	r3, #10
 8001542:	d10e      	bne.n	8001562 <USART2_IRQHandler+0x72>
			i++;
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <USART2_IRQHandler+0x94>)
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	3301      	adds	r3, #1
 800154a:	4a0e      	ldr	r2, [pc, #56]	; (8001584 <USART2_IRQHandler+0x94>)
 800154c:	6013      	str	r3, [r2, #0]
			decodeCmd(bufferIn, i);
 800154e:	4b0d      	ldr	r3, [pc, #52]	; (8001584 <USART2_IRQHandler+0x94>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	4619      	mov	r1, r3
 8001554:	480c      	ldr	r0, [pc, #48]	; (8001588 <USART2_IRQHandler+0x98>)
 8001556:	f7ff febd 	bl	80012d4 <decodeCmd>
			i = 0;
 800155a:	4b0a      	ldr	r3, [pc, #40]	; (8001584 <USART2_IRQHandler+0x94>)
 800155c:	2200      	movs	r2, #0
 800155e:	601a      	str	r2, [r3, #0]
		else{
			i++;
		}
	}

}
 8001560:	e00c      	b.n	800157c <USART2_IRQHandler+0x8c>
		else if(i ==  BUFFER_SIZE){
 8001562:	4b08      	ldr	r3, [pc, #32]	; (8001584 <USART2_IRQHandler+0x94>)
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b0a      	cmp	r3, #10
 8001568:	d103      	bne.n	8001572 <USART2_IRQHandler+0x82>
			i = 0;
 800156a:	4b06      	ldr	r3, [pc, #24]	; (8001584 <USART2_IRQHandler+0x94>)
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
}
 8001570:	e004      	b.n	800157c <USART2_IRQHandler+0x8c>
			i++;
 8001572:	4b04      	ldr	r3, [pc, #16]	; (8001584 <USART2_IRQHandler+0x94>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	3301      	adds	r3, #1
 8001578:	4a02      	ldr	r2, [pc, #8]	; (8001584 <USART2_IRQHandler+0x94>)
 800157a:	6013      	str	r3, [r2, #0]
}
 800157c:	bf00      	nop
 800157e:	bd80      	pop	{r7, pc}
 8001580:	40004400 	.word	0x40004400
 8001584:	200005f8 	.word	0x200005f8
 8001588:	20000670 	.word	0x20000670

0800158c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800158c:	b480      	push	{r7}
 800158e:	b085      	sub	sp, #20
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001596:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001598:	4907      	ldr	r1, [pc, #28]	; (80015b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	4313      	orrs	r3, r2
 800159e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80015a0:	4b05      	ldr	r3, [pc, #20]	; (80015b8 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80015a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	4013      	ands	r3, r2
 80015a8:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015aa:	68fb      	ldr	r3, [r7, #12]
}
 80015ac:	bf00      	nop
 80015ae:	3714      	adds	r7, #20
 80015b0:	46bd      	mov	sp, r7
 80015b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015b6:	4770      	bx	lr
 80015b8:	40021000 	.word	0x40021000

080015bc <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 80015bc:	b480      	push	{r7}
 80015be:	b087      	sub	sp, #28
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	6078      	str	r0, [r7, #4]
 80015c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 80015c6:	4a17      	ldr	r2, [pc, #92]	; (8001624 <LL_SYSCFG_SetEXTISource+0x68>)
 80015c8:	683b      	ldr	r3, [r7, #0]
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	3302      	adds	r3, #2
 80015ce:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	0c1b      	lsrs	r3, r3, #16
 80015d6:	43db      	mvns	r3, r3
 80015d8:	ea02 0103 	and.w	r1, r2, r3
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	0c1b      	lsrs	r3, r3, #16
 80015e0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015e2:	693b      	ldr	r3, [r7, #16]
 80015e4:	fa93 f3a3 	rbit	r3, r3
 80015e8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015ee:	697b      	ldr	r3, [r7, #20]
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d101      	bne.n	80015f8 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80015f4:	2320      	movs	r3, #32
 80015f6:	e003      	b.n	8001600 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80015f8:	697b      	ldr	r3, [r7, #20]
 80015fa:	fab3 f383 	clz	r3, r3
 80015fe:	b2db      	uxtb	r3, r3
 8001600:	461a      	mov	r2, r3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	fa03 f202 	lsl.w	r2, r3, r2
 8001608:	4806      	ldr	r0, [pc, #24]	; (8001624 <LL_SYSCFG_SetEXTISource+0x68>)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	b2db      	uxtb	r3, r3
 800160e:	430a      	orrs	r2, r1
 8001610:	3302      	adds	r3, #2
 8001612:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8001616:	bf00      	nop
 8001618:	371c      	adds	r7, #28
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	40010000 	.word	0x40010000

08001628 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 8001628:	b480      	push	{r7}
 800162a:	b08b      	sub	sp, #44	; 0x2c
 800162c:	af00      	add	r7, sp, #0
 800162e:	60f8      	str	r0, [r7, #12]
 8001630:	60b9      	str	r1, [r7, #8]
 8001632:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	681a      	ldr	r2, [r3, #0]
 8001638:	68bb      	ldr	r3, [r7, #8]
 800163a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800163c:	697b      	ldr	r3, [r7, #20]
 800163e:	fa93 f3a3 	rbit	r3, r3
 8001642:	613b      	str	r3, [r7, #16]
  return result;
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001648:	69bb      	ldr	r3, [r7, #24]
 800164a:	2b00      	cmp	r3, #0
 800164c:	d101      	bne.n	8001652 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800164e:	2320      	movs	r3, #32
 8001650:	e003      	b.n	800165a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001652:	69bb      	ldr	r3, [r7, #24]
 8001654:	fab3 f383 	clz	r3, r3
 8001658:	b2db      	uxtb	r3, r3
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	2103      	movs	r1, #3
 800165e:	fa01 f303 	lsl.w	r3, r1, r3
 8001662:	43db      	mvns	r3, r3
 8001664:	401a      	ands	r2, r3
 8001666:	68bb      	ldr	r3, [r7, #8]
 8001668:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800166a:	6a3b      	ldr	r3, [r7, #32]
 800166c:	fa93 f3a3 	rbit	r3, r3
 8001670:	61fb      	str	r3, [r7, #28]
  return result;
 8001672:	69fb      	ldr	r3, [r7, #28]
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001676:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001678:	2b00      	cmp	r3, #0
 800167a:	d101      	bne.n	8001680 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800167c:	2320      	movs	r3, #32
 800167e:	e003      	b.n	8001688 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001682:	fab3 f383 	clz	r3, r3
 8001686:	b2db      	uxtb	r3, r3
 8001688:	005b      	lsls	r3, r3, #1
 800168a:	6879      	ldr	r1, [r7, #4]
 800168c:	fa01 f303 	lsl.w	r3, r1, r3
 8001690:	431a      	orrs	r2, r3
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	601a      	str	r2, [r3, #0]
}
 8001696:	bf00      	nop
 8001698:	372c      	adds	r7, #44	; 0x2c
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr

080016a2 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 80016a2:	b480      	push	{r7}
 80016a4:	b08b      	sub	sp, #44	; 0x2c
 80016a6:	af00      	add	r7, sp, #0
 80016a8:	60f8      	str	r0, [r7, #12]
 80016aa:	60b9      	str	r1, [r7, #8]
 80016ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	68da      	ldr	r2, [r3, #12]
 80016b2:	68bb      	ldr	r3, [r7, #8]
 80016b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016b6:	697b      	ldr	r3, [r7, #20]
 80016b8:	fa93 f3a3 	rbit	r3, r3
 80016bc:	613b      	str	r3, [r7, #16]
  return result;
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80016c2:	69bb      	ldr	r3, [r7, #24]
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d101      	bne.n	80016cc <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 80016c8:	2320      	movs	r3, #32
 80016ca:	e003      	b.n	80016d4 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 80016cc:	69bb      	ldr	r3, [r7, #24]
 80016ce:	fab3 f383 	clz	r3, r3
 80016d2:	b2db      	uxtb	r3, r3
 80016d4:	005b      	lsls	r3, r3, #1
 80016d6:	2103      	movs	r1, #3
 80016d8:	fa01 f303 	lsl.w	r3, r1, r3
 80016dc:	43db      	mvns	r3, r3
 80016de:	401a      	ands	r2, r3
 80016e0:	68bb      	ldr	r3, [r7, #8]
 80016e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016e4:	6a3b      	ldr	r3, [r7, #32]
 80016e6:	fa93 f3a3 	rbit	r3, r3
 80016ea:	61fb      	str	r3, [r7, #28]
  return result;
 80016ec:	69fb      	ldr	r3, [r7, #28]
 80016ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d101      	bne.n	80016fa <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016f6:	2320      	movs	r3, #32
 80016f8:	e003      	b.n	8001702 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80016fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016fc:	fab3 f383 	clz	r3, r3
 8001700:	b2db      	uxtb	r3, r3
 8001702:	005b      	lsls	r3, r3, #1
 8001704:	6879      	ldr	r1, [r7, #4]
 8001706:	fa01 f303 	lsl.w	r3, r1, r3
 800170a:	431a      	orrs	r2, r3
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	60da      	str	r2, [r3, #12]
}
 8001710:	bf00      	nop
 8001712:	372c      	adds	r7, #44	; 0x2c
 8001714:	46bd      	mov	sp, r7
 8001716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171a:	4770      	bx	lr

0800171c <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800171c:	b480      	push	{r7}
 800171e:	b083      	sub	sp, #12
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
 8001724:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800172c:	bf00      	nop
 800172e:	370c      	adds	r7, #12
 8001730:	46bd      	mov	sp, r7
 8001732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001736:	4770      	bx	lr

08001738 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b08a      	sub	sp, #40	; 0x28
 800173c:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 800173e:	f107 031c 	add.w	r3, r7, #28
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800174a:	1d3b      	adds	r3, r7, #4
 800174c:	2200      	movs	r2, #0
 800174e:	601a      	str	r2, [r3, #0]
 8001750:	605a      	str	r2, [r3, #4]
 8001752:	609a      	str	r2, [r3, #8]
 8001754:	60da      	str	r2, [r3, #12]
 8001756:	611a      	str	r2, [r3, #16]
 8001758:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800175a:	2004      	movs	r0, #4
 800175c:	f7ff ff16 	bl	800158c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001760:	2080      	movs	r0, #128	; 0x80
 8001762:	f7ff ff13 	bl	800158c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001766:	2001      	movs	r0, #1
 8001768:	f7ff ff10 	bl	800158c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800176c:	2002      	movs	r0, #2
 800176e:	f7ff ff0d 	bl	800158c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001772:	2120      	movs	r1, #32
 8001774:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001778:	f7ff ffd0 	bl	800171c <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800177c:	491b      	ldr	r1, [pc, #108]	; (80017ec <MX_GPIO_Init+0xb4>)
 800177e:	2002      	movs	r0, #2
 8001780:	f7ff ff1c 	bl	80015bc <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001784:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001788:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800178a:	2300      	movs	r3, #0
 800178c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800178e:	2301      	movs	r3, #1
 8001790:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001794:	2300      	movs	r3, #0
 8001796:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800179a:	2302      	movs	r3, #2
 800179c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 80017a0:	f107 031c 	add.w	r3, r7, #28
 80017a4:	4618      	mov	r0, r3
 80017a6:	f001 fcdb 	bl	8003160 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 80017aa:	2200      	movs	r2, #0
 80017ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017b0:	480f      	ldr	r0, [pc, #60]	; (80017f0 <MX_GPIO_Init+0xb8>)
 80017b2:	f7ff ff76 	bl	80016a2 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 80017b6:	2200      	movs	r2, #0
 80017b8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80017bc:	480c      	ldr	r0, [pc, #48]	; (80017f0 <MX_GPIO_Init+0xb8>)
 80017be:	f7ff ff33 	bl	8001628 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 80017c2:	2320      	movs	r3, #32
 80017c4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 80017c6:	2301      	movs	r3, #1
 80017c8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80017d2:	2300      	movs	r3, #0
 80017d4:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80017d6:	1d3b      	adds	r3, r7, #4
 80017d8:	4619      	mov	r1, r3
 80017da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017de:	f001 fef6 	bl	80035ce <LL_GPIO_Init>

}
 80017e2:	bf00      	nop
 80017e4:	3728      	adds	r7, #40	; 0x28
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bd80      	pop	{r7, pc}
 80017ea:	bf00      	nop
 80017ec:	00f00003 	.word	0x00f00003
 80017f0:	48000800 	.word	0x48000800

080017f4 <__NVIC_SetPriorityGrouping>:
{
 80017f4:	b480      	push	{r7}
 80017f6:	b085      	sub	sp, #20
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	f003 0307 	and.w	r3, r3, #7
 8001802:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001804:	4b0c      	ldr	r3, [pc, #48]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	68db      	ldr	r3, [r3, #12]
 8001808:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800180a:	68ba      	ldr	r2, [r7, #8]
 800180c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001810:	4013      	ands	r3, r2
 8001812:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800181c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001820:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001824:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001826:	4a04      	ldr	r2, [pc, #16]	; (8001838 <__NVIC_SetPriorityGrouping+0x44>)
 8001828:	68bb      	ldr	r3, [r7, #8]
 800182a:	60d3      	str	r3, [r2, #12]
}
 800182c:	bf00      	nop
 800182e:	3714      	adds	r7, #20
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr
 8001838:	e000ed00 	.word	0xe000ed00

0800183c <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001840:	4b05      	ldr	r3, [pc, #20]	; (8001858 <LL_RCC_HSI_Enable+0x1c>)
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a04      	ldr	r2, [pc, #16]	; (8001858 <LL_RCC_HSI_Enable+0x1c>)
 8001846:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800184a:	6013      	str	r3, [r2, #0]
}
 800184c:	bf00      	nop
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	40021000 	.word	0x40021000

0800185c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001860:	4b07      	ldr	r3, [pc, #28]	; (8001880 <LL_RCC_HSI_IsReady+0x24>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800186c:	d101      	bne.n	8001872 <LL_RCC_HSI_IsReady+0x16>
 800186e:	2301      	movs	r3, #1
 8001870:	e000      	b.n	8001874 <LL_RCC_HSI_IsReady+0x18>
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	46bd      	mov	sp, r7
 8001878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	40021000 	.word	0x40021000

08001884 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800188c:	4b07      	ldr	r3, [pc, #28]	; (80018ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800188e:	685b      	ldr	r3, [r3, #4]
 8001890:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	061b      	lsls	r3, r3, #24
 8001898:	4904      	ldr	r1, [pc, #16]	; (80018ac <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800189a:	4313      	orrs	r3, r2
 800189c:	604b      	str	r3, [r1, #4]
}
 800189e:	bf00      	nop
 80018a0:	370c      	adds	r7, #12
 80018a2:	46bd      	mov	sp, r7
 80018a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a8:	4770      	bx	lr
 80018aa:	bf00      	nop
 80018ac:	40021000 	.word	0x40021000

080018b0 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 80018b8:	4b06      	ldr	r3, [pc, #24]	; (80018d4 <LL_RCC_SetSysClkSource+0x24>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	f023 0203 	bic.w	r2, r3, #3
 80018c0:	4904      	ldr	r1, [pc, #16]	; (80018d4 <LL_RCC_SetSysClkSource+0x24>)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	4313      	orrs	r3, r2
 80018c6:	608b      	str	r3, [r1, #8]
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr
 80018d4:	40021000 	.word	0x40021000

080018d8 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 80018dc:	4b04      	ldr	r3, [pc, #16]	; (80018f0 <LL_RCC_GetSysClkSource+0x18>)
 80018de:	689b      	ldr	r3, [r3, #8]
 80018e0:	f003 030c 	and.w	r3, r3, #12
}
 80018e4:	4618      	mov	r0, r3
 80018e6:	46bd      	mov	sp, r7
 80018e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ec:	4770      	bx	lr
 80018ee:	bf00      	nop
 80018f0:	40021000 	.word	0x40021000

080018f4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018f4:	b480      	push	{r7}
 80018f6:	b083      	sub	sp, #12
 80018f8:	af00      	add	r7, sp, #0
 80018fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018fc:	4b06      	ldr	r3, [pc, #24]	; (8001918 <LL_RCC_SetAHBPrescaler+0x24>)
 80018fe:	689b      	ldr	r3, [r3, #8]
 8001900:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001904:	4904      	ldr	r1, [pc, #16]	; (8001918 <LL_RCC_SetAHBPrescaler+0x24>)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	4313      	orrs	r3, r2
 800190a:	608b      	str	r3, [r1, #8]
}
 800190c:	bf00      	nop
 800190e:	370c      	adds	r7, #12
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	40021000 	.word	0x40021000

0800191c <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8001924:	4b06      	ldr	r3, [pc, #24]	; (8001940 <LL_RCC_SetAPB1Prescaler+0x24>)
 8001926:	689b      	ldr	r3, [r3, #8]
 8001928:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800192c:	4904      	ldr	r1, [pc, #16]	; (8001940 <LL_RCC_SetAPB1Prescaler+0x24>)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	4313      	orrs	r3, r2
 8001932:	608b      	str	r3, [r1, #8]
}
 8001934:	bf00      	nop
 8001936:	370c      	adds	r7, #12
 8001938:	46bd      	mov	sp, r7
 800193a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800193e:	4770      	bx	lr
 8001940:	40021000 	.word	0x40021000

08001944 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800194c:	4b06      	ldr	r3, [pc, #24]	; (8001968 <LL_RCC_SetAPB2Prescaler+0x24>)
 800194e:	689b      	ldr	r3, [r3, #8]
 8001950:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001954:	4904      	ldr	r1, [pc, #16]	; (8001968 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4313      	orrs	r3, r2
 800195a:	608b      	str	r3, [r1, #8]
}
 800195c:	bf00      	nop
 800195e:	370c      	adds	r7, #12
 8001960:	46bd      	mov	sp, r7
 8001962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001966:	4770      	bx	lr
 8001968:	40021000 	.word	0x40021000

0800196c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <LL_RCC_SetUSARTClockSource+0x30>)
 8001976:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	0c1b      	lsrs	r3, r3, #16
 800197e:	43db      	mvns	r3, r3
 8001980:	401a      	ands	r2, r3
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	b29b      	uxth	r3, r3
 8001986:	4905      	ldr	r1, [pc, #20]	; (800199c <LL_RCC_SetUSARTClockSource+0x30>)
 8001988:	4313      	orrs	r3, r2
 800198a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
 800199a:	bf00      	nop
 800199c:	40021000 	.word	0x40021000

080019a0 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 80019a4:	4b05      	ldr	r3, [pc, #20]	; (80019bc <LL_RCC_PLL_Enable+0x1c>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	4a04      	ldr	r2, [pc, #16]	; (80019bc <LL_RCC_PLL_Enable+0x1c>)
 80019aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ae:	6013      	str	r3, [r2, #0]
}
 80019b0:	bf00      	nop
 80019b2:	46bd      	mov	sp, r7
 80019b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b8:	4770      	bx	lr
 80019ba:	bf00      	nop
 80019bc:	40021000 	.word	0x40021000

080019c0 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 80019c4:	4b07      	ldr	r3, [pc, #28]	; (80019e4 <LL_RCC_PLL_IsReady+0x24>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019cc:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80019d0:	d101      	bne.n	80019d6 <LL_RCC_PLL_IsReady+0x16>
 80019d2:	2301      	movs	r3, #1
 80019d4:	e000      	b.n	80019d8 <LL_RCC_PLL_IsReady+0x18>
 80019d6:	2300      	movs	r3, #0
}
 80019d8:	4618      	mov	r0, r3
 80019da:	46bd      	mov	sp, r7
 80019dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	40021000 	.word	0x40021000

080019e8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	60b9      	str	r1, [r7, #8]
 80019f2:	607a      	str	r2, [r7, #4]
 80019f4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80019f6:	4b0a      	ldr	r3, [pc, #40]	; (8001a20 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80019f8:	68da      	ldr	r2, [r3, #12]
 80019fa:	4b0a      	ldr	r3, [pc, #40]	; (8001a24 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80019fc:	4013      	ands	r3, r2
 80019fe:	68f9      	ldr	r1, [r7, #12]
 8001a00:	68ba      	ldr	r2, [r7, #8]
 8001a02:	4311      	orrs	r1, r2
 8001a04:	687a      	ldr	r2, [r7, #4]
 8001a06:	0212      	lsls	r2, r2, #8
 8001a08:	4311      	orrs	r1, r2
 8001a0a:	683a      	ldr	r2, [r7, #0]
 8001a0c:	430a      	orrs	r2, r1
 8001a0e:	4904      	ldr	r1, [pc, #16]	; (8001a20 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8001a10:	4313      	orrs	r3, r2
 8001a12:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8001a14:	bf00      	nop
 8001a16:	3714      	adds	r7, #20
 8001a18:	46bd      	mov	sp, r7
 8001a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a1e:	4770      	bx	lr
 8001a20:	40021000 	.word	0x40021000
 8001a24:	f9ff808c 	.word	0xf9ff808c

08001a28 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8001a2c:	4b05      	ldr	r3, [pc, #20]	; (8001a44 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a04      	ldr	r2, [pc, #16]	; (8001a44 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	60d3      	str	r3, [r2, #12]
}
 8001a38:	bf00      	nop
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	40021000 	.word	0x40021000

08001a48 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a48:	b480      	push	{r7}
 8001a4a:	b085      	sub	sp, #20
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a50:	4b08      	ldr	r3, [pc, #32]	; (8001a74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a52:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a54:	4907      	ldr	r1, [pc, #28]	; (8001a74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	4013      	ands	r3, r2
 8001a64:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a66:	68fb      	ldr	r3, [r7, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	40021000 	.word	0x40021000

08001a78 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	b085      	sub	sp, #20
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a80:	4b08      	ldr	r3, [pc, #32]	; (8001aa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a82:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a84:	4907      	ldr	r1, [pc, #28]	; (8001aa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a8c:	4b05      	ldr	r3, [pc, #20]	; (8001aa4 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a8e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4013      	ands	r3, r2
 8001a94:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a96:	68fb      	ldr	r3, [r7, #12]
}
 8001a98:	bf00      	nop
 8001a9a:	3714      	adds	r7, #20
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa2:	4770      	bx	lr
 8001aa4:	40021000 	.word	0x40021000

08001aa8 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001aa8:	b480      	push	{r7}
 8001aaa:	b083      	sub	sp, #12
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001ab0:	4b06      	ldr	r3, [pc, #24]	; (8001acc <LL_FLASH_SetLatency+0x24>)
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f023 0207 	bic.w	r2, r3, #7
 8001ab8:	4904      	ldr	r1, [pc, #16]	; (8001acc <LL_FLASH_SetLatency+0x24>)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	4313      	orrs	r3, r2
 8001abe:	600b      	str	r3, [r1, #0]
}
 8001ac0:	bf00      	nop
 8001ac2:	370c      	adds	r7, #12
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	40022000 	.word	0x40022000

08001ad0 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001ad4:	4b04      	ldr	r3, [pc, #16]	; (8001ae8 <LL_FLASH_GetLatency+0x18>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f003 0307 	and.w	r3, r3, #7
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae4:	4770      	bx	lr
 8001ae6:	bf00      	nop
 8001ae8:	40022000 	.word	0x40022000

08001aec <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b083      	sub	sp, #12
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001af4:	4b06      	ldr	r3, [pc, #24]	; (8001b10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001afc:	4904      	ldr	r1, [pc, #16]	; (8001b10 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4313      	orrs	r3, r2
 8001b02:	600b      	str	r3, [r1, #0]
}
 8001b04:	bf00      	nop
 8001b06:	370c      	adds	r7, #12
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr
 8001b10:	40007000 	.word	0x40007000

08001b14 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001b18:	2001      	movs	r0, #1
 8001b1a:	f7ff ffad 	bl	8001a78 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001b1e:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001b22:	f7ff ff91 	bl	8001a48 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b26:	2003      	movs	r0, #3
 8001b28:	f7ff fe64 	bl	80017f4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b2c:	f000 f816 	bl	8001b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b30:	f7ff fe02 	bl	8001738 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001b34:	f001 f86c 	bl	8002c10 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001b38:	f000 fb30 	bl	800219c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001b3c:	f000 fe7e 	bl	800283c <MX_TIM1_Init>
  MX_SPI3_Init();
 8001b40:	f000 fb9a 	bl	8002278 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001b44:	f000 feb0 	bl	80028a8 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8001b48:	f001 f8d8 	bl	8002cfc <startupPrint>

  gimbalControlInit();
 8001b4c:	f7ff fbb2 	bl	80012b4 <gimbalControlInit>

  eyes_init();
 8001b50:	f7ff f808 	bl	8000b64 <eyes_init>
  eyes_start();
 8001b54:	f7ff f828 	bl	8000ba8 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b58:	e7fe      	b.n	8001b58 <main+0x44>
	...

08001b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b60:	2003      	movs	r0, #3
 8001b62:	f7ff ffa1 	bl	8001aa8 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b66:	bf00      	nop
 8001b68:	f7ff ffb2 	bl	8001ad0 <LL_FLASH_GetLatency>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b03      	cmp	r3, #3
 8001b70:	d1fa      	bne.n	8001b68 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b72:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b76:	f7ff ffb9 	bl	8001aec <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001b7a:	f7ff fe5f 	bl	800183c <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001b7e:	bf00      	nop
 8001b80:	f7ff fe6c 	bl	800185c <LL_RCC_HSI_IsReady>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d1fa      	bne.n	8001b80 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b8a:	2010      	movs	r0, #16
 8001b8c:	f7ff fe7a 	bl	8001884 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8001b90:	2300      	movs	r3, #0
 8001b92:	2208      	movs	r2, #8
 8001b94:	2100      	movs	r1, #0
 8001b96:	2002      	movs	r0, #2
 8001b98:	f7ff ff26 	bl	80019e8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b9c:	f7ff ff44 	bl	8001a28 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001ba0:	f7ff fefe 	bl	80019a0 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001ba4:	bf00      	nop
 8001ba6:	f7ff ff0b 	bl	80019c0 <LL_RCC_PLL_IsReady>
 8001baa:	4603      	mov	r3, r0
 8001bac:	2b01      	cmp	r3, #1
 8001bae:	d1fa      	bne.n	8001ba6 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001bb0:	2003      	movs	r0, #3
 8001bb2:	f7ff fe7d 	bl	80018b0 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001bb6:	bf00      	nop
 8001bb8:	f7ff fe8e 	bl	80018d8 <LL_RCC_GetSysClkSource>
 8001bbc:	4603      	mov	r3, r0
 8001bbe:	2b0c      	cmp	r3, #12
 8001bc0:	d1fa      	bne.n	8001bb8 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001bc2:	2000      	movs	r0, #0
 8001bc4:	f7ff fe96 	bl	80018f4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001bc8:	2000      	movs	r0, #0
 8001bca:	f7ff fea7 	bl	800191c <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001bce:	2000      	movs	r0, #0
 8001bd0:	f7ff feb8 	bl	8001944 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8001bd4:	4805      	ldr	r0, [pc, #20]	; (8001bec <SystemClock_Config+0x90>)
 8001bd6:	f002 fecb 	bl	8004970 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8001bda:	4804      	ldr	r0, [pc, #16]	; (8001bec <SystemClock_Config+0x90>)
 8001bdc:	f002 fefc 	bl	80049d8 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001be0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001be4:	f7ff fec2 	bl	800196c <LL_RCC_SetUSARTClockSource>
}
 8001be8:	bf00      	nop
 8001bea:	bd80      	pop	{r7, pc}
 8001bec:	03d09000 	.word	0x03d09000

08001bf0 <OF_ResetCoefficients>:
static int32_t deltaX;
static int32_t deltaY;
static int32_t deltaT;
static int16_t frameIdx;

void OF_ResetCoefficients(){
 8001bf0:	b490      	push	{r4, r7}
 8001bf2:	af00      	add	r7, sp, #0
	A[0] = B[0] = C[0] = D[0] = E[0] = 0;
 8001bf4:	4a22      	ldr	r2, [pc, #136]	; (8001c80 <OF_ResetCoefficients+0x90>)
 8001bf6:	f04f 0300 	mov.w	r3, #0
 8001bfa:	f04f 0400 	mov.w	r4, #0
 8001bfe:	e9c2 3400 	strd	r3, r4, [r2]
 8001c02:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <OF_ResetCoefficients+0x90>)
 8001c04:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c08:	4a1e      	ldr	r2, [pc, #120]	; (8001c84 <OF_ResetCoefficients+0x94>)
 8001c0a:	e9c2 3400 	strd	r3, r4, [r2]
 8001c0e:	4b1d      	ldr	r3, [pc, #116]	; (8001c84 <OF_ResetCoefficients+0x94>)
 8001c10:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c14:	4a1c      	ldr	r2, [pc, #112]	; (8001c88 <OF_ResetCoefficients+0x98>)
 8001c16:	e9c2 3400 	strd	r3, r4, [r2]
 8001c1a:	4b1b      	ldr	r3, [pc, #108]	; (8001c88 <OF_ResetCoefficients+0x98>)
 8001c1c:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c20:	4a1a      	ldr	r2, [pc, #104]	; (8001c8c <OF_ResetCoefficients+0x9c>)
 8001c22:	e9c2 3400 	strd	r3, r4, [r2]
 8001c26:	4b19      	ldr	r3, [pc, #100]	; (8001c8c <OF_ResetCoefficients+0x9c>)
 8001c28:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001c2c:	4a18      	ldr	r2, [pc, #96]	; (8001c90 <OF_ResetCoefficients+0xa0>)
 8001c2e:	e9c2 3400 	strd	r3, r4, [r2]
	A[1] = B[1] = C[1] = D[1] = E[1] = 0;
 8001c32:	4a13      	ldr	r2, [pc, #76]	; (8001c80 <OF_ResetCoefficients+0x90>)
 8001c34:	f04f 0300 	mov.w	r3, #0
 8001c38:	f04f 0400 	mov.w	r4, #0
 8001c3c:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c40:	4b0f      	ldr	r3, [pc, #60]	; (8001c80 <OF_ResetCoefficients+0x90>)
 8001c42:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c46:	4a0f      	ldr	r2, [pc, #60]	; (8001c84 <OF_ResetCoefficients+0x94>)
 8001c48:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c4c:	4b0d      	ldr	r3, [pc, #52]	; (8001c84 <OF_ResetCoefficients+0x94>)
 8001c4e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c52:	4a0d      	ldr	r2, [pc, #52]	; (8001c88 <OF_ResetCoefficients+0x98>)
 8001c54:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <OF_ResetCoefficients+0x98>)
 8001c5a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c5e:	4a0b      	ldr	r2, [pc, #44]	; (8001c8c <OF_ResetCoefficients+0x9c>)
 8001c60:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c64:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <OF_ResetCoefficients+0x9c>)
 8001c66:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c6a:	4a09      	ldr	r2, [pc, #36]	; (8001c90 <OF_ResetCoefficients+0xa0>)
 8001c6c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	frameIdx = 0;
 8001c70:	4b08      	ldr	r3, [pc, #32]	; (8001c94 <OF_ResetCoefficients+0xa4>)
 8001c72:	2200      	movs	r2, #0
 8001c74:	801a      	strh	r2, [r3, #0]
}
 8001c76:	bf00      	nop
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bc90      	pop	{r4, r7}
 8001c7c:	4770      	bx	lr
 8001c7e:	bf00      	nop
 8001c80:	20000640 	.word	0x20000640
 8001c84:	20000630 	.word	0x20000630
 8001c88:	20000620 	.word	0x20000620
 8001c8c:	20000610 	.word	0x20000610
 8001c90:	20000600 	.word	0x20000600
 8001c94:	2000065c 	.word	0x2000065c

08001c98 <OF_ComputeCoefficients>:

void OF_ComputeCoefficients(Device dev, uint8_t currentFrame[], uint8_t lastFrame[], int32_t idx){
 8001c98:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60b9      	str	r1, [r7, #8]
 8001ca2:	607a      	str	r2, [r7, #4]
 8001ca4:	603b      	str	r3, [r7, #0]
 8001ca6:	4603      	mov	r3, r0
 8001ca8:	73fb      	strb	r3, [r7, #15]

	if(fSelect[idx]){
 8001caa:	4a76      	ldr	r2, [pc, #472]	; (8001e84 <OF_ComputeCoefficients+0x1ec>)
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	781b      	ldrb	r3, [r3, #0]
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	f000 80e0 	beq.w	8001e78 <OF_ComputeCoefficients+0x1e0>
		deltaX = (lastFrame[f2[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f1[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001cb8:	4b73      	ldr	r3, [pc, #460]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001cba:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cbe:	461a      	mov	r2, r3
 8001cc0:	4b72      	ldr	r3, [pc, #456]	; (8001e8c <OF_ComputeCoefficients+0x1f4>)
 8001cc2:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cc6:	461a      	mov	r2, r3
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	4413      	add	r3, r2
 8001ccc:	781b      	ldrb	r3, [r3, #0]
 8001cce:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cd2:	4b6d      	ldr	r3, [pc, #436]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001cd4:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4b6d      	ldr	r3, [pc, #436]	; (8001e90 <OF_ComputeCoefficients+0x1f8>)
 8001cdc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	440b      	add	r3, r1
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cec:	1ad3      	subs	r3, r2, r3
 8001cee:	461a      	mov	r2, r3
 8001cf0:	4b68      	ldr	r3, [pc, #416]	; (8001e94 <OF_ComputeCoefficients+0x1fc>)
 8001cf2:	601a      	str	r2, [r3, #0]
		deltaY = (lastFrame[f4[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f3[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001cf6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4b66      	ldr	r3, [pc, #408]	; (8001e98 <OF_ComputeCoefficients+0x200>)
 8001cfe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d02:	461a      	mov	r2, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4413      	add	r3, r2
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0e:	4b5e      	ldr	r3, [pc, #376]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001d10:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d14:	4619      	mov	r1, r3
 8001d16:	4b61      	ldr	r3, [pc, #388]	; (8001e9c <OF_ComputeCoefficients+0x204>)
 8001d18:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	440b      	add	r3, r1
 8001d22:	781b      	ldrb	r3, [r3, #0]
 8001d24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d28:	1ad3      	subs	r3, r2, r3
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ea0 <OF_ComputeCoefficients+0x208>)
 8001d2e:	601a      	str	r2, [r3, #0]
		deltaT = (currentFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001d30:	4b55      	ldr	r3, [pc, #340]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001d32:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d36:	461a      	mov	r2, r3
 8001d38:	4b5a      	ldr	r3, [pc, #360]	; (8001ea4 <OF_ComputeCoefficients+0x20c>)
 8001d3a:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001d3e:	461a      	mov	r2, r3
 8001d40:	68bb      	ldr	r3, [r7, #8]
 8001d42:	4413      	add	r3, r2
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d4a:	4b4f      	ldr	r3, [pc, #316]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001d4c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d50:	4619      	mov	r1, r3
 8001d52:	4b54      	ldr	r3, [pc, #336]	; (8001ea4 <OF_ComputeCoefficients+0x20c>)
 8001d54:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	440b      	add	r3, r1
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	461a      	mov	r2, r3
 8001d68:	4b4f      	ldr	r3, [pc, #316]	; (8001ea8 <OF_ComputeCoefficients+0x210>)
 8001d6a:	601a      	str	r2, [r3, #0]

		A[dev] += deltaX * deltaX;
 8001d6c:	7bfb      	ldrb	r3, [r7, #15]
 8001d6e:	4a4f      	ldr	r2, [pc, #316]	; (8001eac <OF_ComputeCoefficients+0x214>)
 8001d70:	00db      	lsls	r3, r3, #3
 8001d72:	4413      	add	r3, r2
 8001d74:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d78:	4b46      	ldr	r3, [pc, #280]	; (8001e94 <OF_ComputeCoefficients+0x1fc>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4845      	ldr	r0, [pc, #276]	; (8001e94 <OF_ComputeCoefficients+0x1fc>)
 8001d7e:	6800      	ldr	r0, [r0, #0]
 8001d80:	fb00 f303 	mul.w	r3, r0, r3
 8001d84:	469b      	mov	fp, r3
 8001d86:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001d8a:	7bf8      	ldrb	r0, [r7, #15]
 8001d8c:	eb1b 0301 	adds.w	r3, fp, r1
 8001d90:	eb4c 0402 	adc.w	r4, ip, r2
 8001d94:	4945      	ldr	r1, [pc, #276]	; (8001eac <OF_ComputeCoefficients+0x214>)
 8001d96:	00c2      	lsls	r2, r0, #3
 8001d98:	440a      	add	r2, r1
 8001d9a:	e9c2 3400 	strd	r3, r4, [r2]
		B[dev] += deltaY * deltaX;
 8001d9e:	7bfb      	ldrb	r3, [r7, #15]
 8001da0:	4a43      	ldr	r2, [pc, #268]	; (8001eb0 <OF_ComputeCoefficients+0x218>)
 8001da2:	00db      	lsls	r3, r3, #3
 8001da4:	4413      	add	r3, r2
 8001da6:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001daa:	4b3d      	ldr	r3, [pc, #244]	; (8001ea0 <OF_ComputeCoefficients+0x208>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4839      	ldr	r0, [pc, #228]	; (8001e94 <OF_ComputeCoefficients+0x1fc>)
 8001db0:	6800      	ldr	r0, [r0, #0]
 8001db2:	fb00 f303 	mul.w	r3, r0, r3
 8001db6:	469b      	mov	fp, r3
 8001db8:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001dbc:	7bf8      	ldrb	r0, [r7, #15]
 8001dbe:	eb1b 0301 	adds.w	r3, fp, r1
 8001dc2:	eb4c 0402 	adc.w	r4, ip, r2
 8001dc6:	493a      	ldr	r1, [pc, #232]	; (8001eb0 <OF_ComputeCoefficients+0x218>)
 8001dc8:	00c2      	lsls	r2, r0, #3
 8001dca:	440a      	add	r2, r1
 8001dcc:	e9c2 3400 	strd	r3, r4, [r2]
		C[dev] += deltaT * deltaX;
 8001dd0:	7bfb      	ldrb	r3, [r7, #15]
 8001dd2:	4a38      	ldr	r2, [pc, #224]	; (8001eb4 <OF_ComputeCoefficients+0x21c>)
 8001dd4:	00db      	lsls	r3, r3, #3
 8001dd6:	4413      	add	r3, r2
 8001dd8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ddc:	4b32      	ldr	r3, [pc, #200]	; (8001ea8 <OF_ComputeCoefficients+0x210>)
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	482c      	ldr	r0, [pc, #176]	; (8001e94 <OF_ComputeCoefficients+0x1fc>)
 8001de2:	6800      	ldr	r0, [r0, #0]
 8001de4:	fb00 f303 	mul.w	r3, r0, r3
 8001de8:	469b      	mov	fp, r3
 8001dea:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001dee:	7bf8      	ldrb	r0, [r7, #15]
 8001df0:	eb1b 0301 	adds.w	r3, fp, r1
 8001df4:	eb4c 0402 	adc.w	r4, ip, r2
 8001df8:	492e      	ldr	r1, [pc, #184]	; (8001eb4 <OF_ComputeCoefficients+0x21c>)
 8001dfa:	00c2      	lsls	r2, r0, #3
 8001dfc:	440a      	add	r2, r1
 8001dfe:	e9c2 3400 	strd	r3, r4, [r2]
		D[dev] += deltaY * deltaY;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	4a2c      	ldr	r2, [pc, #176]	; (8001eb8 <OF_ComputeCoefficients+0x220>)
 8001e06:	00db      	lsls	r3, r3, #3
 8001e08:	4413      	add	r3, r2
 8001e0a:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e0e:	4b24      	ldr	r3, [pc, #144]	; (8001ea0 <OF_ComputeCoefficients+0x208>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4823      	ldr	r0, [pc, #140]	; (8001ea0 <OF_ComputeCoefficients+0x208>)
 8001e14:	6800      	ldr	r0, [r0, #0]
 8001e16:	fb00 f303 	mul.w	r3, r0, r3
 8001e1a:	469b      	mov	fp, r3
 8001e1c:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001e20:	7bf8      	ldrb	r0, [r7, #15]
 8001e22:	eb1b 0301 	adds.w	r3, fp, r1
 8001e26:	eb4c 0402 	adc.w	r4, ip, r2
 8001e2a:	4923      	ldr	r1, [pc, #140]	; (8001eb8 <OF_ComputeCoefficients+0x220>)
 8001e2c:	00c2      	lsls	r2, r0, #3
 8001e2e:	440a      	add	r2, r1
 8001e30:	e9c2 3400 	strd	r3, r4, [r2]
		E[dev] += deltaT * deltaY;
 8001e34:	7bfb      	ldrb	r3, [r7, #15]
 8001e36:	4a21      	ldr	r2, [pc, #132]	; (8001ebc <OF_ComputeCoefficients+0x224>)
 8001e38:	00db      	lsls	r3, r3, #3
 8001e3a:	4413      	add	r3, r2
 8001e3c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e40:	4b19      	ldr	r3, [pc, #100]	; (8001ea8 <OF_ComputeCoefficients+0x210>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4816      	ldr	r0, [pc, #88]	; (8001ea0 <OF_ComputeCoefficients+0x208>)
 8001e46:	6800      	ldr	r0, [r0, #0]
 8001e48:	fb00 f303 	mul.w	r3, r0, r3
 8001e4c:	469b      	mov	fp, r3
 8001e4e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001e52:	7bf8      	ldrb	r0, [r7, #15]
 8001e54:	eb1b 0301 	adds.w	r3, fp, r1
 8001e58:	eb4c 0402 	adc.w	r4, ip, r2
 8001e5c:	4917      	ldr	r1, [pc, #92]	; (8001ebc <OF_ComputeCoefficients+0x224>)
 8001e5e:	00c2      	lsls	r2, r0, #3
 8001e60:	440a      	add	r2, r1
 8001e62:	e9c2 3400 	strd	r3, r4, [r2]

		frameIdx++;
 8001e66:	4b08      	ldr	r3, [pc, #32]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001e68:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e6c:	b29b      	uxth	r3, r3
 8001e6e:	3301      	adds	r3, #1
 8001e70:	b29b      	uxth	r3, r3
 8001e72:	b21a      	sxth	r2, r3
 8001e74:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <OF_ComputeCoefficients+0x1f0>)
 8001e76:	801a      	strh	r2, [r3, #0]
	}
}
 8001e78:	bf00      	nop
 8001e7a:	3714      	adds	r7, #20
 8001e7c:	46bd      	mov	sp, r7
 8001e7e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001e82:	4770      	bx	lr
 8001e84:	080066d0 	.word	0x080066d0
 8001e88:	2000065c 	.word	0x2000065c
 8001e8c:	080060d0 	.word	0x080060d0
 8001e90:	08005ed0 	.word	0x08005ed0
 8001e94:	20000650 	.word	0x20000650
 8001e98:	080064d0 	.word	0x080064d0
 8001e9c:	080062d0 	.word	0x080062d0
 8001ea0:	20000654 	.word	0x20000654
 8001ea4:	08005cd0 	.word	0x08005cd0
 8001ea8:	20000658 	.word	0x20000658
 8001eac:	20000600 	.word	0x20000600
 8001eb0:	20000610 	.word	0x20000610
 8001eb4:	20000620 	.word	0x20000620
 8001eb8:	20000630 	.word	0x20000630
 8001ebc:	20000640 	.word	0x20000640

08001ec0 <OF_Compute>:

void OF_Compute(Device dev, int32_t* ofX, int32_t* ofY){
 8001ec0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001ec4:	b088      	sub	sp, #32
 8001ec6:	af00      	add	r7, sp, #0
 8001ec8:	4603      	mov	r3, r0
 8001eca:	60b9      	str	r1, [r7, #8]
 8001ecc:	607a      	str	r2, [r7, #4]
 8001ece:	73fb      	strb	r3, [r7, #15]
	int64_t num, den;

	den = A[dev] * D[dev] - B[dev] * B[dev];
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	4a69      	ldr	r2, [pc, #420]	; (8002078 <OF_Compute+0x1b8>)
 8001ed4:	00db      	lsls	r3, r3, #3
 8001ed6:	4413      	add	r3, r2
 8001ed8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001edc:	7bfb      	ldrb	r3, [r7, #15]
 8001ede:	4867      	ldr	r0, [pc, #412]	; (800207c <OF_Compute+0x1bc>)
 8001ee0:	00db      	lsls	r3, r3, #3
 8001ee2:	4403      	add	r3, r0
 8001ee4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ee8:	fb03 f502 	mul.w	r5, r3, r2
 8001eec:	fb01 f004 	mul.w	r0, r1, r4
 8001ef0:	4428      	add	r0, r5
 8001ef2:	fba1 5603 	umull	r5, r6, r1, r3
 8001ef6:	1983      	adds	r3, r0, r6
 8001ef8:	461e      	mov	r6, r3
 8001efa:	7bfb      	ldrb	r3, [r7, #15]
 8001efc:	4a60      	ldr	r2, [pc, #384]	; (8002080 <OF_Compute+0x1c0>)
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	4413      	add	r3, r2
 8001f02:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f06:	7bfb      	ldrb	r3, [r7, #15]
 8001f08:	485d      	ldr	r0, [pc, #372]	; (8002080 <OF_Compute+0x1c0>)
 8001f0a:	00db      	lsls	r3, r3, #3
 8001f0c:	4403      	add	r3, r0
 8001f0e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f12:	fb03 fc02 	mul.w	ip, r3, r2
 8001f16:	fb01 f004 	mul.w	r0, r1, r4
 8001f1a:	4460      	add	r0, ip
 8001f1c:	fba1 bc03 	umull	fp, ip, r1, r3
 8001f20:	eb00 020c 	add.w	r2, r0, ip
 8001f24:	4694      	mov	ip, r2
 8001f26:	462b      	mov	r3, r5
 8001f28:	4634      	mov	r4, r6
 8001f2a:	ebb3 030b 	subs.w	r3, r3, fp
 8001f2e:	eb64 040c 	sbc.w	r4, r4, ip
 8001f32:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(den > 0){
 8001f36:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001f3a:	2b01      	cmp	r3, #1
 8001f3c:	f174 0300 	sbcs.w	r3, r4, #0
 8001f40:	f2c0 808d 	blt.w	800205e <OF_Compute+0x19e>
		num = (C[dev]*D[dev]) - (B[dev]*E[dev]);
 8001f44:	7bfb      	ldrb	r3, [r7, #15]
 8001f46:	4a4f      	ldr	r2, [pc, #316]	; (8002084 <OF_Compute+0x1c4>)
 8001f48:	00db      	lsls	r3, r3, #3
 8001f4a:	4413      	add	r3, r2
 8001f4c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f50:	7bfb      	ldrb	r3, [r7, #15]
 8001f52:	484a      	ldr	r0, [pc, #296]	; (800207c <OF_Compute+0x1bc>)
 8001f54:	00db      	lsls	r3, r3, #3
 8001f56:	4403      	add	r3, r0
 8001f58:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f5c:	fb03 f502 	mul.w	r5, r3, r2
 8001f60:	fb01 f004 	mul.w	r0, r1, r4
 8001f64:	4428      	add	r0, r5
 8001f66:	fba1 5603 	umull	r5, r6, r1, r3
 8001f6a:	1983      	adds	r3, r0, r6
 8001f6c:	461e      	mov	r6, r3
 8001f6e:	7bfb      	ldrb	r3, [r7, #15]
 8001f70:	4a43      	ldr	r2, [pc, #268]	; (8002080 <OF_Compute+0x1c0>)
 8001f72:	00db      	lsls	r3, r3, #3
 8001f74:	4413      	add	r3, r2
 8001f76:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f7a:	7bfb      	ldrb	r3, [r7, #15]
 8001f7c:	4842      	ldr	r0, [pc, #264]	; (8002088 <OF_Compute+0x1c8>)
 8001f7e:	00db      	lsls	r3, r3, #3
 8001f80:	4403      	add	r3, r0
 8001f82:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f86:	fb03 fc02 	mul.w	ip, r3, r2
 8001f8a:	fb01 f004 	mul.w	r0, r1, r4
 8001f8e:	4460      	add	r0, ip
 8001f90:	fba1 bc03 	umull	fp, ip, r1, r3
 8001f94:	eb00 020c 	add.w	r2, r0, ip
 8001f98:	4694      	mov	ip, r2
 8001f9a:	462b      	mov	r3, r5
 8001f9c:	4634      	mov	r4, r6
 8001f9e:	ebb3 030b 	subs.w	r3, r3, fp
 8001fa2:	eb64 040c 	sbc.w	r4, r4, ip
 8001fa6:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofX = (num << bitsOfResolution)  / den;
 8001faa:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001fae:	f04f 0000 	mov.w	r0, #0
 8001fb2:	f04f 0100 	mov.w	r1, #0
 8001fb6:	0261      	lsls	r1, r4, #9
 8001fb8:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8001fbc:	0258      	lsls	r0, r3, #9
 8001fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001fc2:	f7fe f955 	bl	8000270 <__aeabi_ldivmod>
 8001fc6:	4603      	mov	r3, r0
 8001fc8:	460c      	mov	r4, r1
 8001fca:	461a      	mov	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	601a      	str	r2, [r3, #0]
		num = (A[dev]*E[dev]) - (B[dev]*C[dev]);
 8001fd0:	7bfb      	ldrb	r3, [r7, #15]
 8001fd2:	4a29      	ldr	r2, [pc, #164]	; (8002078 <OF_Compute+0x1b8>)
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4413      	add	r3, r2
 8001fd8:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	482a      	ldr	r0, [pc, #168]	; (8002088 <OF_Compute+0x1c8>)
 8001fe0:	00db      	lsls	r3, r3, #3
 8001fe2:	4403      	add	r3, r0
 8001fe4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fe8:	fb03 f502 	mul.w	r5, r3, r2
 8001fec:	fb01 f004 	mul.w	r0, r1, r4
 8001ff0:	4428      	add	r0, r5
 8001ff2:	fba1 5603 	umull	r5, r6, r1, r3
 8001ff6:	1983      	adds	r3, r0, r6
 8001ff8:	461e      	mov	r6, r3
 8001ffa:	7bfb      	ldrb	r3, [r7, #15]
 8001ffc:	4a20      	ldr	r2, [pc, #128]	; (8002080 <OF_Compute+0x1c0>)
 8001ffe:	00db      	lsls	r3, r3, #3
 8002000:	4413      	add	r3, r2
 8002002:	e9d3 1200 	ldrd	r1, r2, [r3]
 8002006:	7bfb      	ldrb	r3, [r7, #15]
 8002008:	481e      	ldr	r0, [pc, #120]	; (8002084 <OF_Compute+0x1c4>)
 800200a:	00db      	lsls	r3, r3, #3
 800200c:	4403      	add	r3, r0
 800200e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8002012:	fb03 fc02 	mul.w	ip, r3, r2
 8002016:	fb01 f004 	mul.w	r0, r1, r4
 800201a:	4460      	add	r0, ip
 800201c:	fba1 bc03 	umull	fp, ip, r1, r3
 8002020:	eb00 020c 	add.w	r2, r0, ip
 8002024:	4694      	mov	ip, r2
 8002026:	462b      	mov	r3, r5
 8002028:	4634      	mov	r4, r6
 800202a:	ebb3 030b 	subs.w	r3, r3, fp
 800202e:	eb64 040c 	sbc.w	r4, r4, ip
 8002032:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofY = (num << bitsOfResolution) / den;
 8002036:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800203a:	f04f 0000 	mov.w	r0, #0
 800203e:	f04f 0100 	mov.w	r1, #0
 8002042:	0261      	lsls	r1, r4, #9
 8002044:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8002048:	0258      	lsls	r0, r3, #9
 800204a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800204e:	f7fe f90f 	bl	8000270 <__aeabi_ldivmod>
 8002052:	4603      	mov	r3, r0
 8002054:	460c      	mov	r4, r1
 8002056:	461a      	mov	r2, r3
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	601a      	str	r2, [r3, #0]
	}
	else{
		*ofX = *ofY = 0;
	}
}
 800205c:	e006      	b.n	800206c <OF_Compute+0x1ac>
		*ofX = *ofY = 0;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2200      	movs	r2, #0
 8002062:	601a      	str	r2, [r3, #0]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	601a      	str	r2, [r3, #0]
}
 800206c:	bf00      	nop
 800206e:	3720      	adds	r7, #32
 8002070:	46bd      	mov	sp, r7
 8002072:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002076:	bf00      	nop
 8002078:	20000600 	.word	0x20000600
 800207c:	20000630 	.word	0x20000630
 8002080:	20000610 	.word	0x20000610
 8002084:	20000620 	.word	0x20000620
 8002088:	20000640 	.word	0x20000640

0800208c <OF_ComputeFused>:

void OF_ComputeFused(optical2DFlowStruct* right, optical2DFlowStruct* left, optical2DandRotateFlowStruct* fused){
 800208c:	b480      	push	{r7}
 800208e:	b085      	sub	sp, #20
 8002090:	af00      	add	r7, sp, #0
 8002092:	60f8      	str	r0, [r7, #12]
 8002094:	60b9      	str	r1, [r7, #8]
 8002096:	607a      	str	r2, [r7, #4]
	fused->x = (right->x + left->x) >> 1;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	4413      	add	r3, r2
 80020a2:	105a      	asrs	r2, r3, #1
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	601a      	str	r2, [r3, #0]
	fused->y = (right->y + left->y) >> 1;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	685a      	ldr	r2, [r3, #4]
 80020ac:	68bb      	ldr	r3, [r7, #8]
 80020ae:	685b      	ldr	r3, [r3, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	105a      	asrs	r2, r3, #1
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	605a      	str	r2, [r3, #4]
	if((right->y < 0 && left->y > 0) || (right->y > 0 && left->y < 0))
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	685b      	ldr	r3, [r3, #4]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da03      	bge.n	80020c8 <OF_ComputeFused+0x3c>
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	685b      	ldr	r3, [r3, #4]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	dc07      	bgt.n	80020d8 <OF_ComputeFused+0x4c>
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	685b      	ldr	r3, [r3, #4]
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	dd0a      	ble.n	80020e6 <OF_ComputeFused+0x5a>
 80020d0:	68bb      	ldr	r3, [r7, #8]
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	da06      	bge.n	80020e6 <OF_ComputeFused+0x5a>
		fused->theta = (right->y - left->y);
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	685a      	ldr	r2, [r3, #4]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	1ad2      	subs	r2, r2, r3
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	609a      	str	r2, [r3, #8]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
	...

080020f4 <LL_AHB2_GRP1_EnableClock>:
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020fc:	4b08      	ldr	r3, [pc, #32]	; (8002120 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002100:	4907      	ldr	r1, [pc, #28]	; (8002120 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	4313      	orrs	r3, r2
 8002106:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002108:	4b05      	ldr	r3, [pc, #20]	; (8002120 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800210a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	4013      	ands	r3, r2
 8002110:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002112:	68fb      	ldr	r3, [r7, #12]
}
 8002114:	bf00      	nop
 8002116:	3714      	adds	r7, #20
 8002118:	46bd      	mov	sp, r7
 800211a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800211e:	4770      	bx	lr
 8002120:	40021000 	.word	0x40021000

08002124 <LL_APB1_GRP1_EnableClock>:
{
 8002124:	b480      	push	{r7}
 8002126:	b085      	sub	sp, #20
 8002128:	af00      	add	r7, sp, #0
 800212a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 800212c:	4b08      	ldr	r3, [pc, #32]	; (8002150 <LL_APB1_GRP1_EnableClock+0x2c>)
 800212e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002130:	4907      	ldr	r1, [pc, #28]	; (8002150 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4313      	orrs	r3, r2
 8002136:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002138:	4b05      	ldr	r3, [pc, #20]	; (8002150 <LL_APB1_GRP1_EnableClock+0x2c>)
 800213a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	4013      	ands	r3, r2
 8002140:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002142:	68fb      	ldr	r3, [r7, #12]
}
 8002144:	bf00      	nop
 8002146:	3714      	adds	r7, #20
 8002148:	46bd      	mov	sp, r7
 800214a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800214e:	4770      	bx	lr
 8002150:	40021000 	.word	0x40021000

08002154 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	f023 0210 	bic.w	r2, r3, #16
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	431a      	orrs	r2, r3
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	605a      	str	r2, [r3, #4]
}
 800216e:	bf00      	nop
 8002170:	370c      	adds	r7, #12
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr

0800217a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800217a:	b480      	push	{r7}
 800217c:	b083      	sub	sp, #12
 800217e:	af00      	add	r7, sp, #0
 8002180:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	f023 0208 	bic.w	r2, r3, #8
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	605a      	str	r2, [r3, #4]
}
 800218e:	bf00      	nop
 8002190:	370c      	adds	r7, #12
 8002192:	46bd      	mov	sp, r7
 8002194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002198:	4770      	bx	lr
	...

0800219c <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b090      	sub	sp, #64	; 0x40
 80021a0:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 80021a2:	f107 0318 	add.w	r3, r7, #24
 80021a6:	2228      	movs	r2, #40	; 0x28
 80021a8:	2100      	movs	r1, #0
 80021aa:	4618      	mov	r0, r3
 80021ac:	f002 fc4e 	bl	8004a4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b0:	463b      	mov	r3, r7
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
 80021b6:	605a      	str	r2, [r3, #4]
 80021b8:	609a      	str	r2, [r3, #8]
 80021ba:	60da      	str	r2, [r3, #12]
 80021bc:	611a      	str	r2, [r3, #16]
 80021be:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 80021c0:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 80021c4:	f7ff ffae 	bl	8002124 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80021c8:	2004      	movs	r0, #4
 80021ca:	f7ff ff93 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80021ce:	2002      	movs	r0, #2
 80021d0:	f7ff ff90 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 80021d4:	230c      	movs	r3, #12
 80021d6:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021d8:	2302      	movs	r3, #2
 80021da:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021dc:	2303      	movs	r3, #3
 80021de:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021e0:	2300      	movs	r3, #0
 80021e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021e4:	2300      	movs	r3, #0
 80021e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80021e8:	2305      	movs	r3, #5
 80021ea:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ec:	463b      	mov	r3, r7
 80021ee:	4619      	mov	r1, r3
 80021f0:	481e      	ldr	r0, [pc, #120]	; (800226c <MX_SPI2_Init+0xd0>)
 80021f2:	f001 f9ec 	bl	80035ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80021f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021fa:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021fc:	2302      	movs	r3, #2
 80021fe:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002200:	2303      	movs	r3, #3
 8002202:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002204:	2300      	movs	r3, #0
 8002206:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002208:	2300      	movs	r3, #0
 800220a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 800220c:	2305      	movs	r3, #5
 800220e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002210:	463b      	mov	r3, r7
 8002212:	4619      	mov	r1, r3
 8002214:	4816      	ldr	r0, [pc, #88]	; (8002270 <MX_SPI2_Init+0xd4>)
 8002216:	f001 f9da 	bl	80035ce <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 800221e:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002222:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002224:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8002228:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800222a:	2302      	movs	r3, #2
 800222c:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 800222e:	2301      	movs	r3, #1
 8002230:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8002232:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002236:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 8002238:	2320      	movs	r3, #32
 800223a:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 800223c:	2300      	movs	r3, #0
 800223e:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002240:	2300      	movs	r3, #0
 8002242:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002244:	2307      	movs	r3, #7
 8002246:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002248:	f107 0318 	add.w	r3, r7, #24
 800224c:	4619      	mov	r1, r3
 800224e:	4809      	ldr	r0, [pc, #36]	; (8002274 <MX_SPI2_Init+0xd8>)
 8002250:	f001 fe0b 	bl	8003e6a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002254:	2100      	movs	r1, #0
 8002256:	4807      	ldr	r0, [pc, #28]	; (8002274 <MX_SPI2_Init+0xd8>)
 8002258:	f7ff ff7c 	bl	8002154 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 800225c:	4805      	ldr	r0, [pc, #20]	; (8002274 <MX_SPI2_Init+0xd8>)
 800225e:	f7ff ff8c 	bl	800217a <LL_SPI_DisableNSSPulseMgt>

}
 8002262:	bf00      	nop
 8002264:	3740      	adds	r7, #64	; 0x40
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	48000800 	.word	0x48000800
 8002270:	48000400 	.word	0x48000400
 8002274:	40003800 	.word	0x40003800

08002278 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	b090      	sub	sp, #64	; 0x40
 800227c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800227e:	f107 0318 	add.w	r3, r7, #24
 8002282:	2228      	movs	r2, #40	; 0x28
 8002284:	2100      	movs	r1, #0
 8002286:	4618      	mov	r0, r3
 8002288:	f002 fbe0 	bl	8004a4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800228c:	463b      	mov	r3, r7
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
 8002298:	611a      	str	r2, [r3, #16]
 800229a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800229c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 80022a0:	f7ff ff40 	bl	8002124 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80022a4:	2004      	movs	r0, #4
 80022a6:	f7ff ff25 	bl	80020f4 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 80022aa:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 80022ae:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80022b0:	2302      	movs	r3, #2
 80022b2:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80022b8:	2300      	movs	r3, #0
 80022ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80022bc:	2300      	movs	r3, #0
 80022be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 80022c0:	2306      	movs	r3, #6
 80022c2:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80022c4:	463b      	mov	r3, r7
 80022c6:	4619      	mov	r1, r3
 80022c8:	4815      	ldr	r0, [pc, #84]	; (8002320 <MX_SPI3_Init+0xa8>)
 80022ca:	f001 f980 	bl	80035ce <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80022ce:	2300      	movs	r3, #0
 80022d0:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80022d2:	f44f 7382 	mov.w	r3, #260	; 0x104
 80022d6:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80022d8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80022dc:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80022de:	2302      	movs	r3, #2
 80022e0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80022e2:	2301      	movs	r3, #1
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80022ec:	2320      	movs	r3, #32
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022f0:	2300      	movs	r3, #0
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022f4:	2300      	movs	r3, #0
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80022f8:	2307      	movs	r3, #7
 80022fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80022fc:	f107 0318 	add.w	r3, r7, #24
 8002300:	4619      	mov	r1, r3
 8002302:	4808      	ldr	r0, [pc, #32]	; (8002324 <MX_SPI3_Init+0xac>)
 8002304:	f001 fdb1 	bl	8003e6a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 8002308:	2100      	movs	r1, #0
 800230a:	4806      	ldr	r0, [pc, #24]	; (8002324 <MX_SPI3_Init+0xac>)
 800230c:	f7ff ff22 	bl	8002154 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 8002310:	4804      	ldr	r0, [pc, #16]	; (8002324 <MX_SPI3_Init+0xac>)
 8002312:	f7ff ff32 	bl	800217a <LL_SPI_DisableNSSPulseMgt>

}
 8002316:	bf00      	nop
 8002318:	3740      	adds	r7, #64	; 0x40
 800231a:	46bd      	mov	sp, r7
 800231c:	bd80      	pop	{r7, pc}
 800231e:	bf00      	nop
 8002320:	48000800 	.word	0x48000800
 8002324:	40003c00 	.word	0x40003c00

08002328 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002328:	b480      	push	{r7}
 800232a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800232c:	bf00      	nop
 800232e:	46bd      	mov	sp, r7
 8002330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002334:	4770      	bx	lr

08002336 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002336:	b480      	push	{r7}
 8002338:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800233a:	e7fe      	b.n	800233a <HardFault_Handler+0x4>

0800233c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002340:	e7fe      	b.n	8002340 <MemManage_Handler+0x4>

08002342 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002342:	b480      	push	{r7}
 8002344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002346:	e7fe      	b.n	8002346 <BusFault_Handler+0x4>

08002348 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002348:	b480      	push	{r7}
 800234a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800234c:	e7fe      	b.n	800234c <UsageFault_Handler+0x4>

0800234e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800234e:	b480      	push	{r7}
 8002350:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002352:	bf00      	nop
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002360:	bf00      	nop
 8002362:	46bd      	mov	sp, r7
 8002364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002368:	4770      	bx	lr

0800236a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800236a:	b480      	push	{r7}
 800236c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800236e:	bf00      	nop
 8002370:	46bd      	mov	sp, r7
 8002372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002376:	4770      	bx	lr

08002378 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800237c:	bf00      	nop
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b086      	sub	sp, #24
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	60b9      	str	r1, [r7, #8]
 8002390:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002392:	2300      	movs	r3, #0
 8002394:	617b      	str	r3, [r7, #20]
 8002396:	e00a      	b.n	80023ae <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002398:	f000 fca8 	bl	8002cec <__io_getchar>
 800239c:	4601      	mov	r1, r0
 800239e:	68bb      	ldr	r3, [r7, #8]
 80023a0:	1c5a      	adds	r2, r3, #1
 80023a2:	60ba      	str	r2, [r7, #8]
 80023a4:	b2ca      	uxtb	r2, r1
 80023a6:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	3301      	adds	r3, #1
 80023ac:	617b      	str	r3, [r7, #20]
 80023ae:	697a      	ldr	r2, [r7, #20]
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	dbf0      	blt.n	8002398 <_read+0x12>
	}

return len;
 80023b6:	687b      	ldr	r3, [r7, #4]
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}

080023c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	60f8      	str	r0, [r7, #12]
 80023c8:	60b9      	str	r1, [r7, #8]
 80023ca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
 80023d0:	e009      	b.n	80023e6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80023d2:	68bb      	ldr	r3, [r7, #8]
 80023d4:	1c5a      	adds	r2, r3, #1
 80023d6:	60ba      	str	r2, [r7, #8]
 80023d8:	781b      	ldrb	r3, [r3, #0]
 80023da:	4618      	mov	r0, r3
 80023dc:	f000 fc68 	bl	8002cb0 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	3301      	adds	r3, #1
 80023e4:	617b      	str	r3, [r7, #20]
 80023e6:	697a      	ldr	r2, [r7, #20]
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	dbf1      	blt.n	80023d2 <_write+0x12>
	}
	return len;
 80023ee:	687b      	ldr	r3, [r7, #4]
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}

080023f8 <_close>:

int _close(int file)
{
 80023f8:	b480      	push	{r7}
 80023fa:	b083      	sub	sp, #12
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
	return -1;
 8002400:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002404:	4618      	mov	r0, r3
 8002406:	370c      	adds	r7, #12
 8002408:	46bd      	mov	sp, r7
 800240a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800240e:	4770      	bx	lr

08002410 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002410:	b480      	push	{r7}
 8002412:	b083      	sub	sp, #12
 8002414:	af00      	add	r7, sp, #0
 8002416:	6078      	str	r0, [r7, #4]
 8002418:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002420:	605a      	str	r2, [r3, #4]
	return 0;
 8002422:	2300      	movs	r3, #0
}
 8002424:	4618      	mov	r0, r3
 8002426:	370c      	adds	r7, #12
 8002428:	46bd      	mov	sp, r7
 800242a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242e:	4770      	bx	lr

08002430 <_isatty>:

int _isatty(int file)
{
 8002430:	b480      	push	{r7}
 8002432:	b083      	sub	sp, #12
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
	return 1;
 8002438:	2301      	movs	r3, #1
}
 800243a:	4618      	mov	r0, r3
 800243c:	370c      	adds	r7, #12
 800243e:	46bd      	mov	sp, r7
 8002440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002444:	4770      	bx	lr

08002446 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002446:	b480      	push	{r7}
 8002448:	b085      	sub	sp, #20
 800244a:	af00      	add	r7, sp, #0
 800244c:	60f8      	str	r0, [r7, #12]
 800244e:	60b9      	str	r1, [r7, #8]
 8002450:	607a      	str	r2, [r7, #4]
	return 0;
 8002452:	2300      	movs	r3, #0
}
 8002454:	4618      	mov	r0, r3
 8002456:	3714      	adds	r7, #20
 8002458:	46bd      	mov	sp, r7
 800245a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245e:	4770      	bx	lr

08002460 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002460:	b580      	push	{r7, lr}
 8002462:	b086      	sub	sp, #24
 8002464:	af00      	add	r7, sp, #0
 8002466:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002468:	4a14      	ldr	r2, [pc, #80]	; (80024bc <_sbrk+0x5c>)
 800246a:	4b15      	ldr	r3, [pc, #84]	; (80024c0 <_sbrk+0x60>)
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002470:	697b      	ldr	r3, [r7, #20]
 8002472:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002474:	4b13      	ldr	r3, [pc, #76]	; (80024c4 <_sbrk+0x64>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d102      	bne.n	8002482 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800247c:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <_sbrk+0x64>)
 800247e:	4a12      	ldr	r2, [pc, #72]	; (80024c8 <_sbrk+0x68>)
 8002480:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002482:	4b10      	ldr	r3, [pc, #64]	; (80024c4 <_sbrk+0x64>)
 8002484:	681a      	ldr	r2, [r3, #0]
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4413      	add	r3, r2
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	429a      	cmp	r2, r3
 800248e:	d207      	bcs.n	80024a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002490:	f002 fab2 	bl	80049f8 <__errno>
 8002494:	4602      	mov	r2, r0
 8002496:	230c      	movs	r3, #12
 8002498:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800249a:	f04f 33ff 	mov.w	r3, #4294967295
 800249e:	e009      	b.n	80024b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80024a0:	4b08      	ldr	r3, [pc, #32]	; (80024c4 <_sbrk+0x64>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80024a6:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <_sbrk+0x64>)
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	4413      	add	r3, r2
 80024ae:	4a05      	ldr	r2, [pc, #20]	; (80024c4 <_sbrk+0x64>)
 80024b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80024b2:	68fb      	ldr	r3, [r7, #12]
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	3718      	adds	r7, #24
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd80      	pop	{r7, pc}
 80024bc:	20018000 	.word	0x20018000
 80024c0:	00000400 	.word	0x00000400
 80024c4:	20000660 	.word	0x20000660
 80024c8:	20000680 	.word	0x20000680

080024cc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80024cc:	b480      	push	{r7}
 80024ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d0:	4b17      	ldr	r3, [pc, #92]	; (8002530 <SystemInit+0x64>)
 80024d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d6:	4a16      	ldr	r2, [pc, #88]	; (8002530 <SystemInit+0x64>)
 80024d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024e0:	4b14      	ldr	r3, [pc, #80]	; (8002534 <SystemInit+0x68>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4a13      	ldr	r2, [pc, #76]	; (8002534 <SystemInit+0x68>)
 80024e6:	f043 0301 	orr.w	r3, r3, #1
 80024ea:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024ec:	4b11      	ldr	r3, [pc, #68]	; (8002534 <SystemInit+0x68>)
 80024ee:	2200      	movs	r2, #0
 80024f0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <SystemInit+0x68>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <SystemInit+0x68>)
 80024f8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024fc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8002500:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8002502:	4b0c      	ldr	r3, [pc, #48]	; (8002534 <SystemInit+0x68>)
 8002504:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8002508:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800250a:	4b0a      	ldr	r3, [pc, #40]	; (8002534 <SystemInit+0x68>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a09      	ldr	r2, [pc, #36]	; (8002534 <SystemInit+0x68>)
 8002510:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002514:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8002516:	4b07      	ldr	r3, [pc, #28]	; (8002534 <SystemInit+0x68>)
 8002518:	2200      	movs	r2, #0
 800251a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800251c:	4b04      	ldr	r3, [pc, #16]	; (8002530 <SystemInit+0x64>)
 800251e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002522:	609a      	str	r2, [r3, #8]
#endif
}
 8002524:	bf00      	nop
 8002526:	46bd      	mov	sp, r7
 8002528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252c:	4770      	bx	lr
 800252e:	bf00      	nop
 8002530:	e000ed00 	.word	0xe000ed00
 8002534:	40021000 	.word	0x40021000

08002538 <LL_AHB2_GRP1_EnableClock>:
{
 8002538:	b480      	push	{r7}
 800253a:	b085      	sub	sp, #20
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002540:	4b08      	ldr	r3, [pc, #32]	; (8002564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002542:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002544:	4907      	ldr	r1, [pc, #28]	; (8002564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	4313      	orrs	r3, r2
 800254a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800254c:	4b05      	ldr	r3, [pc, #20]	; (8002564 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800254e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4013      	ands	r3, r2
 8002554:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002556:	68fb      	ldr	r3, [r7, #12]
}
 8002558:	bf00      	nop
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002562:	4770      	bx	lr
 8002564:	40021000 	.word	0x40021000

08002568 <LL_APB1_GRP1_EnableClock>:
{
 8002568:	b480      	push	{r7}
 800256a:	b085      	sub	sp, #20
 800256c:	af00      	add	r7, sp, #0
 800256e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002570:	4b08      	ldr	r3, [pc, #32]	; (8002594 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002572:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002574:	4907      	ldr	r1, [pc, #28]	; (8002594 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	4313      	orrs	r3, r2
 800257a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800257c:	4b05      	ldr	r3, [pc, #20]	; (8002594 <LL_APB1_GRP1_EnableClock+0x2c>)
 800257e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	4013      	ands	r3, r2
 8002584:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002586:	68fb      	ldr	r3, [r7, #12]
}
 8002588:	bf00      	nop
 800258a:	3714      	adds	r7, #20
 800258c:	46bd      	mov	sp, r7
 800258e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002592:	4770      	bx	lr
 8002594:	40021000 	.word	0x40021000

08002598 <LL_APB2_GRP1_EnableClock>:
{
 8002598:	b480      	push	{r7}
 800259a:	b085      	sub	sp, #20
 800259c:	af00      	add	r7, sp, #0
 800259e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80025a2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025a4:	4907      	ldr	r1, [pc, #28]	; (80025c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	4313      	orrs	r3, r2
 80025aa:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 80025ac:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <LL_APB2_GRP1_EnableClock+0x2c>)
 80025ae:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4013      	ands	r3, r2
 80025b4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80025b6:	68fb      	ldr	r3, [r7, #12]
}
 80025b8:	bf00      	nop
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c2:	4770      	bx	lr
 80025c4:	40021000 	.word	0x40021000

080025c8 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 80025c8:	b480      	push	{r7}
 80025ca:	b083      	sub	sp, #12
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	601a      	str	r2, [r3, #0]
}
 80025dc:	bf00      	nop
 80025de:	370c      	adds	r7, #12
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80025e8:	b480      	push	{r7}
 80025ea:	b085      	sub	sp, #20
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	6078      	str	r0, [r7, #4]
 80025f0:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	d028      	beq.n	800264a <LL_TIM_OC_DisableFast+0x62>
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	2b04      	cmp	r3, #4
 80025fc:	d023      	beq.n	8002646 <LL_TIM_OC_DisableFast+0x5e>
 80025fe:	683b      	ldr	r3, [r7, #0]
 8002600:	2b10      	cmp	r3, #16
 8002602:	d01e      	beq.n	8002642 <LL_TIM_OC_DisableFast+0x5a>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	2b40      	cmp	r3, #64	; 0x40
 8002608:	d019      	beq.n	800263e <LL_TIM_OC_DisableFast+0x56>
 800260a:	683b      	ldr	r3, [r7, #0]
 800260c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002610:	d013      	beq.n	800263a <LL_TIM_OC_DisableFast+0x52>
 8002612:	683b      	ldr	r3, [r7, #0]
 8002614:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002618:	d00d      	beq.n	8002636 <LL_TIM_OC_DisableFast+0x4e>
 800261a:	683b      	ldr	r3, [r7, #0]
 800261c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002620:	d007      	beq.n	8002632 <LL_TIM_OC_DisableFast+0x4a>
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002628:	d101      	bne.n	800262e <LL_TIM_OC_DisableFast+0x46>
 800262a:	2307      	movs	r3, #7
 800262c:	e00e      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 800262e:	2308      	movs	r3, #8
 8002630:	e00c      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 8002632:	2306      	movs	r3, #6
 8002634:	e00a      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 8002636:	2305      	movs	r3, #5
 8002638:	e008      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 800263a:	2304      	movs	r3, #4
 800263c:	e006      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 800263e:	2303      	movs	r3, #3
 8002640:	e004      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 8002642:	2302      	movs	r3, #2
 8002644:	e002      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 8002646:	2301      	movs	r3, #1
 8002648:	e000      	b.n	800264c <LL_TIM_OC_DisableFast+0x64>
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	3318      	adds	r3, #24
 8002652:	4619      	mov	r1, r3
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	4a0b      	ldr	r2, [pc, #44]	; (8002684 <LL_TIM_OC_DisableFast+0x9c>)
 8002658:	5cd3      	ldrb	r3, [r2, r3]
 800265a:	440b      	add	r3, r1
 800265c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	681a      	ldr	r2, [r3, #0]
 8002662:	7bfb      	ldrb	r3, [r7, #15]
 8002664:	4908      	ldr	r1, [pc, #32]	; (8002688 <LL_TIM_OC_DisableFast+0xa0>)
 8002666:	5ccb      	ldrb	r3, [r1, r3]
 8002668:	4619      	mov	r1, r3
 800266a:	2304      	movs	r3, #4
 800266c:	408b      	lsls	r3, r1
 800266e:	43db      	mvns	r3, r3
 8002670:	401a      	ands	r2, r3
 8002672:	68bb      	ldr	r3, [r7, #8]
 8002674:	601a      	str	r2, [r3, #0]

}
 8002676:	bf00      	nop
 8002678:	3714      	adds	r7, #20
 800267a:	46bd      	mov	sp, r7
 800267c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002680:	4770      	bx	lr
 8002682:	bf00      	nop
 8002684:	0800685c 	.word	0x0800685c
 8002688:	08006868 	.word	0x08006868

0800268c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d028      	beq.n	80026ee <LL_TIM_OC_EnablePreload+0x62>
 800269c:	683b      	ldr	r3, [r7, #0]
 800269e:	2b04      	cmp	r3, #4
 80026a0:	d023      	beq.n	80026ea <LL_TIM_OC_EnablePreload+0x5e>
 80026a2:	683b      	ldr	r3, [r7, #0]
 80026a4:	2b10      	cmp	r3, #16
 80026a6:	d01e      	beq.n	80026e6 <LL_TIM_OC_EnablePreload+0x5a>
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	2b40      	cmp	r3, #64	; 0x40
 80026ac:	d019      	beq.n	80026e2 <LL_TIM_OC_EnablePreload+0x56>
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80026b4:	d013      	beq.n	80026de <LL_TIM_OC_EnablePreload+0x52>
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80026bc:	d00d      	beq.n	80026da <LL_TIM_OC_EnablePreload+0x4e>
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026c4:	d007      	beq.n	80026d6 <LL_TIM_OC_EnablePreload+0x4a>
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026cc:	d101      	bne.n	80026d2 <LL_TIM_OC_EnablePreload+0x46>
 80026ce:	2307      	movs	r3, #7
 80026d0:	e00e      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026d2:	2308      	movs	r3, #8
 80026d4:	e00c      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026d6:	2306      	movs	r3, #6
 80026d8:	e00a      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026da:	2305      	movs	r3, #5
 80026dc:	e008      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026de:	2304      	movs	r3, #4
 80026e0:	e006      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026e2:	2303      	movs	r3, #3
 80026e4:	e004      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026e6:	2302      	movs	r3, #2
 80026e8:	e002      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026ea:	2301      	movs	r3, #1
 80026ec:	e000      	b.n	80026f0 <LL_TIM_OC_EnablePreload+0x64>
 80026ee:	2300      	movs	r3, #0
 80026f0:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	3318      	adds	r3, #24
 80026f6:	4619      	mov	r1, r3
 80026f8:	7bfb      	ldrb	r3, [r7, #15]
 80026fa:	4a0a      	ldr	r2, [pc, #40]	; (8002724 <LL_TIM_OC_EnablePreload+0x98>)
 80026fc:	5cd3      	ldrb	r3, [r2, r3]
 80026fe:	440b      	add	r3, r1
 8002700:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8002702:	68bb      	ldr	r3, [r7, #8]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	7bfb      	ldrb	r3, [r7, #15]
 8002708:	4907      	ldr	r1, [pc, #28]	; (8002728 <LL_TIM_OC_EnablePreload+0x9c>)
 800270a:	5ccb      	ldrb	r3, [r1, r3]
 800270c:	4619      	mov	r1, r3
 800270e:	2308      	movs	r3, #8
 8002710:	408b      	lsls	r3, r1
 8002712:	431a      	orrs	r2, r3
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	601a      	str	r2, [r3, #0]
}
 8002718:	bf00      	nop
 800271a:	3714      	adds	r7, #20
 800271c:	46bd      	mov	sp, r7
 800271e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002722:	4770      	bx	lr
 8002724:	0800685c 	.word	0x0800685c
 8002728:	08006868 	.word	0x08006868

0800272c <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	609a      	str	r2, [r3, #8]
}
 8002740:	bf00      	nop
 8002742:	370c      	adds	r7, #12
 8002744:	46bd      	mov	sp, r7
 8002746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800274a:	4770      	bx	lr

0800274c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	689b      	ldr	r3, [r3, #8]
 800275a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800275e:	f023 0307 	bic.w	r3, r3, #7
 8002762:	683a      	ldr	r2, [r7, #0]
 8002764:	431a      	orrs	r2, r3
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	609a      	str	r2, [r3, #8]
}
 800276a:	bf00      	nop
 800276c:	370c      	adds	r7, #12
 800276e:	46bd      	mov	sp, r7
 8002770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002774:	4770      	bx	lr

08002776 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002776:	b480      	push	{r7}
 8002778:	b083      	sub	sp, #12
 800277a:	af00      	add	r7, sp, #0
 800277c:	6078      	str	r0, [r7, #4]
 800277e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	431a      	orrs	r2, r3
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	605a      	str	r2, [r3, #4]
}
 8002790:	bf00      	nop
 8002792:	370c      	adds	r7, #12
 8002794:	46bd      	mov	sp, r7
 8002796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279a:	4770      	bx	lr

0800279c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800279c:	b480      	push	{r7}
 800279e:	b083      	sub	sp, #12
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
 80027a4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	605a      	str	r2, [r3, #4]
}
 80027b6:	bf00      	nop
 80027b8:	370c      	adds	r7, #12
 80027ba:	46bd      	mov	sp, r7
 80027bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027c0:	4770      	bx	lr

080027c2 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 80027c2:	b480      	push	{r7}
 80027c4:	b083      	sub	sp, #12
 80027c6:	af00      	add	r7, sp, #0
 80027c8:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	609a      	str	r2, [r3, #8]
}
 80027d6:	bf00      	nop
 80027d8:	370c      	adds	r7, #12
 80027da:	46bd      	mov	sp, r7
 80027dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e0:	4770      	bx	lr

080027e2 <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 80027e2:	b480      	push	{r7}
 80027e4:	b085      	sub	sp, #20
 80027e6:	af00      	add	r7, sp, #0
 80027e8:	60f8      	str	r0, [r7, #12]
 80027ea:	60b9      	str	r1, [r7, #8]
 80027ec:	607a      	str	r2, [r7, #4]
 80027ee:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	689b      	ldr	r3, [r3, #8]
 80027f4:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 80027f8:	68b9      	ldr	r1, [r7, #8]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4319      	orrs	r1, r3
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	430b      	orrs	r3, r1
 8002802:	431a      	orrs	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
}
 8002808:	bf00      	nop
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 8002814:	b480      	push	{r7}
 8002816:	b083      	sub	sp, #12
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]
 800281c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 0208 	bic.w	r2, r3, #8
 8002826:	683b      	ldr	r3, [r7, #0]
 8002828:	431a      	orrs	r2, r3
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	609a      	str	r2, [r3, #8]
}
 800282e:	bf00      	nop
 8002830:	370c      	adds	r7, #12
 8002832:	46bd      	mov	sp, r7
 8002834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002838:	4770      	bx	lr
	...

0800283c <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800283c:	b580      	push	{r7, lr}
 800283e:	b086      	sub	sp, #24
 8002840:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002842:	1d3b      	adds	r3, r7, #4
 8002844:	2200      	movs	r2, #0
 8002846:	601a      	str	r2, [r3, #0]
 8002848:	605a      	str	r2, [r3, #4]
 800284a:	609a      	str	r2, [r3, #8]
 800284c:	60da      	str	r2, [r3, #12]
 800284e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002850:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002854:	f7ff fea0 	bl	8002598 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8002858:	230f      	movs	r3, #15
 800285a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800285c:	2300      	movs	r3, #0
 800285e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 8002860:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002864:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002866:	2300      	movs	r3, #0
 8002868:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800286a:	2300      	movs	r3, #0
 800286c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800286e:	1d3b      	adds	r3, r7, #4
 8002870:	4619      	mov	r1, r3
 8002872:	480c      	ldr	r0, [pc, #48]	; (80028a4 <MX_TIM1_Init+0x68>)
 8002874:	f001 fbd8 	bl	8004028 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002878:	480a      	ldr	r0, [pc, #40]	; (80028a4 <MX_TIM1_Init+0x68>)
 800287a:	f7ff fea5 	bl	80025c8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800287e:	2100      	movs	r1, #0
 8002880:	4808      	ldr	r0, [pc, #32]	; (80028a4 <MX_TIM1_Init+0x68>)
 8002882:	f7ff ff63 	bl	800274c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002886:	2100      	movs	r1, #0
 8002888:	4806      	ldr	r0, [pc, #24]	; (80028a4 <MX_TIM1_Init+0x68>)
 800288a:	f7ff ff74 	bl	8002776 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800288e:	2100      	movs	r1, #0
 8002890:	4804      	ldr	r0, [pc, #16]	; (80028a4 <MX_TIM1_Init+0x68>)
 8002892:	f7ff ff83 	bl	800279c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002896:	4803      	ldr	r0, [pc, #12]	; (80028a4 <MX_TIM1_Init+0x68>)
 8002898:	f7ff ff93 	bl	80027c2 <LL_TIM_DisableMasterSlaveMode>

}
 800289c:	bf00      	nop
 800289e:	3718      	adds	r7, #24
 80028a0:	46bd      	mov	sp, r7
 80028a2:	bd80      	pop	{r7, pc}
 80028a4:	40012c00 	.word	0x40012c00

080028a8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80028a8:	b580      	push	{r7, lr}
 80028aa:	b094      	sub	sp, #80	; 0x50
 80028ac:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 80028ae:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b2:	2200      	movs	r2, #0
 80028b4:	601a      	str	r2, [r3, #0]
 80028b6:	605a      	str	r2, [r3, #4]
 80028b8:	609a      	str	r2, [r3, #8]
 80028ba:	60da      	str	r2, [r3, #12]
 80028bc:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 80028be:	f107 031c 	add.w	r3, r7, #28
 80028c2:	2220      	movs	r2, #32
 80028c4:	2100      	movs	r1, #0
 80028c6:	4618      	mov	r0, r3
 80028c8:	f002 f8c0 	bl	8004a4c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028cc:	1d3b      	adds	r3, r7, #4
 80028ce:	2200      	movs	r2, #0
 80028d0:	601a      	str	r2, [r3, #0]
 80028d2:	605a      	str	r2, [r3, #4]
 80028d4:	609a      	str	r2, [r3, #8]
 80028d6:	60da      	str	r2, [r3, #12]
 80028d8:	611a      	str	r2, [r3, #16]
 80028da:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 80028dc:	2002      	movs	r0, #2
 80028de:	f7ff fe43 	bl	8002568 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 80028e2:	233f      	movs	r3, #63	; 0x3f
 80028e4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80028e6:	2300      	movs	r3, #0
 80028e8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 19999;
 80028ea:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80028ee:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80028f0:	2300      	movs	r3, #0
 80028f2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80028f4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028f8:	4619      	mov	r1, r3
 80028fa:	4847      	ldr	r0, [pc, #284]	; (8002a18 <MX_TIM3_Init+0x170>)
 80028fc:	f001 fb94 	bl	8004028 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 8002900:	4845      	ldr	r0, [pc, #276]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002902:	f7ff fe61 	bl	80025c8 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 8002906:	2100      	movs	r1, #0
 8002908:	4843      	ldr	r0, [pc, #268]	; (8002a18 <MX_TIM3_Init+0x170>)
 800290a:	f7ff ff1f 	bl	800274c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 800290e:	2101      	movs	r1, #1
 8002910:	4841      	ldr	r0, [pc, #260]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002912:	f7ff febb 	bl	800268c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 8002916:	2360      	movs	r3, #96	; 0x60
 8002918:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800291a:	2300      	movs	r3, #0
 800291c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800291e:	2300      	movs	r3, #0
 8002920:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 1499;
 8002922:	f240 53db 	movw	r3, #1499	; 0x5db
 8002926:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 8002928:	2300      	movs	r3, #0
 800292a:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 800292c:	f107 031c 	add.w	r3, r7, #28
 8002930:	461a      	mov	r2, r3
 8002932:	2101      	movs	r1, #1
 8002934:	4838      	ldr	r0, [pc, #224]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002936:	f001 fc0b 	bl	8004150 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 800293a:	2101      	movs	r1, #1
 800293c:	4836      	ldr	r0, [pc, #216]	; (8002a18 <MX_TIM3_Init+0x170>)
 800293e:	f7ff fe53 	bl	80025e8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8002942:	2110      	movs	r1, #16
 8002944:	4834      	ldr	r0, [pc, #208]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002946:	f7ff fea1 	bl	800268c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800294a:	2300      	movs	r3, #0
 800294c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800294e:	2300      	movs	r3, #0
 8002950:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002952:	f107 031c 	add.w	r3, r7, #28
 8002956:	461a      	mov	r2, r3
 8002958:	2110      	movs	r1, #16
 800295a:	482f      	ldr	r0, [pc, #188]	; (8002a18 <MX_TIM3_Init+0x170>)
 800295c:	f001 fbf8 	bl	8004150 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002960:	2110      	movs	r1, #16
 8002962:	482d      	ldr	r0, [pc, #180]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002964:	f7ff fe40 	bl	80025e8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002968:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800296c:	482a      	ldr	r0, [pc, #168]	; (8002a18 <MX_TIM3_Init+0x170>)
 800296e:	f7ff fe8d 	bl	800268c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002972:	2300      	movs	r3, #0
 8002974:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002976:	2300      	movs	r3, #0
 8002978:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800297a:	f107 031c 	add.w	r3, r7, #28
 800297e:	461a      	mov	r2, r3
 8002980:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002984:	4824      	ldr	r0, [pc, #144]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002986:	f001 fbe3 	bl	8004150 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800298a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800298e:	4822      	ldr	r0, [pc, #136]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002990:	f7ff fe2a 	bl	80025e8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8002994:	2100      	movs	r1, #0
 8002996:	4820      	ldr	r0, [pc, #128]	; (8002a18 <MX_TIM3_Init+0x170>)
 8002998:	f7ff ff3c 	bl	8002814 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 800299c:	481e      	ldr	r0, [pc, #120]	; (8002a18 <MX_TIM3_Init+0x170>)
 800299e:	f7ff fec5 	bl	800272c <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 80029a2:	2300      	movs	r3, #0
 80029a4:	2200      	movs	r2, #0
 80029a6:	2100      	movs	r1, #0
 80029a8:	481b      	ldr	r0, [pc, #108]	; (8002a18 <MX_TIM3_Init+0x170>)
 80029aa:	f7ff ff1a 	bl	80027e2 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 80029ae:	2100      	movs	r1, #0
 80029b0:	4819      	ldr	r0, [pc, #100]	; (8002a18 <MX_TIM3_Init+0x170>)
 80029b2:	f7ff fee0 	bl	8002776 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 80029b6:	4818      	ldr	r0, [pc, #96]	; (8002a18 <MX_TIM3_Init+0x170>)
 80029b8:	f7ff ff03 	bl	80027c2 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80029bc:	2001      	movs	r0, #1
 80029be:	f7ff fdbb 	bl	8002538 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80029c2:	2002      	movs	r0, #2
 80029c4:	f7ff fdb8 	bl	8002538 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 80029c8:	23c0      	movs	r3, #192	; 0xc0
 80029ca:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029cc:	2302      	movs	r3, #2
 80029ce:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029d8:	2300      	movs	r3, #0
 80029da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80029dc:	2302      	movs	r3, #2
 80029de:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	1d3b      	adds	r3, r7, #4
 80029e2:	4619      	mov	r1, r3
 80029e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029e8:	f000 fdf1 	bl	80035ce <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80029ec:	2302      	movs	r3, #2
 80029ee:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029f0:	2302      	movs	r3, #2
 80029f2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029f8:	2300      	movs	r3, #0
 80029fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029fc:	2300      	movs	r3, #0
 80029fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 8002a00:	2302      	movs	r3, #2
 8002a02:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a04:	1d3b      	adds	r3, r7, #4
 8002a06:	4619      	mov	r1, r3
 8002a08:	4804      	ldr	r0, [pc, #16]	; (8002a1c <MX_TIM3_Init+0x174>)
 8002a0a:	f000 fde0 	bl	80035ce <LL_GPIO_Init>

}
 8002a0e:	bf00      	nop
 8002a10:	3750      	adds	r7, #80	; 0x50
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40000400 	.word	0x40000400
 8002a1c:	48000400 	.word	0x48000400

08002a20 <__NVIC_GetPriorityGrouping>:
{
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a24:	4b04      	ldr	r3, [pc, #16]	; (8002a38 <__NVIC_GetPriorityGrouping+0x18>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	0a1b      	lsrs	r3, r3, #8
 8002a2a:	f003 0307 	and.w	r3, r3, #7
}
 8002a2e:	4618      	mov	r0, r3
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr
 8002a38:	e000ed00 	.word	0xe000ed00

08002a3c <__NVIC_EnableIRQ>:
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b083      	sub	sp, #12
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	4603      	mov	r3, r0
 8002a44:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	db0b      	blt.n	8002a66 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a4e:	79fb      	ldrb	r3, [r7, #7]
 8002a50:	f003 021f 	and.w	r2, r3, #31
 8002a54:	4907      	ldr	r1, [pc, #28]	; (8002a74 <__NVIC_EnableIRQ+0x38>)
 8002a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5a:	095b      	lsrs	r3, r3, #5
 8002a5c:	2001      	movs	r0, #1
 8002a5e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a66:	bf00      	nop
 8002a68:	370c      	adds	r7, #12
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a70:	4770      	bx	lr
 8002a72:	bf00      	nop
 8002a74:	e000e100 	.word	0xe000e100

08002a78 <__NVIC_SetPriority>:
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	6039      	str	r1, [r7, #0]
 8002a82:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	db0a      	blt.n	8002aa2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	b2da      	uxtb	r2, r3
 8002a90:	490c      	ldr	r1, [pc, #48]	; (8002ac4 <__NVIC_SetPriority+0x4c>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	0112      	lsls	r2, r2, #4
 8002a98:	b2d2      	uxtb	r2, r2
 8002a9a:	440b      	add	r3, r1
 8002a9c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002aa0:	e00a      	b.n	8002ab8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002aa2:	683b      	ldr	r3, [r7, #0]
 8002aa4:	b2da      	uxtb	r2, r3
 8002aa6:	4908      	ldr	r1, [pc, #32]	; (8002ac8 <__NVIC_SetPriority+0x50>)
 8002aa8:	79fb      	ldrb	r3, [r7, #7]
 8002aaa:	f003 030f 	and.w	r3, r3, #15
 8002aae:	3b04      	subs	r3, #4
 8002ab0:	0112      	lsls	r2, r2, #4
 8002ab2:	b2d2      	uxtb	r2, r2
 8002ab4:	440b      	add	r3, r1
 8002ab6:	761a      	strb	r2, [r3, #24]
}
 8002ab8:	bf00      	nop
 8002aba:	370c      	adds	r7, #12
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000e100 	.word	0xe000e100
 8002ac8:	e000ed00 	.word	0xe000ed00

08002acc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b089      	sub	sp, #36	; 0x24
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	f003 0307 	and.w	r3, r3, #7
 8002ade:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f1c3 0307 	rsb	r3, r3, #7
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	bf28      	it	cs
 8002aea:	2304      	movcs	r3, #4
 8002aec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	3304      	adds	r3, #4
 8002af2:	2b06      	cmp	r3, #6
 8002af4:	d902      	bls.n	8002afc <NVIC_EncodePriority+0x30>
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	3b03      	subs	r3, #3
 8002afa:	e000      	b.n	8002afe <NVIC_EncodePriority+0x32>
 8002afc:	2300      	movs	r3, #0
 8002afe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b00:	f04f 32ff 	mov.w	r2, #4294967295
 8002b04:	69bb      	ldr	r3, [r7, #24]
 8002b06:	fa02 f303 	lsl.w	r3, r2, r3
 8002b0a:	43da      	mvns	r2, r3
 8002b0c:	68bb      	ldr	r3, [r7, #8]
 8002b0e:	401a      	ands	r2, r3
 8002b10:	697b      	ldr	r3, [r7, #20]
 8002b12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b14:	f04f 31ff 	mov.w	r1, #4294967295
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b1e:	43d9      	mvns	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b24:	4313      	orrs	r3, r2
         );
}
 8002b26:	4618      	mov	r0, r3
 8002b28:	3724      	adds	r7, #36	; 0x24
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b30:	4770      	bx	lr
	...

08002b34 <LL_AHB1_GRP1_EnableClock>:
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002b3c:	4b08      	ldr	r3, [pc, #32]	; (8002b60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b3e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b40:	4907      	ldr	r1, [pc, #28]	; (8002b60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b48:	4b05      	ldr	r3, [pc, #20]	; (8002b60 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b4a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	4013      	ands	r3, r2
 8002b50:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b52:	68fb      	ldr	r3, [r7, #12]
}
 8002b54:	bf00      	nop
 8002b56:	3714      	adds	r7, #20
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	40021000 	.word	0x40021000

08002b64 <LL_AHB2_GRP1_EnableClock>:
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b6c:	4b08      	ldr	r3, [pc, #32]	; (8002b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b6e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b70:	4907      	ldr	r1, [pc, #28]	; (8002b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	4313      	orrs	r3, r2
 8002b76:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b78:	4b05      	ldr	r3, [pc, #20]	; (8002b90 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	4013      	ands	r3, r2
 8002b80:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b82:	68fb      	ldr	r3, [r7, #12]
}
 8002b84:	bf00      	nop
 8002b86:	3714      	adds	r7, #20
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8e:	4770      	bx	lr
 8002b90:	40021000 	.word	0x40021000

08002b94 <LL_APB1_GRP1_EnableClock>:
{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b9e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002ba0:	4907      	ldr	r1, [pc, #28]	; (8002bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002ba8:	4b05      	ldr	r3, [pc, #20]	; (8002bc0 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002baa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	4013      	ands	r3, r2
 8002bb0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002bb2:	68fb      	ldr	r3, [r7, #12]
}
 8002bb4:	bf00      	nop
 8002bb6:	3714      	adds	r7, #20
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbe:	4770      	bx	lr
 8002bc0:	40021000 	.word	0x40021000

08002bc4 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b083      	sub	sp, #12
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f043 0201 	orr.w	r2, r3, #1
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	601a      	str	r2, [r3, #0]
}
 8002bd8:	bf00      	nop
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be2:	4770      	bx	lr

08002be4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002be4:	b480      	push	{r7}
 8002be6:	b083      	sub	sp, #12
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	609a      	str	r2, [r3, #8]
}
 8002c04:	bf00      	nop
 8002c06:	370c      	adds	r7, #12
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c0e:	4770      	bx	lr

08002c10 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b08e      	sub	sp, #56	; 0x38
 8002c14:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002c16:	f107 031c 	add.w	r3, r7, #28
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	601a      	str	r2, [r3, #0]
 8002c1e:	605a      	str	r2, [r3, #4]
 8002c20:	609a      	str	r2, [r3, #8]
 8002c22:	60da      	str	r2, [r3, #12]
 8002c24:	611a      	str	r2, [r3, #16]
 8002c26:	615a      	str	r2, [r3, #20]
 8002c28:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c2a:	1d3b      	adds	r3, r7, #4
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	601a      	str	r2, [r3, #0]
 8002c30:	605a      	str	r2, [r3, #4]
 8002c32:	609a      	str	r2, [r3, #8]
 8002c34:	60da      	str	r2, [r3, #12]
 8002c36:	611a      	str	r2, [r3, #16]
 8002c38:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002c3a:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002c3e:	f7ff ffa9 	bl	8002b94 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002c42:	2001      	movs	r0, #1
 8002c44:	f7ff ff8e 	bl	8002b64 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c48:	230c      	movs	r3, #12
 8002c4a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c4c:	2302      	movs	r3, #2
 8002c4e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c50:	2303      	movs	r3, #3
 8002c52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c54:	2300      	movs	r3, #0
 8002c56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c58:	2300      	movs	r3, #0
 8002c5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c5c:	2307      	movs	r3, #7
 8002c5e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c60:	1d3b      	adds	r3, r7, #4
 8002c62:	4619      	mov	r1, r3
 8002c64:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c68:	f000 fcb1 	bl	80035ce <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 8002c6c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8002c70:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c72:	2300      	movs	r3, #0
 8002c74:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c76:	2300      	movs	r3, #0
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c7e:	230c      	movs	r3, #12
 8002c80:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c82:	2300      	movs	r3, #0
 8002c84:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8002c86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c8a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002c8c:	f107 031c 	add.w	r3, r7, #28
 8002c90:	4619      	mov	r1, r3
 8002c92:	4806      	ldr	r0, [pc, #24]	; (8002cac <MX_USART2_UART_Init+0x9c>)
 8002c94:	f001 fdd6 	bl	8004844 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002c98:	4804      	ldr	r0, [pc, #16]	; (8002cac <MX_USART2_UART_Init+0x9c>)
 8002c9a:	f7ff ffa3 	bl	8002be4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002c9e:	4803      	ldr	r0, [pc, #12]	; (8002cac <MX_USART2_UART_Init+0x9c>)
 8002ca0:	f7ff ff90 	bl	8002bc4 <LL_USART_Enable>

}
 8002ca4:	bf00      	nop
 8002ca6:	3738      	adds	r7, #56	; 0x38
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	bd80      	pop	{r7, pc}
 8002cac:	40004400 	.word	0x40004400

08002cb0 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8002cb8:	bf00      	nop
 8002cba:	4b0b      	ldr	r3, [pc, #44]	; (8002ce8 <__io_putchar+0x38>)
 8002cbc:	69db      	ldr	r3, [r3, #28]
 8002cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d0f9      	beq.n	8002cba <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8002cc6:	4b08      	ldr	r3, [pc, #32]	; (8002ce8 <__io_putchar+0x38>)
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	b292      	uxth	r2, r2
 8002ccc:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 8002cce:	bf00      	nop
 8002cd0:	4b05      	ldr	r3, [pc, #20]	; (8002ce8 <__io_putchar+0x38>)
 8002cd2:	69db      	ldr	r3, [r3, #28]
 8002cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d0f9      	beq.n	8002cd0 <__io_putchar+0x20>
#endif
}
 8002cdc:	bf00      	nop
 8002cde:	370c      	adds	r7, #12
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce6:	4770      	bx	lr
 8002ce8:	40004400 	.word	0x40004400

08002cec <__io_getchar>:

void __io_getchar(void){
 8002cec:	b480      	push	{r7}
 8002cee:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8002cf0:	bf00      	nop
 8002cf2:	46bd      	mov	sp, r7
 8002cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cf8:	4770      	bx	lr
	...

08002cfc <startupPrint>:

void startupPrint(void){
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	af00      	add	r7, sp, #0
	printf("\r\n");
 8002d00:	480b      	ldr	r0, [pc, #44]	; (8002d30 <startupPrint+0x34>)
 8002d02:	f001 ff1f 	bl	8004b44 <puts>
	printf("+==============================================================+\r\n");
 8002d06:	480b      	ldr	r0, [pc, #44]	; (8002d34 <startupPrint+0x38>)
 8002d08:	f001 ff1c 	bl	8004b44 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8002d0c:	490a      	ldr	r1, [pc, #40]	; (8002d38 <startupPrint+0x3c>)
 8002d0e:	480b      	ldr	r0, [pc, #44]	; (8002d3c <startupPrint+0x40>)
 8002d10:	f001 fea4 	bl	8004a5c <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8002d14:	480a      	ldr	r0, [pc, #40]	; (8002d40 <startupPrint+0x44>)
 8002d16:	f001 ff15 	bl	8004b44 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8002d1a:	4b0a      	ldr	r3, [pc, #40]	; (8002d44 <startupPrint+0x48>)
 8002d1c:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <startupPrint+0x4c>)
 8002d1e:	490b      	ldr	r1, [pc, #44]	; (8002d4c <startupPrint+0x50>)
 8002d20:	480b      	ldr	r0, [pc, #44]	; (8002d50 <startupPrint+0x54>)
 8002d22:	f001 fe9b 	bl	8004a5c <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8002d26:	480b      	ldr	r0, [pc, #44]	; (8002d54 <startupPrint+0x58>)
 8002d28:	f001 ff0c 	bl	8004b44 <puts>
}
 8002d2c:	bf00      	nop
 8002d2e:	bd80      	pop	{r7, pc}
 8002d30:	08005b7c 	.word	0x08005b7c
 8002d34:	08005b80 	.word	0x08005b80
 8002d38:	08005bc4 	.word	0x08005bc4
 8002d3c:	08005bec 	.word	0x08005bec
 8002d40:	08005bf8 	.word	0x08005bf8
 8002d44:	08005c3c 	.word	0x08005c3c
 8002d48:	08005c40 	.word	0x08005c40
 8002d4c:	08005c4c 	.word	0x08005c4c
 8002d50:	08005c60 	.word	0x08005c60
 8002d54:	08005c8c 	.word	0x08005c8c

08002d58 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
 8002d60:	460b      	mov	r3, r1
 8002d62:	70fb      	strb	r3, [r7, #3]
 8002d64:	4613      	mov	r3, r2
 8002d66:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8002d6c:	2300      	movs	r3, #0
 8002d6e:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	029b      	lsls	r3, r3, #10
 8002d74:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 8002d76:	78fb      	ldrb	r3, [r7, #3]
 8002d78:	021b      	lsls	r3, r3, #8
 8002d7a:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	4a1d      	ldr	r2, [pc, #116]	; (8002df4 <configureDMA_USART_TX+0x9c>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	d132      	bne.n	8002dea <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002d84:	2001      	movs	r0, #1
 8002d86:	f7ff fed5 	bl	8002b34 <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	689b      	ldr	r3, [r3, #8]
 8002d8e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8002d96:	4b18      	ldr	r3, [pc, #96]	; (8002df8 <configureDMA_USART_TX+0xa0>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	4a17      	ldr	r2, [pc, #92]	; (8002df8 <configureDMA_USART_TX+0xa0>)
 8002d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002da0:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8002da2:	4b16      	ldr	r3, [pc, #88]	; (8002dfc <configureDMA_USART_TX+0xa4>)
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	4a15      	ldr	r2, [pc, #84]	; (8002dfc <configureDMA_USART_TX+0xa4>)
 8002da8:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002dac:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 8002dae:	4b14      	ldr	r3, [pc, #80]	; (8002e00 <configureDMA_USART_TX+0xa8>)
 8002db0:	4a14      	ldr	r2, [pc, #80]	; (8002e04 <configureDMA_USART_TX+0xac>)
 8002db2:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8002db4:	78ba      	ldrb	r2, [r7, #2]
 8002db6:	697b      	ldr	r3, [r7, #20]
 8002db8:	431a      	orrs	r2, r3
 8002dba:	693b      	ldr	r3, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8002dc2:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8002dc4:	4a0e      	ldr	r2, [pc, #56]	; (8002e00 <configureDMA_USART_TX+0xa8>)
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002dca:	f7ff fe29 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002dce:	4603      	mov	r3, r0
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	2100      	movs	r1, #0
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7ff fe79 	bl	8002acc <NVIC_EncodePriority>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	4619      	mov	r1, r3
 8002dde:	2011      	movs	r0, #17
 8002de0:	f7ff fe4a 	bl	8002a78 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002de4:	2011      	movs	r0, #17
 8002de6:	f7ff fe29 	bl	8002a3c <__NVIC_EnableIRQ>
	}
}
 8002dea:	bf00      	nop
 8002dec:	3718      	adds	r7, #24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}
 8002df2:	bf00      	nop
 8002df4:	40004400 	.word	0x40004400
 8002df8:	400200a8 	.word	0x400200a8
 8002dfc:	40020000 	.word	0x40020000
 8002e00:	40020080 	.word	0x40020080
 8002e04:	40004428 	.word	0x40004428

08002e08 <configure_IRQ_USART_RX>:

void configure_IRQ_USART_RX(){
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	af00      	add	r7, sp, #0
	// Set RXNEIE to enable the RX interrupt
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <configure_IRQ_USART_RX+0x34>)
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4a0a      	ldr	r2, [pc, #40]	; (8002e3c <configure_IRQ_USART_RX+0x34>)
 8002e12:	f043 0320 	orr.w	r3, r3, #32
 8002e16:	6013      	str	r3, [r2, #0]

	// Enable global interrupt for UART2
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002e18:	f7ff fe02 	bl	8002a20 <__NVIC_GetPriorityGrouping>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2200      	movs	r2, #0
 8002e20:	2101      	movs	r1, #1
 8002e22:	4618      	mov	r0, r3
 8002e24:	f7ff fe52 	bl	8002acc <NVIC_EncodePriority>
 8002e28:	4603      	mov	r3, r0
 8002e2a:	4619      	mov	r1, r3
 8002e2c:	2026      	movs	r0, #38	; 0x26
 8002e2e:	f7ff fe23 	bl	8002a78 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002e32:	2026      	movs	r0, #38	; 0x26
 8002e34:	f7ff fe02 	bl	8002a3c <__NVIC_EnableIRQ>
}
 8002e38:	bf00      	nop
 8002e3a:	bd80      	pop	{r7, pc}
 8002e3c:	40004400 	.word	0x40004400

08002e40 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8002e40:	b480      	push	{r7}
 8002e42:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d006      	beq.n	8002e5e <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	4a13      	ldr	r2, [pc, #76]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e56:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e5a:	6053      	str	r3, [r2, #4]
		while(1);
 8002e5c:	e7fe      	b.n	8002e5c <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8002e5e:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d00b      	beq.n	8002e82 <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e70:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e74:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 8002e76:	4b0c      	ldr	r3, [pc, #48]	; (8002ea8 <DMA1_Channel7_IRQHandler+0x68>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a0b      	ldr	r2, [pc, #44]	; (8002ea8 <DMA1_Channel7_IRQHandler+0x68>)
 8002e7c:	f023 0301 	bic.w	r3, r3, #1
 8002e80:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 8002e82:	4b08      	ldr	r3, [pc, #32]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d005      	beq.n	8002e9a <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 8002e8e:	4b05      	ldr	r3, [pc, #20]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	4a04      	ldr	r2, [pc, #16]	; (8002ea4 <DMA1_Channel7_IRQHandler+0x64>)
 8002e94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e98:	6053      	str	r3, [r2, #4]
	}
}
 8002e9a:	bf00      	nop
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40020000 	.word	0x40020000
 8002ea8:	40020080 	.word	0x40020080

08002eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002eb0:	f7ff fb0c 	bl	80024cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002eb4:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002eb6:	e003      	b.n	8002ec0 <LoopCopyDataInit>

08002eb8 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002eb8:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002eba:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002ebc:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002ebe:	3104      	adds	r1, #4

08002ec0 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002ec0:	480a      	ldr	r0, [pc, #40]	; (8002eec <LoopForever+0xa>)
	ldr	r3, =_edata
 8002ec2:	4b0b      	ldr	r3, [pc, #44]	; (8002ef0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002ec4:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002ec6:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002ec8:	d3f6      	bcc.n	8002eb8 <CopyDataInit>
	ldr	r2, =_sbss
 8002eca:	4a0a      	ldr	r2, [pc, #40]	; (8002ef4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002ecc:	e002      	b.n	8002ed4 <LoopFillZerobss>

08002ece <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002ece:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002ed0:	f842 3b04 	str.w	r3, [r2], #4

08002ed4 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002ed4:	4b08      	ldr	r3, [pc, #32]	; (8002ef8 <LoopForever+0x16>)
	cmp	r2, r3
 8002ed6:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002ed8:	d3f9      	bcc.n	8002ece <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002eda:	f001 fd93 	bl	8004a04 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002ede:	f7fe fe19 	bl	8001b14 <main>

08002ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ee2:	e7fe      	b.n	8002ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ee4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002ee8:	0800691c 	.word	0x0800691c
	ldr	r0, =_sdata
 8002eec:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002ef0:	200005c4 	.word	0x200005c4
	ldr	r2, =_sbss
 8002ef4:	200005c8 	.word	0x200005c8
	ldr	r3, = _ebss
 8002ef8:	20000680 	.word	0x20000680

08002efc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002efc:	e7fe      	b.n	8002efc <ADC1_2_IRQHandler>
	...

08002f00 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002f00:	b480      	push	{r7}
 8002f02:	b083      	sub	sp, #12
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002f08:	4b05      	ldr	r3, [pc, #20]	; (8002f20 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f0a:	681a      	ldr	r2, [r3, #0]
 8002f0c:	4904      	ldr	r1, [pc, #16]	; (8002f20 <LL_EXTI_EnableIT_0_31+0x20>)
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	600b      	str	r3, [r1, #0]
}
 8002f14:	bf00      	nop
 8002f16:	370c      	adds	r7, #12
 8002f18:	46bd      	mov	sp, r7
 8002f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1e:	4770      	bx	lr
 8002f20:	40010400 	.word	0x40010400

08002f24 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b083      	sub	sp, #12
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002f2c:	4b05      	ldr	r3, [pc, #20]	; (8002f44 <LL_EXTI_EnableIT_32_63+0x20>)
 8002f2e:	6a1a      	ldr	r2, [r3, #32]
 8002f30:	4904      	ldr	r1, [pc, #16]	; (8002f44 <LL_EXTI_EnableIT_32_63+0x20>)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	620b      	str	r3, [r1, #32]
}
 8002f38:	bf00      	nop
 8002f3a:	370c      	adds	r7, #12
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f42:	4770      	bx	lr
 8002f44:	40010400 	.word	0x40010400

08002f48 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f48:	b480      	push	{r7}
 8002f4a:	b083      	sub	sp, #12
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f50:	4b06      	ldr	r3, [pc, #24]	; (8002f6c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f52:	681a      	ldr	r2, [r3, #0]
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	43db      	mvns	r3, r3
 8002f58:	4904      	ldr	r1, [pc, #16]	; (8002f6c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f5a:	4013      	ands	r3, r2
 8002f5c:	600b      	str	r3, [r1, #0]
}
 8002f5e:	bf00      	nop
 8002f60:	370c      	adds	r7, #12
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr
 8002f6a:	bf00      	nop
 8002f6c:	40010400 	.word	0x40010400

08002f70 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002f70:	b480      	push	{r7}
 8002f72:	b083      	sub	sp, #12
 8002f74:	af00      	add	r7, sp, #0
 8002f76:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002f78:	4b06      	ldr	r3, [pc, #24]	; (8002f94 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f7a:	6a1a      	ldr	r2, [r3, #32]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	4904      	ldr	r1, [pc, #16]	; (8002f94 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f82:	4013      	ands	r3, r2
 8002f84:	620b      	str	r3, [r1, #32]
}
 8002f86:	bf00      	nop
 8002f88:	370c      	adds	r7, #12
 8002f8a:	46bd      	mov	sp, r7
 8002f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	40010400 	.word	0x40010400

08002f98 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f98:	b480      	push	{r7}
 8002f9a:	b083      	sub	sp, #12
 8002f9c:	af00      	add	r7, sp, #0
 8002f9e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002fa0:	4b05      	ldr	r3, [pc, #20]	; (8002fb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fa2:	685a      	ldr	r2, [r3, #4]
 8002fa4:	4904      	ldr	r1, [pc, #16]	; (8002fb8 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	604b      	str	r3, [r1, #4]

}
 8002fac:	bf00      	nop
 8002fae:	370c      	adds	r7, #12
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb6:	4770      	bx	lr
 8002fb8:	40010400 	.word	0x40010400

08002fbc <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b083      	sub	sp, #12
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002fc4:	4b05      	ldr	r3, [pc, #20]	; (8002fdc <LL_EXTI_EnableEvent_32_63+0x20>)
 8002fc6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fc8:	4904      	ldr	r1, [pc, #16]	; (8002fdc <LL_EXTI_EnableEvent_32_63+0x20>)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fd0:	bf00      	nop
 8002fd2:	370c      	adds	r7, #12
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fda:	4770      	bx	lr
 8002fdc:	40010400 	.word	0x40010400

08002fe0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002fe8:	4b06      	ldr	r3, [pc, #24]	; (8003004 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	43db      	mvns	r3, r3
 8002ff0:	4904      	ldr	r1, [pc, #16]	; (8003004 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	604b      	str	r3, [r1, #4]
}
 8002ff6:	bf00      	nop
 8002ff8:	370c      	adds	r7, #12
 8002ffa:	46bd      	mov	sp, r7
 8002ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003000:	4770      	bx	lr
 8003002:	bf00      	nop
 8003004:	40010400 	.word	0x40010400

08003008 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8003008:	b480      	push	{r7}
 800300a:	b083      	sub	sp, #12
 800300c:	af00      	add	r7, sp, #0
 800300e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8003010:	4b06      	ldr	r3, [pc, #24]	; (800302c <LL_EXTI_DisableEvent_32_63+0x24>)
 8003012:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	43db      	mvns	r3, r3
 8003018:	4904      	ldr	r1, [pc, #16]	; (800302c <LL_EXTI_DisableEvent_32_63+0x24>)
 800301a:	4013      	ands	r3, r2
 800301c:	624b      	str	r3, [r1, #36]	; 0x24
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003028:	4770      	bx	lr
 800302a:	bf00      	nop
 800302c:	40010400 	.word	0x40010400

08003030 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003030:	b480      	push	{r7}
 8003032:	b083      	sub	sp, #12
 8003034:	af00      	add	r7, sp, #0
 8003036:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8003038:	4b05      	ldr	r3, [pc, #20]	; (8003050 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800303a:	689a      	ldr	r2, [r3, #8]
 800303c:	4904      	ldr	r1, [pc, #16]	; (8003050 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	4313      	orrs	r3, r2
 8003042:	608b      	str	r3, [r1, #8]

}
 8003044:	bf00      	nop
 8003046:	370c      	adds	r7, #12
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr
 8003050:	40010400 	.word	0x40010400

08003054 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003054:	b480      	push	{r7}
 8003056:	b083      	sub	sp, #12
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800305c:	4b05      	ldr	r3, [pc, #20]	; (8003074 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800305e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003060:	4904      	ldr	r1, [pc, #16]	; (8003074 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	4313      	orrs	r3, r2
 8003066:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003068:	bf00      	nop
 800306a:	370c      	adds	r7, #12
 800306c:	46bd      	mov	sp, r7
 800306e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003072:	4770      	bx	lr
 8003074:	40010400 	.word	0x40010400

08003078 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003078:	b480      	push	{r7}
 800307a:	b083      	sub	sp, #12
 800307c:	af00      	add	r7, sp, #0
 800307e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003080:	4b06      	ldr	r3, [pc, #24]	; (800309c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003082:	689a      	ldr	r2, [r3, #8]
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	43db      	mvns	r3, r3
 8003088:	4904      	ldr	r1, [pc, #16]	; (800309c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800308a:	4013      	ands	r3, r2
 800308c:	608b      	str	r3, [r1, #8]

}
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003098:	4770      	bx	lr
 800309a:	bf00      	nop
 800309c:	40010400 	.word	0x40010400

080030a0 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80030a8:	4b06      	ldr	r3, [pc, #24]	; (80030c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80030aa:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	4904      	ldr	r1, [pc, #16]	; (80030c4 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80030b2:	4013      	ands	r3, r2
 80030b4:	628b      	str	r3, [r1, #40]	; 0x28
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	40010400 	.word	0x40010400

080030c8 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 80030d0:	4b05      	ldr	r3, [pc, #20]	; (80030e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80030d2:	68da      	ldr	r2, [r3, #12]
 80030d4:	4904      	ldr	r1, [pc, #16]	; (80030e8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4313      	orrs	r3, r2
 80030da:	60cb      	str	r3, [r1, #12]
}
 80030dc:	bf00      	nop
 80030de:	370c      	adds	r7, #12
 80030e0:	46bd      	mov	sp, r7
 80030e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e6:	4770      	bx	lr
 80030e8:	40010400 	.word	0x40010400

080030ec <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b083      	sub	sp, #12
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80030f4:	4b05      	ldr	r3, [pc, #20]	; (800310c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f8:	4904      	ldr	r1, [pc, #16]	; (800310c <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4313      	orrs	r3, r2
 80030fe:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 8003100:	bf00      	nop
 8003102:	370c      	adds	r7, #12
 8003104:	46bd      	mov	sp, r7
 8003106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310a:	4770      	bx	lr
 800310c:	40010400 	.word	0x40010400

08003110 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8003118:	4b06      	ldr	r3, [pc, #24]	; (8003134 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800311a:	68da      	ldr	r2, [r3, #12]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	43db      	mvns	r3, r3
 8003120:	4904      	ldr	r1, [pc, #16]	; (8003134 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8003122:	4013      	ands	r3, r2
 8003124:	60cb      	str	r3, [r1, #12]
}
 8003126:	bf00      	nop
 8003128:	370c      	adds	r7, #12
 800312a:	46bd      	mov	sp, r7
 800312c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003130:	4770      	bx	lr
 8003132:	bf00      	nop
 8003134:	40010400 	.word	0x40010400

08003138 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8003138:	b480      	push	{r7}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003140:	4b06      	ldr	r3, [pc, #24]	; (800315c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003142:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	43db      	mvns	r3, r3
 8003148:	4904      	ldr	r1, [pc, #16]	; (800315c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800314a:	4013      	ands	r3, r2
 800314c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr
 800315a:	bf00      	nop
 800315c:	40010400 	.word	0x40010400

08003160 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003160:	b580      	push	{r7, lr}
 8003162:	b084      	sub	sp, #16
 8003164:	af00      	add	r7, sp, #0
 8003166:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003168:	2300      	movs	r3, #0
 800316a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	7a1b      	ldrb	r3, [r3, #8]
 8003170:	2b00      	cmp	r3, #0
 8003172:	f000 80c6 	beq.w	8003302 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d05d      	beq.n	800323a <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	7a5b      	ldrb	r3, [r3, #9]
 8003182:	2b01      	cmp	r3, #1
 8003184:	d00e      	beq.n	80031a4 <LL_EXTI_Init+0x44>
 8003186:	2b02      	cmp	r3, #2
 8003188:	d017      	beq.n	80031ba <LL_EXTI_Init+0x5a>
 800318a:	2b00      	cmp	r3, #0
 800318c:	d120      	bne.n	80031d0 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7ff ff24 	bl	8002fe0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	4618      	mov	r0, r3
 800319e:	f7ff feaf 	bl	8002f00 <LL_EXTI_EnableIT_0_31>
          break;
 80031a2:	e018      	b.n	80031d6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	4618      	mov	r0, r3
 80031aa:	f7ff fecd 	bl	8002f48 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff fef0 	bl	8002f98 <LL_EXTI_EnableEvent_0_31>
          break;
 80031b8:	e00d      	b.n	80031d6 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fe9e 	bl	8002f00 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff fee5 	bl	8002f98 <LL_EXTI_EnableEvent_0_31>
          break;
 80031ce:	e002      	b.n	80031d6 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 80031d0:	2301      	movs	r3, #1
 80031d2:	60fb      	str	r3, [r7, #12]
          break;
 80031d4:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	7a9b      	ldrb	r3, [r3, #10]
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d02d      	beq.n	800323a <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	7a9b      	ldrb	r3, [r3, #10]
 80031e2:	2b02      	cmp	r3, #2
 80031e4:	d00e      	beq.n	8003204 <LL_EXTI_Init+0xa4>
 80031e6:	2b03      	cmp	r3, #3
 80031e8:	d017      	beq.n	800321a <LL_EXTI_Init+0xba>
 80031ea:	2b01      	cmp	r3, #1
 80031ec:	d120      	bne.n	8003230 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7ff ff8c 	bl	8003110 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	4618      	mov	r0, r3
 80031fe:	f7ff ff17 	bl	8003030 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8003202:	e01b      	b.n	800323c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff ff35 	bl	8003078 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7ff ff58 	bl	80030c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8003218:	e010      	b.n	800323c <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4618      	mov	r0, r3
 8003220:	f7ff ff06 	bl	8003030 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4618      	mov	r0, r3
 800322a:	f7ff ff4d 	bl	80030c8 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 800322e:	e005      	b.n	800323c <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	f043 0302 	orr.w	r3, r3, #2
 8003236:	60fb      	str	r3, [r7, #12]
            break;
 8003238:	e000      	b.n	800323c <LL_EXTI_Init+0xdc>
        }
      }
 800323a:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d073      	beq.n	800332c <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	7a5b      	ldrb	r3, [r3, #9]
 8003248:	2b01      	cmp	r3, #1
 800324a:	d00e      	beq.n	800326a <LL_EXTI_Init+0x10a>
 800324c:	2b02      	cmp	r3, #2
 800324e:	d017      	beq.n	8003280 <LL_EXTI_Init+0x120>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d120      	bne.n	8003296 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	4618      	mov	r0, r3
 800325a:	f7ff fed5 	bl	8003008 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4618      	mov	r0, r3
 8003264:	f7ff fe5e 	bl	8002f24 <LL_EXTI_EnableIT_32_63>
          break;
 8003268:	e01a      	b.n	80032a0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	4618      	mov	r0, r3
 8003270:	f7ff fe7e 	bl	8002f70 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	4618      	mov	r0, r3
 800327a:	f7ff fe9f 	bl	8002fbc <LL_EXTI_EnableEvent_32_63>
          break;
 800327e:	e00f      	b.n	80032a0 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	4618      	mov	r0, r3
 8003286:	f7ff fe4d 	bl	8002f24 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff fe94 	bl	8002fbc <LL_EXTI_EnableEvent_32_63>
          break;
 8003294:	e004      	b.n	80032a0 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	60fb      	str	r3, [r7, #12]
          break;
 800329e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	7a9b      	ldrb	r3, [r3, #10]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d041      	beq.n	800332c <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	7a9b      	ldrb	r3, [r3, #10]
 80032ac:	2b02      	cmp	r3, #2
 80032ae:	d00e      	beq.n	80032ce <LL_EXTI_Init+0x16e>
 80032b0:	2b03      	cmp	r3, #3
 80032b2:	d017      	beq.n	80032e4 <LL_EXTI_Init+0x184>
 80032b4:	2b01      	cmp	r3, #1
 80032b6:	d120      	bne.n	80032fa <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	685b      	ldr	r3, [r3, #4]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff3b 	bl	8003138 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fec4 	bl	8003054 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 80032cc:	e02f      	b.n	800332e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	4618      	mov	r0, r3
 80032d4:	f7ff fee4 	bl	80030a0 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	4618      	mov	r0, r3
 80032de:	f7ff ff05 	bl	80030ec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80032e2:	e024      	b.n	800332e <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	4618      	mov	r0, r3
 80032ea:	f7ff feb3 	bl	8003054 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	685b      	ldr	r3, [r3, #4]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7ff fefa 	bl	80030ec <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80032f8:	e019      	b.n	800332e <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 80032fa:	2301      	movs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
            break;
 80032fe:	bf00      	nop
 8003300:	e015      	b.n	800332e <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4618      	mov	r0, r3
 8003308:	f7ff fe1e 	bl	8002f48 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	4618      	mov	r0, r3
 8003312:	f7ff fe65 	bl	8002fe0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff fe28 	bl	8002f70 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	4618      	mov	r0, r3
 8003326:	f7ff fe6f 	bl	8003008 <LL_EXTI_DisableEvent_32_63>
 800332a:	e000      	b.n	800332e <LL_EXTI_Init+0x1ce>
      }
 800332c:	bf00      	nop
  }

  return status;
 800332e:	68fb      	ldr	r3, [r7, #12]
}
 8003330:	4618      	mov	r0, r3
 8003332:	3710      	adds	r7, #16
 8003334:	46bd      	mov	sp, r7
 8003336:	bd80      	pop	{r7, pc}

08003338 <LL_GPIO_SetPinMode>:
{
 8003338:	b480      	push	{r7}
 800333a:	b08b      	sub	sp, #44	; 0x2c
 800333c:	af00      	add	r7, sp, #0
 800333e:	60f8      	str	r0, [r7, #12]
 8003340:	60b9      	str	r1, [r7, #8]
 8003342:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681a      	ldr	r2, [r3, #0]
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800334c:	697b      	ldr	r3, [r7, #20]
 800334e:	fa93 f3a3 	rbit	r3, r3
 8003352:	613b      	str	r3, [r7, #16]
  return result;
 8003354:	693b      	ldr	r3, [r7, #16]
 8003356:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	2b00      	cmp	r3, #0
 800335c:	d101      	bne.n	8003362 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800335e:	2320      	movs	r3, #32
 8003360:	e003      	b.n	800336a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	fab3 f383 	clz	r3, r3
 8003368:	b2db      	uxtb	r3, r3
 800336a:	005b      	lsls	r3, r3, #1
 800336c:	2103      	movs	r1, #3
 800336e:	fa01 f303 	lsl.w	r3, r1, r3
 8003372:	43db      	mvns	r3, r3
 8003374:	401a      	ands	r2, r3
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	fa93 f3a3 	rbit	r3, r3
 8003380:	61fb      	str	r3, [r7, #28]
  return result;
 8003382:	69fb      	ldr	r3, [r7, #28]
 8003384:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003386:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003388:	2b00      	cmp	r3, #0
 800338a:	d101      	bne.n	8003390 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800338c:	2320      	movs	r3, #32
 800338e:	e003      	b.n	8003398 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003390:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003392:	fab3 f383 	clz	r3, r3
 8003396:	b2db      	uxtb	r3, r3
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	6879      	ldr	r1, [r7, #4]
 800339c:	fa01 f303 	lsl.w	r3, r1, r3
 80033a0:	431a      	orrs	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	601a      	str	r2, [r3, #0]
}
 80033a6:	bf00      	nop
 80033a8:	372c      	adds	r7, #44	; 0x2c
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr

080033b2 <LL_GPIO_SetPinOutputType>:
{
 80033b2:	b480      	push	{r7}
 80033b4:	b085      	sub	sp, #20
 80033b6:	af00      	add	r7, sp, #0
 80033b8:	60f8      	str	r0, [r7, #12]
 80033ba:	60b9      	str	r1, [r7, #8]
 80033bc:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	685a      	ldr	r2, [r3, #4]
 80033c2:	68bb      	ldr	r3, [r7, #8]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	401a      	ands	r2, r3
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	6879      	ldr	r1, [r7, #4]
 80033cc:	fb01 f303 	mul.w	r3, r1, r3
 80033d0:	431a      	orrs	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	605a      	str	r2, [r3, #4]
}
 80033d6:	bf00      	nop
 80033d8:	3714      	adds	r7, #20
 80033da:	46bd      	mov	sp, r7
 80033dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e0:	4770      	bx	lr

080033e2 <LL_GPIO_SetPinSpeed>:
{
 80033e2:	b480      	push	{r7}
 80033e4:	b08b      	sub	sp, #44	; 0x2c
 80033e6:	af00      	add	r7, sp, #0
 80033e8:	60f8      	str	r0, [r7, #12]
 80033ea:	60b9      	str	r1, [r7, #8]
 80033ec:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	689a      	ldr	r2, [r3, #8]
 80033f2:	68bb      	ldr	r3, [r7, #8]
 80033f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f6:	697b      	ldr	r3, [r7, #20]
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	613b      	str	r3, [r7, #16]
  return result;
 80033fe:	693b      	ldr	r3, [r7, #16]
 8003400:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003402:	69bb      	ldr	r3, [r7, #24]
 8003404:	2b00      	cmp	r3, #0
 8003406:	d101      	bne.n	800340c <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8003408:	2320      	movs	r3, #32
 800340a:	e003      	b.n	8003414 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	fab3 f383 	clz	r3, r3
 8003412:	b2db      	uxtb	r3, r3
 8003414:	005b      	lsls	r3, r3, #1
 8003416:	2103      	movs	r1, #3
 8003418:	fa01 f303 	lsl.w	r3, r1, r3
 800341c:	43db      	mvns	r3, r3
 800341e:	401a      	ands	r2, r3
 8003420:	68bb      	ldr	r3, [r7, #8]
 8003422:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003424:	6a3b      	ldr	r3, [r7, #32]
 8003426:	fa93 f3a3 	rbit	r3, r3
 800342a:	61fb      	str	r3, [r7, #28]
  return result;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003432:	2b00      	cmp	r3, #0
 8003434:	d101      	bne.n	800343a <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8003436:	2320      	movs	r3, #32
 8003438:	e003      	b.n	8003442 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 800343a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800343c:	fab3 f383 	clz	r3, r3
 8003440:	b2db      	uxtb	r3, r3
 8003442:	005b      	lsls	r3, r3, #1
 8003444:	6879      	ldr	r1, [r7, #4]
 8003446:	fa01 f303 	lsl.w	r3, r1, r3
 800344a:	431a      	orrs	r2, r3
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	609a      	str	r2, [r3, #8]
}
 8003450:	bf00      	nop
 8003452:	372c      	adds	r7, #44	; 0x2c
 8003454:	46bd      	mov	sp, r7
 8003456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800345a:	4770      	bx	lr

0800345c <LL_GPIO_SetPinPull>:
{
 800345c:	b480      	push	{r7}
 800345e:	b08b      	sub	sp, #44	; 0x2c
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	68da      	ldr	r2, [r3, #12]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003470:	697b      	ldr	r3, [r7, #20]
 8003472:	fa93 f3a3 	rbit	r3, r3
 8003476:	613b      	str	r3, [r7, #16]
  return result;
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800347c:	69bb      	ldr	r3, [r7, #24]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e003      	b.n	800348e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	fab3 f383 	clz	r3, r3
 800348c:	b2db      	uxtb	r3, r3
 800348e:	005b      	lsls	r3, r3, #1
 8003490:	2103      	movs	r1, #3
 8003492:	fa01 f303 	lsl.w	r3, r1, r3
 8003496:	43db      	mvns	r3, r3
 8003498:	401a      	ands	r2, r3
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800349e:	6a3b      	ldr	r3, [r7, #32]
 80034a0:	fa93 f3a3 	rbit	r3, r3
 80034a4:	61fb      	str	r3, [r7, #28]
  return result;
 80034a6:	69fb      	ldr	r3, [r7, #28]
 80034a8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d101      	bne.n	80034b4 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80034b0:	2320      	movs	r3, #32
 80034b2:	e003      	b.n	80034bc <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80034b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b6:	fab3 f383 	clz	r3, r3
 80034ba:	b2db      	uxtb	r3, r3
 80034bc:	005b      	lsls	r3, r3, #1
 80034be:	6879      	ldr	r1, [r7, #4]
 80034c0:	fa01 f303 	lsl.w	r3, r1, r3
 80034c4:	431a      	orrs	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	60da      	str	r2, [r3, #12]
}
 80034ca:	bf00      	nop
 80034cc:	372c      	adds	r7, #44	; 0x2c
 80034ce:	46bd      	mov	sp, r7
 80034d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d4:	4770      	bx	lr

080034d6 <LL_GPIO_SetAFPin_0_7>:
{
 80034d6:	b480      	push	{r7}
 80034d8:	b08b      	sub	sp, #44	; 0x2c
 80034da:	af00      	add	r7, sp, #0
 80034dc:	60f8      	str	r0, [r7, #12]
 80034de:	60b9      	str	r1, [r7, #8]
 80034e0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	6a1a      	ldr	r2, [r3, #32]
 80034e6:	68bb      	ldr	r3, [r7, #8]
 80034e8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034ea:	697b      	ldr	r3, [r7, #20]
 80034ec:	fa93 f3a3 	rbit	r3, r3
 80034f0:	613b      	str	r3, [r7, #16]
  return result;
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034f6:	69bb      	ldr	r3, [r7, #24]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80034fc:	2320      	movs	r3, #32
 80034fe:	e003      	b.n	8003508 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	fab3 f383 	clz	r3, r3
 8003506:	b2db      	uxtb	r3, r3
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	210f      	movs	r1, #15
 800350c:	fa01 f303 	lsl.w	r3, r1, r3
 8003510:	43db      	mvns	r3, r3
 8003512:	401a      	ands	r2, r3
 8003514:	68bb      	ldr	r3, [r7, #8]
 8003516:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003518:	6a3b      	ldr	r3, [r7, #32]
 800351a:	fa93 f3a3 	rbit	r3, r3
 800351e:	61fb      	str	r3, [r7, #28]
  return result;
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 800352a:	2320      	movs	r3, #32
 800352c:	e003      	b.n	8003536 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 800352e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003530:	fab3 f383 	clz	r3, r3
 8003534:	b2db      	uxtb	r3, r3
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	6879      	ldr	r1, [r7, #4]
 800353a:	fa01 f303 	lsl.w	r3, r1, r3
 800353e:	431a      	orrs	r2, r3
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	621a      	str	r2, [r3, #32]
}
 8003544:	bf00      	nop
 8003546:	372c      	adds	r7, #44	; 0x2c
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <LL_GPIO_SetAFPin_8_15>:
{
 8003550:	b480      	push	{r7}
 8003552:	b08b      	sub	sp, #44	; 0x2c
 8003554:	af00      	add	r7, sp, #0
 8003556:	60f8      	str	r0, [r7, #12]
 8003558:	60b9      	str	r1, [r7, #8]
 800355a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003560:	68bb      	ldr	r3, [r7, #8]
 8003562:	0a1b      	lsrs	r3, r3, #8
 8003564:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	fa93 f3a3 	rbit	r3, r3
 800356c:	613b      	str	r3, [r7, #16]
  return result;
 800356e:	693b      	ldr	r3, [r7, #16]
 8003570:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003572:	69bb      	ldr	r3, [r7, #24]
 8003574:	2b00      	cmp	r3, #0
 8003576:	d101      	bne.n	800357c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003578:	2320      	movs	r3, #32
 800357a:	e003      	b.n	8003584 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800357c:	69bb      	ldr	r3, [r7, #24]
 800357e:	fab3 f383 	clz	r3, r3
 8003582:	b2db      	uxtb	r3, r3
 8003584:	009b      	lsls	r3, r3, #2
 8003586:	210f      	movs	r1, #15
 8003588:	fa01 f303 	lsl.w	r3, r1, r3
 800358c:	43db      	mvns	r3, r3
 800358e:	401a      	ands	r2, r3
 8003590:	68bb      	ldr	r3, [r7, #8]
 8003592:	0a1b      	lsrs	r3, r3, #8
 8003594:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003596:	6a3b      	ldr	r3, [r7, #32]
 8003598:	fa93 f3a3 	rbit	r3, r3
 800359c:	61fb      	str	r3, [r7, #28]
  return result;
 800359e:	69fb      	ldr	r3, [r7, #28]
 80035a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80035a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d101      	bne.n	80035ac <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 80035a8:	2320      	movs	r3, #32
 80035aa:	e003      	b.n	80035b4 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 80035ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ae:	fab3 f383 	clz	r3, r3
 80035b2:	b2db      	uxtb	r3, r3
 80035b4:	009b      	lsls	r3, r3, #2
 80035b6:	6879      	ldr	r1, [r7, #4]
 80035b8:	fa01 f303 	lsl.w	r3, r1, r3
 80035bc:	431a      	orrs	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	625a      	str	r2, [r3, #36]	; 0x24
}
 80035c2:	bf00      	nop
 80035c4:	372c      	adds	r7, #44	; 0x2c
 80035c6:	46bd      	mov	sp, r7
 80035c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035cc:	4770      	bx	lr

080035ce <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 80035ce:	b580      	push	{r7, lr}
 80035d0:	b088      	sub	sp, #32
 80035d2:	af00      	add	r7, sp, #0
 80035d4:	6078      	str	r0, [r7, #4]
 80035d6:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	fa93 f3a3 	rbit	r3, r3
 80035e4:	60fb      	str	r3, [r7, #12]
  return result;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035ea:	697b      	ldr	r3, [r7, #20]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d101      	bne.n	80035f4 <LL_GPIO_Init+0x26>
    return 32U;
 80035f0:	2320      	movs	r3, #32
 80035f2:	e003      	b.n	80035fc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80035f4:	697b      	ldr	r3, [r7, #20]
 80035f6:	fab3 f383 	clz	r3, r3
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035fe:	e040      	b.n	8003682 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	681a      	ldr	r2, [r3, #0]
 8003604:	2101      	movs	r1, #1
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	fa01 f303 	lsl.w	r3, r1, r3
 800360c:	4013      	ands	r3, r2
 800360e:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8003610:	69bb      	ldr	r3, [r7, #24]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d032      	beq.n	800367c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	461a      	mov	r2, r3
 800361c:	69b9      	ldr	r1, [r7, #24]
 800361e:	6878      	ldr	r0, [r7, #4]
 8003620:	f7ff fe8a 	bl	8003338 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	2b01      	cmp	r3, #1
 800362a:	d003      	beq.n	8003634 <LL_GPIO_Init+0x66>
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	2b02      	cmp	r3, #2
 8003632:	d106      	bne.n	8003642 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003634:	683b      	ldr	r3, [r7, #0]
 8003636:	689b      	ldr	r3, [r3, #8]
 8003638:	461a      	mov	r2, r3
 800363a:	69b9      	ldr	r1, [r7, #24]
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	f7ff fed0 	bl	80033e2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	691b      	ldr	r3, [r3, #16]
 8003646:	461a      	mov	r2, r3
 8003648:	69b9      	ldr	r1, [r7, #24]
 800364a:	6878      	ldr	r0, [r7, #4]
 800364c:	f7ff ff06 	bl	800345c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b02      	cmp	r3, #2
 8003656:	d111      	bne.n	800367c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	2bff      	cmp	r3, #255	; 0xff
 800365c:	d807      	bhi.n	800366e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800365e:	683b      	ldr	r3, [r7, #0]
 8003660:	695b      	ldr	r3, [r3, #20]
 8003662:	461a      	mov	r2, r3
 8003664:	69b9      	ldr	r1, [r7, #24]
 8003666:	6878      	ldr	r0, [r7, #4]
 8003668:	f7ff ff35 	bl	80034d6 <LL_GPIO_SetAFPin_0_7>
 800366c:	e006      	b.n	800367c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	695b      	ldr	r3, [r3, #20]
 8003672:	461a      	mov	r2, r3
 8003674:	69b9      	ldr	r1, [r7, #24]
 8003676:	6878      	ldr	r0, [r7, #4]
 8003678:	f7ff ff6a 	bl	8003550 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800367c:	69fb      	ldr	r3, [r7, #28]
 800367e:	3301      	adds	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	69fb      	ldr	r3, [r7, #28]
 8003688:	fa22 f303 	lsr.w	r3, r2, r3
 800368c:	2b00      	cmp	r3, #0
 800368e:	d1b7      	bne.n	8003600 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d003      	beq.n	80036a0 <LL_GPIO_Init+0xd2>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	2b02      	cmp	r3, #2
 800369e:	d107      	bne.n	80036b0 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	6819      	ldr	r1, [r3, #0]
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	461a      	mov	r2, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7ff fe81 	bl	80033b2 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <LL_RCC_HSI_IsReady>:
{
 80036bc:	b480      	push	{r7}
 80036be:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 80036c0:	4b07      	ldr	r3, [pc, #28]	; (80036e0 <LL_RCC_HSI_IsReady+0x24>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80036c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036cc:	d101      	bne.n	80036d2 <LL_RCC_HSI_IsReady+0x16>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <LL_RCC_HSI_IsReady+0x18>
 80036d2:	2300      	movs	r3, #0
}
 80036d4:	4618      	mov	r0, r3
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr
 80036de:	bf00      	nop
 80036e0:	40021000 	.word	0x40021000

080036e4 <LL_RCC_LSE_IsReady>:
{
 80036e4:	b480      	push	{r7}
 80036e6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80036e8:	4b07      	ldr	r3, [pc, #28]	; (8003708 <LL_RCC_LSE_IsReady+0x24>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	f003 0302 	and.w	r3, r3, #2
 80036f2:	2b02      	cmp	r3, #2
 80036f4:	d101      	bne.n	80036fa <LL_RCC_LSE_IsReady+0x16>
 80036f6:	2301      	movs	r3, #1
 80036f8:	e000      	b.n	80036fc <LL_RCC_LSE_IsReady+0x18>
 80036fa:	2300      	movs	r3, #0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000

0800370c <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8003710:	4b06      	ldr	r3, [pc, #24]	; (800372c <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f003 0308 	and.w	r3, r3, #8
 8003718:	2b08      	cmp	r3, #8
 800371a:	d101      	bne.n	8003720 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 800371c:	2301      	movs	r3, #1
 800371e:	e000      	b.n	8003722 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8003720:	2300      	movs	r3, #0
}
 8003722:	4618      	mov	r0, r3
 8003724:	46bd      	mov	sp, r7
 8003726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372a:	4770      	bx	lr
 800372c:	40021000 	.word	0x40021000

08003730 <LL_RCC_MSI_GetRange>:
{
 8003730:	b480      	push	{r7}
 8003732:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8003734:	4b04      	ldr	r3, [pc, #16]	; (8003748 <LL_RCC_MSI_GetRange+0x18>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 800373c:	4618      	mov	r0, r3
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40021000 	.word	0x40021000

0800374c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800374c:	b480      	push	{r7}
 800374e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003750:	4b04      	ldr	r3, [pc, #16]	; (8003764 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8003752:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003756:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800375a:	4618      	mov	r0, r3
 800375c:	46bd      	mov	sp, r7
 800375e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003762:	4770      	bx	lr
 8003764:	40021000 	.word	0x40021000

08003768 <LL_RCC_GetSysClkSource>:
{
 8003768:	b480      	push	{r7}
 800376a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800376c:	4b04      	ldr	r3, [pc, #16]	; (8003780 <LL_RCC_GetSysClkSource+0x18>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 030c 	and.w	r3, r3, #12
}
 8003774:	4618      	mov	r0, r3
 8003776:	46bd      	mov	sp, r7
 8003778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377c:	4770      	bx	lr
 800377e:	bf00      	nop
 8003780:	40021000 	.word	0x40021000

08003784 <LL_RCC_GetAHBPrescaler>:
{
 8003784:	b480      	push	{r7}
 8003786:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003788:	4b04      	ldr	r3, [pc, #16]	; (800379c <LL_RCC_GetAHBPrescaler+0x18>)
 800378a:	689b      	ldr	r3, [r3, #8]
 800378c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003790:	4618      	mov	r0, r3
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr
 800379a:	bf00      	nop
 800379c:	40021000 	.word	0x40021000

080037a0 <LL_RCC_GetAPB1Prescaler>:
{
 80037a0:	b480      	push	{r7}
 80037a2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 80037a4:	4b04      	ldr	r3, [pc, #16]	; (80037b8 <LL_RCC_GetAPB1Prescaler+0x18>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 80037ac:	4618      	mov	r0, r3
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40021000 	.word	0x40021000

080037bc <LL_RCC_GetAPB2Prescaler>:
{
 80037bc:	b480      	push	{r7}
 80037be:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 80037c0:	4b04      	ldr	r3, [pc, #16]	; (80037d4 <LL_RCC_GetAPB2Prescaler+0x18>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	46bd      	mov	sp, r7
 80037cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d0:	4770      	bx	lr
 80037d2:	bf00      	nop
 80037d4:	40021000 	.word	0x40021000

080037d8 <LL_RCC_GetUSARTClockSource>:
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80037e0:	4b06      	ldr	r3, [pc, #24]	; (80037fc <LL_RCC_GetUSARTClockSource+0x24>)
 80037e2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	401a      	ands	r2, r3
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	041b      	lsls	r3, r3, #16
 80037ee:	4313      	orrs	r3, r2
}
 80037f0:	4618      	mov	r0, r3
 80037f2:	370c      	adds	r7, #12
 80037f4:	46bd      	mov	sp, r7
 80037f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fa:	4770      	bx	lr
 80037fc:	40021000 	.word	0x40021000

08003800 <LL_RCC_GetUARTClockSource>:
{
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8003808:	4b06      	ldr	r3, [pc, #24]	; (8003824 <LL_RCC_GetUARTClockSource+0x24>)
 800380a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	401a      	ands	r2, r3
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	041b      	lsls	r3, r3, #16
 8003816:	4313      	orrs	r3, r2
}
 8003818:	4618      	mov	r0, r3
 800381a:	370c      	adds	r7, #12
 800381c:	46bd      	mov	sp, r7
 800381e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003822:	4770      	bx	lr
 8003824:	40021000 	.word	0x40021000

08003828 <LL_RCC_PLL_GetMainSource>:
{
 8003828:	b480      	push	{r7}
 800382a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 800382c:	4b04      	ldr	r3, [pc, #16]	; (8003840 <LL_RCC_PLL_GetMainSource+0x18>)
 800382e:	68db      	ldr	r3, [r3, #12]
 8003830:	f003 0303 	and.w	r3, r3, #3
}
 8003834:	4618      	mov	r0, r3
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
 800383e:	bf00      	nop
 8003840:	40021000 	.word	0x40021000

08003844 <LL_RCC_PLL_GetN>:
{
 8003844:	b480      	push	{r7}
 8003846:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003848:	4b04      	ldr	r3, [pc, #16]	; (800385c <LL_RCC_PLL_GetN+0x18>)
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	0a1b      	lsrs	r3, r3, #8
 800384e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003852:	4618      	mov	r0, r3
 8003854:	46bd      	mov	sp, r7
 8003856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800385a:	4770      	bx	lr
 800385c:	40021000 	.word	0x40021000

08003860 <LL_RCC_PLL_GetR>:
{
 8003860:	b480      	push	{r7}
 8003862:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003864:	4b04      	ldr	r3, [pc, #16]	; (8003878 <LL_RCC_PLL_GetR+0x18>)
 8003866:	68db      	ldr	r3, [r3, #12]
 8003868:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800386c:	4618      	mov	r0, r3
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr
 8003876:	bf00      	nop
 8003878:	40021000 	.word	0x40021000

0800387c <LL_RCC_PLL_GetDivider>:
{
 800387c:	b480      	push	{r7}
 800387e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003880:	4b04      	ldr	r3, [pc, #16]	; (8003894 <LL_RCC_PLL_GetDivider+0x18>)
 8003882:	68db      	ldr	r3, [r3, #12]
 8003884:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003888:	4618      	mov	r0, r3
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr
 8003892:	bf00      	nop
 8003894:	40021000 	.word	0x40021000

08003898 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80038a0:	2300      	movs	r3, #0
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	2b03      	cmp	r3, #3
 80038a8:	d137      	bne.n	800391a <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f7ff ff94 	bl	80037d8 <LL_RCC_GetUSARTClockSource>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80038b6:	2b03      	cmp	r3, #3
 80038b8:	f200 80b2 	bhi.w	8003a20 <LL_RCC_GetUSARTClockFreq+0x188>
 80038bc:	a201      	add	r2, pc, #4	; (adr r2, 80038c4 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80038be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038c2:	bf00      	nop
 80038c4:	08003903 	.word	0x08003903
 80038c8:	080038d5 	.word	0x080038d5
 80038cc:	080038dd 	.word	0x080038dd
 80038d0:	080038ef 	.word	0x080038ef
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80038d4:	f000 f952 	bl	8003b7c <RCC_GetSystemClockFreq>
 80038d8:	60f8      	str	r0, [r7, #12]
        break;
 80038da:	e0b2      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80038dc:	f7ff feee 	bl	80036bc <LL_RCC_HSI_IsReady>
 80038e0:	4603      	mov	r3, r0
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	f000 809e 	beq.w	8003a24 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80038e8:	4b58      	ldr	r3, [pc, #352]	; (8003a4c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80038ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038ec:	e09a      	b.n	8003a24 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80038ee:	f7ff fef9 	bl	80036e4 <LL_RCC_LSE_IsReady>
 80038f2:	4603      	mov	r3, r0
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8097 	beq.w	8003a28 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80038fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038fe:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003900:	e092      	b.n	8003a28 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003902:	f000 f93b 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003906:	4603      	mov	r3, r0
 8003908:	4618      	mov	r0, r3
 800390a:	f000 f9c7 	bl	8003c9c <RCC_GetHCLKClockFreq>
 800390e:	4603      	mov	r3, r0
 8003910:	4618      	mov	r0, r3
 8003912:	f000 f9ed 	bl	8003cf0 <RCC_GetPCLK2ClockFreq>
 8003916:	60f8      	str	r0, [r7, #12]
        break;
 8003918:	e093      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	2b0c      	cmp	r3, #12
 800391e:	d146      	bne.n	80039ae <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003920:	6878      	ldr	r0, [r7, #4]
 8003922:	f7ff ff59 	bl	80037d8 <LL_RCC_GetUSARTClockSource>
 8003926:	4603      	mov	r3, r0
 8003928:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 800392c:	2b0c      	cmp	r3, #12
 800392e:	d87d      	bhi.n	8003a2c <LL_RCC_GetUSARTClockFreq+0x194>
 8003930:	a201      	add	r2, pc, #4	; (adr r2, 8003938 <LL_RCC_GetUSARTClockFreq+0xa0>)
 8003932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003936:	bf00      	nop
 8003938:	08003997 	.word	0x08003997
 800393c:	08003a2d 	.word	0x08003a2d
 8003940:	08003a2d 	.word	0x08003a2d
 8003944:	08003a2d 	.word	0x08003a2d
 8003948:	0800396d 	.word	0x0800396d
 800394c:	08003a2d 	.word	0x08003a2d
 8003950:	08003a2d 	.word	0x08003a2d
 8003954:	08003a2d 	.word	0x08003a2d
 8003958:	08003975 	.word	0x08003975
 800395c:	08003a2d 	.word	0x08003a2d
 8003960:	08003a2d 	.word	0x08003a2d
 8003964:	08003a2d 	.word	0x08003a2d
 8003968:	08003985 	.word	0x08003985
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800396c:	f000 f906 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003970:	60f8      	str	r0, [r7, #12]
        break;
 8003972:	e066      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003974:	f7ff fea2 	bl	80036bc <LL_RCC_HSI_IsReady>
 8003978:	4603      	mov	r3, r0
 800397a:	2b00      	cmp	r3, #0
 800397c:	d058      	beq.n	8003a30 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800397e:	4b33      	ldr	r3, [pc, #204]	; (8003a4c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003980:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003982:	e055      	b.n	8003a30 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003984:	f7ff feae 	bl	80036e4 <LL_RCC_LSE_IsReady>
 8003988:	4603      	mov	r3, r0
 800398a:	2b00      	cmp	r3, #0
 800398c:	d052      	beq.n	8003a34 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800398e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003992:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003994:	e04e      	b.n	8003a34 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003996:	f000 f8f1 	bl	8003b7c <RCC_GetSystemClockFreq>
 800399a:	4603      	mov	r3, r0
 800399c:	4618      	mov	r0, r3
 800399e:	f000 f97d 	bl	8003c9c <RCC_GetHCLKClockFreq>
 80039a2:	4603      	mov	r3, r0
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 f98f 	bl	8003cc8 <RCC_GetPCLK1ClockFreq>
 80039aa:	60f8      	str	r0, [r7, #12]
        break;
 80039ac:	e049      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	2b30      	cmp	r3, #48	; 0x30
 80039b2:	d141      	bne.n	8003a38 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f7ff ff0f 	bl	80037d8 <LL_RCC_GetUSARTClockSource>
 80039ba:	4603      	mov	r3, r0
 80039bc:	4a24      	ldr	r2, [pc, #144]	; (8003a50 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d00d      	beq.n	80039de <LL_RCC_GetUSARTClockFreq+0x146>
 80039c2:	4a23      	ldr	r2, [pc, #140]	; (8003a50 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80039c4:	4293      	cmp	r3, r2
 80039c6:	d803      	bhi.n	80039d0 <LL_RCC_GetUSARTClockFreq+0x138>
 80039c8:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 80039cc:	d01c      	beq.n	8003a08 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 80039ce:	e038      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80039d0:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d007      	beq.n	80039e6 <LL_RCC_GetUSARTClockFreq+0x14e>
 80039d6:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80039da:	d00c      	beq.n	80039f6 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 80039dc:	e031      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 80039de:	f000 f8cd 	bl	8003b7c <RCC_GetSystemClockFreq>
 80039e2:	60f8      	str	r0, [r7, #12]
          break;
 80039e4:	e02d      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80039e6:	f7ff fe69 	bl	80036bc <LL_RCC_HSI_IsReady>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d025      	beq.n	8003a3c <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 80039f0:	4b16      	ldr	r3, [pc, #88]	; (8003a4c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80039f2:	60fb      	str	r3, [r7, #12]
          break;
 80039f4:	e022      	b.n	8003a3c <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 80039f6:	f7ff fe75 	bl	80036e4 <LL_RCC_LSE_IsReady>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d01f      	beq.n	8003a40 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 8003a00:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a04:	60fb      	str	r3, [r7, #12]
          break;
 8003a06:	e01b      	b.n	8003a40 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003a08:	f000 f8b8 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003a0c:	4603      	mov	r3, r0
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 f944 	bl	8003c9c <RCC_GetHCLKClockFreq>
 8003a14:	4603      	mov	r3, r0
 8003a16:	4618      	mov	r0, r3
 8003a18:	f000 f956 	bl	8003cc8 <RCC_GetPCLK1ClockFreq>
 8003a1c:	60f8      	str	r0, [r7, #12]
          break;
 8003a1e:	e010      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a20:	bf00      	nop
 8003a22:	e00e      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a24:	bf00      	nop
 8003a26:	e00c      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a28:	bf00      	nop
 8003a2a:	e00a      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a2c:	bf00      	nop
 8003a2e:	e008      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a30:	bf00      	nop
 8003a32:	e006      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 8003a34:	bf00      	nop
 8003a36:	e004      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 8003a38:	bf00      	nop
 8003a3a:	e002      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003a3c:	bf00      	nop
 8003a3e:	e000      	b.n	8003a42 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003a40:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8003a42:	68fb      	ldr	r3, [r7, #12]
}
 8003a44:	4618      	mov	r0, r3
 8003a46:	3710      	adds	r7, #16
 8003a48:	46bd      	mov	sp, r7
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	00f42400 	.word	0x00f42400
 8003a50:	00300010 	.word	0x00300010
 8003a54:	00300020 	.word	0x00300020

08003a58 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a60:	2300      	movs	r3, #0
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2bc0      	cmp	r3, #192	; 0xc0
 8003a68:	d135      	bne.n	8003ad6 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff fec8 	bl	8003800 <LL_RCC_GetUARTClockSource>
 8003a70:	4603      	mov	r3, r0
 8003a72:	4a3d      	ldr	r2, [pc, #244]	; (8003b68 <LL_RCC_GetUARTClockFreq+0x110>)
 8003a74:	4293      	cmp	r3, r2
 8003a76:	d00d      	beq.n	8003a94 <LL_RCC_GetUARTClockFreq+0x3c>
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <LL_RCC_GetUARTClockFreq+0x110>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d803      	bhi.n	8003a86 <LL_RCC_GetUARTClockFreq+0x2e>
 8003a7e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a82:	d01c      	beq.n	8003abe <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8003a84:	e02c      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003a86:	4a39      	ldr	r2, [pc, #228]	; (8003b6c <LL_RCC_GetUARTClockFreq+0x114>)
 8003a88:	4293      	cmp	r3, r2
 8003a8a:	d007      	beq.n	8003a9c <LL_RCC_GetUARTClockFreq+0x44>
 8003a8c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003a90:	d00c      	beq.n	8003aac <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8003a92:	e025      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8003a94:	f000 f872 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003a98:	60f8      	str	r0, [r7, #12]
        break;
 8003a9a:	e021      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003a9c:	f7ff fe0e 	bl	80036bc <LL_RCC_HSI_IsReady>
 8003aa0:	4603      	mov	r3, r0
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d019      	beq.n	8003ada <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8003aa6:	4b32      	ldr	r3, [pc, #200]	; (8003b70 <LL_RCC_GetUARTClockFreq+0x118>)
 8003aa8:	60fb      	str	r3, [r7, #12]
        break;
 8003aaa:	e016      	b.n	8003ada <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003aac:	f7ff fe1a 	bl	80036e4 <LL_RCC_LSE_IsReady>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d013      	beq.n	8003ade <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8003ab6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aba:	60fb      	str	r3, [r7, #12]
        break;
 8003abc:	e00f      	b.n	8003ade <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003abe:	f000 f85d 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003ac2:	4603      	mov	r3, r0
 8003ac4:	4618      	mov	r0, r3
 8003ac6:	f000 f8e9 	bl	8003c9c <RCC_GetHCLKClockFreq>
 8003aca:	4603      	mov	r3, r0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f000 f8fb 	bl	8003cc8 <RCC_GetPCLK1ClockFreq>
 8003ad2:	60f8      	str	r0, [r7, #12]
        break;
 8003ad4:	e004      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8003ad6:	bf00      	nop
 8003ad8:	e002      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003ada:	bf00      	nop
 8003adc:	e000      	b.n	8003ae0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003ade:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ae6:	d135      	bne.n	8003b54 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003ae8:	6878      	ldr	r0, [r7, #4]
 8003aea:	f7ff fe89 	bl	8003800 <LL_RCC_GetUARTClockSource>
 8003aee:	4603      	mov	r3, r0
 8003af0:	4a20      	ldr	r2, [pc, #128]	; (8003b74 <LL_RCC_GetUARTClockFreq+0x11c>)
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d00d      	beq.n	8003b12 <LL_RCC_GetUARTClockFreq+0xba>
 8003af6:	4a1f      	ldr	r2, [pc, #124]	; (8003b74 <LL_RCC_GetUARTClockFreq+0x11c>)
 8003af8:	4293      	cmp	r3, r2
 8003afa:	d803      	bhi.n	8003b04 <LL_RCC_GetUARTClockFreq+0xac>
 8003afc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003b00:	d01c      	beq.n	8003b3c <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8003b02:	e02c      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003b04:	4a1c      	ldr	r2, [pc, #112]	; (8003b78 <LL_RCC_GetUARTClockFreq+0x120>)
 8003b06:	4293      	cmp	r3, r2
 8003b08:	d007      	beq.n	8003b1a <LL_RCC_GetUARTClockFreq+0xc2>
 8003b0a:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003b0e:	d00c      	beq.n	8003b2a <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8003b10:	e025      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8003b12:	f000 f833 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003b16:	60f8      	str	r0, [r7, #12]
        break;
 8003b18:	e021      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003b1a:	f7ff fdcf 	bl	80036bc <LL_RCC_HSI_IsReady>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d019      	beq.n	8003b58 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8003b24:	4b12      	ldr	r3, [pc, #72]	; (8003b70 <LL_RCC_GetUARTClockFreq+0x118>)
 8003b26:	60fb      	str	r3, [r7, #12]
        break;
 8003b28:	e016      	b.n	8003b58 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003b2a:	f7ff fddb 	bl	80036e4 <LL_RCC_LSE_IsReady>
 8003b2e:	4603      	mov	r3, r0
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d013      	beq.n	8003b5c <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8003b34:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b38:	60fb      	str	r3, [r7, #12]
        break;
 8003b3a:	e00f      	b.n	8003b5c <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003b3c:	f000 f81e 	bl	8003b7c <RCC_GetSystemClockFreq>
 8003b40:	4603      	mov	r3, r0
 8003b42:	4618      	mov	r0, r3
 8003b44:	f000 f8aa 	bl	8003c9c <RCC_GetHCLKClockFreq>
 8003b48:	4603      	mov	r3, r0
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f8bc 	bl	8003cc8 <RCC_GetPCLK1ClockFreq>
 8003b50:	60f8      	str	r0, [r7, #12]
        break;
 8003b52:	e004      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8003b54:	bf00      	nop
 8003b56:	e002      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003b58:	bf00      	nop
 8003b5a:	e000      	b.n	8003b5e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003b5c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
}
 8003b60:	4618      	mov	r0, r3
 8003b62:	3710      	adds	r7, #16
 8003b64:	46bd      	mov	sp, r7
 8003b66:	bd80      	pop	{r7, pc}
 8003b68:	00c00040 	.word	0x00c00040
 8003b6c:	00c00080 	.word	0x00c00080
 8003b70:	00f42400 	.word	0x00f42400
 8003b74:	03000100 	.word	0x03000100
 8003b78:	03000200 	.word	0x03000200

08003b7c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b082      	sub	sp, #8
 8003b80:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003b82:	f7ff fdf1 	bl	8003768 <LL_RCC_GetSysClkSource>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b0c      	cmp	r3, #12
 8003b8a:	d851      	bhi.n	8003c30 <RCC_GetSystemClockFreq+0xb4>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <RCC_GetSystemClockFreq+0x18>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003bc9 	.word	0x08003bc9
 8003b98:	08003c31 	.word	0x08003c31
 8003b9c:	08003c31 	.word	0x08003c31
 8003ba0:	08003c31 	.word	0x08003c31
 8003ba4:	08003c1d 	.word	0x08003c1d
 8003ba8:	08003c31 	.word	0x08003c31
 8003bac:	08003c31 	.word	0x08003c31
 8003bb0:	08003c31 	.word	0x08003c31
 8003bb4:	08003c23 	.word	0x08003c23
 8003bb8:	08003c31 	.word	0x08003c31
 8003bbc:	08003c31 	.word	0x08003c31
 8003bc0:	08003c31 	.word	0x08003c31
 8003bc4:	08003c29 	.word	0x08003c29
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003bc8:	f7ff fda0 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bcc:	4603      	mov	r3, r0
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d111      	bne.n	8003bf6 <RCC_GetSystemClockFreq+0x7a>
 8003bd2:	f7ff fd9b 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d004      	beq.n	8003be6 <RCC_GetSystemClockFreq+0x6a>
 8003bdc:	f7ff fda8 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003be0:	4603      	mov	r3, r0
 8003be2:	0a1b      	lsrs	r3, r3, #8
 8003be4:	e003      	b.n	8003bee <RCC_GetSystemClockFreq+0x72>
 8003be6:	f7ff fdb1 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003bea:	4603      	mov	r3, r0
 8003bec:	0a1b      	lsrs	r3, r3, #8
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <RCC_GetSystemClockFreq+0x114>)
 8003bf0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bf4:	e010      	b.n	8003c18 <RCC_GetSystemClockFreq+0x9c>
 8003bf6:	f7ff fd89 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bfa:	4603      	mov	r3, r0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d004      	beq.n	8003c0a <RCC_GetSystemClockFreq+0x8e>
 8003c00:	f7ff fd96 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003c04:	4603      	mov	r3, r0
 8003c06:	091b      	lsrs	r3, r3, #4
 8003c08:	e003      	b.n	8003c12 <RCC_GetSystemClockFreq+0x96>
 8003c0a:	f7ff fd9f 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	091b      	lsrs	r3, r3, #4
 8003c12:	4a1f      	ldr	r2, [pc, #124]	; (8003c90 <RCC_GetSystemClockFreq+0x114>)
 8003c14:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c18:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003c1a:	e033      	b.n	8003c84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <RCC_GetSystemClockFreq+0x118>)
 8003c1e:	607b      	str	r3, [r7, #4]
      break;
 8003c20:	e030      	b.n	8003c84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <RCC_GetSystemClockFreq+0x11c>)
 8003c24:	607b      	str	r3, [r7, #4]
      break;
 8003c26:	e02d      	b.n	8003c84 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003c28:	f000 f876 	bl	8003d18 <RCC_PLL_GetFreqDomain_SYS>
 8003c2c:	6078      	str	r0, [r7, #4]
      break;
 8003c2e:	e029      	b.n	8003c84 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003c30:	f7ff fd6c 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d111      	bne.n	8003c5e <RCC_GetSystemClockFreq+0xe2>
 8003c3a:	f7ff fd67 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d004      	beq.n	8003c4e <RCC_GetSystemClockFreq+0xd2>
 8003c44:	f7ff fd74 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003c48:	4603      	mov	r3, r0
 8003c4a:	0a1b      	lsrs	r3, r3, #8
 8003c4c:	e003      	b.n	8003c56 <RCC_GetSystemClockFreq+0xda>
 8003c4e:	f7ff fd7d 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c52:	4603      	mov	r3, r0
 8003c54:	0a1b      	lsrs	r3, r3, #8
 8003c56:	4a0e      	ldr	r2, [pc, #56]	; (8003c90 <RCC_GetSystemClockFreq+0x114>)
 8003c58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c5c:	e010      	b.n	8003c80 <RCC_GetSystemClockFreq+0x104>
 8003c5e:	f7ff fd55 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c62:	4603      	mov	r3, r0
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d004      	beq.n	8003c72 <RCC_GetSystemClockFreq+0xf6>
 8003c68:	f7ff fd62 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	091b      	lsrs	r3, r3, #4
 8003c70:	e003      	b.n	8003c7a <RCC_GetSystemClockFreq+0xfe>
 8003c72:	f7ff fd6b 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c76:	4603      	mov	r3, r0
 8003c78:	091b      	lsrs	r3, r3, #4
 8003c7a:	4a05      	ldr	r2, [pc, #20]	; (8003c90 <RCC_GetSystemClockFreq+0x114>)
 8003c7c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c80:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003c82:	bf00      	nop
  }

  return frequency;
 8003c84:	687b      	ldr	r3, [r7, #4]
}
 8003c86:	4618      	mov	r0, r3
 8003c88:	3708      	adds	r7, #8
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	0800682c 	.word	0x0800682c
 8003c94:	00f42400 	.word	0x00f42400
 8003c98:	007a1200 	.word	0x007a1200

08003c9c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b082      	sub	sp, #8
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003ca4:	f7ff fd6e 	bl	8003784 <LL_RCC_GetAHBPrescaler>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	091b      	lsrs	r3, r3, #4
 8003cac:	f003 030f 	and.w	r3, r3, #15
 8003cb0:	4a04      	ldr	r2, [pc, #16]	; (8003cc4 <RCC_GetHCLKClockFreq+0x28>)
 8003cb2:	5cd3      	ldrb	r3, [r2, r3]
 8003cb4:	461a      	mov	r2, r3
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	40d3      	lsrs	r3, r2
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}
 8003cc2:	bf00      	nop
 8003cc4:	08006814 	.word	0x08006814

08003cc8 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003cc8:	b580      	push	{r7, lr}
 8003cca:	b082      	sub	sp, #8
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003cd0:	f7ff fd66 	bl	80037a0 <LL_RCC_GetAPB1Prescaler>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	0a1b      	lsrs	r3, r3, #8
 8003cd8:	4a04      	ldr	r2, [pc, #16]	; (8003cec <RCC_GetPCLK1ClockFreq+0x24>)
 8003cda:	5cd3      	ldrb	r3, [r2, r3]
 8003cdc:	461a      	mov	r2, r3
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	40d3      	lsrs	r3, r2
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3708      	adds	r7, #8
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}
 8003cea:	bf00      	nop
 8003cec:	08006824 	.word	0x08006824

08003cf0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003cf8:	f7ff fd60 	bl	80037bc <LL_RCC_GetAPB2Prescaler>
 8003cfc:	4603      	mov	r3, r0
 8003cfe:	0adb      	lsrs	r3, r3, #11
 8003d00:	4a04      	ldr	r2, [pc, #16]	; (8003d14 <RCC_GetPCLK2ClockFreq+0x24>)
 8003d02:	5cd3      	ldrb	r3, [r2, r3]
 8003d04:	461a      	mov	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	40d3      	lsrs	r3, r2
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3708      	adds	r7, #8
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}
 8003d12:	bf00      	nop
 8003d14:	08006824 	.word	0x08006824

08003d18 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003d18:	b590      	push	{r4, r7, lr}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003d1e:	f7ff fd83 	bl	8003828 <LL_RCC_PLL_GetMainSource>
 8003d22:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	2b02      	cmp	r3, #2
 8003d28:	d02d      	beq.n	8003d86 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8003d2a:	2b03      	cmp	r3, #3
 8003d2c:	d02e      	beq.n	8003d8c <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d12f      	bne.n	8003d92 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d32:	f7ff fceb 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d36:	4603      	mov	r3, r0
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d111      	bne.n	8003d60 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003d3c:	f7ff fce6 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d40:	4603      	mov	r3, r0
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d004      	beq.n	8003d50 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8003d46:	f7ff fcf3 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	0a1b      	lsrs	r3, r3, #8
 8003d4e:	e003      	b.n	8003d58 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8003d50:	f7ff fcfc 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d54:	4603      	mov	r3, r0
 8003d56:	0a1b      	lsrs	r3, r3, #8
 8003d58:	4a2f      	ldr	r2, [pc, #188]	; (8003e18 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d5a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d5e:	e010      	b.n	8003d82 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8003d60:	f7ff fcd4 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d64:	4603      	mov	r3, r0
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d004      	beq.n	8003d74 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8003d6a:	f7ff fce1 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003d6e:	4603      	mov	r3, r0
 8003d70:	091b      	lsrs	r3, r3, #4
 8003d72:	e003      	b.n	8003d7c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8003d74:	f7ff fcea 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d78:	4603      	mov	r3, r0
 8003d7a:	091b      	lsrs	r3, r3, #4
 8003d7c:	4a26      	ldr	r2, [pc, #152]	; (8003e18 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d82:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003d84:	e02f      	b.n	8003de6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003d86:	4b25      	ldr	r3, [pc, #148]	; (8003e1c <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8003d88:	607b      	str	r3, [r7, #4]
      break;
 8003d8a:	e02c      	b.n	8003de6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003d8c:	4b24      	ldr	r3, [pc, #144]	; (8003e20 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8003d8e:	607b      	str	r3, [r7, #4]
      break;
 8003d90:	e029      	b.n	8003de6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d92:	f7ff fcbb 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d96:	4603      	mov	r3, r0
 8003d98:	2b00      	cmp	r3, #0
 8003d9a:	d111      	bne.n	8003dc0 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8003d9c:	f7ff fcb6 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d004      	beq.n	8003db0 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003da6:	f7ff fcc3 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003daa:	4603      	mov	r3, r0
 8003dac:	0a1b      	lsrs	r3, r3, #8
 8003dae:	e003      	b.n	8003db8 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8003db0:	f7ff fccc 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003db4:	4603      	mov	r3, r0
 8003db6:	0a1b      	lsrs	r3, r3, #8
 8003db8:	4a17      	ldr	r2, [pc, #92]	; (8003e18 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003dba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003dbe:	e010      	b.n	8003de2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8003dc0:	f7ff fca4 	bl	800370c <LL_RCC_MSI_IsEnabledRangeSelect>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d004      	beq.n	8003dd4 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8003dca:	f7ff fcb1 	bl	8003730 <LL_RCC_MSI_GetRange>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	091b      	lsrs	r3, r3, #4
 8003dd2:	e003      	b.n	8003ddc <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8003dd4:	f7ff fcba 	bl	800374c <LL_RCC_MSI_GetRangeAfterStandby>
 8003dd8:	4603      	mov	r3, r0
 8003dda:	091b      	lsrs	r3, r3, #4
 8003ddc:	4a0e      	ldr	r2, [pc, #56]	; (8003e18 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003dde:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003de2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003de4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003de6:	f7ff fd49 	bl	800387c <LL_RCC_PLL_GetDivider>
 8003dea:	4603      	mov	r3, r0
 8003dec:	091b      	lsrs	r3, r3, #4
 8003dee:	3301      	adds	r3, #1
 8003df0:	687a      	ldr	r2, [r7, #4]
 8003df2:	fbb2 f4f3 	udiv	r4, r2, r3
 8003df6:	f7ff fd25 	bl	8003844 <LL_RCC_PLL_GetN>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	fb03 f404 	mul.w	r4, r3, r4
 8003e00:	f7ff fd2e 	bl	8003860 <LL_RCC_PLL_GetR>
 8003e04:	4603      	mov	r3, r0
 8003e06:	0e5b      	lsrs	r3, r3, #25
 8003e08:	3301      	adds	r3, #1
 8003e0a:	005b      	lsls	r3, r3, #1
 8003e0c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bd90      	pop	{r4, r7, pc}
 8003e18:	0800682c 	.word	0x0800682c
 8003e1c:	00f42400 	.word	0x00f42400
 8003e20:	007a1200 	.word	0x007a1200

08003e24 <LL_SPI_IsEnabled>:
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e34:	2b40      	cmp	r3, #64	; 0x40
 8003e36:	d101      	bne.n	8003e3c <LL_SPI_IsEnabled+0x18>
 8003e38:	2301      	movs	r3, #1
 8003e3a:	e000      	b.n	8003e3e <LL_SPI_IsEnabled+0x1a>
 8003e3c:	2300      	movs	r3, #0
}
 8003e3e:	4618      	mov	r0, r3
 8003e40:	370c      	adds	r7, #12
 8003e42:	46bd      	mov	sp, r7
 8003e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e48:	4770      	bx	lr

08003e4a <LL_SPI_SetCRCPolynomial>:
{
 8003e4a:	b480      	push	{r7}
 8003e4c:	b083      	sub	sp, #12
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	6078      	str	r0, [r7, #4]
 8003e52:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	461a      	mov	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	611a      	str	r2, [r3, #16]
}
 8003e5e:	bf00      	nop
 8003e60:	370c      	adds	r7, #12
 8003e62:	46bd      	mov	sp, r7
 8003e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e68:	4770      	bx	lr

08003e6a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e74:	2301      	movs	r3, #1
 8003e76:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003e78:	6878      	ldr	r0, [r7, #4]
 8003e7a:	f7ff ffd3 	bl	8003e24 <LL_SPI_IsEnabled>
 8003e7e:	4603      	mov	r3, r0
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d13b      	bne.n	8003efc <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e8c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	6811      	ldr	r1, [r2, #0]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	6852      	ldr	r2, [r2, #4]
 8003e98:	4311      	orrs	r1, r2
 8003e9a:	683a      	ldr	r2, [r7, #0]
 8003e9c:	68d2      	ldr	r2, [r2, #12]
 8003e9e:	4311      	orrs	r1, r2
 8003ea0:	683a      	ldr	r2, [r7, #0]
 8003ea2:	6912      	ldr	r2, [r2, #16]
 8003ea4:	4311      	orrs	r1, r2
 8003ea6:	683a      	ldr	r2, [r7, #0]
 8003ea8:	6952      	ldr	r2, [r2, #20]
 8003eaa:	4311      	orrs	r1, r2
 8003eac:	683a      	ldr	r2, [r7, #0]
 8003eae:	6992      	ldr	r2, [r2, #24]
 8003eb0:	4311      	orrs	r1, r2
 8003eb2:	683a      	ldr	r2, [r7, #0]
 8003eb4:	69d2      	ldr	r2, [r2, #28]
 8003eb6:	4311      	orrs	r1, r2
 8003eb8:	683a      	ldr	r2, [r7, #0]
 8003eba:	6a12      	ldr	r2, [r2, #32]
 8003ebc:	430a      	orrs	r2, r1
 8003ebe:	431a      	orrs	r2, r3
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	685b      	ldr	r3, [r3, #4]
 8003ec8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003ecc:	f023 0304 	bic.w	r3, r3, #4
 8003ed0:	683a      	ldr	r2, [r7, #0]
 8003ed2:	6891      	ldr	r1, [r2, #8]
 8003ed4:	683a      	ldr	r2, [r7, #0]
 8003ed6:	6952      	ldr	r2, [r2, #20]
 8003ed8:	0c12      	lsrs	r2, r2, #16
 8003eda:	430a      	orrs	r2, r1
 8003edc:	431a      	orrs	r2, r3
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	6a1b      	ldr	r3, [r3, #32]
 8003ee6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eea:	d105      	bne.n	8003ef8 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003eec:	683b      	ldr	r3, [r7, #0]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	4619      	mov	r1, r3
 8003ef2:	6878      	ldr	r0, [r7, #4]
 8003ef4:	f7ff ffa9 	bl	8003e4a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003ef8:	2300      	movs	r3, #0
 8003efa:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003efc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003efe:	4618      	mov	r0, r3
 8003f00:	3710      	adds	r7, #16
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <LL_TIM_SetPrescaler>:
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
 8003f0e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	683a      	ldr	r2, [r7, #0]
 8003f14:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003f16:	bf00      	nop
 8003f18:	370c      	adds	r7, #12
 8003f1a:	46bd      	mov	sp, r7
 8003f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f20:	4770      	bx	lr

08003f22 <LL_TIM_SetAutoReload>:
{
 8003f22:	b480      	push	{r7}
 8003f24:	b083      	sub	sp, #12
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
 8003f2a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr

08003f3e <LL_TIM_SetRepetitionCounter>:
{
 8003f3e:	b480      	push	{r7}
 8003f40:	b083      	sub	sp, #12
 8003f42:	af00      	add	r7, sp, #0
 8003f44:	6078      	str	r0, [r7, #4]
 8003f46:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	683a      	ldr	r2, [r7, #0]
 8003f4c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f4e:	bf00      	nop
 8003f50:	370c      	adds	r7, #12
 8003f52:	46bd      	mov	sp, r7
 8003f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f58:	4770      	bx	lr

08003f5a <LL_TIM_OC_SetCompareCH1>:
{
 8003f5a:	b480      	push	{r7}
 8003f5c:	b083      	sub	sp, #12
 8003f5e:	af00      	add	r7, sp, #0
 8003f60:	6078      	str	r0, [r7, #4]
 8003f62:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	683a      	ldr	r2, [r7, #0]
 8003f68:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f6a:	bf00      	nop
 8003f6c:	370c      	adds	r7, #12
 8003f6e:	46bd      	mov	sp, r7
 8003f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f74:	4770      	bx	lr

08003f76 <LL_TIM_OC_SetCompareCH2>:
{
 8003f76:	b480      	push	{r7}
 8003f78:	b083      	sub	sp, #12
 8003f7a:	af00      	add	r7, sp, #0
 8003f7c:	6078      	str	r0, [r7, #4]
 8003f7e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	683a      	ldr	r2, [r7, #0]
 8003f84:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f86:	bf00      	nop
 8003f88:	370c      	adds	r7, #12
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr

08003f92 <LL_TIM_OC_SetCompareCH3>:
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
 8003f9a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	683a      	ldr	r2, [r7, #0]
 8003fa0:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <LL_TIM_OC_SetCompareCH4>:
{
 8003fae:	b480      	push	{r7}
 8003fb0:	b083      	sub	sp, #12
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
 8003fb6:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	683a      	ldr	r2, [r7, #0]
 8003fbc:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003fbe:	bf00      	nop
 8003fc0:	370c      	adds	r7, #12
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc8:	4770      	bx	lr

08003fca <LL_TIM_OC_SetCompareCH5>:
{
 8003fca:	b480      	push	{r7}
 8003fcc:	b083      	sub	sp, #12
 8003fce:	af00      	add	r7, sp, #0
 8003fd0:	6078      	str	r0, [r7, #4]
 8003fd2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	683a      	ldr	r2, [r7, #0]
 8003fdc:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003fde:	bf00      	nop
 8003fe0:	370c      	adds	r7, #12
 8003fe2:	46bd      	mov	sp, r7
 8003fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe8:	4770      	bx	lr

08003fea <LL_TIM_OC_SetCompareCH6>:
{
 8003fea:	b480      	push	{r7}
 8003fec:	b083      	sub	sp, #12
 8003fee:	af00      	add	r7, sp, #0
 8003ff0:	6078      	str	r0, [r7, #4]
 8003ff2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	683a      	ldr	r2, [r7, #0]
 8003ff8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003ffa:	bf00      	nop
 8003ffc:	370c      	adds	r7, #12
 8003ffe:	46bd      	mov	sp, r7
 8004000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004004:	4770      	bx	lr

08004006 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8004006:	b480      	push	{r7}
 8004008:	b083      	sub	sp, #12
 800400a:	af00      	add	r7, sp, #0
 800400c:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	f043 0201 	orr.w	r2, r3, #1
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	615a      	str	r2, [r3, #20]
}
 800401a:	bf00      	nop
 800401c:	370c      	adds	r7, #12
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
	...

08004028 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8004028:	b580      	push	{r7, lr}
 800402a:	b084      	sub	sp, #16
 800402c:	af00      	add	r7, sp, #0
 800402e:	6078      	str	r0, [r7, #4]
 8004030:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	4a3d      	ldr	r2, [pc, #244]	; (8004130 <LL_TIM_Init+0x108>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d013      	beq.n	8004068 <LL_TIM_Init+0x40>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004046:	d00f      	beq.n	8004068 <LL_TIM_Init+0x40>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	4a3a      	ldr	r2, [pc, #232]	; (8004134 <LL_TIM_Init+0x10c>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d00b      	beq.n	8004068 <LL_TIM_Init+0x40>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	4a39      	ldr	r2, [pc, #228]	; (8004138 <LL_TIM_Init+0x110>)
 8004054:	4293      	cmp	r3, r2
 8004056:	d007      	beq.n	8004068 <LL_TIM_Init+0x40>
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	4a38      	ldr	r2, [pc, #224]	; (800413c <LL_TIM_Init+0x114>)
 800405c:	4293      	cmp	r3, r2
 800405e:	d003      	beq.n	8004068 <LL_TIM_Init+0x40>
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a37      	ldr	r2, [pc, #220]	; (8004140 <LL_TIM_Init+0x118>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d106      	bne.n	8004076 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800406e:	683b      	ldr	r3, [r7, #0]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	4313      	orrs	r3, r2
 8004074:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a2d      	ldr	r2, [pc, #180]	; (8004130 <LL_TIM_Init+0x108>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d01f      	beq.n	80040be <LL_TIM_Init+0x96>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004084:	d01b      	beq.n	80040be <LL_TIM_Init+0x96>
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	4a2a      	ldr	r2, [pc, #168]	; (8004134 <LL_TIM_Init+0x10c>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d017      	beq.n	80040be <LL_TIM_Init+0x96>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	4a29      	ldr	r2, [pc, #164]	; (8004138 <LL_TIM_Init+0x110>)
 8004092:	4293      	cmp	r3, r2
 8004094:	d013      	beq.n	80040be <LL_TIM_Init+0x96>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	4a28      	ldr	r2, [pc, #160]	; (800413c <LL_TIM_Init+0x114>)
 800409a:	4293      	cmp	r3, r2
 800409c:	d00f      	beq.n	80040be <LL_TIM_Init+0x96>
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	4a27      	ldr	r2, [pc, #156]	; (8004140 <LL_TIM_Init+0x118>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d00b      	beq.n	80040be <LL_TIM_Init+0x96>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	4a26      	ldr	r2, [pc, #152]	; (8004144 <LL_TIM_Init+0x11c>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d007      	beq.n	80040be <LL_TIM_Init+0x96>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	4a25      	ldr	r2, [pc, #148]	; (8004148 <LL_TIM_Init+0x120>)
 80040b2:	4293      	cmp	r3, r2
 80040b4:	d003      	beq.n	80040be <LL_TIM_Init+0x96>
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	4a24      	ldr	r2, [pc, #144]	; (800414c <LL_TIM_Init+0x124>)
 80040ba:	4293      	cmp	r3, r2
 80040bc:	d106      	bne.n	80040cc <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	689b      	ldr	r3, [r3, #8]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff22 	bl	8003f22 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	881b      	ldrh	r3, [r3, #0]
 80040e2:	4619      	mov	r1, r3
 80040e4:	6878      	ldr	r0, [r7, #4]
 80040e6:	f7ff ff0e 	bl	8003f06 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	4a10      	ldr	r2, [pc, #64]	; (8004130 <LL_TIM_Init+0x108>)
 80040ee:	4293      	cmp	r3, r2
 80040f0:	d00f      	beq.n	8004112 <LL_TIM_Init+0xea>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	4a12      	ldr	r2, [pc, #72]	; (8004140 <LL_TIM_Init+0x118>)
 80040f6:	4293      	cmp	r3, r2
 80040f8:	d00b      	beq.n	8004112 <LL_TIM_Init+0xea>
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	4a11      	ldr	r2, [pc, #68]	; (8004144 <LL_TIM_Init+0x11c>)
 80040fe:	4293      	cmp	r3, r2
 8004100:	d007      	beq.n	8004112 <LL_TIM_Init+0xea>
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	4a10      	ldr	r2, [pc, #64]	; (8004148 <LL_TIM_Init+0x120>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d003      	beq.n	8004112 <LL_TIM_Init+0xea>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	4a0f      	ldr	r2, [pc, #60]	; (800414c <LL_TIM_Init+0x124>)
 800410e:	4293      	cmp	r3, r2
 8004110:	d105      	bne.n	800411e <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	691b      	ldr	r3, [r3, #16]
 8004116:	4619      	mov	r1, r3
 8004118:	6878      	ldr	r0, [r7, #4]
 800411a:	f7ff ff10 	bl	8003f3e <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f7ff ff71 	bl	8004006 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}
 800412e:	bf00      	nop
 8004130:	40012c00 	.word	0x40012c00
 8004134:	40000400 	.word	0x40000400
 8004138:	40000800 	.word	0x40000800
 800413c:	40000c00 	.word	0x40000c00
 8004140:	40013400 	.word	0x40013400
 8004144:	40014000 	.word	0x40014000
 8004148:	40014400 	.word	0x40014400
 800414c:	40014800 	.word	0x40014800

08004150 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004166:	d01f      	beq.n	80041a8 <LL_TIM_OC_Init+0x58>
 8004168:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800416c:	d804      	bhi.n	8004178 <LL_TIM_OC_Init+0x28>
 800416e:	2b01      	cmp	r3, #1
 8004170:	d00c      	beq.n	800418c <LL_TIM_OC_Init+0x3c>
 8004172:	2b10      	cmp	r3, #16
 8004174:	d011      	beq.n	800419a <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004176:	e033      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8004178:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800417c:	d022      	beq.n	80041c4 <LL_TIM_OC_Init+0x74>
 800417e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004182:	d026      	beq.n	80041d2 <LL_TIM_OC_Init+0x82>
 8004184:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004188:	d015      	beq.n	80041b6 <LL_TIM_OC_Init+0x66>
      break;
 800418a:	e029      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800418c:	6879      	ldr	r1, [r7, #4]
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f82c 	bl	80041ec <OC1Config>
 8004194:	4603      	mov	r3, r0
 8004196:	75fb      	strb	r3, [r7, #23]
      break;
 8004198:	e022      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800419a:	6879      	ldr	r1, [r7, #4]
 800419c:	68f8      	ldr	r0, [r7, #12]
 800419e:	f000 f8a5 	bl	80042ec <OC2Config>
 80041a2:	4603      	mov	r3, r0
 80041a4:	75fb      	strb	r3, [r7, #23]
      break;
 80041a6:	e01b      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 80041a8:	6879      	ldr	r1, [r7, #4]
 80041aa:	68f8      	ldr	r0, [r7, #12]
 80041ac:	f000 f922 	bl	80043f4 <OC3Config>
 80041b0:	4603      	mov	r3, r0
 80041b2:	75fb      	strb	r3, [r7, #23]
      break;
 80041b4:	e014      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 80041b6:	6879      	ldr	r1, [r7, #4]
 80041b8:	68f8      	ldr	r0, [r7, #12]
 80041ba:	f000 f99f 	bl	80044fc <OC4Config>
 80041be:	4603      	mov	r3, r0
 80041c0:	75fb      	strb	r3, [r7, #23]
      break;
 80041c2:	e00d      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 80041c4:	6879      	ldr	r1, [r7, #4]
 80041c6:	68f8      	ldr	r0, [r7, #12]
 80041c8:	f000 fa04 	bl	80045d4 <OC5Config>
 80041cc:	4603      	mov	r3, r0
 80041ce:	75fb      	strb	r3, [r7, #23]
      break;
 80041d0:	e006      	b.n	80041e0 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 80041d2:	6879      	ldr	r1, [r7, #4]
 80041d4:	68f8      	ldr	r0, [r7, #12]
 80041d6:	f000 fa61 	bl	800469c <OC6Config>
 80041da:	4603      	mov	r3, r0
 80041dc:	75fb      	strb	r3, [r7, #23]
      break;
 80041de:	bf00      	nop
  }

  return result;
 80041e0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	3718      	adds	r7, #24
 80041e6:	46bd      	mov	sp, r7
 80041e8:	bd80      	pop	{r7, pc}
	...

080041ec <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b086      	sub	sp, #24
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	6a1b      	ldr	r3, [r3, #32]
 80041fa:	f023 0201 	bic.w	r2, r3, #1
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6a1b      	ldr	r3, [r3, #32]
 8004206:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	f023 0303 	bic.w	r3, r3, #3
 800421a:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004226:	683a      	ldr	r2, [r7, #0]
 8004228:	6812      	ldr	r2, [r2, #0]
 800422a:	4313      	orrs	r3, r2
 800422c:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 800422e:	697b      	ldr	r3, [r7, #20]
 8004230:	f023 0202 	bic.w	r2, r3, #2
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	4313      	orrs	r3, r2
 800423a:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 800423c:	697b      	ldr	r3, [r7, #20]
 800423e:	f023 0201 	bic.w	r2, r3, #1
 8004242:	683b      	ldr	r3, [r7, #0]
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	4a22      	ldr	r2, [pc, #136]	; (80042d8 <OC1Config+0xec>)
 800424e:	4293      	cmp	r3, r2
 8004250:	d00f      	beq.n	8004272 <OC1Config+0x86>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	4a21      	ldr	r2, [pc, #132]	; (80042dc <OC1Config+0xf0>)
 8004256:	4293      	cmp	r3, r2
 8004258:	d00b      	beq.n	8004272 <OC1Config+0x86>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	4a20      	ldr	r2, [pc, #128]	; (80042e0 <OC1Config+0xf4>)
 800425e:	4293      	cmp	r3, r2
 8004260:	d007      	beq.n	8004272 <OC1Config+0x86>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	4a1f      	ldr	r2, [pc, #124]	; (80042e4 <OC1Config+0xf8>)
 8004266:	4293      	cmp	r3, r2
 8004268:	d003      	beq.n	8004272 <OC1Config+0x86>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	4a1e      	ldr	r2, [pc, #120]	; (80042e8 <OC1Config+0xfc>)
 800426e:	4293      	cmp	r3, r2
 8004270:	d11e      	bne.n	80042b0 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	f023 0208 	bic.w	r2, r3, #8
 8004278:	683b      	ldr	r3, [r7, #0]
 800427a:	695b      	ldr	r3, [r3, #20]
 800427c:	009b      	lsls	r3, r3, #2
 800427e:	4313      	orrs	r3, r2
 8004280:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	f023 0204 	bic.w	r2, r3, #4
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	689b      	ldr	r3, [r3, #8]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	4313      	orrs	r3, r2
 8004290:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	699b      	ldr	r3, [r3, #24]
 800429c:	4313      	orrs	r3, r2
 800429e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	69db      	ldr	r3, [r3, #28]
 80042aa:	005b      	lsls	r3, r3, #1
 80042ac:	4313      	orrs	r3, r2
 80042ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	68fa      	ldr	r2, [r7, #12]
 80042ba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 80042bc:	683b      	ldr	r3, [r7, #0]
 80042be:	68db      	ldr	r3, [r3, #12]
 80042c0:	4619      	mov	r1, r3
 80042c2:	6878      	ldr	r0, [r7, #4]
 80042c4:	f7ff fe49 	bl	8003f5a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	697a      	ldr	r2, [r7, #20]
 80042cc:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}
 80042d8:	40012c00 	.word	0x40012c00
 80042dc:	40013400 	.word	0x40013400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800

080042ec <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b086      	sub	sp, #24
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0210 	bic.w	r2, r3, #16
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800431a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004322:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004326:	683a      	ldr	r2, [r7, #0]
 8004328:	6812      	ldr	r2, [r2, #0]
 800432a:	0212      	lsls	r2, r2, #8
 800432c:	4313      	orrs	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f023 0220 	bic.w	r2, r3, #32
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	691b      	ldr	r3, [r3, #16]
 800433a:	011b      	lsls	r3, r3, #4
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004340:	697b      	ldr	r3, [r7, #20]
 8004342:	f023 0210 	bic.w	r2, r3, #16
 8004346:	683b      	ldr	r3, [r7, #0]
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	011b      	lsls	r3, r3, #4
 800434c:	4313      	orrs	r3, r2
 800434e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4a23      	ldr	r2, [pc, #140]	; (80043e0 <OC2Config+0xf4>)
 8004354:	4293      	cmp	r3, r2
 8004356:	d00f      	beq.n	8004378 <OC2Config+0x8c>
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	4a22      	ldr	r2, [pc, #136]	; (80043e4 <OC2Config+0xf8>)
 800435c:	4293      	cmp	r3, r2
 800435e:	d00b      	beq.n	8004378 <OC2Config+0x8c>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a21      	ldr	r2, [pc, #132]	; (80043e8 <OC2Config+0xfc>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d007      	beq.n	8004378 <OC2Config+0x8c>
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	4a20      	ldr	r2, [pc, #128]	; (80043ec <OC2Config+0x100>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d003      	beq.n	8004378 <OC2Config+0x8c>
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	4a1f      	ldr	r2, [pc, #124]	; (80043f0 <OC2Config+0x104>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d11f      	bne.n	80043b8 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	695b      	ldr	r3, [r3, #20]
 8004382:	019b      	lsls	r3, r3, #6
 8004384:	4313      	orrs	r3, r2
 8004386:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004388:	697b      	ldr	r3, [r7, #20]
 800438a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	689b      	ldr	r3, [r3, #8]
 8004392:	019b      	lsls	r3, r3, #6
 8004394:	4313      	orrs	r3, r2
 8004396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	699b      	ldr	r3, [r3, #24]
 80043a2:	009b      	lsls	r3, r3, #2
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 80043a8:	693b      	ldr	r3, [r7, #16]
 80043aa:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80043ae:	683b      	ldr	r3, [r7, #0]
 80043b0:	69db      	ldr	r3, [r3, #28]
 80043b2:	00db      	lsls	r3, r3, #3
 80043b4:	4313      	orrs	r3, r2
 80043b6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	68fa      	ldr	r2, [r7, #12]
 80043c2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 80043c4:	683b      	ldr	r3, [r7, #0]
 80043c6:	68db      	ldr	r3, [r3, #12]
 80043c8:	4619      	mov	r1, r3
 80043ca:	6878      	ldr	r0, [r7, #4]
 80043cc:	f7ff fdd3 	bl	8003f76 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80043d6:	2300      	movs	r3, #0
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3718      	adds	r7, #24
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}
 80043e0:	40012c00 	.word	0x40012c00
 80043e4:	40013400 	.word	0x40013400
 80043e8:	40014000 	.word	0x40014000
 80043ec:	40014400 	.word	0x40014400
 80043f0:	40014800 	.word	0x40014800

080043f4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b086      	sub	sp, #24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6a1b      	ldr	r3, [r3, #32]
 8004402:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a1b      	ldr	r3, [r3, #32]
 800440e:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	685b      	ldr	r3, [r3, #4]
 8004414:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	f023 0303 	bic.w	r3, r3, #3
 8004422:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800442a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800442e:	683a      	ldr	r2, [r7, #0]
 8004430:	6812      	ldr	r2, [r2, #0]
 8004432:	4313      	orrs	r3, r2
 8004434:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 8004436:	697b      	ldr	r3, [r7, #20]
 8004438:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	691b      	ldr	r3, [r3, #16]
 8004440:	021b      	lsls	r3, r3, #8
 8004442:	4313      	orrs	r3, r2
 8004444:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004446:	697b      	ldr	r3, [r7, #20]
 8004448:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	685b      	ldr	r3, [r3, #4]
 8004450:	021b      	lsls	r3, r3, #8
 8004452:	4313      	orrs	r3, r2
 8004454:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a23      	ldr	r2, [pc, #140]	; (80044e8 <OC3Config+0xf4>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d00f      	beq.n	800447e <OC3Config+0x8a>
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	4a22      	ldr	r2, [pc, #136]	; (80044ec <OC3Config+0xf8>)
 8004462:	4293      	cmp	r3, r2
 8004464:	d00b      	beq.n	800447e <OC3Config+0x8a>
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a21      	ldr	r2, [pc, #132]	; (80044f0 <OC3Config+0xfc>)
 800446a:	4293      	cmp	r3, r2
 800446c:	d007      	beq.n	800447e <OC3Config+0x8a>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	4a20      	ldr	r2, [pc, #128]	; (80044f4 <OC3Config+0x100>)
 8004472:	4293      	cmp	r3, r2
 8004474:	d003      	beq.n	800447e <OC3Config+0x8a>
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a1f      	ldr	r2, [pc, #124]	; (80044f8 <OC3Config+0x104>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d11f      	bne.n	80044be <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004484:	683b      	ldr	r3, [r7, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	029b      	lsls	r3, r3, #10
 800448a:	4313      	orrs	r3, r2
 800448c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004494:	683b      	ldr	r3, [r7, #0]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	029b      	lsls	r3, r3, #10
 800449a:	4313      	orrs	r3, r2
 800449c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800449e:	693b      	ldr	r3, [r7, #16]
 80044a0:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044a4:	683b      	ldr	r3, [r7, #0]
 80044a6:	699b      	ldr	r3, [r3, #24]
 80044a8:	011b      	lsls	r3, r3, #4
 80044aa:	4313      	orrs	r3, r2
 80044ac:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 80044ae:	693b      	ldr	r3, [r7, #16]
 80044b0:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80044b4:	683b      	ldr	r3, [r7, #0]
 80044b6:	69db      	ldr	r3, [r3, #28]
 80044b8:	015b      	lsls	r3, r3, #5
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	693a      	ldr	r2, [r7, #16]
 80044c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	68fa      	ldr	r2, [r7, #12]
 80044c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 80044ca:	683b      	ldr	r3, [r7, #0]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	4619      	mov	r1, r3
 80044d0:	6878      	ldr	r0, [r7, #4]
 80044d2:	f7ff fd5e 	bl	8003f92 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80044dc:	2300      	movs	r3, #0
}
 80044de:	4618      	mov	r0, r3
 80044e0:	3718      	adds	r7, #24
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	40012c00 	.word	0x40012c00
 80044ec:	40013400 	.word	0x40013400
 80044f0:	40014000 	.word	0x40014000
 80044f4:	40014400 	.word	0x40014400
 80044f8:	40014800 	.word	0x40014800

080044fc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b086      	sub	sp, #24
 8004500:	af00      	add	r7, sp, #0
 8004502:	6078      	str	r0, [r7, #4]
 8004504:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a1b      	ldr	r3, [r3, #32]
 800450a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	69db      	ldr	r3, [r3, #28]
 8004522:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	6812      	ldr	r2, [r2, #0]
 800453a:	0212      	lsls	r2, r2, #8
 800453c:	4313      	orrs	r3, r2
 800453e:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004540:	693b      	ldr	r3, [r7, #16]
 8004542:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	691b      	ldr	r3, [r3, #16]
 800454a:	031b      	lsls	r3, r3, #12
 800454c:	4313      	orrs	r3, r2
 800454e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004550:	693b      	ldr	r3, [r7, #16]
 8004552:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	031b      	lsls	r3, r3, #12
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a17      	ldr	r2, [pc, #92]	; (80045c0 <OC4Config+0xc4>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d00f      	beq.n	8004588 <OC4Config+0x8c>
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	4a16      	ldr	r2, [pc, #88]	; (80045c4 <OC4Config+0xc8>)
 800456c:	4293      	cmp	r3, r2
 800456e:	d00b      	beq.n	8004588 <OC4Config+0x8c>
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	4a15      	ldr	r2, [pc, #84]	; (80045c8 <OC4Config+0xcc>)
 8004574:	4293      	cmp	r3, r2
 8004576:	d007      	beq.n	8004588 <OC4Config+0x8c>
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	4a14      	ldr	r2, [pc, #80]	; (80045cc <OC4Config+0xd0>)
 800457c:	4293      	cmp	r3, r2
 800457e:	d003      	beq.n	8004588 <OC4Config+0x8c>
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a13      	ldr	r2, [pc, #76]	; (80045d0 <OC4Config+0xd4>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d107      	bne.n	8004598 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800458e:	683b      	ldr	r3, [r7, #0]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	019b      	lsls	r3, r3, #6
 8004594:	4313      	orrs	r3, r2
 8004596:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	68fa      	ldr	r2, [r7, #12]
 80045a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4619      	mov	r1, r3
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	f7ff fcff 	bl	8003fae <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	693a      	ldr	r2, [r7, #16]
 80045b4:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3718      	adds	r7, #24
 80045bc:	46bd      	mov	sp, r7
 80045be:	bd80      	pop	{r7, pc}
 80045c0:	40012c00 	.word	0x40012c00
 80045c4:	40013400 	.word	0x40013400
 80045c8:	40014000 	.word	0x40014000
 80045cc:	40014400 	.word	0x40014400
 80045d0:	40014800 	.word	0x40014800

080045d4 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	6078      	str	r0, [r7, #4]
 80045dc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a1b      	ldr	r3, [r3, #32]
 80045e2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	6a1b      	ldr	r3, [r3, #32]
 80045ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045f4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004600:	683a      	ldr	r2, [r7, #0]
 8004602:	6812      	ldr	r2, [r2, #0]
 8004604:	4313      	orrs	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	691b      	ldr	r3, [r3, #16]
 8004612:	041b      	lsls	r3, r3, #16
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800461e:	683b      	ldr	r3, [r7, #0]
 8004620:	685b      	ldr	r3, [r3, #4]
 8004622:	041b      	lsls	r3, r3, #16
 8004624:	4313      	orrs	r3, r2
 8004626:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	4a17      	ldr	r2, [pc, #92]	; (8004688 <OC5Config+0xb4>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d00f      	beq.n	8004650 <OC5Config+0x7c>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a16      	ldr	r2, [pc, #88]	; (800468c <OC5Config+0xb8>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d00b      	beq.n	8004650 <OC5Config+0x7c>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	4a15      	ldr	r2, [pc, #84]	; (8004690 <OC5Config+0xbc>)
 800463c:	4293      	cmp	r3, r2
 800463e:	d007      	beq.n	8004650 <OC5Config+0x7c>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	4a14      	ldr	r2, [pc, #80]	; (8004694 <OC5Config+0xc0>)
 8004644:	4293      	cmp	r3, r2
 8004646:	d003      	beq.n	8004650 <OC5Config+0x7c>
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	4a13      	ldr	r2, [pc, #76]	; (8004698 <OC5Config+0xc4>)
 800464c:	4293      	cmp	r3, r2
 800464e:	d109      	bne.n	8004664 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	699b      	ldr	r3, [r3, #24]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	431a      	orrs	r2, r3
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	68ba      	ldr	r2, [r7, #8]
 8004668:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	4619      	mov	r1, r3
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f7ff fcaa 	bl	8003fca <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68fa      	ldr	r2, [r7, #12]
 800467a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800467c:	2300      	movs	r3, #0
}
 800467e:	4618      	mov	r0, r3
 8004680:	3710      	adds	r7, #16
 8004682:	46bd      	mov	sp, r7
 8004684:	bd80      	pop	{r7, pc}
 8004686:	bf00      	nop
 8004688:	40012c00 	.word	0x40012c00
 800468c:	40013400 	.word	0x40013400
 8004690:	40014000 	.word	0x40014000
 8004694:	40014400 	.word	0x40014400
 8004698:	40014800 	.word	0x40014800

0800469c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	6a1b      	ldr	r3, [r3, #32]
 80046aa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6a1b      	ldr	r3, [r3, #32]
 80046b6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046bc:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80046c4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046c8:	683a      	ldr	r2, [r7, #0]
 80046ca:	6812      	ldr	r2, [r2, #0]
 80046cc:	0212      	lsls	r2, r2, #8
 80046ce:	4313      	orrs	r3, r2
 80046d0:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	051b      	lsls	r3, r3, #20
 80046de:	4313      	orrs	r3, r2
 80046e0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046e8:	683b      	ldr	r3, [r7, #0]
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	051b      	lsls	r3, r3, #20
 80046ee:	4313      	orrs	r3, r2
 80046f0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	4a16      	ldr	r2, [pc, #88]	; (8004750 <OC6Config+0xb4>)
 80046f6:	4293      	cmp	r3, r2
 80046f8:	d00f      	beq.n	800471a <OC6Config+0x7e>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	4a15      	ldr	r2, [pc, #84]	; (8004754 <OC6Config+0xb8>)
 80046fe:	4293      	cmp	r3, r2
 8004700:	d00b      	beq.n	800471a <OC6Config+0x7e>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a14      	ldr	r2, [pc, #80]	; (8004758 <OC6Config+0xbc>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d007      	beq.n	800471a <OC6Config+0x7e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	4a13      	ldr	r2, [pc, #76]	; (800475c <OC6Config+0xc0>)
 800470e:	4293      	cmp	r3, r2
 8004710:	d003      	beq.n	800471a <OC6Config+0x7e>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	4a12      	ldr	r2, [pc, #72]	; (8004760 <OC6Config+0xc4>)
 8004716:	4293      	cmp	r3, r2
 8004718:	d109      	bne.n	800472e <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	699b      	ldr	r3, [r3, #24]
 8004726:	029b      	lsls	r3, r3, #10
 8004728:	431a      	orrs	r2, r3
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	68ba      	ldr	r2, [r7, #8]
 8004732:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	68db      	ldr	r3, [r3, #12]
 8004738:	4619      	mov	r1, r3
 800473a:	6878      	ldr	r0, [r7, #4]
 800473c:	f7ff fc55 	bl	8003fea <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	68fa      	ldr	r2, [r7, #12]
 8004744:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004746:	2300      	movs	r3, #0
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	40012c00 	.word	0x40012c00
 8004754:	40013400 	.word	0x40013400
 8004758:	40014000 	.word	0x40014000
 800475c:	40014400 	.word	0x40014400
 8004760:	40014800 	.word	0x40014800

08004764 <LL_USART_IsEnabled>:
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f003 0301 	and.w	r3, r3, #1
 8004774:	2b01      	cmp	r3, #1
 8004776:	d101      	bne.n	800477c <LL_USART_IsEnabled+0x18>
 8004778:	2301      	movs	r3, #1
 800477a:	e000      	b.n	800477e <LL_USART_IsEnabled+0x1a>
 800477c:	2300      	movs	r3, #0
}
 800477e:	4618      	mov	r0, r3
 8004780:	370c      	adds	r7, #12
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr

0800478a <LL_USART_SetStopBitsLength>:
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	431a      	orrs	r2, r3
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	605a      	str	r2, [r3, #4]
}
 80047a4:	bf00      	nop
 80047a6:	370c      	adds	r7, #12
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <LL_USART_SetHWFlowCtrl>:
{
 80047b0:	b480      	push	{r7}
 80047b2:	b083      	sub	sp, #12
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	6078      	str	r0, [r7, #4]
 80047b8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	689b      	ldr	r3, [r3, #8]
 80047be:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	431a      	orrs	r2, r3
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	609a      	str	r2, [r3, #8]
}
 80047ca:	bf00      	nop
 80047cc:	370c      	adds	r7, #12
 80047ce:	46bd      	mov	sp, r7
 80047d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d4:	4770      	bx	lr

080047d6 <LL_USART_SetBaudRate>:
{
 80047d6:	b480      	push	{r7}
 80047d8:	b087      	sub	sp, #28
 80047da:	af00      	add	r7, sp, #0
 80047dc:	60f8      	str	r0, [r7, #12]
 80047de:	60b9      	str	r1, [r7, #8]
 80047e0:	607a      	str	r2, [r7, #4]
 80047e2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047ea:	d11a      	bne.n	8004822 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80047ec:	68bb      	ldr	r3, [r7, #8]
 80047ee:	005a      	lsls	r2, r3, #1
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	085b      	lsrs	r3, r3, #1
 80047f4:	441a      	add	r2, r3
 80047f6:	683b      	ldr	r3, [r7, #0]
 80047f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fc:	b29b      	uxth	r3, r3
 80047fe:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 8004800:	697a      	ldr	r2, [r7, #20]
 8004802:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8004806:	4013      	ands	r3, r2
 8004808:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800480a:	697b      	ldr	r3, [r7, #20]
 800480c:	085b      	lsrs	r3, r3, #1
 800480e:	b29b      	uxth	r3, r3
 8004810:	f003 0307 	and.w	r3, r3, #7
 8004814:	693a      	ldr	r2, [r7, #16]
 8004816:	4313      	orrs	r3, r2
 8004818:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	693a      	ldr	r2, [r7, #16]
 800481e:	60da      	str	r2, [r3, #12]
}
 8004820:	e00a      	b.n	8004838 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	085a      	lsrs	r2, r3, #1
 8004826:	68bb      	ldr	r3, [r7, #8]
 8004828:	441a      	add	r2, r3
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004830:	b29b      	uxth	r3, r3
 8004832:	461a      	mov	r2, r3
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	60da      	str	r2, [r3, #12]
}
 8004838:	bf00      	nop
 800483a:	371c      	adds	r7, #28
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr

08004844 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b084      	sub	sp, #16
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800484e:	2301      	movs	r3, #1
 8004850:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004852:	2300      	movs	r3, #0
 8004854:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004856:	6878      	ldr	r0, [r7, #4]
 8004858:	f7ff ff84 	bl	8004764 <LL_USART_IsEnabled>
 800485c:	4603      	mov	r3, r0
 800485e:	2b00      	cmp	r3, #0
 8004860:	d15b      	bne.n	800491a <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	4b2f      	ldr	r3, [pc, #188]	; (8004924 <LL_USART_Init+0xe0>)
 8004868:	4013      	ands	r3, r2
 800486a:	683a      	ldr	r2, [r7, #0]
 800486c:	6851      	ldr	r1, [r2, #4]
 800486e:	683a      	ldr	r2, [r7, #0]
 8004870:	68d2      	ldr	r2, [r2, #12]
 8004872:	4311      	orrs	r1, r2
 8004874:	683a      	ldr	r2, [r7, #0]
 8004876:	6912      	ldr	r2, [r2, #16]
 8004878:	4311      	orrs	r1, r2
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	6992      	ldr	r2, [r2, #24]
 800487e:	430a      	orrs	r2, r1
 8004880:	431a      	orrs	r2, r3
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	689b      	ldr	r3, [r3, #8]
 800488a:	4619      	mov	r1, r3
 800488c:	6878      	ldr	r0, [r7, #4]
 800488e:	f7ff ff7c 	bl	800478a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	695b      	ldr	r3, [r3, #20]
 8004896:	4619      	mov	r1, r3
 8004898:	6878      	ldr	r0, [r7, #4]
 800489a:	f7ff ff89 	bl	80047b0 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	4a21      	ldr	r2, [pc, #132]	; (8004928 <LL_USART_Init+0xe4>)
 80048a2:	4293      	cmp	r3, r2
 80048a4:	d104      	bne.n	80048b0 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80048a6:	2003      	movs	r0, #3
 80048a8:	f7fe fff6 	bl	8003898 <LL_RCC_GetUSARTClockFreq>
 80048ac:	60b8      	str	r0, [r7, #8]
 80048ae:	e023      	b.n	80048f8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	4a1e      	ldr	r2, [pc, #120]	; (800492c <LL_USART_Init+0xe8>)
 80048b4:	4293      	cmp	r3, r2
 80048b6:	d104      	bne.n	80048c2 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80048b8:	200c      	movs	r0, #12
 80048ba:	f7fe ffed 	bl	8003898 <LL_RCC_GetUSARTClockFreq>
 80048be:	60b8      	str	r0, [r7, #8]
 80048c0:	e01a      	b.n	80048f8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	4a1a      	ldr	r2, [pc, #104]	; (8004930 <LL_USART_Init+0xec>)
 80048c6:	4293      	cmp	r3, r2
 80048c8:	d104      	bne.n	80048d4 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80048ca:	2030      	movs	r0, #48	; 0x30
 80048cc:	f7fe ffe4 	bl	8003898 <LL_RCC_GetUSARTClockFreq>
 80048d0:	60b8      	str	r0, [r7, #8]
 80048d2:	e011      	b.n	80048f8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	4a17      	ldr	r2, [pc, #92]	; (8004934 <LL_USART_Init+0xf0>)
 80048d8:	4293      	cmp	r3, r2
 80048da:	d104      	bne.n	80048e6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 80048dc:	20c0      	movs	r0, #192	; 0xc0
 80048de:	f7ff f8bb 	bl	8003a58 <LL_RCC_GetUARTClockFreq>
 80048e2:	60b8      	str	r0, [r7, #8]
 80048e4:	e008      	b.n	80048f8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	4a13      	ldr	r2, [pc, #76]	; (8004938 <LL_USART_Init+0xf4>)
 80048ea:	4293      	cmp	r3, r2
 80048ec:	d104      	bne.n	80048f8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80048ee:	f44f 7040 	mov.w	r0, #768	; 0x300
 80048f2:	f7ff f8b1 	bl	8003a58 <LL_RCC_GetUARTClockFreq>
 80048f6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d00d      	beq.n	800491a <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80048fe:	683b      	ldr	r3, [r7, #0]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d009      	beq.n	800491a <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8004906:	2300      	movs	r3, #0
 8004908:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 800490a:	683b      	ldr	r3, [r7, #0]
 800490c:	699a      	ldr	r2, [r3, #24]
 800490e:	683b      	ldr	r3, [r7, #0]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	68b9      	ldr	r1, [r7, #8]
 8004914:	6878      	ldr	r0, [r7, #4]
 8004916:	f7ff ff5e 	bl	80047d6 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 800491a:	7bfb      	ldrb	r3, [r7, #15]
}
 800491c:	4618      	mov	r0, r3
 800491e:	3710      	adds	r7, #16
 8004920:	46bd      	mov	sp, r7
 8004922:	bd80      	pop	{r7, pc}
 8004924:	efff69f3 	.word	0xefff69f3
 8004928:	40013800 	.word	0x40013800
 800492c:	40004400 	.word	0x40004400
 8004930:	40004800 	.word	0x40004800
 8004934:	40004c00 	.word	0x40004c00
 8004938:	40005000 	.word	0x40005000

0800493c <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 800493c:	b480      	push	{r7}
 800493e:	b083      	sub	sp, #12
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004946:	687a      	ldr	r2, [r7, #4]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	fbb2 f3f3 	udiv	r3, r2, r3
 800494e:	4a07      	ldr	r2, [pc, #28]	; (800496c <LL_InitTick+0x30>)
 8004950:	3b01      	subs	r3, #1
 8004952:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004954:	4b05      	ldr	r3, [pc, #20]	; (800496c <LL_InitTick+0x30>)
 8004956:	2200      	movs	r2, #0
 8004958:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800495a:	4b04      	ldr	r3, [pc, #16]	; (800496c <LL_InitTick+0x30>)
 800495c:	2205      	movs	r2, #5
 800495e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004960:	bf00      	nop
 8004962:	370c      	adds	r7, #12
 8004964:	46bd      	mov	sp, r7
 8004966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496a:	4770      	bx	lr
 800496c:	e000e010 	.word	0xe000e010

08004970 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004978:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800497c:	6878      	ldr	r0, [r7, #4]
 800497e:	f7ff ffdd 	bl	800493c <LL_InitTick>
}
 8004982:	bf00      	nop
 8004984:	3708      	adds	r7, #8
 8004986:	46bd      	mov	sp, r7
 8004988:	bd80      	pop	{r7, pc}
	...

0800498c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004994:	4b0f      	ldr	r3, [pc, #60]	; (80049d4 <LL_mDelay+0x48>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800499e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049a6:	d00c      	beq.n	80049c2 <LL_mDelay+0x36>
  {
    tmpDelay++;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	3301      	adds	r3, #1
 80049ac:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 80049ae:	e008      	b.n	80049c2 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 80049b0:	4b08      	ldr	r3, [pc, #32]	; (80049d4 <LL_mDelay+0x48>)
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <LL_mDelay+0x36>
    {
      tmpDelay--;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	3b01      	subs	r3, #1
 80049c0:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d1f3      	bne.n	80049b0 <LL_mDelay+0x24>
    }
  }
}
 80049c8:	bf00      	nop
 80049ca:	3714      	adds	r7, #20
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr
 80049d4:	e000e010 	.word	0xe000e010

080049d8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80049d8:	b480      	push	{r7}
 80049da:	b083      	sub	sp, #12
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80049e0:	4a04      	ldr	r2, [pc, #16]	; (80049f4 <LL_SetSystemCoreClock+0x1c>)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6013      	str	r3, [r2, #0]
}
 80049e6:	bf00      	nop
 80049e8:	370c      	adds	r7, #12
 80049ea:	46bd      	mov	sp, r7
 80049ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	2000055c 	.word	0x2000055c

080049f8 <__errno>:
 80049f8:	4b01      	ldr	r3, [pc, #4]	; (8004a00 <__errno+0x8>)
 80049fa:	6818      	ldr	r0, [r3, #0]
 80049fc:	4770      	bx	lr
 80049fe:	bf00      	nop
 8004a00:	20000560 	.word	0x20000560

08004a04 <__libc_init_array>:
 8004a04:	b570      	push	{r4, r5, r6, lr}
 8004a06:	4e0d      	ldr	r6, [pc, #52]	; (8004a3c <__libc_init_array+0x38>)
 8004a08:	4c0d      	ldr	r4, [pc, #52]	; (8004a40 <__libc_init_array+0x3c>)
 8004a0a:	1ba4      	subs	r4, r4, r6
 8004a0c:	10a4      	asrs	r4, r4, #2
 8004a0e:	2500      	movs	r5, #0
 8004a10:	42a5      	cmp	r5, r4
 8004a12:	d109      	bne.n	8004a28 <__libc_init_array+0x24>
 8004a14:	4e0b      	ldr	r6, [pc, #44]	; (8004a44 <__libc_init_array+0x40>)
 8004a16:	4c0c      	ldr	r4, [pc, #48]	; (8004a48 <__libc_init_array+0x44>)
 8004a18:	f000 ff7a 	bl	8005910 <_init>
 8004a1c:	1ba4      	subs	r4, r4, r6
 8004a1e:	10a4      	asrs	r4, r4, #2
 8004a20:	2500      	movs	r5, #0
 8004a22:	42a5      	cmp	r5, r4
 8004a24:	d105      	bne.n	8004a32 <__libc_init_array+0x2e>
 8004a26:	bd70      	pop	{r4, r5, r6, pc}
 8004a28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a2c:	4798      	blx	r3
 8004a2e:	3501      	adds	r5, #1
 8004a30:	e7ee      	b.n	8004a10 <__libc_init_array+0xc>
 8004a32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a36:	4798      	blx	r3
 8004a38:	3501      	adds	r5, #1
 8004a3a:	e7f2      	b.n	8004a22 <__libc_init_array+0x1e>
 8004a3c:	08006914 	.word	0x08006914
 8004a40:	08006914 	.word	0x08006914
 8004a44:	08006914 	.word	0x08006914
 8004a48:	08006918 	.word	0x08006918

08004a4c <memset>:
 8004a4c:	4402      	add	r2, r0
 8004a4e:	4603      	mov	r3, r0
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d100      	bne.n	8004a56 <memset+0xa>
 8004a54:	4770      	bx	lr
 8004a56:	f803 1b01 	strb.w	r1, [r3], #1
 8004a5a:	e7f9      	b.n	8004a50 <memset+0x4>

08004a5c <iprintf>:
 8004a5c:	b40f      	push	{r0, r1, r2, r3}
 8004a5e:	4b0a      	ldr	r3, [pc, #40]	; (8004a88 <iprintf+0x2c>)
 8004a60:	b513      	push	{r0, r1, r4, lr}
 8004a62:	681c      	ldr	r4, [r3, #0]
 8004a64:	b124      	cbz	r4, 8004a70 <iprintf+0x14>
 8004a66:	69a3      	ldr	r3, [r4, #24]
 8004a68:	b913      	cbnz	r3, 8004a70 <iprintf+0x14>
 8004a6a:	4620      	mov	r0, r4
 8004a6c:	f000 fa34 	bl	8004ed8 <__sinit>
 8004a70:	ab05      	add	r3, sp, #20
 8004a72:	9a04      	ldr	r2, [sp, #16]
 8004a74:	68a1      	ldr	r1, [r4, #8]
 8004a76:	9301      	str	r3, [sp, #4]
 8004a78:	4620      	mov	r0, r4
 8004a7a:	f000 fbed 	bl	8005258 <_vfiprintf_r>
 8004a7e:	b002      	add	sp, #8
 8004a80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a84:	b004      	add	sp, #16
 8004a86:	4770      	bx	lr
 8004a88:	20000560 	.word	0x20000560

08004a8c <_puts_r>:
 8004a8c:	b570      	push	{r4, r5, r6, lr}
 8004a8e:	460e      	mov	r6, r1
 8004a90:	4605      	mov	r5, r0
 8004a92:	b118      	cbz	r0, 8004a9c <_puts_r+0x10>
 8004a94:	6983      	ldr	r3, [r0, #24]
 8004a96:	b90b      	cbnz	r3, 8004a9c <_puts_r+0x10>
 8004a98:	f000 fa1e 	bl	8004ed8 <__sinit>
 8004a9c:	69ab      	ldr	r3, [r5, #24]
 8004a9e:	68ac      	ldr	r4, [r5, #8]
 8004aa0:	b913      	cbnz	r3, 8004aa8 <_puts_r+0x1c>
 8004aa2:	4628      	mov	r0, r5
 8004aa4:	f000 fa18 	bl	8004ed8 <__sinit>
 8004aa8:	4b23      	ldr	r3, [pc, #140]	; (8004b38 <_puts_r+0xac>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	d117      	bne.n	8004ade <_puts_r+0x52>
 8004aae:	686c      	ldr	r4, [r5, #4]
 8004ab0:	89a3      	ldrh	r3, [r4, #12]
 8004ab2:	071b      	lsls	r3, r3, #28
 8004ab4:	d51d      	bpl.n	8004af2 <_puts_r+0x66>
 8004ab6:	6923      	ldr	r3, [r4, #16]
 8004ab8:	b1db      	cbz	r3, 8004af2 <_puts_r+0x66>
 8004aba:	3e01      	subs	r6, #1
 8004abc:	68a3      	ldr	r3, [r4, #8]
 8004abe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004ac2:	3b01      	subs	r3, #1
 8004ac4:	60a3      	str	r3, [r4, #8]
 8004ac6:	b9e9      	cbnz	r1, 8004b04 <_puts_r+0x78>
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	da2e      	bge.n	8004b2a <_puts_r+0x9e>
 8004acc:	4622      	mov	r2, r4
 8004ace:	210a      	movs	r1, #10
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	f000 f851 	bl	8004b78 <__swbuf_r>
 8004ad6:	3001      	adds	r0, #1
 8004ad8:	d011      	beq.n	8004afe <_puts_r+0x72>
 8004ada:	200a      	movs	r0, #10
 8004adc:	e011      	b.n	8004b02 <_puts_r+0x76>
 8004ade:	4b17      	ldr	r3, [pc, #92]	; (8004b3c <_puts_r+0xb0>)
 8004ae0:	429c      	cmp	r4, r3
 8004ae2:	d101      	bne.n	8004ae8 <_puts_r+0x5c>
 8004ae4:	68ac      	ldr	r4, [r5, #8]
 8004ae6:	e7e3      	b.n	8004ab0 <_puts_r+0x24>
 8004ae8:	4b15      	ldr	r3, [pc, #84]	; (8004b40 <_puts_r+0xb4>)
 8004aea:	429c      	cmp	r4, r3
 8004aec:	bf08      	it	eq
 8004aee:	68ec      	ldreq	r4, [r5, #12]
 8004af0:	e7de      	b.n	8004ab0 <_puts_r+0x24>
 8004af2:	4621      	mov	r1, r4
 8004af4:	4628      	mov	r0, r5
 8004af6:	f000 f891 	bl	8004c1c <__swsetup_r>
 8004afa:	2800      	cmp	r0, #0
 8004afc:	d0dd      	beq.n	8004aba <_puts_r+0x2e>
 8004afe:	f04f 30ff 	mov.w	r0, #4294967295
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	da04      	bge.n	8004b12 <_puts_r+0x86>
 8004b08:	69a2      	ldr	r2, [r4, #24]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	dc06      	bgt.n	8004b1c <_puts_r+0x90>
 8004b0e:	290a      	cmp	r1, #10
 8004b10:	d004      	beq.n	8004b1c <_puts_r+0x90>
 8004b12:	6823      	ldr	r3, [r4, #0]
 8004b14:	1c5a      	adds	r2, r3, #1
 8004b16:	6022      	str	r2, [r4, #0]
 8004b18:	7019      	strb	r1, [r3, #0]
 8004b1a:	e7cf      	b.n	8004abc <_puts_r+0x30>
 8004b1c:	4622      	mov	r2, r4
 8004b1e:	4628      	mov	r0, r5
 8004b20:	f000 f82a 	bl	8004b78 <__swbuf_r>
 8004b24:	3001      	adds	r0, #1
 8004b26:	d1c9      	bne.n	8004abc <_puts_r+0x30>
 8004b28:	e7e9      	b.n	8004afe <_puts_r+0x72>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	200a      	movs	r0, #10
 8004b2e:	1c5a      	adds	r2, r3, #1
 8004b30:	6022      	str	r2, [r4, #0]
 8004b32:	7018      	strb	r0, [r3, #0]
 8004b34:	e7e5      	b.n	8004b02 <_puts_r+0x76>
 8004b36:	bf00      	nop
 8004b38:	08006898 	.word	0x08006898
 8004b3c:	080068b8 	.word	0x080068b8
 8004b40:	08006878 	.word	0x08006878

08004b44 <puts>:
 8004b44:	4b02      	ldr	r3, [pc, #8]	; (8004b50 <puts+0xc>)
 8004b46:	4601      	mov	r1, r0
 8004b48:	6818      	ldr	r0, [r3, #0]
 8004b4a:	f7ff bf9f 	b.w	8004a8c <_puts_r>
 8004b4e:	bf00      	nop
 8004b50:	20000560 	.word	0x20000560

08004b54 <strncmp>:
 8004b54:	b510      	push	{r4, lr}
 8004b56:	b16a      	cbz	r2, 8004b74 <strncmp+0x20>
 8004b58:	3901      	subs	r1, #1
 8004b5a:	1884      	adds	r4, r0, r2
 8004b5c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b60:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d103      	bne.n	8004b70 <strncmp+0x1c>
 8004b68:	42a0      	cmp	r0, r4
 8004b6a:	d001      	beq.n	8004b70 <strncmp+0x1c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d1f5      	bne.n	8004b5c <strncmp+0x8>
 8004b70:	1a98      	subs	r0, r3, r2
 8004b72:	bd10      	pop	{r4, pc}
 8004b74:	4610      	mov	r0, r2
 8004b76:	e7fc      	b.n	8004b72 <strncmp+0x1e>

08004b78 <__swbuf_r>:
 8004b78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b7a:	460e      	mov	r6, r1
 8004b7c:	4614      	mov	r4, r2
 8004b7e:	4605      	mov	r5, r0
 8004b80:	b118      	cbz	r0, 8004b8a <__swbuf_r+0x12>
 8004b82:	6983      	ldr	r3, [r0, #24]
 8004b84:	b90b      	cbnz	r3, 8004b8a <__swbuf_r+0x12>
 8004b86:	f000 f9a7 	bl	8004ed8 <__sinit>
 8004b8a:	4b21      	ldr	r3, [pc, #132]	; (8004c10 <__swbuf_r+0x98>)
 8004b8c:	429c      	cmp	r4, r3
 8004b8e:	d12a      	bne.n	8004be6 <__swbuf_r+0x6e>
 8004b90:	686c      	ldr	r4, [r5, #4]
 8004b92:	69a3      	ldr	r3, [r4, #24]
 8004b94:	60a3      	str	r3, [r4, #8]
 8004b96:	89a3      	ldrh	r3, [r4, #12]
 8004b98:	071a      	lsls	r2, r3, #28
 8004b9a:	d52e      	bpl.n	8004bfa <__swbuf_r+0x82>
 8004b9c:	6923      	ldr	r3, [r4, #16]
 8004b9e:	b363      	cbz	r3, 8004bfa <__swbuf_r+0x82>
 8004ba0:	6923      	ldr	r3, [r4, #16]
 8004ba2:	6820      	ldr	r0, [r4, #0]
 8004ba4:	1ac0      	subs	r0, r0, r3
 8004ba6:	6963      	ldr	r3, [r4, #20]
 8004ba8:	b2f6      	uxtb	r6, r6
 8004baa:	4283      	cmp	r3, r0
 8004bac:	4637      	mov	r7, r6
 8004bae:	dc04      	bgt.n	8004bba <__swbuf_r+0x42>
 8004bb0:	4621      	mov	r1, r4
 8004bb2:	4628      	mov	r0, r5
 8004bb4:	f000 f926 	bl	8004e04 <_fflush_r>
 8004bb8:	bb28      	cbnz	r0, 8004c06 <__swbuf_r+0x8e>
 8004bba:	68a3      	ldr	r3, [r4, #8]
 8004bbc:	3b01      	subs	r3, #1
 8004bbe:	60a3      	str	r3, [r4, #8]
 8004bc0:	6823      	ldr	r3, [r4, #0]
 8004bc2:	1c5a      	adds	r2, r3, #1
 8004bc4:	6022      	str	r2, [r4, #0]
 8004bc6:	701e      	strb	r6, [r3, #0]
 8004bc8:	6963      	ldr	r3, [r4, #20]
 8004bca:	3001      	adds	r0, #1
 8004bcc:	4283      	cmp	r3, r0
 8004bce:	d004      	beq.n	8004bda <__swbuf_r+0x62>
 8004bd0:	89a3      	ldrh	r3, [r4, #12]
 8004bd2:	07db      	lsls	r3, r3, #31
 8004bd4:	d519      	bpl.n	8004c0a <__swbuf_r+0x92>
 8004bd6:	2e0a      	cmp	r6, #10
 8004bd8:	d117      	bne.n	8004c0a <__swbuf_r+0x92>
 8004bda:	4621      	mov	r1, r4
 8004bdc:	4628      	mov	r0, r5
 8004bde:	f000 f911 	bl	8004e04 <_fflush_r>
 8004be2:	b190      	cbz	r0, 8004c0a <__swbuf_r+0x92>
 8004be4:	e00f      	b.n	8004c06 <__swbuf_r+0x8e>
 8004be6:	4b0b      	ldr	r3, [pc, #44]	; (8004c14 <__swbuf_r+0x9c>)
 8004be8:	429c      	cmp	r4, r3
 8004bea:	d101      	bne.n	8004bf0 <__swbuf_r+0x78>
 8004bec:	68ac      	ldr	r4, [r5, #8]
 8004bee:	e7d0      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bf0:	4b09      	ldr	r3, [pc, #36]	; (8004c18 <__swbuf_r+0xa0>)
 8004bf2:	429c      	cmp	r4, r3
 8004bf4:	bf08      	it	eq
 8004bf6:	68ec      	ldreq	r4, [r5, #12]
 8004bf8:	e7cb      	b.n	8004b92 <__swbuf_r+0x1a>
 8004bfa:	4621      	mov	r1, r4
 8004bfc:	4628      	mov	r0, r5
 8004bfe:	f000 f80d 	bl	8004c1c <__swsetup_r>
 8004c02:	2800      	cmp	r0, #0
 8004c04:	d0cc      	beq.n	8004ba0 <__swbuf_r+0x28>
 8004c06:	f04f 37ff 	mov.w	r7, #4294967295
 8004c0a:	4638      	mov	r0, r7
 8004c0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004c0e:	bf00      	nop
 8004c10:	08006898 	.word	0x08006898
 8004c14:	080068b8 	.word	0x080068b8
 8004c18:	08006878 	.word	0x08006878

08004c1c <__swsetup_r>:
 8004c1c:	4b32      	ldr	r3, [pc, #200]	; (8004ce8 <__swsetup_r+0xcc>)
 8004c1e:	b570      	push	{r4, r5, r6, lr}
 8004c20:	681d      	ldr	r5, [r3, #0]
 8004c22:	4606      	mov	r6, r0
 8004c24:	460c      	mov	r4, r1
 8004c26:	b125      	cbz	r5, 8004c32 <__swsetup_r+0x16>
 8004c28:	69ab      	ldr	r3, [r5, #24]
 8004c2a:	b913      	cbnz	r3, 8004c32 <__swsetup_r+0x16>
 8004c2c:	4628      	mov	r0, r5
 8004c2e:	f000 f953 	bl	8004ed8 <__sinit>
 8004c32:	4b2e      	ldr	r3, [pc, #184]	; (8004cec <__swsetup_r+0xd0>)
 8004c34:	429c      	cmp	r4, r3
 8004c36:	d10f      	bne.n	8004c58 <__swsetup_r+0x3c>
 8004c38:	686c      	ldr	r4, [r5, #4]
 8004c3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c3e:	b29a      	uxth	r2, r3
 8004c40:	0715      	lsls	r5, r2, #28
 8004c42:	d42c      	bmi.n	8004c9e <__swsetup_r+0x82>
 8004c44:	06d0      	lsls	r0, r2, #27
 8004c46:	d411      	bmi.n	8004c6c <__swsetup_r+0x50>
 8004c48:	2209      	movs	r2, #9
 8004c4a:	6032      	str	r2, [r6, #0]
 8004c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c50:	81a3      	strh	r3, [r4, #12]
 8004c52:	f04f 30ff 	mov.w	r0, #4294967295
 8004c56:	e03e      	b.n	8004cd6 <__swsetup_r+0xba>
 8004c58:	4b25      	ldr	r3, [pc, #148]	; (8004cf0 <__swsetup_r+0xd4>)
 8004c5a:	429c      	cmp	r4, r3
 8004c5c:	d101      	bne.n	8004c62 <__swsetup_r+0x46>
 8004c5e:	68ac      	ldr	r4, [r5, #8]
 8004c60:	e7eb      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c62:	4b24      	ldr	r3, [pc, #144]	; (8004cf4 <__swsetup_r+0xd8>)
 8004c64:	429c      	cmp	r4, r3
 8004c66:	bf08      	it	eq
 8004c68:	68ec      	ldreq	r4, [r5, #12]
 8004c6a:	e7e6      	b.n	8004c3a <__swsetup_r+0x1e>
 8004c6c:	0751      	lsls	r1, r2, #29
 8004c6e:	d512      	bpl.n	8004c96 <__swsetup_r+0x7a>
 8004c70:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c72:	b141      	cbz	r1, 8004c86 <__swsetup_r+0x6a>
 8004c74:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c78:	4299      	cmp	r1, r3
 8004c7a:	d002      	beq.n	8004c82 <__swsetup_r+0x66>
 8004c7c:	4630      	mov	r0, r6
 8004c7e:	f000 fa19 	bl	80050b4 <_free_r>
 8004c82:	2300      	movs	r3, #0
 8004c84:	6363      	str	r3, [r4, #52]	; 0x34
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c8c:	81a3      	strh	r3, [r4, #12]
 8004c8e:	2300      	movs	r3, #0
 8004c90:	6063      	str	r3, [r4, #4]
 8004c92:	6923      	ldr	r3, [r4, #16]
 8004c94:	6023      	str	r3, [r4, #0]
 8004c96:	89a3      	ldrh	r3, [r4, #12]
 8004c98:	f043 0308 	orr.w	r3, r3, #8
 8004c9c:	81a3      	strh	r3, [r4, #12]
 8004c9e:	6923      	ldr	r3, [r4, #16]
 8004ca0:	b94b      	cbnz	r3, 8004cb6 <__swsetup_r+0x9a>
 8004ca2:	89a3      	ldrh	r3, [r4, #12]
 8004ca4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004ca8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004cac:	d003      	beq.n	8004cb6 <__swsetup_r+0x9a>
 8004cae:	4621      	mov	r1, r4
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	f000 f9bf 	bl	8005034 <__smakebuf_r>
 8004cb6:	89a2      	ldrh	r2, [r4, #12]
 8004cb8:	f012 0301 	ands.w	r3, r2, #1
 8004cbc:	d00c      	beq.n	8004cd8 <__swsetup_r+0xbc>
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60a3      	str	r3, [r4, #8]
 8004cc2:	6963      	ldr	r3, [r4, #20]
 8004cc4:	425b      	negs	r3, r3
 8004cc6:	61a3      	str	r3, [r4, #24]
 8004cc8:	6923      	ldr	r3, [r4, #16]
 8004cca:	b953      	cbnz	r3, 8004ce2 <__swsetup_r+0xc6>
 8004ccc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004cd0:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004cd4:	d1ba      	bne.n	8004c4c <__swsetup_r+0x30>
 8004cd6:	bd70      	pop	{r4, r5, r6, pc}
 8004cd8:	0792      	lsls	r2, r2, #30
 8004cda:	bf58      	it	pl
 8004cdc:	6963      	ldrpl	r3, [r4, #20]
 8004cde:	60a3      	str	r3, [r4, #8]
 8004ce0:	e7f2      	b.n	8004cc8 <__swsetup_r+0xac>
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	e7f7      	b.n	8004cd6 <__swsetup_r+0xba>
 8004ce6:	bf00      	nop
 8004ce8:	20000560 	.word	0x20000560
 8004cec:	08006898 	.word	0x08006898
 8004cf0:	080068b8 	.word	0x080068b8
 8004cf4:	08006878 	.word	0x08006878

08004cf8 <__sflush_r>:
 8004cf8:	898a      	ldrh	r2, [r1, #12]
 8004cfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cfe:	4605      	mov	r5, r0
 8004d00:	0710      	lsls	r0, r2, #28
 8004d02:	460c      	mov	r4, r1
 8004d04:	d458      	bmi.n	8004db8 <__sflush_r+0xc0>
 8004d06:	684b      	ldr	r3, [r1, #4]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	dc05      	bgt.n	8004d18 <__sflush_r+0x20>
 8004d0c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	dc02      	bgt.n	8004d18 <__sflush_r+0x20>
 8004d12:	2000      	movs	r0, #0
 8004d14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004d18:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d1a:	2e00      	cmp	r6, #0
 8004d1c:	d0f9      	beq.n	8004d12 <__sflush_r+0x1a>
 8004d1e:	2300      	movs	r3, #0
 8004d20:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004d24:	682f      	ldr	r7, [r5, #0]
 8004d26:	6a21      	ldr	r1, [r4, #32]
 8004d28:	602b      	str	r3, [r5, #0]
 8004d2a:	d032      	beq.n	8004d92 <__sflush_r+0x9a>
 8004d2c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004d2e:	89a3      	ldrh	r3, [r4, #12]
 8004d30:	075a      	lsls	r2, r3, #29
 8004d32:	d505      	bpl.n	8004d40 <__sflush_r+0x48>
 8004d34:	6863      	ldr	r3, [r4, #4]
 8004d36:	1ac0      	subs	r0, r0, r3
 8004d38:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004d3a:	b10b      	cbz	r3, 8004d40 <__sflush_r+0x48>
 8004d3c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004d3e:	1ac0      	subs	r0, r0, r3
 8004d40:	2300      	movs	r3, #0
 8004d42:	4602      	mov	r2, r0
 8004d44:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d46:	6a21      	ldr	r1, [r4, #32]
 8004d48:	4628      	mov	r0, r5
 8004d4a:	47b0      	blx	r6
 8004d4c:	1c43      	adds	r3, r0, #1
 8004d4e:	89a3      	ldrh	r3, [r4, #12]
 8004d50:	d106      	bne.n	8004d60 <__sflush_r+0x68>
 8004d52:	6829      	ldr	r1, [r5, #0]
 8004d54:	291d      	cmp	r1, #29
 8004d56:	d848      	bhi.n	8004dea <__sflush_r+0xf2>
 8004d58:	4a29      	ldr	r2, [pc, #164]	; (8004e00 <__sflush_r+0x108>)
 8004d5a:	40ca      	lsrs	r2, r1
 8004d5c:	07d6      	lsls	r6, r2, #31
 8004d5e:	d544      	bpl.n	8004dea <__sflush_r+0xf2>
 8004d60:	2200      	movs	r2, #0
 8004d62:	6062      	str	r2, [r4, #4]
 8004d64:	04d9      	lsls	r1, r3, #19
 8004d66:	6922      	ldr	r2, [r4, #16]
 8004d68:	6022      	str	r2, [r4, #0]
 8004d6a:	d504      	bpl.n	8004d76 <__sflush_r+0x7e>
 8004d6c:	1c42      	adds	r2, r0, #1
 8004d6e:	d101      	bne.n	8004d74 <__sflush_r+0x7c>
 8004d70:	682b      	ldr	r3, [r5, #0]
 8004d72:	b903      	cbnz	r3, 8004d76 <__sflush_r+0x7e>
 8004d74:	6560      	str	r0, [r4, #84]	; 0x54
 8004d76:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d78:	602f      	str	r7, [r5, #0]
 8004d7a:	2900      	cmp	r1, #0
 8004d7c:	d0c9      	beq.n	8004d12 <__sflush_r+0x1a>
 8004d7e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d82:	4299      	cmp	r1, r3
 8004d84:	d002      	beq.n	8004d8c <__sflush_r+0x94>
 8004d86:	4628      	mov	r0, r5
 8004d88:	f000 f994 	bl	80050b4 <_free_r>
 8004d8c:	2000      	movs	r0, #0
 8004d8e:	6360      	str	r0, [r4, #52]	; 0x34
 8004d90:	e7c0      	b.n	8004d14 <__sflush_r+0x1c>
 8004d92:	2301      	movs	r3, #1
 8004d94:	4628      	mov	r0, r5
 8004d96:	47b0      	blx	r6
 8004d98:	1c41      	adds	r1, r0, #1
 8004d9a:	d1c8      	bne.n	8004d2e <__sflush_r+0x36>
 8004d9c:	682b      	ldr	r3, [r5, #0]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d0c5      	beq.n	8004d2e <__sflush_r+0x36>
 8004da2:	2b1d      	cmp	r3, #29
 8004da4:	d001      	beq.n	8004daa <__sflush_r+0xb2>
 8004da6:	2b16      	cmp	r3, #22
 8004da8:	d101      	bne.n	8004dae <__sflush_r+0xb6>
 8004daa:	602f      	str	r7, [r5, #0]
 8004dac:	e7b1      	b.n	8004d12 <__sflush_r+0x1a>
 8004dae:	89a3      	ldrh	r3, [r4, #12]
 8004db0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004db4:	81a3      	strh	r3, [r4, #12]
 8004db6:	e7ad      	b.n	8004d14 <__sflush_r+0x1c>
 8004db8:	690f      	ldr	r7, [r1, #16]
 8004dba:	2f00      	cmp	r7, #0
 8004dbc:	d0a9      	beq.n	8004d12 <__sflush_r+0x1a>
 8004dbe:	0793      	lsls	r3, r2, #30
 8004dc0:	680e      	ldr	r6, [r1, #0]
 8004dc2:	bf08      	it	eq
 8004dc4:	694b      	ldreq	r3, [r1, #20]
 8004dc6:	600f      	str	r7, [r1, #0]
 8004dc8:	bf18      	it	ne
 8004dca:	2300      	movne	r3, #0
 8004dcc:	eba6 0807 	sub.w	r8, r6, r7
 8004dd0:	608b      	str	r3, [r1, #8]
 8004dd2:	f1b8 0f00 	cmp.w	r8, #0
 8004dd6:	dd9c      	ble.n	8004d12 <__sflush_r+0x1a>
 8004dd8:	4643      	mov	r3, r8
 8004dda:	463a      	mov	r2, r7
 8004ddc:	6a21      	ldr	r1, [r4, #32]
 8004dde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004de0:	4628      	mov	r0, r5
 8004de2:	47b0      	blx	r6
 8004de4:	2800      	cmp	r0, #0
 8004de6:	dc06      	bgt.n	8004df6 <__sflush_r+0xfe>
 8004de8:	89a3      	ldrh	r3, [r4, #12]
 8004dea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dee:	81a3      	strh	r3, [r4, #12]
 8004df0:	f04f 30ff 	mov.w	r0, #4294967295
 8004df4:	e78e      	b.n	8004d14 <__sflush_r+0x1c>
 8004df6:	4407      	add	r7, r0
 8004df8:	eba8 0800 	sub.w	r8, r8, r0
 8004dfc:	e7e9      	b.n	8004dd2 <__sflush_r+0xda>
 8004dfe:	bf00      	nop
 8004e00:	20400001 	.word	0x20400001

08004e04 <_fflush_r>:
 8004e04:	b538      	push	{r3, r4, r5, lr}
 8004e06:	690b      	ldr	r3, [r1, #16]
 8004e08:	4605      	mov	r5, r0
 8004e0a:	460c      	mov	r4, r1
 8004e0c:	b1db      	cbz	r3, 8004e46 <_fflush_r+0x42>
 8004e0e:	b118      	cbz	r0, 8004e18 <_fflush_r+0x14>
 8004e10:	6983      	ldr	r3, [r0, #24]
 8004e12:	b90b      	cbnz	r3, 8004e18 <_fflush_r+0x14>
 8004e14:	f000 f860 	bl	8004ed8 <__sinit>
 8004e18:	4b0c      	ldr	r3, [pc, #48]	; (8004e4c <_fflush_r+0x48>)
 8004e1a:	429c      	cmp	r4, r3
 8004e1c:	d109      	bne.n	8004e32 <_fflush_r+0x2e>
 8004e1e:	686c      	ldr	r4, [r5, #4]
 8004e20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004e24:	b17b      	cbz	r3, 8004e46 <_fflush_r+0x42>
 8004e26:	4621      	mov	r1, r4
 8004e28:	4628      	mov	r0, r5
 8004e2a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e2e:	f7ff bf63 	b.w	8004cf8 <__sflush_r>
 8004e32:	4b07      	ldr	r3, [pc, #28]	; (8004e50 <_fflush_r+0x4c>)
 8004e34:	429c      	cmp	r4, r3
 8004e36:	d101      	bne.n	8004e3c <_fflush_r+0x38>
 8004e38:	68ac      	ldr	r4, [r5, #8]
 8004e3a:	e7f1      	b.n	8004e20 <_fflush_r+0x1c>
 8004e3c:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <_fflush_r+0x50>)
 8004e3e:	429c      	cmp	r4, r3
 8004e40:	bf08      	it	eq
 8004e42:	68ec      	ldreq	r4, [r5, #12]
 8004e44:	e7ec      	b.n	8004e20 <_fflush_r+0x1c>
 8004e46:	2000      	movs	r0, #0
 8004e48:	bd38      	pop	{r3, r4, r5, pc}
 8004e4a:	bf00      	nop
 8004e4c:	08006898 	.word	0x08006898
 8004e50:	080068b8 	.word	0x080068b8
 8004e54:	08006878 	.word	0x08006878

08004e58 <std>:
 8004e58:	2300      	movs	r3, #0
 8004e5a:	b510      	push	{r4, lr}
 8004e5c:	4604      	mov	r4, r0
 8004e5e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e62:	6083      	str	r3, [r0, #8]
 8004e64:	8181      	strh	r1, [r0, #12]
 8004e66:	6643      	str	r3, [r0, #100]	; 0x64
 8004e68:	81c2      	strh	r2, [r0, #14]
 8004e6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e6e:	6183      	str	r3, [r0, #24]
 8004e70:	4619      	mov	r1, r3
 8004e72:	2208      	movs	r2, #8
 8004e74:	305c      	adds	r0, #92	; 0x5c
 8004e76:	f7ff fde9 	bl	8004a4c <memset>
 8004e7a:	4b05      	ldr	r3, [pc, #20]	; (8004e90 <std+0x38>)
 8004e7c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e7e:	4b05      	ldr	r3, [pc, #20]	; (8004e94 <std+0x3c>)
 8004e80:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e82:	4b05      	ldr	r3, [pc, #20]	; (8004e98 <std+0x40>)
 8004e84:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e86:	4b05      	ldr	r3, [pc, #20]	; (8004e9c <std+0x44>)
 8004e88:	6224      	str	r4, [r4, #32]
 8004e8a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e8c:	bd10      	pop	{r4, pc}
 8004e8e:	bf00      	nop
 8004e90:	080057b5 	.word	0x080057b5
 8004e94:	080057d7 	.word	0x080057d7
 8004e98:	0800580f 	.word	0x0800580f
 8004e9c:	08005833 	.word	0x08005833

08004ea0 <_cleanup_r>:
 8004ea0:	4901      	ldr	r1, [pc, #4]	; (8004ea8 <_cleanup_r+0x8>)
 8004ea2:	f000 b885 	b.w	8004fb0 <_fwalk_reent>
 8004ea6:	bf00      	nop
 8004ea8:	08004e05 	.word	0x08004e05

08004eac <__sfmoreglue>:
 8004eac:	b570      	push	{r4, r5, r6, lr}
 8004eae:	1e4a      	subs	r2, r1, #1
 8004eb0:	2568      	movs	r5, #104	; 0x68
 8004eb2:	4355      	muls	r5, r2
 8004eb4:	460e      	mov	r6, r1
 8004eb6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004eba:	f000 f949 	bl	8005150 <_malloc_r>
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	b140      	cbz	r0, 8004ed4 <__sfmoreglue+0x28>
 8004ec2:	2100      	movs	r1, #0
 8004ec4:	e9c0 1600 	strd	r1, r6, [r0]
 8004ec8:	300c      	adds	r0, #12
 8004eca:	60a0      	str	r0, [r4, #8]
 8004ecc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004ed0:	f7ff fdbc 	bl	8004a4c <memset>
 8004ed4:	4620      	mov	r0, r4
 8004ed6:	bd70      	pop	{r4, r5, r6, pc}

08004ed8 <__sinit>:
 8004ed8:	6983      	ldr	r3, [r0, #24]
 8004eda:	b510      	push	{r4, lr}
 8004edc:	4604      	mov	r4, r0
 8004ede:	bb33      	cbnz	r3, 8004f2e <__sinit+0x56>
 8004ee0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ee4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ee6:	4b12      	ldr	r3, [pc, #72]	; (8004f30 <__sinit+0x58>)
 8004ee8:	4a12      	ldr	r2, [pc, #72]	; (8004f34 <__sinit+0x5c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	6282      	str	r2, [r0, #40]	; 0x28
 8004eee:	4298      	cmp	r0, r3
 8004ef0:	bf04      	itt	eq
 8004ef2:	2301      	moveq	r3, #1
 8004ef4:	6183      	streq	r3, [r0, #24]
 8004ef6:	f000 f81f 	bl	8004f38 <__sfp>
 8004efa:	6060      	str	r0, [r4, #4]
 8004efc:	4620      	mov	r0, r4
 8004efe:	f000 f81b 	bl	8004f38 <__sfp>
 8004f02:	60a0      	str	r0, [r4, #8]
 8004f04:	4620      	mov	r0, r4
 8004f06:	f000 f817 	bl	8004f38 <__sfp>
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	60e0      	str	r0, [r4, #12]
 8004f0e:	2104      	movs	r1, #4
 8004f10:	6860      	ldr	r0, [r4, #4]
 8004f12:	f7ff ffa1 	bl	8004e58 <std>
 8004f16:	2201      	movs	r2, #1
 8004f18:	2109      	movs	r1, #9
 8004f1a:	68a0      	ldr	r0, [r4, #8]
 8004f1c:	f7ff ff9c 	bl	8004e58 <std>
 8004f20:	2202      	movs	r2, #2
 8004f22:	2112      	movs	r1, #18
 8004f24:	68e0      	ldr	r0, [r4, #12]
 8004f26:	f7ff ff97 	bl	8004e58 <std>
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	61a3      	str	r3, [r4, #24]
 8004f2e:	bd10      	pop	{r4, pc}
 8004f30:	08006874 	.word	0x08006874
 8004f34:	08004ea1 	.word	0x08004ea1

08004f38 <__sfp>:
 8004f38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f3a:	4b1b      	ldr	r3, [pc, #108]	; (8004fa8 <__sfp+0x70>)
 8004f3c:	681e      	ldr	r6, [r3, #0]
 8004f3e:	69b3      	ldr	r3, [r6, #24]
 8004f40:	4607      	mov	r7, r0
 8004f42:	b913      	cbnz	r3, 8004f4a <__sfp+0x12>
 8004f44:	4630      	mov	r0, r6
 8004f46:	f7ff ffc7 	bl	8004ed8 <__sinit>
 8004f4a:	3648      	adds	r6, #72	; 0x48
 8004f4c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f50:	3b01      	subs	r3, #1
 8004f52:	d503      	bpl.n	8004f5c <__sfp+0x24>
 8004f54:	6833      	ldr	r3, [r6, #0]
 8004f56:	b133      	cbz	r3, 8004f66 <__sfp+0x2e>
 8004f58:	6836      	ldr	r6, [r6, #0]
 8004f5a:	e7f7      	b.n	8004f4c <__sfp+0x14>
 8004f5c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f60:	b16d      	cbz	r5, 8004f7e <__sfp+0x46>
 8004f62:	3468      	adds	r4, #104	; 0x68
 8004f64:	e7f4      	b.n	8004f50 <__sfp+0x18>
 8004f66:	2104      	movs	r1, #4
 8004f68:	4638      	mov	r0, r7
 8004f6a:	f7ff ff9f 	bl	8004eac <__sfmoreglue>
 8004f6e:	6030      	str	r0, [r6, #0]
 8004f70:	2800      	cmp	r0, #0
 8004f72:	d1f1      	bne.n	8004f58 <__sfp+0x20>
 8004f74:	230c      	movs	r3, #12
 8004f76:	603b      	str	r3, [r7, #0]
 8004f78:	4604      	mov	r4, r0
 8004f7a:	4620      	mov	r0, r4
 8004f7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f7e:	4b0b      	ldr	r3, [pc, #44]	; (8004fac <__sfp+0x74>)
 8004f80:	6665      	str	r5, [r4, #100]	; 0x64
 8004f82:	e9c4 5500 	strd	r5, r5, [r4]
 8004f86:	60a5      	str	r5, [r4, #8]
 8004f88:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f8c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f90:	2208      	movs	r2, #8
 8004f92:	4629      	mov	r1, r5
 8004f94:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f98:	f7ff fd58 	bl	8004a4c <memset>
 8004f9c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004fa0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004fa4:	e7e9      	b.n	8004f7a <__sfp+0x42>
 8004fa6:	bf00      	nop
 8004fa8:	08006874 	.word	0x08006874
 8004fac:	ffff0001 	.word	0xffff0001

08004fb0 <_fwalk_reent>:
 8004fb0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004fb4:	4680      	mov	r8, r0
 8004fb6:	4689      	mov	r9, r1
 8004fb8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004fbc:	2600      	movs	r6, #0
 8004fbe:	b914      	cbnz	r4, 8004fc6 <_fwalk_reent+0x16>
 8004fc0:	4630      	mov	r0, r6
 8004fc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004fc6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004fca:	3f01      	subs	r7, #1
 8004fcc:	d501      	bpl.n	8004fd2 <_fwalk_reent+0x22>
 8004fce:	6824      	ldr	r4, [r4, #0]
 8004fd0:	e7f5      	b.n	8004fbe <_fwalk_reent+0xe>
 8004fd2:	89ab      	ldrh	r3, [r5, #12]
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d907      	bls.n	8004fe8 <_fwalk_reent+0x38>
 8004fd8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fdc:	3301      	adds	r3, #1
 8004fde:	d003      	beq.n	8004fe8 <_fwalk_reent+0x38>
 8004fe0:	4629      	mov	r1, r5
 8004fe2:	4640      	mov	r0, r8
 8004fe4:	47c8      	blx	r9
 8004fe6:	4306      	orrs	r6, r0
 8004fe8:	3568      	adds	r5, #104	; 0x68
 8004fea:	e7ee      	b.n	8004fca <_fwalk_reent+0x1a>

08004fec <__swhatbuf_r>:
 8004fec:	b570      	push	{r4, r5, r6, lr}
 8004fee:	460e      	mov	r6, r1
 8004ff0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004ff4:	2900      	cmp	r1, #0
 8004ff6:	b096      	sub	sp, #88	; 0x58
 8004ff8:	4614      	mov	r4, r2
 8004ffa:	461d      	mov	r5, r3
 8004ffc:	da07      	bge.n	800500e <__swhatbuf_r+0x22>
 8004ffe:	2300      	movs	r3, #0
 8005000:	602b      	str	r3, [r5, #0]
 8005002:	89b3      	ldrh	r3, [r6, #12]
 8005004:	061a      	lsls	r2, r3, #24
 8005006:	d410      	bmi.n	800502a <__swhatbuf_r+0x3e>
 8005008:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800500c:	e00e      	b.n	800502c <__swhatbuf_r+0x40>
 800500e:	466a      	mov	r2, sp
 8005010:	f000 fc36 	bl	8005880 <_fstat_r>
 8005014:	2800      	cmp	r0, #0
 8005016:	dbf2      	blt.n	8004ffe <__swhatbuf_r+0x12>
 8005018:	9a01      	ldr	r2, [sp, #4]
 800501a:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800501e:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8005022:	425a      	negs	r2, r3
 8005024:	415a      	adcs	r2, r3
 8005026:	602a      	str	r2, [r5, #0]
 8005028:	e7ee      	b.n	8005008 <__swhatbuf_r+0x1c>
 800502a:	2340      	movs	r3, #64	; 0x40
 800502c:	2000      	movs	r0, #0
 800502e:	6023      	str	r3, [r4, #0]
 8005030:	b016      	add	sp, #88	; 0x58
 8005032:	bd70      	pop	{r4, r5, r6, pc}

08005034 <__smakebuf_r>:
 8005034:	898b      	ldrh	r3, [r1, #12]
 8005036:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005038:	079d      	lsls	r5, r3, #30
 800503a:	4606      	mov	r6, r0
 800503c:	460c      	mov	r4, r1
 800503e:	d507      	bpl.n	8005050 <__smakebuf_r+0x1c>
 8005040:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	6123      	str	r3, [r4, #16]
 8005048:	2301      	movs	r3, #1
 800504a:	6163      	str	r3, [r4, #20]
 800504c:	b002      	add	sp, #8
 800504e:	bd70      	pop	{r4, r5, r6, pc}
 8005050:	ab01      	add	r3, sp, #4
 8005052:	466a      	mov	r2, sp
 8005054:	f7ff ffca 	bl	8004fec <__swhatbuf_r>
 8005058:	9900      	ldr	r1, [sp, #0]
 800505a:	4605      	mov	r5, r0
 800505c:	4630      	mov	r0, r6
 800505e:	f000 f877 	bl	8005150 <_malloc_r>
 8005062:	b948      	cbnz	r0, 8005078 <__smakebuf_r+0x44>
 8005064:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005068:	059a      	lsls	r2, r3, #22
 800506a:	d4ef      	bmi.n	800504c <__smakebuf_r+0x18>
 800506c:	f023 0303 	bic.w	r3, r3, #3
 8005070:	f043 0302 	orr.w	r3, r3, #2
 8005074:	81a3      	strh	r3, [r4, #12]
 8005076:	e7e3      	b.n	8005040 <__smakebuf_r+0xc>
 8005078:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <__smakebuf_r+0x7c>)
 800507a:	62b3      	str	r3, [r6, #40]	; 0x28
 800507c:	89a3      	ldrh	r3, [r4, #12]
 800507e:	6020      	str	r0, [r4, #0]
 8005080:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005084:	81a3      	strh	r3, [r4, #12]
 8005086:	9b00      	ldr	r3, [sp, #0]
 8005088:	6163      	str	r3, [r4, #20]
 800508a:	9b01      	ldr	r3, [sp, #4]
 800508c:	6120      	str	r0, [r4, #16]
 800508e:	b15b      	cbz	r3, 80050a8 <__smakebuf_r+0x74>
 8005090:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005094:	4630      	mov	r0, r6
 8005096:	f000 fc05 	bl	80058a4 <_isatty_r>
 800509a:	b128      	cbz	r0, 80050a8 <__smakebuf_r+0x74>
 800509c:	89a3      	ldrh	r3, [r4, #12]
 800509e:	f023 0303 	bic.w	r3, r3, #3
 80050a2:	f043 0301 	orr.w	r3, r3, #1
 80050a6:	81a3      	strh	r3, [r4, #12]
 80050a8:	89a3      	ldrh	r3, [r4, #12]
 80050aa:	431d      	orrs	r5, r3
 80050ac:	81a5      	strh	r5, [r4, #12]
 80050ae:	e7cd      	b.n	800504c <__smakebuf_r+0x18>
 80050b0:	08004ea1 	.word	0x08004ea1

080050b4 <_free_r>:
 80050b4:	b538      	push	{r3, r4, r5, lr}
 80050b6:	4605      	mov	r5, r0
 80050b8:	2900      	cmp	r1, #0
 80050ba:	d045      	beq.n	8005148 <_free_r+0x94>
 80050bc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050c0:	1f0c      	subs	r4, r1, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bfb8      	it	lt
 80050c6:	18e4      	addlt	r4, r4, r3
 80050c8:	f000 fc0e 	bl	80058e8 <__malloc_lock>
 80050cc:	4a1f      	ldr	r2, [pc, #124]	; (800514c <_free_r+0x98>)
 80050ce:	6813      	ldr	r3, [r2, #0]
 80050d0:	4610      	mov	r0, r2
 80050d2:	b933      	cbnz	r3, 80050e2 <_free_r+0x2e>
 80050d4:	6063      	str	r3, [r4, #4]
 80050d6:	6014      	str	r4, [r2, #0]
 80050d8:	4628      	mov	r0, r5
 80050da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80050de:	f000 bc04 	b.w	80058ea <__malloc_unlock>
 80050e2:	42a3      	cmp	r3, r4
 80050e4:	d90c      	bls.n	8005100 <_free_r+0x4c>
 80050e6:	6821      	ldr	r1, [r4, #0]
 80050e8:	1862      	adds	r2, r4, r1
 80050ea:	4293      	cmp	r3, r2
 80050ec:	bf04      	itt	eq
 80050ee:	681a      	ldreq	r2, [r3, #0]
 80050f0:	685b      	ldreq	r3, [r3, #4]
 80050f2:	6063      	str	r3, [r4, #4]
 80050f4:	bf04      	itt	eq
 80050f6:	1852      	addeq	r2, r2, r1
 80050f8:	6022      	streq	r2, [r4, #0]
 80050fa:	6004      	str	r4, [r0, #0]
 80050fc:	e7ec      	b.n	80050d8 <_free_r+0x24>
 80050fe:	4613      	mov	r3, r2
 8005100:	685a      	ldr	r2, [r3, #4]
 8005102:	b10a      	cbz	r2, 8005108 <_free_r+0x54>
 8005104:	42a2      	cmp	r2, r4
 8005106:	d9fa      	bls.n	80050fe <_free_r+0x4a>
 8005108:	6819      	ldr	r1, [r3, #0]
 800510a:	1858      	adds	r0, r3, r1
 800510c:	42a0      	cmp	r0, r4
 800510e:	d10b      	bne.n	8005128 <_free_r+0x74>
 8005110:	6820      	ldr	r0, [r4, #0]
 8005112:	4401      	add	r1, r0
 8005114:	1858      	adds	r0, r3, r1
 8005116:	4282      	cmp	r2, r0
 8005118:	6019      	str	r1, [r3, #0]
 800511a:	d1dd      	bne.n	80050d8 <_free_r+0x24>
 800511c:	6810      	ldr	r0, [r2, #0]
 800511e:	6852      	ldr	r2, [r2, #4]
 8005120:	605a      	str	r2, [r3, #4]
 8005122:	4401      	add	r1, r0
 8005124:	6019      	str	r1, [r3, #0]
 8005126:	e7d7      	b.n	80050d8 <_free_r+0x24>
 8005128:	d902      	bls.n	8005130 <_free_r+0x7c>
 800512a:	230c      	movs	r3, #12
 800512c:	602b      	str	r3, [r5, #0]
 800512e:	e7d3      	b.n	80050d8 <_free_r+0x24>
 8005130:	6820      	ldr	r0, [r4, #0]
 8005132:	1821      	adds	r1, r4, r0
 8005134:	428a      	cmp	r2, r1
 8005136:	bf04      	itt	eq
 8005138:	6811      	ldreq	r1, [r2, #0]
 800513a:	6852      	ldreq	r2, [r2, #4]
 800513c:	6062      	str	r2, [r4, #4]
 800513e:	bf04      	itt	eq
 8005140:	1809      	addeq	r1, r1, r0
 8005142:	6021      	streq	r1, [r4, #0]
 8005144:	605c      	str	r4, [r3, #4]
 8005146:	e7c7      	b.n	80050d8 <_free_r+0x24>
 8005148:	bd38      	pop	{r3, r4, r5, pc}
 800514a:	bf00      	nop
 800514c:	20000664 	.word	0x20000664

08005150 <_malloc_r>:
 8005150:	b570      	push	{r4, r5, r6, lr}
 8005152:	1ccd      	adds	r5, r1, #3
 8005154:	f025 0503 	bic.w	r5, r5, #3
 8005158:	3508      	adds	r5, #8
 800515a:	2d0c      	cmp	r5, #12
 800515c:	bf38      	it	cc
 800515e:	250c      	movcc	r5, #12
 8005160:	2d00      	cmp	r5, #0
 8005162:	4606      	mov	r6, r0
 8005164:	db01      	blt.n	800516a <_malloc_r+0x1a>
 8005166:	42a9      	cmp	r1, r5
 8005168:	d903      	bls.n	8005172 <_malloc_r+0x22>
 800516a:	230c      	movs	r3, #12
 800516c:	6033      	str	r3, [r6, #0]
 800516e:	2000      	movs	r0, #0
 8005170:	bd70      	pop	{r4, r5, r6, pc}
 8005172:	f000 fbb9 	bl	80058e8 <__malloc_lock>
 8005176:	4a21      	ldr	r2, [pc, #132]	; (80051fc <_malloc_r+0xac>)
 8005178:	6814      	ldr	r4, [r2, #0]
 800517a:	4621      	mov	r1, r4
 800517c:	b991      	cbnz	r1, 80051a4 <_malloc_r+0x54>
 800517e:	4c20      	ldr	r4, [pc, #128]	; (8005200 <_malloc_r+0xb0>)
 8005180:	6823      	ldr	r3, [r4, #0]
 8005182:	b91b      	cbnz	r3, 800518c <_malloc_r+0x3c>
 8005184:	4630      	mov	r0, r6
 8005186:	f000 fb05 	bl	8005794 <_sbrk_r>
 800518a:	6020      	str	r0, [r4, #0]
 800518c:	4629      	mov	r1, r5
 800518e:	4630      	mov	r0, r6
 8005190:	f000 fb00 	bl	8005794 <_sbrk_r>
 8005194:	1c43      	adds	r3, r0, #1
 8005196:	d124      	bne.n	80051e2 <_malloc_r+0x92>
 8005198:	230c      	movs	r3, #12
 800519a:	6033      	str	r3, [r6, #0]
 800519c:	4630      	mov	r0, r6
 800519e:	f000 fba4 	bl	80058ea <__malloc_unlock>
 80051a2:	e7e4      	b.n	800516e <_malloc_r+0x1e>
 80051a4:	680b      	ldr	r3, [r1, #0]
 80051a6:	1b5b      	subs	r3, r3, r5
 80051a8:	d418      	bmi.n	80051dc <_malloc_r+0x8c>
 80051aa:	2b0b      	cmp	r3, #11
 80051ac:	d90f      	bls.n	80051ce <_malloc_r+0x7e>
 80051ae:	600b      	str	r3, [r1, #0]
 80051b0:	50cd      	str	r5, [r1, r3]
 80051b2:	18cc      	adds	r4, r1, r3
 80051b4:	4630      	mov	r0, r6
 80051b6:	f000 fb98 	bl	80058ea <__malloc_unlock>
 80051ba:	f104 000b 	add.w	r0, r4, #11
 80051be:	1d23      	adds	r3, r4, #4
 80051c0:	f020 0007 	bic.w	r0, r0, #7
 80051c4:	1ac3      	subs	r3, r0, r3
 80051c6:	d0d3      	beq.n	8005170 <_malloc_r+0x20>
 80051c8:	425a      	negs	r2, r3
 80051ca:	50e2      	str	r2, [r4, r3]
 80051cc:	e7d0      	b.n	8005170 <_malloc_r+0x20>
 80051ce:	428c      	cmp	r4, r1
 80051d0:	684b      	ldr	r3, [r1, #4]
 80051d2:	bf16      	itet	ne
 80051d4:	6063      	strne	r3, [r4, #4]
 80051d6:	6013      	streq	r3, [r2, #0]
 80051d8:	460c      	movne	r4, r1
 80051da:	e7eb      	b.n	80051b4 <_malloc_r+0x64>
 80051dc:	460c      	mov	r4, r1
 80051de:	6849      	ldr	r1, [r1, #4]
 80051e0:	e7cc      	b.n	800517c <_malloc_r+0x2c>
 80051e2:	1cc4      	adds	r4, r0, #3
 80051e4:	f024 0403 	bic.w	r4, r4, #3
 80051e8:	42a0      	cmp	r0, r4
 80051ea:	d005      	beq.n	80051f8 <_malloc_r+0xa8>
 80051ec:	1a21      	subs	r1, r4, r0
 80051ee:	4630      	mov	r0, r6
 80051f0:	f000 fad0 	bl	8005794 <_sbrk_r>
 80051f4:	3001      	adds	r0, #1
 80051f6:	d0cf      	beq.n	8005198 <_malloc_r+0x48>
 80051f8:	6025      	str	r5, [r4, #0]
 80051fa:	e7db      	b.n	80051b4 <_malloc_r+0x64>
 80051fc:	20000664 	.word	0x20000664
 8005200:	20000668 	.word	0x20000668

08005204 <__sfputc_r>:
 8005204:	6893      	ldr	r3, [r2, #8]
 8005206:	3b01      	subs	r3, #1
 8005208:	2b00      	cmp	r3, #0
 800520a:	b410      	push	{r4}
 800520c:	6093      	str	r3, [r2, #8]
 800520e:	da08      	bge.n	8005222 <__sfputc_r+0x1e>
 8005210:	6994      	ldr	r4, [r2, #24]
 8005212:	42a3      	cmp	r3, r4
 8005214:	db01      	blt.n	800521a <__sfputc_r+0x16>
 8005216:	290a      	cmp	r1, #10
 8005218:	d103      	bne.n	8005222 <__sfputc_r+0x1e>
 800521a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800521e:	f7ff bcab 	b.w	8004b78 <__swbuf_r>
 8005222:	6813      	ldr	r3, [r2, #0]
 8005224:	1c58      	adds	r0, r3, #1
 8005226:	6010      	str	r0, [r2, #0]
 8005228:	7019      	strb	r1, [r3, #0]
 800522a:	4608      	mov	r0, r1
 800522c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005230:	4770      	bx	lr

08005232 <__sfputs_r>:
 8005232:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005234:	4606      	mov	r6, r0
 8005236:	460f      	mov	r7, r1
 8005238:	4614      	mov	r4, r2
 800523a:	18d5      	adds	r5, r2, r3
 800523c:	42ac      	cmp	r4, r5
 800523e:	d101      	bne.n	8005244 <__sfputs_r+0x12>
 8005240:	2000      	movs	r0, #0
 8005242:	e007      	b.n	8005254 <__sfputs_r+0x22>
 8005244:	463a      	mov	r2, r7
 8005246:	f814 1b01 	ldrb.w	r1, [r4], #1
 800524a:	4630      	mov	r0, r6
 800524c:	f7ff ffda 	bl	8005204 <__sfputc_r>
 8005250:	1c43      	adds	r3, r0, #1
 8005252:	d1f3      	bne.n	800523c <__sfputs_r+0xa>
 8005254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005258 <_vfiprintf_r>:
 8005258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800525c:	460c      	mov	r4, r1
 800525e:	b09d      	sub	sp, #116	; 0x74
 8005260:	4617      	mov	r7, r2
 8005262:	461d      	mov	r5, r3
 8005264:	4606      	mov	r6, r0
 8005266:	b118      	cbz	r0, 8005270 <_vfiprintf_r+0x18>
 8005268:	6983      	ldr	r3, [r0, #24]
 800526a:	b90b      	cbnz	r3, 8005270 <_vfiprintf_r+0x18>
 800526c:	f7ff fe34 	bl	8004ed8 <__sinit>
 8005270:	4b7c      	ldr	r3, [pc, #496]	; (8005464 <_vfiprintf_r+0x20c>)
 8005272:	429c      	cmp	r4, r3
 8005274:	d158      	bne.n	8005328 <_vfiprintf_r+0xd0>
 8005276:	6874      	ldr	r4, [r6, #4]
 8005278:	89a3      	ldrh	r3, [r4, #12]
 800527a:	0718      	lsls	r0, r3, #28
 800527c:	d55e      	bpl.n	800533c <_vfiprintf_r+0xe4>
 800527e:	6923      	ldr	r3, [r4, #16]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d05b      	beq.n	800533c <_vfiprintf_r+0xe4>
 8005284:	2300      	movs	r3, #0
 8005286:	9309      	str	r3, [sp, #36]	; 0x24
 8005288:	2320      	movs	r3, #32
 800528a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800528e:	2330      	movs	r3, #48	; 0x30
 8005290:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005294:	9503      	str	r5, [sp, #12]
 8005296:	f04f 0b01 	mov.w	fp, #1
 800529a:	46b8      	mov	r8, r7
 800529c:	4645      	mov	r5, r8
 800529e:	f815 3b01 	ldrb.w	r3, [r5], #1
 80052a2:	b10b      	cbz	r3, 80052a8 <_vfiprintf_r+0x50>
 80052a4:	2b25      	cmp	r3, #37	; 0x25
 80052a6:	d154      	bne.n	8005352 <_vfiprintf_r+0xfa>
 80052a8:	ebb8 0a07 	subs.w	sl, r8, r7
 80052ac:	d00b      	beq.n	80052c6 <_vfiprintf_r+0x6e>
 80052ae:	4653      	mov	r3, sl
 80052b0:	463a      	mov	r2, r7
 80052b2:	4621      	mov	r1, r4
 80052b4:	4630      	mov	r0, r6
 80052b6:	f7ff ffbc 	bl	8005232 <__sfputs_r>
 80052ba:	3001      	adds	r0, #1
 80052bc:	f000 80c2 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052c0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80052c2:	4453      	add	r3, sl
 80052c4:	9309      	str	r3, [sp, #36]	; 0x24
 80052c6:	f898 3000 	ldrb.w	r3, [r8]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	f000 80ba 	beq.w	8005444 <_vfiprintf_r+0x1ec>
 80052d0:	2300      	movs	r3, #0
 80052d2:	f04f 32ff 	mov.w	r2, #4294967295
 80052d6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80052da:	9304      	str	r3, [sp, #16]
 80052dc:	9307      	str	r3, [sp, #28]
 80052de:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052e2:	931a      	str	r3, [sp, #104]	; 0x68
 80052e4:	46a8      	mov	r8, r5
 80052e6:	2205      	movs	r2, #5
 80052e8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80052ec:	485e      	ldr	r0, [pc, #376]	; (8005468 <_vfiprintf_r+0x210>)
 80052ee:	f7fa ff6f 	bl	80001d0 <memchr>
 80052f2:	9b04      	ldr	r3, [sp, #16]
 80052f4:	bb78      	cbnz	r0, 8005356 <_vfiprintf_r+0xfe>
 80052f6:	06d9      	lsls	r1, r3, #27
 80052f8:	bf44      	itt	mi
 80052fa:	2220      	movmi	r2, #32
 80052fc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8005300:	071a      	lsls	r2, r3, #28
 8005302:	bf44      	itt	mi
 8005304:	222b      	movmi	r2, #43	; 0x2b
 8005306:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800530a:	782a      	ldrb	r2, [r5, #0]
 800530c:	2a2a      	cmp	r2, #42	; 0x2a
 800530e:	d02a      	beq.n	8005366 <_vfiprintf_r+0x10e>
 8005310:	9a07      	ldr	r2, [sp, #28]
 8005312:	46a8      	mov	r8, r5
 8005314:	2000      	movs	r0, #0
 8005316:	250a      	movs	r5, #10
 8005318:	4641      	mov	r1, r8
 800531a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800531e:	3b30      	subs	r3, #48	; 0x30
 8005320:	2b09      	cmp	r3, #9
 8005322:	d969      	bls.n	80053f8 <_vfiprintf_r+0x1a0>
 8005324:	b360      	cbz	r0, 8005380 <_vfiprintf_r+0x128>
 8005326:	e024      	b.n	8005372 <_vfiprintf_r+0x11a>
 8005328:	4b50      	ldr	r3, [pc, #320]	; (800546c <_vfiprintf_r+0x214>)
 800532a:	429c      	cmp	r4, r3
 800532c:	d101      	bne.n	8005332 <_vfiprintf_r+0xda>
 800532e:	68b4      	ldr	r4, [r6, #8]
 8005330:	e7a2      	b.n	8005278 <_vfiprintf_r+0x20>
 8005332:	4b4f      	ldr	r3, [pc, #316]	; (8005470 <_vfiprintf_r+0x218>)
 8005334:	429c      	cmp	r4, r3
 8005336:	bf08      	it	eq
 8005338:	68f4      	ldreq	r4, [r6, #12]
 800533a:	e79d      	b.n	8005278 <_vfiprintf_r+0x20>
 800533c:	4621      	mov	r1, r4
 800533e:	4630      	mov	r0, r6
 8005340:	f7ff fc6c 	bl	8004c1c <__swsetup_r>
 8005344:	2800      	cmp	r0, #0
 8005346:	d09d      	beq.n	8005284 <_vfiprintf_r+0x2c>
 8005348:	f04f 30ff 	mov.w	r0, #4294967295
 800534c:	b01d      	add	sp, #116	; 0x74
 800534e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005352:	46a8      	mov	r8, r5
 8005354:	e7a2      	b.n	800529c <_vfiprintf_r+0x44>
 8005356:	4a44      	ldr	r2, [pc, #272]	; (8005468 <_vfiprintf_r+0x210>)
 8005358:	1a80      	subs	r0, r0, r2
 800535a:	fa0b f000 	lsl.w	r0, fp, r0
 800535e:	4318      	orrs	r0, r3
 8005360:	9004      	str	r0, [sp, #16]
 8005362:	4645      	mov	r5, r8
 8005364:	e7be      	b.n	80052e4 <_vfiprintf_r+0x8c>
 8005366:	9a03      	ldr	r2, [sp, #12]
 8005368:	1d11      	adds	r1, r2, #4
 800536a:	6812      	ldr	r2, [r2, #0]
 800536c:	9103      	str	r1, [sp, #12]
 800536e:	2a00      	cmp	r2, #0
 8005370:	db01      	blt.n	8005376 <_vfiprintf_r+0x11e>
 8005372:	9207      	str	r2, [sp, #28]
 8005374:	e004      	b.n	8005380 <_vfiprintf_r+0x128>
 8005376:	4252      	negs	r2, r2
 8005378:	f043 0302 	orr.w	r3, r3, #2
 800537c:	9207      	str	r2, [sp, #28]
 800537e:	9304      	str	r3, [sp, #16]
 8005380:	f898 3000 	ldrb.w	r3, [r8]
 8005384:	2b2e      	cmp	r3, #46	; 0x2e
 8005386:	d10e      	bne.n	80053a6 <_vfiprintf_r+0x14e>
 8005388:	f898 3001 	ldrb.w	r3, [r8, #1]
 800538c:	2b2a      	cmp	r3, #42	; 0x2a
 800538e:	d138      	bne.n	8005402 <_vfiprintf_r+0x1aa>
 8005390:	9b03      	ldr	r3, [sp, #12]
 8005392:	1d1a      	adds	r2, r3, #4
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	9203      	str	r2, [sp, #12]
 8005398:	2b00      	cmp	r3, #0
 800539a:	bfb8      	it	lt
 800539c:	f04f 33ff 	movlt.w	r3, #4294967295
 80053a0:	f108 0802 	add.w	r8, r8, #2
 80053a4:	9305      	str	r3, [sp, #20]
 80053a6:	4d33      	ldr	r5, [pc, #204]	; (8005474 <_vfiprintf_r+0x21c>)
 80053a8:	f898 1000 	ldrb.w	r1, [r8]
 80053ac:	2203      	movs	r2, #3
 80053ae:	4628      	mov	r0, r5
 80053b0:	f7fa ff0e 	bl	80001d0 <memchr>
 80053b4:	b140      	cbz	r0, 80053c8 <_vfiprintf_r+0x170>
 80053b6:	2340      	movs	r3, #64	; 0x40
 80053b8:	1b40      	subs	r0, r0, r5
 80053ba:	fa03 f000 	lsl.w	r0, r3, r0
 80053be:	9b04      	ldr	r3, [sp, #16]
 80053c0:	4303      	orrs	r3, r0
 80053c2:	f108 0801 	add.w	r8, r8, #1
 80053c6:	9304      	str	r3, [sp, #16]
 80053c8:	f898 1000 	ldrb.w	r1, [r8]
 80053cc:	482a      	ldr	r0, [pc, #168]	; (8005478 <_vfiprintf_r+0x220>)
 80053ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80053d2:	2206      	movs	r2, #6
 80053d4:	f108 0701 	add.w	r7, r8, #1
 80053d8:	f7fa fefa 	bl	80001d0 <memchr>
 80053dc:	2800      	cmp	r0, #0
 80053de:	d037      	beq.n	8005450 <_vfiprintf_r+0x1f8>
 80053e0:	4b26      	ldr	r3, [pc, #152]	; (800547c <_vfiprintf_r+0x224>)
 80053e2:	bb1b      	cbnz	r3, 800542c <_vfiprintf_r+0x1d4>
 80053e4:	9b03      	ldr	r3, [sp, #12]
 80053e6:	3307      	adds	r3, #7
 80053e8:	f023 0307 	bic.w	r3, r3, #7
 80053ec:	3308      	adds	r3, #8
 80053ee:	9303      	str	r3, [sp, #12]
 80053f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053f2:	444b      	add	r3, r9
 80053f4:	9309      	str	r3, [sp, #36]	; 0x24
 80053f6:	e750      	b.n	800529a <_vfiprintf_r+0x42>
 80053f8:	fb05 3202 	mla	r2, r5, r2, r3
 80053fc:	2001      	movs	r0, #1
 80053fe:	4688      	mov	r8, r1
 8005400:	e78a      	b.n	8005318 <_vfiprintf_r+0xc0>
 8005402:	2300      	movs	r3, #0
 8005404:	f108 0801 	add.w	r8, r8, #1
 8005408:	9305      	str	r3, [sp, #20]
 800540a:	4619      	mov	r1, r3
 800540c:	250a      	movs	r5, #10
 800540e:	4640      	mov	r0, r8
 8005410:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005414:	3a30      	subs	r2, #48	; 0x30
 8005416:	2a09      	cmp	r2, #9
 8005418:	d903      	bls.n	8005422 <_vfiprintf_r+0x1ca>
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0c3      	beq.n	80053a6 <_vfiprintf_r+0x14e>
 800541e:	9105      	str	r1, [sp, #20]
 8005420:	e7c1      	b.n	80053a6 <_vfiprintf_r+0x14e>
 8005422:	fb05 2101 	mla	r1, r5, r1, r2
 8005426:	2301      	movs	r3, #1
 8005428:	4680      	mov	r8, r0
 800542a:	e7f0      	b.n	800540e <_vfiprintf_r+0x1b6>
 800542c:	ab03      	add	r3, sp, #12
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	4622      	mov	r2, r4
 8005432:	4b13      	ldr	r3, [pc, #76]	; (8005480 <_vfiprintf_r+0x228>)
 8005434:	a904      	add	r1, sp, #16
 8005436:	4630      	mov	r0, r6
 8005438:	f3af 8000 	nop.w
 800543c:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005440:	4681      	mov	r9, r0
 8005442:	d1d5      	bne.n	80053f0 <_vfiprintf_r+0x198>
 8005444:	89a3      	ldrh	r3, [r4, #12]
 8005446:	065b      	lsls	r3, r3, #25
 8005448:	f53f af7e 	bmi.w	8005348 <_vfiprintf_r+0xf0>
 800544c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800544e:	e77d      	b.n	800534c <_vfiprintf_r+0xf4>
 8005450:	ab03      	add	r3, sp, #12
 8005452:	9300      	str	r3, [sp, #0]
 8005454:	4622      	mov	r2, r4
 8005456:	4b0a      	ldr	r3, [pc, #40]	; (8005480 <_vfiprintf_r+0x228>)
 8005458:	a904      	add	r1, sp, #16
 800545a:	4630      	mov	r0, r6
 800545c:	f000 f888 	bl	8005570 <_printf_i>
 8005460:	e7ec      	b.n	800543c <_vfiprintf_r+0x1e4>
 8005462:	bf00      	nop
 8005464:	08006898 	.word	0x08006898
 8005468:	080068d8 	.word	0x080068d8
 800546c:	080068b8 	.word	0x080068b8
 8005470:	08006878 	.word	0x08006878
 8005474:	080068de 	.word	0x080068de
 8005478:	080068e2 	.word	0x080068e2
 800547c:	00000000 	.word	0x00000000
 8005480:	08005233 	.word	0x08005233

08005484 <_printf_common>:
 8005484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005488:	4691      	mov	r9, r2
 800548a:	461f      	mov	r7, r3
 800548c:	688a      	ldr	r2, [r1, #8]
 800548e:	690b      	ldr	r3, [r1, #16]
 8005490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005494:	4293      	cmp	r3, r2
 8005496:	bfb8      	it	lt
 8005498:	4613      	movlt	r3, r2
 800549a:	f8c9 3000 	str.w	r3, [r9]
 800549e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80054a2:	4606      	mov	r6, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	b112      	cbz	r2, 80054ae <_printf_common+0x2a>
 80054a8:	3301      	adds	r3, #1
 80054aa:	f8c9 3000 	str.w	r3, [r9]
 80054ae:	6823      	ldr	r3, [r4, #0]
 80054b0:	0699      	lsls	r1, r3, #26
 80054b2:	bf42      	ittt	mi
 80054b4:	f8d9 3000 	ldrmi.w	r3, [r9]
 80054b8:	3302      	addmi	r3, #2
 80054ba:	f8c9 3000 	strmi.w	r3, [r9]
 80054be:	6825      	ldr	r5, [r4, #0]
 80054c0:	f015 0506 	ands.w	r5, r5, #6
 80054c4:	d107      	bne.n	80054d6 <_printf_common+0x52>
 80054c6:	f104 0a19 	add.w	sl, r4, #25
 80054ca:	68e3      	ldr	r3, [r4, #12]
 80054cc:	f8d9 2000 	ldr.w	r2, [r9]
 80054d0:	1a9b      	subs	r3, r3, r2
 80054d2:	42ab      	cmp	r3, r5
 80054d4:	dc28      	bgt.n	8005528 <_printf_common+0xa4>
 80054d6:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	3300      	adds	r3, #0
 80054de:	bf18      	it	ne
 80054e0:	2301      	movne	r3, #1
 80054e2:	0692      	lsls	r2, r2, #26
 80054e4:	d42d      	bmi.n	8005542 <_printf_common+0xbe>
 80054e6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054ea:	4639      	mov	r1, r7
 80054ec:	4630      	mov	r0, r6
 80054ee:	47c0      	blx	r8
 80054f0:	3001      	adds	r0, #1
 80054f2:	d020      	beq.n	8005536 <_printf_common+0xb2>
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	68e5      	ldr	r5, [r4, #12]
 80054f8:	f8d9 2000 	ldr.w	r2, [r9]
 80054fc:	f003 0306 	and.w	r3, r3, #6
 8005500:	2b04      	cmp	r3, #4
 8005502:	bf08      	it	eq
 8005504:	1aad      	subeq	r5, r5, r2
 8005506:	68a3      	ldr	r3, [r4, #8]
 8005508:	6922      	ldr	r2, [r4, #16]
 800550a:	bf0c      	ite	eq
 800550c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005510:	2500      	movne	r5, #0
 8005512:	4293      	cmp	r3, r2
 8005514:	bfc4      	itt	gt
 8005516:	1a9b      	subgt	r3, r3, r2
 8005518:	18ed      	addgt	r5, r5, r3
 800551a:	f04f 0900 	mov.w	r9, #0
 800551e:	341a      	adds	r4, #26
 8005520:	454d      	cmp	r5, r9
 8005522:	d11a      	bne.n	800555a <_printf_common+0xd6>
 8005524:	2000      	movs	r0, #0
 8005526:	e008      	b.n	800553a <_printf_common+0xb6>
 8005528:	2301      	movs	r3, #1
 800552a:	4652      	mov	r2, sl
 800552c:	4639      	mov	r1, r7
 800552e:	4630      	mov	r0, r6
 8005530:	47c0      	blx	r8
 8005532:	3001      	adds	r0, #1
 8005534:	d103      	bne.n	800553e <_printf_common+0xba>
 8005536:	f04f 30ff 	mov.w	r0, #4294967295
 800553a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800553e:	3501      	adds	r5, #1
 8005540:	e7c3      	b.n	80054ca <_printf_common+0x46>
 8005542:	18e1      	adds	r1, r4, r3
 8005544:	1c5a      	adds	r2, r3, #1
 8005546:	2030      	movs	r0, #48	; 0x30
 8005548:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800554c:	4422      	add	r2, r4
 800554e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005552:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005556:	3302      	adds	r3, #2
 8005558:	e7c5      	b.n	80054e6 <_printf_common+0x62>
 800555a:	2301      	movs	r3, #1
 800555c:	4622      	mov	r2, r4
 800555e:	4639      	mov	r1, r7
 8005560:	4630      	mov	r0, r6
 8005562:	47c0      	blx	r8
 8005564:	3001      	adds	r0, #1
 8005566:	d0e6      	beq.n	8005536 <_printf_common+0xb2>
 8005568:	f109 0901 	add.w	r9, r9, #1
 800556c:	e7d8      	b.n	8005520 <_printf_common+0x9c>
	...

08005570 <_printf_i>:
 8005570:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005574:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005578:	460c      	mov	r4, r1
 800557a:	7e09      	ldrb	r1, [r1, #24]
 800557c:	b085      	sub	sp, #20
 800557e:	296e      	cmp	r1, #110	; 0x6e
 8005580:	4617      	mov	r7, r2
 8005582:	4606      	mov	r6, r0
 8005584:	4698      	mov	r8, r3
 8005586:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005588:	f000 80b3 	beq.w	80056f2 <_printf_i+0x182>
 800558c:	d822      	bhi.n	80055d4 <_printf_i+0x64>
 800558e:	2963      	cmp	r1, #99	; 0x63
 8005590:	d036      	beq.n	8005600 <_printf_i+0x90>
 8005592:	d80a      	bhi.n	80055aa <_printf_i+0x3a>
 8005594:	2900      	cmp	r1, #0
 8005596:	f000 80b9 	beq.w	800570c <_printf_i+0x19c>
 800559a:	2958      	cmp	r1, #88	; 0x58
 800559c:	f000 8083 	beq.w	80056a6 <_printf_i+0x136>
 80055a0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055a4:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 80055a8:	e032      	b.n	8005610 <_printf_i+0xa0>
 80055aa:	2964      	cmp	r1, #100	; 0x64
 80055ac:	d001      	beq.n	80055b2 <_printf_i+0x42>
 80055ae:	2969      	cmp	r1, #105	; 0x69
 80055b0:	d1f6      	bne.n	80055a0 <_printf_i+0x30>
 80055b2:	6820      	ldr	r0, [r4, #0]
 80055b4:	6813      	ldr	r3, [r2, #0]
 80055b6:	0605      	lsls	r5, r0, #24
 80055b8:	f103 0104 	add.w	r1, r3, #4
 80055bc:	d52a      	bpl.n	8005614 <_printf_i+0xa4>
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6011      	str	r1, [r2, #0]
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	da03      	bge.n	80055ce <_printf_i+0x5e>
 80055c6:	222d      	movs	r2, #45	; 0x2d
 80055c8:	425b      	negs	r3, r3
 80055ca:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 80055ce:	486f      	ldr	r0, [pc, #444]	; (800578c <_printf_i+0x21c>)
 80055d0:	220a      	movs	r2, #10
 80055d2:	e039      	b.n	8005648 <_printf_i+0xd8>
 80055d4:	2973      	cmp	r1, #115	; 0x73
 80055d6:	f000 809d 	beq.w	8005714 <_printf_i+0x1a4>
 80055da:	d808      	bhi.n	80055ee <_printf_i+0x7e>
 80055dc:	296f      	cmp	r1, #111	; 0x6f
 80055de:	d020      	beq.n	8005622 <_printf_i+0xb2>
 80055e0:	2970      	cmp	r1, #112	; 0x70
 80055e2:	d1dd      	bne.n	80055a0 <_printf_i+0x30>
 80055e4:	6823      	ldr	r3, [r4, #0]
 80055e6:	f043 0320 	orr.w	r3, r3, #32
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	e003      	b.n	80055f6 <_printf_i+0x86>
 80055ee:	2975      	cmp	r1, #117	; 0x75
 80055f0:	d017      	beq.n	8005622 <_printf_i+0xb2>
 80055f2:	2978      	cmp	r1, #120	; 0x78
 80055f4:	d1d4      	bne.n	80055a0 <_printf_i+0x30>
 80055f6:	2378      	movs	r3, #120	; 0x78
 80055f8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055fc:	4864      	ldr	r0, [pc, #400]	; (8005790 <_printf_i+0x220>)
 80055fe:	e055      	b.n	80056ac <_printf_i+0x13c>
 8005600:	6813      	ldr	r3, [r2, #0]
 8005602:	1d19      	adds	r1, r3, #4
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6011      	str	r1, [r2, #0]
 8005608:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800560c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005610:	2301      	movs	r3, #1
 8005612:	e08c      	b.n	800572e <_printf_i+0x1be>
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	6011      	str	r1, [r2, #0]
 8005618:	f010 0f40 	tst.w	r0, #64	; 0x40
 800561c:	bf18      	it	ne
 800561e:	b21b      	sxthne	r3, r3
 8005620:	e7cf      	b.n	80055c2 <_printf_i+0x52>
 8005622:	6813      	ldr	r3, [r2, #0]
 8005624:	6825      	ldr	r5, [r4, #0]
 8005626:	1d18      	adds	r0, r3, #4
 8005628:	6010      	str	r0, [r2, #0]
 800562a:	0628      	lsls	r0, r5, #24
 800562c:	d501      	bpl.n	8005632 <_printf_i+0xc2>
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	e002      	b.n	8005638 <_printf_i+0xc8>
 8005632:	0668      	lsls	r0, r5, #25
 8005634:	d5fb      	bpl.n	800562e <_printf_i+0xbe>
 8005636:	881b      	ldrh	r3, [r3, #0]
 8005638:	4854      	ldr	r0, [pc, #336]	; (800578c <_printf_i+0x21c>)
 800563a:	296f      	cmp	r1, #111	; 0x6f
 800563c:	bf14      	ite	ne
 800563e:	220a      	movne	r2, #10
 8005640:	2208      	moveq	r2, #8
 8005642:	2100      	movs	r1, #0
 8005644:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005648:	6865      	ldr	r5, [r4, #4]
 800564a:	60a5      	str	r5, [r4, #8]
 800564c:	2d00      	cmp	r5, #0
 800564e:	f2c0 8095 	blt.w	800577c <_printf_i+0x20c>
 8005652:	6821      	ldr	r1, [r4, #0]
 8005654:	f021 0104 	bic.w	r1, r1, #4
 8005658:	6021      	str	r1, [r4, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d13d      	bne.n	80056da <_printf_i+0x16a>
 800565e:	2d00      	cmp	r5, #0
 8005660:	f040 808e 	bne.w	8005780 <_printf_i+0x210>
 8005664:	4665      	mov	r5, ip
 8005666:	2a08      	cmp	r2, #8
 8005668:	d10b      	bne.n	8005682 <_printf_i+0x112>
 800566a:	6823      	ldr	r3, [r4, #0]
 800566c:	07db      	lsls	r3, r3, #31
 800566e:	d508      	bpl.n	8005682 <_printf_i+0x112>
 8005670:	6923      	ldr	r3, [r4, #16]
 8005672:	6862      	ldr	r2, [r4, #4]
 8005674:	429a      	cmp	r2, r3
 8005676:	bfde      	ittt	le
 8005678:	2330      	movle	r3, #48	; 0x30
 800567a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800567e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005682:	ebac 0305 	sub.w	r3, ip, r5
 8005686:	6123      	str	r3, [r4, #16]
 8005688:	f8cd 8000 	str.w	r8, [sp]
 800568c:	463b      	mov	r3, r7
 800568e:	aa03      	add	r2, sp, #12
 8005690:	4621      	mov	r1, r4
 8005692:	4630      	mov	r0, r6
 8005694:	f7ff fef6 	bl	8005484 <_printf_common>
 8005698:	3001      	adds	r0, #1
 800569a:	d14d      	bne.n	8005738 <_printf_i+0x1c8>
 800569c:	f04f 30ff 	mov.w	r0, #4294967295
 80056a0:	b005      	add	sp, #20
 80056a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80056a6:	4839      	ldr	r0, [pc, #228]	; (800578c <_printf_i+0x21c>)
 80056a8:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 80056ac:	6813      	ldr	r3, [r2, #0]
 80056ae:	6821      	ldr	r1, [r4, #0]
 80056b0:	1d1d      	adds	r5, r3, #4
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	6015      	str	r5, [r2, #0]
 80056b6:	060a      	lsls	r2, r1, #24
 80056b8:	d50b      	bpl.n	80056d2 <_printf_i+0x162>
 80056ba:	07ca      	lsls	r2, r1, #31
 80056bc:	bf44      	itt	mi
 80056be:	f041 0120 	orrmi.w	r1, r1, #32
 80056c2:	6021      	strmi	r1, [r4, #0]
 80056c4:	b91b      	cbnz	r3, 80056ce <_printf_i+0x15e>
 80056c6:	6822      	ldr	r2, [r4, #0]
 80056c8:	f022 0220 	bic.w	r2, r2, #32
 80056cc:	6022      	str	r2, [r4, #0]
 80056ce:	2210      	movs	r2, #16
 80056d0:	e7b7      	b.n	8005642 <_printf_i+0xd2>
 80056d2:	064d      	lsls	r5, r1, #25
 80056d4:	bf48      	it	mi
 80056d6:	b29b      	uxthmi	r3, r3
 80056d8:	e7ef      	b.n	80056ba <_printf_i+0x14a>
 80056da:	4665      	mov	r5, ip
 80056dc:	fbb3 f1f2 	udiv	r1, r3, r2
 80056e0:	fb02 3311 	mls	r3, r2, r1, r3
 80056e4:	5cc3      	ldrb	r3, [r0, r3]
 80056e6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056ea:	460b      	mov	r3, r1
 80056ec:	2900      	cmp	r1, #0
 80056ee:	d1f5      	bne.n	80056dc <_printf_i+0x16c>
 80056f0:	e7b9      	b.n	8005666 <_printf_i+0xf6>
 80056f2:	6813      	ldr	r3, [r2, #0]
 80056f4:	6825      	ldr	r5, [r4, #0]
 80056f6:	6961      	ldr	r1, [r4, #20]
 80056f8:	1d18      	adds	r0, r3, #4
 80056fa:	6010      	str	r0, [r2, #0]
 80056fc:	0628      	lsls	r0, r5, #24
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	d501      	bpl.n	8005706 <_printf_i+0x196>
 8005702:	6019      	str	r1, [r3, #0]
 8005704:	e002      	b.n	800570c <_printf_i+0x19c>
 8005706:	066a      	lsls	r2, r5, #25
 8005708:	d5fb      	bpl.n	8005702 <_printf_i+0x192>
 800570a:	8019      	strh	r1, [r3, #0]
 800570c:	2300      	movs	r3, #0
 800570e:	6123      	str	r3, [r4, #16]
 8005710:	4665      	mov	r5, ip
 8005712:	e7b9      	b.n	8005688 <_printf_i+0x118>
 8005714:	6813      	ldr	r3, [r2, #0]
 8005716:	1d19      	adds	r1, r3, #4
 8005718:	6011      	str	r1, [r2, #0]
 800571a:	681d      	ldr	r5, [r3, #0]
 800571c:	6862      	ldr	r2, [r4, #4]
 800571e:	2100      	movs	r1, #0
 8005720:	4628      	mov	r0, r5
 8005722:	f7fa fd55 	bl	80001d0 <memchr>
 8005726:	b108      	cbz	r0, 800572c <_printf_i+0x1bc>
 8005728:	1b40      	subs	r0, r0, r5
 800572a:	6060      	str	r0, [r4, #4]
 800572c:	6863      	ldr	r3, [r4, #4]
 800572e:	6123      	str	r3, [r4, #16]
 8005730:	2300      	movs	r3, #0
 8005732:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005736:	e7a7      	b.n	8005688 <_printf_i+0x118>
 8005738:	6923      	ldr	r3, [r4, #16]
 800573a:	462a      	mov	r2, r5
 800573c:	4639      	mov	r1, r7
 800573e:	4630      	mov	r0, r6
 8005740:	47c0      	blx	r8
 8005742:	3001      	adds	r0, #1
 8005744:	d0aa      	beq.n	800569c <_printf_i+0x12c>
 8005746:	6823      	ldr	r3, [r4, #0]
 8005748:	079b      	lsls	r3, r3, #30
 800574a:	d413      	bmi.n	8005774 <_printf_i+0x204>
 800574c:	68e0      	ldr	r0, [r4, #12]
 800574e:	9b03      	ldr	r3, [sp, #12]
 8005750:	4298      	cmp	r0, r3
 8005752:	bfb8      	it	lt
 8005754:	4618      	movlt	r0, r3
 8005756:	e7a3      	b.n	80056a0 <_printf_i+0x130>
 8005758:	2301      	movs	r3, #1
 800575a:	464a      	mov	r2, r9
 800575c:	4639      	mov	r1, r7
 800575e:	4630      	mov	r0, r6
 8005760:	47c0      	blx	r8
 8005762:	3001      	adds	r0, #1
 8005764:	d09a      	beq.n	800569c <_printf_i+0x12c>
 8005766:	3501      	adds	r5, #1
 8005768:	68e3      	ldr	r3, [r4, #12]
 800576a:	9a03      	ldr	r2, [sp, #12]
 800576c:	1a9b      	subs	r3, r3, r2
 800576e:	42ab      	cmp	r3, r5
 8005770:	dcf2      	bgt.n	8005758 <_printf_i+0x1e8>
 8005772:	e7eb      	b.n	800574c <_printf_i+0x1dc>
 8005774:	2500      	movs	r5, #0
 8005776:	f104 0919 	add.w	r9, r4, #25
 800577a:	e7f5      	b.n	8005768 <_printf_i+0x1f8>
 800577c:	2b00      	cmp	r3, #0
 800577e:	d1ac      	bne.n	80056da <_printf_i+0x16a>
 8005780:	7803      	ldrb	r3, [r0, #0]
 8005782:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005786:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800578a:	e76c      	b.n	8005666 <_printf_i+0xf6>
 800578c:	080068e9 	.word	0x080068e9
 8005790:	080068fa 	.word	0x080068fa

08005794 <_sbrk_r>:
 8005794:	b538      	push	{r3, r4, r5, lr}
 8005796:	4c06      	ldr	r4, [pc, #24]	; (80057b0 <_sbrk_r+0x1c>)
 8005798:	2300      	movs	r3, #0
 800579a:	4605      	mov	r5, r0
 800579c:	4608      	mov	r0, r1
 800579e:	6023      	str	r3, [r4, #0]
 80057a0:	f7fc fe5e 	bl	8002460 <_sbrk>
 80057a4:	1c43      	adds	r3, r0, #1
 80057a6:	d102      	bne.n	80057ae <_sbrk_r+0x1a>
 80057a8:	6823      	ldr	r3, [r4, #0]
 80057aa:	b103      	cbz	r3, 80057ae <_sbrk_r+0x1a>
 80057ac:	602b      	str	r3, [r5, #0]
 80057ae:	bd38      	pop	{r3, r4, r5, pc}
 80057b0:	2000067c 	.word	0x2000067c

080057b4 <__sread>:
 80057b4:	b510      	push	{r4, lr}
 80057b6:	460c      	mov	r4, r1
 80057b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057bc:	f000 f896 	bl	80058ec <_read_r>
 80057c0:	2800      	cmp	r0, #0
 80057c2:	bfab      	itete	ge
 80057c4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80057c6:	89a3      	ldrhlt	r3, [r4, #12]
 80057c8:	181b      	addge	r3, r3, r0
 80057ca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80057ce:	bfac      	ite	ge
 80057d0:	6563      	strge	r3, [r4, #84]	; 0x54
 80057d2:	81a3      	strhlt	r3, [r4, #12]
 80057d4:	bd10      	pop	{r4, pc}

080057d6 <__swrite>:
 80057d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80057da:	461f      	mov	r7, r3
 80057dc:	898b      	ldrh	r3, [r1, #12]
 80057de:	05db      	lsls	r3, r3, #23
 80057e0:	4605      	mov	r5, r0
 80057e2:	460c      	mov	r4, r1
 80057e4:	4616      	mov	r6, r2
 80057e6:	d505      	bpl.n	80057f4 <__swrite+0x1e>
 80057e8:	2302      	movs	r3, #2
 80057ea:	2200      	movs	r2, #0
 80057ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f0:	f000 f868 	bl	80058c4 <_lseek_r>
 80057f4:	89a3      	ldrh	r3, [r4, #12]
 80057f6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057fa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057fe:	81a3      	strh	r3, [r4, #12]
 8005800:	4632      	mov	r2, r6
 8005802:	463b      	mov	r3, r7
 8005804:	4628      	mov	r0, r5
 8005806:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800580a:	f000 b817 	b.w	800583c <_write_r>

0800580e <__sseek>:
 800580e:	b510      	push	{r4, lr}
 8005810:	460c      	mov	r4, r1
 8005812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005816:	f000 f855 	bl	80058c4 <_lseek_r>
 800581a:	1c43      	adds	r3, r0, #1
 800581c:	89a3      	ldrh	r3, [r4, #12]
 800581e:	bf15      	itete	ne
 8005820:	6560      	strne	r0, [r4, #84]	; 0x54
 8005822:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005826:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800582a:	81a3      	strheq	r3, [r4, #12]
 800582c:	bf18      	it	ne
 800582e:	81a3      	strhne	r3, [r4, #12]
 8005830:	bd10      	pop	{r4, pc}

08005832 <__sclose>:
 8005832:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005836:	f000 b813 	b.w	8005860 <_close_r>
	...

0800583c <_write_r>:
 800583c:	b538      	push	{r3, r4, r5, lr}
 800583e:	4c07      	ldr	r4, [pc, #28]	; (800585c <_write_r+0x20>)
 8005840:	4605      	mov	r5, r0
 8005842:	4608      	mov	r0, r1
 8005844:	4611      	mov	r1, r2
 8005846:	2200      	movs	r2, #0
 8005848:	6022      	str	r2, [r4, #0]
 800584a:	461a      	mov	r2, r3
 800584c:	f7fc fdb8 	bl	80023c0 <_write>
 8005850:	1c43      	adds	r3, r0, #1
 8005852:	d102      	bne.n	800585a <_write_r+0x1e>
 8005854:	6823      	ldr	r3, [r4, #0]
 8005856:	b103      	cbz	r3, 800585a <_write_r+0x1e>
 8005858:	602b      	str	r3, [r5, #0]
 800585a:	bd38      	pop	{r3, r4, r5, pc}
 800585c:	2000067c 	.word	0x2000067c

08005860 <_close_r>:
 8005860:	b538      	push	{r3, r4, r5, lr}
 8005862:	4c06      	ldr	r4, [pc, #24]	; (800587c <_close_r+0x1c>)
 8005864:	2300      	movs	r3, #0
 8005866:	4605      	mov	r5, r0
 8005868:	4608      	mov	r0, r1
 800586a:	6023      	str	r3, [r4, #0]
 800586c:	f7fc fdc4 	bl	80023f8 <_close>
 8005870:	1c43      	adds	r3, r0, #1
 8005872:	d102      	bne.n	800587a <_close_r+0x1a>
 8005874:	6823      	ldr	r3, [r4, #0]
 8005876:	b103      	cbz	r3, 800587a <_close_r+0x1a>
 8005878:	602b      	str	r3, [r5, #0]
 800587a:	bd38      	pop	{r3, r4, r5, pc}
 800587c:	2000067c 	.word	0x2000067c

08005880 <_fstat_r>:
 8005880:	b538      	push	{r3, r4, r5, lr}
 8005882:	4c07      	ldr	r4, [pc, #28]	; (80058a0 <_fstat_r+0x20>)
 8005884:	2300      	movs	r3, #0
 8005886:	4605      	mov	r5, r0
 8005888:	4608      	mov	r0, r1
 800588a:	4611      	mov	r1, r2
 800588c:	6023      	str	r3, [r4, #0]
 800588e:	f7fc fdbf 	bl	8002410 <_fstat>
 8005892:	1c43      	adds	r3, r0, #1
 8005894:	d102      	bne.n	800589c <_fstat_r+0x1c>
 8005896:	6823      	ldr	r3, [r4, #0]
 8005898:	b103      	cbz	r3, 800589c <_fstat_r+0x1c>
 800589a:	602b      	str	r3, [r5, #0]
 800589c:	bd38      	pop	{r3, r4, r5, pc}
 800589e:	bf00      	nop
 80058a0:	2000067c 	.word	0x2000067c

080058a4 <_isatty_r>:
 80058a4:	b538      	push	{r3, r4, r5, lr}
 80058a6:	4c06      	ldr	r4, [pc, #24]	; (80058c0 <_isatty_r+0x1c>)
 80058a8:	2300      	movs	r3, #0
 80058aa:	4605      	mov	r5, r0
 80058ac:	4608      	mov	r0, r1
 80058ae:	6023      	str	r3, [r4, #0]
 80058b0:	f7fc fdbe 	bl	8002430 <_isatty>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d102      	bne.n	80058be <_isatty_r+0x1a>
 80058b8:	6823      	ldr	r3, [r4, #0]
 80058ba:	b103      	cbz	r3, 80058be <_isatty_r+0x1a>
 80058bc:	602b      	str	r3, [r5, #0]
 80058be:	bd38      	pop	{r3, r4, r5, pc}
 80058c0:	2000067c 	.word	0x2000067c

080058c4 <_lseek_r>:
 80058c4:	b538      	push	{r3, r4, r5, lr}
 80058c6:	4c07      	ldr	r4, [pc, #28]	; (80058e4 <_lseek_r+0x20>)
 80058c8:	4605      	mov	r5, r0
 80058ca:	4608      	mov	r0, r1
 80058cc:	4611      	mov	r1, r2
 80058ce:	2200      	movs	r2, #0
 80058d0:	6022      	str	r2, [r4, #0]
 80058d2:	461a      	mov	r2, r3
 80058d4:	f7fc fdb7 	bl	8002446 <_lseek>
 80058d8:	1c43      	adds	r3, r0, #1
 80058da:	d102      	bne.n	80058e2 <_lseek_r+0x1e>
 80058dc:	6823      	ldr	r3, [r4, #0]
 80058de:	b103      	cbz	r3, 80058e2 <_lseek_r+0x1e>
 80058e0:	602b      	str	r3, [r5, #0]
 80058e2:	bd38      	pop	{r3, r4, r5, pc}
 80058e4:	2000067c 	.word	0x2000067c

080058e8 <__malloc_lock>:
 80058e8:	4770      	bx	lr

080058ea <__malloc_unlock>:
 80058ea:	4770      	bx	lr

080058ec <_read_r>:
 80058ec:	b538      	push	{r3, r4, r5, lr}
 80058ee:	4c07      	ldr	r4, [pc, #28]	; (800590c <_read_r+0x20>)
 80058f0:	4605      	mov	r5, r0
 80058f2:	4608      	mov	r0, r1
 80058f4:	4611      	mov	r1, r2
 80058f6:	2200      	movs	r2, #0
 80058f8:	6022      	str	r2, [r4, #0]
 80058fa:	461a      	mov	r2, r3
 80058fc:	f7fc fd43 	bl	8002386 <_read>
 8005900:	1c43      	adds	r3, r0, #1
 8005902:	d102      	bne.n	800590a <_read_r+0x1e>
 8005904:	6823      	ldr	r3, [r4, #0]
 8005906:	b103      	cbz	r3, 800590a <_read_r+0x1e>
 8005908:	602b      	str	r3, [r5, #0]
 800590a:	bd38      	pop	{r3, r4, r5, pc}
 800590c:	2000067c 	.word	0x2000067c

08005910 <_init>:
 8005910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005912:	bf00      	nop
 8005914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005916:	bc08      	pop	{r3}
 8005918:	469e      	mov	lr, r3
 800591a:	4770      	bx	lr

0800591c <_fini>:
 800591c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800591e:	bf00      	nop
 8005920:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005922:	bc08      	pop	{r3}
 8005924:	469e      	mov	lr, r3
 8005926:	4770      	bx	lr
