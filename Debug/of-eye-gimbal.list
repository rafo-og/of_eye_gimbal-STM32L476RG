
of-eye-gimbal.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005758  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fe4  080058e8  080058e8  000158e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080068cc  080068cc  000205c4  2**0
                  CONTENTS
  4 .ARM          00000008  080068cc  080068cc  000168cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080068d4  080068d4  000205c4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080068d4  080068d4  000168d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080068d8  080068d8  000168d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000005c4  20000000  080068dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  200005c8  08006ea0  000205c8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000680  08006ea0  00020680  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000205c4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010f25  00000000  00000000  000205f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000296a  00000000  00000000  00031519  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000c30  00000000  00000000  00033e88  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ae8  00000000  00000000  00034ab8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000247fe  00000000  00000000  000355a0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ad3e  00000000  00000000  00059d9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000bb358  00000000  00000000  00064adc  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0011fe34  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003814  00000000  00000000  0011feb0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200005c8 	.word	0x200005c8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080058d0 	.word	0x080058d0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200005cc 	.word	0x200005cc
 80001cc:	080058d0 	.word	0x080058d0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_ldivmod>:
 8000270:	b97b      	cbnz	r3, 8000292 <__aeabi_ldivmod+0x22>
 8000272:	b972      	cbnz	r2, 8000292 <__aeabi_ldivmod+0x22>
 8000274:	2900      	cmp	r1, #0
 8000276:	bfbe      	ittt	lt
 8000278:	2000      	movlt	r0, #0
 800027a:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
 800027e:	e006      	blt.n	800028e <__aeabi_ldivmod+0x1e>
 8000280:	bf08      	it	eq
 8000282:	2800      	cmpeq	r0, #0
 8000284:	bf1c      	itt	ne
 8000286:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
 800028a:	f04f 30ff 	movne.w	r0, #4294967295
 800028e:	f000 b9a5 	b.w	80005dc <__aeabi_idiv0>
 8000292:	f1ad 0c08 	sub.w	ip, sp, #8
 8000296:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800029a:	2900      	cmp	r1, #0
 800029c:	db09      	blt.n	80002b2 <__aeabi_ldivmod+0x42>
 800029e:	2b00      	cmp	r3, #0
 80002a0:	db1a      	blt.n	80002d8 <__aeabi_ldivmod+0x68>
 80002a2:	f000 f835 	bl	8000310 <__udivmoddi4>
 80002a6:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ae:	b004      	add	sp, #16
 80002b0:	4770      	bx	lr
 80002b2:	4240      	negs	r0, r0
 80002b4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002b8:	2b00      	cmp	r3, #0
 80002ba:	db1b      	blt.n	80002f4 <__aeabi_ldivmod+0x84>
 80002bc:	f000 f828 	bl	8000310 <__udivmoddi4>
 80002c0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002c8:	b004      	add	sp, #16
 80002ca:	4240      	negs	r0, r0
 80002cc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002d0:	4252      	negs	r2, r2
 80002d2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002d6:	4770      	bx	lr
 80002d8:	4252      	negs	r2, r2
 80002da:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002de:	f000 f817 	bl	8000310 <__udivmoddi4>
 80002e2:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ea:	b004      	add	sp, #16
 80002ec:	4240      	negs	r0, r0
 80002ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002f2:	4770      	bx	lr
 80002f4:	4252      	negs	r2, r2
 80002f6:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002fa:	f000 f809 	bl	8000310 <__udivmoddi4>
 80002fe:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000302:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000306:	b004      	add	sp, #16
 8000308:	4252      	negs	r2, r2
 800030a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800030e:	4770      	bx	lr

08000310 <__udivmoddi4>:
 8000310:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000314:	9e08      	ldr	r6, [sp, #32]
 8000316:	4604      	mov	r4, r0
 8000318:	4688      	mov	r8, r1
 800031a:	2b00      	cmp	r3, #0
 800031c:	d14b      	bne.n	80003b6 <__udivmoddi4+0xa6>
 800031e:	428a      	cmp	r2, r1
 8000320:	4615      	mov	r5, r2
 8000322:	d967      	bls.n	80003f4 <__udivmoddi4+0xe4>
 8000324:	fab2 f282 	clz	r2, r2
 8000328:	b14a      	cbz	r2, 800033e <__udivmoddi4+0x2e>
 800032a:	f1c2 0720 	rsb	r7, r2, #32
 800032e:	fa01 f302 	lsl.w	r3, r1, r2
 8000332:	fa20 f707 	lsr.w	r7, r0, r7
 8000336:	4095      	lsls	r5, r2
 8000338:	ea47 0803 	orr.w	r8, r7, r3
 800033c:	4094      	lsls	r4, r2
 800033e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000342:	0c23      	lsrs	r3, r4, #16
 8000344:	fbb8 f7fe 	udiv	r7, r8, lr
 8000348:	fa1f fc85 	uxth.w	ip, r5
 800034c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000350:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000354:	fb07 f10c 	mul.w	r1, r7, ip
 8000358:	4299      	cmp	r1, r3
 800035a:	d909      	bls.n	8000370 <__udivmoddi4+0x60>
 800035c:	18eb      	adds	r3, r5, r3
 800035e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000362:	f080 811b 	bcs.w	800059c <__udivmoddi4+0x28c>
 8000366:	4299      	cmp	r1, r3
 8000368:	f240 8118 	bls.w	800059c <__udivmoddi4+0x28c>
 800036c:	3f02      	subs	r7, #2
 800036e:	442b      	add	r3, r5
 8000370:	1a5b      	subs	r3, r3, r1
 8000372:	b2a4      	uxth	r4, r4
 8000374:	fbb3 f0fe 	udiv	r0, r3, lr
 8000378:	fb0e 3310 	mls	r3, lr, r0, r3
 800037c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000380:	fb00 fc0c 	mul.w	ip, r0, ip
 8000384:	45a4      	cmp	ip, r4
 8000386:	d909      	bls.n	800039c <__udivmoddi4+0x8c>
 8000388:	192c      	adds	r4, r5, r4
 800038a:	f100 33ff 	add.w	r3, r0, #4294967295
 800038e:	f080 8107 	bcs.w	80005a0 <__udivmoddi4+0x290>
 8000392:	45a4      	cmp	ip, r4
 8000394:	f240 8104 	bls.w	80005a0 <__udivmoddi4+0x290>
 8000398:	3802      	subs	r0, #2
 800039a:	442c      	add	r4, r5
 800039c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80003a0:	eba4 040c 	sub.w	r4, r4, ip
 80003a4:	2700      	movs	r7, #0
 80003a6:	b11e      	cbz	r6, 80003b0 <__udivmoddi4+0xa0>
 80003a8:	40d4      	lsrs	r4, r2
 80003aa:	2300      	movs	r3, #0
 80003ac:	e9c6 4300 	strd	r4, r3, [r6]
 80003b0:	4639      	mov	r1, r7
 80003b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003b6:	428b      	cmp	r3, r1
 80003b8:	d909      	bls.n	80003ce <__udivmoddi4+0xbe>
 80003ba:	2e00      	cmp	r6, #0
 80003bc:	f000 80eb 	beq.w	8000596 <__udivmoddi4+0x286>
 80003c0:	2700      	movs	r7, #0
 80003c2:	e9c6 0100 	strd	r0, r1, [r6]
 80003c6:	4638      	mov	r0, r7
 80003c8:	4639      	mov	r1, r7
 80003ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ce:	fab3 f783 	clz	r7, r3
 80003d2:	2f00      	cmp	r7, #0
 80003d4:	d147      	bne.n	8000466 <__udivmoddi4+0x156>
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d302      	bcc.n	80003e0 <__udivmoddi4+0xd0>
 80003da:	4282      	cmp	r2, r0
 80003dc:	f200 80fa 	bhi.w	80005d4 <__udivmoddi4+0x2c4>
 80003e0:	1a84      	subs	r4, r0, r2
 80003e2:	eb61 0303 	sbc.w	r3, r1, r3
 80003e6:	2001      	movs	r0, #1
 80003e8:	4698      	mov	r8, r3
 80003ea:	2e00      	cmp	r6, #0
 80003ec:	d0e0      	beq.n	80003b0 <__udivmoddi4+0xa0>
 80003ee:	e9c6 4800 	strd	r4, r8, [r6]
 80003f2:	e7dd      	b.n	80003b0 <__udivmoddi4+0xa0>
 80003f4:	b902      	cbnz	r2, 80003f8 <__udivmoddi4+0xe8>
 80003f6:	deff      	udf	#255	; 0xff
 80003f8:	fab2 f282 	clz	r2, r2
 80003fc:	2a00      	cmp	r2, #0
 80003fe:	f040 808f 	bne.w	8000520 <__udivmoddi4+0x210>
 8000402:	1b49      	subs	r1, r1, r5
 8000404:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000408:	fa1f f885 	uxth.w	r8, r5
 800040c:	2701      	movs	r7, #1
 800040e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000412:	0c23      	lsrs	r3, r4, #16
 8000414:	fb0e 111c 	mls	r1, lr, ip, r1
 8000418:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800041c:	fb08 f10c 	mul.w	r1, r8, ip
 8000420:	4299      	cmp	r1, r3
 8000422:	d907      	bls.n	8000434 <__udivmoddi4+0x124>
 8000424:	18eb      	adds	r3, r5, r3
 8000426:	f10c 30ff 	add.w	r0, ip, #4294967295
 800042a:	d202      	bcs.n	8000432 <__udivmoddi4+0x122>
 800042c:	4299      	cmp	r1, r3
 800042e:	f200 80cd 	bhi.w	80005cc <__udivmoddi4+0x2bc>
 8000432:	4684      	mov	ip, r0
 8000434:	1a59      	subs	r1, r3, r1
 8000436:	b2a3      	uxth	r3, r4
 8000438:	fbb1 f0fe 	udiv	r0, r1, lr
 800043c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000440:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000444:	fb08 f800 	mul.w	r8, r8, r0
 8000448:	45a0      	cmp	r8, r4
 800044a:	d907      	bls.n	800045c <__udivmoddi4+0x14c>
 800044c:	192c      	adds	r4, r5, r4
 800044e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000452:	d202      	bcs.n	800045a <__udivmoddi4+0x14a>
 8000454:	45a0      	cmp	r8, r4
 8000456:	f200 80b6 	bhi.w	80005c6 <__udivmoddi4+0x2b6>
 800045a:	4618      	mov	r0, r3
 800045c:	eba4 0408 	sub.w	r4, r4, r8
 8000460:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000464:	e79f      	b.n	80003a6 <__udivmoddi4+0x96>
 8000466:	f1c7 0c20 	rsb	ip, r7, #32
 800046a:	40bb      	lsls	r3, r7
 800046c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000470:	ea4e 0e03 	orr.w	lr, lr, r3
 8000474:	fa01 f407 	lsl.w	r4, r1, r7
 8000478:	fa20 f50c 	lsr.w	r5, r0, ip
 800047c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000480:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000484:	4325      	orrs	r5, r4
 8000486:	fbb3 f9f8 	udiv	r9, r3, r8
 800048a:	0c2c      	lsrs	r4, r5, #16
 800048c:	fb08 3319 	mls	r3, r8, r9, r3
 8000490:	fa1f fa8e 	uxth.w	sl, lr
 8000494:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000498:	fb09 f40a 	mul.w	r4, r9, sl
 800049c:	429c      	cmp	r4, r3
 800049e:	fa02 f207 	lsl.w	r2, r2, r7
 80004a2:	fa00 f107 	lsl.w	r1, r0, r7
 80004a6:	d90b      	bls.n	80004c0 <__udivmoddi4+0x1b0>
 80004a8:	eb1e 0303 	adds.w	r3, lr, r3
 80004ac:	f109 30ff 	add.w	r0, r9, #4294967295
 80004b0:	f080 8087 	bcs.w	80005c2 <__udivmoddi4+0x2b2>
 80004b4:	429c      	cmp	r4, r3
 80004b6:	f240 8084 	bls.w	80005c2 <__udivmoddi4+0x2b2>
 80004ba:	f1a9 0902 	sub.w	r9, r9, #2
 80004be:	4473      	add	r3, lr
 80004c0:	1b1b      	subs	r3, r3, r4
 80004c2:	b2ad      	uxth	r5, r5
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3310 	mls	r3, r8, r0, r3
 80004cc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80004d0:	fb00 fa0a 	mul.w	sl, r0, sl
 80004d4:	45a2      	cmp	sl, r4
 80004d6:	d908      	bls.n	80004ea <__udivmoddi4+0x1da>
 80004d8:	eb1e 0404 	adds.w	r4, lr, r4
 80004dc:	f100 33ff 	add.w	r3, r0, #4294967295
 80004e0:	d26b      	bcs.n	80005ba <__udivmoddi4+0x2aa>
 80004e2:	45a2      	cmp	sl, r4
 80004e4:	d969      	bls.n	80005ba <__udivmoddi4+0x2aa>
 80004e6:	3802      	subs	r0, #2
 80004e8:	4474      	add	r4, lr
 80004ea:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80004ee:	fba0 8902 	umull	r8, r9, r0, r2
 80004f2:	eba4 040a 	sub.w	r4, r4, sl
 80004f6:	454c      	cmp	r4, r9
 80004f8:	46c2      	mov	sl, r8
 80004fa:	464b      	mov	r3, r9
 80004fc:	d354      	bcc.n	80005a8 <__udivmoddi4+0x298>
 80004fe:	d051      	beq.n	80005a4 <__udivmoddi4+0x294>
 8000500:	2e00      	cmp	r6, #0
 8000502:	d069      	beq.n	80005d8 <__udivmoddi4+0x2c8>
 8000504:	ebb1 050a 	subs.w	r5, r1, sl
 8000508:	eb64 0403 	sbc.w	r4, r4, r3
 800050c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000510:	40fd      	lsrs	r5, r7
 8000512:	40fc      	lsrs	r4, r7
 8000514:	ea4c 0505 	orr.w	r5, ip, r5
 8000518:	e9c6 5400 	strd	r5, r4, [r6]
 800051c:	2700      	movs	r7, #0
 800051e:	e747      	b.n	80003b0 <__udivmoddi4+0xa0>
 8000520:	f1c2 0320 	rsb	r3, r2, #32
 8000524:	fa20 f703 	lsr.w	r7, r0, r3
 8000528:	4095      	lsls	r5, r2
 800052a:	fa01 f002 	lsl.w	r0, r1, r2
 800052e:	fa21 f303 	lsr.w	r3, r1, r3
 8000532:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000536:	4338      	orrs	r0, r7
 8000538:	0c01      	lsrs	r1, r0, #16
 800053a:	fbb3 f7fe 	udiv	r7, r3, lr
 800053e:	fa1f f885 	uxth.w	r8, r5
 8000542:	fb0e 3317 	mls	r3, lr, r7, r3
 8000546:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800054a:	fb07 f308 	mul.w	r3, r7, r8
 800054e:	428b      	cmp	r3, r1
 8000550:	fa04 f402 	lsl.w	r4, r4, r2
 8000554:	d907      	bls.n	8000566 <__udivmoddi4+0x256>
 8000556:	1869      	adds	r1, r5, r1
 8000558:	f107 3cff 	add.w	ip, r7, #4294967295
 800055c:	d22f      	bcs.n	80005be <__udivmoddi4+0x2ae>
 800055e:	428b      	cmp	r3, r1
 8000560:	d92d      	bls.n	80005be <__udivmoddi4+0x2ae>
 8000562:	3f02      	subs	r7, #2
 8000564:	4429      	add	r1, r5
 8000566:	1acb      	subs	r3, r1, r3
 8000568:	b281      	uxth	r1, r0
 800056a:	fbb3 f0fe 	udiv	r0, r3, lr
 800056e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000572:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000576:	fb00 f308 	mul.w	r3, r0, r8
 800057a:	428b      	cmp	r3, r1
 800057c:	d907      	bls.n	800058e <__udivmoddi4+0x27e>
 800057e:	1869      	adds	r1, r5, r1
 8000580:	f100 3cff 	add.w	ip, r0, #4294967295
 8000584:	d217      	bcs.n	80005b6 <__udivmoddi4+0x2a6>
 8000586:	428b      	cmp	r3, r1
 8000588:	d915      	bls.n	80005b6 <__udivmoddi4+0x2a6>
 800058a:	3802      	subs	r0, #2
 800058c:	4429      	add	r1, r5
 800058e:	1ac9      	subs	r1, r1, r3
 8000590:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000594:	e73b      	b.n	800040e <__udivmoddi4+0xfe>
 8000596:	4637      	mov	r7, r6
 8000598:	4630      	mov	r0, r6
 800059a:	e709      	b.n	80003b0 <__udivmoddi4+0xa0>
 800059c:	4607      	mov	r7, r0
 800059e:	e6e7      	b.n	8000370 <__udivmoddi4+0x60>
 80005a0:	4618      	mov	r0, r3
 80005a2:	e6fb      	b.n	800039c <__udivmoddi4+0x8c>
 80005a4:	4541      	cmp	r1, r8
 80005a6:	d2ab      	bcs.n	8000500 <__udivmoddi4+0x1f0>
 80005a8:	ebb8 0a02 	subs.w	sl, r8, r2
 80005ac:	eb69 020e 	sbc.w	r2, r9, lr
 80005b0:	3801      	subs	r0, #1
 80005b2:	4613      	mov	r3, r2
 80005b4:	e7a4      	b.n	8000500 <__udivmoddi4+0x1f0>
 80005b6:	4660      	mov	r0, ip
 80005b8:	e7e9      	b.n	800058e <__udivmoddi4+0x27e>
 80005ba:	4618      	mov	r0, r3
 80005bc:	e795      	b.n	80004ea <__udivmoddi4+0x1da>
 80005be:	4667      	mov	r7, ip
 80005c0:	e7d1      	b.n	8000566 <__udivmoddi4+0x256>
 80005c2:	4681      	mov	r9, r0
 80005c4:	e77c      	b.n	80004c0 <__udivmoddi4+0x1b0>
 80005c6:	3802      	subs	r0, #2
 80005c8:	442c      	add	r4, r5
 80005ca:	e747      	b.n	800045c <__udivmoddi4+0x14c>
 80005cc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005d0:	442b      	add	r3, r5
 80005d2:	e72f      	b.n	8000434 <__udivmoddi4+0x124>
 80005d4:	4638      	mov	r0, r7
 80005d6:	e708      	b.n	80003ea <__udivmoddi4+0xda>
 80005d8:	4637      	mov	r7, r6
 80005da:	e6e9      	b.n	80003b0 <__udivmoddi4+0xa0>

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <adns2610_init>:

/**
 * @brief Initialize the ADNS2610 sensor
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_init(Device dev){
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b082      	sub	sp, #8
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	4603      	mov	r3, r0
 80005e8:	71fb      	strb	r3, [r7, #7]
	// Configure the SPI peripherals for each sensor
	adns2610_configureSPI(dev);
 80005ea:	79fb      	ldrb	r3, [r7, #7]
 80005ec:	4618      	mov	r0, r3
 80005ee:	f000 f80d 	bl	800060c <adns2610_configureSPI>

	// Reset communication with ADNS sensors
	adns2610_resetCOM(dev);
 80005f2:	79fb      	ldrb	r3, [r7, #7]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f000 f833 	bl	8000660 <adns2610_resetCOM>

	// Configure sensors
	adns2610_config(dev);
 80005fa:	79fb      	ldrb	r3, [r7, #7]
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 f877 	bl	80006f0 <adns2610_config>
}
 8000602:	bf00      	nop
 8000604:	3708      	adds	r7, #8
 8000606:	46bd      	mov	sp, r7
 8000608:	bd80      	pop	{r7, pc}
	...

0800060c <adns2610_configureSPI>:
/**
 * @brief Configure the SPI module pointed by Device argument
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_configureSPI(Device dev){
 800060c:	b480      	push	{r7}
 800060e:	b083      	sub	sp, #12
 8000610:	af00      	add	r7, sp, #0
 8000612:	4603      	mov	r3, r0
 8000614:	71fb      	strb	r3, [r7, #7]
	GET_SPI_PERIPH(dev, SPIx);
 8000616:	79fb      	ldrb	r3, [r7, #7]
 8000618:	2b00      	cmp	r3, #0
 800061a:	d101      	bne.n	8000620 <adns2610_configureSPI+0x14>
 800061c:	4b0d      	ldr	r3, [pc, #52]	; (8000654 <adns2610_configureSPI+0x48>)
 800061e:	e000      	b.n	8000622 <adns2610_configureSPI+0x16>
 8000620:	4b0d      	ldr	r3, [pc, #52]	; (8000658 <adns2610_configureSPI+0x4c>)
 8000622:	4a0e      	ldr	r2, [pc, #56]	; (800065c <adns2610_configureSPI+0x50>)
 8000624:	6013      	str	r3, [r2, #0]
	// RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000626:	4b0d      	ldr	r3, [pc, #52]	; (800065c <adns2610_configureSPI+0x50>)
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	685a      	ldr	r2, [r3, #4]
 800062c:	4b0b      	ldr	r3, [pc, #44]	; (800065c <adns2610_configureSPI+0x50>)
 800062e:	681b      	ldr	r3, [r3, #0]
 8000630:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000634:	605a      	str	r2, [r3, #4]
	// Enable SPI
	SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000636:	4b09      	ldr	r3, [pc, #36]	; (800065c <adns2610_configureSPI+0x50>)
 8000638:	681b      	ldr	r3, [r3, #0]
 800063a:	681a      	ldr	r2, [r3, #0]
 800063c:	4b07      	ldr	r3, [pc, #28]	; (800065c <adns2610_configureSPI+0x50>)
 800063e:	681b      	ldr	r3, [r3, #0]
 8000640:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8000644:	601a      	str	r2, [r3, #0]
}
 8000646:	bf00      	nop
 8000648:	370c      	adds	r7, #12
 800064a:	46bd      	mov	sp, r7
 800064c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000650:	4770      	bx	lr
 8000652:	bf00      	nop
 8000654:	40003800 	.word	0x40003800
 8000658:	40003c00 	.word	0x40003c00
 800065c:	200005e4 	.word	0x200005e4

08000660 <adns2610_resetCOM>:
/**
 * @brief Reset the ADNS2610 serial port. It needs to be done at the beginning to establish the communication
 * 		  correctly
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_resetCOM(Device dev){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	4603      	mov	r3, r0
 8000668:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	2b00      	cmp	r3, #0
 800066e:	d101      	bne.n	8000674 <adns2610_resetCOM+0x14>
 8000670:	4b1c      	ldr	r3, [pc, #112]	; (80006e4 <adns2610_resetCOM+0x84>)
 8000672:	e000      	b.n	8000676 <adns2610_resetCOM+0x16>
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <adns2610_resetCOM+0x88>)
 8000676:	4a1d      	ldr	r2, [pc, #116]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000678:	6013      	str	r3, [r2, #0]

	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 800067a:	bf00      	nop
 800067c:	4b1b      	ldr	r3, [pc, #108]	; (80006ec <adns2610_resetCOM+0x8c>)
 800067e:	681b      	ldr	r3, [r3, #0]
 8000680:	689b      	ldr	r3, [r3, #8]
 8000682:	f003 0302 	and.w	r3, r3, #2
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <adns2610_resetCOM+0x1c>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x01);
 800068a:	4b18      	ldr	r3, [pc, #96]	; (80006ec <adns2610_resetCOM+0x8c>)
 800068c:	681b      	ldr	r3, [r3, #0]
 800068e:	330c      	adds	r3, #12
 8000690:	2201      	movs	r2, #1
 8000692:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000694:	bf00      	nop
 8000696:	4b15      	ldr	r3, [pc, #84]	; (80006ec <adns2610_resetCOM+0x8c>)
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f003 0301 	and.w	r3, r3, #1
 80006a0:	2b00      	cmp	r3, #0
 80006a2:	d0f8      	beq.n	8000696 <adns2610_resetCOM+0x36>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	330c      	adds	r3, #12
 80006aa:	781b      	ldrb	r3, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80006ac:	bf00      	nop
 80006ae:	4b0f      	ldr	r3, [pc, #60]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006b0:	681b      	ldr	r3, [r3, #0]
 80006b2:	689b      	ldr	r3, [r3, #8]
 80006b4:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	689b      	ldr	r3, [r3, #8]
 80006be:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80006c2:	431a      	orrs	r2, r3
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <adns2610_resetCOM+0x8c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	689b      	ldr	r3, [r3, #8]
 80006ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80006ce:	4313      	orrs	r3, r2
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d1ec      	bne.n	80006ae <adns2610_resetCOM+0x4e>
	LL_mDelay(100);
 80006d4:	2064      	movs	r0, #100	; 0x64
 80006d6:	f004 f939 	bl	800494c <LL_mDelay>
}
 80006da:	bf00      	nop
 80006dc:	3708      	adds	r7, #8
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
 80006e2:	bf00      	nop
 80006e4:	40003800 	.word	0x40003800
 80006e8:	40003c00 	.word	0x40003c00
 80006ec:	200005e4 	.word	0x200005e4

080006f0 <adns2610_config>:
/**
 * @brief Configure the ADNS2610 internal register. Set always awake and check the inverse product ID register
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 */
void adns2610_config(Device dev){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	71fb      	strb	r3, [r7, #7]
	// ADNS-2610 configuration
	char * devName;

	GET_DEV_NAME(dev, devName);
 80006fa:	79fb      	ldrb	r3, [r7, #7]
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <adns2610_config+0x14>
 8000700:	4b2b      	ldr	r3, [pc, #172]	; (80007b0 <adns2610_config+0xc0>)
 8000702:	e000      	b.n	8000706 <adns2610_config+0x16>
 8000704:	4b2b      	ldr	r3, [pc, #172]	; (80007b4 <adns2610_config+0xc4>)
 8000706:	60fb      	str	r3, [r7, #12]

	printf("--------------------------------\r\n--> %s CONFIGURATION \r\n--------------------------------\r\n", devName);
 8000708:	68f9      	ldr	r1, [r7, #12]
 800070a:	482b      	ldr	r0, [pc, #172]	; (80007b8 <adns2610_config+0xc8>)
 800070c:	f004 f986 	bl	8004a1c <iprintf>

	printf("Setting the sensor to always awake in %s...\r\n", _(ADNS2610_CONFIG));
 8000710:	492a      	ldr	r1, [pc, #168]	; (80007bc <adns2610_config+0xcc>)
 8000712:	482b      	ldr	r0, [pc, #172]	; (80007c0 <adns2610_config+0xd0>)
 8000714:	f004 f982 	bl	8004a1c <iprintf>
	adns2610_writeRegister(dev, ADNS2610_CONFIG_REG, ADNS2610_CONFIG_C0);
 8000718:	79fb      	ldrb	r3, [r7, #7]
 800071a:	2201      	movs	r2, #1
 800071c:	2100      	movs	r1, #0
 800071e:	4618      	mov	r0, r3
 8000720:	f000 f8be 	bl	80008a0 <adns2610_writeRegister>

	printf("Checking if %s has been written well... ", _(ADNS2610_CONFIG));
 8000724:	4925      	ldr	r1, [pc, #148]	; (80007bc <adns2610_config+0xcc>)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <adns2610_config+0xd4>)
 8000728:	f004 f978 	bl	8004a1c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_CONFIG_REG) == ADNS2610_CONFIG_C0) printf("OK.\r\n");
 800072c:	79fb      	ldrb	r3, [r7, #7]
 800072e:	2100      	movs	r1, #0
 8000730:	4618      	mov	r0, r3
 8000732:	f000 f857 	bl	80007e4 <adns2610_readRegister>
 8000736:	4603      	mov	r3, r0
 8000738:	2b01      	cmp	r3, #1
 800073a:	d10f      	bne.n	800075c <adns2610_config+0x6c>
 800073c:	4822      	ldr	r0, [pc, #136]	; (80007c8 <adns2610_config+0xd8>)
 800073e:	f004 f9e1 	bl	8004b04 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor is awake... ", _(ADNS2610_STATUS));
 8000742:	4922      	ldr	r1, [pc, #136]	; (80007cc <adns2610_config+0xdc>)
 8000744:	4822      	ldr	r0, [pc, #136]	; (80007d0 <adns2610_config+0xe0>)
 8000746:	f004 f969 	bl	8004a1c <iprintf>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2101      	movs	r1, #1
 800074e:	4618      	mov	r0, r3
 8000750:	f000 f848 	bl	80007e4 <adns2610_readRegister>
 8000754:	4603      	mov	r3, r0
 8000756:	2b01      	cmp	r3, #1
 8000758:	d116      	bne.n	8000788 <adns2610_config+0x98>
 800075a:	e003      	b.n	8000764 <adns2610_config+0x74>
	else{ printf("ERROR.\r\n"); while(1);}
 800075c:	481d      	ldr	r0, [pc, #116]	; (80007d4 <adns2610_config+0xe4>)
 800075e:	f004 f9d1 	bl	8004b04 <puts>
 8000762:	e7fe      	b.n	8000762 <adns2610_config+0x72>
	if(adns2610_readRegister(dev, ADNS2610_STATUS_REG) == ADNS2610_STATUS_AWAKE) printf("OK.\r\n");
 8000764:	4818      	ldr	r0, [pc, #96]	; (80007c8 <adns2610_config+0xd8>)
 8000766:	f004 f9cd 	bl	8004b04 <puts>
	else{ printf("ERROR.\r\n"); while(1);}

	printf("Checking into %s if the sensor responds well... ", _(ADNS2610_INVERSE_ID));
 800076a:	491b      	ldr	r1, [pc, #108]	; (80007d8 <adns2610_config+0xe8>)
 800076c:	481b      	ldr	r0, [pc, #108]	; (80007dc <adns2610_config+0xec>)
 800076e:	f004 f955 	bl	8004a1c <iprintf>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000772:	79fb      	ldrb	r3, [r7, #7]
 8000774:	2111      	movs	r1, #17
 8000776:	4618      	mov	r0, r3
 8000778:	f000 f834 	bl	80007e4 <adns2610_readRegister>
 800077c:	4603      	mov	r3, r0
 800077e:	f003 030f 	and.w	r3, r3, #15
 8000782:	2b0f      	cmp	r3, #15
 8000784:	d108      	bne.n	8000798 <adns2610_config+0xa8>
 8000786:	e003      	b.n	8000790 <adns2610_config+0xa0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000788:	4812      	ldr	r0, [pc, #72]	; (80007d4 <adns2610_config+0xe4>)
 800078a:	f004 f9bb 	bl	8004b04 <puts>
 800078e:	e7fe      	b.n	800078e <adns2610_config+0x9e>
	if((adns2610_readRegister(dev, ADNS2610_INVERSE_ID_REG) & ADNS2610_INV_PROD)  == ADNS2610_INV_PROD) printf("OK.\r\n");
 8000790:	480d      	ldr	r0, [pc, #52]	; (80007c8 <adns2610_config+0xd8>)
 8000792:	f004 f9b7 	bl	8004b04 <puts>
 8000796:	e003      	b.n	80007a0 <adns2610_config+0xb0>
	else{ printf("ERROR.\r\n"); while(1);}
 8000798:	480e      	ldr	r0, [pc, #56]	; (80007d4 <adns2610_config+0xe4>)
 800079a:	f004 f9b3 	bl	8004b04 <puts>
 800079e:	e7fe      	b.n	800079e <adns2610_config+0xae>

	printf("\r\n");
 80007a0:	480f      	ldr	r0, [pc, #60]	; (80007e0 <adns2610_config+0xf0>)
 80007a2:	f004 f9af 	bl	8004b04 <puts>
}
 80007a6:	bf00      	nop
 80007a8:	3710      	adds	r7, #16
 80007aa:	46bd      	mov	sp, r7
 80007ac:	bd80      	pop	{r7, pc}
 80007ae:	bf00      	nop
 80007b0:	080058e8 	.word	0x080058e8
 80007b4:	080058f8 	.word	0x080058f8
 80007b8:	08005908 	.word	0x08005908
 80007bc:	08005964 	.word	0x08005964
 80007c0:	08005974 	.word	0x08005974
 80007c4:	080059a4 	.word	0x080059a4
 80007c8:	080059d0 	.word	0x080059d0
 80007cc:	080059e0 	.word	0x080059e0
 80007d0:	080059f0 	.word	0x080059f0
 80007d4:	080059d8 	.word	0x080059d8
 80007d8:	08005a1c 	.word	0x08005a1c
 80007dc:	08005a30 	.word	0x08005a30
 80007e0:	08005a64 	.word	0x08005a64

080007e4 <adns2610_readRegister>:
 * @brief Read a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @return Register value
 */
uint8_t adns2610_readRegister(Device dev, uint8_t reg){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b084      	sub	sp, #16
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	4603      	mov	r3, r0
 80007ec:	460a      	mov	r2, r1
 80007ee:	71fb      	strb	r3, [r7, #7]
 80007f0:	4613      	mov	r3, r2
 80007f2:	71bb      	strb	r3, [r7, #6]

	uint8_t value;

	GET_SPI_PERIPH(dev, SPIx);
 80007f4:	79fb      	ldrb	r3, [r7, #7]
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d101      	bne.n	80007fe <adns2610_readRegister+0x1a>
 80007fa:	4b26      	ldr	r3, [pc, #152]	; (8000894 <adns2610_readRegister+0xb0>)
 80007fc:	e000      	b.n	8000800 <adns2610_readRegister+0x1c>
 80007fe:	4b26      	ldr	r3, [pc, #152]	; (8000898 <adns2610_readRegister+0xb4>)
 8000800:	4a26      	ldr	r2, [pc, #152]	; (800089c <adns2610_readRegister+0xb8>)
 8000802:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000804:	bf00      	nop
 8000806:	4b25      	ldr	r3, [pc, #148]	; (800089c <adns2610_readRegister+0xb8>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	689b      	ldr	r3, [r3, #8]
 800080c:	f003 0302 	and.w	r3, r3, #2
 8000810:	2b00      	cmp	r3, #0
 8000812:	d0f8      	beq.n	8000806 <adns2610_readRegister+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, reg);
 8000814:	4b21      	ldr	r3, [pc, #132]	; (800089c <adns2610_readRegister+0xb8>)
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	330c      	adds	r3, #12
 800081a:	79ba      	ldrb	r2, [r7, #6]
 800081c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 800081e:	bf00      	nop
 8000820:	4b1e      	ldr	r3, [pc, #120]	; (800089c <adns2610_readRegister+0xb8>)
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	689b      	ldr	r3, [r3, #8]
 8000826:	f003 0301 	and.w	r3, r3, #1
 800082a:	2b00      	cmp	r3, #0
 800082c:	d0f8      	beq.n	8000820 <adns2610_readRegister+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 800082e:	4b1b      	ldr	r3, [pc, #108]	; (800089c <adns2610_readRegister+0xb8>)
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	330c      	adds	r3, #12
 8000834:	781b      	ldrb	r3, [r3, #0]
	LL_mDelay(1);
 8000836:	2001      	movs	r0, #1
 8000838:	f004 f888 	bl	800494c <LL_mDelay>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800083c:	4b17      	ldr	r3, [pc, #92]	; (800089c <adns2610_readRegister+0xb8>)
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	330c      	adds	r3, #12
 8000842:	2200      	movs	r2, #0
 8000844:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000846:	bf00      	nop
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <adns2610_readRegister+0xb8>)
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	689b      	ldr	r3, [r3, #8]
 800084e:	f003 0301 	and.w	r3, r3, #1
 8000852:	2b00      	cmp	r3, #0
 8000854:	d0f8      	beq.n	8000848 <adns2610_readRegister+0x64>
	value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <adns2610_readRegister+0xb8>)
 8000858:	681b      	ldr	r3, [r3, #0]
 800085a:	330c      	adds	r3, #12
 800085c:	781b      	ldrb	r3, [r3, #0]
 800085e:	73fb      	strb	r3, [r7, #15]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000860:	bf00      	nop
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <adns2610_readRegister+0xb8>)
 8000864:	681b      	ldr	r3, [r3, #0]
 8000866:	689b      	ldr	r3, [r3, #8]
 8000868:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800086c:	4b0b      	ldr	r3, [pc, #44]	; (800089c <adns2610_readRegister+0xb8>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	689b      	ldr	r3, [r3, #8]
 8000872:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000876:	431a      	orrs	r2, r3
 8000878:	4b08      	ldr	r3, [pc, #32]	; (800089c <adns2610_readRegister+0xb8>)
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	689b      	ldr	r3, [r3, #8]
 800087e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000882:	4313      	orrs	r3, r2
 8000884:	2b00      	cmp	r3, #0
 8000886:	d1ec      	bne.n	8000862 <adns2610_readRegister+0x7e>
	return value;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 800088a:	4618      	mov	r0, r3
 800088c:	3710      	adds	r7, #16
 800088e:	46bd      	mov	sp, r7
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	40003800 	.word	0x40003800
 8000898:	40003c00 	.word	0x40003c00
 800089c:	200005e4 	.word	0x200005e4

080008a0 <adns2610_writeRegister>:
 * @brief Write a ADNS2610 internal register by polling
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param reg Internal register ADDRESS, see adns2610.h
 * @param value Value to write in the internal register
 */
void adns2610_writeRegister(Device dev, uint8_t reg, uint8_t value){
 80008a0:	b480      	push	{r7}
 80008a2:	b083      	sub	sp, #12
 80008a4:	af00      	add	r7, sp, #0
 80008a6:	4603      	mov	r3, r0
 80008a8:	71fb      	strb	r3, [r7, #7]
 80008aa:	460b      	mov	r3, r1
 80008ac:	71bb      	strb	r3, [r7, #6]
 80008ae:	4613      	mov	r3, r2
 80008b0:	717b      	strb	r3, [r7, #5]

	GET_SPI_PERIPH(dev, SPIx);
 80008b2:	79fb      	ldrb	r3, [r7, #7]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d101      	bne.n	80008bc <adns2610_writeRegister+0x1c>
 80008b8:	4b26      	ldr	r3, [pc, #152]	; (8000954 <adns2610_writeRegister+0xb4>)
 80008ba:	e000      	b.n	80008be <adns2610_writeRegister+0x1e>
 80008bc:	4b26      	ldr	r3, [pc, #152]	; (8000958 <adns2610_writeRegister+0xb8>)
 80008be:	4a27      	ldr	r2, [pc, #156]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c0:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// RX FIFO threshold adjusted to 16-bit word
	CLEAR_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 80008c2:	4b26      	ldr	r3, [pc, #152]	; (800095c <adns2610_writeRegister+0xbc>)
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	685a      	ldr	r2, [r3, #4]
 80008c8:	4b24      	ldr	r3, [pc, #144]	; (800095c <adns2610_writeRegister+0xbc>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80008d0:	605a      	str	r2, [r3, #4]
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 80008d2:	bf00      	nop
 80008d4:	4b21      	ldr	r3, [pc, #132]	; (800095c <adns2610_writeRegister+0xbc>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	689b      	ldr	r3, [r3, #8]
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d0f8      	beq.n	80008d4 <adns2610_writeRegister+0x34>
	// Write DR to send data through SPI
	WRITE_REG(SPIx->DR, (value << 8) | (1U << 7 | reg));
 80008e2:	797b      	ldrb	r3, [r7, #5]
 80008e4:	021b      	lsls	r3, r3, #8
 80008e6:	4619      	mov	r1, r3
 80008e8:	79bb      	ldrb	r3, [r7, #6]
 80008ea:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80008ee:	b2db      	uxtb	r3, r3
 80008f0:	461a      	mov	r2, r3
 80008f2:	4b1a      	ldr	r3, [pc, #104]	; (800095c <adns2610_writeRegister+0xbc>)
 80008f4:	681b      	ldr	r3, [r3, #0]
 80008f6:	430a      	orrs	r2, r1
 80008f8:	60da      	str	r2, [r3, #12]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 80008fa:	bf00      	nop
 80008fc:	4b17      	ldr	r3, [pc, #92]	; (800095c <adns2610_writeRegister+0xbc>)
 80008fe:	681b      	ldr	r3, [r3, #0]
 8000900:	689b      	ldr	r3, [r3, #8]
 8000902:	f003 0301 	and.w	r3, r3, #1
 8000906:	2b00      	cmp	r3, #0
 8000908:	d0f8      	beq.n	80008fc <adns2610_writeRegister+0x5c>
	READ_REG(SPIx->DR);
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <adns2610_writeRegister+0xbc>)
 800090c:	681b      	ldr	r3, [r3, #0]
 800090e:	68db      	ldr	r3, [r3, #12]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 8000910:	bf00      	nop
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <adns2610_writeRegister+0xbc>)
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	689b      	ldr	r3, [r3, #8]
 8000918:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 800091c:	4b0f      	ldr	r3, [pc, #60]	; (800095c <adns2610_writeRegister+0xbc>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	689b      	ldr	r3, [r3, #8]
 8000922:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000926:	431a      	orrs	r2, r3
 8000928:	4b0c      	ldr	r3, [pc, #48]	; (800095c <adns2610_writeRegister+0xbc>)
 800092a:	681b      	ldr	r3, [r3, #0]
 800092c:	689b      	ldr	r3, [r3, #8]
 800092e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000932:	4313      	orrs	r3, r2
 8000934:	2b00      	cmp	r3, #0
 8000936:	d1ec      	bne.n	8000912 <adns2610_writeRegister+0x72>
	// Set again RX FIFO threshold adjusted to 8-bit word
	SET_BIT(SPIx->CR2, SPI_CR2_FRXTH);
 8000938:	4b08      	ldr	r3, [pc, #32]	; (800095c <adns2610_writeRegister+0xbc>)
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	685a      	ldr	r2, [r3, #4]
 800093e:	4b07      	ldr	r3, [pc, #28]	; (800095c <adns2610_writeRegister+0xbc>)
 8000940:	681b      	ldr	r3, [r3, #0]
 8000942:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000946:	605a      	str	r2, [r3, #4]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000948:	bf00      	nop
 800094a:	370c      	adds	r7, #12
 800094c:	46bd      	mov	sp, r7
 800094e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000952:	4770      	bx	lr
 8000954:	40003800 	.word	0x40003800
 8000958:	40003c00 	.word	0x40003c00
 800095c:	200005e4 	.word	0x200005e4

08000960 <adns2610_receiveByte>:
/**
 * @brief Receive a byte from ADNS2610 as reply of adns2610_sendByte(Device dev, uint8_t value) function
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Pointer to a variable where the received value is stored
 */
void adns2610_receiveByte(Device dev, uint8_t* value){
 8000960:	b480      	push	{r7}
 8000962:	b083      	sub	sp, #12
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	6039      	str	r1, [r7, #0]
 800096a:	71fb      	strb	r3, [r7, #7]

	GET_SPI_PERIPH(dev, SPIx);
 800096c:	79fb      	ldrb	r3, [r7, #7]
 800096e:	2b00      	cmp	r3, #0
 8000970:	d101      	bne.n	8000976 <adns2610_receiveByte+0x16>
 8000972:	4b19      	ldr	r3, [pc, #100]	; (80009d8 <adns2610_receiveByte+0x78>)
 8000974:	e000      	b.n	8000978 <adns2610_receiveByte+0x18>
 8000976:	4b19      	ldr	r3, [pc, #100]	; (80009dc <adns2610_receiveByte+0x7c>)
 8000978:	4a19      	ldr	r2, [pc, #100]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097a:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, 0x00);
 800097c:	4b18      	ldr	r3, [pc, #96]	; (80009e0 <adns2610_receiveByte+0x80>)
 800097e:	681b      	ldr	r3, [r3, #0]
 8000980:	330c      	adds	r3, #12
 8000982:	2200      	movs	r2, #0
 8000984:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000986:	bf00      	nop
 8000988:	4b15      	ldr	r3, [pc, #84]	; (80009e0 <adns2610_receiveByte+0x80>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	689b      	ldr	r3, [r3, #8]
 800098e:	f003 0301 	and.w	r3, r3, #1
 8000992:	2b00      	cmp	r3, #0
 8000994:	d0f8      	beq.n	8000988 <adns2610_receiveByte+0x28>
	*value = READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000996:	4b12      	ldr	r3, [pc, #72]	; (80009e0 <adns2610_receiveByte+0x80>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	330c      	adds	r3, #12
 800099c:	781b      	ldrb	r3, [r3, #0]
 800099e:	b2da      	uxtb	r2, r3
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	701a      	strb	r2, [r3, #0]
	// Wait until end the current transaction
	while((READ_BIT(SPIx->SR, SPI_SR_FTLVL)) | (READ_BIT(SPIx->SR, SPI_SR_FRLVL)) | (READ_BIT(SPIx->SR, SPI_SR_BSY)));
 80009a4:	bf00      	nop
 80009a6:	4b0e      	ldr	r3, [pc, #56]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009a8:	681b      	ldr	r3, [r3, #0]
 80009aa:	689b      	ldr	r3, [r3, #8]
 80009ac:	f403 52c0 	and.w	r2, r3, #6144	; 0x1800
 80009b0:	4b0b      	ldr	r3, [pc, #44]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	689b      	ldr	r3, [r3, #8]
 80009b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80009ba:	431a      	orrs	r2, r3
 80009bc:	4b08      	ldr	r3, [pc, #32]	; (80009e0 <adns2610_receiveByte+0x80>)
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	689b      	ldr	r3, [r3, #8]
 80009c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c6:	4313      	orrs	r3, r2
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d1ec      	bne.n	80009a6 <adns2610_receiveByte+0x46>
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 80009cc:	bf00      	nop
 80009ce:	370c      	adds	r7, #12
 80009d0:	46bd      	mov	sp, r7
 80009d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d6:	4770      	bx	lr
 80009d8:	40003800 	.word	0x40003800
 80009dc:	40003c00 	.word	0x40003c00
 80009e0:	200005e4 	.word	0x200005e4

080009e4 <adns2610_sendByte>:
/**
 * @brief Send a byte to ADNS2610. It's used to request to ADNS2610 a register value in IT mode
 * @param dev Device address, it refers to SPI peripheral where the sensor is connected
 * @param value Value of the sent value
 */
void adns2610_sendByte(Device dev, uint8_t value){
 80009e4:	b480      	push	{r7}
 80009e6:	b083      	sub	sp, #12
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	4603      	mov	r3, r0
 80009ec:	460a      	mov	r2, r1
 80009ee:	71fb      	strb	r3, [r7, #7]
 80009f0:	4613      	mov	r3, r2
 80009f2:	71bb      	strb	r3, [r7, #6]

	GET_SPI_PERIPH(dev, SPIx);
 80009f4:	79fb      	ldrb	r3, [r7, #7]
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d101      	bne.n	80009fe <adns2610_sendByte+0x1a>
 80009fa:	4b12      	ldr	r3, [pc, #72]	; (8000a44 <adns2610_sendByte+0x60>)
 80009fc:	e000      	b.n	8000a00 <adns2610_sendByte+0x1c>
 80009fe:	4b12      	ldr	r3, [pc, #72]	; (8000a48 <adns2610_sendByte+0x64>)
 8000a00:	4a12      	ldr	r2, [pc, #72]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a02:	6013      	str	r3, [r2, #0]

	#if FULL_DUPLEX_SPI
	// Check TXE to send data
	while(!(READ_BIT(SPIx->SR, SPI_SR_TXE)));
 8000a04:	bf00      	nop
 8000a06:	4b11      	ldr	r3, [pc, #68]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	689b      	ldr	r3, [r3, #8]
 8000a0c:	f003 0302 	and.w	r3, r3, #2
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d0f8      	beq.n	8000a06 <adns2610_sendByte+0x22>
	// Write DR to send data through SPI
	WRITE_REG(*(__IO uint8_t*) &SPIx->DR, value);
 8000a14:	4b0d      	ldr	r3, [pc, #52]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	330c      	adds	r3, #12
 8000a1a:	79ba      	ldrb	r2, [r7, #6]
 8000a1c:	701a      	strb	r2, [r3, #0]
	// Wait until RXNE is set
	while(!(READ_BIT(SPIx->SR, SPI_SR_RXNE)));
 8000a1e:	bf00      	nop
 8000a20:	4b0a      	ldr	r3, [pc, #40]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a22:	681b      	ldr	r3, [r3, #0]
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	f003 0301 	and.w	r3, r3, #1
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d0f8      	beq.n	8000a20 <adns2610_sendByte+0x3c>
	READ_REG(*(__IO uint8_t*) &SPIx->DR);
 8000a2e:	4b07      	ldr	r3, [pc, #28]	; (8000a4c <adns2610_sendByte+0x68>)
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	330c      	adds	r3, #12
 8000a34:	781b      	ldrb	r3, [r3, #0]
	#else	// HALF DUPLEX SPI MODE

	#endif
}
 8000a36:	bf00      	nop
 8000a38:	370c      	adds	r7, #12
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	40003800 	.word	0x40003800
 8000a48:	40003c00 	.word	0x40003c00
 8000a4c:	200005e4 	.word	0x200005e4

08000a50 <adns2610_checkPixel>:
/**
 * @brief Check the status of a pixel
 * @param Pixel The PIXEL DATA register value received from ADNS2610
 * @return See PixelStatus
 */
PixelStatus adns2610_checkPixel(pixelTypeDef* Pixel){
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
	if(*Pixel & ADNS2610_PIXEL_VALID){
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d008      	beq.n	8000a76 <adns2610_checkPixel+0x26>
		if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	781b      	ldrb	r3, [r3, #0]
 8000a68:	b25b      	sxtb	r3, r3
 8000a6a:	2b00      	cmp	r3, #0
 8000a6c:	da01      	bge.n	8000a72 <adns2610_checkPixel+0x22>
			return VALID_SOF;
 8000a6e:	2300      	movs	r3, #0
 8000a70:	e009      	b.n	8000a86 <adns2610_checkPixel+0x36>
		}
		return VALID;
 8000a72:	2302      	movs	r3, #2
 8000a74:	e007      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else if(*Pixel & ADNS2610_PIXEL_SOF){
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	781b      	ldrb	r3, [r3, #0]
 8000a7a:	b25b      	sxtb	r3, r3
 8000a7c:	2b00      	cmp	r3, #0
 8000a7e:	da01      	bge.n	8000a84 <adns2610_checkPixel+0x34>
		return NON_VALID_SOF;
 8000a80:	2301      	movs	r3, #1
 8000a82:	e000      	b.n	8000a86 <adns2610_checkPixel+0x36>
	}
	else{
		return NON_VALID;
 8000a84:	2303      	movs	r3, #3
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr
	...

08000a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a94:	b480      	push	{r7}
 8000a96:	b083      	sub	sp, #12
 8000a98:	af00      	add	r7, sp, #0
 8000a9a:	4603      	mov	r3, r0
 8000a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	db0b      	blt.n	8000abe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aa6:	79fb      	ldrb	r3, [r7, #7]
 8000aa8:	f003 021f 	and.w	r2, r3, #31
 8000aac:	4907      	ldr	r1, [pc, #28]	; (8000acc <__NVIC_EnableIRQ+0x38>)
 8000aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ab2:	095b      	lsrs	r3, r3, #5
 8000ab4:	2001      	movs	r0, #1
 8000ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8000aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	e000e100 	.word	0xe000e100

08000ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b083      	sub	sp, #12
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	6039      	str	r1, [r7, #0]
 8000ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae0:	2b00      	cmp	r3, #0
 8000ae2:	db0a      	blt.n	8000afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ae4:	683b      	ldr	r3, [r7, #0]
 8000ae6:	b2da      	uxtb	r2, r3
 8000ae8:	490c      	ldr	r1, [pc, #48]	; (8000b1c <__NVIC_SetPriority+0x4c>)
 8000aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aee:	0112      	lsls	r2, r2, #4
 8000af0:	b2d2      	uxtb	r2, r2
 8000af2:	440b      	add	r3, r1
 8000af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000af8:	e00a      	b.n	8000b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	b2da      	uxtb	r2, r3
 8000afe:	4908      	ldr	r1, [pc, #32]	; (8000b20 <__NVIC_SetPriority+0x50>)
 8000b00:	79fb      	ldrb	r3, [r7, #7]
 8000b02:	f003 030f 	and.w	r3, r3, #15
 8000b06:	3b04      	subs	r3, #4
 8000b08:	0112      	lsls	r2, r2, #4
 8000b0a:	b2d2      	uxtb	r2, r2
 8000b0c:	440b      	add	r3, r1
 8000b0e:	761a      	strb	r2, [r3, #24]
}
 8000b10:	bf00      	nop
 8000b12:	370c      	adds	r7, #12
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr
 8000b1c:	e000e100 	.word	0xe000e100
 8000b20:	e000ed00 	.word	0xe000ed00

08000b24 <transferDMA_USART2_TX>:
void MX_USART2_UART_Init(void);

/* USER CODE BEGIN Prototypes */
void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority);

__STATIC_INLINE void transferDMA_USART2_TX(uint32_t fromAddress, uint16_t dataLength){
 8000b24:	b480      	push	{r7}
 8000b26:	b085      	sub	sp, #20
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
 8000b2c:	460b      	mov	r3, r1
 8000b2e:	807b      	strh	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8000b30:	2300      	movs	r3, #0
 8000b32:	60fb      	str	r3, [r7, #12]

	DMA1_Channel7->CMAR = (__IO uint32_t) fromAddress;
 8000b34:	4a0a      	ldr	r2, [pc, #40]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b36:	687b      	ldr	r3, [r7, #4]
 8000b38:	60d3      	str	r3, [r2, #12]
	DMA1_Channel7->CNDTR = dataLength;
 8000b3a:	4a09      	ldr	r2, [pc, #36]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b3c:	887b      	ldrh	r3, [r7, #2]
 8000b3e:	6053      	str	r3, [r2, #4]
	temp = DMA1_Channel7->CCR;
 8000b40:	4b07      	ldr	r3, [pc, #28]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	60fb      	str	r3, [r7, #12]
	SET_BIT(temp, DMA_CCR_EN);
 8000b46:	68fb      	ldr	r3, [r7, #12]
 8000b48:	f043 0301 	orr.w	r3, r3, #1
 8000b4c:	60fb      	str	r3, [r7, #12]
	DMA1_Channel7->CCR = temp;
 8000b4e:	4a04      	ldr	r2, [pc, #16]	; (8000b60 <transferDMA_USART2_TX+0x3c>)
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	6013      	str	r3, [r2, #0]
}
 8000b54:	bf00      	nop
 8000b56:	3714      	adds	r7, #20
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr
 8000b60:	40020080 	.word	0x40020080

08000b64 <eyes_init>:
frameStruct frames[2] = {{.header = FRAME_HEADER}, {.header = FRAME_HEADER}};

/** @brief Initialize the
 *
 */
void eyes_init(){
 8000b64:	b580      	push	{r7, lr}
 8000b66:	af00      	add	r7, sp, #0
	// Configure the timer to read the frames continuously
	eyes_configureFSM_TIM();
 8000b68:	f000 faa4 	bl	80010b4 <eyes_configureFSM_TIM>

	// Initialize ADNS2610 sensor
	adns2610_init(ADNS2610_RIGHT);
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f7ff fd37 	bl	80005e0 <adns2610_init>
#if SECOND_SENSOR_IMPLEMENTED
	adns2610_init(ADNS2610_LEFT);
 8000b72:	2001      	movs	r0, #1
 8000b74:	f7ff fd34 	bl	80005e0 <adns2610_init>
#endif

	// Configure DMA to transfer the frameStruct through DMA
	configureDMA_USART_TX(USART2, BYTE, MEDIUM);
 8000b78:	2201      	movs	r2, #1
 8000b7a:	2100      	movs	r1, #0
 8000b7c:	4806      	ldr	r0, [pc, #24]	; (8000b98 <eyes_init+0x34>)
 8000b7e:	f002 f8cb 	bl	8002d18 <configureDMA_USART_TX>

	// Giving initial values to variables
	currentFrameIdx = 0;
 8000b82:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <eyes_init+0x38>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	701a      	strb	r2, [r3, #0]
	lastFrameIdx = 1;
 8000b88:	4b05      	ldr	r3, [pc, #20]	; (8000ba0 <eyes_init+0x3c>)
 8000b8a:	2201      	movs	r2, #1
 8000b8c:	701a      	strb	r2, [r3, #0]

	// Initialization done
	initialized = true;
 8000b8e:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <eyes_init+0x40>)
 8000b90:	2201      	movs	r2, #1
 8000b92:	701a      	strb	r2, [r3, #0]
}
 8000b94:	bf00      	nop
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40004400 	.word	0x40004400
 8000b9c:	2000066c 	.word	0x2000066c
 8000ba0:	2000066d 	.word	0x2000066d
 8000ba4:	200005e9 	.word	0x200005e9

08000ba8 <eyes_start>:

void eyes_start(){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0

	if(!initialized) eyes_init();
 8000bac:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <eyes_start+0x2c>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	f083 0301 	eor.w	r3, r3, #1
 8000bb4:	b2db      	uxtb	r3, r3
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <eyes_start+0x16>
 8000bba:	f7ff ffd3 	bl	8000b64 <eyes_init>

	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8000bbe:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <eyes_start+0x30>)
 8000bc0:	681b      	ldr	r3, [r3, #0]
 8000bc2:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <eyes_start+0x30>)
 8000bc4:	f043 0301 	orr.w	r3, r3, #1
 8000bc8:	6013      	str	r3, [r2, #0]
	FSMstate = TRIGGER_FRAME;
 8000bca:	4b04      	ldr	r3, [pc, #16]	; (8000bdc <eyes_start+0x34>)
 8000bcc:	2201      	movs	r2, #1
 8000bce:	701a      	strb	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	200005e9 	.word	0x200005e9
 8000bd8:	40012c00 	.word	0x40012c00
 8000bdc:	200005e8 	.word	0x200005e8

08000be0 <eyes_FSM>:
 *						100us.
 * ------------------------------------------------------------------------------ */
/** @brief Compute the FSM (Finite State Machine) for control loop
 *
 */
void eyes_FSM(void){
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0

	static uint8_t collisionFlag = 0;
	static uint16_t errorCounter = 0;
	static uint8_t seqTemp;

	switch(FSMstate){
 8000be6:	4ba7      	ldr	r3, [pc, #668]	; (8000e84 <eyes_FSM+0x2a4>)
 8000be8:	781b      	ldrb	r3, [r3, #0]
 8000bea:	2b04      	cmp	r3, #4
 8000bec:	f200 8243 	bhi.w	8001076 <eyes_FSM+0x496>
 8000bf0:	a201      	add	r2, pc, #4	; (adr r2, 8000bf8 <eyes_FSM+0x18>)
 8000bf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bf6:	bf00      	nop
 8000bf8:	08000c0d 	.word	0x08000c0d
 8000bfc:	08000c57 	.word	0x08000c57
 8000c00:	08000ebd 	.word	0x08000ebd
 8000c04:	08000d05 	.word	0x08000d05
 8000c08:	08000f7d 	.word	0x08000f7d
	/* SENSOR_RESET state --------------------------------------------------------- */
	case SENSOR_RESET:
//		if(collisionFlag) goto collisionError; else collisionFlag = 1;
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c0c:	4b9e      	ldr	r3, [pc, #632]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c12:	4b9d      	ldr	r3, [pc, #628]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	805a      	strh	r2, [r3, #2]
#endif
		/* Stop the interrupt timer and reset all the relevant values */
		eyes_stopWaitIT();
 8000c18:	f000 fab2 	bl	8001180 <eyes_stopWaitIT>
		pixelIdx[0] = pixelIdx[1] = 0;
 8000c1c:	4b9a      	ldr	r3, [pc, #616]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	805a      	strh	r2, [r3, #2]
 8000c22:	4b99      	ldr	r3, [pc, #612]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c24:	885a      	ldrh	r2, [r3, #2]
 8000c26:	4b98      	ldr	r3, [pc, #608]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c28:	801a      	strh	r2, [r3, #0]
		pixelStatus[0] = pixelIdx[1] = 0;
 8000c2a:	4b97      	ldr	r3, [pc, #604]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	805a      	strh	r2, [r3, #2]
 8000c30:	4b96      	ldr	r3, [pc, #600]	; (8000e8c <eyes_FSM+0x2ac>)
 8000c32:	2200      	movs	r2, #0
 8000c34:	701a      	strb	r2, [r3, #0]
		firstPixelRead = true;
 8000c36:	4b96      	ldr	r3, [pc, #600]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c38:	2201      	movs	r2, #1
 8000c3a:	701a      	strb	r2, [r3, #0]
		firstFrameRead = true;
 8000c3c:	4b95      	ldr	r3, [pc, #596]	; (8000e94 <eyes_FSM+0x2b4>)
 8000c3e:	2201      	movs	r2, #1
 8000c40:	701a      	strb	r2, [r3, #0]
		seqTemp = 0;
 8000c42:	4b95      	ldr	r3, [pc, #596]	; (8000e98 <eyes_FSM+0x2b8>)
 8000c44:	2200      	movs	r2, #0
 8000c46:	701a      	strb	r2, [r3, #0]
		initialized = false;
 8000c48:	4b94      	ldr	r3, [pc, #592]	; (8000e9c <eyes_FSM+0x2bc>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	701a      	strb	r2, [r3, #0]
		collisionFlag = 0;
 8000c4e:	4b94      	ldr	r3, [pc, #592]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	701a      	strb	r2, [r3, #0]
		return;
 8000c54:	e215      	b.n	8001082 <eyes_FSM+0x4a2>
	/* TRIGGER_FRAME state --------------------------------------------------------- */
	case TRIGGER_FRAME:
		eyes_stopWaitIT();
 8000c56:	f000 fa93 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000c5a:	4b91      	ldr	r3, [pc, #580]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c5c:	781b      	ldrb	r3, [r3, #0]
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	f040 8204 	bne.w	800106c <eyes_FSM+0x48c>
 8000c64:	4b8e      	ldr	r3, [pc, #568]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000c66:	2201      	movs	r2, #1
 8000c68:	701a      	strb	r2, [r3, #0]
		/* Write pixel data register to reset the HW */
		adns2610_writeRegister(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c6a:	2201      	movs	r2, #1
 8000c6c:	2108      	movs	r1, #8
 8000c6e:	2000      	movs	r0, #0
 8000c70:	f7ff fe16 	bl	80008a0 <adns2610_writeRegister>
#if SECOND_SENSOR_IMPLEMENTED
		adns2610_writeRegister(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG, 0x01);
 8000c74:	2201      	movs	r2, #1
 8000c76:	2108      	movs	r1, #8
 8000c78:	2001      	movs	r0, #1
 8000c7a:	f7ff fe11 	bl	80008a0 <adns2610_writeRegister>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Increasing the SEQ number
		 * 	- Transfer all data by means of DMA
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000c7e:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000c82:	f000 fa55 	bl	8001130 <eyes_waitIT>
		firstPixelRead = true;
 8000c86:	4b82      	ldr	r3, [pc, #520]	; (8000e90 <eyes_FSM+0x2b0>)
 8000c88:	2201      	movs	r2, #1
 8000c8a:	701a      	strb	r2, [r3, #0]
		FSMstate = REQ_READING_FRAME;
 8000c8c:	4b7d      	ldr	r3, [pc, #500]	; (8000e84 <eyes_FSM+0x2a4>)
 8000c8e:	2203      	movs	r2, #3
 8000c90:	701a      	strb	r2, [r3, #0]
		pixelIdx[ADNS2610_RIGHT] = 0;
 8000c92:	4b7d      	ldr	r3, [pc, #500]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	801a      	strh	r2, [r3, #0]
#if SECOND_SENSOR_IMPLEMENTED
		pixelIdx[ADNS2610_LEFT] = 0;
 8000c98:	4b7b      	ldr	r3, [pc, #492]	; (8000e88 <eyes_FSM+0x2a8>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	805a      	strh	r2, [r3, #2]
#endif
		if(!firstFrameRead){
 8000c9e:	4b7d      	ldr	r3, [pc, #500]	; (8000e94 <eyes_FSM+0x2b4>)
 8000ca0:	781b      	ldrb	r3, [r3, #0]
 8000ca2:	f083 0301 	eor.w	r3, r3, #1
 8000ca6:	b2db      	uxtb	r3, r3
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d024      	beq.n	8000cf6 <eyes_FSM+0x116>
			frames[lastFrameIdx].seq = (seqTemp++) & 0x7F;
 8000cac:	4b7a      	ldr	r3, [pc, #488]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cae:	781b      	ldrb	r3, [r3, #0]
 8000cb0:	1c5a      	adds	r2, r3, #1
 8000cb2:	b2d1      	uxtb	r1, r2
 8000cb4:	4a78      	ldr	r2, [pc, #480]	; (8000e98 <eyes_FSM+0x2b8>)
 8000cb6:	7011      	strb	r1, [r2, #0]
 8000cb8:	4a7a      	ldr	r2, [pc, #488]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cba:	7812      	ldrb	r2, [r2, #0]
 8000cbc:	4610      	mov	r0, r2
 8000cbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000cc2:	b2d9      	uxtb	r1, r3
 8000cc4:	4a78      	ldr	r2, [pc, #480]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000cc6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000cca:	fb03 f300 	mul.w	r3, r3, r0
 8000cce:	4413      	add	r3, r2
 8000cd0:	3304      	adds	r3, #4
 8000cd2:	460a      	mov	r2, r1
 8000cd4:	701a      	strb	r2, [r3, #0]
			transferDMA_USART2_TX((uint32_t) &(frames[lastFrameIdx].header), FRAME_STUCT_LENGTH);
 8000cd6:	4b73      	ldr	r3, [pc, #460]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000cd8:	781b      	ldrb	r3, [r3, #0]
 8000cda:	461a      	mov	r2, r3
 8000cdc:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000ce0:	fb03 f302 	mul.w	r3, r3, r2
 8000ce4:	4a70      	ldr	r2, [pc, #448]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000ce6:	4413      	add	r3, r2
 8000ce8:	f240 21a9 	movw	r1, #681	; 0x2a9
 8000cec:	4618      	mov	r0, r3
 8000cee:	f7ff ff19 	bl	8000b24 <transferDMA_USART2_TX>
			OF_ResetCoefficients();
 8000cf2:	f000 ff5d 	bl	8001bb0 <OF_ResetCoefficients>
		}
		collisionFlag = 0;
 8000cf6:	4b6a      	ldr	r3, [pc, #424]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	701a      	strb	r2, [r3, #0]
		errorCounter = 0;
 8000cfc:	4b6b      	ldr	r3, [pc, #428]	; (8000eac <eyes_FSM+0x2cc>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	801a      	strh	r2, [r3, #0]
		return;
 8000d02:	e1be      	b.n	8001082 <eyes_FSM+0x4a2>
	/* REQ_READING_FRAME state --------------------------------------------------------- */
	case REQ_READING_FRAME:
		eyes_stopWaitIT();
 8000d04:	f000 fa3c 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000d08:	4b65      	ldr	r3, [pc, #404]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d0a:	781b      	ldrb	r3, [r3, #0]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	f040 81af 	bne.w	8001070 <eyes_FSM+0x490>
 8000d12:	4b63      	ldr	r3, [pc, #396]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000d14:	2201      	movs	r2, #1
 8000d16:	701a      	strb	r2, [r3, #0]
		/* Send a pixel data read request if there are pixels to read*/
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_RIGHT, ADNS2610_PIXEL_DATA_REG);
 8000d18:	4b5b      	ldr	r3, [pc, #364]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d1a:	881b      	ldrh	r3, [r3, #0]
 8000d1c:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d20:	d203      	bcs.n	8000d2a <eyes_FSM+0x14a>
 8000d22:	2108      	movs	r1, #8
 8000d24:	2000      	movs	r0, #0
 8000d26:	f7ff fe5d 	bl	80009e4 <adns2610_sendByte>
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_sendByte(ADNS2610_LEFT, ADNS2610_PIXEL_DATA_REG);
 8000d2a:	4b57      	ldr	r3, [pc, #348]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d2c:	885b      	ldrh	r3, [r3, #2]
 8000d2e:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000d32:	d203      	bcs.n	8000d3c <eyes_FSM+0x15c>
 8000d34:	2108      	movs	r1, #8
 8000d36:	2001      	movs	r0, #1
 8000d38:	f7ff fe54 	bl	80009e4 <adns2610_sendByte>
#endif
		/* While it waits the needed delay it's performed some tasks:
		 * 	- Check the last received pixel status and take decision related to it
		 * 	- Compute OF coefficients when it was possible
		 * 	*/
		eyes_waitIT(ADNS2610_TIM_TO_RD);
 8000d3c:	f44f 6016 	mov.w	r0, #2400	; 0x960
 8000d40:	f000 f9f6 	bl	8001130 <eyes_waitIT>
		if(!firstPixelRead){
 8000d44:	4b52      	ldr	r3, [pc, #328]	; (8000e90 <eyes_FSM+0x2b0>)
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	f083 0301 	eor.w	r3, r3, #1
 8000d4c:	b2db      	uxtb	r3, r3
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	f000 808e 	beq.w	8000e70 <eyes_FSM+0x290>
			pixelStatus[ADNS2610_RIGHT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000d54:	4b56      	ldr	r3, [pc, #344]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	4619      	mov	r1, r3
 8000d5a:	4b4b      	ldr	r3, [pc, #300]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d5c:	881b      	ldrh	r3, [r3, #0]
 8000d5e:	461a      	mov	r2, r3
 8000d60:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d64:	fb03 f301 	mul.w	r3, r3, r1
 8000d68:	4413      	add	r3, r2
 8000d6a:	4a4f      	ldr	r2, [pc, #316]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d6c:	4413      	add	r3, r2
 8000d6e:	3305      	adds	r3, #5
 8000d70:	4618      	mov	r0, r3
 8000d72:	f7ff fe6d 	bl	8000a50 <adns2610_checkPixel>
 8000d76:	4603      	mov	r3, r0
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4b44      	ldr	r3, [pc, #272]	; (8000e8c <eyes_FSM+0x2ac>)
 8000d7c:	701a      	strb	r2, [r3, #0]
	#if SECOND_SENSOR_IMPLEMENTED
			pixelStatus[ADNS2610_LEFT] = adns2610_checkPixel(&frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000d7e:	4b4c      	ldr	r3, [pc, #304]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	4619      	mov	r1, r3
 8000d84:	4b40      	ldr	r3, [pc, #256]	; (8000e88 <eyes_FSM+0x2a8>)
 8000d86:	885b      	ldrh	r3, [r3, #2]
 8000d88:	461a      	mov	r2, r3
 8000d8a:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000d8e:	fb03 f301 	mul.w	r3, r3, r1
 8000d92:	4413      	add	r3, r2
 8000d94:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000d98:	4a43      	ldr	r2, [pc, #268]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000d9a:	4413      	add	r3, r2
 8000d9c:	3305      	adds	r3, #5
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f7ff fe56 	bl	8000a50 <adns2610_checkPixel>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b38      	ldr	r3, [pc, #224]	; (8000e8c <eyes_FSM+0x2ac>)
 8000daa:	705a      	strb	r2, [r3, #1]
	#endif
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000dac:	4b41      	ldr	r3, [pc, #260]	; (8000eb4 <eyes_FSM+0x2d4>)
 8000dae:	4a36      	ldr	r2, [pc, #216]	; (8000e88 <eyes_FSM+0x2a8>)
 8000db0:	4941      	ldr	r1, [pc, #260]	; (8000eb8 <eyes_FSM+0x2d8>)
 8000db2:	4836      	ldr	r0, [pc, #216]	; (8000e8c <eyes_FSM+0x2ac>)
 8000db4:	f000 f9f4 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d04e      	beq.n	8000e5c <eyes_FSM+0x27c>
				FSMstate = READING_FRAME;
 8000dbe:	4b31      	ldr	r3, [pc, #196]	; (8000e84 <eyes_FSM+0x2a4>)
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	701a      	strb	r2, [r3, #0]
				if((pixelStatus[ADNS2610_RIGHT] == NON_VALID) || (pixelStatus[ADNS2610_RIGHT] == NON_VALID_SOF)){
 8000dc4:	4b31      	ldr	r3, [pc, #196]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dc6:	781b      	ldrb	r3, [r3, #0]
 8000dc8:	2b03      	cmp	r3, #3
 8000dca:	d003      	beq.n	8000dd4 <eyes_FSM+0x1f4>
 8000dcc:	4b2f      	ldr	r3, [pc, #188]	; (8000e8c <eyes_FSM+0x2ac>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b01      	cmp	r3, #1
 8000dd2:	d105      	bne.n	8000de0 <eyes_FSM+0x200>
					errorCounter++;
 8000dd4:	4b35      	ldr	r3, [pc, #212]	; (8000eac <eyes_FSM+0x2cc>)
 8000dd6:	881b      	ldrh	r3, [r3, #0]
 8000dd8:	3301      	adds	r3, #1
 8000dda:	b29a      	uxth	r2, r3
 8000ddc:	4b33      	ldr	r3, [pc, #204]	; (8000eac <eyes_FSM+0x2cc>)
 8000dde:	801a      	strh	r2, [r3, #0]
				}
				if(!firstFrameRead){
 8000de0:	4b2c      	ldr	r3, [pc, #176]	; (8000e94 <eyes_FSM+0x2b4>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	f083 0301 	eor.w	r3, r3, #1
 8000de8:	b2db      	uxtb	r3, r3
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d046      	beq.n	8000e7c <eyes_FSM+0x29c>
					OF_ComputeCoefficients(ADNS2610_RIGHT, frames[currentFrameIdx].frame[ADNS2610_RIGHT], frames[lastFrameIdx].frame[ADNS2610_RIGHT], pixelIdx[ADNS2610_RIGHT]);
 8000dee:	4b30      	ldr	r3, [pc, #192]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	461a      	mov	r2, r3
 8000df4:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000df8:	fb03 f302 	mul.w	r3, r3, r2
 8000dfc:	4a2a      	ldr	r2, [pc, #168]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000dfe:	4413      	add	r3, r2
 8000e00:	1d59      	adds	r1, r3, #5
 8000e02:	4b28      	ldr	r3, [pc, #160]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e04:	781b      	ldrb	r3, [r3, #0]
 8000e06:	461a      	mov	r2, r3
 8000e08:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e0c:	fb03 f302 	mul.w	r3, r3, r2
 8000e10:	4a25      	ldr	r2, [pc, #148]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e12:	4413      	add	r3, r2
 8000e14:	1d5a      	adds	r2, r3, #5
 8000e16:	4b1c      	ldr	r3, [pc, #112]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e18:	881b      	ldrh	r3, [r3, #0]
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f000 ff1c 	bl	8001c58 <OF_ComputeCoefficients>
#if SECOND_SENSOR_IMPLEMENTED
					OF_ComputeCoefficients(ADNS2610_LEFT, frames[currentFrameIdx].frame[ADNS2610_LEFT], frames[lastFrameIdx].frame[ADNS2610_LEFT], pixelIdx[ADNS2610_LEFT]);
 8000e20:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <eyes_FSM+0x2d0>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	461a      	mov	r2, r3
 8000e26:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e2a:	fb03 f302 	mul.w	r3, r3, r2
 8000e2e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e32:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e34:	4413      	add	r3, r2
 8000e36:	1d59      	adds	r1, r3, #5
 8000e38:	4b1a      	ldr	r3, [pc, #104]	; (8000ea4 <eyes_FSM+0x2c4>)
 8000e3a:	781b      	ldrb	r3, [r3, #0]
 8000e3c:	461a      	mov	r2, r3
 8000e3e:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000e42:	fb03 f302 	mul.w	r3, r3, r2
 8000e46:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000e4a:	4a17      	ldr	r2, [pc, #92]	; (8000ea8 <eyes_FSM+0x2c8>)
 8000e4c:	4413      	add	r3, r2
 8000e4e:	1d5a      	adds	r2, r3, #5
 8000e50:	4b0d      	ldr	r3, [pc, #52]	; (8000e88 <eyes_FSM+0x2a8>)
 8000e52:	885b      	ldrh	r3, [r3, #2]
 8000e54:	2001      	movs	r0, #1
 8000e56:	f000 feff 	bl	8001c58 <OF_ComputeCoefficients>
 8000e5a:	e00f      	b.n	8000e7c <eyes_FSM+0x29c>
#endif
				}
			}
			else{
				eyes_stopWaitIT();
 8000e5c:	f000 f990 	bl	8001180 <eyes_stopWaitIT>
				FSMstate = TRIGGER_FRAME;
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e62:	2201      	movs	r2, #1
 8000e64:	701a      	strb	r2, [r3, #0]
				eyes_waitIT(ADNS2610_TIM_BTW_WR);
 8000e66:	f44f 602f 	mov.w	r0, #2800	; 0xaf0
 8000e6a:	f000 f961 	bl	8001130 <eyes_waitIT>
 8000e6e:	e005      	b.n	8000e7c <eyes_FSM+0x29c>
			}
		}
		else{
			firstPixelRead = false;
 8000e70:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <eyes_FSM+0x2b0>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	701a      	strb	r2, [r3, #0]
			FSMstate = READING_FRAME;
 8000e76:	4b03      	ldr	r3, [pc, #12]	; (8000e84 <eyes_FSM+0x2a4>)
 8000e78:	2202      	movs	r2, #2
 8000e7a:	701a      	strb	r2, [r3, #0]
		}
		collisionFlag = 0;
 8000e7c:	4b08      	ldr	r3, [pc, #32]	; (8000ea0 <eyes_FSM+0x2c0>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	701a      	strb	r2, [r3, #0]
		return;
 8000e82:	e0fe      	b.n	8001082 <eyes_FSM+0x4a2>
 8000e84:	200005e8 	.word	0x200005e8
 8000e88:	200005ec 	.word	0x200005ec
 8000e8c:	200005f0 	.word	0x200005f0
 8000e90:	20000552 	.word	0x20000552
 8000e94:	20000553 	.word	0x20000553
 8000e98:	200005f2 	.word	0x200005f2
 8000e9c:	200005e9 	.word	0x200005e9
 8000ea0:	200005f3 	.word	0x200005f3
 8000ea4:	2000066d 	.word	0x2000066d
 8000ea8:	20000000 	.word	0x20000000
 8000eac:	200005f4 	.word	0x200005f4
 8000eb0:	2000066c 	.word	0x2000066c
 8000eb4:	200005ee 	.word	0x200005ee
 8000eb8:	200005f1 	.word	0x200005f1
	/* READING_FRAME state ---------------------------------------------------------------- */
	case READING_FRAME:
		eyes_stopWaitIT();
 8000ebc:	f000 f960 	bl	8001180 <eyes_stopWaitIT>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8000ec0:	4b71      	ldr	r3, [pc, #452]	; (8001088 <eyes_FSM+0x4a8>)
 8000ec2:	781b      	ldrb	r3, [r3, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	f040 80d5 	bne.w	8001074 <eyes_FSM+0x494>
 8000eca:	4b6f      	ldr	r3, [pc, #444]	; (8001088 <eyes_FSM+0x4a8>)
 8000ecc:	2201      	movs	r2, #1
 8000ece:	701a      	strb	r2, [r3, #0]
		/* Read pixel data register */
		if(pixelIdx[ADNS2610_RIGHT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_RIGHT, &frames[currentFrameIdx].frame[ADNS2610_RIGHT][pixelIdx[ADNS2610_RIGHT]]);
 8000ed0:	4b6e      	ldr	r3, [pc, #440]	; (800108c <eyes_FSM+0x4ac>)
 8000ed2:	881b      	ldrh	r3, [r3, #0]
 8000ed4:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000ed8:	d211      	bcs.n	8000efe <eyes_FSM+0x31e>
 8000eda:	4b6d      	ldr	r3, [pc, #436]	; (8001090 <eyes_FSM+0x4b0>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4b6a      	ldr	r3, [pc, #424]	; (800108c <eyes_FSM+0x4ac>)
 8000ee2:	881b      	ldrh	r3, [r3, #0]
 8000ee4:	461a      	mov	r2, r3
 8000ee6:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000eea:	fb03 f301 	mul.w	r3, r3, r1
 8000eee:	4413      	add	r3, r2
 8000ef0:	4a68      	ldr	r2, [pc, #416]	; (8001094 <eyes_FSM+0x4b4>)
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3305      	adds	r3, #5
 8000ef6:	4619      	mov	r1, r3
 8000ef8:	2000      	movs	r0, #0
 8000efa:	f7ff fd31 	bl	8000960 <adns2610_receiveByte>
		/* Check the last pixel status. This is done because if all is good, the next state is PROCESSING, not REQ_READING_FRAME state */
#if SECOND_SENSOR_IMPLEMENTED
		if(pixelIdx[ADNS2610_LEFT] <= PIXEL_QTY-1)	adns2610_receiveByte(ADNS2610_LEFT, &frames[currentFrameIdx].frame[ADNS2610_LEFT][pixelIdx[ADNS2610_LEFT]]);
 8000efe:	4b63      	ldr	r3, [pc, #396]	; (800108c <eyes_FSM+0x4ac>)
 8000f00:	885b      	ldrh	r3, [r3, #2]
 8000f02:	f5b3 7fa2 	cmp.w	r3, #324	; 0x144
 8000f06:	d213      	bcs.n	8000f30 <eyes_FSM+0x350>
 8000f08:	4b61      	ldr	r3, [pc, #388]	; (8001090 <eyes_FSM+0x4b0>)
 8000f0a:	781b      	ldrb	r3, [r3, #0]
 8000f0c:	4619      	mov	r1, r3
 8000f0e:	4b5f      	ldr	r3, [pc, #380]	; (800108c <eyes_FSM+0x4ac>)
 8000f10:	885b      	ldrh	r3, [r3, #2]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f18:	fb03 f301 	mul.w	r3, r3, r1
 8000f1c:	4413      	add	r3, r2
 8000f1e:	f503 73a2 	add.w	r3, r3, #324	; 0x144
 8000f22:	4a5c      	ldr	r2, [pc, #368]	; (8001094 <eyes_FSM+0x4b4>)
 8000f24:	4413      	add	r3, r2
 8000f26:	3305      	adds	r3, #5
 8000f28:	4619      	mov	r1, r3
 8000f2a:	2001      	movs	r0, #1
 8000f2c:	f7ff fd18 	bl	8000960 <adns2610_receiveByte>

		if((pixelIdx[ADNS2610_RIGHT] == PIXEL_QTY-1) && pixelIdx[ADNS2610_LEFT] == PIXEL_QTY-1){
 8000f30:	4b56      	ldr	r3, [pc, #344]	; (800108c <eyes_FSM+0x4ac>)
 8000f32:	881b      	ldrh	r3, [r3, #0]
 8000f34:	f240 1243 	movw	r2, #323	; 0x143
 8000f38:	4293      	cmp	r3, r2
 8000f3a:	d112      	bne.n	8000f62 <eyes_FSM+0x382>
 8000f3c:	4b53      	ldr	r3, [pc, #332]	; (800108c <eyes_FSM+0x4ac>)
 8000f3e:	885b      	ldrh	r3, [r3, #2]
 8000f40:	f240 1243 	movw	r2, #323	; 0x143
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d10c      	bne.n	8000f62 <eyes_FSM+0x382>
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f48:	4b53      	ldr	r3, [pc, #332]	; (8001098 <eyes_FSM+0x4b8>)
 8000f4a:	4a50      	ldr	r2, [pc, #320]	; (800108c <eyes_FSM+0x4ac>)
 8000f4c:	4953      	ldr	r1, [pc, #332]	; (800109c <eyes_FSM+0x4bc>)
 8000f4e:	4854      	ldr	r0, [pc, #336]	; (80010a0 <eyes_FSM+0x4c0>)
 8000f50:	f000 f926 	bl	80011a0 <eyes_computeIdxFromStatus>
 8000f54:	4603      	mov	r3, r0
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d00d      	beq.n	8000f76 <eyes_FSM+0x396>
				FSMstate = PROCESSING;
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	701a      	strb	r2, [r3, #0]
			if(eyes_computeIdxFromStatus(&pixelStatus[ADNS2610_RIGHT], &pixelStatus[ADNS2610_LEFT], &pixelIdx[ADNS2610_RIGHT], &pixelIdx[ADNS2610_LEFT])){
 8000f60:	e009      	b.n	8000f76 <eyes_FSM+0x396>
			}
		}
		else{
			FSMstate = REQ_READING_FRAME;
 8000f62:	4b50      	ldr	r3, [pc, #320]	; (80010a4 <eyes_FSM+0x4c4>)
 8000f64:	2203      	movs	r2, #3
 8000f66:	701a      	strb	r2, [r3, #0]
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8000f68:	20c8      	movs	r0, #200	; 0xc8
 8000f6a:	f000 f8e1 	bl	8001130 <eyes_waitIT>
			collisionFlag = 0;
 8000f6e:	4b46      	ldr	r3, [pc, #280]	; (8001088 <eyes_FSM+0x4a8>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	701a      	strb	r2, [r3, #0]
			return;
 8000f74:	e085      	b.n	8001082 <eyes_FSM+0x4a2>
			eyes_waitIT(ADNS2610_TIM_BTW_RD);
			collisionFlag = 0;
			return;
		}
#endif
		collisionFlag = 0;
 8000f76:	4b44      	ldr	r3, [pc, #272]	; (8001088 <eyes_FSM+0x4a8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	701a      	strb	r2, [r3, #0]
	/* PROCESSING state ---------------------------------------------------------------- */
	case PROCESSING:
		/* Check if it's the first frame read */
		if(firstFrameRead){
 8000f7c:	4b4a      	ldr	r3, [pc, #296]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f7e:	781b      	ldrb	r3, [r3, #0]
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d003      	beq.n	8000f8c <eyes_FSM+0x3ac>
			firstFrameRead = false;
 8000f84:	4b48      	ldr	r3, [pc, #288]	; (80010a8 <eyes_FSM+0x4c8>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	701a      	strb	r2, [r3, #0]
 8000f8a:	e05e      	b.n	800104a <eyes_FSM+0x46a>
		}
		else{
			/* Compute the Optical Flow from the previous computed coefficients */
			OF_Compute(ADNS2610_RIGHT, &(frames[currentFrameIdx].oFRight.x), &(frames[currentFrameIdx].oFRight.y));
 8000f8c:	4b40      	ldr	r3, [pc, #256]	; (8001090 <eyes_FSM+0x4b0>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	461a      	mov	r2, r3
 8000f92:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000f96:	fb03 f302 	mul.w	r3, r3, r2
 8000f9a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000f9e:	4a3d      	ldr	r2, [pc, #244]	; (8001094 <eyes_FSM+0x4b4>)
 8000fa0:	4413      	add	r3, r2
 8000fa2:	1d59      	adds	r1, r3, #5
 8000fa4:	4b3a      	ldr	r3, [pc, #232]	; (8001090 <eyes_FSM+0x4b0>)
 8000fa6:	781b      	ldrb	r3, [r3, #0]
 8000fa8:	461a      	mov	r2, r3
 8000faa:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fae:	fb03 f302 	mul.w	r3, r3, r2
 8000fb2:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <eyes_FSM+0x4b4>)
 8000fb8:	4413      	add	r3, r2
 8000fba:	3309      	adds	r3, #9
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	2000      	movs	r0, #0
 8000fc0:	f000 ff5e 	bl	8001e80 <OF_Compute>
#if SECOND_SENSOR_IMPLEMENTED
			OF_Compute(ADNS2610_LEFT, &(frames[currentFrameIdx].oFLeft.x), &(frames[currentFrameIdx].oFLeft.y));
 8000fc4:	4b32      	ldr	r3, [pc, #200]	; (8001090 <eyes_FSM+0x4b0>)
 8000fc6:	781b      	ldrb	r3, [r3, #0]
 8000fc8:	461a      	mov	r2, r3
 8000fca:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fce:	fb03 f302 	mul.w	r3, r3, r2
 8000fd2:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fd6:	4a2f      	ldr	r2, [pc, #188]	; (8001094 <eyes_FSM+0x4b4>)
 8000fd8:	4413      	add	r3, r2
 8000fda:	1d59      	adds	r1, r3, #5
 8000fdc:	4b2c      	ldr	r3, [pc, #176]	; (8001090 <eyes_FSM+0x4b0>)
 8000fde:	781b      	ldrb	r3, [r3, #0]
 8000fe0:	461a      	mov	r2, r3
 8000fe2:	f240 23a9 	movw	r3, #681	; 0x2a9
 8000fe6:	fb03 f302 	mul.w	r3, r3, r2
 8000fea:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8000fee:	4a29      	ldr	r2, [pc, #164]	; (8001094 <eyes_FSM+0x4b4>)
 8000ff0:	4413      	add	r3, r2
 8000ff2:	3309      	adds	r3, #9
 8000ff4:	461a      	mov	r2, r3
 8000ff6:	2001      	movs	r0, #1
 8000ff8:	f000 ff42 	bl	8001e80 <OF_Compute>
			OF_ComputeFused(&frames[currentFrameIdx].oFRight, &frames[currentFrameIdx].oFLeft, &frames[currentFrameIdx].oFFused);
 8000ffc:	4b24      	ldr	r3, [pc, #144]	; (8001090 <eyes_FSM+0x4b0>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001006:	fb03 f302 	mul.w	r3, r3, r2
 800100a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800100e:	4a21      	ldr	r2, [pc, #132]	; (8001094 <eyes_FSM+0x4b4>)
 8001010:	4413      	add	r3, r2
 8001012:	1d58      	adds	r0, r3, #5
 8001014:	4b1e      	ldr	r3, [pc, #120]	; (8001090 <eyes_FSM+0x4b0>)
 8001016:	781b      	ldrb	r3, [r3, #0]
 8001018:	461a      	mov	r2, r3
 800101a:	f240 23a9 	movw	r3, #681	; 0x2a9
 800101e:	fb03 f302 	mul.w	r3, r3, r2
 8001022:	f503 7324 	add.w	r3, r3, #656	; 0x290
 8001026:	4a1b      	ldr	r2, [pc, #108]	; (8001094 <eyes_FSM+0x4b4>)
 8001028:	4413      	add	r3, r2
 800102a:	1d59      	adds	r1, r3, #5
 800102c:	4b18      	ldr	r3, [pc, #96]	; (8001090 <eyes_FSM+0x4b0>)
 800102e:	781b      	ldrb	r3, [r3, #0]
 8001030:	461a      	mov	r2, r3
 8001032:	f240 23a9 	movw	r3, #681	; 0x2a9
 8001036:	fb03 f302 	mul.w	r3, r3, r2
 800103a:	f503 7326 	add.w	r3, r3, #664	; 0x298
 800103e:	4a15      	ldr	r2, [pc, #84]	; (8001094 <eyes_FSM+0x4b4>)
 8001040:	4413      	add	r3, r2
 8001042:	3305      	adds	r3, #5
 8001044:	461a      	mov	r2, r3
 8001046:	f001 f801 	bl	800204c <OF_ComputeFused>
#endif
		}
		/* Switch the frame structures to store the new frame in the "oldest" data buffer */
		SWITCH_FRAME_IDX(currentFrameIdx, lastFrameIdx);
 800104a:	4b18      	ldr	r3, [pc, #96]	; (80010ac <eyes_FSM+0x4cc>)
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	71fb      	strb	r3, [r7, #7]
 8001050:	4b0f      	ldr	r3, [pc, #60]	; (8001090 <eyes_FSM+0x4b0>)
 8001052:	781a      	ldrb	r2, [r3, #0]
 8001054:	4b15      	ldr	r3, [pc, #84]	; (80010ac <eyes_FSM+0x4cc>)
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	4a0d      	ldr	r2, [pc, #52]	; (8001090 <eyes_FSM+0x4b0>)
 800105a:	79fb      	ldrb	r3, [r7, #7]
 800105c:	7013      	strb	r3, [r2, #0]
		FSMstate = TRIGGER_FRAME;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <eyes_FSM+0x4c4>)
 8001060:	2201      	movs	r2, #1
 8001062:	701a      	strb	r2, [r3, #0]
		eyes_waitIT(ADNS2610_TIM_BTW_RD);
 8001064:	20c8      	movs	r0, #200	; 0xc8
 8001066:	f000 f863 	bl	8001130 <eyes_waitIT>
		return;
 800106a:	e00a      	b.n	8001082 <eyes_FSM+0x4a2>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 800106c:	bf00      	nop
 800106e:	e002      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001070:	bf00      	nop
 8001072:	e000      	b.n	8001076 <eyes_FSM+0x496>
		if(collisionFlag) goto collisionError; else collisionFlag = 1;
 8001074:	bf00      	nop
	}

	// Check for collisions between interrupts callings
	collisionError:
		printf("COLISSION ERROR!!\r\n");
 8001076:	480e      	ldr	r0, [pc, #56]	; (80010b0 <eyes_FSM+0x4d0>)
 8001078:	f003 fd44 	bl	8004b04 <puts>
		eyes_stopWaitIT();
 800107c:	f000 f880 	bl	8001180 <eyes_stopWaitIT>
		while(1);
 8001080:	e7fe      	b.n	8001080 <eyes_FSM+0x4a0>
}
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	200005f3 	.word	0x200005f3
 800108c:	200005ec 	.word	0x200005ec
 8001090:	2000066c 	.word	0x2000066c
 8001094:	20000000 	.word	0x20000000
 8001098:	200005ee 	.word	0x200005ee
 800109c:	200005f1 	.word	0x200005f1
 80010a0:	200005f0 	.word	0x200005f0
 80010a4:	200005e8 	.word	0x200005e8
 80010a8:	20000553 	.word	0x20000553
 80010ac:	2000066d 	.word	0x2000066d
 80010b0:	08005af4 	.word	0x08005af4

080010b4 <eyes_configureFSM_TIM>:

void eyes_configureFSM_TIM(void){
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
	// TIM1 prescalers has been configured to count microseconds
	uint32_t temp = TIM1->CR1;
 80010ba:	4b1c      	ldr	r3, [pc, #112]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	607b      	str	r3, [r7, #4]

	// Disable update interrupt
	CLEAR_BIT(TIM1->DIER, TIM_DIER_UIE);
 80010c0:	4b1a      	ldr	r3, [pc, #104]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c2:	68db      	ldr	r3, [r3, #12]
 80010c4:	4a19      	ldr	r2, [pc, #100]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010c6:	f023 0301 	bic.w	r3, r3, #1
 80010ca:	60d3      	str	r3, [r2, #12]
	// Modify CR1 register
	MODIFY_REG(temp, ~(TIM_CR1_UDIS), TIM_CR1_URS);
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	f043 0304 	orr.w	r3, r3, #4
 80010d6:	607b      	str	r3, [r7, #4]
	TIM1->CR1 = temp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	6013      	str	r3, [r2, #0]
	// Set interrupt interval
	TIM1->ARR = ADNS2610_TIM_TO_RD;
 80010de:	4b13      	ldr	r3, [pc, #76]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e0:	f44f 6216 	mov.w	r2, #2400	; 0x960
 80010e4:	62da      	str	r2, [r3, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010e8:	695b      	ldr	r3, [r3, #20]
 80010ea:	4a10      	ldr	r2, [pc, #64]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010ec:	f043 0301 	orr.w	r3, r3, #1
 80010f0:	6153      	str	r3, [r2, #20]
	// Clear pending interrupt flag
	CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f4:	691b      	ldr	r3, [r3, #16]
 80010f6:	4a0d      	ldr	r2, [pc, #52]	; (800112c <eyes_configureFSM_TIM+0x78>)
 80010f8:	f023 0301 	bic.w	r3, r3, #1
 80010fc:	6113      	str	r3, [r2, #16]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 80010fe:	4b0b      	ldr	r3, [pc, #44]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	4a0a      	ldr	r2, [pc, #40]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001104:	f023 0304 	bic.w	r3, r3, #4
 8001108:	6013      	str	r3, [r2, #0]
	// Enable update interrupt
	SET_BIT(TIM1->DIER, TIM_DIER_UIE);
 800110a:	4b08      	ldr	r3, [pc, #32]	; (800112c <eyes_configureFSM_TIM+0x78>)
 800110c:	68db      	ldr	r3, [r3, #12]
 800110e:	4a07      	ldr	r2, [pc, #28]	; (800112c <eyes_configureFSM_TIM+0x78>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	60d3      	str	r3, [r2, #12]
	// Configure NVIC to handle TIM1 update interrupt
	NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0);
 8001116:	2100      	movs	r1, #0
 8001118:	2019      	movs	r0, #25
 800111a:	f7ff fcd9 	bl	8000ad0 <__NVIC_SetPriority>
	NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 800111e:	2019      	movs	r0, #25
 8001120:	f7ff fcb8 	bl	8000a94 <__NVIC_EnableIRQ>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	40012c00 	.word	0x40012c00

08001130 <eyes_waitIT>:

void eyes_waitIT(uint32_t Count250ns){
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
	// Disable update interrupt generation
	SET_BIT(TIM1->CR1, TIM_CR1_URS);
 8001138:	4b10      	ldr	r3, [pc, #64]	; (800117c <eyes_waitIT+0x4c>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a0f      	ldr	r2, [pc, #60]	; (800117c <eyes_waitIT+0x4c>)
 800113e:	f043 0304 	orr.w	r3, r3, #4
 8001142:	6013      	str	r3, [r2, #0]
	// Set time to wait
	TIM1->ARR = Count250ns;
 8001144:	4a0d      	ldr	r2, [pc, #52]	; (800117c <eyes_waitIT+0x4c>)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	62d3      	str	r3, [r2, #44]	; 0x2c
	// Update the prescaler and counter registers
	SET_BIT(TIM1->EGR, TIM_EGR_UG);
 800114a:	4b0c      	ldr	r3, [pc, #48]	; (800117c <eyes_waitIT+0x4c>)
 800114c:	695b      	ldr	r3, [r3, #20]
 800114e:	4a0b      	ldr	r2, [pc, #44]	; (800117c <eyes_waitIT+0x4c>)
 8001150:	f043 0301 	orr.w	r3, r3, #1
 8001154:	6153      	str	r3, [r2, #20]
	// Enable update interrupt generation
	CLEAR_BIT(TIM1->CR1, TIM_CR1_URS);
 8001156:	4b09      	ldr	r3, [pc, #36]	; (800117c <eyes_waitIT+0x4c>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	4a08      	ldr	r2, [pc, #32]	; (800117c <eyes_waitIT+0x4c>)
 800115c:	f023 0304 	bic.w	r3, r3, #4
 8001160:	6013      	str	r3, [r2, #0]
	// Enable and start timer
	SET_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001162:	4b06      	ldr	r3, [pc, #24]	; (800117c <eyes_waitIT+0x4c>)
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	4a05      	ldr	r2, [pc, #20]	; (800117c <eyes_waitIT+0x4c>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6013      	str	r3, [r2, #0]
}
 800116e:	bf00      	nop
 8001170:	370c      	adds	r7, #12
 8001172:	46bd      	mov	sp, r7
 8001174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001178:	4770      	bx	lr
 800117a:	bf00      	nop
 800117c:	40012c00 	.word	0x40012c00

08001180 <eyes_stopWaitIT>:

void eyes_stopWaitIT(){
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
	// Disable and start timer
	CLEAR_BIT(TIM1->CR1, TIM_CR1_CEN);
 8001184:	4b05      	ldr	r3, [pc, #20]	; (800119c <eyes_stopWaitIT+0x1c>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	4a04      	ldr	r2, [pc, #16]	; (800119c <eyes_stopWaitIT+0x1c>)
 800118a:	f023 0301 	bic.w	r3, r3, #1
 800118e:	6013      	str	r3, [r2, #0]
}
 8001190:	bf00      	nop
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr
 800119a:	bf00      	nop
 800119c:	40012c00 	.word	0x40012c00

080011a0 <eyes_computeIdxFromStatus>:

bool eyes_computeIdxFromStatus(PixelStatus* status1, PixelStatus* status2, uint16_t* idx1,  uint16_t* idx2){
 80011a0:	b480      	push	{r7}
 80011a2:	b085      	sub	sp, #20
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	60f8      	str	r0, [r7, #12]
 80011a8:	60b9      	str	r1, [r7, #8]
 80011aa:	607a      	str	r2, [r7, #4]
 80011ac:	603b      	str	r3, [r7, #0]

	if((*status1 == VALID_SOF) && (*idx1 == 0)){
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	781b      	ldrb	r3, [r3, #0]
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d10a      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	881b      	ldrh	r3, [r3, #0]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d106      	bne.n	80011cc <eyes_computeIdxFromStatus+0x2c>
		(*idx1)++;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	881b      	ldrh	r3, [r3, #0]
 80011c2:	3301      	adds	r3, #1
 80011c4:	b29a      	uxth	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	801a      	strh	r2, [r3, #0]
 80011ca:	e024      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if((*status1 == VALID) && (*idx1 != 0) && (*idx1 < PIXEL_QTY-1)){
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	781b      	ldrb	r3, [r3, #0]
 80011d0:	2b02      	cmp	r3, #2
 80011d2:	d10f      	bne.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	881b      	ldrh	r3, [r3, #0]
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <eyes_computeIdxFromStatus+0x54>
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 80011e4:	d806      	bhi.n	80011f4 <eyes_computeIdxFromStatus+0x54>
		(*idx1)++;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	881b      	ldrh	r3, [r3, #0]
 80011ea:	3301      	adds	r3, #1
 80011ec:	b29a      	uxth	r2, r3
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	801a      	strh	r2, [r3, #0]
 80011f2:	e010      	b.n	8001216 <eyes_computeIdxFromStatus+0x76>
	}
	else if ((*status1 == VALID_SOF) && (*idx1 != 0)){
 80011f4:	68fb      	ldr	r3, [r7, #12]
 80011f6:	781b      	ldrb	r3, [r3, #0]
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d10c      	bne.n	8001216 <eyes_computeIdxFromStatus+0x76>
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	881b      	ldrh	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d008      	beq.n	8001216 <eyes_computeIdxFromStatus+0x76>
		*idx1 = *idx2 = 0;
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	2200      	movs	r2, #0
 8001208:	801a      	strh	r2, [r3, #0]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	881a      	ldrh	r2, [r3, #0]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	801a      	strh	r2, [r3, #0]
		return false;
 8001212:	2300      	movs	r3, #0
 8001214:	e034      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#if SECOND_SENSOR_IMPLEMENTED
	if((*status2 == VALID_SOF) && (*idx2 == 0)){
 8001216:	68bb      	ldr	r3, [r7, #8]
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	2b00      	cmp	r3, #0
 800121c:	d10a      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
 800121e:	683b      	ldr	r3, [r7, #0]
 8001220:	881b      	ldrh	r3, [r3, #0]
 8001222:	2b00      	cmp	r3, #0
 8001224:	d106      	bne.n	8001234 <eyes_computeIdxFromStatus+0x94>
		(*idx2)++;
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	881b      	ldrh	r3, [r3, #0]
 800122a:	3301      	adds	r3, #1
 800122c:	b29a      	uxth	r2, r3
 800122e:	683b      	ldr	r3, [r7, #0]
 8001230:	801a      	strh	r2, [r3, #0]
 8001232:	e024      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID) && (*idx2 != 0) && (*idx2 < PIXEL_QTY-1)){
 8001234:	68bb      	ldr	r3, [r7, #8]
 8001236:	781b      	ldrb	r3, [r3, #0]
 8001238:	2b02      	cmp	r3, #2
 800123a:	d10f      	bne.n	800125c <eyes_computeIdxFromStatus+0xbc>
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d00b      	beq.n	800125c <eyes_computeIdxFromStatus+0xbc>
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	881b      	ldrh	r3, [r3, #0]
 8001248:	f5b3 7fa1 	cmp.w	r3, #322	; 0x142
 800124c:	d806      	bhi.n	800125c <eyes_computeIdxFromStatus+0xbc>
		(*idx2)++;
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	881b      	ldrh	r3, [r3, #0]
 8001252:	3301      	adds	r3, #1
 8001254:	b29a      	uxth	r2, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	801a      	strh	r2, [r3, #0]
 800125a:	e010      	b.n	800127e <eyes_computeIdxFromStatus+0xde>
	}
	else if((*status2 == VALID_SOF) && (*idx2 != 0)){
 800125c:	68bb      	ldr	r3, [r7, #8]
 800125e:	781b      	ldrb	r3, [r3, #0]
 8001260:	2b00      	cmp	r3, #0
 8001262:	d10c      	bne.n	800127e <eyes_computeIdxFromStatus+0xde>
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	881b      	ldrh	r3, [r3, #0]
 8001268:	2b00      	cmp	r3, #0
 800126a:	d008      	beq.n	800127e <eyes_computeIdxFromStatus+0xde>
		(*idx1) = (*idx2) = 0;
 800126c:	683b      	ldr	r3, [r7, #0]
 800126e:	2200      	movs	r2, #0
 8001270:	801a      	strh	r2, [r3, #0]
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	881a      	ldrh	r2, [r3, #0]
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	801a      	strh	r2, [r3, #0]
		return false;
 800127a:	2300      	movs	r3, #0
 800127c:	e000      	b.n	8001280 <eyes_computeIdxFromStatus+0xe0>
	}
#endif
	return true;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3714      	adds	r7, #20
 8001284:	46bd      	mov	sp, r7
 8001286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128a:	4770      	bx	lr

0800128c <TIM1_UP_TIM16_IRQHandler>:

void TIM1_UP_TIM16_IRQHandler(void){
 800128c:	b580      	push	{r7, lr}
 800128e:	af00      	add	r7, sp, #0
	// If the interrupt flag is enabled
	if(READ_BIT(TIM1->SR, TIM_SR_UIF)){
 8001290:	4b07      	ldr	r3, [pc, #28]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 8001292:	691b      	ldr	r3, [r3, #16]
 8001294:	f003 0301 	and.w	r3, r3, #1
 8001298:	2b00      	cmp	r3, #0
 800129a:	d007      	beq.n	80012ac <TIM1_UP_TIM16_IRQHandler+0x20>
		// Clear pending interrupt flag
		CLEAR_BIT(TIM1->SR, TIM_SR_UIF);
 800129c:	4b04      	ldr	r3, [pc, #16]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 800129e:	691b      	ldr	r3, [r3, #16]
 80012a0:	4a03      	ldr	r2, [pc, #12]	; (80012b0 <TIM1_UP_TIM16_IRQHandler+0x24>)
 80012a2:	f023 0301 	bic.w	r3, r3, #1
 80012a6:	6113      	str	r3, [r2, #16]
		// Process FSM
		eyes_FSM();
 80012a8:	f7ff fc9a 	bl	8000be0 <eyes_FSM>
	}
}
 80012ac:	bf00      	nop
 80012ae:	bd80      	pop	{r7, pc}
 80012b0:	40012c00 	.word	0x40012c00

080012b4 <gimbalControlInit>:
void disablePWM();

/**
 * @brief Setting up all the peripherals (UART and TIMER) needed to control de gimbal position
 */
void gimbalControlInit(void){
 80012b4:	b580      	push	{r7, lr}
 80012b6:	af00      	add	r7, sp, #0
	// Configure UART2 interrupt to receive data from PC
	configure_IRQ_USART_RX();
 80012b8:	f001 fd86 	bl	8002dc8 <configure_IRQ_USART_RX>

	// Flag to know PWM signal state
	pwmEn = false;
 80012bc:	4b03      	ldr	r3, [pc, #12]	; (80012cc <gimbalControlInit+0x18>)
 80012be:	2200      	movs	r2, #0
 80012c0:	701a      	strb	r2, [r3, #0]

	// Flag to know if tracking function is enable/disable
	trackingEn = false;
 80012c2:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <gimbalControlInit+0x1c>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	701a      	strb	r2, [r3, #0]
}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	2000067b 	.word	0x2000067b
 80012d0:	2000067a 	.word	0x2000067a

080012d4 <decodeCmd>:
 * @brief Receive a string and decode the command type related to it
 * @param cmdString	The command in string format
 * @param length	The length of the command
 * @return	The command type in cmdTypeDef format
 */
cmdTypeDef decodeCmd(char const * cmdString, int length){
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b082      	sub	sp, #8
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]
 80012dc:	6039      	str	r1, [r7, #0]

	// Enable PWM if it was disabled
	if(!pwmEn)	enablePWM();
 80012de:	4b56      	ldr	r3, [pc, #344]	; (8001438 <decodeCmd+0x164>)
 80012e0:	781b      	ldrb	r3, [r3, #0]
 80012e2:	f083 0301 	eor.w	r3, r3, #1
 80012e6:	b2db      	uxtb	r3, r3
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d001      	beq.n	80012f0 <decodeCmd+0x1c>
 80012ec:	f000 f8be 	bl	800146c <enablePWM>

	// Tracking enable command
	if(strncmp(cmdString, "TRON\n", length) == 0){
 80012f0:	683b      	ldr	r3, [r7, #0]
 80012f2:	461a      	mov	r2, r3
 80012f4:	4951      	ldr	r1, [pc, #324]	; (800143c <decodeCmd+0x168>)
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	f003 fc0c 	bl	8004b14 <strncmp>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d104      	bne.n	800130c <decodeCmd+0x38>
		trackingEn = true;
 8001302:	4b4f      	ldr	r3, [pc, #316]	; (8001440 <decodeCmd+0x16c>)
 8001304:	2201      	movs	r2, #1
 8001306:	701a      	strb	r2, [r3, #0]
		return TRACKING_ON;
 8001308:	2307      	movs	r3, #7
 800130a:	e090      	b.n	800142e <decodeCmd+0x15a>
	}
	if(strncmp(cmdString, "TROFF\n", length) == 0){
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	461a      	mov	r2, r3
 8001310:	494c      	ldr	r1, [pc, #304]	; (8001444 <decodeCmd+0x170>)
 8001312:	6878      	ldr	r0, [r7, #4]
 8001314:	f003 fbfe 	bl	8004b14 <strncmp>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d104      	bne.n	8001328 <decodeCmd+0x54>
		trackingEn = false;
 800131e:	4b48      	ldr	r3, [pc, #288]	; (8001440 <decodeCmd+0x16c>)
 8001320:	2200      	movs	r2, #0
 8001322:	701a      	strb	r2, [r3, #0]
		return TRACKING_OFF;
 8001324:	2308      	movs	r3, #8
 8001326:	e082      	b.n	800142e <decodeCmd+0x15a>
	}

	// Tracking enable so It isn't able to perform any command
	if(trackingEn) return NA;
 8001328:	4b45      	ldr	r3, [pc, #276]	; (8001440 <decodeCmd+0x16c>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <decodeCmd+0x60>
 8001330:	2309      	movs	r3, #9
 8001332:	e07c      	b.n	800142e <decodeCmd+0x15a>

	// Center command
	if(strncmp(cmdString, "CN\n", length) == 0){
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	461a      	mov	r2, r3
 8001338:	4943      	ldr	r1, [pc, #268]	; (8001448 <decodeCmd+0x174>)
 800133a:	6878      	ldr	r0, [r7, #4]
 800133c:	f003 fbea 	bl	8004b14 <strncmp>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d111      	bne.n	800136a <decodeCmd+0x96>

		motorPos.pitchPos = CENTER_POS;
 8001346:	4b41      	ldr	r3, [pc, #260]	; (800144c <decodeCmd+0x178>)
 8001348:	f240 52db 	movw	r2, #1499	; 0x5db
 800134c:	801a      	strh	r2, [r3, #0]
		motorPos.rollPos = CENTER_POS;
 800134e:	4b3f      	ldr	r3, [pc, #252]	; (800144c <decodeCmd+0x178>)
 8001350:	f240 52db 	movw	r2, #1499	; 0x5db
 8001354:	805a      	strh	r2, [r3, #2]
		motorPos.yawPos = CENTER_POS;
 8001356:	4b3d      	ldr	r3, [pc, #244]	; (800144c <decodeCmd+0x178>)
 8001358:	f240 52db 	movw	r2, #1499	; 0x5db
 800135c:	809a      	strh	r2, [r3, #4]

		//TIM3->CCR1 = motorPos.pitchPos;
		//TIM3->CCR2 = motorPos.rollPos;
		TIM3->CCR4 = motorPos.yawPos;
 800135e:	4b3b      	ldr	r3, [pc, #236]	; (800144c <decodeCmd+0x178>)
 8001360:	889a      	ldrh	r2, [r3, #4]
 8001362:	4b3b      	ldr	r3, [pc, #236]	; (8001450 <decodeCmd+0x17c>)
 8001364:	641a      	str	r2, [r3, #64]	; 0x40

		return CENTER;
 8001366:	2306      	movs	r3, #6
 8001368:	e061      	b.n	800142e <decodeCmd+0x15a>
	}

	// Up command
	if(strncmp(cmdString, "UP\n", length) == 0){
 800136a:	683b      	ldr	r3, [r7, #0]
 800136c:	461a      	mov	r2, r3
 800136e:	4939      	ldr	r1, [pc, #228]	; (8001454 <decodeCmd+0x180>)
 8001370:	6878      	ldr	r0, [r7, #4]
 8001372:	f003 fbcf 	bl	8004b14 <strncmp>
 8001376:	4603      	mov	r3, r0
 8001378:	2b00      	cmp	r3, #0
 800137a:	d101      	bne.n	8001380 <decodeCmd+0xac>
		return UP;
 800137c:	2300      	movs	r3, #0
 800137e:	e056      	b.n	800142e <decodeCmd+0x15a>
	}
	// Down command
	if(strncmp(cmdString, "DW\n", length) == 0){
 8001380:	683b      	ldr	r3, [r7, #0]
 8001382:	461a      	mov	r2, r3
 8001384:	4934      	ldr	r1, [pc, #208]	; (8001458 <decodeCmd+0x184>)
 8001386:	6878      	ldr	r0, [r7, #4]
 8001388:	f003 fbc4 	bl	8004b14 <strncmp>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d101      	bne.n	8001396 <decodeCmd+0xc2>
		return DOWN;
 8001392:	2301      	movs	r3, #1
 8001394:	e04b      	b.n	800142e <decodeCmd+0x15a>
	}
	// Left command
	if(strncmp(cmdString, "LF\n", length) == 0){
 8001396:	683b      	ldr	r3, [r7, #0]
 8001398:	461a      	mov	r2, r3
 800139a:	4930      	ldr	r1, [pc, #192]	; (800145c <decodeCmd+0x188>)
 800139c:	6878      	ldr	r0, [r7, #4]
 800139e:	f003 fbb9 	bl	8004b14 <strncmp>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d110      	bne.n	80013ca <decodeCmd+0xf6>
		if(motorPos.yawPos > MIN_POS) motorPos.yawPos -= DELTA_POS;
 80013a8:	4b28      	ldr	r3, [pc, #160]	; (800144c <decodeCmd+0x178>)
 80013aa:	889b      	ldrh	r3, [r3, #4]
 80013ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80013b0:	d305      	bcc.n	80013be <decodeCmd+0xea>
 80013b2:	4b26      	ldr	r3, [pc, #152]	; (800144c <decodeCmd+0x178>)
 80013b4:	889b      	ldrh	r3, [r3, #4]
 80013b6:	3b01      	subs	r3, #1
 80013b8:	b29a      	uxth	r2, r3
 80013ba:	4b24      	ldr	r3, [pc, #144]	; (800144c <decodeCmd+0x178>)
 80013bc:	809a      	strh	r2, [r3, #4]
		TIM3->CCR4 = motorPos.yawPos;
 80013be:	4b23      	ldr	r3, [pc, #140]	; (800144c <decodeCmd+0x178>)
 80013c0:	889a      	ldrh	r2, [r3, #4]
 80013c2:	4b23      	ldr	r3, [pc, #140]	; (8001450 <decodeCmd+0x17c>)
 80013c4:	641a      	str	r2, [r3, #64]	; 0x40
		return LEFT;
 80013c6:	2302      	movs	r3, #2
 80013c8:	e031      	b.n	800142e <decodeCmd+0x15a>
	}
	// Right command
	if(strncmp(cmdString, "RH\n", length) == 0){
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	461a      	mov	r2, r3
 80013ce:	4924      	ldr	r1, [pc, #144]	; (8001460 <decodeCmd+0x18c>)
 80013d0:	6878      	ldr	r0, [r7, #4]
 80013d2:	f003 fb9f 	bl	8004b14 <strncmp>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d111      	bne.n	8001400 <decodeCmd+0x12c>
		if(motorPos.yawPos < MAX_POS) motorPos.yawPos += DELTA_POS;
 80013dc:	4b1b      	ldr	r3, [pc, #108]	; (800144c <decodeCmd+0x178>)
 80013de:	889b      	ldrh	r3, [r3, #4]
 80013e0:	f240 72ce 	movw	r2, #1998	; 0x7ce
 80013e4:	4293      	cmp	r3, r2
 80013e6:	d805      	bhi.n	80013f4 <decodeCmd+0x120>
 80013e8:	4b18      	ldr	r3, [pc, #96]	; (800144c <decodeCmd+0x178>)
 80013ea:	889b      	ldrh	r3, [r3, #4]
 80013ec:	3301      	adds	r3, #1
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b16      	ldr	r3, [pc, #88]	; (800144c <decodeCmd+0x178>)
 80013f2:	809a      	strh	r2, [r3, #4]
		TIM3->CCR4 = motorPos.yawPos;
 80013f4:	4b15      	ldr	r3, [pc, #84]	; (800144c <decodeCmd+0x178>)
 80013f6:	889a      	ldrh	r2, [r3, #4]
 80013f8:	4b15      	ldr	r3, [pc, #84]	; (8001450 <decodeCmd+0x17c>)
 80013fa:	641a      	str	r2, [r3, #64]	; 0x40
		return RIGHT;
 80013fc:	2303      	movs	r3, #3
 80013fe:	e016      	b.n	800142e <decodeCmd+0x15a>
	}

	// Rotate left command
	if(strncmp(cmdString, "RLF\n", length) == 0){
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	461a      	mov	r2, r3
 8001404:	4917      	ldr	r1, [pc, #92]	; (8001464 <decodeCmd+0x190>)
 8001406:	6878      	ldr	r0, [r7, #4]
 8001408:	f003 fb84 	bl	8004b14 <strncmp>
 800140c:	4603      	mov	r3, r0
 800140e:	2b00      	cmp	r3, #0
 8001410:	d101      	bne.n	8001416 <decodeCmd+0x142>
		return ROTATE_LEFT;
 8001412:	2304      	movs	r3, #4
 8001414:	e00b      	b.n	800142e <decodeCmd+0x15a>
	}
	// Rotate right command
	if(strncmp(cmdString, "RRH\n", length) == 0){
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	461a      	mov	r2, r3
 800141a:	4913      	ldr	r1, [pc, #76]	; (8001468 <decodeCmd+0x194>)
 800141c:	6878      	ldr	r0, [r7, #4]
 800141e:	f003 fb79 	bl	8004b14 <strncmp>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d101      	bne.n	800142c <decodeCmd+0x158>
		return ROTATE_RIGHT;
 8001428:	2305      	movs	r3, #5
 800142a:	e000      	b.n	800142e <decodeCmd+0x15a>
	}
	return NA;
 800142c:	2309      	movs	r3, #9
}
 800142e:	4618      	mov	r0, r3
 8001430:	3708      	adds	r7, #8
 8001432:	46bd      	mov	sp, r7
 8001434:	bd80      	pop	{r7, pc}
 8001436:	bf00      	nop
 8001438:	2000067b 	.word	0x2000067b
 800143c:	08005b08 	.word	0x08005b08
 8001440:	2000067a 	.word	0x2000067a
 8001444:	08005b10 	.word	0x08005b10
 8001448:	08005b18 	.word	0x08005b18
 800144c:	20000554 	.word	0x20000554
 8001450:	40000400 	.word	0x40000400
 8001454:	08005b1c 	.word	0x08005b1c
 8001458:	08005b20 	.word	0x08005b20
 800145c:	08005b24 	.word	0x08005b24
 8001460:	08005b28 	.word	0x08005b28
 8001464:	08005b2c 	.word	0x08005b2c
 8001468:	08005b34 	.word	0x08005b34

0800146c <enablePWM>:

void enablePWM(){
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
	// Enable output compare OCx channels
	SET_BIT(TIM3->CCER, TIM_CCER_CC4E);
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <enablePWM+0x3c>)
 8001472:	6a1b      	ldr	r3, [r3, #32]
 8001474:	4a0c      	ldr	r2, [pc, #48]	; (80014a8 <enablePWM+0x3c>)
 8001476:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800147a:	6213      	str	r3, [r2, #32]
	/*MODIFY_REG(TIM3->CCER, ~(TIM_CCER_CC1NE | TIM_CCER_CC2NE),
			(TIM_CCER_CC1E | TIM_CCER_CC2E | TIM_CCER_CC4E));*/

	// Enable master output
	MODIFY_REG(TIM3->BDTR, ~(TIM_BDTR_OSSI | TIM_BDTR_OSSR), TIM_BDTR_MOE);
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <enablePWM+0x3c>)
 800147e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001480:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001484:	4a08      	ldr	r2, [pc, #32]	; (80014a8 <enablePWM+0x3c>)
 8001486:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800148a:	6453      	str	r3, [r2, #68]	; 0x44

	// Enable counter
	SET_BIT(TIM3->CR1, TIM_CR1_CEN);
 800148c:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <enablePWM+0x3c>)
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <enablePWM+0x3c>)
 8001492:	f043 0301 	orr.w	r3, r3, #1
 8001496:	6013      	str	r3, [r2, #0]

	pwmEn = true;
 8001498:	4b04      	ldr	r3, [pc, #16]	; (80014ac <enablePWM+0x40>)
 800149a:	2201      	movs	r2, #1
 800149c:	701a      	strb	r2, [r3, #0]
}
 800149e:	bf00      	nop
 80014a0:	46bd      	mov	sp, r7
 80014a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a6:	4770      	bx	lr
 80014a8:	40000400 	.word	0x40000400
 80014ac:	2000067b 	.word	0x2000067b

080014b0 <USART2_IRQHandler>:
	motorPos.yawPos = CENTER_POS;

	pwmEn = false;
}

void USART2_IRQHandler(void){
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
	if(READ_BIT(USART2->ISR, USART_ISR_ORE)){
 80014b4:	4b22      	ldr	r3, [pc, #136]	; (8001540 <USART2_IRQHandler+0x90>)
 80014b6:	69db      	ldr	r3, [r3, #28]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d00d      	beq.n	80014dc <USART2_IRQHandler+0x2c>
		SET_BIT(USART2->ICR, USART_ICR_ORECF);
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <USART2_IRQHandler+0x90>)
 80014c2:	6a1b      	ldr	r3, [r3, #32]
 80014c4:	4a1e      	ldr	r2, [pc, #120]	; (8001540 <USART2_IRQHandler+0x90>)
 80014c6:	f043 0308 	orr.w	r3, r3, #8
 80014ca:	6213      	str	r3, [r2, #32]
		// Flush all data in USART RX
		SET_BIT(USART2->RQR, USART_RQR_RXFRQ);
 80014cc:	4b1c      	ldr	r3, [pc, #112]	; (8001540 <USART2_IRQHandler+0x90>)
 80014ce:	8b1b      	ldrh	r3, [r3, #24]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4a1b      	ldr	r2, [pc, #108]	; (8001540 <USART2_IRQHandler+0x90>)
 80014d4:	f043 0308 	orr.w	r3, r3, #8
 80014d8:	b29b      	uxth	r3, r3
 80014da:	8313      	strh	r3, [r2, #24]
	}
	if(READ_BIT(USART2->ISR, USART_ISR_RXNE)){
 80014dc:	4b18      	ldr	r3, [pc, #96]	; (8001540 <USART2_IRQHandler+0x90>)
 80014de:	69db      	ldr	r3, [r3, #28]
 80014e0:	f003 0320 	and.w	r3, r3, #32
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d029      	beq.n	800153c <USART2_IRQHandler+0x8c>
		bufferIn[i] = READ_REG(USART2->RDR);
 80014e8:	4b15      	ldr	r3, [pc, #84]	; (8001540 <USART2_IRQHandler+0x90>)
 80014ea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b15      	ldr	r3, [pc, #84]	; (8001544 <USART2_IRQHandler+0x94>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b2d1      	uxtb	r1, r2
 80014f4:	4a14      	ldr	r2, [pc, #80]	; (8001548 <USART2_IRQHandler+0x98>)
 80014f6:	54d1      	strb	r1, [r2, r3]

		if(bufferIn[i] == TAIL_CHAR){
 80014f8:	4b12      	ldr	r3, [pc, #72]	; (8001544 <USART2_IRQHandler+0x94>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	4a12      	ldr	r2, [pc, #72]	; (8001548 <USART2_IRQHandler+0x98>)
 80014fe:	5cd3      	ldrb	r3, [r2, r3]
 8001500:	2b0a      	cmp	r3, #10
 8001502:	d10e      	bne.n	8001522 <USART2_IRQHandler+0x72>
			i++;
 8001504:	4b0f      	ldr	r3, [pc, #60]	; (8001544 <USART2_IRQHandler+0x94>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	3301      	adds	r3, #1
 800150a:	4a0e      	ldr	r2, [pc, #56]	; (8001544 <USART2_IRQHandler+0x94>)
 800150c:	6013      	str	r3, [r2, #0]
			decodeCmd(bufferIn, i);
 800150e:	4b0d      	ldr	r3, [pc, #52]	; (8001544 <USART2_IRQHandler+0x94>)
 8001510:	681b      	ldr	r3, [r3, #0]
 8001512:	4619      	mov	r1, r3
 8001514:	480c      	ldr	r0, [pc, #48]	; (8001548 <USART2_IRQHandler+0x98>)
 8001516:	f7ff fedd 	bl	80012d4 <decodeCmd>
			i = 0;
 800151a:	4b0a      	ldr	r3, [pc, #40]	; (8001544 <USART2_IRQHandler+0x94>)
 800151c:	2200      	movs	r2, #0
 800151e:	601a      	str	r2, [r3, #0]
		else{
			i++;
		}
	}

}
 8001520:	e00c      	b.n	800153c <USART2_IRQHandler+0x8c>
		else if(i ==  BUFFER_SIZE){
 8001522:	4b08      	ldr	r3, [pc, #32]	; (8001544 <USART2_IRQHandler+0x94>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	2b0a      	cmp	r3, #10
 8001528:	d103      	bne.n	8001532 <USART2_IRQHandler+0x82>
			i = 0;
 800152a:	4b06      	ldr	r3, [pc, #24]	; (8001544 <USART2_IRQHandler+0x94>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
}
 8001530:	e004      	b.n	800153c <USART2_IRQHandler+0x8c>
			i++;
 8001532:	4b04      	ldr	r3, [pc, #16]	; (8001544 <USART2_IRQHandler+0x94>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	3301      	adds	r3, #1
 8001538:	4a02      	ldr	r2, [pc, #8]	; (8001544 <USART2_IRQHandler+0x94>)
 800153a:	6013      	str	r3, [r2, #0]
}
 800153c:	bf00      	nop
 800153e:	bd80      	pop	{r7, pc}
 8001540:	40004400 	.word	0x40004400
 8001544:	200005f8 	.word	0x200005f8
 8001548:	20000670 	.word	0x20000670

0800154c <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 800154c:	b480      	push	{r7}
 800154e:	b085      	sub	sp, #20
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8001554:	4b08      	ldr	r3, [pc, #32]	; (8001578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001556:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001558:	4907      	ldr	r1, [pc, #28]	; (8001578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4313      	orrs	r3, r2
 800155e:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001560:	4b05      	ldr	r3, [pc, #20]	; (8001578 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001562:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	4013      	ands	r3, r2
 8001568:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800156a:	68fb      	ldr	r3, [r7, #12]
}
 800156c:	bf00      	nop
 800156e:	3714      	adds	r7, #20
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr
 8001578:	40021000 	.word	0x40021000

0800157c <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 800157c:	b480      	push	{r7}
 800157e:	b087      	sub	sp, #28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
 8001584:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 8001586:	4a17      	ldr	r2, [pc, #92]	; (80015e4 <LL_SYSCFG_SetEXTISource+0x68>)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	3302      	adds	r3, #2
 800158e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001592:	683b      	ldr	r3, [r7, #0]
 8001594:	0c1b      	lsrs	r3, r3, #16
 8001596:	43db      	mvns	r3, r3
 8001598:	ea02 0103 	and.w	r1, r2, r3
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	0c1b      	lsrs	r3, r3, #16
 80015a0:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	fa93 f3a3 	rbit	r3, r3
 80015a8:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80015ae:	697b      	ldr	r3, [r7, #20]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d101      	bne.n	80015b8 <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 80015b4:	2320      	movs	r3, #32
 80015b6:	e003      	b.n	80015c0 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	fab3 f383 	clz	r3, r3
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	461a      	mov	r2, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	fa03 f202 	lsl.w	r2, r3, r2
 80015c8:	4806      	ldr	r0, [pc, #24]	; (80015e4 <LL_SYSCFG_SetEXTISource+0x68>)
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	430a      	orrs	r2, r1
 80015d0:	3302      	adds	r3, #2
 80015d2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 80015d6:	bf00      	nop
 80015d8:	371c      	adds	r7, #28
 80015da:	46bd      	mov	sp, r7
 80015dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e0:	4770      	bx	lr
 80015e2:	bf00      	nop
 80015e4:	40010000 	.word	0x40010000

080015e8 <LL_GPIO_SetPinMode>:
  *         @arg @ref LL_GPIO_MODE_ALTERNATE
  *         @arg @ref LL_GPIO_MODE_ANALOG
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinMode(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Mode)
{
 80015e8:	b480      	push	{r7}
 80015ea:	b08b      	sub	sp, #44	; 0x2c
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	60b9      	str	r1, [r7, #8]
 80015f2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681a      	ldr	r2, [r3, #0]
 80015f8:	68bb      	ldr	r3, [r7, #8]
 80015fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80015fc:	697b      	ldr	r3, [r7, #20]
 80015fe:	fa93 f3a3 	rbit	r3, r3
 8001602:	613b      	str	r3, [r7, #16]
  return result;
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001608:	69bb      	ldr	r3, [r7, #24]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d101      	bne.n	8001612 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800160e:	2320      	movs	r3, #32
 8001610:	e003      	b.n	800161a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001612:	69bb      	ldr	r3, [r7, #24]
 8001614:	fab3 f383 	clz	r3, r3
 8001618:	b2db      	uxtb	r3, r3
 800161a:	005b      	lsls	r3, r3, #1
 800161c:	2103      	movs	r1, #3
 800161e:	fa01 f303 	lsl.w	r3, r1, r3
 8001622:	43db      	mvns	r3, r3
 8001624:	401a      	ands	r2, r3
 8001626:	68bb      	ldr	r3, [r7, #8]
 8001628:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800162a:	6a3b      	ldr	r3, [r7, #32]
 800162c:	fa93 f3a3 	rbit	r3, r3
 8001630:	61fb      	str	r3, [r7, #28]
  return result;
 8001632:	69fb      	ldr	r3, [r7, #28]
 8001634:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001638:	2b00      	cmp	r3, #0
 800163a:	d101      	bne.n	8001640 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800163c:	2320      	movs	r3, #32
 800163e:	e003      	b.n	8001648 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001642:	fab3 f383 	clz	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	005b      	lsls	r3, r3, #1
 800164a:	6879      	ldr	r1, [r7, #4]
 800164c:	fa01 f303 	lsl.w	r3, r1, r3
 8001650:	431a      	orrs	r2, r3
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	601a      	str	r2, [r3, #0]
}
 8001656:	bf00      	nop
 8001658:	372c      	adds	r7, #44	; 0x2c
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr

08001662 <LL_GPIO_SetPinPull>:
  *         @arg @ref LL_GPIO_PULL_UP
  *         @arg @ref LL_GPIO_PULL_DOWN
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetPinPull(GPIO_TypeDef *GPIOx, uint32_t Pin, uint32_t Pull)
{
 8001662:	b480      	push	{r7}
 8001664:	b08b      	sub	sp, #44	; 0x2c
 8001666:	af00      	add	r7, sp, #0
 8001668:	60f8      	str	r0, [r7, #12]
 800166a:	60b9      	str	r1, [r7, #8]
 800166c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	68da      	ldr	r2, [r3, #12]
 8001672:	68bb      	ldr	r3, [r7, #8]
 8001674:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001676:	697b      	ldr	r3, [r7, #20]
 8001678:	fa93 f3a3 	rbit	r3, r3
 800167c:	613b      	str	r3, [r7, #16]
  return result;
 800167e:	693b      	ldr	r3, [r7, #16]
 8001680:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001682:	69bb      	ldr	r3, [r7, #24]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d101      	bne.n	800168c <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001688:	2320      	movs	r3, #32
 800168a:	e003      	b.n	8001694 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 800168c:	69bb      	ldr	r3, [r7, #24]
 800168e:	fab3 f383 	clz	r3, r3
 8001692:	b2db      	uxtb	r3, r3
 8001694:	005b      	lsls	r3, r3, #1
 8001696:	2103      	movs	r1, #3
 8001698:	fa01 f303 	lsl.w	r3, r1, r3
 800169c:	43db      	mvns	r3, r3
 800169e:	401a      	ands	r2, r3
 80016a0:	68bb      	ldr	r3, [r7, #8]
 80016a2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016a4:	6a3b      	ldr	r3, [r7, #32]
 80016a6:	fa93 f3a3 	rbit	r3, r3
 80016aa:	61fb      	str	r3, [r7, #28]
  return result;
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80016b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d101      	bne.n	80016ba <LL_GPIO_SetPinPull+0x58>
    return 32U;
 80016b6:	2320      	movs	r3, #32
 80016b8:	e003      	b.n	80016c2 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 80016ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80016bc:	fab3 f383 	clz	r3, r3
 80016c0:	b2db      	uxtb	r3, r3
 80016c2:	005b      	lsls	r3, r3, #1
 80016c4:	6879      	ldr	r1, [r7, #4]
 80016c6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ca:	431a      	orrs	r2, r3
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	60da      	str	r2, [r3, #12]
}
 80016d0:	bf00      	nop
 80016d2:	372c      	adds	r7, #44	; 0x2c
 80016d4:	46bd      	mov	sp, r7
 80016d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016da:	4770      	bx	lr

080016dc <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80016dc:	b480      	push	{r7}
 80016de:	b083      	sub	sp, #12
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
 80016e4:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	683a      	ldr	r2, [r7, #0]
 80016ea:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016ec:	bf00      	nop
 80016ee:	370c      	adds	r7, #12
 80016f0:	46bd      	mov	sp, r7
 80016f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f6:	4770      	bx	lr

080016f8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	b08a      	sub	sp, #40	; 0x28
 80016fc:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80016fe:	f107 031c 	add.w	r3, r7, #28
 8001702:	2200      	movs	r2, #0
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	605a      	str	r2, [r3, #4]
 8001708:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	1d3b      	adds	r3, r7, #4
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]
 8001710:	605a      	str	r2, [r3, #4]
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	60da      	str	r2, [r3, #12]
 8001716:	611a      	str	r2, [r3, #16]
 8001718:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 800171a:	2004      	movs	r0, #4
 800171c:	f7ff ff16 	bl	800154c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOH);
 8001720:	2080      	movs	r0, #128	; 0x80
 8001722:	f7ff ff13 	bl	800154c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8001726:	2001      	movs	r0, #1
 8001728:	f7ff ff10 	bl	800154c <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800172c:	2002      	movs	r0, #2
 800172e:	f7ff ff0d 	bl	800154c <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 8001732:	2120      	movs	r1, #32
 8001734:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001738:	f7ff ffd0 	bl	80016dc <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 800173c:	491b      	ldr	r1, [pc, #108]	; (80017ac <MX_GPIO_Init+0xb4>)
 800173e:	2002      	movs	r0, #2
 8001740:	f7ff ff1c 	bl	800157c <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 8001744:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001748:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 800174a:	2300      	movs	r3, #0
 800174c:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 800174e:	2301      	movs	r3, #1
 8001750:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 8001754:	2300      	movs	r3, #0
 8001756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_FALLING;
 800175a:	2302      	movs	r3, #2
 800175c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8001760:	f107 031c 	add.w	r3, r7, #28
 8001764:	4618      	mov	r0, r3
 8001766:	f001 fcdb 	bl	8003120 <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(B1_GPIO_Port, B1_Pin, LL_GPIO_PULL_NO);
 800176a:	2200      	movs	r2, #0
 800176c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001770:	480f      	ldr	r0, [pc, #60]	; (80017b0 <MX_GPIO_Init+0xb8>)
 8001772:	f7ff ff76 	bl	8001662 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(B1_GPIO_Port, B1_Pin, LL_GPIO_MODE_INPUT);
 8001776:	2200      	movs	r2, #0
 8001778:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800177c:	480c      	ldr	r0, [pc, #48]	; (80017b0 <MX_GPIO_Init+0xb8>)
 800177e:	f7ff ff33 	bl	80015e8 <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 8001782:	2320      	movs	r3, #32
 8001784:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8001786:	2301      	movs	r3, #1
 8001788:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 800178a:	2300      	movs	r3, #0
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800178e:	2300      	movs	r3, #0
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001796:	1d3b      	adds	r3, r7, #4
 8001798:	4619      	mov	r1, r3
 800179a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800179e:	f001 fef6 	bl	800358e <LL_GPIO_Init>

}
 80017a2:	bf00      	nop
 80017a4:	3728      	adds	r7, #40	; 0x28
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop
 80017ac:	00f00003 	.word	0x00f00003
 80017b0:	48000800 	.word	0x48000800

080017b4 <__NVIC_SetPriorityGrouping>:
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	f003 0307 	and.w	r3, r3, #7
 80017c2:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017c4:	4b0c      	ldr	r3, [pc, #48]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017c6:	68db      	ldr	r3, [r3, #12]
 80017c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017ca:	68ba      	ldr	r2, [r7, #8]
 80017cc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017d0:	4013      	ands	r3, r2
 80017d2:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017d8:	68bb      	ldr	r3, [r7, #8]
 80017da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017dc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80017e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017e6:	4a04      	ldr	r2, [pc, #16]	; (80017f8 <__NVIC_SetPriorityGrouping+0x44>)
 80017e8:	68bb      	ldr	r3, [r7, #8]
 80017ea:	60d3      	str	r3, [r2, #12]
}
 80017ec:	bf00      	nop
 80017ee:	3714      	adds	r7, #20
 80017f0:	46bd      	mov	sp, r7
 80017f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f6:	4770      	bx	lr
 80017f8:	e000ed00 	.word	0xe000ed00

080017fc <LL_RCC_HSI_Enable>:
  * @brief  Enable HSI oscillator
  * @rmtoll CR           HSION         LL_RCC_HSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_Enable(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <LL_RCC_HSI_Enable+0x1c>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a04      	ldr	r2, [pc, #16]	; (8001818 <LL_RCC_HSI_Enable+0x1c>)
 8001806:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800180a:	6013      	str	r3, [r2, #0]
}
 800180c:	bf00      	nop
 800180e:	46bd      	mov	sp, r7
 8001810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001814:	4770      	bx	lr
 8001816:	bf00      	nop
 8001818:	40021000 	.word	0x40021000

0800181c <LL_RCC_HSI_IsReady>:
  * @brief  Check if HSI clock is ready
  * @rmtoll CR           HSIRDY        LL_RCC_HSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSI_IsReady(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001820:	4b07      	ldr	r3, [pc, #28]	; (8001840 <LL_RCC_HSI_IsReady+0x24>)
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001828:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800182c:	d101      	bne.n	8001832 <LL_RCC_HSI_IsReady+0x16>
 800182e:	2301      	movs	r3, #1
 8001830:	e000      	b.n	8001834 <LL_RCC_HSI_IsReady+0x18>
 8001832:	2300      	movs	r3, #0
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000

08001844 <LL_RCC_HSI_SetCalibTrimming>:
  * @param  Value Between Min_Data = 0 and Max_Data = 31 on STM32L47x/STM32L48x or
  *               between Min_Data = 0 and Max_Data = 127 on other devices
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSI_SetCalibTrimming(uint32_t Value)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_HSITRIM, Value << RCC_ICSCR_HSITRIM_Pos);
 800184c:	4b07      	ldr	r3, [pc, #28]	; (800186c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	061b      	lsls	r3, r3, #24
 8001858:	4904      	ldr	r1, [pc, #16]	; (800186c <LL_RCC_HSI_SetCalibTrimming+0x28>)
 800185a:	4313      	orrs	r3, r2
 800185c:	604b      	str	r3, [r1, #4]
}
 800185e:	bf00      	nop
 8001860:	370c      	adds	r7, #12
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	40021000 	.word	0x40021000

08001870 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8001878:	4b06      	ldr	r3, [pc, #24]	; (8001894 <LL_RCC_SetSysClkSource+0x24>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	f023 0203 	bic.w	r2, r3, #3
 8001880:	4904      	ldr	r1, [pc, #16]	; (8001894 <LL_RCC_SetSysClkSource+0x24>)
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	4313      	orrs	r3, r2
 8001886:	608b      	str	r3, [r1, #8]
}
 8001888:	bf00      	nop
 800188a:	370c      	adds	r7, #12
 800188c:	46bd      	mov	sp, r7
 800188e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001892:	4770      	bx	lr
 8001894:	40021000 	.word	0x40021000

08001898 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8001898:	b480      	push	{r7}
 800189a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <LL_RCC_GetSysClkSource+0x18>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	40021000 	.word	0x40021000

080018b4 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <LL_RCC_SetAHBPrescaler+0x24>)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	4313      	orrs	r3, r2
 80018ca:	608b      	str	r3, [r1, #8]
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr
 80018d8:	40021000 	.word	0x40021000

080018dc <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018e6:	689b      	ldr	r3, [r3, #8]
 80018e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80018ec:	4904      	ldr	r1, [pc, #16]	; (8001900 <LL_RCC_SetAPB1Prescaler+0x24>)
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	4313      	orrs	r3, r2
 80018f2:	608b      	str	r3, [r1, #8]
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr
 8001900:	40021000 	.word	0x40021000

08001904 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 800190c:	4b06      	ldr	r3, [pc, #24]	; (8001928 <LL_RCC_SetAPB2Prescaler+0x24>)
 800190e:	689b      	ldr	r3, [r3, #8]
 8001910:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001914:	4904      	ldr	r1, [pc, #16]	; (8001928 <LL_RCC_SetAPB2Prescaler+0x24>)
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	4313      	orrs	r3, r2
 800191a:	608b      	str	r3, [r1, #8]
}
 800191c:	bf00      	nop
 800191e:	370c      	adds	r7, #12
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	40021000 	.word	0x40021000

0800192c <LL_RCC_SetUSARTClockSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetUSARTClockSource(uint32_t USARTxSource)
{
 800192c:	b480      	push	{r7}
 800192e:	b083      	sub	sp, #12
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001934:	4b09      	ldr	r3, [pc, #36]	; (800195c <LL_RCC_SetUSARTClockSource+0x30>)
 8001936:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	0c1b      	lsrs	r3, r3, #16
 800193e:	43db      	mvns	r3, r3
 8001940:	401a      	ands	r2, r3
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	b29b      	uxth	r3, r3
 8001946:	4905      	ldr	r1, [pc, #20]	; (800195c <LL_RCC_SetUSARTClockSource+0x30>)
 8001948:	4313      	orrs	r3, r2
 800194a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 800194e:	bf00      	nop
 8001950:	370c      	adds	r7, #12
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000

08001960 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8001964:	4b05      	ldr	r3, [pc, #20]	; (800197c <LL_RCC_PLL_Enable+0x1c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a04      	ldr	r2, [pc, #16]	; (800197c <LL_RCC_PLL_Enable+0x1c>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196e:	6013      	str	r3, [r2, #0]
}
 8001970:	bf00      	nop
 8001972:	46bd      	mov	sp, r7
 8001974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001978:	4770      	bx	lr
 800197a:	bf00      	nop
 800197c:	40021000 	.word	0x40021000

08001980 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8001984:	4b07      	ldr	r3, [pc, #28]	; (80019a4 <LL_RCC_PLL_IsReady+0x24>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800198c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001990:	d101      	bne.n	8001996 <LL_RCC_PLL_IsReady+0x16>
 8001992:	2301      	movs	r3, #1
 8001994:	e000      	b.n	8001998 <LL_RCC_PLL_IsReady+0x18>
 8001996:	2300      	movs	r3, #0
}
 8001998:	4618      	mov	r0, r3
 800199a:	46bd      	mov	sp, r7
 800199c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a0:	4770      	bx	lr
 80019a2:	bf00      	nop
 80019a4:	40021000 	.word	0x40021000

080019a8 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 80019a8:	b480      	push	{r7}
 80019aa:	b085      	sub	sp, #20
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	60f8      	str	r0, [r7, #12]
 80019b0:	60b9      	str	r1, [r7, #8]
 80019b2:	607a      	str	r2, [r7, #4]
 80019b4:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 80019b6:	4b0a      	ldr	r3, [pc, #40]	; (80019e0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80019b8:	68da      	ldr	r2, [r3, #12]
 80019ba:	4b0a      	ldr	r3, [pc, #40]	; (80019e4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 80019bc:	4013      	ands	r3, r2
 80019be:	68f9      	ldr	r1, [r7, #12]
 80019c0:	68ba      	ldr	r2, [r7, #8]
 80019c2:	4311      	orrs	r1, r2
 80019c4:	687a      	ldr	r2, [r7, #4]
 80019c6:	0212      	lsls	r2, r2, #8
 80019c8:	4311      	orrs	r1, r2
 80019ca:	683a      	ldr	r2, [r7, #0]
 80019cc:	430a      	orrs	r2, r1
 80019ce:	4904      	ldr	r1, [pc, #16]	; (80019e0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 80019d4:	bf00      	nop
 80019d6:	3714      	adds	r7, #20
 80019d8:	46bd      	mov	sp, r7
 80019da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019de:	4770      	bx	lr
 80019e0:	40021000 	.word	0x40021000
 80019e4:	f9ff808c 	.word	0xf9ff808c

080019e8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 80019e8:	b480      	push	{r7}
 80019ea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 80019ec:	4b05      	ldr	r3, [pc, #20]	; (8001a04 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80019ee:	68db      	ldr	r3, [r3, #12]
 80019f0:	4a04      	ldr	r2, [pc, #16]	; (8001a04 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 80019f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019f6:	60d3      	str	r3, [r2, #12]
}
 80019f8:	bf00      	nop
 80019fa:	46bd      	mov	sp, r7
 80019fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a00:	4770      	bx	lr
 8001a02:	bf00      	nop
 8001a04:	40021000 	.word	0x40021000

08001a08 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8001a10:	4b08      	ldr	r3, [pc, #32]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a12:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a14:	4907      	ldr	r1, [pc, #28]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8001a1c:	4b05      	ldr	r3, [pc, #20]	; (8001a34 <LL_APB1_GRP1_EnableClock+0x2c>)
 8001a1e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	4013      	ands	r3, r2
 8001a24:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a26:	68fb      	ldr	r3, [r7, #12]
}
 8001a28:	bf00      	nop
 8001a2a:	3714      	adds	r7, #20
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a32:	4770      	bx	lr
 8001a34:	40021000 	.word	0x40021000

08001a38 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8001a38:	b480      	push	{r7}
 8001a3a:	b085      	sub	sp, #20
 8001a3c:	af00      	add	r7, sp, #0
 8001a3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8001a40:	4b08      	ldr	r3, [pc, #32]	; (8001a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a42:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a44:	4907      	ldr	r1, [pc, #28]	; (8001a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	4313      	orrs	r3, r2
 8001a4a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8001a4c:	4b05      	ldr	r3, [pc, #20]	; (8001a64 <LL_APB2_GRP1_EnableClock+0x2c>)
 8001a4e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	4013      	ands	r3, r2
 8001a54:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001a56:	68fb      	ldr	r3, [r7, #12]
}
 8001a58:	bf00      	nop
 8001a5a:	3714      	adds	r7, #20
 8001a5c:	46bd      	mov	sp, r7
 8001a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a62:	4770      	bx	lr
 8001a64:	40021000 	.word	0x40021000

08001a68 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8001a70:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <LL_FLASH_SetLatency+0x24>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f023 0207 	bic.w	r2, r3, #7
 8001a78:	4904      	ldr	r1, [pc, #16]	; (8001a8c <LL_FLASH_SetLatency+0x24>)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	600b      	str	r3, [r1, #0]
}
 8001a80:	bf00      	nop
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr
 8001a8c:	40022000 	.word	0x40022000

08001a90 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8001a90:	b480      	push	{r7}
 8001a92:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8001a94:	4b04      	ldr	r3, [pc, #16]	; (8001aa8 <LL_FLASH_GetLatency+0x18>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 0307 	and.w	r3, r3, #7
}
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
 8001aa6:	bf00      	nop
 8001aa8:	40022000 	.word	0x40022000

08001aac <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8001aac:	b480      	push	{r7}
 8001aae:	b083      	sub	sp, #12
 8001ab0:	af00      	add	r7, sp, #0
 8001ab2:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001ab4:	4b06      	ldr	r3, [pc, #24]	; (8001ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8001abc:	4904      	ldr	r1, [pc, #16]	; (8001ad0 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	4313      	orrs	r3, r2
 8001ac2:	600b      	str	r3, [r1, #0]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	40007000 	.word	0x40007000

08001ad4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	af00      	add	r7, sp, #0

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */

  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8001ad8:	2001      	movs	r0, #1
 8001ada:	f7ff ffad 	bl	8001a38 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8001ade:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8001ae2:	f7ff ff91 	bl	8001a08 <LL_APB1_GRP1_EnableClock>

  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001ae6:	2003      	movs	r0, #3
 8001ae8:	f7ff fe64 	bl	80017b4 <__NVIC_SetPriorityGrouping>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aec:	f000 f816 	bl	8001b1c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001af0:	f7ff fe02 	bl	80016f8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001af4:	f001 f86c 	bl	8002bd0 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8001af8:	f000 fb30 	bl	800215c <MX_SPI2_Init>
  MX_TIM1_Init();
 8001afc:	f000 fe7e 	bl	80027fc <MX_TIM1_Init>
  MX_SPI3_Init();
 8001b00:	f000 fb9a 	bl	8002238 <MX_SPI3_Init>
  MX_TIM3_Init();
 8001b04:	f000 feb0 	bl	8002868 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  startupPrint();
 8001b08:	f001 f8d8 	bl	8002cbc <startupPrint>

  gimbalControlInit();
 8001b0c:	f7ff fbd2 	bl	80012b4 <gimbalControlInit>

  eyes_init();
 8001b10:	f7ff f828 	bl	8000b64 <eyes_init>
  eyes_start();
 8001b14:	f7ff f848 	bl	8000ba8 <eyes_start>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b18:	e7fe      	b.n	8001b18 <main+0x44>
	...

08001b1c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_3);
 8001b20:	2003      	movs	r0, #3
 8001b22:	f7ff ffa1 	bl	8001a68 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_3)
 8001b26:	bf00      	nop
 8001b28:	f7ff ffb2 	bl	8001a90 <LL_FLASH_GetLatency>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	2b03      	cmp	r3, #3
 8001b30:	d1fa      	bne.n	8001b28 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8001b32:	f44f 7000 	mov.w	r0, #512	; 0x200
 8001b36:	f7ff ffb9 	bl	8001aac <LL_PWR_SetRegulVoltageScaling>
  LL_RCC_HSI_Enable();
 8001b3a:	f7ff fe5f 	bl	80017fc <LL_RCC_HSI_Enable>

   /* Wait till HSI is ready */
  while(LL_RCC_HSI_IsReady() != 1)
 8001b3e:	bf00      	nop
 8001b40:	f7ff fe6c 	bl	800181c <LL_RCC_HSI_IsReady>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b01      	cmp	r3, #1
 8001b48:	d1fa      	bne.n	8001b40 <SystemClock_Config+0x24>
  {

  }
  LL_RCC_HSI_SetCalibTrimming(16);
 8001b4a:	2010      	movs	r0, #16
 8001b4c:	f7ff fe7a 	bl	8001844 <LL_RCC_HSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSI, LL_RCC_PLLM_DIV_1, 8, LL_RCC_PLLR_DIV_2);
 8001b50:	2300      	movs	r3, #0
 8001b52:	2208      	movs	r2, #8
 8001b54:	2100      	movs	r1, #0
 8001b56:	2002      	movs	r0, #2
 8001b58:	f7ff ff26 	bl	80019a8 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8001b5c:	f7ff ff44 	bl	80019e8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8001b60:	f7ff fefe 	bl	8001960 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8001b64:	bf00      	nop
 8001b66:	f7ff ff0b 	bl	8001980 <LL_RCC_PLL_IsReady>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b01      	cmp	r3, #1
 8001b6e:	d1fa      	bne.n	8001b66 <SystemClock_Config+0x4a>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8001b70:	2003      	movs	r0, #3
 8001b72:	f7ff fe7d 	bl	8001870 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8001b76:	bf00      	nop
 8001b78:	f7ff fe8e 	bl	8001898 <LL_RCC_GetSysClkSource>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b0c      	cmp	r3, #12
 8001b80:	d1fa      	bne.n	8001b78 <SystemClock_Config+0x5c>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8001b82:	2000      	movs	r0, #0
 8001b84:	f7ff fe96 	bl	80018b4 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8001b88:	2000      	movs	r0, #0
 8001b8a:	f7ff fea7 	bl	80018dc <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8001b8e:	2000      	movs	r0, #0
 8001b90:	f7ff feb8 	bl	8001904 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(64000000);
 8001b94:	4805      	ldr	r0, [pc, #20]	; (8001bac <SystemClock_Config+0x90>)
 8001b96:	f002 fecb 	bl	8004930 <LL_Init1msTick>

  LL_SetSystemCoreClock(64000000);
 8001b9a:	4804      	ldr	r0, [pc, #16]	; (8001bac <SystemClock_Config+0x90>)
 8001b9c:	f002 fefc 	bl	8004998 <LL_SetSystemCoreClock>
  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 8001ba0:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 8001ba4:	f7ff fec2 	bl	800192c <LL_RCC_SetUSARTClockSource>
}
 8001ba8:	bf00      	nop
 8001baa:	bd80      	pop	{r7, pc}
 8001bac:	03d09000 	.word	0x03d09000

08001bb0 <OF_ResetCoefficients>:
static int32_t deltaX;
static int32_t deltaY;
static int32_t deltaT;
static int16_t frameIdx;

void OF_ResetCoefficients(){
 8001bb0:	b490      	push	{r4, r7}
 8001bb2:	af00      	add	r7, sp, #0
	A[0] = B[0] = C[0] = D[0] = E[0] = 0;
 8001bb4:	4a22      	ldr	r2, [pc, #136]	; (8001c40 <OF_ResetCoefficients+0x90>)
 8001bb6:	f04f 0300 	mov.w	r3, #0
 8001bba:	f04f 0400 	mov.w	r4, #0
 8001bbe:	e9c2 3400 	strd	r3, r4, [r2]
 8001bc2:	4b1f      	ldr	r3, [pc, #124]	; (8001c40 <OF_ResetCoefficients+0x90>)
 8001bc4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bc8:	4a1e      	ldr	r2, [pc, #120]	; (8001c44 <OF_ResetCoefficients+0x94>)
 8001bca:	e9c2 3400 	strd	r3, r4, [r2]
 8001bce:	4b1d      	ldr	r3, [pc, #116]	; (8001c44 <OF_ResetCoefficients+0x94>)
 8001bd0:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bd4:	4a1c      	ldr	r2, [pc, #112]	; (8001c48 <OF_ResetCoefficients+0x98>)
 8001bd6:	e9c2 3400 	strd	r3, r4, [r2]
 8001bda:	4b1b      	ldr	r3, [pc, #108]	; (8001c48 <OF_ResetCoefficients+0x98>)
 8001bdc:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001be0:	4a1a      	ldr	r2, [pc, #104]	; (8001c4c <OF_ResetCoefficients+0x9c>)
 8001be2:	e9c2 3400 	strd	r3, r4, [r2]
 8001be6:	4b19      	ldr	r3, [pc, #100]	; (8001c4c <OF_ResetCoefficients+0x9c>)
 8001be8:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001bec:	4a18      	ldr	r2, [pc, #96]	; (8001c50 <OF_ResetCoefficients+0xa0>)
 8001bee:	e9c2 3400 	strd	r3, r4, [r2]
	A[1] = B[1] = C[1] = D[1] = E[1] = 0;
 8001bf2:	4a13      	ldr	r2, [pc, #76]	; (8001c40 <OF_ResetCoefficients+0x90>)
 8001bf4:	f04f 0300 	mov.w	r3, #0
 8001bf8:	f04f 0400 	mov.w	r4, #0
 8001bfc:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c00:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <OF_ResetCoefficients+0x90>)
 8001c02:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c06:	4a0f      	ldr	r2, [pc, #60]	; (8001c44 <OF_ResetCoefficients+0x94>)
 8001c08:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c0c:	4b0d      	ldr	r3, [pc, #52]	; (8001c44 <OF_ResetCoefficients+0x94>)
 8001c0e:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c12:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <OF_ResetCoefficients+0x98>)
 8001c14:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <OF_ResetCoefficients+0x98>)
 8001c1a:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c1e:	4a0b      	ldr	r2, [pc, #44]	; (8001c4c <OF_ResetCoefficients+0x9c>)
 8001c20:	e9c2 3402 	strd	r3, r4, [r2, #8]
 8001c24:	4b09      	ldr	r3, [pc, #36]	; (8001c4c <OF_ResetCoefficients+0x9c>)
 8001c26:	e9d3 3402 	ldrd	r3, r4, [r3, #8]
 8001c2a:	4a09      	ldr	r2, [pc, #36]	; (8001c50 <OF_ResetCoefficients+0xa0>)
 8001c2c:	e9c2 3402 	strd	r3, r4, [r2, #8]
	frameIdx = 0;
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <OF_ResetCoefficients+0xa4>)
 8001c32:	2200      	movs	r2, #0
 8001c34:	801a      	strh	r2, [r3, #0]
}
 8001c36:	bf00      	nop
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bc90      	pop	{r4, r7}
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000640 	.word	0x20000640
 8001c44:	20000630 	.word	0x20000630
 8001c48:	20000620 	.word	0x20000620
 8001c4c:	20000610 	.word	0x20000610
 8001c50:	20000600 	.word	0x20000600
 8001c54:	2000065c 	.word	0x2000065c

08001c58 <OF_ComputeCoefficients>:

void OF_ComputeCoefficients(Device dev, uint8_t currentFrame[], uint8_t lastFrame[], int32_t idx){
 8001c58:	e92d 0890 	stmdb	sp!, {r4, r7, fp}
 8001c5c:	b085      	sub	sp, #20
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
 8001c66:	4603      	mov	r3, r0
 8001c68:	73fb      	strb	r3, [r7, #15]

	if(fSelect[idx]){
 8001c6a:	4a76      	ldr	r2, [pc, #472]	; (8001e44 <OF_ComputeCoefficients+0x1ec>)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	4413      	add	r3, r2
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	f000 80e0 	beq.w	8001e38 <OF_ComputeCoefficients+0x1e0>
		deltaX = (lastFrame[f2[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f1[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001c78:	4b73      	ldr	r3, [pc, #460]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001c7a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c7e:	461a      	mov	r2, r3
 8001c80:	4b72      	ldr	r3, [pc, #456]	; (8001e4c <OF_ComputeCoefficients+0x1f4>)
 8001c82:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001c86:	461a      	mov	r2, r3
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	781b      	ldrb	r3, [r3, #0]
 8001c8e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001c92:	4b6d      	ldr	r3, [pc, #436]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001c94:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4b6d      	ldr	r3, [pc, #436]	; (8001e50 <OF_ComputeCoefficients+0x1f8>)
 8001c9c:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	440b      	add	r3, r1
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b68      	ldr	r3, [pc, #416]	; (8001e54 <OF_ComputeCoefficients+0x1fc>)
 8001cb2:	601a      	str	r2, [r3, #0]
		deltaY = (lastFrame[f4[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f3[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001cb4:	4b64      	ldr	r3, [pc, #400]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001cb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cba:	461a      	mov	r2, r3
 8001cbc:	4b66      	ldr	r3, [pc, #408]	; (8001e58 <OF_ComputeCoefficients+0x200>)
 8001cbe:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cc2:	461a      	mov	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	4413      	add	r3, r2
 8001cc8:	781b      	ldrb	r3, [r3, #0]
 8001cca:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001cce:	4b5e      	ldr	r3, [pc, #376]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001cd0:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	4b61      	ldr	r3, [pc, #388]	; (8001e5c <OF_ComputeCoefficients+0x204>)
 8001cd8:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001cdc:	4619      	mov	r1, r3
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	440b      	add	r3, r1
 8001ce2:	781b      	ldrb	r3, [r3, #0]
 8001ce4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001ce8:	1ad3      	subs	r3, r2, r3
 8001cea:	461a      	mov	r2, r3
 8001cec:	4b5c      	ldr	r3, [pc, #368]	; (8001e60 <OF_ComputeCoefficients+0x208>)
 8001cee:	601a      	str	r2, [r3, #0]
		deltaT = (currentFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA) - (lastFrame[f0[frameIdx]] & ADNS2610_PIXEL_DATA);
 8001cf0:	4b55      	ldr	r3, [pc, #340]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001cf2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001cf6:	461a      	mov	r2, r3
 8001cf8:	4b5a      	ldr	r3, [pc, #360]	; (8001e64 <OF_ComputeCoefficients+0x20c>)
 8001cfa:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	4413      	add	r3, r2
 8001d04:	781b      	ldrb	r3, [r3, #0]
 8001d06:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001d0a:	4b4f      	ldr	r3, [pc, #316]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001d0c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d10:	4619      	mov	r1, r3
 8001d12:	4b54      	ldr	r3, [pc, #336]	; (8001e64 <OF_ComputeCoefficients+0x20c>)
 8001d14:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8001d18:	4619      	mov	r1, r3
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	440b      	add	r3, r1
 8001d1e:	781b      	ldrb	r3, [r3, #0]
 8001d20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	461a      	mov	r2, r3
 8001d28:	4b4f      	ldr	r3, [pc, #316]	; (8001e68 <OF_ComputeCoefficients+0x210>)
 8001d2a:	601a      	str	r2, [r3, #0]

		A[dev] += deltaX * deltaX;
 8001d2c:	7bfb      	ldrb	r3, [r7, #15]
 8001d2e:	4a4f      	ldr	r2, [pc, #316]	; (8001e6c <OF_ComputeCoefficients+0x214>)
 8001d30:	00db      	lsls	r3, r3, #3
 8001d32:	4413      	add	r3, r2
 8001d34:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d38:	4b46      	ldr	r3, [pc, #280]	; (8001e54 <OF_ComputeCoefficients+0x1fc>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4845      	ldr	r0, [pc, #276]	; (8001e54 <OF_ComputeCoefficients+0x1fc>)
 8001d3e:	6800      	ldr	r0, [r0, #0]
 8001d40:	fb00 f303 	mul.w	r3, r0, r3
 8001d44:	469b      	mov	fp, r3
 8001d46:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001d4a:	7bf8      	ldrb	r0, [r7, #15]
 8001d4c:	eb1b 0301 	adds.w	r3, fp, r1
 8001d50:	eb4c 0402 	adc.w	r4, ip, r2
 8001d54:	4945      	ldr	r1, [pc, #276]	; (8001e6c <OF_ComputeCoefficients+0x214>)
 8001d56:	00c2      	lsls	r2, r0, #3
 8001d58:	440a      	add	r2, r1
 8001d5a:	e9c2 3400 	strd	r3, r4, [r2]
		B[dev] += deltaY * deltaX;
 8001d5e:	7bfb      	ldrb	r3, [r7, #15]
 8001d60:	4a43      	ldr	r2, [pc, #268]	; (8001e70 <OF_ComputeCoefficients+0x218>)
 8001d62:	00db      	lsls	r3, r3, #3
 8001d64:	4413      	add	r3, r2
 8001d66:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d6a:	4b3d      	ldr	r3, [pc, #244]	; (8001e60 <OF_ComputeCoefficients+0x208>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4839      	ldr	r0, [pc, #228]	; (8001e54 <OF_ComputeCoefficients+0x1fc>)
 8001d70:	6800      	ldr	r0, [r0, #0]
 8001d72:	fb00 f303 	mul.w	r3, r0, r3
 8001d76:	469b      	mov	fp, r3
 8001d78:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001d7c:	7bf8      	ldrb	r0, [r7, #15]
 8001d7e:	eb1b 0301 	adds.w	r3, fp, r1
 8001d82:	eb4c 0402 	adc.w	r4, ip, r2
 8001d86:	493a      	ldr	r1, [pc, #232]	; (8001e70 <OF_ComputeCoefficients+0x218>)
 8001d88:	00c2      	lsls	r2, r0, #3
 8001d8a:	440a      	add	r2, r1
 8001d8c:	e9c2 3400 	strd	r3, r4, [r2]
		C[dev] += deltaT * deltaX;
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4a38      	ldr	r2, [pc, #224]	; (8001e74 <OF_ComputeCoefficients+0x21c>)
 8001d94:	00db      	lsls	r3, r3, #3
 8001d96:	4413      	add	r3, r2
 8001d98:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001d9c:	4b32      	ldr	r3, [pc, #200]	; (8001e68 <OF_ComputeCoefficients+0x210>)
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	482c      	ldr	r0, [pc, #176]	; (8001e54 <OF_ComputeCoefficients+0x1fc>)
 8001da2:	6800      	ldr	r0, [r0, #0]
 8001da4:	fb00 f303 	mul.w	r3, r0, r3
 8001da8:	469b      	mov	fp, r3
 8001daa:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001dae:	7bf8      	ldrb	r0, [r7, #15]
 8001db0:	eb1b 0301 	adds.w	r3, fp, r1
 8001db4:	eb4c 0402 	adc.w	r4, ip, r2
 8001db8:	492e      	ldr	r1, [pc, #184]	; (8001e74 <OF_ComputeCoefficients+0x21c>)
 8001dba:	00c2      	lsls	r2, r0, #3
 8001dbc:	440a      	add	r2, r1
 8001dbe:	e9c2 3400 	strd	r3, r4, [r2]
		D[dev] += deltaY * deltaY;
 8001dc2:	7bfb      	ldrb	r3, [r7, #15]
 8001dc4:	4a2c      	ldr	r2, [pc, #176]	; (8001e78 <OF_ComputeCoefficients+0x220>)
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001dce:	4b24      	ldr	r3, [pc, #144]	; (8001e60 <OF_ComputeCoefficients+0x208>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	4823      	ldr	r0, [pc, #140]	; (8001e60 <OF_ComputeCoefficients+0x208>)
 8001dd4:	6800      	ldr	r0, [r0, #0]
 8001dd6:	fb00 f303 	mul.w	r3, r0, r3
 8001dda:	469b      	mov	fp, r3
 8001ddc:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001de0:	7bf8      	ldrb	r0, [r7, #15]
 8001de2:	eb1b 0301 	adds.w	r3, fp, r1
 8001de6:	eb4c 0402 	adc.w	r4, ip, r2
 8001dea:	4923      	ldr	r1, [pc, #140]	; (8001e78 <OF_ComputeCoefficients+0x220>)
 8001dec:	00c2      	lsls	r2, r0, #3
 8001dee:	440a      	add	r2, r1
 8001df0:	e9c2 3400 	strd	r3, r4, [r2]
		E[dev] += deltaT * deltaY;
 8001df4:	7bfb      	ldrb	r3, [r7, #15]
 8001df6:	4a21      	ldr	r2, [pc, #132]	; (8001e7c <OF_ComputeCoefficients+0x224>)
 8001df8:	00db      	lsls	r3, r3, #3
 8001dfa:	4413      	add	r3, r2
 8001dfc:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e00:	4b19      	ldr	r3, [pc, #100]	; (8001e68 <OF_ComputeCoefficients+0x210>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	4816      	ldr	r0, [pc, #88]	; (8001e60 <OF_ComputeCoefficients+0x208>)
 8001e06:	6800      	ldr	r0, [r0, #0]
 8001e08:	fb00 f303 	mul.w	r3, r0, r3
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	ea4f 7ceb 	mov.w	ip, fp, asr #31
 8001e12:	7bf8      	ldrb	r0, [r7, #15]
 8001e14:	eb1b 0301 	adds.w	r3, fp, r1
 8001e18:	eb4c 0402 	adc.w	r4, ip, r2
 8001e1c:	4917      	ldr	r1, [pc, #92]	; (8001e7c <OF_ComputeCoefficients+0x224>)
 8001e1e:	00c2      	lsls	r2, r0, #3
 8001e20:	440a      	add	r2, r1
 8001e22:	e9c2 3400 	strd	r3, r4, [r2]

		frameIdx++;
 8001e26:	4b08      	ldr	r3, [pc, #32]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001e28:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e2c:	b29b      	uxth	r3, r3
 8001e2e:	3301      	adds	r3, #1
 8001e30:	b29b      	uxth	r3, r3
 8001e32:	b21a      	sxth	r2, r3
 8001e34:	4b04      	ldr	r3, [pc, #16]	; (8001e48 <OF_ComputeCoefficients+0x1f0>)
 8001e36:	801a      	strh	r2, [r3, #0]
	}
}
 8001e38:	bf00      	nop
 8001e3a:	3714      	adds	r7, #20
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	e8bd 0890 	ldmia.w	sp!, {r4, r7, fp}
 8001e42:	4770      	bx	lr
 8001e44:	08006690 	.word	0x08006690
 8001e48:	2000065c 	.word	0x2000065c
 8001e4c:	08006090 	.word	0x08006090
 8001e50:	08005e90 	.word	0x08005e90
 8001e54:	20000650 	.word	0x20000650
 8001e58:	08006490 	.word	0x08006490
 8001e5c:	08006290 	.word	0x08006290
 8001e60:	20000654 	.word	0x20000654
 8001e64:	08005c90 	.word	0x08005c90
 8001e68:	20000658 	.word	0x20000658
 8001e6c:	20000600 	.word	0x20000600
 8001e70:	20000610 	.word	0x20000610
 8001e74:	20000620 	.word	0x20000620
 8001e78:	20000630 	.word	0x20000630
 8001e7c:	20000640 	.word	0x20000640

08001e80 <OF_Compute>:

void OF_Compute(Device dev, int32_t* ofX, int32_t* ofY){
 8001e80:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8001e84:	b088      	sub	sp, #32
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	4603      	mov	r3, r0
 8001e8a:	60b9      	str	r1, [r7, #8]
 8001e8c:	607a      	str	r2, [r7, #4]
 8001e8e:	73fb      	strb	r3, [r7, #15]
	int64_t num, den;

	den = A[dev] * D[dev] - B[dev] * B[dev];
 8001e90:	7bfb      	ldrb	r3, [r7, #15]
 8001e92:	4a69      	ldr	r2, [pc, #420]	; (8002038 <OF_Compute+0x1b8>)
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4413      	add	r3, r2
 8001e98:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001e9c:	7bfb      	ldrb	r3, [r7, #15]
 8001e9e:	4867      	ldr	r0, [pc, #412]	; (800203c <OF_Compute+0x1bc>)
 8001ea0:	00db      	lsls	r3, r3, #3
 8001ea2:	4403      	add	r3, r0
 8001ea4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ea8:	fb03 f502 	mul.w	r5, r3, r2
 8001eac:	fb01 f004 	mul.w	r0, r1, r4
 8001eb0:	4428      	add	r0, r5
 8001eb2:	fba1 5603 	umull	r5, r6, r1, r3
 8001eb6:	1983      	adds	r3, r0, r6
 8001eb8:	461e      	mov	r6, r3
 8001eba:	7bfb      	ldrb	r3, [r7, #15]
 8001ebc:	4a60      	ldr	r2, [pc, #384]	; (8002040 <OF_Compute+0x1c0>)
 8001ebe:	00db      	lsls	r3, r3, #3
 8001ec0:	4413      	add	r3, r2
 8001ec2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001ec6:	7bfb      	ldrb	r3, [r7, #15]
 8001ec8:	485d      	ldr	r0, [pc, #372]	; (8002040 <OF_Compute+0x1c0>)
 8001eca:	00db      	lsls	r3, r3, #3
 8001ecc:	4403      	add	r3, r0
 8001ece:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001ed2:	fb03 fc02 	mul.w	ip, r3, r2
 8001ed6:	fb01 f004 	mul.w	r0, r1, r4
 8001eda:	4460      	add	r0, ip
 8001edc:	fba1 bc03 	umull	fp, ip, r1, r3
 8001ee0:	eb00 020c 	add.w	r2, r0, ip
 8001ee4:	4694      	mov	ip, r2
 8001ee6:	462b      	mov	r3, r5
 8001ee8:	4634      	mov	r4, r6
 8001eea:	ebb3 030b 	subs.w	r3, r3, fp
 8001eee:	eb64 040c 	sbc.w	r4, r4, ip
 8001ef2:	e9c7 3406 	strd	r3, r4, [r7, #24]

	if(den > 0){
 8001ef6:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	f174 0300 	sbcs.w	r3, r4, #0
 8001f00:	f2c0 808d 	blt.w	800201e <OF_Compute+0x19e>
		num = (C[dev]*D[dev]) - (B[dev]*E[dev]);
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
 8001f06:	4a4f      	ldr	r2, [pc, #316]	; (8002044 <OF_Compute+0x1c4>)
 8001f08:	00db      	lsls	r3, r3, #3
 8001f0a:	4413      	add	r3, r2
 8001f0c:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f10:	7bfb      	ldrb	r3, [r7, #15]
 8001f12:	484a      	ldr	r0, [pc, #296]	; (800203c <OF_Compute+0x1bc>)
 8001f14:	00db      	lsls	r3, r3, #3
 8001f16:	4403      	add	r3, r0
 8001f18:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f1c:	fb03 f502 	mul.w	r5, r3, r2
 8001f20:	fb01 f004 	mul.w	r0, r1, r4
 8001f24:	4428      	add	r0, r5
 8001f26:	fba1 5603 	umull	r5, r6, r1, r3
 8001f2a:	1983      	adds	r3, r0, r6
 8001f2c:	461e      	mov	r6, r3
 8001f2e:	7bfb      	ldrb	r3, [r7, #15]
 8001f30:	4a43      	ldr	r2, [pc, #268]	; (8002040 <OF_Compute+0x1c0>)
 8001f32:	00db      	lsls	r3, r3, #3
 8001f34:	4413      	add	r3, r2
 8001f36:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f3a:	7bfb      	ldrb	r3, [r7, #15]
 8001f3c:	4842      	ldr	r0, [pc, #264]	; (8002048 <OF_Compute+0x1c8>)
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4403      	add	r3, r0
 8001f42:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001f46:	fb03 fc02 	mul.w	ip, r3, r2
 8001f4a:	fb01 f004 	mul.w	r0, r1, r4
 8001f4e:	4460      	add	r0, ip
 8001f50:	fba1 bc03 	umull	fp, ip, r1, r3
 8001f54:	eb00 020c 	add.w	r2, r0, ip
 8001f58:	4694      	mov	ip, r2
 8001f5a:	462b      	mov	r3, r5
 8001f5c:	4634      	mov	r4, r6
 8001f5e:	ebb3 030b 	subs.w	r3, r3, fp
 8001f62:	eb64 040c 	sbc.w	r4, r4, ip
 8001f66:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofX = (num << bitsOfResolution)  / den;
 8001f6a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001f6e:	f04f 0000 	mov.w	r0, #0
 8001f72:	f04f 0100 	mov.w	r1, #0
 8001f76:	0261      	lsls	r1, r4, #9
 8001f78:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8001f7c:	0258      	lsls	r0, r3, #9
 8001f7e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001f82:	f7fe f975 	bl	8000270 <__aeabi_ldivmod>
 8001f86:	4603      	mov	r3, r0
 8001f88:	460c      	mov	r4, r1
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	601a      	str	r2, [r3, #0]
		num = (A[dev]*E[dev]) - (B[dev]*C[dev]);
 8001f90:	7bfb      	ldrb	r3, [r7, #15]
 8001f92:	4a29      	ldr	r2, [pc, #164]	; (8002038 <OF_Compute+0x1b8>)
 8001f94:	00db      	lsls	r3, r3, #3
 8001f96:	4413      	add	r3, r2
 8001f98:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001f9c:	7bfb      	ldrb	r3, [r7, #15]
 8001f9e:	482a      	ldr	r0, [pc, #168]	; (8002048 <OF_Compute+0x1c8>)
 8001fa0:	00db      	lsls	r3, r3, #3
 8001fa2:	4403      	add	r3, r0
 8001fa4:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fa8:	fb03 f502 	mul.w	r5, r3, r2
 8001fac:	fb01 f004 	mul.w	r0, r1, r4
 8001fb0:	4428      	add	r0, r5
 8001fb2:	fba1 5603 	umull	r5, r6, r1, r3
 8001fb6:	1983      	adds	r3, r0, r6
 8001fb8:	461e      	mov	r6, r3
 8001fba:	7bfb      	ldrb	r3, [r7, #15]
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <OF_Compute+0x1c0>)
 8001fbe:	00db      	lsls	r3, r3, #3
 8001fc0:	4413      	add	r3, r2
 8001fc2:	e9d3 1200 	ldrd	r1, r2, [r3]
 8001fc6:	7bfb      	ldrb	r3, [r7, #15]
 8001fc8:	481e      	ldr	r0, [pc, #120]	; (8002044 <OF_Compute+0x1c4>)
 8001fca:	00db      	lsls	r3, r3, #3
 8001fcc:	4403      	add	r3, r0
 8001fce:	e9d3 3400 	ldrd	r3, r4, [r3]
 8001fd2:	fb03 fc02 	mul.w	ip, r3, r2
 8001fd6:	fb01 f004 	mul.w	r0, r1, r4
 8001fda:	4460      	add	r0, ip
 8001fdc:	fba1 bc03 	umull	fp, ip, r1, r3
 8001fe0:	eb00 020c 	add.w	r2, r0, ip
 8001fe4:	4694      	mov	ip, r2
 8001fe6:	462b      	mov	r3, r5
 8001fe8:	4634      	mov	r4, r6
 8001fea:	ebb3 030b 	subs.w	r3, r3, fp
 8001fee:	eb64 040c 	sbc.w	r4, r4, ip
 8001ff2:	e9c7 3404 	strd	r3, r4, [r7, #16]
		*ofY = (num << bitsOfResolution) / den;
 8001ff6:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8001ffa:	f04f 0000 	mov.w	r0, #0
 8001ffe:	f04f 0100 	mov.w	r1, #0
 8002002:	0261      	lsls	r1, r4, #9
 8002004:	ea41 51d3 	orr.w	r1, r1, r3, lsr #23
 8002008:	0258      	lsls	r0, r3, #9
 800200a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800200e:	f7fe f92f 	bl	8000270 <__aeabi_ldivmod>
 8002012:	4603      	mov	r3, r0
 8002014:	460c      	mov	r4, r1
 8002016:	461a      	mov	r2, r3
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	601a      	str	r2, [r3, #0]
	}
	else{
		*ofX = *ofY = 0;
	}
}
 800201c:	e006      	b.n	800202c <OF_Compute+0x1ac>
		*ofX = *ofY = 0;
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681a      	ldr	r2, [r3, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	601a      	str	r2, [r3, #0]
}
 800202c:	bf00      	nop
 800202e:	3720      	adds	r7, #32
 8002030:	46bd      	mov	sp, r7
 8002032:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8002036:	bf00      	nop
 8002038:	20000600 	.word	0x20000600
 800203c:	20000630 	.word	0x20000630
 8002040:	20000610 	.word	0x20000610
 8002044:	20000620 	.word	0x20000620
 8002048:	20000640 	.word	0x20000640

0800204c <OF_ComputeFused>:

void OF_ComputeFused(optical2DFlowStruct* right, optical2DFlowStruct* left, optical2DandRotateFlowStruct* fused){
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
	fused->x = (right->x + left->x) >> 1;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681a      	ldr	r2, [r3, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4413      	add	r3, r2
 8002062:	105a      	asrs	r2, r3, #1
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	601a      	str	r2, [r3, #0]
	fused->y = (right->y + left->y) >> 1;
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	685a      	ldr	r2, [r3, #4]
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	685b      	ldr	r3, [r3, #4]
 8002070:	4413      	add	r3, r2
 8002072:	105a      	asrs	r2, r3, #1
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	605a      	str	r2, [r3, #4]
	if((right->y < 0 && left->y > 0) || (right->y > 0 && left->y < 0))
 8002078:	68fb      	ldr	r3, [r7, #12]
 800207a:	685b      	ldr	r3, [r3, #4]
 800207c:	2b00      	cmp	r3, #0
 800207e:	da03      	bge.n	8002088 <OF_ComputeFused+0x3c>
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	685b      	ldr	r3, [r3, #4]
 8002084:	2b00      	cmp	r3, #0
 8002086:	dc07      	bgt.n	8002098 <OF_ComputeFused+0x4c>
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	685b      	ldr	r3, [r3, #4]
 800208c:	2b00      	cmp	r3, #0
 800208e:	dd0a      	ble.n	80020a6 <OF_ComputeFused+0x5a>
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	da06      	bge.n	80020a6 <OF_ComputeFused+0x5a>
		fused->theta = (right->y - left->y);
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	685a      	ldr	r2, [r3, #4]
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	1ad2      	subs	r2, r2, r3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	609a      	str	r2, [r3, #8]
}
 80020a6:	bf00      	nop
 80020a8:	3714      	adds	r7, #20
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
	...

080020b4 <LL_AHB2_GRP1_EnableClock>:
{
 80020b4:	b480      	push	{r7}
 80020b6:	b085      	sub	sp, #20
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 80020bc:	4b08      	ldr	r3, [pc, #32]	; (80020e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020be:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020c0:	4907      	ldr	r1, [pc, #28]	; (80020e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	4313      	orrs	r3, r2
 80020c6:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 80020c8:	4b05      	ldr	r3, [pc, #20]	; (80020e0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 80020ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4013      	ands	r3, r2
 80020d0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80020d2:	68fb      	ldr	r3, [r7, #12]
}
 80020d4:	bf00      	nop
 80020d6:	3714      	adds	r7, #20
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr
 80020e0:	40021000 	.word	0x40021000

080020e4 <LL_APB1_GRP1_EnableClock>:
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80020ec:	4b08      	ldr	r3, [pc, #32]	; (8002110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020ee:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020f0:	4907      	ldr	r1, [pc, #28]	; (8002110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4313      	orrs	r3, r2
 80020f6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <LL_APB1_GRP1_EnableClock+0x2c>)
 80020fa:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	4013      	ands	r3, r2
 8002100:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002102:	68fb      	ldr	r3, [r7, #12]
}
 8002104:	bf00      	nop
 8002106:	3714      	adds	r7, #20
 8002108:	46bd      	mov	sp, r7
 800210a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210e:	4770      	bx	lr
 8002110:	40021000 	.word	0x40021000

08002114 <LL_SPI_SetStandard>:
  *         @arg @ref LL_SPI_PROTOCOL_MOTOROLA
  *         @arg @ref LL_SPI_PROTOCOL_TI
  * @retval None
  */
__STATIC_INLINE void LL_SPI_SetStandard(SPI_TypeDef *SPIx, uint32_t Standard)
{
 8002114:	b480      	push	{r7}
 8002116:	b083      	sub	sp, #12
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f023 0210 	bic.w	r2, r3, #16
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	431a      	orrs	r2, r3
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	605a      	str	r2, [r3, #4]
}
 800212e:	bf00      	nop
 8002130:	370c      	adds	r7, #12
 8002132:	46bd      	mov	sp, r7
 8002134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002138:	4770      	bx	lr

0800213a <LL_SPI_DisableNSSPulseMgt>:
  * @rmtoll CR2          NSSP          LL_SPI_DisableNSSPulseMgt
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableNSSPulseMgt(SPI_TypeDef *SPIx)
{
 800213a:	b480      	push	{r7}
 800213c:	b083      	sub	sp, #12
 800213e:	af00      	add	r7, sp, #0
 8002140:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f023 0208 	bic.w	r2, r3, #8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	605a      	str	r2, [r3, #4]
}
 800214e:	bf00      	nop
 8002150:	370c      	adds	r7, #12
 8002152:	46bd      	mov	sp, r7
 8002154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002158:	4770      	bx	lr
	...

0800215c <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b090      	sub	sp, #64	; 0x40
 8002160:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8002162:	f107 0318 	add.w	r3, r7, #24
 8002166:	2228      	movs	r2, #40	; 0x28
 8002168:	2100      	movs	r1, #0
 800216a:	4618      	mov	r0, r3
 800216c:	f002 fc4e 	bl	8004a0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002170:	463b      	mov	r3, r7
 8002172:	2200      	movs	r2, #0
 8002174:	601a      	str	r2, [r3, #0]
 8002176:	605a      	str	r2, [r3, #4]
 8002178:	609a      	str	r2, [r3, #8]
 800217a:	60da      	str	r2, [r3, #12]
 800217c:	611a      	str	r2, [r3, #16]
 800217e:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8002180:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002184:	f7ff ffae 	bl	80020e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002188:	2004      	movs	r0, #4
 800218a:	f7ff ff93 	bl	80020b4 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 800218e:	2002      	movs	r0, #2
 8002190:	f7ff ff90 	bl	80020b4 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8002194:	230c      	movs	r3, #12
 8002196:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002198:	2302      	movs	r3, #2
 800219a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 800219c:	2303      	movs	r3, #3
 800219e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021a0:	2300      	movs	r3, #0
 80021a2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021a4:	2300      	movs	r3, #0
 80021a6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80021a8:	2305      	movs	r3, #5
 80021aa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021ac:	463b      	mov	r3, r7
 80021ae:	4619      	mov	r1, r3
 80021b0:	481e      	ldr	r0, [pc, #120]	; (800222c <MX_SPI2_Init+0xd0>)
 80021b2:	f001 f9ec 	bl	800358e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 80021b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80021ba:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80021bc:	2302      	movs	r3, #2
 80021be:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 80021c0:	2303      	movs	r3, #3
 80021c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80021c4:	2300      	movs	r3, #0
 80021c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80021c8:	2300      	movs	r3, #0
 80021ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 80021cc:	2305      	movs	r3, #5
 80021ce:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021d0:	463b      	mov	r3, r7
 80021d2:	4619      	mov	r1, r3
 80021d4:	4816      	ldr	r0, [pc, #88]	; (8002230 <MX_SPI2_Init+0xd4>)
 80021d6:	f001 f9da 	bl	800358e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 80021da:	2300      	movs	r3, #0
 80021dc:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 80021de:	f44f 7382 	mov.w	r3, #260	; 0x104
 80021e2:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 80021e4:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80021e8:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 80021ea:	2302      	movs	r3, #2
 80021ec:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80021ee:	2301      	movs	r3, #1
 80021f0:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80021f2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80021f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80021f8:	2320      	movs	r3, #32
 80021fa:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80021fc:	2300      	movs	r3, #0
 80021fe:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8002200:	2300      	movs	r3, #0
 8002202:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8002204:	2307      	movs	r3, #7
 8002206:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8002208:	f107 0318 	add.w	r3, r7, #24
 800220c:	4619      	mov	r1, r3
 800220e:	4809      	ldr	r0, [pc, #36]	; (8002234 <MX_SPI2_Init+0xd8>)
 8002210:	f001 fe0b 	bl	8003e2a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8002214:	2100      	movs	r1, #0
 8002216:	4807      	ldr	r0, [pc, #28]	; (8002234 <MX_SPI2_Init+0xd8>)
 8002218:	f7ff ff7c 	bl	8002114 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 800221c:	4805      	ldr	r0, [pc, #20]	; (8002234 <MX_SPI2_Init+0xd8>)
 800221e:	f7ff ff8c 	bl	800213a <LL_SPI_DisableNSSPulseMgt>

}
 8002222:	bf00      	nop
 8002224:	3740      	adds	r7, #64	; 0x40
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	48000800 	.word	0x48000800
 8002230:	48000400 	.word	0x48000400
 8002234:	40003800 	.word	0x40003800

08002238 <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b090      	sub	sp, #64	; 0x40
 800223c:	af00      	add	r7, sp, #0
  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 800223e:	f107 0318 	add.w	r3, r7, #24
 8002242:	2228      	movs	r2, #40	; 0x28
 8002244:	2100      	movs	r1, #0
 8002246:	4618      	mov	r0, r3
 8002248:	f002 fbe0 	bl	8004a0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800224c:	463b      	mov	r3, r7
 800224e:	2200      	movs	r2, #0
 8002250:	601a      	str	r2, [r3, #0]
 8002252:	605a      	str	r2, [r3, #4]
 8002254:	609a      	str	r2, [r3, #8]
 8002256:	60da      	str	r2, [r3, #12]
 8002258:	611a      	str	r2, [r3, #16]
 800225a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI3);
 800225c:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002260:	f7ff ff40 	bl	80020e4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8002264:	2004      	movs	r0, #4
 8002266:	f7ff ff25 	bl	80020b4 <LL_AHB2_GRP1_EnableClock>
  /**SPI3 GPIO Configuration
  PC10   ------> SPI3_SCK
  PC11   ------> SPI3_MISO
  PC12   ------> SPI3_MOSI
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_10|LL_GPIO_PIN_11|LL_GPIO_PIN_12;
 800226a:	f44f 53e0 	mov.w	r3, #7168	; 0x1c00
 800226e:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002270:	2302      	movs	r3, #2
 8002272:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002274:	2303      	movs	r3, #3
 8002276:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002278:	2300      	movs	r3, #0
 800227a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800227c:	2300      	movs	r3, #0
 800227e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_6;
 8002280:	2306      	movs	r3, #6
 8002282:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002284:	463b      	mov	r3, r7
 8002286:	4619      	mov	r1, r3
 8002288:	4815      	ldr	r0, [pc, #84]	; (80022e0 <MX_SPI3_Init+0xa8>)
 800228a:	f001 f980 	bl	800358e <LL_GPIO_Init>

  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 800228e:	2300      	movs	r3, #0
 8002290:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8002292:	f44f 7382 	mov.w	r3, #260	; 0x104
 8002296:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8002298:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800229c:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_HIGH;
 800229e:	2302      	movs	r3, #2
 80022a0:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_2EDGE;
 80022a2:	2301      	movs	r3, #1
 80022a4:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 80022a6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV32;
 80022ac:	2320      	movs	r3, #32
 80022ae:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 80022b0:	2300      	movs	r3, #0
 80022b2:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 80022b4:	2300      	movs	r3, #0
 80022b6:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 80022b8:	2307      	movs	r3, #7
 80022ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI3, &SPI_InitStruct);
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	4619      	mov	r1, r3
 80022c2:	4808      	ldr	r0, [pc, #32]	; (80022e4 <MX_SPI3_Init+0xac>)
 80022c4:	f001 fdb1 	bl	8003e2a <LL_SPI_Init>
  LL_SPI_SetStandard(SPI3, LL_SPI_PROTOCOL_MOTOROLA);
 80022c8:	2100      	movs	r1, #0
 80022ca:	4806      	ldr	r0, [pc, #24]	; (80022e4 <MX_SPI3_Init+0xac>)
 80022cc:	f7ff ff22 	bl	8002114 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI3);
 80022d0:	4804      	ldr	r0, [pc, #16]	; (80022e4 <MX_SPI3_Init+0xac>)
 80022d2:	f7ff ff32 	bl	800213a <LL_SPI_DisableNSSPulseMgt>

}
 80022d6:	bf00      	nop
 80022d8:	3740      	adds	r7, #64	; 0x40
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	48000800 	.word	0x48000800
 80022e4:	40003c00 	.word	0x40003c00

080022e8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022e8:	b480      	push	{r7}
 80022ea:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80022ec:	bf00      	nop
 80022ee:	46bd      	mov	sp, r7
 80022f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f4:	4770      	bx	lr

080022f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022f6:	b480      	push	{r7}
 80022f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022fa:	e7fe      	b.n	80022fa <HardFault_Handler+0x4>

080022fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002300:	e7fe      	b.n	8002300 <MemManage_Handler+0x4>

08002302 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002302:	b480      	push	{r7}
 8002304:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002306:	e7fe      	b.n	8002306 <BusFault_Handler+0x4>

08002308 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002308:	b480      	push	{r7}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800230c:	e7fe      	b.n	800230c <UsageFault_Handler+0x4>

0800230e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800230e:	b480      	push	{r7}
 8002310:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002312:	bf00      	nop
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800231c:	b480      	push	{r7}
 800231e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002320:	bf00      	nop
 8002322:	46bd      	mov	sp, r7
 8002324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002328:	4770      	bx	lr

0800232a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002346:	b580      	push	{r7, lr}
 8002348:	b086      	sub	sp, #24
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	60b9      	str	r1, [r7, #8]
 8002350:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002352:	2300      	movs	r3, #0
 8002354:	617b      	str	r3, [r7, #20]
 8002356:	e00a      	b.n	800236e <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002358:	f000 fca8 	bl	8002cac <__io_getchar>
 800235c:	4601      	mov	r1, r0
 800235e:	68bb      	ldr	r3, [r7, #8]
 8002360:	1c5a      	adds	r2, r3, #1
 8002362:	60ba      	str	r2, [r7, #8]
 8002364:	b2ca      	uxtb	r2, r1
 8002366:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002368:	697b      	ldr	r3, [r7, #20]
 800236a:	3301      	adds	r3, #1
 800236c:	617b      	str	r3, [r7, #20]
 800236e:	697a      	ldr	r2, [r7, #20]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	429a      	cmp	r2, r3
 8002374:	dbf0      	blt.n	8002358 <_read+0x12>
	}

return len;
 8002376:	687b      	ldr	r3, [r7, #4]
}
 8002378:	4618      	mov	r0, r3
 800237a:	3718      	adds	r7, #24
 800237c:	46bd      	mov	sp, r7
 800237e:	bd80      	pop	{r7, pc}

08002380 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e009      	b.n	80023a6 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	1c5a      	adds	r2, r3, #1
 8002396:	60ba      	str	r2, [r7, #8]
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f000 fc68 	bl	8002c70 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	3301      	adds	r3, #1
 80023a4:	617b      	str	r3, [r7, #20]
 80023a6:	697a      	ldr	r2, [r7, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	429a      	cmp	r2, r3
 80023ac:	dbf1      	blt.n	8002392 <_write+0x12>
	}
	return len;
 80023ae:	687b      	ldr	r3, [r7, #4]
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	3718      	adds	r7, #24
 80023b4:	46bd      	mov	sp, r7
 80023b6:	bd80      	pop	{r7, pc}

080023b8 <_close>:

int _close(int file)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
	return -1;
 80023c0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	370c      	adds	r7, #12
 80023c8:	46bd      	mov	sp, r7
 80023ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ce:	4770      	bx	lr

080023d0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023d0:	b480      	push	{r7}
 80023d2:	b083      	sub	sp, #12
 80023d4:	af00      	add	r7, sp, #0
 80023d6:	6078      	str	r0, [r7, #4]
 80023d8:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023e0:	605a      	str	r2, [r3, #4]
	return 0;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	370c      	adds	r7, #12
 80023e8:	46bd      	mov	sp, r7
 80023ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ee:	4770      	bx	lr

080023f0 <_isatty>:

int _isatty(int file)
{
 80023f0:	b480      	push	{r7}
 80023f2:	b083      	sub	sp, #12
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
	return 1;
 80023f8:	2301      	movs	r3, #1
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	370c      	adds	r7, #12
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002406:	b480      	push	{r7}
 8002408:	b085      	sub	sp, #20
 800240a:	af00      	add	r7, sp, #0
 800240c:	60f8      	str	r0, [r7, #12]
 800240e:	60b9      	str	r1, [r7, #8]
 8002410:	607a      	str	r2, [r7, #4]
	return 0;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241e:	4770      	bx	lr

08002420 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	b086      	sub	sp, #24
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002428:	4a14      	ldr	r2, [pc, #80]	; (800247c <_sbrk+0x5c>)
 800242a:	4b15      	ldr	r3, [pc, #84]	; (8002480 <_sbrk+0x60>)
 800242c:	1ad3      	subs	r3, r2, r3
 800242e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002434:	4b13      	ldr	r3, [pc, #76]	; (8002484 <_sbrk+0x64>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	2b00      	cmp	r3, #0
 800243a:	d102      	bne.n	8002442 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800243c:	4b11      	ldr	r3, [pc, #68]	; (8002484 <_sbrk+0x64>)
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <_sbrk+0x68>)
 8002440:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002442:	4b10      	ldr	r3, [pc, #64]	; (8002484 <_sbrk+0x64>)
 8002444:	681a      	ldr	r2, [r3, #0]
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	4413      	add	r3, r2
 800244a:	693a      	ldr	r2, [r7, #16]
 800244c:	429a      	cmp	r2, r3
 800244e:	d207      	bcs.n	8002460 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002450:	f002 fab2 	bl	80049b8 <__errno>
 8002454:	4602      	mov	r2, r0
 8002456:	230c      	movs	r3, #12
 8002458:	6013      	str	r3, [r2, #0]
    return (void *)-1;
 800245a:	f04f 33ff 	mov.w	r3, #4294967295
 800245e:	e009      	b.n	8002474 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002460:	4b08      	ldr	r3, [pc, #32]	; (8002484 <_sbrk+0x64>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002466:	4b07      	ldr	r3, [pc, #28]	; (8002484 <_sbrk+0x64>)
 8002468:	681a      	ldr	r2, [r3, #0]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	4413      	add	r3, r2
 800246e:	4a05      	ldr	r2, [pc, #20]	; (8002484 <_sbrk+0x64>)
 8002470:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002472:	68fb      	ldr	r3, [r7, #12]
}
 8002474:	4618      	mov	r0, r3
 8002476:	3718      	adds	r7, #24
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20018000 	.word	0x20018000
 8002480:	00000400 	.word	0x00000400
 8002484:	20000660 	.word	0x20000660
 8002488:	20000680 	.word	0x20000680

0800248c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002490:	4b17      	ldr	r3, [pc, #92]	; (80024f0 <SystemInit+0x64>)
 8002492:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002496:	4a16      	ldr	r2, [pc, #88]	; (80024f0 <SystemInit+0x64>)
 8002498:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800249c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80024a0:	4b14      	ldr	r3, [pc, #80]	; (80024f4 <SystemInit+0x68>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a13      	ldr	r2, [pc, #76]	; (80024f4 <SystemInit+0x68>)
 80024a6:	f043 0301 	orr.w	r3, r3, #1
 80024aa:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80024ac:	4b11      	ldr	r3, [pc, #68]	; (80024f4 <SystemInit+0x68>)
 80024ae:	2200      	movs	r2, #0
 80024b0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80024b2:	4b10      	ldr	r3, [pc, #64]	; (80024f4 <SystemInit+0x68>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4a0f      	ldr	r2, [pc, #60]	; (80024f4 <SystemInit+0x68>)
 80024b8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 80024bc:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 80024c0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 80024c2:	4b0c      	ldr	r3, [pc, #48]	; (80024f4 <SystemInit+0x68>)
 80024c4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80024c8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80024ca:	4b0a      	ldr	r3, [pc, #40]	; (80024f4 <SystemInit+0x68>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a09      	ldr	r2, [pc, #36]	; (80024f4 <SystemInit+0x68>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024d4:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 80024d6:	4b07      	ldr	r3, [pc, #28]	; (80024f4 <SystemInit+0x68>)
 80024d8:	2200      	movs	r2, #0
 80024da:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80024dc:	4b04      	ldr	r3, [pc, #16]	; (80024f0 <SystemInit+0x64>)
 80024de:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80024e2:	609a      	str	r2, [r3, #8]
#endif
}
 80024e4:	bf00      	nop
 80024e6:	46bd      	mov	sp, r7
 80024e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ec:	4770      	bx	lr
 80024ee:	bf00      	nop
 80024f0:	e000ed00 	.word	0xe000ed00
 80024f4:	40021000 	.word	0x40021000

080024f8 <LL_AHB2_GRP1_EnableClock>:
{
 80024f8:	b480      	push	{r7}
 80024fa:	b085      	sub	sp, #20
 80024fc:	af00      	add	r7, sp, #0
 80024fe:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002500:	4b08      	ldr	r3, [pc, #32]	; (8002524 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002502:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002504:	4907      	ldr	r1, [pc, #28]	; (8002524 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4313      	orrs	r3, r2
 800250a:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 800250c:	4b05      	ldr	r3, [pc, #20]	; (8002524 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800250e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	4013      	ands	r3, r2
 8002514:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002516:	68fb      	ldr	r3, [r7, #12]
}
 8002518:	bf00      	nop
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002522:	4770      	bx	lr
 8002524:	40021000 	.word	0x40021000

08002528 <LL_APB1_GRP1_EnableClock>:
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002530:	4b08      	ldr	r3, [pc, #32]	; (8002554 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002532:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002534:	4907      	ldr	r1, [pc, #28]	; (8002554 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	4313      	orrs	r3, r2
 800253a:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <LL_APB1_GRP1_EnableClock+0x2c>)
 800253e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4013      	ands	r3, r2
 8002544:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002546:	68fb      	ldr	r3, [r7, #12]
}
 8002548:	bf00      	nop
 800254a:	3714      	adds	r7, #20
 800254c:	46bd      	mov	sp, r7
 800254e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002552:	4770      	bx	lr
 8002554:	40021000 	.word	0x40021000

08002558 <LL_APB2_GRP1_EnableClock>:
{
 8002558:	b480      	push	{r7}
 800255a:	b085      	sub	sp, #20
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB2ENR, Periphs);
 8002560:	4b08      	ldr	r3, [pc, #32]	; (8002584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002562:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002564:	4907      	ldr	r1, [pc, #28]	; (8002584 <LL_APB2_GRP1_EnableClock+0x2c>)
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	4313      	orrs	r3, r2
 800256a:	660b      	str	r3, [r1, #96]	; 0x60
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 800256c:	4b05      	ldr	r3, [pc, #20]	; (8002584 <LL_APB2_GRP1_EnableClock+0x2c>)
 800256e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	4013      	ands	r3, r2
 8002574:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002576:	68fb      	ldr	r3, [r7, #12]
}
 8002578:	bf00      	nop
 800257a:	3714      	adds	r7, #20
 800257c:	46bd      	mov	sp, r7
 800257e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002582:	4770      	bx	lr
 8002584:	40021000 	.word	0x40021000

08002588 <LL_TIM_DisableARRPreload>:
  * @rmtoll CR1          ARPE          LL_TIM_DisableARRPreload
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableARRPreload(TIM_TypeDef *TIMx)
{
 8002588:	b480      	push	{r7}
 800258a:	b083      	sub	sp, #12
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_ARPE);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	601a      	str	r2, [r3, #0]
}
 800259c:	bf00      	nop
 800259e:	370c      	adds	r7, #12
 80025a0:	46bd      	mov	sp, r7
 80025a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a6:	4770      	bx	lr

080025a8 <LL_TIM_OC_DisableFast>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_DisableFast(TIM_TypeDef *TIMx, uint32_t Channel)
{
 80025a8:	b480      	push	{r7}
 80025aa:	b085      	sub	sp, #20
 80025ac:	af00      	add	r7, sp, #0
 80025ae:	6078      	str	r0, [r7, #4]
 80025b0:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	2b01      	cmp	r3, #1
 80025b6:	d028      	beq.n	800260a <LL_TIM_OC_DisableFast+0x62>
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	2b04      	cmp	r3, #4
 80025bc:	d023      	beq.n	8002606 <LL_TIM_OC_DisableFast+0x5e>
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	2b10      	cmp	r3, #16
 80025c2:	d01e      	beq.n	8002602 <LL_TIM_OC_DisableFast+0x5a>
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	2b40      	cmp	r3, #64	; 0x40
 80025c8:	d019      	beq.n	80025fe <LL_TIM_OC_DisableFast+0x56>
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025d0:	d013      	beq.n	80025fa <LL_TIM_OC_DisableFast+0x52>
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025d8:	d00d      	beq.n	80025f6 <LL_TIM_OC_DisableFast+0x4e>
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80025e0:	d007      	beq.n	80025f2 <LL_TIM_OC_DisableFast+0x4a>
 80025e2:	683b      	ldr	r3, [r7, #0]
 80025e4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80025e8:	d101      	bne.n	80025ee <LL_TIM_OC_DisableFast+0x46>
 80025ea:	2307      	movs	r3, #7
 80025ec:	e00e      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 80025ee:	2308      	movs	r3, #8
 80025f0:	e00c      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 80025f2:	2306      	movs	r3, #6
 80025f4:	e00a      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 80025f6:	2305      	movs	r3, #5
 80025f8:	e008      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 80025fa:	2304      	movs	r3, #4
 80025fc:	e006      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 80025fe:	2303      	movs	r3, #3
 8002600:	e004      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 8002602:	2302      	movs	r3, #2
 8002604:	e002      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 8002606:	2301      	movs	r3, #1
 8002608:	e000      	b.n	800260c <LL_TIM_OC_DisableFast+0x64>
 800260a:	2300      	movs	r3, #0
 800260c:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	3318      	adds	r3, #24
 8002612:	4619      	mov	r1, r3
 8002614:	7bfb      	ldrb	r3, [r7, #15]
 8002616:	4a0b      	ldr	r2, [pc, #44]	; (8002644 <LL_TIM_OC_DisableFast+0x9c>)
 8002618:	5cd3      	ldrb	r3, [r2, r3]
 800261a:	440b      	add	r3, r1
 800261c:	60bb      	str	r3, [r7, #8]
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1FE << SHIFT_TAB_OCxx[iChannel]));
 800261e:	68bb      	ldr	r3, [r7, #8]
 8002620:	681a      	ldr	r2, [r3, #0]
 8002622:	7bfb      	ldrb	r3, [r7, #15]
 8002624:	4908      	ldr	r1, [pc, #32]	; (8002648 <LL_TIM_OC_DisableFast+0xa0>)
 8002626:	5ccb      	ldrb	r3, [r1, r3]
 8002628:	4619      	mov	r1, r3
 800262a:	2304      	movs	r3, #4
 800262c:	408b      	lsls	r3, r1
 800262e:	43db      	mvns	r3, r3
 8002630:	401a      	ands	r2, r3
 8002632:	68bb      	ldr	r3, [r7, #8]
 8002634:	601a      	str	r2, [r3, #0]

}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002640:	4770      	bx	lr
 8002642:	bf00      	nop
 8002644:	0800681c 	.word	0x0800681c
 8002648:	08006828 	.word	0x08006828

0800264c <LL_TIM_OC_EnablePreload>:
  *         @arg @ref LL_TIM_CHANNEL_CH5
  *         @arg @ref LL_TIM_CHANNEL_CH6
  * @retval None
  */
__STATIC_INLINE void LL_TIM_OC_EnablePreload(TIM_TypeDef *TIMx, uint32_t Channel)
{
 800264c:	b480      	push	{r7}
 800264e:	b085      	sub	sp, #20
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
   uint8_t iChannel = TIM_GET_CHANNEL_INDEX(Channel);
 8002656:	683b      	ldr	r3, [r7, #0]
 8002658:	2b01      	cmp	r3, #1
 800265a:	d028      	beq.n	80026ae <LL_TIM_OC_EnablePreload+0x62>
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	2b04      	cmp	r3, #4
 8002660:	d023      	beq.n	80026aa <LL_TIM_OC_EnablePreload+0x5e>
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	2b10      	cmp	r3, #16
 8002666:	d01e      	beq.n	80026a6 <LL_TIM_OC_EnablePreload+0x5a>
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	2b40      	cmp	r3, #64	; 0x40
 800266c:	d019      	beq.n	80026a2 <LL_TIM_OC_EnablePreload+0x56>
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002674:	d013      	beq.n	800269e <LL_TIM_OC_EnablePreload+0x52>
 8002676:	683b      	ldr	r3, [r7, #0]
 8002678:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800267c:	d00d      	beq.n	800269a <LL_TIM_OC_EnablePreload+0x4e>
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002684:	d007      	beq.n	8002696 <LL_TIM_OC_EnablePreload+0x4a>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268c:	d101      	bne.n	8002692 <LL_TIM_OC_EnablePreload+0x46>
 800268e:	2307      	movs	r3, #7
 8002690:	e00e      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 8002692:	2308      	movs	r3, #8
 8002694:	e00c      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 8002696:	2306      	movs	r3, #6
 8002698:	e00a      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 800269a:	2305      	movs	r3, #5
 800269c:	e008      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 800269e:	2304      	movs	r3, #4
 80026a0:	e006      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 80026a2:	2303      	movs	r3, #3
 80026a4:	e004      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 80026a6:	2302      	movs	r3, #2
 80026a8:	e002      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 80026aa:	2301      	movs	r3, #1
 80026ac:	e000      	b.n	80026b0 <LL_TIM_OC_EnablePreload+0x64>
 80026ae:	2300      	movs	r3, #0
 80026b0:	73fb      	strb	r3, [r7, #15]
   __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	3318      	adds	r3, #24
 80026b6:	4619      	mov	r1, r3
 80026b8:	7bfb      	ldrb	r3, [r7, #15]
 80026ba:	4a0a      	ldr	r2, [pc, #40]	; (80026e4 <LL_TIM_OC_EnablePreload+0x98>)
 80026bc:	5cd3      	ldrb	r3, [r2, r3]
 80026be:	440b      	add	r3, r1
 80026c0:	60bb      	str	r3, [r7, #8]
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80026c2:	68bb      	ldr	r3, [r7, #8]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	7bfb      	ldrb	r3, [r7, #15]
 80026c8:	4907      	ldr	r1, [pc, #28]	; (80026e8 <LL_TIM_OC_EnablePreload+0x9c>)
 80026ca:	5ccb      	ldrb	r3, [r1, r3]
 80026cc:	4619      	mov	r1, r3
 80026ce:	2308      	movs	r3, #8
 80026d0:	408b      	lsls	r3, r1
 80026d2:	431a      	orrs	r2, r3
 80026d4:	68bb      	ldr	r3, [r7, #8]
 80026d6:	601a      	str	r2, [r3, #0]
}
 80026d8:	bf00      	nop
 80026da:	3714      	adds	r7, #20
 80026dc:	46bd      	mov	sp, r7
 80026de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e2:	4770      	bx	lr
 80026e4:	0800681c 	.word	0x0800681c
 80026e8:	08006828 	.word	0x08006828

080026ec <LL_TIM_DisableExternalClock>:
  * @rmtoll SMCR         ECE           LL_TIM_DisableExternalClock
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableExternalClock(TIM_TypeDef *TIMx)
{
 80026ec:	b480      	push	{r7}
 80026ee:	b083      	sub	sp, #12
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_ECE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	689b      	ldr	r3, [r3, #8]
 80026f8:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	609a      	str	r2, [r3, #8]
}
 8002700:	bf00      	nop
 8002702:	370c      	adds	r7, #12
 8002704:	46bd      	mov	sp, r7
 8002706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270a:	4770      	bx	lr

0800270c <LL_TIM_SetClockSource>:
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE1
  *         @arg @ref LL_TIM_CLOCKSOURCE_EXT_MODE2
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetClockSource(TIM_TypeDef *TIMx, uint32_t ClockSource)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	6078      	str	r0, [r7, #4]
 8002714:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_SMS | TIM_SMCR_ECE, ClockSource);
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	689b      	ldr	r3, [r3, #8]
 800271a:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 800271e:	f023 0307 	bic.w	r3, r3, #7
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	431a      	orrs	r2, r3
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	609a      	str	r2, [r3, #8]
}
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002734:	4770      	bx	lr

08002736 <LL_TIM_SetTriggerOutput>:
  *         @arg @ref LL_TIM_TRGO_OC3REF
  *         @arg @ref LL_TIM_TRGO_OC4REF
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput(TIM_TypeDef *TIMx, uint32_t TimerSynchronization)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
 800273e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	685b      	ldr	r3, [r3, #4]
 8002744:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	431a      	orrs	r2, r3
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	605a      	str	r2, [r3, #4]
}
 8002750:	bf00      	nop
 8002752:	370c      	adds	r7, #12
 8002754:	46bd      	mov	sp, r7
 8002756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275a:	4770      	bx	lr

0800275c <LL_TIM_SetTriggerOutput2>:
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_RISING
  *         @arg @ref LL_TIM_TRGO2_OC5_RISING_OC6_FALLING
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetTriggerOutput2(TIM_TypeDef *TIMx, uint32_t ADCSynchronization)
{
 800275c:	b480      	push	{r7}
 800275e:	b083      	sub	sp, #12
 8002760:	af00      	add	r7, sp, #0
 8002762:	6078      	str	r0, [r7, #4]
 8002764:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS2, ADCSynchronization);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685b      	ldr	r3, [r3, #4]
 800276a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	431a      	orrs	r2, r3
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	605a      	str	r2, [r3, #4]
}
 8002776:	bf00      	nop
 8002778:	370c      	adds	r7, #12
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr

08002782 <LL_TIM_DisableMasterSlaveMode>:
  * @rmtoll SMCR         MSM           LL_TIM_DisableMasterSlaveMode
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_DisableMasterSlaveMode(TIM_TypeDef *TIMx)
{
 8002782:	b480      	push	{r7}
 8002784:	b083      	sub	sp, #12
 8002786:	af00      	add	r7, sp, #0
 8002788:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(TIMx->SMCR, TIM_SMCR_MSM);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	609a      	str	r2, [r3, #8]
}
 8002796:	bf00      	nop
 8002798:	370c      	adds	r7, #12
 800279a:	46bd      	mov	sp, r7
 800279c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a0:	4770      	bx	lr

080027a2 <LL_TIM_ConfigETR>:
  *         @arg @ref LL_TIM_ETR_FILTER_FDIV32_N8
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ConfigETR(TIM_TypeDef *TIMx, uint32_t ETRPolarity, uint32_t ETRPrescaler,
                                      uint32_t ETRFilter)
{
 80027a2:	b480      	push	{r7}
 80027a4:	b085      	sub	sp, #20
 80027a6:	af00      	add	r7, sp, #0
 80027a8:	60f8      	str	r0, [r7, #12]
 80027aa:	60b9      	str	r1, [r7, #8]
 80027ac:	607a      	str	r2, [r7, #4]
 80027ae:	603b      	str	r3, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_ETP | TIM_SMCR_ETPS | TIM_SMCR_ETF, ETRPolarity | ETRPrescaler | ETRFilter);
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	689b      	ldr	r3, [r3, #8]
 80027b4:	f423 423f 	bic.w	r2, r3, #48896	; 0xbf00
 80027b8:	68b9      	ldr	r1, [r7, #8]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	4319      	orrs	r1, r3
 80027be:	683b      	ldr	r3, [r7, #0]
 80027c0:	430b      	orrs	r3, r1
 80027c2:	431a      	orrs	r2, r3
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	609a      	str	r2, [r3, #8]
}
 80027c8:	bf00      	nop
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d2:	4770      	bx	lr

080027d4 <LL_TIM_SetOCRefClearInputSource>:
  *         @arg @ref LL_TIM_OCREF_CLR_INT_NC
  *         @arg @ref LL_TIM_OCREF_CLR_INT_ETR
  * @retval None
  */
__STATIC_INLINE void LL_TIM_SetOCRefClearInputSource(TIM_TypeDef *TIMx, uint32_t OCRefClearInputSource)
{
 80027d4:	b480      	push	{r7}
 80027d6:	b083      	sub	sp, #12
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
 80027dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->SMCR, TIM_SMCR_OCCS, OCRefClearInputSource);
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	689b      	ldr	r3, [r3, #8]
 80027e2:	f023 0208 	bic.w	r2, r3, #8
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	431a      	orrs	r2, r3
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	609a      	str	r2, [r3, #8]
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr
	...

080027fc <MX_TIM1_Init>:

/* USER CODE END 0 */

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b086      	sub	sp, #24
 8002800:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 8002802:	1d3b      	adds	r3, r7, #4
 8002804:	2200      	movs	r2, #0
 8002806:	601a      	str	r2, [r3, #0]
 8002808:	605a      	str	r2, [r3, #4]
 800280a:	609a      	str	r2, [r3, #8]
 800280c:	60da      	str	r2, [r3, #12]
 800280e:	611a      	str	r2, [r3, #16]

  /* Peripheral clock enable */
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_TIM1);
 8002810:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8002814:	f7ff fea0 	bl	8002558 <LL_APB2_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 15;
 8002818:	230f      	movs	r3, #15
 800281a:	80bb      	strh	r3, [r7, #4]
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 800281c:	2300      	movs	r3, #0
 800281e:	60bb      	str	r3, [r7, #8]
  TIM_InitStruct.Autoreload = 400;
 8002820:	f44f 73c8 	mov.w	r3, #400	; 0x190
 8002824:	60fb      	str	r3, [r7, #12]
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 8002826:	2300      	movs	r3, #0
 8002828:	613b      	str	r3, [r7, #16]
  TIM_InitStruct.RepetitionCounter = 0;
 800282a:	2300      	movs	r3, #0
 800282c:	617b      	str	r3, [r7, #20]
  LL_TIM_Init(TIM1, &TIM_InitStruct);
 800282e:	1d3b      	adds	r3, r7, #4
 8002830:	4619      	mov	r1, r3
 8002832:	480c      	ldr	r0, [pc, #48]	; (8002864 <MX_TIM1_Init+0x68>)
 8002834:	f001 fbd8 	bl	8003fe8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM1);
 8002838:	480a      	ldr	r0, [pc, #40]	; (8002864 <MX_TIM1_Init+0x68>)
 800283a:	f7ff fea5 	bl	8002588 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM1, LL_TIM_CLOCKSOURCE_INTERNAL);
 800283e:	2100      	movs	r1, #0
 8002840:	4808      	ldr	r0, [pc, #32]	; (8002864 <MX_TIM1_Init+0x68>)
 8002842:	f7ff ff63 	bl	800270c <LL_TIM_SetClockSource>
  LL_TIM_SetTriggerOutput(TIM1, LL_TIM_TRGO_RESET);
 8002846:	2100      	movs	r1, #0
 8002848:	4806      	ldr	r0, [pc, #24]	; (8002864 <MX_TIM1_Init+0x68>)
 800284a:	f7ff ff74 	bl	8002736 <LL_TIM_SetTriggerOutput>
  LL_TIM_SetTriggerOutput2(TIM1, LL_TIM_TRGO2_RESET);
 800284e:	2100      	movs	r1, #0
 8002850:	4804      	ldr	r0, [pc, #16]	; (8002864 <MX_TIM1_Init+0x68>)
 8002852:	f7ff ff83 	bl	800275c <LL_TIM_SetTriggerOutput2>
  LL_TIM_DisableMasterSlaveMode(TIM1);
 8002856:	4803      	ldr	r0, [pc, #12]	; (8002864 <MX_TIM1_Init+0x68>)
 8002858:	f7ff ff93 	bl	8002782 <LL_TIM_DisableMasterSlaveMode>

}
 800285c:	bf00      	nop
 800285e:	3718      	adds	r7, #24
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}
 8002864:	40012c00 	.word	0x40012c00

08002868 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b094      	sub	sp, #80	; 0x50
 800286c:	af00      	add	r7, sp, #0
  LL_TIM_InitTypeDef TIM_InitStruct = {0};
 800286e:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002872:	2200      	movs	r2, #0
 8002874:	601a      	str	r2, [r3, #0]
 8002876:	605a      	str	r2, [r3, #4]
 8002878:	609a      	str	r2, [r3, #8]
 800287a:	60da      	str	r2, [r3, #12]
 800287c:	611a      	str	r2, [r3, #16]
  LL_TIM_OC_InitTypeDef TIM_OC_InitStruct = {0};
 800287e:	f107 031c 	add.w	r3, r7, #28
 8002882:	2220      	movs	r2, #32
 8002884:	2100      	movs	r1, #0
 8002886:	4618      	mov	r0, r3
 8002888:	f002 f8c0 	bl	8004a0c <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288c:	1d3b      	adds	r3, r7, #4
 800288e:	2200      	movs	r2, #0
 8002890:	601a      	str	r2, [r3, #0]
 8002892:	605a      	str	r2, [r3, #4]
 8002894:	609a      	str	r2, [r3, #8]
 8002896:	60da      	str	r2, [r3, #12]
 8002898:	611a      	str	r2, [r3, #16]
 800289a:	615a      	str	r2, [r3, #20]
  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_TIM3);
 800289c:	2002      	movs	r0, #2
 800289e:	f7ff fe43 	bl	8002528 <LL_APB1_GRP1_EnableClock>

  TIM_InitStruct.Prescaler = 63;
 80028a2:	233f      	movs	r3, #63	; 0x3f
 80028a4:	87bb      	strh	r3, [r7, #60]	; 0x3c
  TIM_InitStruct.CounterMode = LL_TIM_COUNTERMODE_UP;
 80028a6:	2300      	movs	r3, #0
 80028a8:	643b      	str	r3, [r7, #64]	; 0x40
  TIM_InitStruct.Autoreload = 19999;
 80028aa:	f644 631f 	movw	r3, #19999	; 0x4e1f
 80028ae:	647b      	str	r3, [r7, #68]	; 0x44
  TIM_InitStruct.ClockDivision = LL_TIM_CLOCKDIVISION_DIV1;
 80028b0:	2300      	movs	r3, #0
 80028b2:	64bb      	str	r3, [r7, #72]	; 0x48
  LL_TIM_Init(TIM3, &TIM_InitStruct);
 80028b4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80028b8:	4619      	mov	r1, r3
 80028ba:	4847      	ldr	r0, [pc, #284]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028bc:	f001 fb94 	bl	8003fe8 <LL_TIM_Init>
  LL_TIM_DisableARRPreload(TIM3);
 80028c0:	4845      	ldr	r0, [pc, #276]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028c2:	f7ff fe61 	bl	8002588 <LL_TIM_DisableARRPreload>
  LL_TIM_SetClockSource(TIM3, LL_TIM_CLOCKSOURCE_INTERNAL);
 80028c6:	2100      	movs	r1, #0
 80028c8:	4843      	ldr	r0, [pc, #268]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028ca:	f7ff ff1f 	bl	800270c <LL_TIM_SetClockSource>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH1);
 80028ce:	2101      	movs	r1, #1
 80028d0:	4841      	ldr	r0, [pc, #260]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028d2:	f7ff febb 	bl	800264c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCMode = LL_TIM_OCMODE_PWM1;
 80028d6:	2360      	movs	r3, #96	; 0x60
 80028d8:	61fb      	str	r3, [r7, #28]
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 80028da:	2300      	movs	r3, #0
 80028dc:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 80028de:	2300      	movs	r3, #0
 80028e0:	627b      	str	r3, [r7, #36]	; 0x24
  TIM_OC_InitStruct.CompareValue = 1499;
 80028e2:	f240 53db 	movw	r3, #1499	; 0x5db
 80028e6:	62bb      	str	r3, [r7, #40]	; 0x28
  TIM_OC_InitStruct.OCPolarity = LL_TIM_OCPOLARITY_HIGH;
 80028e8:	2300      	movs	r3, #0
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH1, &TIM_OC_InitStruct);
 80028ec:	f107 031c 	add.w	r3, r7, #28
 80028f0:	461a      	mov	r2, r3
 80028f2:	2101      	movs	r1, #1
 80028f4:	4838      	ldr	r0, [pc, #224]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028f6:	f001 fc0b 	bl	8004110 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH1);
 80028fa:	2101      	movs	r1, #1
 80028fc:	4836      	ldr	r0, [pc, #216]	; (80029d8 <MX_TIM3_Init+0x170>)
 80028fe:	f7ff fe53 	bl	80025a8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH2);
 8002902:	2110      	movs	r1, #16
 8002904:	4834      	ldr	r0, [pc, #208]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002906:	f7ff fea1 	bl	800264c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 800290a:	2300      	movs	r3, #0
 800290c:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH2, &TIM_OC_InitStruct);
 8002912:	f107 031c 	add.w	r3, r7, #28
 8002916:	461a      	mov	r2, r3
 8002918:	2110      	movs	r1, #16
 800291a:	482f      	ldr	r0, [pc, #188]	; (80029d8 <MX_TIM3_Init+0x170>)
 800291c:	f001 fbf8 	bl	8004110 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH2);
 8002920:	2110      	movs	r1, #16
 8002922:	482d      	ldr	r0, [pc, #180]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002924:	f7ff fe40 	bl	80025a8 <LL_TIM_OC_DisableFast>
  LL_TIM_OC_EnablePreload(TIM3, LL_TIM_CHANNEL_CH4);
 8002928:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800292c:	482a      	ldr	r0, [pc, #168]	; (80029d8 <MX_TIM3_Init+0x170>)
 800292e:	f7ff fe8d 	bl	800264c <LL_TIM_OC_EnablePreload>
  TIM_OC_InitStruct.OCState = LL_TIM_OCSTATE_DISABLE;
 8002932:	2300      	movs	r3, #0
 8002934:	623b      	str	r3, [r7, #32]
  TIM_OC_InitStruct.OCNState = LL_TIM_OCSTATE_DISABLE;
 8002936:	2300      	movs	r3, #0
 8002938:	627b      	str	r3, [r7, #36]	; 0x24
  LL_TIM_OC_Init(TIM3, LL_TIM_CHANNEL_CH4, &TIM_OC_InitStruct);
 800293a:	f107 031c 	add.w	r3, r7, #28
 800293e:	461a      	mov	r2, r3
 8002940:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002944:	4824      	ldr	r0, [pc, #144]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002946:	f001 fbe3 	bl	8004110 <LL_TIM_OC_Init>
  LL_TIM_OC_DisableFast(TIM3, LL_TIM_CHANNEL_CH4);
 800294a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800294e:	4822      	ldr	r0, [pc, #136]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002950:	f7ff fe2a 	bl	80025a8 <LL_TIM_OC_DisableFast>
  LL_TIM_SetOCRefClearInputSource(TIM3, LL_TIM_OCREF_CLR_INT_NC);
 8002954:	2100      	movs	r1, #0
 8002956:	4820      	ldr	r0, [pc, #128]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002958:	f7ff ff3c 	bl	80027d4 <LL_TIM_SetOCRefClearInputSource>
  LL_TIM_DisableExternalClock(TIM3);
 800295c:	481e      	ldr	r0, [pc, #120]	; (80029d8 <MX_TIM3_Init+0x170>)
 800295e:	f7ff fec5 	bl	80026ec <LL_TIM_DisableExternalClock>
  LL_TIM_ConfigETR(TIM3, LL_TIM_ETR_POLARITY_NONINVERTED, LL_TIM_ETR_PRESCALER_DIV1, LL_TIM_ETR_FILTER_FDIV1);
 8002962:	2300      	movs	r3, #0
 8002964:	2200      	movs	r2, #0
 8002966:	2100      	movs	r1, #0
 8002968:	481b      	ldr	r0, [pc, #108]	; (80029d8 <MX_TIM3_Init+0x170>)
 800296a:	f7ff ff1a 	bl	80027a2 <LL_TIM_ConfigETR>
  LL_TIM_SetTriggerOutput(TIM3, LL_TIM_TRGO_RESET);
 800296e:	2100      	movs	r1, #0
 8002970:	4819      	ldr	r0, [pc, #100]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002972:	f7ff fee0 	bl	8002736 <LL_TIM_SetTriggerOutput>
  LL_TIM_DisableMasterSlaveMode(TIM3);
 8002976:	4818      	ldr	r0, [pc, #96]	; (80029d8 <MX_TIM3_Init+0x170>)
 8002978:	f7ff ff03 	bl	8002782 <LL_TIM_DisableMasterSlaveMode>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800297c:	2001      	movs	r0, #1
 800297e:	f7ff fdbb 	bl	80024f8 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8002982:	2002      	movs	r0, #2
 8002984:	f7ff fdb8 	bl	80024f8 <LL_AHB2_GRP1_EnableClock>
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PB1     ------> TIM3_CH4
    */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_6|LL_GPIO_PIN_7;
 8002988:	23c0      	movs	r3, #192	; 0xc0
 800298a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 800298c:	2302      	movs	r3, #2
 800298e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8002990:	2300      	movs	r3, #0
 8002992:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002994:	2300      	movs	r3, #0
 8002996:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002998:	2300      	movs	r3, #0
 800299a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029a0:	1d3b      	adds	r3, r7, #4
 80029a2:	4619      	mov	r1, r3
 80029a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80029a8:	f000 fdf1 	bl	800358e <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_1;
 80029ac:	2302      	movs	r3, #2
 80029ae:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 80029b0:	2302      	movs	r3, #2
 80029b2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 80029b8:	2300      	movs	r3, #0
 80029ba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 80029bc:	2300      	movs	r3, #0
 80029be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_2;
 80029c0:	2302      	movs	r3, #2
 80029c2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029c4:	1d3b      	adds	r3, r7, #4
 80029c6:	4619      	mov	r1, r3
 80029c8:	4804      	ldr	r0, [pc, #16]	; (80029dc <MX_TIM3_Init+0x174>)
 80029ca:	f000 fde0 	bl	800358e <LL_GPIO_Init>

}
 80029ce:	bf00      	nop
 80029d0:	3750      	adds	r7, #80	; 0x50
 80029d2:	46bd      	mov	sp, r7
 80029d4:	bd80      	pop	{r7, pc}
 80029d6:	bf00      	nop
 80029d8:	40000400 	.word	0x40000400
 80029dc:	48000400 	.word	0x48000400

080029e0 <__NVIC_GetPriorityGrouping>:
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <__NVIC_GetPriorityGrouping+0x18>)
 80029e6:	68db      	ldr	r3, [r3, #12]
 80029e8:	0a1b      	lsrs	r3, r3, #8
 80029ea:	f003 0307 	and.w	r3, r3, #7
}
 80029ee:	4618      	mov	r0, r3
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	e000ed00 	.word	0xe000ed00

080029fc <__NVIC_EnableIRQ>:
{
 80029fc:	b480      	push	{r7}
 80029fe:	b083      	sub	sp, #12
 8002a00:	af00      	add	r7, sp, #0
 8002a02:	4603      	mov	r3, r0
 8002a04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	db0b      	blt.n	8002a26 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a0e:	79fb      	ldrb	r3, [r7, #7]
 8002a10:	f003 021f 	and.w	r2, r3, #31
 8002a14:	4907      	ldr	r1, [pc, #28]	; (8002a34 <__NVIC_EnableIRQ+0x38>)
 8002a16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a1a:	095b      	lsrs	r3, r3, #5
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	fa00 f202 	lsl.w	r2, r0, r2
 8002a22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a26:	bf00      	nop
 8002a28:	370c      	adds	r7, #12
 8002a2a:	46bd      	mov	sp, r7
 8002a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a30:	4770      	bx	lr
 8002a32:	bf00      	nop
 8002a34:	e000e100 	.word	0xe000e100

08002a38 <__NVIC_SetPriority>:
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	4603      	mov	r3, r0
 8002a40:	6039      	str	r1, [r7, #0]
 8002a42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	db0a      	blt.n	8002a62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a4c:	683b      	ldr	r3, [r7, #0]
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	490c      	ldr	r1, [pc, #48]	; (8002a84 <__NVIC_SetPriority+0x4c>)
 8002a52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a56:	0112      	lsls	r2, r2, #4
 8002a58:	b2d2      	uxtb	r2, r2
 8002a5a:	440b      	add	r3, r1
 8002a5c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a60:	e00a      	b.n	8002a78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	b2da      	uxtb	r2, r3
 8002a66:	4908      	ldr	r1, [pc, #32]	; (8002a88 <__NVIC_SetPriority+0x50>)
 8002a68:	79fb      	ldrb	r3, [r7, #7]
 8002a6a:	f003 030f 	and.w	r3, r3, #15
 8002a6e:	3b04      	subs	r3, #4
 8002a70:	0112      	lsls	r2, r2, #4
 8002a72:	b2d2      	uxtb	r2, r2
 8002a74:	440b      	add	r3, r1
 8002a76:	761a      	strb	r2, [r3, #24]
}
 8002a78:	bf00      	nop
 8002a7a:	370c      	adds	r7, #12
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	e000e100 	.word	0xe000e100
 8002a88:	e000ed00 	.word	0xe000ed00

08002a8c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b089      	sub	sp, #36	; 0x24
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	60f8      	str	r0, [r7, #12]
 8002a94:	60b9      	str	r1, [r7, #8]
 8002a96:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	f003 0307 	and.w	r3, r3, #7
 8002a9e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002aa0:	69fb      	ldr	r3, [r7, #28]
 8002aa2:	f1c3 0307 	rsb	r3, r3, #7
 8002aa6:	2b04      	cmp	r3, #4
 8002aa8:	bf28      	it	cs
 8002aaa:	2304      	movcs	r3, #4
 8002aac:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	2b06      	cmp	r3, #6
 8002ab4:	d902      	bls.n	8002abc <NVIC_EncodePriority+0x30>
 8002ab6:	69fb      	ldr	r3, [r7, #28]
 8002ab8:	3b03      	subs	r3, #3
 8002aba:	e000      	b.n	8002abe <NVIC_EncodePriority+0x32>
 8002abc:	2300      	movs	r3, #0
 8002abe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8002aca:	43da      	mvns	r2, r3
 8002acc:	68bb      	ldr	r3, [r7, #8]
 8002ace:	401a      	ands	r2, r3
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ad4:	f04f 31ff 	mov.w	r1, #4294967295
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	fa01 f303 	lsl.w	r3, r1, r3
 8002ade:	43d9      	mvns	r1, r3
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ae4:	4313      	orrs	r3, r2
         );
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3724      	adds	r7, #36	; 0x24
 8002aea:	46bd      	mov	sp, r7
 8002aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af0:	4770      	bx	lr
	...

08002af4 <LL_AHB1_GRP1_EnableClock>:
{
 8002af4:	b480      	push	{r7}
 8002af6:	b085      	sub	sp, #20
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB1ENR, Periphs);
 8002afc:	4b08      	ldr	r3, [pc, #32]	; (8002b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002afe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b00:	4907      	ldr	r1, [pc, #28]	; (8002b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	648b      	str	r3, [r1, #72]	; 0x48
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 8002b08:	4b05      	ldr	r3, [pc, #20]	; (8002b20 <LL_AHB1_GRP1_EnableClock+0x2c>)
 8002b0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b12:	68fb      	ldr	r3, [r7, #12]
}
 8002b14:	bf00      	nop
 8002b16:	3714      	adds	r7, #20
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	40021000 	.word	0x40021000

08002b24 <LL_AHB2_GRP1_EnableClock>:
{
 8002b24:	b480      	push	{r7}
 8002b26:	b085      	sub	sp, #20
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8002b2c:	4b08      	ldr	r3, [pc, #32]	; (8002b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b2e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b30:	4907      	ldr	r1, [pc, #28]	; (8002b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	4313      	orrs	r3, r2
 8002b36:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8002b38:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8002b3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	4013      	ands	r3, r2
 8002b40:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b42:	68fb      	ldr	r3, [r7, #12]
}
 8002b44:	bf00      	nop
 8002b46:	3714      	adds	r7, #20
 8002b48:	46bd      	mov	sp, r7
 8002b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4e:	4770      	bx	lr
 8002b50:	40021000 	.word	0x40021000

08002b54 <LL_APB1_GRP1_EnableClock>:
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8002b5c:	4b08      	ldr	r3, [pc, #32]	; (8002b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b5e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b60:	4907      	ldr	r1, [pc, #28]	; (8002b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8002b68:	4b05      	ldr	r3, [pc, #20]	; (8002b80 <LL_APB1_GRP1_EnableClock+0x2c>)
 8002b6a:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4013      	ands	r3, r2
 8002b70:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8002b72:	68fb      	ldr	r3, [r7, #12]
}
 8002b74:	bf00      	nop
 8002b76:	3714      	adds	r7, #20
 8002b78:	46bd      	mov	sp, r7
 8002b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7e:	4770      	bx	lr
 8002b80:	40021000 	.word	0x40021000

08002b84 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 8002b84:	b480      	push	{r7}
 8002b86:	b083      	sub	sp, #12
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	601a      	str	r2, [r3, #0]
}
 8002b98:	bf00      	nop
 8002b9a:	370c      	adds	r7, #12
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba2:	4770      	bx	lr

08002ba4 <LL_USART_ConfigAsyncMode>:
  *         CR3          HDSEL         LL_USART_ConfigAsyncMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigAsyncMode(USART_TypeDef *USARTx)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	6078      	str	r0, [r7, #4]
  /* In Asynchronous mode, the following bits must be kept cleared:
  - LINEN, CLKEN bits in the USART_CR2 register,
  - SCEN, IREN and HDSEL bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	689b      	ldr	r3, [r3, #8]
 8002bbc:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
}
 8002bc4:	bf00      	nop
 8002bc6:	370c      	adds	r7, #12
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr

08002bd0 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b08e      	sub	sp, #56	; 0x38
 8002bd4:	af00      	add	r7, sp, #0
  LL_USART_InitTypeDef USART_InitStruct = {0};
 8002bd6:	f107 031c 	add.w	r3, r7, #28
 8002bda:	2200      	movs	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
 8002bde:	605a      	str	r2, [r3, #4]
 8002be0:	609a      	str	r2, [r3, #8]
 8002be2:	60da      	str	r2, [r3, #12]
 8002be4:	611a      	str	r2, [r3, #16]
 8002be6:	615a      	str	r2, [r3, #20]
 8002be8:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bea:	1d3b      	adds	r3, r7, #4
 8002bec:	2200      	movs	r2, #0
 8002bee:	601a      	str	r2, [r3, #0]
 8002bf0:	605a      	str	r2, [r3, #4]
 8002bf2:	609a      	str	r2, [r3, #8]
 8002bf4:	60da      	str	r2, [r3, #12]
 8002bf6:	611a      	str	r2, [r3, #16]
 8002bf8:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8002bfa:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002bfe:	f7ff ffa9 	bl	8002b54 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 8002c02:	2001      	movs	r0, #1
 8002c04:	f7ff ff8e 	bl	8002b24 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002c08:	230c      	movs	r3, #12
 8002c0a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8002c0c:	2302      	movs	r3, #2
 8002c0e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8002c10:	2303      	movs	r3, #3
 8002c12:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8002c14:	2300      	movs	r3, #0
 8002c16:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8002c18:	2300      	movs	r3, #0
 8002c1a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8002c1c:	2307      	movs	r3, #7
 8002c1e:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c20:	1d3b      	adds	r3, r7, #4
 8002c22:	4619      	mov	r1, r3
 8002c24:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002c28:	f000 fcb1 	bl	800358e <LL_GPIO_Init>

  USART_InitStruct.BaudRate = 921600;
 8002c2c:	f44f 2361 	mov.w	r3, #921600	; 0xe1000
 8002c30:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8002c32:	2300      	movs	r3, #0
 8002c34:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8002c36:	2300      	movs	r3, #0
 8002c38:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8002c3e:	230c      	movs	r3, #12
 8002c40:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 8002c42:	2300      	movs	r3, #0
 8002c44:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_8;
 8002c46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c4a:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 8002c4c:	f107 031c 	add.w	r3, r7, #28
 8002c50:	4619      	mov	r1, r3
 8002c52:	4806      	ldr	r0, [pc, #24]	; (8002c6c <MX_USART2_UART_Init+0x9c>)
 8002c54:	f001 fdd6 	bl	8004804 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <MX_USART2_UART_Init+0x9c>)
 8002c5a:	f7ff ffa3 	bl	8002ba4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 8002c5e:	4803      	ldr	r0, [pc, #12]	; (8002c6c <MX_USART2_UART_Init+0x9c>)
 8002c60:	f7ff ff90 	bl	8002b84 <LL_USART_Enable>

}
 8002c64:	bf00      	nop
 8002c66:	3738      	adds	r7, #56	; 0x38
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	bd80      	pop	{r7, pc}
 8002c6c:	40004400 	.word	0x40004400

08002c70 <__io_putchar>:

/* USER CODE BEGIN 1 */
void __io_putchar(int ch){
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
#if DEBUG_TO_CONSOLE
	// Wait until all data have been transmitted
	while(!(READ_BIT(USART2->ISR, USART_ISR_TXE)));
 8002c78:	bf00      	nop
 8002c7a:	4b0b      	ldr	r3, [pc, #44]	; (8002ca8 <__io_putchar+0x38>)
 8002c7c:	69db      	ldr	r3, [r3, #28]
 8002c7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d0f9      	beq.n	8002c7a <__io_putchar+0xa>
	// Write data to transmit register
	WRITE_REG(USART2->TDR, ch);
 8002c86:	4b08      	ldr	r3, [pc, #32]	; (8002ca8 <__io_putchar+0x38>)
 8002c88:	687a      	ldr	r2, [r7, #4]
 8002c8a:	b292      	uxth	r2, r2
 8002c8c:	851a      	strh	r2, [r3, #40]	; 0x28
	// Wait until transmission completed
	while(!(READ_BIT(USART2->ISR, USART_ISR_TC)));
 8002c8e:	bf00      	nop
 8002c90:	4b05      	ldr	r3, [pc, #20]	; (8002ca8 <__io_putchar+0x38>)
 8002c92:	69db      	ldr	r3, [r3, #28]
 8002c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d0f9      	beq.n	8002c90 <__io_putchar+0x20>
#endif
}
 8002c9c:	bf00      	nop
 8002c9e:	370c      	adds	r7, #12
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	40004400 	.word	0x40004400

08002cac <__io_getchar>:

void __io_getchar(void){
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
	// NOT IMPLEMENTED
}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <startupPrint>:

void startupPrint(void){
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	af00      	add	r7, sp, #0
	printf("\r\n");
 8002cc0:	480b      	ldr	r0, [pc, #44]	; (8002cf0 <startupPrint+0x34>)
 8002cc2:	f001 ff1f 	bl	8004b04 <puts>
	printf("+==============================================================+\r\n");
 8002cc6:	480b      	ldr	r0, [pc, #44]	; (8002cf4 <startupPrint+0x38>)
 8002cc8:	f001 ff1c 	bl	8004b04 <puts>
	printf("|%62.62s|\r\n", DESCRIPTION);
 8002ccc:	490a      	ldr	r1, [pc, #40]	; (8002cf8 <startupPrint+0x3c>)
 8002cce:	480b      	ldr	r0, [pc, #44]	; (8002cfc <startupPrint+0x40>)
 8002cd0:	f001 fea4 	bl	8004a1c <iprintf>
	printf("+--------------------+--------------------+--------------------+\r\n");
 8002cd4:	480a      	ldr	r0, [pc, #40]	; (8002d00 <startupPrint+0x44>)
 8002cd6:	f001 ff15 	bl	8004b04 <puts>
	printf("+ %18.18s | HW: %14.14s | VER.%14.14s |\r\n", "Rafael de la Rosa", HW, FIRM_VERSION);
 8002cda:	4b0a      	ldr	r3, [pc, #40]	; (8002d04 <startupPrint+0x48>)
 8002cdc:	4a0a      	ldr	r2, [pc, #40]	; (8002d08 <startupPrint+0x4c>)
 8002cde:	490b      	ldr	r1, [pc, #44]	; (8002d0c <startupPrint+0x50>)
 8002ce0:	480b      	ldr	r0, [pc, #44]	; (8002d10 <startupPrint+0x54>)
 8002ce2:	f001 fe9b 	bl	8004a1c <iprintf>
	printf("+==============================================================+\r\n\r\n");
 8002ce6:	480b      	ldr	r0, [pc, #44]	; (8002d14 <startupPrint+0x58>)
 8002ce8:	f001 ff0c 	bl	8004b04 <puts>
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	08005b3c 	.word	0x08005b3c
 8002cf4:	08005b40 	.word	0x08005b40
 8002cf8:	08005b84 	.word	0x08005b84
 8002cfc:	08005bac 	.word	0x08005bac
 8002d00:	08005bb8 	.word	0x08005bb8
 8002d04:	08005bfc 	.word	0x08005bfc
 8002d08:	08005c00 	.word	0x08005c00
 8002d0c:	08005c0c 	.word	0x08005c0c
 8002d10:	08005c20 	.word	0x08005c20
 8002d14:	08005c4c 	.word	0x08005c4c

08002d18 <configureDMA_USART_TX>:

void configureDMA_USART_TX(USART_TypeDef* USARTx, WordLenghtDMA_t wordLength, PriorityDMA_t priority){
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b086      	sub	sp, #24
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	460b      	mov	r3, r1
 8002d22:	70fb      	strb	r3, [r7, #3]
 8002d24:	4613      	mov	r3, r2
 8002d26:	70bb      	strb	r3, [r7, #2]

	__IO uint32_t temp = 0;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	60fb      	str	r3, [r7, #12]
	uint32_t mSize, pSize;

	priority = priority << DMA_CCR_PL_Pos;
 8002d2c:	2300      	movs	r3, #0
 8002d2e:	70bb      	strb	r3, [r7, #2]
	mSize = wordLength << DMA_CCR_MSIZE_Pos;
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	029b      	lsls	r3, r3, #10
 8002d34:	617b      	str	r3, [r7, #20]
	pSize = wordLength << DMA_CCR_PSIZE_Pos;
 8002d36:	78fb      	ldrb	r3, [r7, #3]
 8002d38:	021b      	lsls	r3, r3, #8
 8002d3a:	613b      	str	r3, [r7, #16]

	// DMAx channel configuration
	if(USARTx == USART2){
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <configureDMA_USART_TX+0x9c>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d132      	bne.n	8002daa <configureDMA_USART_TX+0x92>
		/* Enable clock for DMA1 controller */
		LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_DMA1);
 8002d44:	2001      	movs	r0, #1
 8002d46:	f7ff fed5 	bl	8002af4 <LL_AHB1_GRP1_EnableClock>

		/* Configure DMA mode transmission in USART_CR3*/
		SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	689b      	ldr	r3, [r3, #8]
 8002d4e:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	609a      	str	r2, [r3, #8]

		/* Configure the channel 7 which corresponds to USART2 peripheral */
		SET_BIT(DMA1_CSELR->CSELR, DMA_USART2_TX_REQ);
 8002d56:	4b18      	ldr	r3, [pc, #96]	; (8002db8 <configureDMA_USART_TX+0xa0>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a17      	ldr	r2, [pc, #92]	; (8002db8 <configureDMA_USART_TX+0xa0>)
 8002d5c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002d60:	6013      	str	r3, [r2, #0]

		/* Clear pending interrupts */
		SET_BIT(DMA1->IFCR, (DMA_IFCR_CGIF7 | DMA_IFCR_CHTIF7 | DMA_IFCR_CTCIF7 | DMA_IFCR_CTEIF7));
 8002d62:	4b16      	ldr	r3, [pc, #88]	; (8002dbc <configureDMA_USART_TX+0xa4>)
 8002d64:	685b      	ldr	r3, [r3, #4]
 8002d66:	4a15      	ldr	r2, [pc, #84]	; (8002dbc <configureDMA_USART_TX+0xa4>)
 8002d68:	f043 6370 	orr.w	r3, r3, #251658240	; 0xf000000
 8002d6c:	6053      	str	r3, [r2, #4]

		/* Configure DMA transference */
		DMA1_Channel7->CPAR =(__IO uint32_t) &(USART2->TDR);
 8002d6e:	4b14      	ldr	r3, [pc, #80]	; (8002dc0 <configureDMA_USART_TX+0xa8>)
 8002d70:	4a14      	ldr	r2, [pc, #80]	; (8002dc4 <configureDMA_USART_TX+0xac>)
 8002d72:	609a      	str	r2, [r3, #8]
		temp = priority | mSize | pSize | DMA_CCR_MINC | DMA_CCR_DIR | DMA_CCR_TCIE | DMA_CCR_TEIE;
 8002d74:	78ba      	ldrb	r2, [r7, #2]
 8002d76:	697b      	ldr	r3, [r7, #20]
 8002d78:	431a      	orrs	r2, r3
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	f043 039a 	orr.w	r3, r3, #154	; 0x9a
 8002d82:	60fb      	str	r3, [r7, #12]
		DMA1_Channel7->CCR = temp;
 8002d84:	4a0e      	ldr	r2, [pc, #56]	; (8002dc0 <configureDMA_USART_TX+0xa8>)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	6013      	str	r3, [r2, #0]

		NVIC_SetPriority(DMA1_Channel7_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8002d8a:	f7ff fe29 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002d8e:	4603      	mov	r3, r0
 8002d90:	2200      	movs	r2, #0
 8002d92:	2100      	movs	r1, #0
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7ff fe79 	bl	8002a8c <NVIC_EncodePriority>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4619      	mov	r1, r3
 8002d9e:	2011      	movs	r0, #17
 8002da0:	f7ff fe4a 	bl	8002a38 <__NVIC_SetPriority>
		NVIC_EnableIRQ(DMA1_Channel7_IRQn);
 8002da4:	2011      	movs	r0, #17
 8002da6:	f7ff fe29 	bl	80029fc <__NVIC_EnableIRQ>
	}
}
 8002daa:	bf00      	nop
 8002dac:	3718      	adds	r7, #24
 8002dae:	46bd      	mov	sp, r7
 8002db0:	bd80      	pop	{r7, pc}
 8002db2:	bf00      	nop
 8002db4:	40004400 	.word	0x40004400
 8002db8:	400200a8 	.word	0x400200a8
 8002dbc:	40020000 	.word	0x40020000
 8002dc0:	40020080 	.word	0x40020080
 8002dc4:	40004428 	.word	0x40004428

08002dc8 <configure_IRQ_USART_RX>:

void configure_IRQ_USART_RX(){
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	af00      	add	r7, sp, #0
	// Set RXNEIE to enable the RX interrupt
	SET_BIT(USART2->CR1, USART_CR1_RXNEIE);
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	; (8002dfc <configure_IRQ_USART_RX+0x34>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	; (8002dfc <configure_IRQ_USART_RX+0x34>)
 8002dd2:	f043 0320 	orr.w	r3, r3, #32
 8002dd6:	6013      	str	r3, [r2, #0]

	// Enable global interrupt for UART2
	NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(), 1, 0));
 8002dd8:	f7ff fe02 	bl	80029e0 <__NVIC_GetPriorityGrouping>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	2200      	movs	r2, #0
 8002de0:	2101      	movs	r1, #1
 8002de2:	4618      	mov	r0, r3
 8002de4:	f7ff fe52 	bl	8002a8c <NVIC_EncodePriority>
 8002de8:	4603      	mov	r3, r0
 8002dea:	4619      	mov	r1, r3
 8002dec:	2026      	movs	r0, #38	; 0x26
 8002dee:	f7ff fe23 	bl	8002a38 <__NVIC_SetPriority>
	NVIC_EnableIRQ(USART2_IRQn);
 8002df2:	2026      	movs	r0, #38	; 0x26
 8002df4:	f7ff fe02 	bl	80029fc <__NVIC_EnableIRQ>
}
 8002df8:	bf00      	nop
 8002dfa:	bd80      	pop	{r7, pc}
 8002dfc:	40004400 	.word	0x40004400

08002e00 <DMA1_Channel7_IRQHandler>:

void DMA1_Channel7_IRQHandler(void){
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
	/* Check the interrupt source*/
	if(READ_BIT(DMA1->ISR, DMA_ISR_TEIF7)){
 8002e04:	4b17      	ldr	r3, [pc, #92]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d006      	beq.n	8002e1e <DMA1_Channel7_IRQHandler+0x1e>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTEIF7);
 8002e10:	4b14      	ldr	r3, [pc, #80]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	4a13      	ldr	r2, [pc, #76]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e16:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002e1a:	6053      	str	r3, [r2, #4]
		while(1);
 8002e1c:	e7fe      	b.n	8002e1c <DMA1_Channel7_IRQHandler+0x1c>
	}
	if(READ_BIT(DMA1->ISR, DMA_ISR_TCIF7)){
 8002e1e:	4b11      	ldr	r3, [pc, #68]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00b      	beq.n	8002e42 <DMA1_Channel7_IRQHandler+0x42>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CTCIF7);
 8002e2a:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e2c:	685b      	ldr	r3, [r3, #4]
 8002e2e:	4a0d      	ldr	r2, [pc, #52]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e30:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002e34:	6053      	str	r3, [r2, #4]
		CLEAR_BIT(DMA1_Channel7->CCR, DMA_CCR_EN);
 8002e36:	4b0c      	ldr	r3, [pc, #48]	; (8002e68 <DMA1_Channel7_IRQHandler+0x68>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a0b      	ldr	r2, [pc, #44]	; (8002e68 <DMA1_Channel7_IRQHandler+0x68>)
 8002e3c:	f023 0301 	bic.w	r3, r3, #1
 8002e40:	6013      	str	r3, [r2, #0]
	}
	/* Clear Global interrupt status bit */
	if(READ_BIT(DMA1->ISR, DMA_ISR_GIF7)){
 8002e42:	4b08      	ldr	r3, [pc, #32]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d005      	beq.n	8002e5a <DMA1_Channel7_IRQHandler+0x5a>
		SET_BIT(DMA1->IFCR, DMA_IFCR_CGIF7);
 8002e4e:	4b05      	ldr	r3, [pc, #20]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e50:	685b      	ldr	r3, [r3, #4]
 8002e52:	4a04      	ldr	r2, [pc, #16]	; (8002e64 <DMA1_Channel7_IRQHandler+0x64>)
 8002e54:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002e58:	6053      	str	r3, [r2, #4]
	}
}
 8002e5a:	bf00      	nop
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr
 8002e64:	40020000 	.word	0x40020000
 8002e68:	40020080 	.word	0x40020080

08002e6c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8002e6c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002ea4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e70:	f7ff fb0c 	bl	800248c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8002e74:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8002e76:	e003      	b.n	8002e80 <LoopCopyDataInit>

08002e78 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8002e78:	4b0b      	ldr	r3, [pc, #44]	; (8002ea8 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8002e7a:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8002e7c:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8002e7e:	3104      	adds	r1, #4

08002e80 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8002e80:	480a      	ldr	r0, [pc, #40]	; (8002eac <LoopForever+0xa>)
	ldr	r3, =_edata
 8002e82:	4b0b      	ldr	r3, [pc, #44]	; (8002eb0 <LoopForever+0xe>)
	adds	r2, r0, r1
 8002e84:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8002e86:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8002e88:	d3f6      	bcc.n	8002e78 <CopyDataInit>
	ldr	r2, =_sbss
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <LoopForever+0x12>)
	b	LoopFillZerobss
 8002e8c:	e002      	b.n	8002e94 <LoopFillZerobss>

08002e8e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8002e8e:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8002e90:	f842 3b04 	str.w	r3, [r2], #4

08002e94 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8002e94:	4b08      	ldr	r3, [pc, #32]	; (8002eb8 <LoopForever+0x16>)
	cmp	r2, r3
 8002e96:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8002e98:	d3f9      	bcc.n	8002e8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9a:	f001 fd93 	bl	80049c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002e9e:	f7fe fe19 	bl	8001ad4 <main>

08002ea2 <LoopForever>:

LoopForever:
    b LoopForever
 8002ea2:	e7fe      	b.n	8002ea2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8002ea4:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8002ea8:	080068dc 	.word	0x080068dc
	ldr	r0, =_sdata
 8002eac:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8002eb0:	200005c4 	.word	0x200005c4
	ldr	r2, =_sbss
 8002eb4:	200005c8 	.word	0x200005c8
	ldr	r3, = _ebss
 8002eb8:	20000680 	.word	0x20000680

08002ebc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <ADC1_2_IRQHandler>
	...

08002ec0 <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 8002ec0:	b480      	push	{r7}
 8002ec2:	b083      	sub	sp, #12
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8002ec8:	4b05      	ldr	r3, [pc, #20]	; (8002ee0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002eca:	681a      	ldr	r2, [r3, #0]
 8002ecc:	4904      	ldr	r1, [pc, #16]	; (8002ee0 <LL_EXTI_EnableIT_0_31+0x20>)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	600b      	str	r3, [r1, #0]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40010400 	.word	0x40010400

08002ee4 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8002eec:	4b05      	ldr	r3, [pc, #20]	; (8002f04 <LL_EXTI_EnableIT_32_63+0x20>)
 8002eee:	6a1a      	ldr	r2, [r3, #32]
 8002ef0:	4904      	ldr	r1, [pc, #16]	; (8002f04 <LL_EXTI_EnableIT_32_63+0x20>)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	4313      	orrs	r3, r2
 8002ef6:	620b      	str	r3, [r1, #32]
}
 8002ef8:	bf00      	nop
 8002efa:	370c      	adds	r7, #12
 8002efc:	46bd      	mov	sp, r7
 8002efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f02:	4770      	bx	lr
 8002f04:	40010400 	.word	0x40010400

08002f08 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 8002f10:	4b06      	ldr	r3, [pc, #24]	; (8002f2c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f12:	681a      	ldr	r2, [r3, #0]
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	4904      	ldr	r1, [pc, #16]	; (8002f2c <LL_EXTI_DisableIT_0_31+0x24>)
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	600b      	str	r3, [r1, #0]
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr
 8002f2a:	bf00      	nop
 8002f2c:	40010400 	.word	0x40010400

08002f30 <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 8002f30:	b480      	push	{r7}
 8002f32:	b083      	sub	sp, #12
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 8002f38:	4b06      	ldr	r3, [pc, #24]	; (8002f54 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f3a:	6a1a      	ldr	r2, [r3, #32]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	43db      	mvns	r3, r3
 8002f40:	4904      	ldr	r1, [pc, #16]	; (8002f54 <LL_EXTI_DisableIT_32_63+0x24>)
 8002f42:	4013      	ands	r3, r2
 8002f44:	620b      	str	r3, [r1, #32]
}
 8002f46:	bf00      	nop
 8002f48:	370c      	adds	r7, #12
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f50:	4770      	bx	lr
 8002f52:	bf00      	nop
 8002f54:	40010400 	.word	0x40010400

08002f58 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 8002f58:	b480      	push	{r7}
 8002f5a:	b083      	sub	sp, #12
 8002f5c:	af00      	add	r7, sp, #0
 8002f5e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 8002f60:	4b05      	ldr	r3, [pc, #20]	; (8002f78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f62:	685a      	ldr	r2, [r3, #4]
 8002f64:	4904      	ldr	r1, [pc, #16]	; (8002f78 <LL_EXTI_EnableEvent_0_31+0x20>)
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	4313      	orrs	r3, r2
 8002f6a:	604b      	str	r3, [r1, #4]

}
 8002f6c:	bf00      	nop
 8002f6e:	370c      	adds	r7, #12
 8002f70:	46bd      	mov	sp, r7
 8002f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f76:	4770      	bx	lr
 8002f78:	40010400 	.word	0x40010400

08002f7c <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b083      	sub	sp, #12
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8002f84:	4b05      	ldr	r3, [pc, #20]	; (8002f9c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f86:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002f88:	4904      	ldr	r1, [pc, #16]	; (8002f9c <LL_EXTI_EnableEvent_32_63+0x20>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b083      	sub	sp, #12
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8002fa8:	4b06      	ldr	r3, [pc, #24]	; (8002fc4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002faa:	685a      	ldr	r2, [r3, #4]
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	4904      	ldr	r1, [pc, #16]	; (8002fc4 <LL_EXTI_DisableEvent_0_31+0x24>)
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	604b      	str	r3, [r1, #4]
}
 8002fb6:	bf00      	nop
 8002fb8:	370c      	adds	r7, #12
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc0:	4770      	bx	lr
 8002fc2:	bf00      	nop
 8002fc4:	40010400 	.word	0x40010400

08002fc8 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b083      	sub	sp, #12
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 8002fd0:	4b06      	ldr	r3, [pc, #24]	; (8002fec <LL_EXTI_DisableEvent_32_63+0x24>)
 8002fd2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	43db      	mvns	r3, r3
 8002fd8:	4904      	ldr	r1, [pc, #16]	; (8002fec <LL_EXTI_DisableEvent_32_63+0x24>)
 8002fda:	4013      	ands	r3, r2
 8002fdc:	624b      	str	r3, [r1, #36]	; 0x24
}
 8002fde:	bf00      	nop
 8002fe0:	370c      	adds	r7, #12
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40010400 	.word	0x40010400

08002ff0 <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 8002ff0:	b480      	push	{r7}
 8002ff2:	b083      	sub	sp, #12
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8002ff8:	4b05      	ldr	r3, [pc, #20]	; (8003010 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ffa:	689a      	ldr	r2, [r3, #8]
 8002ffc:	4904      	ldr	r1, [pc, #16]	; (8003010 <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	4313      	orrs	r3, r2
 8003002:	608b      	str	r3, [r1, #8]

}
 8003004:	bf00      	nop
 8003006:	370c      	adds	r7, #12
 8003008:	46bd      	mov	sp, r7
 800300a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300e:	4770      	bx	lr
 8003010:	40010400 	.word	0x40010400

08003014 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003014:	b480      	push	{r7}
 8003016:	b083      	sub	sp, #12
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 800301c:	4b05      	ldr	r3, [pc, #20]	; (8003034 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800301e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003020:	4904      	ldr	r1, [pc, #16]	; (8003034 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4313      	orrs	r3, r2
 8003026:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003028:	bf00      	nop
 800302a:	370c      	adds	r7, #12
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	40010400 	.word	0x40010400

08003038 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 8003038:	b480      	push	{r7}
 800303a:	b083      	sub	sp, #12
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 8003040:	4b06      	ldr	r3, [pc, #24]	; (800305c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 8003042:	689a      	ldr	r2, [r3, #8]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	43db      	mvns	r3, r3
 8003048:	4904      	ldr	r1, [pc, #16]	; (800305c <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 800304a:	4013      	ands	r3, r2
 800304c:	608b      	str	r3, [r1, #8]

}
 800304e:	bf00      	nop
 8003050:	370c      	adds	r7, #12
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40010400 	.word	0x40010400

08003060 <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 8003060:	b480      	push	{r7}
 8003062:	b083      	sub	sp, #12
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 8003068:	4b06      	ldr	r3, [pc, #24]	; (8003084 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 800306a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	43db      	mvns	r3, r3
 8003070:	4904      	ldr	r1, [pc, #16]	; (8003084 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 8003072:	4013      	ands	r3, r2
 8003074:	628b      	str	r3, [r1, #40]	; 0x28
}
 8003076:	bf00      	nop
 8003078:	370c      	adds	r7, #12
 800307a:	46bd      	mov	sp, r7
 800307c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003080:	4770      	bx	lr
 8003082:	bf00      	nop
 8003084:	40010400 	.word	0x40010400

08003088 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8003088:	b480      	push	{r7}
 800308a:	b083      	sub	sp, #12
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 8003090:	4b05      	ldr	r3, [pc, #20]	; (80030a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003092:	68da      	ldr	r2, [r3, #12]
 8003094:	4904      	ldr	r1, [pc, #16]	; (80030a8 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4313      	orrs	r3, r2
 800309a:	60cb      	str	r3, [r1, #12]
}
 800309c:	bf00      	nop
 800309e:	370c      	adds	r7, #12
 80030a0:	46bd      	mov	sp, r7
 80030a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a6:	4770      	bx	lr
 80030a8:	40010400 	.word	0x40010400

080030ac <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 80030ac:	b480      	push	{r7}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 80030b4:	4b05      	ldr	r3, [pc, #20]	; (80030cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	4904      	ldr	r1, [pc, #16]	; (80030cc <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	4313      	orrs	r3, r2
 80030be:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 80030c0:	bf00      	nop
 80030c2:	370c      	adds	r7, #12
 80030c4:	46bd      	mov	sp, r7
 80030c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ca:	4770      	bx	lr
 80030cc:	40010400 	.word	0x40010400

080030d0 <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 80030d8:	4b06      	ldr	r3, [pc, #24]	; (80030f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030da:	68da      	ldr	r2, [r3, #12]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	43db      	mvns	r3, r3
 80030e0:	4904      	ldr	r1, [pc, #16]	; (80030f4 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 80030e2:	4013      	ands	r3, r2
 80030e4:	60cb      	str	r3, [r1, #12]
}
 80030e6:	bf00      	nop
 80030e8:	370c      	adds	r7, #12
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	40010400 	.word	0x40010400

080030f8 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 8003100:	4b06      	ldr	r3, [pc, #24]	; (800311c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8003102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	43db      	mvns	r3, r3
 8003108:	4904      	ldr	r1, [pc, #16]	; (800311c <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800310a:	4013      	ands	r3, r2
 800310c:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	40010400 	.word	0x40010400

08003120 <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other calue : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 8003120:	b580      	push	{r7, lr}
 8003122:	b084      	sub	sp, #16
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 8003128:	2300      	movs	r3, #0
 800312a:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	7a1b      	ldrb	r3, [r3, #8]
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80c6 	beq.w	80032c2 <LL_EXTI_Init+0x1a2>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d05d      	beq.n	80031fa <LL_EXTI_Init+0xda>
    {
      switch (EXTI_InitStruct->Mode)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	7a5b      	ldrb	r3, [r3, #9]
 8003142:	2b01      	cmp	r3, #1
 8003144:	d00e      	beq.n	8003164 <LL_EXTI_Init+0x44>
 8003146:	2b02      	cmp	r3, #2
 8003148:	d017      	beq.n	800317a <LL_EXTI_Init+0x5a>
 800314a:	2b00      	cmp	r3, #0
 800314c:	d120      	bne.n	8003190 <LL_EXTI_Init+0x70>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	f7ff ff24 	bl	8002fa0 <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7ff feaf 	bl	8002ec0 <LL_EXTI_EnableIT_0_31>
          break;
 8003162:	e018      	b.n	8003196 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4618      	mov	r0, r3
 800316a:	f7ff fecd 	bl	8002f08 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4618      	mov	r0, r3
 8003174:	f7ff fef0 	bl	8002f58 <LL_EXTI_EnableEvent_0_31>
          break;
 8003178:	e00d      	b.n	8003196 <LL_EXTI_Init+0x76>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fe9e 	bl	8002ec0 <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	4618      	mov	r0, r3
 800318a:	f7ff fee5 	bl	8002f58 <LL_EXTI_EnableEvent_0_31>
          break;
 800318e:	e002      	b.n	8003196 <LL_EXTI_Init+0x76>
        default:
          status = 0x01u;
 8003190:	2301      	movs	r3, #1
 8003192:	60fb      	str	r3, [r7, #12]
          break;
 8003194:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	7a9b      	ldrb	r3, [r3, #10]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d02d      	beq.n	80031fa <LL_EXTI_Init+0xda>
      {
        switch (EXTI_InitStruct->Trigger)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	7a9b      	ldrb	r3, [r3, #10]
 80031a2:	2b02      	cmp	r3, #2
 80031a4:	d00e      	beq.n	80031c4 <LL_EXTI_Init+0xa4>
 80031a6:	2b03      	cmp	r3, #3
 80031a8:	d017      	beq.n	80031da <LL_EXTI_Init+0xba>
 80031aa:	2b01      	cmp	r3, #1
 80031ac:	d120      	bne.n	80031f0 <LL_EXTI_Init+0xd0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4618      	mov	r0, r3
 80031b4:	f7ff ff8c 	bl	80030d0 <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	681b      	ldr	r3, [r3, #0]
 80031bc:	4618      	mov	r0, r3
 80031be:	f7ff ff17 	bl	8002ff0 <LL_EXTI_EnableRisingTrig_0_31>
            break;
 80031c2:	e01b      	b.n	80031fc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7ff ff35 	bl	8003038 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	4618      	mov	r0, r3
 80031d4:	f7ff ff58 	bl	8003088 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031d8:	e010      	b.n	80031fc <LL_EXTI_Init+0xdc>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff06 	bl	8002ff0 <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f7ff ff4d 	bl	8003088 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 80031ee:	e005      	b.n	80031fc <LL_EXTI_Init+0xdc>
          default:
            status |= 0x02u;
 80031f0:	68fb      	ldr	r3, [r7, #12]
 80031f2:	f043 0302 	orr.w	r3, r3, #2
 80031f6:	60fb      	str	r3, [r7, #12]
            break;
 80031f8:	e000      	b.n	80031fc <LL_EXTI_Init+0xdc>
        }
      }
 80031fa:	bf00      	nop
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	2b00      	cmp	r3, #0
 8003202:	d073      	beq.n	80032ec <LL_EXTI_Init+0x1cc>
    {
      switch (EXTI_InitStruct->Mode)
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	7a5b      	ldrb	r3, [r3, #9]
 8003208:	2b01      	cmp	r3, #1
 800320a:	d00e      	beq.n	800322a <LL_EXTI_Init+0x10a>
 800320c:	2b02      	cmp	r3, #2
 800320e:	d017      	beq.n	8003240 <LL_EXTI_Init+0x120>
 8003210:	2b00      	cmp	r3, #0
 8003212:	d120      	bne.n	8003256 <LL_EXTI_Init+0x136>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	685b      	ldr	r3, [r3, #4]
 8003218:	4618      	mov	r0, r3
 800321a:	f7ff fed5 	bl	8002fc8 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	685b      	ldr	r3, [r3, #4]
 8003222:	4618      	mov	r0, r3
 8003224:	f7ff fe5e 	bl	8002ee4 <LL_EXTI_EnableIT_32_63>
          break;
 8003228:	e01a      	b.n	8003260 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	685b      	ldr	r3, [r3, #4]
 800322e:	4618      	mov	r0, r3
 8003230:	f7ff fe7e 	bl	8002f30 <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	4618      	mov	r0, r3
 800323a:	f7ff fe9f 	bl	8002f7c <LL_EXTI_EnableEvent_32_63>
          break;
 800323e:	e00f      	b.n	8003260 <LL_EXTI_Init+0x140>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	685b      	ldr	r3, [r3, #4]
 8003244:	4618      	mov	r0, r3
 8003246:	f7ff fe4d 	bl	8002ee4 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	4618      	mov	r0, r3
 8003250:	f7ff fe94 	bl	8002f7c <LL_EXTI_EnableEvent_32_63>
          break;
 8003254:	e004      	b.n	8003260 <LL_EXTI_Init+0x140>
        default:
          status |= 0x04u;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	60fb      	str	r3, [r7, #12]
          break;
 800325e:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	7a9b      	ldrb	r3, [r3, #10]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d041      	beq.n	80032ec <LL_EXTI_Init+0x1cc>
      {
        switch (EXTI_InitStruct->Trigger)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	7a9b      	ldrb	r3, [r3, #10]
 800326c:	2b02      	cmp	r3, #2
 800326e:	d00e      	beq.n	800328e <LL_EXTI_Init+0x16e>
 8003270:	2b03      	cmp	r3, #3
 8003272:	d017      	beq.n	80032a4 <LL_EXTI_Init+0x184>
 8003274:	2b01      	cmp	r3, #1
 8003276:	d120      	bne.n	80032ba <LL_EXTI_Init+0x19a>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	4618      	mov	r0, r3
 800327e:	f7ff ff3b 	bl	80030f8 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	4618      	mov	r0, r3
 8003288:	f7ff fec4 	bl	8003014 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 800328c:	e02f      	b.n	80032ee <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	4618      	mov	r0, r3
 8003294:	f7ff fee4 	bl	8003060 <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	685b      	ldr	r3, [r3, #4]
 800329c:	4618      	mov	r0, r3
 800329e:	f7ff ff05 	bl	80030ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80032a2:	e024      	b.n	80032ee <LL_EXTI_Init+0x1ce>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	4618      	mov	r0, r3
 80032aa:	f7ff feb3 	bl	8003014 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7ff fefa 	bl	80030ac <LL_EXTI_EnableFallingTrig_32_63>
            break;
 80032b8:	e019      	b.n	80032ee <LL_EXTI_Init+0x1ce>
          default:
            status = ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	60fb      	str	r3, [r7, #12]
            break;
 80032be:	bf00      	nop
 80032c0:	e015      	b.n	80032ee <LL_EXTI_Init+0x1ce>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fe1e 	bl	8002f08 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7ff fe65 	bl	8002fa0 <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7ff fe28 	bl	8002f30 <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fe6f 	bl	8002fc8 <LL_EXTI_DisableEvent_32_63>
 80032ea:	e000      	b.n	80032ee <LL_EXTI_Init+0x1ce>
      }
 80032ec:	bf00      	nop
  }

  return status;
 80032ee:	68fb      	ldr	r3, [r7, #12]
}
 80032f0:	4618      	mov	r0, r3
 80032f2:	3710      	adds	r7, #16
 80032f4:	46bd      	mov	sp, r7
 80032f6:	bd80      	pop	{r7, pc}

080032f8 <LL_GPIO_SetPinMode>:
{
 80032f8:	b480      	push	{r7}
 80032fa:	b08b      	sub	sp, #44	; 0x2c
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681a      	ldr	r2, [r3, #0]
 8003308:	68bb      	ldr	r3, [r7, #8]
 800330a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	697b      	ldr	r3, [r7, #20]
 800330e:	fa93 f3a3 	rbit	r3, r3
 8003312:	613b      	str	r3, [r7, #16]
  return result;
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 800331e:	2320      	movs	r3, #32
 8003320:	e003      	b.n	800332a <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8003322:	69bb      	ldr	r3, [r7, #24]
 8003324:	fab3 f383 	clz	r3, r3
 8003328:	b2db      	uxtb	r3, r3
 800332a:	005b      	lsls	r3, r3, #1
 800332c:	2103      	movs	r1, #3
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43db      	mvns	r3, r3
 8003334:	401a      	ands	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333a:	6a3b      	ldr	r3, [r7, #32]
 800333c:	fa93 f3a3 	rbit	r3, r3
 8003340:	61fb      	str	r3, [r7, #28]
  return result;
 8003342:	69fb      	ldr	r3, [r7, #28]
 8003344:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003346:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003348:	2b00      	cmp	r3, #0
 800334a:	d101      	bne.n	8003350 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 800334c:	2320      	movs	r3, #32
 800334e:	e003      	b.n	8003358 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8003350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003352:	fab3 f383 	clz	r3, r3
 8003356:	b2db      	uxtb	r3, r3
 8003358:	005b      	lsls	r3, r3, #1
 800335a:	6879      	ldr	r1, [r7, #4]
 800335c:	fa01 f303 	lsl.w	r3, r1, r3
 8003360:	431a      	orrs	r2, r3
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	601a      	str	r2, [r3, #0]
}
 8003366:	bf00      	nop
 8003368:	372c      	adds	r7, #44	; 0x2c
 800336a:	46bd      	mov	sp, r7
 800336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003370:	4770      	bx	lr

08003372 <LL_GPIO_SetPinOutputType>:
{
 8003372:	b480      	push	{r7}
 8003374:	b085      	sub	sp, #20
 8003376:	af00      	add	r7, sp, #0
 8003378:	60f8      	str	r0, [r7, #12]
 800337a:	60b9      	str	r1, [r7, #8]
 800337c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	685a      	ldr	r2, [r3, #4]
 8003382:	68bb      	ldr	r3, [r7, #8]
 8003384:	43db      	mvns	r3, r3
 8003386:	401a      	ands	r2, r3
 8003388:	68bb      	ldr	r3, [r7, #8]
 800338a:	6879      	ldr	r1, [r7, #4]
 800338c:	fb01 f303 	mul.w	r3, r1, r3
 8003390:	431a      	orrs	r2, r3
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	605a      	str	r2, [r3, #4]
}
 8003396:	bf00      	nop
 8003398:	3714      	adds	r7, #20
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr

080033a2 <LL_GPIO_SetPinSpeed>:
{
 80033a2:	b480      	push	{r7}
 80033a4:	b08b      	sub	sp, #44	; 0x2c
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	60f8      	str	r0, [r7, #12]
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	689a      	ldr	r2, [r3, #8]
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	fa93 f3a3 	rbit	r3, r3
 80033bc:	613b      	str	r3, [r7, #16]
  return result;
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80033c2:	69bb      	ldr	r3, [r7, #24]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d101      	bne.n	80033cc <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 80033c8:	2320      	movs	r3, #32
 80033ca:	e003      	b.n	80033d4 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	fab3 f383 	clz	r3, r3
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	005b      	lsls	r3, r3, #1
 80033d6:	2103      	movs	r1, #3
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	43db      	mvns	r3, r3
 80033de:	401a      	ands	r2, r3
 80033e0:	68bb      	ldr	r3, [r7, #8]
 80033e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
  return result;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e003      	b.n	8003402 <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	005b      	lsls	r3, r3, #1
 8003404:	6879      	ldr	r1, [r7, #4]
 8003406:	fa01 f303 	lsl.w	r3, r1, r3
 800340a:	431a      	orrs	r2, r3
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	609a      	str	r2, [r3, #8]
}
 8003410:	bf00      	nop
 8003412:	372c      	adds	r7, #44	; 0x2c
 8003414:	46bd      	mov	sp, r7
 8003416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341a:	4770      	bx	lr

0800341c <LL_GPIO_SetPinPull>:
{
 800341c:	b480      	push	{r7}
 800341e:	b08b      	sub	sp, #44	; 0x2c
 8003420:	af00      	add	r7, sp, #0
 8003422:	60f8      	str	r0, [r7, #12]
 8003424:	60b9      	str	r1, [r7, #8]
 8003426:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	68bb      	ldr	r3, [r7, #8]
 800342e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003430:	697b      	ldr	r3, [r7, #20]
 8003432:	fa93 f3a3 	rbit	r3, r3
 8003436:	613b      	str	r3, [r7, #16]
  return result;
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800343c:	69bb      	ldr	r3, [r7, #24]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d101      	bne.n	8003446 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8003442:	2320      	movs	r3, #32
 8003444:	e003      	b.n	800344e <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8003446:	69bb      	ldr	r3, [r7, #24]
 8003448:	fab3 f383 	clz	r3, r3
 800344c:	b2db      	uxtb	r3, r3
 800344e:	005b      	lsls	r3, r3, #1
 8003450:	2103      	movs	r1, #3
 8003452:	fa01 f303 	lsl.w	r3, r1, r3
 8003456:	43db      	mvns	r3, r3
 8003458:	401a      	ands	r2, r3
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800345e:	6a3b      	ldr	r3, [r7, #32]
 8003460:	fa93 f3a3 	rbit	r3, r3
 8003464:	61fb      	str	r3, [r7, #28]
  return result;
 8003466:	69fb      	ldr	r3, [r7, #28]
 8003468:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800346a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346c:	2b00      	cmp	r3, #0
 800346e:	d101      	bne.n	8003474 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8003470:	2320      	movs	r3, #32
 8003472:	e003      	b.n	800347c <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8003474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003476:	fab3 f383 	clz	r3, r3
 800347a:	b2db      	uxtb	r3, r3
 800347c:	005b      	lsls	r3, r3, #1
 800347e:	6879      	ldr	r1, [r7, #4]
 8003480:	fa01 f303 	lsl.w	r3, r1, r3
 8003484:	431a      	orrs	r2, r3
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	60da      	str	r2, [r3, #12]
}
 800348a:	bf00      	nop
 800348c:	372c      	adds	r7, #44	; 0x2c
 800348e:	46bd      	mov	sp, r7
 8003490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003494:	4770      	bx	lr

08003496 <LL_GPIO_SetAFPin_0_7>:
{
 8003496:	b480      	push	{r7}
 8003498:	b08b      	sub	sp, #44	; 0x2c
 800349a:	af00      	add	r7, sp, #0
 800349c:	60f8      	str	r0, [r7, #12]
 800349e:	60b9      	str	r1, [r7, #8]
 80034a0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	6a1a      	ldr	r2, [r3, #32]
 80034a6:	68bb      	ldr	r3, [r7, #8]
 80034a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034aa:	697b      	ldr	r3, [r7, #20]
 80034ac:	fa93 f3a3 	rbit	r3, r3
 80034b0:	613b      	str	r3, [r7, #16]
  return result;
 80034b2:	693b      	ldr	r3, [r7, #16]
 80034b4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d101      	bne.n	80034c0 <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 80034bc:	2320      	movs	r3, #32
 80034be:	e003      	b.n	80034c8 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	fab3 f383 	clz	r3, r3
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	009b      	lsls	r3, r3, #2
 80034ca:	210f      	movs	r1, #15
 80034cc:	fa01 f303 	lsl.w	r3, r1, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	401a      	ands	r2, r3
 80034d4:	68bb      	ldr	r3, [r7, #8]
 80034d6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d8:	6a3b      	ldr	r3, [r7, #32]
 80034da:	fa93 f3a3 	rbit	r3, r3
 80034de:	61fb      	str	r3, [r7, #28]
  return result;
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80034e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d101      	bne.n	80034ee <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 80034ea:	2320      	movs	r3, #32
 80034ec:	e003      	b.n	80034f6 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 80034ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f0:	fab3 f383 	clz	r3, r3
 80034f4:	b2db      	uxtb	r3, r3
 80034f6:	009b      	lsls	r3, r3, #2
 80034f8:	6879      	ldr	r1, [r7, #4]
 80034fa:	fa01 f303 	lsl.w	r3, r1, r3
 80034fe:	431a      	orrs	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	621a      	str	r2, [r3, #32]
}
 8003504:	bf00      	nop
 8003506:	372c      	adds	r7, #44	; 0x2c
 8003508:	46bd      	mov	sp, r7
 800350a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350e:	4770      	bx	lr

08003510 <LL_GPIO_SetAFPin_8_15>:
{
 8003510:	b480      	push	{r7}
 8003512:	b08b      	sub	sp, #44	; 0x2c
 8003514:	af00      	add	r7, sp, #0
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	60b9      	str	r1, [r7, #8]
 800351a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003520:	68bb      	ldr	r3, [r7, #8]
 8003522:	0a1b      	lsrs	r3, r3, #8
 8003524:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003526:	697b      	ldr	r3, [r7, #20]
 8003528:	fa93 f3a3 	rbit	r3, r3
 800352c:	613b      	str	r3, [r7, #16]
  return result;
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003532:	69bb      	ldr	r3, [r7, #24]
 8003534:	2b00      	cmp	r3, #0
 8003536:	d101      	bne.n	800353c <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8003538:	2320      	movs	r3, #32
 800353a:	e003      	b.n	8003544 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 800353c:	69bb      	ldr	r3, [r7, #24]
 800353e:	fab3 f383 	clz	r3, r3
 8003542:	b2db      	uxtb	r3, r3
 8003544:	009b      	lsls	r3, r3, #2
 8003546:	210f      	movs	r1, #15
 8003548:	fa01 f303 	lsl.w	r3, r1, r3
 800354c:	43db      	mvns	r3, r3
 800354e:	401a      	ands	r2, r3
 8003550:	68bb      	ldr	r3, [r7, #8]
 8003552:	0a1b      	lsrs	r3, r3, #8
 8003554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	61fb      	str	r3, [r7, #28]
  return result;
 800355e:	69fb      	ldr	r3, [r7, #28]
 8003560:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	2b00      	cmp	r3, #0
 8003566:	d101      	bne.n	800356c <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8003568:	2320      	movs	r3, #32
 800356a:	e003      	b.n	8003574 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	fab3 f383 	clz	r3, r3
 8003572:	b2db      	uxtb	r3, r3
 8003574:	009b      	lsls	r3, r3, #2
 8003576:	6879      	ldr	r1, [r7, #4]
 8003578:	fa01 f303 	lsl.w	r3, r1, r3
 800357c:	431a      	orrs	r2, r3
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003582:	bf00      	nop
 8003584:	372c      	adds	r7, #44	; 0x2c
 8003586:	46bd      	mov	sp, r7
 8003588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800358c:	4770      	bx	lr

0800358e <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b088      	sub	sp, #32
 8003592:	af00      	add	r7, sp, #0
 8003594:	6078      	str	r0, [r7, #4]
 8003596:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003598:	683b      	ldr	r3, [r7, #0]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	60fb      	str	r3, [r7, #12]
  return result;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 80035aa:	697b      	ldr	r3, [r7, #20]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d101      	bne.n	80035b4 <LL_GPIO_Init+0x26>
    return 32U;
 80035b0:	2320      	movs	r3, #32
 80035b2:	e003      	b.n	80035bc <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	fab3 f383 	clz	r3, r3
 80035ba:	b2db      	uxtb	r3, r3
 80035bc:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 80035be:	e040      	b.n	8003642 <LL_GPIO_Init+0xb4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	2101      	movs	r1, #1
 80035c6:	69fb      	ldr	r3, [r7, #28]
 80035c8:	fa01 f303 	lsl.w	r3, r1, r3
 80035cc:	4013      	ands	r3, r2
 80035ce:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 80035d0:	69bb      	ldr	r3, [r7, #24]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d032      	beq.n	800363c <LL_GPIO_Init+0xae>
    {
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	461a      	mov	r2, r3
 80035dc:	69b9      	ldr	r1, [r7, #24]
 80035de:	6878      	ldr	r0, [r7, #4]
 80035e0:	f7ff fe8a 	bl	80032f8 <LL_GPIO_SetPinMode>

      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d003      	beq.n	80035f4 <LL_GPIO_Init+0x66>
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	685b      	ldr	r3, [r3, #4]
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d106      	bne.n	8003602 <LL_GPIO_Init+0x74>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 80035f4:	683b      	ldr	r3, [r7, #0]
 80035f6:	689b      	ldr	r3, [r3, #8]
 80035f8:	461a      	mov	r2, r3
 80035fa:	69b9      	ldr	r1, [r7, #24]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f7ff fed0 	bl	80033a2 <LL_GPIO_SetPinSpeed>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	461a      	mov	r2, r3
 8003608:	69b9      	ldr	r1, [r7, #24]
 800360a:	6878      	ldr	r0, [r7, #4]
 800360c:	f7ff ff06 	bl	800341c <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003610:	683b      	ldr	r3, [r7, #0]
 8003612:	685b      	ldr	r3, [r3, #4]
 8003614:	2b02      	cmp	r3, #2
 8003616:	d111      	bne.n	800363c <LL_GPIO_Init+0xae>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	2bff      	cmp	r3, #255	; 0xff
 800361c:	d807      	bhi.n	800362e <LL_GPIO_Init+0xa0>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	695b      	ldr	r3, [r3, #20]
 8003622:	461a      	mov	r2, r3
 8003624:	69b9      	ldr	r1, [r7, #24]
 8003626:	6878      	ldr	r0, [r7, #4]
 8003628:	f7ff ff35 	bl	8003496 <LL_GPIO_SetAFPin_0_7>
 800362c:	e006      	b.n	800363c <LL_GPIO_Init+0xae>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	695b      	ldr	r3, [r3, #20]
 8003632:	461a      	mov	r2, r3
 8003634:	69b9      	ldr	r1, [r7, #24]
 8003636:	6878      	ldr	r0, [r7, #4]
 8003638:	f7ff ff6a 	bl	8003510 <LL_GPIO_SetAFPin_8_15>
        }
      }
    }
    pinpos++;
 800363c:	69fb      	ldr	r3, [r7, #28]
 800363e:	3301      	adds	r3, #1
 8003640:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	681a      	ldr	r2, [r3, #0]
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	fa22 f303 	lsr.w	r3, r2, r3
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1b7      	bne.n	80035c0 <LL_GPIO_Init+0x32>
  }

  if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b01      	cmp	r3, #1
 8003656:	d003      	beq.n	8003660 <LL_GPIO_Init+0xd2>
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685b      	ldr	r3, [r3, #4]
 800365c:	2b02      	cmp	r3, #2
 800365e:	d107      	bne.n	8003670 <LL_GPIO_Init+0xe2>
  {
    /* Check Output mode parameters */
    assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

    /* Output mode configuration*/
    LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	6819      	ldr	r1, [r3, #0]
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	461a      	mov	r2, r3
 800366a:	6878      	ldr	r0, [r7, #4]
 800366c:	f7ff fe81 	bl	8003372 <LL_GPIO_SetPinOutputType>

  }
  return (SUCCESS);
 8003670:	2300      	movs	r3, #0
}
 8003672:	4618      	mov	r0, r3
 8003674:	3720      	adds	r7, #32
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
	...

0800367c <LL_RCC_HSI_IsReady>:
{
 800367c:	b480      	push	{r7}
 800367e:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8003680:	4b07      	ldr	r3, [pc, #28]	; (80036a0 <LL_RCC_HSI_IsReady+0x24>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003688:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800368c:	d101      	bne.n	8003692 <LL_RCC_HSI_IsReady+0x16>
 800368e:	2301      	movs	r3, #1
 8003690:	e000      	b.n	8003694 <LL_RCC_HSI_IsReady+0x18>
 8003692:	2300      	movs	r3, #0
}
 8003694:	4618      	mov	r0, r3
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr
 800369e:	bf00      	nop
 80036a0:	40021000 	.word	0x40021000

080036a4 <LL_RCC_LSE_IsReady>:
{
 80036a4:	b480      	push	{r7}
 80036a6:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 80036a8:	4b07      	ldr	r3, [pc, #28]	; (80036c8 <LL_RCC_LSE_IsReady+0x24>)
 80036aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d101      	bne.n	80036ba <LL_RCC_LSE_IsReady+0x16>
 80036b6:	2301      	movs	r3, #1
 80036b8:	e000      	b.n	80036bc <LL_RCC_LSE_IsReady+0x18>
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr
 80036c6:	bf00      	nop
 80036c8:	40021000 	.word	0x40021000

080036cc <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 80036cc:	b480      	push	{r7}
 80036ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 80036d0:	4b06      	ldr	r3, [pc, #24]	; (80036ec <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	f003 0308 	and.w	r3, r3, #8
 80036d8:	2b08      	cmp	r3, #8
 80036da:	d101      	bne.n	80036e0 <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 80036dc:	2301      	movs	r3, #1
 80036de:	e000      	b.n	80036e2 <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 80036e0:	2300      	movs	r3, #0
}
 80036e2:	4618      	mov	r0, r3
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr
 80036ec:	40021000 	.word	0x40021000

080036f0 <LL_RCC_MSI_GetRange>:
{
 80036f0:	b480      	push	{r7}
 80036f2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 80036f4:	4b04      	ldr	r3, [pc, #16]	; (8003708 <LL_RCC_MSI_GetRange+0x18>)
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	40021000 	.word	0x40021000

0800370c <LL_RCC_MSI_GetRangeAfterStandby>:
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8003710:	4b04      	ldr	r3, [pc, #16]	; (8003724 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8003712:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003716:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 800371a:	4618      	mov	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	40021000 	.word	0x40021000

08003728 <LL_RCC_GetSysClkSource>:
{
 8003728:	b480      	push	{r7}
 800372a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 800372c:	4b04      	ldr	r3, [pc, #16]	; (8003740 <LL_RCC_GetSysClkSource+0x18>)
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	f003 030c 	and.w	r3, r3, #12
}
 8003734:	4618      	mov	r0, r3
 8003736:	46bd      	mov	sp, r7
 8003738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800373c:	4770      	bx	lr
 800373e:	bf00      	nop
 8003740:	40021000 	.word	0x40021000

08003744 <LL_RCC_GetAHBPrescaler>:
{
 8003744:	b480      	push	{r7}
 8003746:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003748:	4b04      	ldr	r3, [pc, #16]	; (800375c <LL_RCC_GetAHBPrescaler+0x18>)
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003750:	4618      	mov	r0, r3
 8003752:	46bd      	mov	sp, r7
 8003754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003758:	4770      	bx	lr
 800375a:	bf00      	nop
 800375c:	40021000 	.word	0x40021000

08003760 <LL_RCC_GetAPB1Prescaler>:
{
 8003760:	b480      	push	{r7}
 8003762:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003764:	4b04      	ldr	r3, [pc, #16]	; (8003778 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 800376c:	4618      	mov	r0, r3
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40021000 	.word	0x40021000

0800377c <LL_RCC_GetAPB2Prescaler>:
{
 800377c:	b480      	push	{r7}
 800377e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003780:	4b04      	ldr	r3, [pc, #16]	; (8003794 <LL_RCC_GetAPB2Prescaler+0x18>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8003788:	4618      	mov	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003790:	4770      	bx	lr
 8003792:	bf00      	nop
 8003794:	40021000 	.word	0x40021000

08003798 <LL_RCC_GetUSARTClockSource>:
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 80037a0:	4b06      	ldr	r3, [pc, #24]	; (80037bc <LL_RCC_GetUSARTClockSource+0x24>)
 80037a2:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	401a      	ands	r2, r3
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	041b      	lsls	r3, r3, #16
 80037ae:	4313      	orrs	r3, r2
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	370c      	adds	r7, #12
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr
 80037bc:	40021000 	.word	0x40021000

080037c0 <LL_RCC_GetUARTClockSource>:
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 80037c8:	4b06      	ldr	r3, [pc, #24]	; (80037e4 <LL_RCC_GetUARTClockSource+0x24>)
 80037ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	401a      	ands	r2, r3
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	041b      	lsls	r3, r3, #16
 80037d6:	4313      	orrs	r3, r2
}
 80037d8:	4618      	mov	r0, r3
 80037da:	370c      	adds	r7, #12
 80037dc:	46bd      	mov	sp, r7
 80037de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e2:	4770      	bx	lr
 80037e4:	40021000 	.word	0x40021000

080037e8 <LL_RCC_PLL_GetMainSource>:
{
 80037e8:	b480      	push	{r7}
 80037ea:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 80037ec:	4b04      	ldr	r3, [pc, #16]	; (8003800 <LL_RCC_PLL_GetMainSource+0x18>)
 80037ee:	68db      	ldr	r3, [r3, #12]
 80037f0:	f003 0303 	and.w	r3, r3, #3
}
 80037f4:	4618      	mov	r0, r3
 80037f6:	46bd      	mov	sp, r7
 80037f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037fc:	4770      	bx	lr
 80037fe:	bf00      	nop
 8003800:	40021000 	.word	0x40021000

08003804 <LL_RCC_PLL_GetN>:
{
 8003804:	b480      	push	{r7}
 8003806:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8003808:	4b04      	ldr	r3, [pc, #16]	; (800381c <LL_RCC_PLL_GetN+0x18>)
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	0a1b      	lsrs	r3, r3, #8
 800380e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 8003812:	4618      	mov	r0, r3
 8003814:	46bd      	mov	sp, r7
 8003816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800381a:	4770      	bx	lr
 800381c:	40021000 	.word	0x40021000

08003820 <LL_RCC_PLL_GetR>:
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8003824:	4b04      	ldr	r3, [pc, #16]	; (8003838 <LL_RCC_PLL_GetR+0x18>)
 8003826:	68db      	ldr	r3, [r3, #12]
 8003828:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 800382c:	4618      	mov	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003834:	4770      	bx	lr
 8003836:	bf00      	nop
 8003838:	40021000 	.word	0x40021000

0800383c <LL_RCC_PLL_GetDivider>:
{
 800383c:	b480      	push	{r7}
 800383e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8003840:	4b04      	ldr	r3, [pc, #16]	; (8003854 <LL_RCC_PLL_GetDivider+0x18>)
 8003842:	68db      	ldr	r3, [r3, #12]
 8003844:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 8003848:	4618      	mov	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003850:	4770      	bx	lr
 8003852:	bf00      	nop
 8003854:	40021000 	.word	0x40021000

08003858 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	b084      	sub	sp, #16
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003860:	2300      	movs	r3, #0
 8003862:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b03      	cmp	r3, #3
 8003868:	d137      	bne.n	80038da <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7ff ff94 	bl	8003798 <LL_RCC_GetUSARTClockSource>
 8003870:	4603      	mov	r3, r0
 8003872:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 8003876:	2b03      	cmp	r3, #3
 8003878:	f200 80b2 	bhi.w	80039e0 <LL_RCC_GetUSARTClockFreq+0x188>
 800387c:	a201      	add	r2, pc, #4	; (adr r2, 8003884 <LL_RCC_GetUSARTClockFreq+0x2c>)
 800387e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003882:	bf00      	nop
 8003884:	080038c3 	.word	0x080038c3
 8003888:	08003895 	.word	0x08003895
 800388c:	0800389d 	.word	0x0800389d
 8003890:	080038af 	.word	0x080038af
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8003894:	f000 f952 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003898:	60f8      	str	r0, [r7, #12]
        break;
 800389a:	e0b2      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800389c:	f7ff feee 	bl	800367c <LL_RCC_HSI_IsReady>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	f000 809e 	beq.w	80039e4 <LL_RCC_GetUSARTClockFreq+0x18c>
        {
          usart_frequency = HSI_VALUE;
 80038a8:	4b58      	ldr	r3, [pc, #352]	; (8003a0c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80038aa:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038ac:	e09a      	b.n	80039e4 <LL_RCC_GetUSARTClockFreq+0x18c>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80038ae:	f7ff fef9 	bl	80036a4 <LL_RCC_LSE_IsReady>
 80038b2:	4603      	mov	r3, r0
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	f000 8097 	beq.w	80039e8 <LL_RCC_GetUSARTClockFreq+0x190>
        {
          usart_frequency = LSE_VALUE;
 80038ba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038be:	60fb      	str	r3, [r7, #12]
        }
        break;
 80038c0:	e092      	b.n	80039e8 <LL_RCC_GetUSARTClockFreq+0x190>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80038c2:	f000 f93b 	bl	8003b3c <RCC_GetSystemClockFreq>
 80038c6:	4603      	mov	r3, r0
 80038c8:	4618      	mov	r0, r3
 80038ca:	f000 f9c7 	bl	8003c5c <RCC_GetHCLKClockFreq>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f000 f9ed 	bl	8003cb0 <RCC_GetPCLK2ClockFreq>
 80038d6:	60f8      	str	r0, [r7, #12]
        break;
 80038d8:	e093      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	2b0c      	cmp	r3, #12
 80038de:	d146      	bne.n	800396e <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f7ff ff59 	bl	8003798 <LL_RCC_GetUSARTClockSource>
 80038e6:	4603      	mov	r3, r0
 80038e8:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 80038ec:	2b0c      	cmp	r3, #12
 80038ee:	d87d      	bhi.n	80039ec <LL_RCC_GetUSARTClockFreq+0x194>
 80038f0:	a201      	add	r2, pc, #4	; (adr r2, 80038f8 <LL_RCC_GetUSARTClockFreq+0xa0>)
 80038f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80038f6:	bf00      	nop
 80038f8:	08003957 	.word	0x08003957
 80038fc:	080039ed 	.word	0x080039ed
 8003900:	080039ed 	.word	0x080039ed
 8003904:	080039ed 	.word	0x080039ed
 8003908:	0800392d 	.word	0x0800392d
 800390c:	080039ed 	.word	0x080039ed
 8003910:	080039ed 	.word	0x080039ed
 8003914:	080039ed 	.word	0x080039ed
 8003918:	08003935 	.word	0x08003935
 800391c:	080039ed 	.word	0x080039ed
 8003920:	080039ed 	.word	0x080039ed
 8003924:	080039ed 	.word	0x080039ed
 8003928:	08003945 	.word	0x08003945
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 800392c:	f000 f906 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003930:	60f8      	str	r0, [r7, #12]
        break;
 8003932:	e066      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8003934:	f7ff fea2 	bl	800367c <LL_RCC_HSI_IsReady>
 8003938:	4603      	mov	r3, r0
 800393a:	2b00      	cmp	r3, #0
 800393c:	d058      	beq.n	80039f0 <LL_RCC_GetUSARTClockFreq+0x198>
        {
          usart_frequency = HSI_VALUE;
 800393e:	4b33      	ldr	r3, [pc, #204]	; (8003a0c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 8003940:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003942:	e055      	b.n	80039f0 <LL_RCC_GetUSARTClockFreq+0x198>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 8003944:	f7ff feae 	bl	80036a4 <LL_RCC_LSE_IsReady>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d052      	beq.n	80039f4 <LL_RCC_GetUSARTClockFreq+0x19c>
        {
          usart_frequency = LSE_VALUE;
 800394e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003952:	60fb      	str	r3, [r7, #12]
        }
        break;
 8003954:	e04e      	b.n	80039f4 <LL_RCC_GetUSARTClockFreq+0x19c>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003956:	f000 f8f1 	bl	8003b3c <RCC_GetSystemClockFreq>
 800395a:	4603      	mov	r3, r0
 800395c:	4618      	mov	r0, r3
 800395e:	f000 f97d 	bl	8003c5c <RCC_GetHCLKClockFreq>
 8003962:	4603      	mov	r3, r0
 8003964:	4618      	mov	r0, r3
 8003966:	f000 f98f 	bl	8003c88 <RCC_GetPCLK1ClockFreq>
 800396a:	60f8      	str	r0, [r7, #12]
        break;
 800396c:	e049      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2b30      	cmp	r3, #48	; 0x30
 8003972:	d141      	bne.n	80039f8 <LL_RCC_GetUSARTClockFreq+0x1a0>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003974:	6878      	ldr	r0, [r7, #4]
 8003976:	f7ff ff0f 	bl	8003798 <LL_RCC_GetUSARTClockSource>
 800397a:	4603      	mov	r3, r0
 800397c:	4a24      	ldr	r2, [pc, #144]	; (8003a10 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 800397e:	4293      	cmp	r3, r2
 8003980:	d00d      	beq.n	800399e <LL_RCC_GetUSARTClockFreq+0x146>
 8003982:	4a23      	ldr	r2, [pc, #140]	; (8003a10 <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d803      	bhi.n	8003990 <LL_RCC_GetUSARTClockFreq+0x138>
 8003988:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800398c:	d01c      	beq.n	80039c8 <LL_RCC_GetUSARTClockFreq+0x170>
        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
          break;

        default:
          break;
 800398e:	e038      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 8003990:	4a20      	ldr	r2, [pc, #128]	; (8003a14 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8003992:	4293      	cmp	r3, r2
 8003994:	d007      	beq.n	80039a6 <LL_RCC_GetUSARTClockFreq+0x14e>
 8003996:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 800399a:	d00c      	beq.n	80039b6 <LL_RCC_GetUSARTClockFreq+0x15e>
          break;
 800399c:	e031      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
          usart_frequency = RCC_GetSystemClockFreq();
 800399e:	f000 f8cd 	bl	8003b3c <RCC_GetSystemClockFreq>
 80039a2:	60f8      	str	r0, [r7, #12]
          break;
 80039a4:	e02d      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
          if (LL_RCC_HSI_IsReady() != 0U)
 80039a6:	f7ff fe69 	bl	800367c <LL_RCC_HSI_IsReady>
 80039aa:	4603      	mov	r3, r0
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d025      	beq.n	80039fc <LL_RCC_GetUSARTClockFreq+0x1a4>
            usart_frequency = HSI_VALUE;
 80039b0:	4b16      	ldr	r3, [pc, #88]	; (8003a0c <LL_RCC_GetUSARTClockFreq+0x1b4>)
 80039b2:	60fb      	str	r3, [r7, #12]
          break;
 80039b4:	e022      	b.n	80039fc <LL_RCC_GetUSARTClockFreq+0x1a4>
          if (LL_RCC_LSE_IsReady() != 0U)
 80039b6:	f7ff fe75 	bl	80036a4 <LL_RCC_LSE_IsReady>
 80039ba:	4603      	mov	r3, r0
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d01f      	beq.n	8003a00 <LL_RCC_GetUSARTClockFreq+0x1a8>
            usart_frequency = LSE_VALUE;
 80039c0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039c4:	60fb      	str	r3, [r7, #12]
          break;
 80039c6:	e01b      	b.n	8003a00 <LL_RCC_GetUSARTClockFreq+0x1a8>
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80039c8:	f000 f8b8 	bl	8003b3c <RCC_GetSystemClockFreq>
 80039cc:	4603      	mov	r3, r0
 80039ce:	4618      	mov	r0, r3
 80039d0:	f000 f944 	bl	8003c5c <RCC_GetHCLKClockFreq>
 80039d4:	4603      	mov	r3, r0
 80039d6:	4618      	mov	r0, r3
 80039d8:	f000 f956 	bl	8003c88 <RCC_GetPCLK1ClockFreq>
 80039dc:	60f8      	str	r0, [r7, #12]
          break;
 80039de:	e010      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039e0:	bf00      	nop
 80039e2:	e00e      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039e4:	bf00      	nop
 80039e6:	e00c      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039e8:	bf00      	nop
 80039ea:	e00a      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039ec:	bf00      	nop
 80039ee:	e008      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039f0:	bf00      	nop
 80039f2:	e006      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
        break;
 80039f4:	bf00      	nop
 80039f6:	e004      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
      }
    }
 80039f8:	bf00      	nop
 80039fa:	e002      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 80039fc:	bf00      	nop
 80039fe:	e000      	b.n	8003a02 <LL_RCC_GetUSARTClockFreq+0x1aa>
          break;
 8003a00:	bf00      	nop
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8003a02:	68fb      	ldr	r3, [r7, #12]
}
 8003a04:	4618      	mov	r0, r3
 8003a06:	3710      	adds	r7, #16
 8003a08:	46bd      	mov	sp, r7
 8003a0a:	bd80      	pop	{r7, pc}
 8003a0c:	00f42400 	.word	0x00f42400
 8003a10:	00300010 	.word	0x00300010
 8003a14:	00300020 	.word	0x00300020

08003a18 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	2bc0      	cmp	r3, #192	; 0xc0
 8003a28:	d135      	bne.n	8003a96 <LL_RCC_GetUARTClockFreq+0x7e>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003a2a:	6878      	ldr	r0, [r7, #4]
 8003a2c:	f7ff fec8 	bl	80037c0 <LL_RCC_GetUARTClockSource>
 8003a30:	4603      	mov	r3, r0
 8003a32:	4a3d      	ldr	r2, [pc, #244]	; (8003b28 <LL_RCC_GetUARTClockFreq+0x110>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00d      	beq.n	8003a54 <LL_RCC_GetUARTClockFreq+0x3c>
 8003a38:	4a3b      	ldr	r2, [pc, #236]	; (8003b28 <LL_RCC_GetUARTClockFreq+0x110>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d803      	bhi.n	8003a46 <LL_RCC_GetUARTClockFreq+0x2e>
 8003a3e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003a42:	d01c      	beq.n	8003a7e <LL_RCC_GetUARTClockFreq+0x66>
      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8003a44:	e02c      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003a46:	4a39      	ldr	r2, [pc, #228]	; (8003b2c <LL_RCC_GetUARTClockFreq+0x114>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d007      	beq.n	8003a5c <LL_RCC_GetUARTClockFreq+0x44>
 8003a4c:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 8003a50:	d00c      	beq.n	8003a6c <LL_RCC_GetUARTClockFreq+0x54>
        break;
 8003a52:	e025      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
        uart_frequency = RCC_GetSystemClockFreq();
 8003a54:	f000 f872 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003a58:	60f8      	str	r0, [r7, #12]
        break;
 8003a5a:	e021      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003a5c:	f7ff fe0e 	bl	800367c <LL_RCC_HSI_IsReady>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d019      	beq.n	8003a9a <LL_RCC_GetUARTClockFreq+0x82>
          uart_frequency = HSI_VALUE;
 8003a66:	4b32      	ldr	r3, [pc, #200]	; (8003b30 <LL_RCC_GetUARTClockFreq+0x118>)
 8003a68:	60fb      	str	r3, [r7, #12]
        break;
 8003a6a:	e016      	b.n	8003a9a <LL_RCC_GetUARTClockFreq+0x82>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003a6c:	f7ff fe1a 	bl	80036a4 <LL_RCC_LSE_IsReady>
 8003a70:	4603      	mov	r3, r0
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d013      	beq.n	8003a9e <LL_RCC_GetUARTClockFreq+0x86>
          uart_frequency = LSE_VALUE;
 8003a76:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7a:	60fb      	str	r3, [r7, #12]
        break;
 8003a7c:	e00f      	b.n	8003a9e <LL_RCC_GetUARTClockFreq+0x86>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003a7e:	f000 f85d 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003a82:	4603      	mov	r3, r0
 8003a84:	4618      	mov	r0, r3
 8003a86:	f000 f8e9 	bl	8003c5c <RCC_GetHCLKClockFreq>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f000 f8fb 	bl	8003c88 <RCC_GetPCLK1ClockFreq>
 8003a92:	60f8      	str	r0, [r7, #12]
        break;
 8003a94:	e004      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
    }
  }
 8003a96:	bf00      	nop
 8003a98:	e002      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003a9a:	bf00      	nop
 8003a9c:	e000      	b.n	8003aa0 <LL_RCC_GetUARTClockFreq+0x88>
        break;
 8003a9e:	bf00      	nop
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003aa6:	d135      	bne.n	8003b14 <LL_RCC_GetUARTClockFreq+0xfc>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003aa8:	6878      	ldr	r0, [r7, #4]
 8003aaa:	f7ff fe89 	bl	80037c0 <LL_RCC_GetUARTClockSource>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	4a20      	ldr	r2, [pc, #128]	; (8003b34 <LL_RCC_GetUARTClockFreq+0x11c>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00d      	beq.n	8003ad2 <LL_RCC_GetUARTClockFreq+0xba>
 8003ab6:	4a1f      	ldr	r2, [pc, #124]	; (8003b34 <LL_RCC_GetUARTClockFreq+0x11c>)
 8003ab8:	4293      	cmp	r3, r2
 8003aba:	d803      	bhi.n	8003ac4 <LL_RCC_GetUARTClockFreq+0xac>
 8003abc:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8003ac0:	d01c      	beq.n	8003afc <LL_RCC_GetUARTClockFreq+0xe4>
      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
        break;

      default:
        break;
 8003ac2:	e02c      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 8003ac4:	4a1c      	ldr	r2, [pc, #112]	; (8003b38 <LL_RCC_GetUARTClockFreq+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <LL_RCC_GetUARTClockFreq+0xc2>
 8003aca:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8003ace:	d00c      	beq.n	8003aea <LL_RCC_GetUARTClockFreq+0xd2>
        break;
 8003ad0:	e025      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
        uart_frequency = RCC_GetSystemClockFreq();
 8003ad2:	f000 f833 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003ad6:	60f8      	str	r0, [r7, #12]
        break;
 8003ad8:	e021      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
        if (LL_RCC_HSI_IsReady() != 0U)
 8003ada:	f7ff fdcf 	bl	800367c <LL_RCC_HSI_IsReady>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d019      	beq.n	8003b18 <LL_RCC_GetUARTClockFreq+0x100>
          uart_frequency = HSI_VALUE;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <LL_RCC_GetUARTClockFreq+0x118>)
 8003ae6:	60fb      	str	r3, [r7, #12]
        break;
 8003ae8:	e016      	b.n	8003b18 <LL_RCC_GetUARTClockFreq+0x100>
        if (LL_RCC_LSE_IsReady() != 0U)
 8003aea:	f7ff fddb 	bl	80036a4 <LL_RCC_LSE_IsReady>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d013      	beq.n	8003b1c <LL_RCC_GetUARTClockFreq+0x104>
          uart_frequency = LSE_VALUE;
 8003af4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af8:	60fb      	str	r3, [r7, #12]
        break;
 8003afa:	e00f      	b.n	8003b1c <LL_RCC_GetUARTClockFreq+0x104>
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8003afc:	f000 f81e 	bl	8003b3c <RCC_GetSystemClockFreq>
 8003b00:	4603      	mov	r3, r0
 8003b02:	4618      	mov	r0, r3
 8003b04:	f000 f8aa 	bl	8003c5c <RCC_GetHCLKClockFreq>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	4618      	mov	r0, r3
 8003b0c:	f000 f8bc 	bl	8003c88 <RCC_GetPCLK1ClockFreq>
 8003b10:	60f8      	str	r0, [r7, #12]
        break;
 8003b12:	e004      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
    }
  }
 8003b14:	bf00      	nop
 8003b16:	e002      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003b18:	bf00      	nop
 8003b1a:	e000      	b.n	8003b1e <LL_RCC_GetUARTClockFreq+0x106>
        break;
 8003b1c:	bf00      	nop
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 8003b1e:	68fb      	ldr	r3, [r7, #12]
}
 8003b20:	4618      	mov	r0, r3
 8003b22:	3710      	adds	r7, #16
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	00c00040 	.word	0x00c00040
 8003b2c:	00c00080 	.word	0x00c00080
 8003b30:	00f42400 	.word	0x00f42400
 8003b34:	03000100 	.word	0x03000100
 8003b38:	03000200 	.word	0x03000200

08003b3c <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b082      	sub	sp, #8
 8003b40:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 8003b42:	f7ff fdf1 	bl	8003728 <LL_RCC_GetSysClkSource>
 8003b46:	4603      	mov	r3, r0
 8003b48:	2b0c      	cmp	r3, #12
 8003b4a:	d851      	bhi.n	8003bf0 <RCC_GetSystemClockFreq+0xb4>
 8003b4c:	a201      	add	r2, pc, #4	; (adr r2, 8003b54 <RCC_GetSystemClockFreq+0x18>)
 8003b4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b52:	bf00      	nop
 8003b54:	08003b89 	.word	0x08003b89
 8003b58:	08003bf1 	.word	0x08003bf1
 8003b5c:	08003bf1 	.word	0x08003bf1
 8003b60:	08003bf1 	.word	0x08003bf1
 8003b64:	08003bdd 	.word	0x08003bdd
 8003b68:	08003bf1 	.word	0x08003bf1
 8003b6c:	08003bf1 	.word	0x08003bf1
 8003b70:	08003bf1 	.word	0x08003bf1
 8003b74:	08003be3 	.word	0x08003be3
 8003b78:	08003bf1 	.word	0x08003bf1
 8003b7c:	08003bf1 	.word	0x08003bf1
 8003b80:	08003bf1 	.word	0x08003bf1
 8003b84:	08003be9 	.word	0x08003be9
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003b88:	f7ff fda0 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b8c:	4603      	mov	r3, r0
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d111      	bne.n	8003bb6 <RCC_GetSystemClockFreq+0x7a>
 8003b92:	f7ff fd9b 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d004      	beq.n	8003ba6 <RCC_GetSystemClockFreq+0x6a>
 8003b9c:	f7ff fda8 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003ba0:	4603      	mov	r3, r0
 8003ba2:	0a1b      	lsrs	r3, r3, #8
 8003ba4:	e003      	b.n	8003bae <RCC_GetSystemClockFreq+0x72>
 8003ba6:	f7ff fdb1 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003baa:	4603      	mov	r3, r0
 8003bac:	0a1b      	lsrs	r3, r3, #8
 8003bae:	4a28      	ldr	r2, [pc, #160]	; (8003c50 <RCC_GetSystemClockFreq+0x114>)
 8003bb0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bb4:	e010      	b.n	8003bd8 <RCC_GetSystemClockFreq+0x9c>
 8003bb6:	f7ff fd89 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d004      	beq.n	8003bca <RCC_GetSystemClockFreq+0x8e>
 8003bc0:	f7ff fd96 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	091b      	lsrs	r3, r3, #4
 8003bc8:	e003      	b.n	8003bd2 <RCC_GetSystemClockFreq+0x96>
 8003bca:	f7ff fd9f 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003bce:	4603      	mov	r3, r0
 8003bd0:	091b      	lsrs	r3, r3, #4
 8003bd2:	4a1f      	ldr	r2, [pc, #124]	; (8003c50 <RCC_GetSystemClockFreq+0x114>)
 8003bd4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003bd8:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003bda:	e033      	b.n	8003c44 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8003bdc:	4b1d      	ldr	r3, [pc, #116]	; (8003c54 <RCC_GetSystemClockFreq+0x118>)
 8003bde:	607b      	str	r3, [r7, #4]
      break;
 8003be0:	e030      	b.n	8003c44 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8003be2:	4b1d      	ldr	r3, [pc, #116]	; (8003c58 <RCC_GetSystemClockFreq+0x11c>)
 8003be4:	607b      	str	r3, [r7, #4]
      break;
 8003be6:	e02d      	b.n	8003c44 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 8003be8:	f000 f876 	bl	8003cd8 <RCC_PLL_GetFreqDomain_SYS>
 8003bec:	6078      	str	r0, [r7, #4]
      break;
 8003bee:	e029      	b.n	8003c44 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003bf0:	f7ff fd6c 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bf4:	4603      	mov	r3, r0
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d111      	bne.n	8003c1e <RCC_GetSystemClockFreq+0xe2>
 8003bfa:	f7ff fd67 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d004      	beq.n	8003c0e <RCC_GetSystemClockFreq+0xd2>
 8003c04:	f7ff fd74 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	0a1b      	lsrs	r3, r3, #8
 8003c0c:	e003      	b.n	8003c16 <RCC_GetSystemClockFreq+0xda>
 8003c0e:	f7ff fd7d 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c12:	4603      	mov	r3, r0
 8003c14:	0a1b      	lsrs	r3, r3, #8
 8003c16:	4a0e      	ldr	r2, [pc, #56]	; (8003c50 <RCC_GetSystemClockFreq+0x114>)
 8003c18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c1c:	e010      	b.n	8003c40 <RCC_GetSystemClockFreq+0x104>
 8003c1e:	f7ff fd55 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003c22:	4603      	mov	r3, r0
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d004      	beq.n	8003c32 <RCC_GetSystemClockFreq+0xf6>
 8003c28:	f7ff fd62 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003c2c:	4603      	mov	r3, r0
 8003c2e:	091b      	lsrs	r3, r3, #4
 8003c30:	e003      	b.n	8003c3a <RCC_GetSystemClockFreq+0xfe>
 8003c32:	f7ff fd6b 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003c36:	4603      	mov	r3, r0
 8003c38:	091b      	lsrs	r3, r3, #4
 8003c3a:	4a05      	ldr	r2, [pc, #20]	; (8003c50 <RCC_GetSystemClockFreq+0x114>)
 8003c3c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003c40:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003c42:	bf00      	nop
  }

  return frequency;
 8003c44:	687b      	ldr	r3, [r7, #4]
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3708      	adds	r7, #8
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	080067ec 	.word	0x080067ec
 8003c54:	00f42400 	.word	0x00f42400
 8003c58:	007a1200 	.word	0x007a1200

08003c5c <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b082      	sub	sp, #8
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8003c64:	f7ff fd6e 	bl	8003744 <LL_RCC_GetAHBPrescaler>
 8003c68:	4603      	mov	r3, r0
 8003c6a:	091b      	lsrs	r3, r3, #4
 8003c6c:	f003 030f 	and.w	r3, r3, #15
 8003c70:	4a04      	ldr	r2, [pc, #16]	; (8003c84 <RCC_GetHCLKClockFreq+0x28>)
 8003c72:	5cd3      	ldrb	r3, [r2, r3]
 8003c74:	461a      	mov	r2, r3
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	40d3      	lsrs	r3, r2
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	3708      	adds	r7, #8
 8003c7e:	46bd      	mov	sp, r7
 8003c80:	bd80      	pop	{r7, pc}
 8003c82:	bf00      	nop
 8003c84:	080067d4 	.word	0x080067d4

08003c88 <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 8003c88:	b580      	push	{r7, lr}
 8003c8a:	b082      	sub	sp, #8
 8003c8c:	af00      	add	r7, sp, #0
 8003c8e:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8003c90:	f7ff fd66 	bl	8003760 <LL_RCC_GetAPB1Prescaler>
 8003c94:	4603      	mov	r3, r0
 8003c96:	0a1b      	lsrs	r3, r3, #8
 8003c98:	4a04      	ldr	r2, [pc, #16]	; (8003cac <RCC_GetPCLK1ClockFreq+0x24>)
 8003c9a:	5cd3      	ldrb	r3, [r2, r3]
 8003c9c:	461a      	mov	r2, r3
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	40d3      	lsrs	r3, r2
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3708      	adds	r7, #8
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	080067e4 	.word	0x080067e4

08003cb0 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b082      	sub	sp, #8
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 8003cb8:	f7ff fd60 	bl	800377c <LL_RCC_GetAPB2Prescaler>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	0adb      	lsrs	r3, r3, #11
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <RCC_GetPCLK2ClockFreq+0x24>)
 8003cc2:	5cd3      	ldrb	r3, [r2, r3]
 8003cc4:	461a      	mov	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	40d3      	lsrs	r3, r2
}
 8003cca:	4618      	mov	r0, r3
 8003ccc:	3708      	adds	r7, #8
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	080067e4 	.word	0x080067e4

08003cd8 <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 8003cd8:	b590      	push	{r4, r7, lr}
 8003cda:	b083      	sub	sp, #12
 8003cdc:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8003cde:	f7ff fd83 	bl	80037e8 <LL_RCC_PLL_GetMainSource>
 8003ce2:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d02d      	beq.n	8003d46 <RCC_PLL_GetFreqDomain_SYS+0x6e>
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	d02e      	beq.n	8003d4c <RCC_PLL_GetFreqDomain_SYS+0x74>
 8003cee:	2b01      	cmp	r3, #1
 8003cf0:	d12f      	bne.n	8003d52 <RCC_PLL_GetFreqDomain_SYS+0x7a>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003cf2:	f7ff fceb 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d111      	bne.n	8003d20 <RCC_PLL_GetFreqDomain_SYS+0x48>
 8003cfc:	f7ff fce6 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d00:	4603      	mov	r3, r0
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d004      	beq.n	8003d10 <RCC_PLL_GetFreqDomain_SYS+0x38>
 8003d06:	f7ff fcf3 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	0a1b      	lsrs	r3, r3, #8
 8003d0e:	e003      	b.n	8003d18 <RCC_PLL_GetFreqDomain_SYS+0x40>
 8003d10:	f7ff fcfc 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d14:	4603      	mov	r3, r0
 8003d16:	0a1b      	lsrs	r3, r3, #8
 8003d18:	4a2f      	ldr	r2, [pc, #188]	; (8003dd8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d1a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d1e:	e010      	b.n	8003d42 <RCC_PLL_GetFreqDomain_SYS+0x6a>
 8003d20:	f7ff fcd4 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d24:	4603      	mov	r3, r0
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d004      	beq.n	8003d34 <RCC_PLL_GetFreqDomain_SYS+0x5c>
 8003d2a:	f7ff fce1 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	091b      	lsrs	r3, r3, #4
 8003d32:	e003      	b.n	8003d3c <RCC_PLL_GetFreqDomain_SYS+0x64>
 8003d34:	f7ff fcea 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	091b      	lsrs	r3, r3, #4
 8003d3c:	4a26      	ldr	r2, [pc, #152]	; (8003dd8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d3e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d42:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003d44:	e02f      	b.n	8003da6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8003d46:	4b25      	ldr	r3, [pc, #148]	; (8003ddc <RCC_PLL_GetFreqDomain_SYS+0x104>)
 8003d48:	607b      	str	r3, [r7, #4]
      break;
 8003d4a:	e02c      	b.n	8003da6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 8003d4c:	4b24      	ldr	r3, [pc, #144]	; (8003de0 <RCC_PLL_GetFreqDomain_SYS+0x108>)
 8003d4e:	607b      	str	r3, [r7, #4]
      break;
 8003d50:	e029      	b.n	8003da6 <RCC_PLL_GetFreqDomain_SYS+0xce>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8003d52:	f7ff fcbb 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d56:	4603      	mov	r3, r0
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d111      	bne.n	8003d80 <RCC_PLL_GetFreqDomain_SYS+0xa8>
 8003d5c:	f7ff fcb6 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d60:	4603      	mov	r3, r0
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d004      	beq.n	8003d70 <RCC_PLL_GetFreqDomain_SYS+0x98>
 8003d66:	f7ff fcc3 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003d6a:	4603      	mov	r3, r0
 8003d6c:	0a1b      	lsrs	r3, r3, #8
 8003d6e:	e003      	b.n	8003d78 <RCC_PLL_GetFreqDomain_SYS+0xa0>
 8003d70:	f7ff fccc 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d74:	4603      	mov	r3, r0
 8003d76:	0a1b      	lsrs	r3, r3, #8
 8003d78:	4a17      	ldr	r2, [pc, #92]	; (8003dd8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d7a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003d7e:	e010      	b.n	8003da2 <RCC_PLL_GetFreqDomain_SYS+0xca>
 8003d80:	f7ff fca4 	bl	80036cc <LL_RCC_MSI_IsEnabledRangeSelect>
 8003d84:	4603      	mov	r3, r0
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d004      	beq.n	8003d94 <RCC_PLL_GetFreqDomain_SYS+0xbc>
 8003d8a:	f7ff fcb1 	bl	80036f0 <LL_RCC_MSI_GetRange>
 8003d8e:	4603      	mov	r3, r0
 8003d90:	091b      	lsrs	r3, r3, #4
 8003d92:	e003      	b.n	8003d9c <RCC_PLL_GetFreqDomain_SYS+0xc4>
 8003d94:	f7ff fcba 	bl	800370c <LL_RCC_MSI_GetRangeAfterStandby>
 8003d98:	4603      	mov	r3, r0
 8003d9a:	091b      	lsrs	r3, r3, #4
 8003d9c:	4a0e      	ldr	r2, [pc, #56]	; (8003dd8 <RCC_PLL_GetFreqDomain_SYS+0x100>)
 8003d9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003da2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8003da4:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8003da6:	f7ff fd49 	bl	800383c <LL_RCC_PLL_GetDivider>
 8003daa:	4603      	mov	r3, r0
 8003dac:	091b      	lsrs	r3, r3, #4
 8003dae:	3301      	adds	r3, #1
 8003db0:	687a      	ldr	r2, [r7, #4]
 8003db2:	fbb2 f4f3 	udiv	r4, r2, r3
 8003db6:	f7ff fd25 	bl	8003804 <LL_RCC_PLL_GetN>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	fb03 f404 	mul.w	r4, r3, r4
 8003dc0:	f7ff fd2e 	bl	8003820 <LL_RCC_PLL_GetR>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	0e5b      	lsrs	r3, r3, #25
 8003dc8:	3301      	adds	r3, #1
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	370c      	adds	r7, #12
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd90      	pop	{r4, r7, pc}
 8003dd8:	080067ec 	.word	0x080067ec
 8003ddc:	00f42400 	.word	0x00f42400
 8003de0:	007a1200 	.word	0x007a1200

08003de4 <LL_SPI_IsEnabled>:
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003df4:	2b40      	cmp	r3, #64	; 0x40
 8003df6:	d101      	bne.n	8003dfc <LL_SPI_IsEnabled+0x18>
 8003df8:	2301      	movs	r3, #1
 8003dfa:	e000      	b.n	8003dfe <LL_SPI_IsEnabled+0x1a>
 8003dfc:	2300      	movs	r3, #0
}
 8003dfe:	4618      	mov	r0, r3
 8003e00:	370c      	adds	r7, #12
 8003e02:	46bd      	mov	sp, r7
 8003e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e08:	4770      	bx	lr

08003e0a <LL_SPI_SetCRCPolynomial>:
{
 8003e0a:	b480      	push	{r7}
 8003e0c:	b083      	sub	sp, #12
 8003e0e:	af00      	add	r7, sp, #0
 8003e10:	6078      	str	r0, [r7, #4]
 8003e12:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	461a      	mov	r2, r3
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	611a      	str	r2, [r3, #16]
}
 8003e1e:	bf00      	nop
 8003e20:	370c      	adds	r7, #12
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr

08003e2a <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 8003e2a:	b580      	push	{r7, lr}
 8003e2c:	b084      	sub	sp, #16
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	6078      	str	r0, [r7, #4]
 8003e32:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8003e34:	2301      	movs	r3, #1
 8003e36:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff ffd3 	bl	8003de4 <LL_SPI_IsEnabled>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d13b      	bne.n	8003ebc <LL_SPI_Init+0x92>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003e4c:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8003e50:	683a      	ldr	r2, [r7, #0]
 8003e52:	6811      	ldr	r1, [r2, #0]
 8003e54:	683a      	ldr	r2, [r7, #0]
 8003e56:	6852      	ldr	r2, [r2, #4]
 8003e58:	4311      	orrs	r1, r2
 8003e5a:	683a      	ldr	r2, [r7, #0]
 8003e5c:	68d2      	ldr	r2, [r2, #12]
 8003e5e:	4311      	orrs	r1, r2
 8003e60:	683a      	ldr	r2, [r7, #0]
 8003e62:	6912      	ldr	r2, [r2, #16]
 8003e64:	4311      	orrs	r1, r2
 8003e66:	683a      	ldr	r2, [r7, #0]
 8003e68:	6952      	ldr	r2, [r2, #20]
 8003e6a:	4311      	orrs	r1, r2
 8003e6c:	683a      	ldr	r2, [r7, #0]
 8003e6e:	6992      	ldr	r2, [r2, #24]
 8003e70:	4311      	orrs	r1, r2
 8003e72:	683a      	ldr	r2, [r7, #0]
 8003e74:	69d2      	ldr	r2, [r2, #28]
 8003e76:	4311      	orrs	r1, r2
 8003e78:	683a      	ldr	r2, [r7, #0]
 8003e7a:	6a12      	ldr	r2, [r2, #32]
 8003e7c:	430a      	orrs	r2, r1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	685b      	ldr	r3, [r3, #4]
 8003e88:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003e8c:	f023 0304 	bic.w	r3, r3, #4
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	6891      	ldr	r1, [r2, #8]
 8003e94:	683a      	ldr	r2, [r7, #0]
 8003e96:	6952      	ldr	r2, [r2, #20]
 8003e98:	0c12      	lsrs	r2, r2, #16
 8003e9a:	430a      	orrs	r2, r1
 8003e9c:	431a      	orrs	r2, r3
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	605a      	str	r2, [r3, #4]

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	6a1b      	ldr	r3, [r3, #32]
 8003ea6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003eaa:	d105      	bne.n	8003eb8 <LL_SPI_Init+0x8e>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb0:	4619      	mov	r1, r3
 8003eb2:	6878      	ldr	r0, [r7, #4]
 8003eb4:	f7ff ffa9 	bl	8003e0a <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}

08003ec6 <LL_TIM_SetPrescaler>:
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b083      	sub	sp, #12
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	6078      	str	r0, [r7, #4]
 8003ece:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->PSC, Prescaler);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	683a      	ldr	r2, [r7, #0]
 8003ed4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003ed6:	bf00      	nop
 8003ed8:	370c      	adds	r7, #12
 8003eda:	46bd      	mov	sp, r7
 8003edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee0:	4770      	bx	lr

08003ee2 <LL_TIM_SetAutoReload>:
{
 8003ee2:	b480      	push	{r7}
 8003ee4:	b083      	sub	sp, #12
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	6078      	str	r0, [r7, #4]
 8003eea:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->ARR, AutoReload);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <LL_TIM_SetRepetitionCounter>:
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
 8003f06:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->RCR, RepetitionCounter);
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	683a      	ldr	r2, [r7, #0]
 8003f0c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <LL_TIM_OC_SetCompareCH1>:
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
 8003f22:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	683a      	ldr	r2, [r7, #0]
 8003f28:	635a      	str	r2, [r3, #52]	; 0x34
}
 8003f2a:	bf00      	nop
 8003f2c:	370c      	adds	r7, #12
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr

08003f36 <LL_TIM_OC_SetCompareCH2>:
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
 8003f3e:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	683a      	ldr	r2, [r7, #0]
 8003f44:	639a      	str	r2, [r3, #56]	; 0x38
}
 8003f46:	bf00      	nop
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <LL_TIM_OC_SetCompareCH3>:
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
 8003f5a:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	683a      	ldr	r2, [r7, #0]
 8003f60:	63da      	str	r2, [r3, #60]	; 0x3c
}
 8003f62:	bf00      	nop
 8003f64:	370c      	adds	r7, #12
 8003f66:	46bd      	mov	sp, r7
 8003f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6c:	4770      	bx	lr

08003f6e <LL_TIM_OC_SetCompareCH4>:
{
 8003f6e:	b480      	push	{r7}
 8003f70:	b083      	sub	sp, #12
 8003f72:	af00      	add	r7, sp, #0
 8003f74:	6078      	str	r0, [r7, #4]
 8003f76:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR4, CompareValue);
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	683a      	ldr	r2, [r7, #0]
 8003f7c:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003f7e:	bf00      	nop
 8003f80:	370c      	adds	r7, #12
 8003f82:	46bd      	mov	sp, r7
 8003f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f88:	4770      	bx	lr

08003f8a <LL_TIM_OC_SetCompareCH5>:
{
 8003f8a:	b480      	push	{r7}
 8003f8c:	b083      	sub	sp, #12
 8003f8e:	af00      	add	r7, sp, #0
 8003f90:	6078      	str	r0, [r7, #4]
 8003f92:	6039      	str	r1, [r7, #0]
  MODIFY_REG(TIMx->CCR5, TIM_CCR5_CCR5, CompareValue);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	683a      	ldr	r2, [r7, #0]
 8003f9c:	659a      	str	r2, [r3, #88]	; 0x58
}
 8003f9e:	bf00      	nop
 8003fa0:	370c      	adds	r7, #12
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa8:	4770      	bx	lr

08003faa <LL_TIM_OC_SetCompareCH6>:
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
 8003fb2:	6039      	str	r1, [r7, #0]
  WRITE_REG(TIMx->CCR6, CompareValue);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	683a      	ldr	r2, [r7, #0]
 8003fb8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8003fba:	bf00      	nop
 8003fbc:	370c      	adds	r7, #12
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fc4:	4770      	bx	lr

08003fc6 <LL_TIM_GenerateEvent_UPDATE>:
  * @rmtoll EGR          UG            LL_TIM_GenerateEvent_UPDATE
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
 8003fc6:	b480      	push	{r7}
 8003fc8:	b083      	sub	sp, #12
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	6078      	str	r0, [r7, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
 8003fd2:	f043 0201 	orr.w	r2, r3, #1
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	615a      	str	r2, [r3, #20]
}
 8003fda:	bf00      	nop
 8003fdc:	370c      	adds	r7, #12
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
	...

08003fe8 <LL_TIM_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
ErrorStatus LL_TIM_Init(TIM_TypeDef *TIMx, LL_TIM_InitTypeDef *TIM_InitStruct)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(TIMx));
  assert_param(IS_LL_TIM_COUNTERMODE(TIM_InitStruct->CounterMode));
  assert_param(IS_LL_TIM_CLOCKDIVISION(TIM_InitStruct->ClockDivision));

  tmpcr1 = LL_TIM_ReadReg(TIMx, CR1);
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	; (80040f0 <LL_TIM_Init+0x108>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d013      	beq.n	8004028 <LL_TIM_Init+0x40>
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004006:	d00f      	beq.n	8004028 <LL_TIM_Init+0x40>
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	4a3a      	ldr	r2, [pc, #232]	; (80040f4 <LL_TIM_Init+0x10c>)
 800400c:	4293      	cmp	r3, r2
 800400e:	d00b      	beq.n	8004028 <LL_TIM_Init+0x40>
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	4a39      	ldr	r2, [pc, #228]	; (80040f8 <LL_TIM_Init+0x110>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d007      	beq.n	8004028 <LL_TIM_Init+0x40>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	4a38      	ldr	r2, [pc, #224]	; (80040fc <LL_TIM_Init+0x114>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d003      	beq.n	8004028 <LL_TIM_Init+0x40>
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	4a37      	ldr	r2, [pc, #220]	; (8004100 <LL_TIM_Init+0x118>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d106      	bne.n	8004036 <LL_TIM_Init+0x4e>
  {
    /* Select the Counter Mode */
    MODIFY_REG(tmpcr1, (TIM_CR1_DIR | TIM_CR1_CMS), TIM_InitStruct->CounterMode);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	4a2d      	ldr	r2, [pc, #180]	; (80040f0 <LL_TIM_Init+0x108>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d01f      	beq.n	800407e <LL_TIM_Init+0x96>
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004044:	d01b      	beq.n	800407e <LL_TIM_Init+0x96>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	4a2a      	ldr	r2, [pc, #168]	; (80040f4 <LL_TIM_Init+0x10c>)
 800404a:	4293      	cmp	r3, r2
 800404c:	d017      	beq.n	800407e <LL_TIM_Init+0x96>
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	4a29      	ldr	r2, [pc, #164]	; (80040f8 <LL_TIM_Init+0x110>)
 8004052:	4293      	cmp	r3, r2
 8004054:	d013      	beq.n	800407e <LL_TIM_Init+0x96>
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	4a28      	ldr	r2, [pc, #160]	; (80040fc <LL_TIM_Init+0x114>)
 800405a:	4293      	cmp	r3, r2
 800405c:	d00f      	beq.n	800407e <LL_TIM_Init+0x96>
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a27      	ldr	r2, [pc, #156]	; (8004100 <LL_TIM_Init+0x118>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <LL_TIM_Init+0x96>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	4a26      	ldr	r2, [pc, #152]	; (8004104 <LL_TIM_Init+0x11c>)
 800406a:	4293      	cmp	r3, r2
 800406c:	d007      	beq.n	800407e <LL_TIM_Init+0x96>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a25      	ldr	r2, [pc, #148]	; (8004108 <LL_TIM_Init+0x120>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <LL_TIM_Init+0x96>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a24      	ldr	r2, [pc, #144]	; (800410c <LL_TIM_Init+0x124>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d106      	bne.n	800408c <LL_TIM_Init+0xa4>
  {
    /* Set the clock division */
    MODIFY_REG(tmpcr1, TIM_CR1_CKD, TIM_InitStruct->ClockDivision);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004084:	683b      	ldr	r3, [r7, #0]
 8004086:	68db      	ldr	r3, [r3, #12]
 8004088:	4313      	orrs	r3, r2
 800408a:	60fb      	str	r3, [r7, #12]
  }

  /* Write to TIMx CR1 */
  LL_TIM_WriteReg(TIMx, CR1, tmpcr1);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	68fa      	ldr	r2, [r7, #12]
 8004090:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  LL_TIM_SetAutoReload(TIMx, TIM_InitStruct->Autoreload);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	4619      	mov	r1, r3
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f7ff ff22 	bl	8003ee2 <LL_TIM_SetAutoReload>

  /* Set the Prescaler value */
  LL_TIM_SetPrescaler(TIMx, TIM_InitStruct->Prescaler);
 800409e:	683b      	ldr	r3, [r7, #0]
 80040a0:	881b      	ldrh	r3, [r3, #0]
 80040a2:	4619      	mov	r1, r3
 80040a4:	6878      	ldr	r0, [r7, #4]
 80040a6:	f7ff ff0e 	bl	8003ec6 <LL_TIM_SetPrescaler>

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a10      	ldr	r2, [pc, #64]	; (80040f0 <LL_TIM_Init+0x108>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d00f      	beq.n	80040d2 <LL_TIM_Init+0xea>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a12      	ldr	r2, [pc, #72]	; (8004100 <LL_TIM_Init+0x118>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d00b      	beq.n	80040d2 <LL_TIM_Init+0xea>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	4a11      	ldr	r2, [pc, #68]	; (8004104 <LL_TIM_Init+0x11c>)
 80040be:	4293      	cmp	r3, r2
 80040c0:	d007      	beq.n	80040d2 <LL_TIM_Init+0xea>
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	4a10      	ldr	r2, [pc, #64]	; (8004108 <LL_TIM_Init+0x120>)
 80040c6:	4293      	cmp	r3, r2
 80040c8:	d003      	beq.n	80040d2 <LL_TIM_Init+0xea>
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	4a0f      	ldr	r2, [pc, #60]	; (800410c <LL_TIM_Init+0x124>)
 80040ce:	4293      	cmp	r3, r2
 80040d0:	d105      	bne.n	80040de <LL_TIM_Init+0xf6>
  {
    /* Set the Repetition Counter value */
    LL_TIM_SetRepetitionCounter(TIMx, TIM_InitStruct->RepetitionCounter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	691b      	ldr	r3, [r3, #16]
 80040d6:	4619      	mov	r1, r3
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff10 	bl	8003efe <LL_TIM_SetRepetitionCounter>
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter value (if applicable) immediately */
  LL_TIM_GenerateEvent_UPDATE(TIMx);
 80040de:	6878      	ldr	r0, [r7, #4]
 80040e0:	f7ff ff71 	bl	8003fc6 <LL_TIM_GenerateEvent_UPDATE>

  return SUCCESS;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
 80040ee:	bf00      	nop
 80040f0:	40012c00 	.word	0x40012c00
 80040f4:	40000400 	.word	0x40000400
 80040f8:	40000800 	.word	0x40000800
 80040fc:	40000c00 	.word	0x40000c00
 8004100:	40013400 	.word	0x40013400
 8004104:	40014000 	.word	0x40014000
 8004108:	40014400 	.word	0x40014400
 800410c:	40014800 	.word	0x40014800

08004110 <LL_TIM_OC_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx output channel is initialized
  *          - ERROR: TIMx output channel is not initialized
  */
ErrorStatus LL_TIM_OC_Init(TIM_TypeDef *TIMx, uint32_t Channel, LL_TIM_OC_InitTypeDef *TIM_OC_InitStruct)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b086      	sub	sp, #24
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
  ErrorStatus result = ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	75fb      	strb	r3, [r7, #23]

  switch (Channel)
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004126:	d01f      	beq.n	8004168 <LL_TIM_OC_Init+0x58>
 8004128:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800412c:	d804      	bhi.n	8004138 <LL_TIM_OC_Init+0x28>
 800412e:	2b01      	cmp	r3, #1
 8004130:	d00c      	beq.n	800414c <LL_TIM_OC_Init+0x3c>
 8004132:	2b10      	cmp	r3, #16
 8004134:	d011      	beq.n	800415a <LL_TIM_OC_Init+0x4a>
      break;
    case LL_TIM_CHANNEL_CH6:
      result = OC6Config(TIMx, TIM_OC_InitStruct);
      break;
    default:
      break;
 8004136:	e033      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
  switch (Channel)
 8004138:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800413c:	d022      	beq.n	8004184 <LL_TIM_OC_Init+0x74>
 800413e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004142:	d026      	beq.n	8004192 <LL_TIM_OC_Init+0x82>
 8004144:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004148:	d015      	beq.n	8004176 <LL_TIM_OC_Init+0x66>
      break;
 800414a:	e029      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC1Config(TIMx, TIM_OC_InitStruct);
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	68f8      	ldr	r0, [r7, #12]
 8004150:	f000 f82c 	bl	80041ac <OC1Config>
 8004154:	4603      	mov	r3, r0
 8004156:	75fb      	strb	r3, [r7, #23]
      break;
 8004158:	e022      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC2Config(TIMx, TIM_OC_InitStruct);
 800415a:	6879      	ldr	r1, [r7, #4]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f8a5 	bl	80042ac <OC2Config>
 8004162:	4603      	mov	r3, r0
 8004164:	75fb      	strb	r3, [r7, #23]
      break;
 8004166:	e01b      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC3Config(TIMx, TIM_OC_InitStruct);
 8004168:	6879      	ldr	r1, [r7, #4]
 800416a:	68f8      	ldr	r0, [r7, #12]
 800416c:	f000 f922 	bl	80043b4 <OC3Config>
 8004170:	4603      	mov	r3, r0
 8004172:	75fb      	strb	r3, [r7, #23]
      break;
 8004174:	e014      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC4Config(TIMx, TIM_OC_InitStruct);
 8004176:	6879      	ldr	r1, [r7, #4]
 8004178:	68f8      	ldr	r0, [r7, #12]
 800417a:	f000 f99f 	bl	80044bc <OC4Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]
      break;
 8004182:	e00d      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC5Config(TIMx, TIM_OC_InitStruct);
 8004184:	6879      	ldr	r1, [r7, #4]
 8004186:	68f8      	ldr	r0, [r7, #12]
 8004188:	f000 fa04 	bl	8004594 <OC5Config>
 800418c:	4603      	mov	r3, r0
 800418e:	75fb      	strb	r3, [r7, #23]
      break;
 8004190:	e006      	b.n	80041a0 <LL_TIM_OC_Init+0x90>
      result = OC6Config(TIMx, TIM_OC_InitStruct);
 8004192:	6879      	ldr	r1, [r7, #4]
 8004194:	68f8      	ldr	r0, [r7, #12]
 8004196:	f000 fa61 	bl	800465c <OC6Config>
 800419a:	4603      	mov	r3, r0
 800419c:	75fb      	strb	r3, [r7, #23]
      break;
 800419e:	bf00      	nop
  }

  return result;
 80041a0:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a2:	4618      	mov	r0, r3
 80041a4:	3718      	adds	r7, #24
 80041a6:	46bd      	mov	sp, r7
 80041a8:	bd80      	pop	{r7, pc}
	...

080041ac <OC1Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC1Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b086      	sub	sp, #24
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 1: Reset the CC1E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC1E);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	f023 0201 	bic.w	r2, r3, #1
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC1S);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f023 0303 	bic.w	r3, r3, #3
 80041da:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC1M, TIM_OCInitStruct->OCMode);
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	6812      	ldr	r2, [r2, #0]
 80041ea:	4313      	orrs	r3, r2
 80041ec:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC1P, TIM_OCInitStruct->OCPolarity);
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	f023 0202 	bic.w	r2, r3, #2
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	691b      	ldr	r3, [r3, #16]
 80041f8:	4313      	orrs	r3, r2
 80041fa:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC1E, TIM_OCInitStruct->OCState);
 80041fc:	697b      	ldr	r3, [r7, #20]
 80041fe:	f023 0201 	bic.w	r2, r3, #1
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	685b      	ldr	r3, [r3, #4]
 8004206:	4313      	orrs	r3, r2
 8004208:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	4a22      	ldr	r2, [pc, #136]	; (8004298 <OC1Config+0xec>)
 800420e:	4293      	cmp	r3, r2
 8004210:	d00f      	beq.n	8004232 <OC1Config+0x86>
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	4a21      	ldr	r2, [pc, #132]	; (800429c <OC1Config+0xf0>)
 8004216:	4293      	cmp	r3, r2
 8004218:	d00b      	beq.n	8004232 <OC1Config+0x86>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	4a20      	ldr	r2, [pc, #128]	; (80042a0 <OC1Config+0xf4>)
 800421e:	4293      	cmp	r3, r2
 8004220:	d007      	beq.n	8004232 <OC1Config+0x86>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	4a1f      	ldr	r2, [pc, #124]	; (80042a4 <OC1Config+0xf8>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d003      	beq.n	8004232 <OC1Config+0x86>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	4a1e      	ldr	r2, [pc, #120]	; (80042a8 <OC1Config+0xfc>)
 800422e:	4293      	cmp	r3, r2
 8004230:	d11e      	bne.n	8004270 <OC1Config+0xc4>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NP, TIM_OCInitStruct->OCNPolarity << 2U);
 8004232:	697b      	ldr	r3, [r7, #20]
 8004234:	f023 0208 	bic.w	r2, r3, #8
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	695b      	ldr	r3, [r3, #20]
 800423c:	009b      	lsls	r3, r3, #2
 800423e:	4313      	orrs	r3, r2
 8004240:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC1NE, TIM_OCInitStruct->OCNState << 2U);
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f023 0204 	bic.w	r2, r3, #4
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	689b      	ldr	r3, [r3, #8]
 800424c:	009b      	lsls	r3, r3, #2
 800424e:	4313      	orrs	r3, r2
 8004250:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1, TIM_OCInitStruct->OCIdleState);
 8004252:	693b      	ldr	r3, [r7, #16]
 8004254:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS1N, TIM_OCInitStruct->OCNIdleState << 1U);
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	69db      	ldr	r3, [r3, #28]
 800426a:	005b      	lsls	r3, r3, #1
 800426c:	4313      	orrs	r3, r2
 800426e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	693a      	ldr	r2, [r7, #16]
 8004274:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH1(TIMx, TIM_OCInitStruct->CompareValue);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	68db      	ldr	r3, [r3, #12]
 8004280:	4619      	mov	r1, r3
 8004282:	6878      	ldr	r0, [r7, #4]
 8004284:	f7ff fe49 	bl	8003f1a <LL_TIM_OC_SetCompareCH1>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3718      	adds	r7, #24
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	40012c00 	.word	0x40012c00
 800429c:	40013400 	.word	0x40013400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40014400 	.word	0x40014400
 80042a8:	40014800 	.word	0x40014800

080042ac <OC2Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC2Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b086      	sub	sp, #24
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 2: Reset the CC2E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC2E);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	f023 0210 	bic.w	r2, r3, #16
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6a1b      	ldr	r3, [r3, #32]
 80042c6:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = LL_TIM_ReadReg(TIMx, CCMR1);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	699b      	ldr	r3, [r3, #24]
 80042d2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr1, TIM_CCMR1_CC2S);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr1, TIM_CCMR1_OC2M, TIM_OCInitStruct->OCMode << 8U);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80042e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042e6:	683a      	ldr	r2, [r7, #0]
 80042e8:	6812      	ldr	r2, [r2, #0]
 80042ea:	0212      	lsls	r2, r2, #8
 80042ec:	4313      	orrs	r3, r2
 80042ee:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC2P, TIM_OCInitStruct->OCPolarity << 4U);
 80042f0:	697b      	ldr	r3, [r7, #20]
 80042f2:	f023 0220 	bic.w	r2, r3, #32
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	011b      	lsls	r3, r3, #4
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC2E, TIM_OCInitStruct->OCState << 4U);
 8004300:	697b      	ldr	r3, [r7, #20]
 8004302:	f023 0210 	bic.w	r2, r3, #16
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	685b      	ldr	r3, [r3, #4]
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	4313      	orrs	r3, r2
 800430e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	4a23      	ldr	r2, [pc, #140]	; (80043a0 <OC2Config+0xf4>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d00f      	beq.n	8004338 <OC2Config+0x8c>
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	4a22      	ldr	r2, [pc, #136]	; (80043a4 <OC2Config+0xf8>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d00b      	beq.n	8004338 <OC2Config+0x8c>
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	4a21      	ldr	r2, [pc, #132]	; (80043a8 <OC2Config+0xfc>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d007      	beq.n	8004338 <OC2Config+0x8c>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	4a20      	ldr	r2, [pc, #128]	; (80043ac <OC2Config+0x100>)
 800432c:	4293      	cmp	r3, r2
 800432e:	d003      	beq.n	8004338 <OC2Config+0x8c>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a1f      	ldr	r2, [pc, #124]	; (80043b0 <OC2Config+0x104>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d11f      	bne.n	8004378 <OC2Config+0xcc>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NP, TIM_OCInitStruct->OCNPolarity << 6U);
 8004338:	697b      	ldr	r3, [r7, #20]
 800433a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	695b      	ldr	r3, [r3, #20]
 8004342:	019b      	lsls	r3, r3, #6
 8004344:	4313      	orrs	r3, r2
 8004346:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC2NE, TIM_OCInitStruct->OCNState << 6U);
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	019b      	lsls	r3, r3, #6
 8004354:	4313      	orrs	r3, r2
 8004356:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2, TIM_OCInitStruct->OCIdleState << 2U);
 8004358:	693b      	ldr	r3, [r7, #16]
 800435a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	699b      	ldr	r3, [r3, #24]
 8004362:	009b      	lsls	r3, r3, #2
 8004364:	4313      	orrs	r3, r2
 8004366:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS2N, TIM_OCInitStruct->OCNIdleState << 3U);
 8004368:	693b      	ldr	r3, [r7, #16]
 800436a:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	69db      	ldr	r3, [r3, #28]
 8004372:	00db      	lsls	r3, r3, #3
 8004374:	4313      	orrs	r3, r2
 8004376:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	693a      	ldr	r2, [r7, #16]
 800437c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  LL_TIM_WriteReg(TIMx, CCMR1, tmpccmr1);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	68fa      	ldr	r2, [r7, #12]
 8004382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH2(TIMx, TIM_OCInitStruct->CompareValue);
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	68db      	ldr	r3, [r3, #12]
 8004388:	4619      	mov	r1, r3
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f7ff fdd3 	bl	8003f36 <LL_TIM_OC_SetCompareCH2>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	697a      	ldr	r2, [r7, #20]
 8004394:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004396:	2300      	movs	r3, #0
}
 8004398:	4618      	mov	r0, r3
 800439a:	3718      	adds	r7, #24
 800439c:	46bd      	mov	sp, r7
 800439e:	bd80      	pop	{r7, pc}
 80043a0:	40012c00 	.word	0x40012c00
 80043a4:	40013400 	.word	0x40013400
 80043a8:	40014000 	.word	0x40014000
 80043ac:	40014400 	.word	0x40014400
 80043b0:	40014800 	.word	0x40014800

080043b4 <OC3Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC3Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
 80043bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));

  /* Disable the Channel 3: Reset the CC3E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC3E);
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	6a1b      	ldr	r3, [r3, #32]
 80043c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer =  LL_TIM_ReadReg(TIMx, CCER);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6a1b      	ldr	r3, [r3, #32]
 80043ce:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CR2 register value */
  tmpcr2 = LL_TIM_ReadReg(TIMx, CR2);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	69db      	ldr	r3, [r3, #28]
 80043da:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC3S);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f023 0303 	bic.w	r3, r3, #3
 80043e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC3M, TIM_OCInitStruct->OCMode);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043ee:	683a      	ldr	r2, [r7, #0]
 80043f0:	6812      	ldr	r2, [r2, #0]
 80043f2:	4313      	orrs	r3, r2
 80043f4:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC3P, TIM_OCInitStruct->OCPolarity << 8U);
 80043f6:	697b      	ldr	r3, [r7, #20]
 80043f8:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80043fc:	683b      	ldr	r3, [r7, #0]
 80043fe:	691b      	ldr	r3, [r3, #16]
 8004400:	021b      	lsls	r3, r3, #8
 8004402:	4313      	orrs	r3, r2
 8004404:	617b      	str	r3, [r7, #20]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC3E, TIM_OCInitStruct->OCState << 8U);
 8004406:	697b      	ldr	r3, [r7, #20]
 8004408:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800440c:	683b      	ldr	r3, [r7, #0]
 800440e:	685b      	ldr	r3, [r3, #4]
 8004410:	021b      	lsls	r3, r3, #8
 8004412:	4313      	orrs	r3, r2
 8004414:	617b      	str	r3, [r7, #20]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	4a23      	ldr	r2, [pc, #140]	; (80044a8 <OC3Config+0xf4>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d00f      	beq.n	800443e <OC3Config+0x8a>
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	4a22      	ldr	r2, [pc, #136]	; (80044ac <OC3Config+0xf8>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d00b      	beq.n	800443e <OC3Config+0x8a>
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	4a21      	ldr	r2, [pc, #132]	; (80044b0 <OC3Config+0xfc>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d007      	beq.n	800443e <OC3Config+0x8a>
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	4a20      	ldr	r2, [pc, #128]	; (80044b4 <OC3Config+0x100>)
 8004432:	4293      	cmp	r3, r2
 8004434:	d003      	beq.n	800443e <OC3Config+0x8a>
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	4a1f      	ldr	r2, [pc, #124]	; (80044b8 <OC3Config+0x104>)
 800443a:	4293      	cmp	r3, r2
 800443c:	d11f      	bne.n	800447e <OC3Config+0xca>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the complementary output Polarity */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NP, TIM_OCInitStruct->OCNPolarity << 10U);
 800443e:	697b      	ldr	r3, [r7, #20]
 8004440:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004444:	683b      	ldr	r3, [r7, #0]
 8004446:	695b      	ldr	r3, [r3, #20]
 8004448:	029b      	lsls	r3, r3, #10
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

    /* Set the complementary output State */
    MODIFY_REG(tmpccer, TIM_CCER_CC3NE, TIM_OCInitStruct->OCNState << 10U);
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	029b      	lsls	r3, r3, #10
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3, TIM_OCInitStruct->OCIdleState << 4U);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	699b      	ldr	r3, [r3, #24]
 8004468:	011b      	lsls	r3, r3, #4
 800446a:	4313      	orrs	r3, r2
 800446c:	613b      	str	r3, [r7, #16]

    /* Set the complementary output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS3N, TIM_OCInitStruct->OCNIdleState << 5U);
 800446e:	693b      	ldr	r3, [r7, #16]
 8004470:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004474:	683b      	ldr	r3, [r7, #0]
 8004476:	69db      	ldr	r3, [r3, #28]
 8004478:	015b      	lsls	r3, r3, #5
 800447a:	4313      	orrs	r3, r2
 800447c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	68fa      	ldr	r2, [r7, #12]
 8004488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH3(TIMx, TIM_OCInitStruct->CompareValue);
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	68db      	ldr	r3, [r3, #12]
 800448e:	4619      	mov	r1, r3
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	f7ff fd5e 	bl	8003f52 <LL_TIM_OC_SetCompareCH3>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	697a      	ldr	r2, [r7, #20]
 800449a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800449c:	2300      	movs	r3, #0
}
 800449e:	4618      	mov	r0, r3
 80044a0:	3718      	adds	r7, #24
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	40012c00 	.word	0x40012c00
 80044ac:	40013400 	.word	0x40013400
 80044b0:	40014000 	.word	0x40014000
 80044b4:	40014400 	.word	0x40014400
 80044b8:	40014800 	.word	0x40014800

080044bc <OC4Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC4Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 80044bc:	b580      	push	{r7, lr}
 80044be:	b086      	sub	sp, #24
 80044c0:	af00      	add	r7, sp, #0
 80044c2:	6078      	str	r0, [r7, #4]
 80044c4:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 4: Reset the CC4E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC4E);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a1b      	ldr	r3, [r3, #32]
 80044ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a1b      	ldr	r3, [r3, #32]
 80044d6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  LL_TIM_ReadReg(TIMx, CR2);
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	685b      	ldr	r3, [r3, #4]
 80044dc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmr2 = LL_TIM_ReadReg(TIMx, CCMR2);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69db      	ldr	r3, [r3, #28]
 80044e2:	60fb      	str	r3, [r7, #12]

  /* Reset Capture/Compare selection Bits */
  CLEAR_BIT(tmpccmr2, TIM_CCMR2_CC4S);
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr2, TIM_CCMR2_OC4M, TIM_OCInitStruct->OCMode << 8U);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80044f2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80044f6:	683a      	ldr	r2, [r7, #0]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	0212      	lsls	r2, r2, #8
 80044fc:	4313      	orrs	r3, r2
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC4P, TIM_OCInitStruct->OCPolarity << 12U);
 8004500:	693b      	ldr	r3, [r7, #16]
 8004502:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	691b      	ldr	r3, [r3, #16]
 800450a:	031b      	lsls	r3, r3, #12
 800450c:	4313      	orrs	r3, r2
 800450e:	613b      	str	r3, [r7, #16]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC4E, TIM_OCInitStruct->OCState << 12U);
 8004510:	693b      	ldr	r3, [r7, #16]
 8004512:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	685b      	ldr	r3, [r3, #4]
 800451a:	031b      	lsls	r3, r3, #12
 800451c:	4313      	orrs	r3, r2
 800451e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	4a17      	ldr	r2, [pc, #92]	; (8004580 <OC4Config+0xc4>)
 8004524:	4293      	cmp	r3, r2
 8004526:	d00f      	beq.n	8004548 <OC4Config+0x8c>
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a16      	ldr	r2, [pc, #88]	; (8004584 <OC4Config+0xc8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d00b      	beq.n	8004548 <OC4Config+0x8c>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4a15      	ldr	r2, [pc, #84]	; (8004588 <OC4Config+0xcc>)
 8004534:	4293      	cmp	r3, r2
 8004536:	d007      	beq.n	8004548 <OC4Config+0x8c>
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	4a14      	ldr	r2, [pc, #80]	; (800458c <OC4Config+0xd0>)
 800453c:	4293      	cmp	r3, r2
 800453e:	d003      	beq.n	8004548 <OC4Config+0x8c>
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a13      	ldr	r2, [pc, #76]	; (8004590 <OC4Config+0xd4>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d107      	bne.n	8004558 <OC4Config+0x9c>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(tmpcr2, TIM_CR2_OIS4, TIM_OCInitStruct->OCIdleState << 6U);
 8004548:	697b      	ldr	r3, [r7, #20]
 800454a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800454e:	683b      	ldr	r3, [r7, #0]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	019b      	lsls	r3, r3, #6
 8004554:	4313      	orrs	r3, r2
 8004556:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  LL_TIM_WriteReg(TIMx, CR2, tmpcr2);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  LL_TIM_WriteReg(TIMx, CCMR2, tmpccmr2);
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH4(TIMx, TIM_OCInitStruct->CompareValue);
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	4619      	mov	r1, r3
 800456a:	6878      	ldr	r0, [r7, #4]
 800456c:	f7ff fcff 	bl	8003f6e <LL_TIM_OC_SetCompareCH4>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	693a      	ldr	r2, [r7, #16]
 8004574:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004576:	2300      	movs	r3, #0
}
 8004578:	4618      	mov	r0, r3
 800457a:	3718      	adds	r7, #24
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40012c00 	.word	0x40012c00
 8004584:	40013400 	.word	0x40013400
 8004588:	40014000 	.word	0x40014000
 800458c:	40014400 	.word	0x40014400
 8004590:	40014800 	.word	0x40014800

08004594 <OC5Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC5Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b084      	sub	sp, #16
 8004598:	af00      	add	r7, sp, #0
 800459a:	6078      	str	r0, [r7, #4]
 800459c:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC5E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC5E);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6a1b      	ldr	r3, [r3, #32]
 80045a2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6a1b      	ldr	r3, [r3, #32]
 80045ae:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045b4:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC5M, TIM_OCInitStruct->OCMode);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045c0:	683a      	ldr	r2, [r7, #0]
 80045c2:	6812      	ldr	r2, [r2, #0]
 80045c4:	4313      	orrs	r3, r2
 80045c6:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC5P, TIM_OCInitStruct->OCPolarity << 16U);
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	691b      	ldr	r3, [r3, #16]
 80045d2:	041b      	lsls	r3, r3, #16
 80045d4:	4313      	orrs	r3, r2
 80045d6:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC5E, TIM_OCInitStruct->OCState << 16U);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045de:	683b      	ldr	r3, [r7, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	041b      	lsls	r3, r3, #16
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	4a17      	ldr	r2, [pc, #92]	; (8004648 <OC5Config+0xb4>)
 80045ec:	4293      	cmp	r3, r2
 80045ee:	d00f      	beq.n	8004610 <OC5Config+0x7c>
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	4a16      	ldr	r2, [pc, #88]	; (800464c <OC5Config+0xb8>)
 80045f4:	4293      	cmp	r3, r2
 80045f6:	d00b      	beq.n	8004610 <OC5Config+0x7c>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	4a15      	ldr	r2, [pc, #84]	; (8004650 <OC5Config+0xbc>)
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d007      	beq.n	8004610 <OC5Config+0x7c>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	4a14      	ldr	r2, [pc, #80]	; (8004654 <OC5Config+0xc0>)
 8004604:	4293      	cmp	r3, r2
 8004606:	d003      	beq.n	8004610 <OC5Config+0x7c>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4a13      	ldr	r2, [pc, #76]	; (8004658 <OC5Config+0xc4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d109      	bne.n	8004624 <OC5Config+0x90>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS5, TIM_OCInitStruct->OCIdleState << 8U);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	685b      	ldr	r3, [r3, #4]
 8004614:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004618:	683b      	ldr	r3, [r7, #0]
 800461a:	699b      	ldr	r3, [r3, #24]
 800461c:	021b      	lsls	r3, r3, #8
 800461e:	431a      	orrs	r2, r3
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	605a      	str	r2, [r3, #4]

  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH5(TIMx, TIM_OCInitStruct->CompareValue);
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	4619      	mov	r1, r3
 8004630:	6878      	ldr	r0, [r7, #4]
 8004632:	f7ff fcaa 	bl	8003f8a <LL_TIM_OC_SetCompareCH5>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	68fa      	ldr	r2, [r7, #12]
 800463a:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 800463c:	2300      	movs	r3, #0
}
 800463e:	4618      	mov	r0, r3
 8004640:	3710      	adds	r7, #16
 8004642:	46bd      	mov	sp, r7
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	40012c00 	.word	0x40012c00
 800464c:	40013400 	.word	0x40013400
 8004650:	40014000 	.word	0x40014000
 8004654:	40014400 	.word	0x40014400
 8004658:	40014800 	.word	0x40014800

0800465c <OC6Config>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: TIMx registers are de-initialized
  *          - ERROR: not applicable
  */
static ErrorStatus OC6Config(TIM_TypeDef *TIMx, LL_TIM_OC_InitTypeDef *TIM_OCInitStruct)
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b084      	sub	sp, #16
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCPolarity));
  assert_param(IS_LL_TIM_OCPOLARITY(TIM_OCInitStruct->OCNPolarity));
  assert_param(IS_LL_TIM_OCSTATE(TIM_OCInitStruct->OCNState));

  /* Disable the Channel 5: Reset the CC6E Bit */
  CLEAR_BIT(TIMx->CCER, TIM_CCER_CC6E);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6a1b      	ldr	r3, [r3, #32]
 800466a:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = LL_TIM_ReadReg(TIMx, CCER);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	6a1b      	ldr	r3, [r3, #32]
 8004676:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx CCMR3 register value */
  tmpccmr3 = LL_TIM_ReadReg(TIMx, CCMR3);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800467c:	60bb      	str	r3, [r7, #8]

  /* Select the Output Compare Mode */
  MODIFY_REG(tmpccmr3, TIM_CCMR3_OC6M, TIM_OCInitStruct->OCMode << 8U);
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004684:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004688:	683a      	ldr	r2, [r7, #0]
 800468a:	6812      	ldr	r2, [r2, #0]
 800468c:	0212      	lsls	r2, r2, #8
 800468e:	4313      	orrs	r3, r2
 8004690:	60bb      	str	r3, [r7, #8]

  /* Set the Output Compare Polarity */
  MODIFY_REG(tmpccer, TIM_CCER_CC6P, TIM_OCInitStruct->OCPolarity << 20U);
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	691b      	ldr	r3, [r3, #16]
 800469c:	051b      	lsls	r3, r3, #20
 800469e:	4313      	orrs	r3, r2
 80046a0:	60fb      	str	r3, [r7, #12]

  /* Set the Output State */
  MODIFY_REG(tmpccer, TIM_CCER_CC6E, TIM_OCInitStruct->OCState << 20U);
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80046a8:	683b      	ldr	r3, [r7, #0]
 80046aa:	685b      	ldr	r3, [r3, #4]
 80046ac:	051b      	lsls	r3, r3, #20
 80046ae:	4313      	orrs	r3, r2
 80046b0:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	4a16      	ldr	r2, [pc, #88]	; (8004710 <OC6Config+0xb4>)
 80046b6:	4293      	cmp	r3, r2
 80046b8:	d00f      	beq.n	80046da <OC6Config+0x7e>
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	4a15      	ldr	r2, [pc, #84]	; (8004714 <OC6Config+0xb8>)
 80046be:	4293      	cmp	r3, r2
 80046c0:	d00b      	beq.n	80046da <OC6Config+0x7e>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	4a14      	ldr	r2, [pc, #80]	; (8004718 <OC6Config+0xbc>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d007      	beq.n	80046da <OC6Config+0x7e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	4a13      	ldr	r2, [pc, #76]	; (800471c <OC6Config+0xc0>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d003      	beq.n	80046da <OC6Config+0x7e>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a12      	ldr	r2, [pc, #72]	; (8004720 <OC6Config+0xc4>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d109      	bne.n	80046ee <OC6Config+0x92>
  {
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCNIdleState));
    assert_param(IS_LL_TIM_OCIDLESTATE(TIM_OCInitStruct->OCIdleState));

    /* Set the Output Idle state */
    MODIFY_REG(TIMx->CR2, TIM_CR2_OIS6, TIM_OCInitStruct->OCIdleState << 10U);
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	685b      	ldr	r3, [r3, #4]
 80046de:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	029b      	lsls	r3, r3, #10
 80046e8:	431a      	orrs	r2, r3
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	605a      	str	r2, [r3, #4]
  }

  /* Write to TIMx CCMR3 */
  LL_TIM_WriteReg(TIMx, CCMR3, tmpccmr3);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68ba      	ldr	r2, [r7, #8]
 80046f2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  LL_TIM_OC_SetCompareCH6(TIMx, TIM_OCInitStruct->CompareValue);
 80046f4:	683b      	ldr	r3, [r7, #0]
 80046f6:	68db      	ldr	r3, [r3, #12]
 80046f8:	4619      	mov	r1, r3
 80046fa:	6878      	ldr	r0, [r7, #4]
 80046fc:	f7ff fc55 	bl	8003faa <LL_TIM_OC_SetCompareCH6>

  /* Write to TIMx CCER */
  LL_TIM_WriteReg(TIMx, CCER, tmpccer);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	68fa      	ldr	r2, [r7, #12]
 8004704:	621a      	str	r2, [r3, #32]

  return SUCCESS;
 8004706:	2300      	movs	r3, #0
}
 8004708:	4618      	mov	r0, r3
 800470a:	3710      	adds	r7, #16
 800470c:	46bd      	mov	sp, r7
 800470e:	bd80      	pop	{r7, pc}
 8004710:	40012c00 	.word	0x40012c00
 8004714:	40013400 	.word	0x40013400
 8004718:	40014000 	.word	0x40014000
 800471c:	40014400 	.word	0x40014400
 8004720:	40014800 	.word	0x40014800

08004724 <LL_USART_IsEnabled>:
{
 8004724:	b480      	push	{r7}
 8004726:	b083      	sub	sp, #12
 8004728:	af00      	add	r7, sp, #0
 800472a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	f003 0301 	and.w	r3, r3, #1
 8004734:	2b01      	cmp	r3, #1
 8004736:	d101      	bne.n	800473c <LL_USART_IsEnabled+0x18>
 8004738:	2301      	movs	r3, #1
 800473a:	e000      	b.n	800473e <LL_USART_IsEnabled+0x1a>
 800473c:	2300      	movs	r3, #0
}
 800473e:	4618      	mov	r0, r3
 8004740:	370c      	adds	r7, #12
 8004742:	46bd      	mov	sp, r7
 8004744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004748:	4770      	bx	lr

0800474a <LL_USART_SetStopBitsLength>:
{
 800474a:	b480      	push	{r7}
 800474c:	b083      	sub	sp, #12
 800474e:	af00      	add	r7, sp, #0
 8004750:	6078      	str	r0, [r7, #4]
 8004752:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	685b      	ldr	r3, [r3, #4]
 8004758:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800475c:	683b      	ldr	r3, [r7, #0]
 800475e:	431a      	orrs	r2, r3
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	605a      	str	r2, [r3, #4]
}
 8004764:	bf00      	nop
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <LL_USART_SetHWFlowCtrl>:
{
 8004770:	b480      	push	{r7}
 8004772:	b083      	sub	sp, #12
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	689b      	ldr	r3, [r3, #8]
 800477e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	431a      	orrs	r2, r3
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	609a      	str	r2, [r3, #8]
}
 800478a:	bf00      	nop
 800478c:	370c      	adds	r7, #12
 800478e:	46bd      	mov	sp, r7
 8004790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004794:	4770      	bx	lr

08004796 <LL_USART_SetBaudRate>:
{
 8004796:	b480      	push	{r7}
 8004798:	b087      	sub	sp, #28
 800479a:	af00      	add	r7, sp, #0
 800479c:	60f8      	str	r0, [r7, #12]
 800479e:	60b9      	str	r1, [r7, #8]
 80047a0:	607a      	str	r2, [r7, #4]
 80047a2:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80047aa:	d11a      	bne.n	80047e2 <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	005a      	lsls	r2, r3, #1
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	085b      	lsrs	r3, r3, #1
 80047b4:	441a      	add	r2, r3
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80047bc:	b29b      	uxth	r3, r3
 80047be:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 80047c6:	4013      	ands	r3, r2
 80047c8:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80047ca:	697b      	ldr	r3, [r7, #20]
 80047cc:	085b      	lsrs	r3, r3, #1
 80047ce:	b29b      	uxth	r3, r3
 80047d0:	f003 0307 	and.w	r3, r3, #7
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	4313      	orrs	r3, r2
 80047d8:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	693a      	ldr	r2, [r7, #16]
 80047de:	60da      	str	r2, [r3, #12]
}
 80047e0:	e00a      	b.n	80047f8 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 80047e2:	683b      	ldr	r3, [r7, #0]
 80047e4:	085a      	lsrs	r2, r3, #1
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	441a      	add	r2, r3
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80047f0:	b29b      	uxth	r3, r3
 80047f2:	461a      	mov	r2, r3
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	60da      	str	r2, [r3, #12]
}
 80047f8:	bf00      	nop
 80047fa:	371c      	adds	r7, #28
 80047fc:	46bd      	mov	sp, r7
 80047fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004802:	4770      	bx	lr

08004804 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
 800480c:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800480e:	2301      	movs	r3, #1
 8004810:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 8004812:	2300      	movs	r3, #0
 8004814:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8004816:	6878      	ldr	r0, [r7, #4]
 8004818:	f7ff ff84 	bl	8004724 <LL_USART_IsEnabled>
 800481c:	4603      	mov	r3, r0
 800481e:	2b00      	cmp	r3, #0
 8004820:	d15b      	bne.n	80048da <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	4b2f      	ldr	r3, [pc, #188]	; (80048e4 <LL_USART_Init+0xe0>)
 8004828:	4013      	ands	r3, r2
 800482a:	683a      	ldr	r2, [r7, #0]
 800482c:	6851      	ldr	r1, [r2, #4]
 800482e:	683a      	ldr	r2, [r7, #0]
 8004830:	68d2      	ldr	r2, [r2, #12]
 8004832:	4311      	orrs	r1, r2
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	6912      	ldr	r2, [r2, #16]
 8004838:	4311      	orrs	r1, r2
 800483a:	683a      	ldr	r2, [r7, #0]
 800483c:	6992      	ldr	r2, [r2, #24]
 800483e:	430a      	orrs	r2, r1
 8004840:	431a      	orrs	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	4619      	mov	r1, r3
 800484c:	6878      	ldr	r0, [r7, #4]
 800484e:	f7ff ff7c 	bl	800474a <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	695b      	ldr	r3, [r3, #20]
 8004856:	4619      	mov	r1, r3
 8004858:	6878      	ldr	r0, [r7, #4]
 800485a:	f7ff ff89 	bl	8004770 <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a21      	ldr	r2, [pc, #132]	; (80048e8 <LL_USART_Init+0xe4>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d104      	bne.n	8004870 <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 8004866:	2003      	movs	r0, #3
 8004868:	f7fe fff6 	bl	8003858 <LL_RCC_GetUSARTClockFreq>
 800486c:	60b8      	str	r0, [r7, #8]
 800486e:	e023      	b.n	80048b8 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	4a1e      	ldr	r2, [pc, #120]	; (80048ec <LL_USART_Init+0xe8>)
 8004874:	4293      	cmp	r3, r2
 8004876:	d104      	bne.n	8004882 <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 8004878:	200c      	movs	r0, #12
 800487a:	f7fe ffed 	bl	8003858 <LL_RCC_GetUSARTClockFreq>
 800487e:	60b8      	str	r0, [r7, #8]
 8004880:	e01a      	b.n	80048b8 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	4a1a      	ldr	r2, [pc, #104]	; (80048f0 <LL_USART_Init+0xec>)
 8004886:	4293      	cmp	r3, r2
 8004888:	d104      	bne.n	8004894 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 800488a:	2030      	movs	r0, #48	; 0x30
 800488c:	f7fe ffe4 	bl	8003858 <LL_RCC_GetUSARTClockFreq>
 8004890:	60b8      	str	r0, [r7, #8]
 8004892:	e011      	b.n	80048b8 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	4a17      	ldr	r2, [pc, #92]	; (80048f4 <LL_USART_Init+0xf0>)
 8004898:	4293      	cmp	r3, r2
 800489a:	d104      	bne.n	80048a6 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 800489c:	20c0      	movs	r0, #192	; 0xc0
 800489e:	f7ff f8bb 	bl	8003a18 <LL_RCC_GetUARTClockFreq>
 80048a2:	60b8      	str	r0, [r7, #8]
 80048a4:	e008      	b.n	80048b8 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	4a13      	ldr	r2, [pc, #76]	; (80048f8 <LL_USART_Init+0xf4>)
 80048aa:	4293      	cmp	r3, r2
 80048ac:	d104      	bne.n	80048b8 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 80048ae:	f44f 7040 	mov.w	r0, #768	; 0x300
 80048b2:	f7ff f8b1 	bl	8003a18 <LL_RCC_GetUARTClockFreq>
 80048b6:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
    #endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 80048b8:	68bb      	ldr	r3, [r7, #8]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00d      	beq.n	80048da <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d009      	beq.n	80048da <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 80048c6:	2300      	movs	r3, #0
 80048c8:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	699a      	ldr	r2, [r3, #24]
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68b9      	ldr	r1, [r7, #8]
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f7ff ff5e 	bl	8004796 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 80048da:	7bfb      	ldrb	r3, [r7, #15]
}
 80048dc:	4618      	mov	r0, r3
 80048de:	3710      	adds	r7, #16
 80048e0:	46bd      	mov	sp, r7
 80048e2:	bd80      	pop	{r7, pc}
 80048e4:	efff69f3 	.word	0xefff69f3
 80048e8:	40013800 	.word	0x40013800
 80048ec:	40004400 	.word	0x40004400
 80048f0:	40004800 	.word	0x40004800
 80048f4:	40004c00 	.word	0x40004c00
 80048f8:	40005000 	.word	0x40005000

080048fc <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
 8004904:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8004906:	687a      	ldr	r2, [r7, #4]
 8004908:	683b      	ldr	r3, [r7, #0]
 800490a:	fbb2 f3f3 	udiv	r3, r2, r3
 800490e:	4a07      	ldr	r2, [pc, #28]	; (800492c <LL_InitTick+0x30>)
 8004910:	3b01      	subs	r3, #1
 8004912:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8004914:	4b05      	ldr	r3, [pc, #20]	; (800492c <LL_InitTick+0x30>)
 8004916:	2200      	movs	r2, #0
 8004918:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800491a:	4b04      	ldr	r3, [pc, #16]	; (800492c <LL_InitTick+0x30>)
 800491c:	2205      	movs	r2, #5
 800491e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr
 800492c:	e000e010 	.word	0xe000e010

08004930 <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b082      	sub	sp, #8
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 8004938:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f7ff ffdd 	bl	80048fc <LL_InitTick>
}
 8004942:	bf00      	nop
 8004944:	3708      	adds	r7, #8
 8004946:	46bd      	mov	sp, r7
 8004948:	bd80      	pop	{r7, pc}
	...

0800494c <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 800494c:	b480      	push	{r7}
 800494e:	b085      	sub	sp, #20
 8004950:	af00      	add	r7, sp, #0
 8004952:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 8004954:	4b0f      	ldr	r3, [pc, #60]	; (8004994 <LL_mDelay+0x48>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	60bb      	str	r3, [r7, #8]
  uint32_t tmpDelay = Delay;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	60fb      	str	r3, [r7, #12]

  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 800495e:	68bb      	ldr	r3, [r7, #8]

  /* Add a period to guaranty minimum wait */
  if(tmpDelay < LL_MAX_DELAY)
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004966:	d00c      	beq.n	8004982 <LL_mDelay+0x36>
  {
    tmpDelay++;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	3301      	adds	r3, #1
 800496c:	60fb      	str	r3, [r7, #12]
  }

  while (tmpDelay != 0U)
 800496e:	e008      	b.n	8004982 <LL_mDelay+0x36>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 8004970:	4b08      	ldr	r3, [pc, #32]	; (8004994 <LL_mDelay+0x48>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004978:	2b00      	cmp	r3, #0
 800497a:	d002      	beq.n	8004982 <LL_mDelay+0x36>
    {
      tmpDelay--;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	3b01      	subs	r3, #1
 8004980:	60fb      	str	r3, [r7, #12]
  while (tmpDelay != 0U)
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2b00      	cmp	r3, #0
 8004986:	d1f3      	bne.n	8004970 <LL_mDelay+0x24>
    }
  }
}
 8004988:	bf00      	nop
 800498a:	3714      	adds	r7, #20
 800498c:	46bd      	mov	sp, r7
 800498e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004992:	4770      	bx	lr
 8004994:	e000e010 	.word	0xe000e010

08004998 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8004998:	b480      	push	{r7}
 800499a:	b083      	sub	sp, #12
 800499c:	af00      	add	r7, sp, #0
 800499e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80049a0:	4a04      	ldr	r2, [pc, #16]	; (80049b4 <LL_SetSystemCoreClock+0x1c>)
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6013      	str	r3, [r2, #0]
}
 80049a6:	bf00      	nop
 80049a8:	370c      	adds	r7, #12
 80049aa:	46bd      	mov	sp, r7
 80049ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b0:	4770      	bx	lr
 80049b2:	bf00      	nop
 80049b4:	2000055c 	.word	0x2000055c

080049b8 <__errno>:
 80049b8:	4b01      	ldr	r3, [pc, #4]	; (80049c0 <__errno+0x8>)
 80049ba:	6818      	ldr	r0, [r3, #0]
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000560 	.word	0x20000560

080049c4 <__libc_init_array>:
 80049c4:	b570      	push	{r4, r5, r6, lr}
 80049c6:	4e0d      	ldr	r6, [pc, #52]	; (80049fc <__libc_init_array+0x38>)
 80049c8:	4c0d      	ldr	r4, [pc, #52]	; (8004a00 <__libc_init_array+0x3c>)
 80049ca:	1ba4      	subs	r4, r4, r6
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	2500      	movs	r5, #0
 80049d0:	42a5      	cmp	r5, r4
 80049d2:	d109      	bne.n	80049e8 <__libc_init_array+0x24>
 80049d4:	4e0b      	ldr	r6, [pc, #44]	; (8004a04 <__libc_init_array+0x40>)
 80049d6:	4c0c      	ldr	r4, [pc, #48]	; (8004a08 <__libc_init_array+0x44>)
 80049d8:	f000 ff7a 	bl	80058d0 <_init>
 80049dc:	1ba4      	subs	r4, r4, r6
 80049de:	10a4      	asrs	r4, r4, #2
 80049e0:	2500      	movs	r5, #0
 80049e2:	42a5      	cmp	r5, r4
 80049e4:	d105      	bne.n	80049f2 <__libc_init_array+0x2e>
 80049e6:	bd70      	pop	{r4, r5, r6, pc}
 80049e8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049ec:	4798      	blx	r3
 80049ee:	3501      	adds	r5, #1
 80049f0:	e7ee      	b.n	80049d0 <__libc_init_array+0xc>
 80049f2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80049f6:	4798      	blx	r3
 80049f8:	3501      	adds	r5, #1
 80049fa:	e7f2      	b.n	80049e2 <__libc_init_array+0x1e>
 80049fc:	080068d4 	.word	0x080068d4
 8004a00:	080068d4 	.word	0x080068d4
 8004a04:	080068d4 	.word	0x080068d4
 8004a08:	080068d8 	.word	0x080068d8

08004a0c <memset>:
 8004a0c:	4402      	add	r2, r0
 8004a0e:	4603      	mov	r3, r0
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d100      	bne.n	8004a16 <memset+0xa>
 8004a14:	4770      	bx	lr
 8004a16:	f803 1b01 	strb.w	r1, [r3], #1
 8004a1a:	e7f9      	b.n	8004a10 <memset+0x4>

08004a1c <iprintf>:
 8004a1c:	b40f      	push	{r0, r1, r2, r3}
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <iprintf+0x2c>)
 8004a20:	b513      	push	{r0, r1, r4, lr}
 8004a22:	681c      	ldr	r4, [r3, #0]
 8004a24:	b124      	cbz	r4, 8004a30 <iprintf+0x14>
 8004a26:	69a3      	ldr	r3, [r4, #24]
 8004a28:	b913      	cbnz	r3, 8004a30 <iprintf+0x14>
 8004a2a:	4620      	mov	r0, r4
 8004a2c:	f000 fa34 	bl	8004e98 <__sinit>
 8004a30:	ab05      	add	r3, sp, #20
 8004a32:	9a04      	ldr	r2, [sp, #16]
 8004a34:	68a1      	ldr	r1, [r4, #8]
 8004a36:	9301      	str	r3, [sp, #4]
 8004a38:	4620      	mov	r0, r4
 8004a3a:	f000 fbed 	bl	8005218 <_vfiprintf_r>
 8004a3e:	b002      	add	sp, #8
 8004a40:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004a44:	b004      	add	sp, #16
 8004a46:	4770      	bx	lr
 8004a48:	20000560 	.word	0x20000560

08004a4c <_puts_r>:
 8004a4c:	b570      	push	{r4, r5, r6, lr}
 8004a4e:	460e      	mov	r6, r1
 8004a50:	4605      	mov	r5, r0
 8004a52:	b118      	cbz	r0, 8004a5c <_puts_r+0x10>
 8004a54:	6983      	ldr	r3, [r0, #24]
 8004a56:	b90b      	cbnz	r3, 8004a5c <_puts_r+0x10>
 8004a58:	f000 fa1e 	bl	8004e98 <__sinit>
 8004a5c:	69ab      	ldr	r3, [r5, #24]
 8004a5e:	68ac      	ldr	r4, [r5, #8]
 8004a60:	b913      	cbnz	r3, 8004a68 <_puts_r+0x1c>
 8004a62:	4628      	mov	r0, r5
 8004a64:	f000 fa18 	bl	8004e98 <__sinit>
 8004a68:	4b23      	ldr	r3, [pc, #140]	; (8004af8 <_puts_r+0xac>)
 8004a6a:	429c      	cmp	r4, r3
 8004a6c:	d117      	bne.n	8004a9e <_puts_r+0x52>
 8004a6e:	686c      	ldr	r4, [r5, #4]
 8004a70:	89a3      	ldrh	r3, [r4, #12]
 8004a72:	071b      	lsls	r3, r3, #28
 8004a74:	d51d      	bpl.n	8004ab2 <_puts_r+0x66>
 8004a76:	6923      	ldr	r3, [r4, #16]
 8004a78:	b1db      	cbz	r3, 8004ab2 <_puts_r+0x66>
 8004a7a:	3e01      	subs	r6, #1
 8004a7c:	68a3      	ldr	r3, [r4, #8]
 8004a7e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004a82:	3b01      	subs	r3, #1
 8004a84:	60a3      	str	r3, [r4, #8]
 8004a86:	b9e9      	cbnz	r1, 8004ac4 <_puts_r+0x78>
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	da2e      	bge.n	8004aea <_puts_r+0x9e>
 8004a8c:	4622      	mov	r2, r4
 8004a8e:	210a      	movs	r1, #10
 8004a90:	4628      	mov	r0, r5
 8004a92:	f000 f851 	bl	8004b38 <__swbuf_r>
 8004a96:	3001      	adds	r0, #1
 8004a98:	d011      	beq.n	8004abe <_puts_r+0x72>
 8004a9a:	200a      	movs	r0, #10
 8004a9c:	e011      	b.n	8004ac2 <_puts_r+0x76>
 8004a9e:	4b17      	ldr	r3, [pc, #92]	; (8004afc <_puts_r+0xb0>)
 8004aa0:	429c      	cmp	r4, r3
 8004aa2:	d101      	bne.n	8004aa8 <_puts_r+0x5c>
 8004aa4:	68ac      	ldr	r4, [r5, #8]
 8004aa6:	e7e3      	b.n	8004a70 <_puts_r+0x24>
 8004aa8:	4b15      	ldr	r3, [pc, #84]	; (8004b00 <_puts_r+0xb4>)
 8004aaa:	429c      	cmp	r4, r3
 8004aac:	bf08      	it	eq
 8004aae:	68ec      	ldreq	r4, [r5, #12]
 8004ab0:	e7de      	b.n	8004a70 <_puts_r+0x24>
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f891 	bl	8004bdc <__swsetup_r>
 8004aba:	2800      	cmp	r0, #0
 8004abc:	d0dd      	beq.n	8004a7a <_puts_r+0x2e>
 8004abe:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac2:	bd70      	pop	{r4, r5, r6, pc}
 8004ac4:	2b00      	cmp	r3, #0
 8004ac6:	da04      	bge.n	8004ad2 <_puts_r+0x86>
 8004ac8:	69a2      	ldr	r2, [r4, #24]
 8004aca:	429a      	cmp	r2, r3
 8004acc:	dc06      	bgt.n	8004adc <_puts_r+0x90>
 8004ace:	290a      	cmp	r1, #10
 8004ad0:	d004      	beq.n	8004adc <_puts_r+0x90>
 8004ad2:	6823      	ldr	r3, [r4, #0]
 8004ad4:	1c5a      	adds	r2, r3, #1
 8004ad6:	6022      	str	r2, [r4, #0]
 8004ad8:	7019      	strb	r1, [r3, #0]
 8004ada:	e7cf      	b.n	8004a7c <_puts_r+0x30>
 8004adc:	4622      	mov	r2, r4
 8004ade:	4628      	mov	r0, r5
 8004ae0:	f000 f82a 	bl	8004b38 <__swbuf_r>
 8004ae4:	3001      	adds	r0, #1
 8004ae6:	d1c9      	bne.n	8004a7c <_puts_r+0x30>
 8004ae8:	e7e9      	b.n	8004abe <_puts_r+0x72>
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	200a      	movs	r0, #10
 8004aee:	1c5a      	adds	r2, r3, #1
 8004af0:	6022      	str	r2, [r4, #0]
 8004af2:	7018      	strb	r0, [r3, #0]
 8004af4:	e7e5      	b.n	8004ac2 <_puts_r+0x76>
 8004af6:	bf00      	nop
 8004af8:	08006858 	.word	0x08006858
 8004afc:	08006878 	.word	0x08006878
 8004b00:	08006838 	.word	0x08006838

08004b04 <puts>:
 8004b04:	4b02      	ldr	r3, [pc, #8]	; (8004b10 <puts+0xc>)
 8004b06:	4601      	mov	r1, r0
 8004b08:	6818      	ldr	r0, [r3, #0]
 8004b0a:	f7ff bf9f 	b.w	8004a4c <_puts_r>
 8004b0e:	bf00      	nop
 8004b10:	20000560 	.word	0x20000560

08004b14 <strncmp>:
 8004b14:	b510      	push	{r4, lr}
 8004b16:	b16a      	cbz	r2, 8004b34 <strncmp+0x20>
 8004b18:	3901      	subs	r1, #1
 8004b1a:	1884      	adds	r4, r0, r2
 8004b1c:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004b20:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004b24:	4293      	cmp	r3, r2
 8004b26:	d103      	bne.n	8004b30 <strncmp+0x1c>
 8004b28:	42a0      	cmp	r0, r4
 8004b2a:	d001      	beq.n	8004b30 <strncmp+0x1c>
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d1f5      	bne.n	8004b1c <strncmp+0x8>
 8004b30:	1a98      	subs	r0, r3, r2
 8004b32:	bd10      	pop	{r4, pc}
 8004b34:	4610      	mov	r0, r2
 8004b36:	e7fc      	b.n	8004b32 <strncmp+0x1e>

08004b38 <__swbuf_r>:
 8004b38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b3a:	460e      	mov	r6, r1
 8004b3c:	4614      	mov	r4, r2
 8004b3e:	4605      	mov	r5, r0
 8004b40:	b118      	cbz	r0, 8004b4a <__swbuf_r+0x12>
 8004b42:	6983      	ldr	r3, [r0, #24]
 8004b44:	b90b      	cbnz	r3, 8004b4a <__swbuf_r+0x12>
 8004b46:	f000 f9a7 	bl	8004e98 <__sinit>
 8004b4a:	4b21      	ldr	r3, [pc, #132]	; (8004bd0 <__swbuf_r+0x98>)
 8004b4c:	429c      	cmp	r4, r3
 8004b4e:	d12a      	bne.n	8004ba6 <__swbuf_r+0x6e>
 8004b50:	686c      	ldr	r4, [r5, #4]
 8004b52:	69a3      	ldr	r3, [r4, #24]
 8004b54:	60a3      	str	r3, [r4, #8]
 8004b56:	89a3      	ldrh	r3, [r4, #12]
 8004b58:	071a      	lsls	r2, r3, #28
 8004b5a:	d52e      	bpl.n	8004bba <__swbuf_r+0x82>
 8004b5c:	6923      	ldr	r3, [r4, #16]
 8004b5e:	b363      	cbz	r3, 8004bba <__swbuf_r+0x82>
 8004b60:	6923      	ldr	r3, [r4, #16]
 8004b62:	6820      	ldr	r0, [r4, #0]
 8004b64:	1ac0      	subs	r0, r0, r3
 8004b66:	6963      	ldr	r3, [r4, #20]
 8004b68:	b2f6      	uxtb	r6, r6
 8004b6a:	4283      	cmp	r3, r0
 8004b6c:	4637      	mov	r7, r6
 8004b6e:	dc04      	bgt.n	8004b7a <__swbuf_r+0x42>
 8004b70:	4621      	mov	r1, r4
 8004b72:	4628      	mov	r0, r5
 8004b74:	f000 f926 	bl	8004dc4 <_fflush_r>
 8004b78:	bb28      	cbnz	r0, 8004bc6 <__swbuf_r+0x8e>
 8004b7a:	68a3      	ldr	r3, [r4, #8]
 8004b7c:	3b01      	subs	r3, #1
 8004b7e:	60a3      	str	r3, [r4, #8]
 8004b80:	6823      	ldr	r3, [r4, #0]
 8004b82:	1c5a      	adds	r2, r3, #1
 8004b84:	6022      	str	r2, [r4, #0]
 8004b86:	701e      	strb	r6, [r3, #0]
 8004b88:	6963      	ldr	r3, [r4, #20]
 8004b8a:	3001      	adds	r0, #1
 8004b8c:	4283      	cmp	r3, r0
 8004b8e:	d004      	beq.n	8004b9a <__swbuf_r+0x62>
 8004b90:	89a3      	ldrh	r3, [r4, #12]
 8004b92:	07db      	lsls	r3, r3, #31
 8004b94:	d519      	bpl.n	8004bca <__swbuf_r+0x92>
 8004b96:	2e0a      	cmp	r6, #10
 8004b98:	d117      	bne.n	8004bca <__swbuf_r+0x92>
 8004b9a:	4621      	mov	r1, r4
 8004b9c:	4628      	mov	r0, r5
 8004b9e:	f000 f911 	bl	8004dc4 <_fflush_r>
 8004ba2:	b190      	cbz	r0, 8004bca <__swbuf_r+0x92>
 8004ba4:	e00f      	b.n	8004bc6 <__swbuf_r+0x8e>
 8004ba6:	4b0b      	ldr	r3, [pc, #44]	; (8004bd4 <__swbuf_r+0x9c>)
 8004ba8:	429c      	cmp	r4, r3
 8004baa:	d101      	bne.n	8004bb0 <__swbuf_r+0x78>
 8004bac:	68ac      	ldr	r4, [r5, #8]
 8004bae:	e7d0      	b.n	8004b52 <__swbuf_r+0x1a>
 8004bb0:	4b09      	ldr	r3, [pc, #36]	; (8004bd8 <__swbuf_r+0xa0>)
 8004bb2:	429c      	cmp	r4, r3
 8004bb4:	bf08      	it	eq
 8004bb6:	68ec      	ldreq	r4, [r5, #12]
 8004bb8:	e7cb      	b.n	8004b52 <__swbuf_r+0x1a>
 8004bba:	4621      	mov	r1, r4
 8004bbc:	4628      	mov	r0, r5
 8004bbe:	f000 f80d 	bl	8004bdc <__swsetup_r>
 8004bc2:	2800      	cmp	r0, #0
 8004bc4:	d0cc      	beq.n	8004b60 <__swbuf_r+0x28>
 8004bc6:	f04f 37ff 	mov.w	r7, #4294967295
 8004bca:	4638      	mov	r0, r7
 8004bcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	08006858 	.word	0x08006858
 8004bd4:	08006878 	.word	0x08006878
 8004bd8:	08006838 	.word	0x08006838

08004bdc <__swsetup_r>:
 8004bdc:	4b32      	ldr	r3, [pc, #200]	; (8004ca8 <__swsetup_r+0xcc>)
 8004bde:	b570      	push	{r4, r5, r6, lr}
 8004be0:	681d      	ldr	r5, [r3, #0]
 8004be2:	4606      	mov	r6, r0
 8004be4:	460c      	mov	r4, r1
 8004be6:	b125      	cbz	r5, 8004bf2 <__swsetup_r+0x16>
 8004be8:	69ab      	ldr	r3, [r5, #24]
 8004bea:	b913      	cbnz	r3, 8004bf2 <__swsetup_r+0x16>
 8004bec:	4628      	mov	r0, r5
 8004bee:	f000 f953 	bl	8004e98 <__sinit>
 8004bf2:	4b2e      	ldr	r3, [pc, #184]	; (8004cac <__swsetup_r+0xd0>)
 8004bf4:	429c      	cmp	r4, r3
 8004bf6:	d10f      	bne.n	8004c18 <__swsetup_r+0x3c>
 8004bf8:	686c      	ldr	r4, [r5, #4]
 8004bfa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004bfe:	b29a      	uxth	r2, r3
 8004c00:	0715      	lsls	r5, r2, #28
 8004c02:	d42c      	bmi.n	8004c5e <__swsetup_r+0x82>
 8004c04:	06d0      	lsls	r0, r2, #27
 8004c06:	d411      	bmi.n	8004c2c <__swsetup_r+0x50>
 8004c08:	2209      	movs	r2, #9
 8004c0a:	6032      	str	r2, [r6, #0]
 8004c0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004c10:	81a3      	strh	r3, [r4, #12]
 8004c12:	f04f 30ff 	mov.w	r0, #4294967295
 8004c16:	e03e      	b.n	8004c96 <__swsetup_r+0xba>
 8004c18:	4b25      	ldr	r3, [pc, #148]	; (8004cb0 <__swsetup_r+0xd4>)
 8004c1a:	429c      	cmp	r4, r3
 8004c1c:	d101      	bne.n	8004c22 <__swsetup_r+0x46>
 8004c1e:	68ac      	ldr	r4, [r5, #8]
 8004c20:	e7eb      	b.n	8004bfa <__swsetup_r+0x1e>
 8004c22:	4b24      	ldr	r3, [pc, #144]	; (8004cb4 <__swsetup_r+0xd8>)
 8004c24:	429c      	cmp	r4, r3
 8004c26:	bf08      	it	eq
 8004c28:	68ec      	ldreq	r4, [r5, #12]
 8004c2a:	e7e6      	b.n	8004bfa <__swsetup_r+0x1e>
 8004c2c:	0751      	lsls	r1, r2, #29
 8004c2e:	d512      	bpl.n	8004c56 <__swsetup_r+0x7a>
 8004c30:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004c32:	b141      	cbz	r1, 8004c46 <__swsetup_r+0x6a>
 8004c34:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004c38:	4299      	cmp	r1, r3
 8004c3a:	d002      	beq.n	8004c42 <__swsetup_r+0x66>
 8004c3c:	4630      	mov	r0, r6
 8004c3e:	f000 fa19 	bl	8005074 <_free_r>
 8004c42:	2300      	movs	r3, #0
 8004c44:	6363      	str	r3, [r4, #52]	; 0x34
 8004c46:	89a3      	ldrh	r3, [r4, #12]
 8004c48:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8004c4c:	81a3      	strh	r3, [r4, #12]
 8004c4e:	2300      	movs	r3, #0
 8004c50:	6063      	str	r3, [r4, #4]
 8004c52:	6923      	ldr	r3, [r4, #16]
 8004c54:	6023      	str	r3, [r4, #0]
 8004c56:	89a3      	ldrh	r3, [r4, #12]
 8004c58:	f043 0308 	orr.w	r3, r3, #8
 8004c5c:	81a3      	strh	r3, [r4, #12]
 8004c5e:	6923      	ldr	r3, [r4, #16]
 8004c60:	b94b      	cbnz	r3, 8004c76 <__swsetup_r+0x9a>
 8004c62:	89a3      	ldrh	r3, [r4, #12]
 8004c64:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8004c68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c6c:	d003      	beq.n	8004c76 <__swsetup_r+0x9a>
 8004c6e:	4621      	mov	r1, r4
 8004c70:	4630      	mov	r0, r6
 8004c72:	f000 f9bf 	bl	8004ff4 <__smakebuf_r>
 8004c76:	89a2      	ldrh	r2, [r4, #12]
 8004c78:	f012 0301 	ands.w	r3, r2, #1
 8004c7c:	d00c      	beq.n	8004c98 <__swsetup_r+0xbc>
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60a3      	str	r3, [r4, #8]
 8004c82:	6963      	ldr	r3, [r4, #20]
 8004c84:	425b      	negs	r3, r3
 8004c86:	61a3      	str	r3, [r4, #24]
 8004c88:	6923      	ldr	r3, [r4, #16]
 8004c8a:	b953      	cbnz	r3, 8004ca2 <__swsetup_r+0xc6>
 8004c8c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c90:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8004c94:	d1ba      	bne.n	8004c0c <__swsetup_r+0x30>
 8004c96:	bd70      	pop	{r4, r5, r6, pc}
 8004c98:	0792      	lsls	r2, r2, #30
 8004c9a:	bf58      	it	pl
 8004c9c:	6963      	ldrpl	r3, [r4, #20]
 8004c9e:	60a3      	str	r3, [r4, #8]
 8004ca0:	e7f2      	b.n	8004c88 <__swsetup_r+0xac>
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	e7f7      	b.n	8004c96 <__swsetup_r+0xba>
 8004ca6:	bf00      	nop
 8004ca8:	20000560 	.word	0x20000560
 8004cac:	08006858 	.word	0x08006858
 8004cb0:	08006878 	.word	0x08006878
 8004cb4:	08006838 	.word	0x08006838

08004cb8 <__sflush_r>:
 8004cb8:	898a      	ldrh	r2, [r1, #12]
 8004cba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004cbe:	4605      	mov	r5, r0
 8004cc0:	0710      	lsls	r0, r2, #28
 8004cc2:	460c      	mov	r4, r1
 8004cc4:	d458      	bmi.n	8004d78 <__sflush_r+0xc0>
 8004cc6:	684b      	ldr	r3, [r1, #4]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	dc05      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004ccc:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	dc02      	bgt.n	8004cd8 <__sflush_r+0x20>
 8004cd2:	2000      	movs	r0, #0
 8004cd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004cd8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004cda:	2e00      	cmp	r6, #0
 8004cdc:	d0f9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004cde:	2300      	movs	r3, #0
 8004ce0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8004ce4:	682f      	ldr	r7, [r5, #0]
 8004ce6:	6a21      	ldr	r1, [r4, #32]
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	d032      	beq.n	8004d52 <__sflush_r+0x9a>
 8004cec:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8004cee:	89a3      	ldrh	r3, [r4, #12]
 8004cf0:	075a      	lsls	r2, r3, #29
 8004cf2:	d505      	bpl.n	8004d00 <__sflush_r+0x48>
 8004cf4:	6863      	ldr	r3, [r4, #4]
 8004cf6:	1ac0      	subs	r0, r0, r3
 8004cf8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8004cfa:	b10b      	cbz	r3, 8004d00 <__sflush_r+0x48>
 8004cfc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8004cfe:	1ac0      	subs	r0, r0, r3
 8004d00:	2300      	movs	r3, #0
 8004d02:	4602      	mov	r2, r0
 8004d04:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8004d06:	6a21      	ldr	r1, [r4, #32]
 8004d08:	4628      	mov	r0, r5
 8004d0a:	47b0      	blx	r6
 8004d0c:	1c43      	adds	r3, r0, #1
 8004d0e:	89a3      	ldrh	r3, [r4, #12]
 8004d10:	d106      	bne.n	8004d20 <__sflush_r+0x68>
 8004d12:	6829      	ldr	r1, [r5, #0]
 8004d14:	291d      	cmp	r1, #29
 8004d16:	d848      	bhi.n	8004daa <__sflush_r+0xf2>
 8004d18:	4a29      	ldr	r2, [pc, #164]	; (8004dc0 <__sflush_r+0x108>)
 8004d1a:	40ca      	lsrs	r2, r1
 8004d1c:	07d6      	lsls	r6, r2, #31
 8004d1e:	d544      	bpl.n	8004daa <__sflush_r+0xf2>
 8004d20:	2200      	movs	r2, #0
 8004d22:	6062      	str	r2, [r4, #4]
 8004d24:	04d9      	lsls	r1, r3, #19
 8004d26:	6922      	ldr	r2, [r4, #16]
 8004d28:	6022      	str	r2, [r4, #0]
 8004d2a:	d504      	bpl.n	8004d36 <__sflush_r+0x7e>
 8004d2c:	1c42      	adds	r2, r0, #1
 8004d2e:	d101      	bne.n	8004d34 <__sflush_r+0x7c>
 8004d30:	682b      	ldr	r3, [r5, #0]
 8004d32:	b903      	cbnz	r3, 8004d36 <__sflush_r+0x7e>
 8004d34:	6560      	str	r0, [r4, #84]	; 0x54
 8004d36:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004d38:	602f      	str	r7, [r5, #0]
 8004d3a:	2900      	cmp	r1, #0
 8004d3c:	d0c9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d3e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8004d42:	4299      	cmp	r1, r3
 8004d44:	d002      	beq.n	8004d4c <__sflush_r+0x94>
 8004d46:	4628      	mov	r0, r5
 8004d48:	f000 f994 	bl	8005074 <_free_r>
 8004d4c:	2000      	movs	r0, #0
 8004d4e:	6360      	str	r0, [r4, #52]	; 0x34
 8004d50:	e7c0      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d52:	2301      	movs	r3, #1
 8004d54:	4628      	mov	r0, r5
 8004d56:	47b0      	blx	r6
 8004d58:	1c41      	adds	r1, r0, #1
 8004d5a:	d1c8      	bne.n	8004cee <__sflush_r+0x36>
 8004d5c:	682b      	ldr	r3, [r5, #0]
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d0c5      	beq.n	8004cee <__sflush_r+0x36>
 8004d62:	2b1d      	cmp	r3, #29
 8004d64:	d001      	beq.n	8004d6a <__sflush_r+0xb2>
 8004d66:	2b16      	cmp	r3, #22
 8004d68:	d101      	bne.n	8004d6e <__sflush_r+0xb6>
 8004d6a:	602f      	str	r7, [r5, #0]
 8004d6c:	e7b1      	b.n	8004cd2 <__sflush_r+0x1a>
 8004d6e:	89a3      	ldrh	r3, [r4, #12]
 8004d70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004d74:	81a3      	strh	r3, [r4, #12]
 8004d76:	e7ad      	b.n	8004cd4 <__sflush_r+0x1c>
 8004d78:	690f      	ldr	r7, [r1, #16]
 8004d7a:	2f00      	cmp	r7, #0
 8004d7c:	d0a9      	beq.n	8004cd2 <__sflush_r+0x1a>
 8004d7e:	0793      	lsls	r3, r2, #30
 8004d80:	680e      	ldr	r6, [r1, #0]
 8004d82:	bf08      	it	eq
 8004d84:	694b      	ldreq	r3, [r1, #20]
 8004d86:	600f      	str	r7, [r1, #0]
 8004d88:	bf18      	it	ne
 8004d8a:	2300      	movne	r3, #0
 8004d8c:	eba6 0807 	sub.w	r8, r6, r7
 8004d90:	608b      	str	r3, [r1, #8]
 8004d92:	f1b8 0f00 	cmp.w	r8, #0
 8004d96:	dd9c      	ble.n	8004cd2 <__sflush_r+0x1a>
 8004d98:	4643      	mov	r3, r8
 8004d9a:	463a      	mov	r2, r7
 8004d9c:	6a21      	ldr	r1, [r4, #32]
 8004d9e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8004da0:	4628      	mov	r0, r5
 8004da2:	47b0      	blx	r6
 8004da4:	2800      	cmp	r0, #0
 8004da6:	dc06      	bgt.n	8004db6 <__sflush_r+0xfe>
 8004da8:	89a3      	ldrh	r3, [r4, #12]
 8004daa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004dae:	81a3      	strh	r3, [r4, #12]
 8004db0:	f04f 30ff 	mov.w	r0, #4294967295
 8004db4:	e78e      	b.n	8004cd4 <__sflush_r+0x1c>
 8004db6:	4407      	add	r7, r0
 8004db8:	eba8 0800 	sub.w	r8, r8, r0
 8004dbc:	e7e9      	b.n	8004d92 <__sflush_r+0xda>
 8004dbe:	bf00      	nop
 8004dc0:	20400001 	.word	0x20400001

08004dc4 <_fflush_r>:
 8004dc4:	b538      	push	{r3, r4, r5, lr}
 8004dc6:	690b      	ldr	r3, [r1, #16]
 8004dc8:	4605      	mov	r5, r0
 8004dca:	460c      	mov	r4, r1
 8004dcc:	b1db      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004dce:	b118      	cbz	r0, 8004dd8 <_fflush_r+0x14>
 8004dd0:	6983      	ldr	r3, [r0, #24]
 8004dd2:	b90b      	cbnz	r3, 8004dd8 <_fflush_r+0x14>
 8004dd4:	f000 f860 	bl	8004e98 <__sinit>
 8004dd8:	4b0c      	ldr	r3, [pc, #48]	; (8004e0c <_fflush_r+0x48>)
 8004dda:	429c      	cmp	r4, r3
 8004ddc:	d109      	bne.n	8004df2 <_fflush_r+0x2e>
 8004dde:	686c      	ldr	r4, [r5, #4]
 8004de0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004de4:	b17b      	cbz	r3, 8004e06 <_fflush_r+0x42>
 8004de6:	4621      	mov	r1, r4
 8004de8:	4628      	mov	r0, r5
 8004dea:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004dee:	f7ff bf63 	b.w	8004cb8 <__sflush_r>
 8004df2:	4b07      	ldr	r3, [pc, #28]	; (8004e10 <_fflush_r+0x4c>)
 8004df4:	429c      	cmp	r4, r3
 8004df6:	d101      	bne.n	8004dfc <_fflush_r+0x38>
 8004df8:	68ac      	ldr	r4, [r5, #8]
 8004dfa:	e7f1      	b.n	8004de0 <_fflush_r+0x1c>
 8004dfc:	4b05      	ldr	r3, [pc, #20]	; (8004e14 <_fflush_r+0x50>)
 8004dfe:	429c      	cmp	r4, r3
 8004e00:	bf08      	it	eq
 8004e02:	68ec      	ldreq	r4, [r5, #12]
 8004e04:	e7ec      	b.n	8004de0 <_fflush_r+0x1c>
 8004e06:	2000      	movs	r0, #0
 8004e08:	bd38      	pop	{r3, r4, r5, pc}
 8004e0a:	bf00      	nop
 8004e0c:	08006858 	.word	0x08006858
 8004e10:	08006878 	.word	0x08006878
 8004e14:	08006838 	.word	0x08006838

08004e18 <std>:
 8004e18:	2300      	movs	r3, #0
 8004e1a:	b510      	push	{r4, lr}
 8004e1c:	4604      	mov	r4, r0
 8004e1e:	e9c0 3300 	strd	r3, r3, [r0]
 8004e22:	6083      	str	r3, [r0, #8]
 8004e24:	8181      	strh	r1, [r0, #12]
 8004e26:	6643      	str	r3, [r0, #100]	; 0x64
 8004e28:	81c2      	strh	r2, [r0, #14]
 8004e2a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e2e:	6183      	str	r3, [r0, #24]
 8004e30:	4619      	mov	r1, r3
 8004e32:	2208      	movs	r2, #8
 8004e34:	305c      	adds	r0, #92	; 0x5c
 8004e36:	f7ff fde9 	bl	8004a0c <memset>
 8004e3a:	4b05      	ldr	r3, [pc, #20]	; (8004e50 <std+0x38>)
 8004e3c:	6263      	str	r3, [r4, #36]	; 0x24
 8004e3e:	4b05      	ldr	r3, [pc, #20]	; (8004e54 <std+0x3c>)
 8004e40:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e42:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <std+0x40>)
 8004e44:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e46:	4b05      	ldr	r3, [pc, #20]	; (8004e5c <std+0x44>)
 8004e48:	6224      	str	r4, [r4, #32]
 8004e4a:	6323      	str	r3, [r4, #48]	; 0x30
 8004e4c:	bd10      	pop	{r4, pc}
 8004e4e:	bf00      	nop
 8004e50:	08005775 	.word	0x08005775
 8004e54:	08005797 	.word	0x08005797
 8004e58:	080057cf 	.word	0x080057cf
 8004e5c:	080057f3 	.word	0x080057f3

08004e60 <_cleanup_r>:
 8004e60:	4901      	ldr	r1, [pc, #4]	; (8004e68 <_cleanup_r+0x8>)
 8004e62:	f000 b885 	b.w	8004f70 <_fwalk_reent>
 8004e66:	bf00      	nop
 8004e68:	08004dc5 	.word	0x08004dc5

08004e6c <__sfmoreglue>:
 8004e6c:	b570      	push	{r4, r5, r6, lr}
 8004e6e:	1e4a      	subs	r2, r1, #1
 8004e70:	2568      	movs	r5, #104	; 0x68
 8004e72:	4355      	muls	r5, r2
 8004e74:	460e      	mov	r6, r1
 8004e76:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8004e7a:	f000 f949 	bl	8005110 <_malloc_r>
 8004e7e:	4604      	mov	r4, r0
 8004e80:	b140      	cbz	r0, 8004e94 <__sfmoreglue+0x28>
 8004e82:	2100      	movs	r1, #0
 8004e84:	e9c0 1600 	strd	r1, r6, [r0]
 8004e88:	300c      	adds	r0, #12
 8004e8a:	60a0      	str	r0, [r4, #8]
 8004e8c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8004e90:	f7ff fdbc 	bl	8004a0c <memset>
 8004e94:	4620      	mov	r0, r4
 8004e96:	bd70      	pop	{r4, r5, r6, pc}

08004e98 <__sinit>:
 8004e98:	6983      	ldr	r3, [r0, #24]
 8004e9a:	b510      	push	{r4, lr}
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	bb33      	cbnz	r3, 8004eee <__sinit+0x56>
 8004ea0:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8004ea4:	6503      	str	r3, [r0, #80]	; 0x50
 8004ea6:	4b12      	ldr	r3, [pc, #72]	; (8004ef0 <__sinit+0x58>)
 8004ea8:	4a12      	ldr	r2, [pc, #72]	; (8004ef4 <__sinit+0x5c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	6282      	str	r2, [r0, #40]	; 0x28
 8004eae:	4298      	cmp	r0, r3
 8004eb0:	bf04      	itt	eq
 8004eb2:	2301      	moveq	r3, #1
 8004eb4:	6183      	streq	r3, [r0, #24]
 8004eb6:	f000 f81f 	bl	8004ef8 <__sfp>
 8004eba:	6060      	str	r0, [r4, #4]
 8004ebc:	4620      	mov	r0, r4
 8004ebe:	f000 f81b 	bl	8004ef8 <__sfp>
 8004ec2:	60a0      	str	r0, [r4, #8]
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	f000 f817 	bl	8004ef8 <__sfp>
 8004eca:	2200      	movs	r2, #0
 8004ecc:	60e0      	str	r0, [r4, #12]
 8004ece:	2104      	movs	r1, #4
 8004ed0:	6860      	ldr	r0, [r4, #4]
 8004ed2:	f7ff ffa1 	bl	8004e18 <std>
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	2109      	movs	r1, #9
 8004eda:	68a0      	ldr	r0, [r4, #8]
 8004edc:	f7ff ff9c 	bl	8004e18 <std>
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	2112      	movs	r1, #18
 8004ee4:	68e0      	ldr	r0, [r4, #12]
 8004ee6:	f7ff ff97 	bl	8004e18 <std>
 8004eea:	2301      	movs	r3, #1
 8004eec:	61a3      	str	r3, [r4, #24]
 8004eee:	bd10      	pop	{r4, pc}
 8004ef0:	08006834 	.word	0x08006834
 8004ef4:	08004e61 	.word	0x08004e61

08004ef8 <__sfp>:
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	4b1b      	ldr	r3, [pc, #108]	; (8004f68 <__sfp+0x70>)
 8004efc:	681e      	ldr	r6, [r3, #0]
 8004efe:	69b3      	ldr	r3, [r6, #24]
 8004f00:	4607      	mov	r7, r0
 8004f02:	b913      	cbnz	r3, 8004f0a <__sfp+0x12>
 8004f04:	4630      	mov	r0, r6
 8004f06:	f7ff ffc7 	bl	8004e98 <__sinit>
 8004f0a:	3648      	adds	r6, #72	; 0x48
 8004f0c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8004f10:	3b01      	subs	r3, #1
 8004f12:	d503      	bpl.n	8004f1c <__sfp+0x24>
 8004f14:	6833      	ldr	r3, [r6, #0]
 8004f16:	b133      	cbz	r3, 8004f26 <__sfp+0x2e>
 8004f18:	6836      	ldr	r6, [r6, #0]
 8004f1a:	e7f7      	b.n	8004f0c <__sfp+0x14>
 8004f1c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8004f20:	b16d      	cbz	r5, 8004f3e <__sfp+0x46>
 8004f22:	3468      	adds	r4, #104	; 0x68
 8004f24:	e7f4      	b.n	8004f10 <__sfp+0x18>
 8004f26:	2104      	movs	r1, #4
 8004f28:	4638      	mov	r0, r7
 8004f2a:	f7ff ff9f 	bl	8004e6c <__sfmoreglue>
 8004f2e:	6030      	str	r0, [r6, #0]
 8004f30:	2800      	cmp	r0, #0
 8004f32:	d1f1      	bne.n	8004f18 <__sfp+0x20>
 8004f34:	230c      	movs	r3, #12
 8004f36:	603b      	str	r3, [r7, #0]
 8004f38:	4604      	mov	r4, r0
 8004f3a:	4620      	mov	r0, r4
 8004f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f3e:	4b0b      	ldr	r3, [pc, #44]	; (8004f6c <__sfp+0x74>)
 8004f40:	6665      	str	r5, [r4, #100]	; 0x64
 8004f42:	e9c4 5500 	strd	r5, r5, [r4]
 8004f46:	60a5      	str	r5, [r4, #8]
 8004f48:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8004f4c:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8004f50:	2208      	movs	r2, #8
 8004f52:	4629      	mov	r1, r5
 8004f54:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8004f58:	f7ff fd58 	bl	8004a0c <memset>
 8004f5c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8004f60:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8004f64:	e7e9      	b.n	8004f3a <__sfp+0x42>
 8004f66:	bf00      	nop
 8004f68:	08006834 	.word	0x08006834
 8004f6c:	ffff0001 	.word	0xffff0001

08004f70 <_fwalk_reent>:
 8004f70:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f74:	4680      	mov	r8, r0
 8004f76:	4689      	mov	r9, r1
 8004f78:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8004f7c:	2600      	movs	r6, #0
 8004f7e:	b914      	cbnz	r4, 8004f86 <_fwalk_reent+0x16>
 8004f80:	4630      	mov	r0, r6
 8004f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f86:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8004f8a:	3f01      	subs	r7, #1
 8004f8c:	d501      	bpl.n	8004f92 <_fwalk_reent+0x22>
 8004f8e:	6824      	ldr	r4, [r4, #0]
 8004f90:	e7f5      	b.n	8004f7e <_fwalk_reent+0xe>
 8004f92:	89ab      	ldrh	r3, [r5, #12]
 8004f94:	2b01      	cmp	r3, #1
 8004f96:	d907      	bls.n	8004fa8 <_fwalk_reent+0x38>
 8004f98:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	d003      	beq.n	8004fa8 <_fwalk_reent+0x38>
 8004fa0:	4629      	mov	r1, r5
 8004fa2:	4640      	mov	r0, r8
 8004fa4:	47c8      	blx	r9
 8004fa6:	4306      	orrs	r6, r0
 8004fa8:	3568      	adds	r5, #104	; 0x68
 8004faa:	e7ee      	b.n	8004f8a <_fwalk_reent+0x1a>

08004fac <__swhatbuf_r>:
 8004fac:	b570      	push	{r4, r5, r6, lr}
 8004fae:	460e      	mov	r6, r1
 8004fb0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fb4:	2900      	cmp	r1, #0
 8004fb6:	b096      	sub	sp, #88	; 0x58
 8004fb8:	4614      	mov	r4, r2
 8004fba:	461d      	mov	r5, r3
 8004fbc:	da07      	bge.n	8004fce <__swhatbuf_r+0x22>
 8004fbe:	2300      	movs	r3, #0
 8004fc0:	602b      	str	r3, [r5, #0]
 8004fc2:	89b3      	ldrh	r3, [r6, #12]
 8004fc4:	061a      	lsls	r2, r3, #24
 8004fc6:	d410      	bmi.n	8004fea <__swhatbuf_r+0x3e>
 8004fc8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004fcc:	e00e      	b.n	8004fec <__swhatbuf_r+0x40>
 8004fce:	466a      	mov	r2, sp
 8004fd0:	f000 fc36 	bl	8005840 <_fstat_r>
 8004fd4:	2800      	cmp	r0, #0
 8004fd6:	dbf2      	blt.n	8004fbe <__swhatbuf_r+0x12>
 8004fd8:	9a01      	ldr	r2, [sp, #4]
 8004fda:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8004fde:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8004fe2:	425a      	negs	r2, r3
 8004fe4:	415a      	adcs	r2, r3
 8004fe6:	602a      	str	r2, [r5, #0]
 8004fe8:	e7ee      	b.n	8004fc8 <__swhatbuf_r+0x1c>
 8004fea:	2340      	movs	r3, #64	; 0x40
 8004fec:	2000      	movs	r0, #0
 8004fee:	6023      	str	r3, [r4, #0]
 8004ff0:	b016      	add	sp, #88	; 0x58
 8004ff2:	bd70      	pop	{r4, r5, r6, pc}

08004ff4 <__smakebuf_r>:
 8004ff4:	898b      	ldrh	r3, [r1, #12]
 8004ff6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004ff8:	079d      	lsls	r5, r3, #30
 8004ffa:	4606      	mov	r6, r0
 8004ffc:	460c      	mov	r4, r1
 8004ffe:	d507      	bpl.n	8005010 <__smakebuf_r+0x1c>
 8005000:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8005004:	6023      	str	r3, [r4, #0]
 8005006:	6123      	str	r3, [r4, #16]
 8005008:	2301      	movs	r3, #1
 800500a:	6163      	str	r3, [r4, #20]
 800500c:	b002      	add	sp, #8
 800500e:	bd70      	pop	{r4, r5, r6, pc}
 8005010:	ab01      	add	r3, sp, #4
 8005012:	466a      	mov	r2, sp
 8005014:	f7ff ffca 	bl	8004fac <__swhatbuf_r>
 8005018:	9900      	ldr	r1, [sp, #0]
 800501a:	4605      	mov	r5, r0
 800501c:	4630      	mov	r0, r6
 800501e:	f000 f877 	bl	8005110 <_malloc_r>
 8005022:	b948      	cbnz	r0, 8005038 <__smakebuf_r+0x44>
 8005024:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005028:	059a      	lsls	r2, r3, #22
 800502a:	d4ef      	bmi.n	800500c <__smakebuf_r+0x18>
 800502c:	f023 0303 	bic.w	r3, r3, #3
 8005030:	f043 0302 	orr.w	r3, r3, #2
 8005034:	81a3      	strh	r3, [r4, #12]
 8005036:	e7e3      	b.n	8005000 <__smakebuf_r+0xc>
 8005038:	4b0d      	ldr	r3, [pc, #52]	; (8005070 <__smakebuf_r+0x7c>)
 800503a:	62b3      	str	r3, [r6, #40]	; 0x28
 800503c:	89a3      	ldrh	r3, [r4, #12]
 800503e:	6020      	str	r0, [r4, #0]
 8005040:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005044:	81a3      	strh	r3, [r4, #12]
 8005046:	9b00      	ldr	r3, [sp, #0]
 8005048:	6163      	str	r3, [r4, #20]
 800504a:	9b01      	ldr	r3, [sp, #4]
 800504c:	6120      	str	r0, [r4, #16]
 800504e:	b15b      	cbz	r3, 8005068 <__smakebuf_r+0x74>
 8005050:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005054:	4630      	mov	r0, r6
 8005056:	f000 fc05 	bl	8005864 <_isatty_r>
 800505a:	b128      	cbz	r0, 8005068 <__smakebuf_r+0x74>
 800505c:	89a3      	ldrh	r3, [r4, #12]
 800505e:	f023 0303 	bic.w	r3, r3, #3
 8005062:	f043 0301 	orr.w	r3, r3, #1
 8005066:	81a3      	strh	r3, [r4, #12]
 8005068:	89a3      	ldrh	r3, [r4, #12]
 800506a:	431d      	orrs	r5, r3
 800506c:	81a5      	strh	r5, [r4, #12]
 800506e:	e7cd      	b.n	800500c <__smakebuf_r+0x18>
 8005070:	08004e61 	.word	0x08004e61

08005074 <_free_r>:
 8005074:	b538      	push	{r3, r4, r5, lr}
 8005076:	4605      	mov	r5, r0
 8005078:	2900      	cmp	r1, #0
 800507a:	d045      	beq.n	8005108 <_free_r+0x94>
 800507c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005080:	1f0c      	subs	r4, r1, #4
 8005082:	2b00      	cmp	r3, #0
 8005084:	bfb8      	it	lt
 8005086:	18e4      	addlt	r4, r4, r3
 8005088:	f000 fc0e 	bl	80058a8 <__malloc_lock>
 800508c:	4a1f      	ldr	r2, [pc, #124]	; (800510c <_free_r+0x98>)
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	4610      	mov	r0, r2
 8005092:	b933      	cbnz	r3, 80050a2 <_free_r+0x2e>
 8005094:	6063      	str	r3, [r4, #4]
 8005096:	6014      	str	r4, [r2, #0]
 8005098:	4628      	mov	r0, r5
 800509a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800509e:	f000 bc04 	b.w	80058aa <__malloc_unlock>
 80050a2:	42a3      	cmp	r3, r4
 80050a4:	d90c      	bls.n	80050c0 <_free_r+0x4c>
 80050a6:	6821      	ldr	r1, [r4, #0]
 80050a8:	1862      	adds	r2, r4, r1
 80050aa:	4293      	cmp	r3, r2
 80050ac:	bf04      	itt	eq
 80050ae:	681a      	ldreq	r2, [r3, #0]
 80050b0:	685b      	ldreq	r3, [r3, #4]
 80050b2:	6063      	str	r3, [r4, #4]
 80050b4:	bf04      	itt	eq
 80050b6:	1852      	addeq	r2, r2, r1
 80050b8:	6022      	streq	r2, [r4, #0]
 80050ba:	6004      	str	r4, [r0, #0]
 80050bc:	e7ec      	b.n	8005098 <_free_r+0x24>
 80050be:	4613      	mov	r3, r2
 80050c0:	685a      	ldr	r2, [r3, #4]
 80050c2:	b10a      	cbz	r2, 80050c8 <_free_r+0x54>
 80050c4:	42a2      	cmp	r2, r4
 80050c6:	d9fa      	bls.n	80050be <_free_r+0x4a>
 80050c8:	6819      	ldr	r1, [r3, #0]
 80050ca:	1858      	adds	r0, r3, r1
 80050cc:	42a0      	cmp	r0, r4
 80050ce:	d10b      	bne.n	80050e8 <_free_r+0x74>
 80050d0:	6820      	ldr	r0, [r4, #0]
 80050d2:	4401      	add	r1, r0
 80050d4:	1858      	adds	r0, r3, r1
 80050d6:	4282      	cmp	r2, r0
 80050d8:	6019      	str	r1, [r3, #0]
 80050da:	d1dd      	bne.n	8005098 <_free_r+0x24>
 80050dc:	6810      	ldr	r0, [r2, #0]
 80050de:	6852      	ldr	r2, [r2, #4]
 80050e0:	605a      	str	r2, [r3, #4]
 80050e2:	4401      	add	r1, r0
 80050e4:	6019      	str	r1, [r3, #0]
 80050e6:	e7d7      	b.n	8005098 <_free_r+0x24>
 80050e8:	d902      	bls.n	80050f0 <_free_r+0x7c>
 80050ea:	230c      	movs	r3, #12
 80050ec:	602b      	str	r3, [r5, #0]
 80050ee:	e7d3      	b.n	8005098 <_free_r+0x24>
 80050f0:	6820      	ldr	r0, [r4, #0]
 80050f2:	1821      	adds	r1, r4, r0
 80050f4:	428a      	cmp	r2, r1
 80050f6:	bf04      	itt	eq
 80050f8:	6811      	ldreq	r1, [r2, #0]
 80050fa:	6852      	ldreq	r2, [r2, #4]
 80050fc:	6062      	str	r2, [r4, #4]
 80050fe:	bf04      	itt	eq
 8005100:	1809      	addeq	r1, r1, r0
 8005102:	6021      	streq	r1, [r4, #0]
 8005104:	605c      	str	r4, [r3, #4]
 8005106:	e7c7      	b.n	8005098 <_free_r+0x24>
 8005108:	bd38      	pop	{r3, r4, r5, pc}
 800510a:	bf00      	nop
 800510c:	20000664 	.word	0x20000664

08005110 <_malloc_r>:
 8005110:	b570      	push	{r4, r5, r6, lr}
 8005112:	1ccd      	adds	r5, r1, #3
 8005114:	f025 0503 	bic.w	r5, r5, #3
 8005118:	3508      	adds	r5, #8
 800511a:	2d0c      	cmp	r5, #12
 800511c:	bf38      	it	cc
 800511e:	250c      	movcc	r5, #12
 8005120:	2d00      	cmp	r5, #0
 8005122:	4606      	mov	r6, r0
 8005124:	db01      	blt.n	800512a <_malloc_r+0x1a>
 8005126:	42a9      	cmp	r1, r5
 8005128:	d903      	bls.n	8005132 <_malloc_r+0x22>
 800512a:	230c      	movs	r3, #12
 800512c:	6033      	str	r3, [r6, #0]
 800512e:	2000      	movs	r0, #0
 8005130:	bd70      	pop	{r4, r5, r6, pc}
 8005132:	f000 fbb9 	bl	80058a8 <__malloc_lock>
 8005136:	4a21      	ldr	r2, [pc, #132]	; (80051bc <_malloc_r+0xac>)
 8005138:	6814      	ldr	r4, [r2, #0]
 800513a:	4621      	mov	r1, r4
 800513c:	b991      	cbnz	r1, 8005164 <_malloc_r+0x54>
 800513e:	4c20      	ldr	r4, [pc, #128]	; (80051c0 <_malloc_r+0xb0>)
 8005140:	6823      	ldr	r3, [r4, #0]
 8005142:	b91b      	cbnz	r3, 800514c <_malloc_r+0x3c>
 8005144:	4630      	mov	r0, r6
 8005146:	f000 fb05 	bl	8005754 <_sbrk_r>
 800514a:	6020      	str	r0, [r4, #0]
 800514c:	4629      	mov	r1, r5
 800514e:	4630      	mov	r0, r6
 8005150:	f000 fb00 	bl	8005754 <_sbrk_r>
 8005154:	1c43      	adds	r3, r0, #1
 8005156:	d124      	bne.n	80051a2 <_malloc_r+0x92>
 8005158:	230c      	movs	r3, #12
 800515a:	6033      	str	r3, [r6, #0]
 800515c:	4630      	mov	r0, r6
 800515e:	f000 fba4 	bl	80058aa <__malloc_unlock>
 8005162:	e7e4      	b.n	800512e <_malloc_r+0x1e>
 8005164:	680b      	ldr	r3, [r1, #0]
 8005166:	1b5b      	subs	r3, r3, r5
 8005168:	d418      	bmi.n	800519c <_malloc_r+0x8c>
 800516a:	2b0b      	cmp	r3, #11
 800516c:	d90f      	bls.n	800518e <_malloc_r+0x7e>
 800516e:	600b      	str	r3, [r1, #0]
 8005170:	50cd      	str	r5, [r1, r3]
 8005172:	18cc      	adds	r4, r1, r3
 8005174:	4630      	mov	r0, r6
 8005176:	f000 fb98 	bl	80058aa <__malloc_unlock>
 800517a:	f104 000b 	add.w	r0, r4, #11
 800517e:	1d23      	adds	r3, r4, #4
 8005180:	f020 0007 	bic.w	r0, r0, #7
 8005184:	1ac3      	subs	r3, r0, r3
 8005186:	d0d3      	beq.n	8005130 <_malloc_r+0x20>
 8005188:	425a      	negs	r2, r3
 800518a:	50e2      	str	r2, [r4, r3]
 800518c:	e7d0      	b.n	8005130 <_malloc_r+0x20>
 800518e:	428c      	cmp	r4, r1
 8005190:	684b      	ldr	r3, [r1, #4]
 8005192:	bf16      	itet	ne
 8005194:	6063      	strne	r3, [r4, #4]
 8005196:	6013      	streq	r3, [r2, #0]
 8005198:	460c      	movne	r4, r1
 800519a:	e7eb      	b.n	8005174 <_malloc_r+0x64>
 800519c:	460c      	mov	r4, r1
 800519e:	6849      	ldr	r1, [r1, #4]
 80051a0:	e7cc      	b.n	800513c <_malloc_r+0x2c>
 80051a2:	1cc4      	adds	r4, r0, #3
 80051a4:	f024 0403 	bic.w	r4, r4, #3
 80051a8:	42a0      	cmp	r0, r4
 80051aa:	d005      	beq.n	80051b8 <_malloc_r+0xa8>
 80051ac:	1a21      	subs	r1, r4, r0
 80051ae:	4630      	mov	r0, r6
 80051b0:	f000 fad0 	bl	8005754 <_sbrk_r>
 80051b4:	3001      	adds	r0, #1
 80051b6:	d0cf      	beq.n	8005158 <_malloc_r+0x48>
 80051b8:	6025      	str	r5, [r4, #0]
 80051ba:	e7db      	b.n	8005174 <_malloc_r+0x64>
 80051bc:	20000664 	.word	0x20000664
 80051c0:	20000668 	.word	0x20000668

080051c4 <__sfputc_r>:
 80051c4:	6893      	ldr	r3, [r2, #8]
 80051c6:	3b01      	subs	r3, #1
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	b410      	push	{r4}
 80051cc:	6093      	str	r3, [r2, #8]
 80051ce:	da08      	bge.n	80051e2 <__sfputc_r+0x1e>
 80051d0:	6994      	ldr	r4, [r2, #24]
 80051d2:	42a3      	cmp	r3, r4
 80051d4:	db01      	blt.n	80051da <__sfputc_r+0x16>
 80051d6:	290a      	cmp	r1, #10
 80051d8:	d103      	bne.n	80051e2 <__sfputc_r+0x1e>
 80051da:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051de:	f7ff bcab 	b.w	8004b38 <__swbuf_r>
 80051e2:	6813      	ldr	r3, [r2, #0]
 80051e4:	1c58      	adds	r0, r3, #1
 80051e6:	6010      	str	r0, [r2, #0]
 80051e8:	7019      	strb	r1, [r3, #0]
 80051ea:	4608      	mov	r0, r1
 80051ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80051f0:	4770      	bx	lr

080051f2 <__sfputs_r>:
 80051f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051f4:	4606      	mov	r6, r0
 80051f6:	460f      	mov	r7, r1
 80051f8:	4614      	mov	r4, r2
 80051fa:	18d5      	adds	r5, r2, r3
 80051fc:	42ac      	cmp	r4, r5
 80051fe:	d101      	bne.n	8005204 <__sfputs_r+0x12>
 8005200:	2000      	movs	r0, #0
 8005202:	e007      	b.n	8005214 <__sfputs_r+0x22>
 8005204:	463a      	mov	r2, r7
 8005206:	f814 1b01 	ldrb.w	r1, [r4], #1
 800520a:	4630      	mov	r0, r6
 800520c:	f7ff ffda 	bl	80051c4 <__sfputc_r>
 8005210:	1c43      	adds	r3, r0, #1
 8005212:	d1f3      	bne.n	80051fc <__sfputs_r+0xa>
 8005214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005218 <_vfiprintf_r>:
 8005218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800521c:	460c      	mov	r4, r1
 800521e:	b09d      	sub	sp, #116	; 0x74
 8005220:	4617      	mov	r7, r2
 8005222:	461d      	mov	r5, r3
 8005224:	4606      	mov	r6, r0
 8005226:	b118      	cbz	r0, 8005230 <_vfiprintf_r+0x18>
 8005228:	6983      	ldr	r3, [r0, #24]
 800522a:	b90b      	cbnz	r3, 8005230 <_vfiprintf_r+0x18>
 800522c:	f7ff fe34 	bl	8004e98 <__sinit>
 8005230:	4b7c      	ldr	r3, [pc, #496]	; (8005424 <_vfiprintf_r+0x20c>)
 8005232:	429c      	cmp	r4, r3
 8005234:	d158      	bne.n	80052e8 <_vfiprintf_r+0xd0>
 8005236:	6874      	ldr	r4, [r6, #4]
 8005238:	89a3      	ldrh	r3, [r4, #12]
 800523a:	0718      	lsls	r0, r3, #28
 800523c:	d55e      	bpl.n	80052fc <_vfiprintf_r+0xe4>
 800523e:	6923      	ldr	r3, [r4, #16]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d05b      	beq.n	80052fc <_vfiprintf_r+0xe4>
 8005244:	2300      	movs	r3, #0
 8005246:	9309      	str	r3, [sp, #36]	; 0x24
 8005248:	2320      	movs	r3, #32
 800524a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800524e:	2330      	movs	r3, #48	; 0x30
 8005250:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005254:	9503      	str	r5, [sp, #12]
 8005256:	f04f 0b01 	mov.w	fp, #1
 800525a:	46b8      	mov	r8, r7
 800525c:	4645      	mov	r5, r8
 800525e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005262:	b10b      	cbz	r3, 8005268 <_vfiprintf_r+0x50>
 8005264:	2b25      	cmp	r3, #37	; 0x25
 8005266:	d154      	bne.n	8005312 <_vfiprintf_r+0xfa>
 8005268:	ebb8 0a07 	subs.w	sl, r8, r7
 800526c:	d00b      	beq.n	8005286 <_vfiprintf_r+0x6e>
 800526e:	4653      	mov	r3, sl
 8005270:	463a      	mov	r2, r7
 8005272:	4621      	mov	r1, r4
 8005274:	4630      	mov	r0, r6
 8005276:	f7ff ffbc 	bl	80051f2 <__sfputs_r>
 800527a:	3001      	adds	r0, #1
 800527c:	f000 80c2 	beq.w	8005404 <_vfiprintf_r+0x1ec>
 8005280:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005282:	4453      	add	r3, sl
 8005284:	9309      	str	r3, [sp, #36]	; 0x24
 8005286:	f898 3000 	ldrb.w	r3, [r8]
 800528a:	2b00      	cmp	r3, #0
 800528c:	f000 80ba 	beq.w	8005404 <_vfiprintf_r+0x1ec>
 8005290:	2300      	movs	r3, #0
 8005292:	f04f 32ff 	mov.w	r2, #4294967295
 8005296:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800529a:	9304      	str	r3, [sp, #16]
 800529c:	9307      	str	r3, [sp, #28]
 800529e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80052a2:	931a      	str	r3, [sp, #104]	; 0x68
 80052a4:	46a8      	mov	r8, r5
 80052a6:	2205      	movs	r2, #5
 80052a8:	f818 1b01 	ldrb.w	r1, [r8], #1
 80052ac:	485e      	ldr	r0, [pc, #376]	; (8005428 <_vfiprintf_r+0x210>)
 80052ae:	f7fa ff8f 	bl	80001d0 <memchr>
 80052b2:	9b04      	ldr	r3, [sp, #16]
 80052b4:	bb78      	cbnz	r0, 8005316 <_vfiprintf_r+0xfe>
 80052b6:	06d9      	lsls	r1, r3, #27
 80052b8:	bf44      	itt	mi
 80052ba:	2220      	movmi	r2, #32
 80052bc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052c0:	071a      	lsls	r2, r3, #28
 80052c2:	bf44      	itt	mi
 80052c4:	222b      	movmi	r2, #43	; 0x2b
 80052c6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80052ca:	782a      	ldrb	r2, [r5, #0]
 80052cc:	2a2a      	cmp	r2, #42	; 0x2a
 80052ce:	d02a      	beq.n	8005326 <_vfiprintf_r+0x10e>
 80052d0:	9a07      	ldr	r2, [sp, #28]
 80052d2:	46a8      	mov	r8, r5
 80052d4:	2000      	movs	r0, #0
 80052d6:	250a      	movs	r5, #10
 80052d8:	4641      	mov	r1, r8
 80052da:	f811 3b01 	ldrb.w	r3, [r1], #1
 80052de:	3b30      	subs	r3, #48	; 0x30
 80052e0:	2b09      	cmp	r3, #9
 80052e2:	d969      	bls.n	80053b8 <_vfiprintf_r+0x1a0>
 80052e4:	b360      	cbz	r0, 8005340 <_vfiprintf_r+0x128>
 80052e6:	e024      	b.n	8005332 <_vfiprintf_r+0x11a>
 80052e8:	4b50      	ldr	r3, [pc, #320]	; (800542c <_vfiprintf_r+0x214>)
 80052ea:	429c      	cmp	r4, r3
 80052ec:	d101      	bne.n	80052f2 <_vfiprintf_r+0xda>
 80052ee:	68b4      	ldr	r4, [r6, #8]
 80052f0:	e7a2      	b.n	8005238 <_vfiprintf_r+0x20>
 80052f2:	4b4f      	ldr	r3, [pc, #316]	; (8005430 <_vfiprintf_r+0x218>)
 80052f4:	429c      	cmp	r4, r3
 80052f6:	bf08      	it	eq
 80052f8:	68f4      	ldreq	r4, [r6, #12]
 80052fa:	e79d      	b.n	8005238 <_vfiprintf_r+0x20>
 80052fc:	4621      	mov	r1, r4
 80052fe:	4630      	mov	r0, r6
 8005300:	f7ff fc6c 	bl	8004bdc <__swsetup_r>
 8005304:	2800      	cmp	r0, #0
 8005306:	d09d      	beq.n	8005244 <_vfiprintf_r+0x2c>
 8005308:	f04f 30ff 	mov.w	r0, #4294967295
 800530c:	b01d      	add	sp, #116	; 0x74
 800530e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005312:	46a8      	mov	r8, r5
 8005314:	e7a2      	b.n	800525c <_vfiprintf_r+0x44>
 8005316:	4a44      	ldr	r2, [pc, #272]	; (8005428 <_vfiprintf_r+0x210>)
 8005318:	1a80      	subs	r0, r0, r2
 800531a:	fa0b f000 	lsl.w	r0, fp, r0
 800531e:	4318      	orrs	r0, r3
 8005320:	9004      	str	r0, [sp, #16]
 8005322:	4645      	mov	r5, r8
 8005324:	e7be      	b.n	80052a4 <_vfiprintf_r+0x8c>
 8005326:	9a03      	ldr	r2, [sp, #12]
 8005328:	1d11      	adds	r1, r2, #4
 800532a:	6812      	ldr	r2, [r2, #0]
 800532c:	9103      	str	r1, [sp, #12]
 800532e:	2a00      	cmp	r2, #0
 8005330:	db01      	blt.n	8005336 <_vfiprintf_r+0x11e>
 8005332:	9207      	str	r2, [sp, #28]
 8005334:	e004      	b.n	8005340 <_vfiprintf_r+0x128>
 8005336:	4252      	negs	r2, r2
 8005338:	f043 0302 	orr.w	r3, r3, #2
 800533c:	9207      	str	r2, [sp, #28]
 800533e:	9304      	str	r3, [sp, #16]
 8005340:	f898 3000 	ldrb.w	r3, [r8]
 8005344:	2b2e      	cmp	r3, #46	; 0x2e
 8005346:	d10e      	bne.n	8005366 <_vfiprintf_r+0x14e>
 8005348:	f898 3001 	ldrb.w	r3, [r8, #1]
 800534c:	2b2a      	cmp	r3, #42	; 0x2a
 800534e:	d138      	bne.n	80053c2 <_vfiprintf_r+0x1aa>
 8005350:	9b03      	ldr	r3, [sp, #12]
 8005352:	1d1a      	adds	r2, r3, #4
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	9203      	str	r2, [sp, #12]
 8005358:	2b00      	cmp	r3, #0
 800535a:	bfb8      	it	lt
 800535c:	f04f 33ff 	movlt.w	r3, #4294967295
 8005360:	f108 0802 	add.w	r8, r8, #2
 8005364:	9305      	str	r3, [sp, #20]
 8005366:	4d33      	ldr	r5, [pc, #204]	; (8005434 <_vfiprintf_r+0x21c>)
 8005368:	f898 1000 	ldrb.w	r1, [r8]
 800536c:	2203      	movs	r2, #3
 800536e:	4628      	mov	r0, r5
 8005370:	f7fa ff2e 	bl	80001d0 <memchr>
 8005374:	b140      	cbz	r0, 8005388 <_vfiprintf_r+0x170>
 8005376:	2340      	movs	r3, #64	; 0x40
 8005378:	1b40      	subs	r0, r0, r5
 800537a:	fa03 f000 	lsl.w	r0, r3, r0
 800537e:	9b04      	ldr	r3, [sp, #16]
 8005380:	4303      	orrs	r3, r0
 8005382:	f108 0801 	add.w	r8, r8, #1
 8005386:	9304      	str	r3, [sp, #16]
 8005388:	f898 1000 	ldrb.w	r1, [r8]
 800538c:	482a      	ldr	r0, [pc, #168]	; (8005438 <_vfiprintf_r+0x220>)
 800538e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8005392:	2206      	movs	r2, #6
 8005394:	f108 0701 	add.w	r7, r8, #1
 8005398:	f7fa ff1a 	bl	80001d0 <memchr>
 800539c:	2800      	cmp	r0, #0
 800539e:	d037      	beq.n	8005410 <_vfiprintf_r+0x1f8>
 80053a0:	4b26      	ldr	r3, [pc, #152]	; (800543c <_vfiprintf_r+0x224>)
 80053a2:	bb1b      	cbnz	r3, 80053ec <_vfiprintf_r+0x1d4>
 80053a4:	9b03      	ldr	r3, [sp, #12]
 80053a6:	3307      	adds	r3, #7
 80053a8:	f023 0307 	bic.w	r3, r3, #7
 80053ac:	3308      	adds	r3, #8
 80053ae:	9303      	str	r3, [sp, #12]
 80053b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80053b2:	444b      	add	r3, r9
 80053b4:	9309      	str	r3, [sp, #36]	; 0x24
 80053b6:	e750      	b.n	800525a <_vfiprintf_r+0x42>
 80053b8:	fb05 3202 	mla	r2, r5, r2, r3
 80053bc:	2001      	movs	r0, #1
 80053be:	4688      	mov	r8, r1
 80053c0:	e78a      	b.n	80052d8 <_vfiprintf_r+0xc0>
 80053c2:	2300      	movs	r3, #0
 80053c4:	f108 0801 	add.w	r8, r8, #1
 80053c8:	9305      	str	r3, [sp, #20]
 80053ca:	4619      	mov	r1, r3
 80053cc:	250a      	movs	r5, #10
 80053ce:	4640      	mov	r0, r8
 80053d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80053d4:	3a30      	subs	r2, #48	; 0x30
 80053d6:	2a09      	cmp	r2, #9
 80053d8:	d903      	bls.n	80053e2 <_vfiprintf_r+0x1ca>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d0c3      	beq.n	8005366 <_vfiprintf_r+0x14e>
 80053de:	9105      	str	r1, [sp, #20]
 80053e0:	e7c1      	b.n	8005366 <_vfiprintf_r+0x14e>
 80053e2:	fb05 2101 	mla	r1, r5, r1, r2
 80053e6:	2301      	movs	r3, #1
 80053e8:	4680      	mov	r8, r0
 80053ea:	e7f0      	b.n	80053ce <_vfiprintf_r+0x1b6>
 80053ec:	ab03      	add	r3, sp, #12
 80053ee:	9300      	str	r3, [sp, #0]
 80053f0:	4622      	mov	r2, r4
 80053f2:	4b13      	ldr	r3, [pc, #76]	; (8005440 <_vfiprintf_r+0x228>)
 80053f4:	a904      	add	r1, sp, #16
 80053f6:	4630      	mov	r0, r6
 80053f8:	f3af 8000 	nop.w
 80053fc:	f1b0 3fff 	cmp.w	r0, #4294967295
 8005400:	4681      	mov	r9, r0
 8005402:	d1d5      	bne.n	80053b0 <_vfiprintf_r+0x198>
 8005404:	89a3      	ldrh	r3, [r4, #12]
 8005406:	065b      	lsls	r3, r3, #25
 8005408:	f53f af7e 	bmi.w	8005308 <_vfiprintf_r+0xf0>
 800540c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800540e:	e77d      	b.n	800530c <_vfiprintf_r+0xf4>
 8005410:	ab03      	add	r3, sp, #12
 8005412:	9300      	str	r3, [sp, #0]
 8005414:	4622      	mov	r2, r4
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <_vfiprintf_r+0x228>)
 8005418:	a904      	add	r1, sp, #16
 800541a:	4630      	mov	r0, r6
 800541c:	f000 f888 	bl	8005530 <_printf_i>
 8005420:	e7ec      	b.n	80053fc <_vfiprintf_r+0x1e4>
 8005422:	bf00      	nop
 8005424:	08006858 	.word	0x08006858
 8005428:	08006898 	.word	0x08006898
 800542c:	08006878 	.word	0x08006878
 8005430:	08006838 	.word	0x08006838
 8005434:	0800689e 	.word	0x0800689e
 8005438:	080068a2 	.word	0x080068a2
 800543c:	00000000 	.word	0x00000000
 8005440:	080051f3 	.word	0x080051f3

08005444 <_printf_common>:
 8005444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005448:	4691      	mov	r9, r2
 800544a:	461f      	mov	r7, r3
 800544c:	688a      	ldr	r2, [r1, #8]
 800544e:	690b      	ldr	r3, [r1, #16]
 8005450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005454:	4293      	cmp	r3, r2
 8005456:	bfb8      	it	lt
 8005458:	4613      	movlt	r3, r2
 800545a:	f8c9 3000 	str.w	r3, [r9]
 800545e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8005462:	4606      	mov	r6, r0
 8005464:	460c      	mov	r4, r1
 8005466:	b112      	cbz	r2, 800546e <_printf_common+0x2a>
 8005468:	3301      	adds	r3, #1
 800546a:	f8c9 3000 	str.w	r3, [r9]
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	0699      	lsls	r1, r3, #26
 8005472:	bf42      	ittt	mi
 8005474:	f8d9 3000 	ldrmi.w	r3, [r9]
 8005478:	3302      	addmi	r3, #2
 800547a:	f8c9 3000 	strmi.w	r3, [r9]
 800547e:	6825      	ldr	r5, [r4, #0]
 8005480:	f015 0506 	ands.w	r5, r5, #6
 8005484:	d107      	bne.n	8005496 <_printf_common+0x52>
 8005486:	f104 0a19 	add.w	sl, r4, #25
 800548a:	68e3      	ldr	r3, [r4, #12]
 800548c:	f8d9 2000 	ldr.w	r2, [r9]
 8005490:	1a9b      	subs	r3, r3, r2
 8005492:	42ab      	cmp	r3, r5
 8005494:	dc28      	bgt.n	80054e8 <_printf_common+0xa4>
 8005496:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 800549a:	6822      	ldr	r2, [r4, #0]
 800549c:	3300      	adds	r3, #0
 800549e:	bf18      	it	ne
 80054a0:	2301      	movne	r3, #1
 80054a2:	0692      	lsls	r2, r2, #26
 80054a4:	d42d      	bmi.n	8005502 <_printf_common+0xbe>
 80054a6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80054aa:	4639      	mov	r1, r7
 80054ac:	4630      	mov	r0, r6
 80054ae:	47c0      	blx	r8
 80054b0:	3001      	adds	r0, #1
 80054b2:	d020      	beq.n	80054f6 <_printf_common+0xb2>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	68e5      	ldr	r5, [r4, #12]
 80054b8:	f8d9 2000 	ldr.w	r2, [r9]
 80054bc:	f003 0306 	and.w	r3, r3, #6
 80054c0:	2b04      	cmp	r3, #4
 80054c2:	bf08      	it	eq
 80054c4:	1aad      	subeq	r5, r5, r2
 80054c6:	68a3      	ldr	r3, [r4, #8]
 80054c8:	6922      	ldr	r2, [r4, #16]
 80054ca:	bf0c      	ite	eq
 80054cc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80054d0:	2500      	movne	r5, #0
 80054d2:	4293      	cmp	r3, r2
 80054d4:	bfc4      	itt	gt
 80054d6:	1a9b      	subgt	r3, r3, r2
 80054d8:	18ed      	addgt	r5, r5, r3
 80054da:	f04f 0900 	mov.w	r9, #0
 80054de:	341a      	adds	r4, #26
 80054e0:	454d      	cmp	r5, r9
 80054e2:	d11a      	bne.n	800551a <_printf_common+0xd6>
 80054e4:	2000      	movs	r0, #0
 80054e6:	e008      	b.n	80054fa <_printf_common+0xb6>
 80054e8:	2301      	movs	r3, #1
 80054ea:	4652      	mov	r2, sl
 80054ec:	4639      	mov	r1, r7
 80054ee:	4630      	mov	r0, r6
 80054f0:	47c0      	blx	r8
 80054f2:	3001      	adds	r0, #1
 80054f4:	d103      	bne.n	80054fe <_printf_common+0xba>
 80054f6:	f04f 30ff 	mov.w	r0, #4294967295
 80054fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054fe:	3501      	adds	r5, #1
 8005500:	e7c3      	b.n	800548a <_printf_common+0x46>
 8005502:	18e1      	adds	r1, r4, r3
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	2030      	movs	r0, #48	; 0x30
 8005508:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800550c:	4422      	add	r2, r4
 800550e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005512:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8005516:	3302      	adds	r3, #2
 8005518:	e7c5      	b.n	80054a6 <_printf_common+0x62>
 800551a:	2301      	movs	r3, #1
 800551c:	4622      	mov	r2, r4
 800551e:	4639      	mov	r1, r7
 8005520:	4630      	mov	r0, r6
 8005522:	47c0      	blx	r8
 8005524:	3001      	adds	r0, #1
 8005526:	d0e6      	beq.n	80054f6 <_printf_common+0xb2>
 8005528:	f109 0901 	add.w	r9, r9, #1
 800552c:	e7d8      	b.n	80054e0 <_printf_common+0x9c>
	...

08005530 <_printf_i>:
 8005530:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005534:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8005538:	460c      	mov	r4, r1
 800553a:	7e09      	ldrb	r1, [r1, #24]
 800553c:	b085      	sub	sp, #20
 800553e:	296e      	cmp	r1, #110	; 0x6e
 8005540:	4617      	mov	r7, r2
 8005542:	4606      	mov	r6, r0
 8005544:	4698      	mov	r8, r3
 8005546:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005548:	f000 80b3 	beq.w	80056b2 <_printf_i+0x182>
 800554c:	d822      	bhi.n	8005594 <_printf_i+0x64>
 800554e:	2963      	cmp	r1, #99	; 0x63
 8005550:	d036      	beq.n	80055c0 <_printf_i+0x90>
 8005552:	d80a      	bhi.n	800556a <_printf_i+0x3a>
 8005554:	2900      	cmp	r1, #0
 8005556:	f000 80b9 	beq.w	80056cc <_printf_i+0x19c>
 800555a:	2958      	cmp	r1, #88	; 0x58
 800555c:	f000 8083 	beq.w	8005666 <_printf_i+0x136>
 8005560:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8005564:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8005568:	e032      	b.n	80055d0 <_printf_i+0xa0>
 800556a:	2964      	cmp	r1, #100	; 0x64
 800556c:	d001      	beq.n	8005572 <_printf_i+0x42>
 800556e:	2969      	cmp	r1, #105	; 0x69
 8005570:	d1f6      	bne.n	8005560 <_printf_i+0x30>
 8005572:	6820      	ldr	r0, [r4, #0]
 8005574:	6813      	ldr	r3, [r2, #0]
 8005576:	0605      	lsls	r5, r0, #24
 8005578:	f103 0104 	add.w	r1, r3, #4
 800557c:	d52a      	bpl.n	80055d4 <_printf_i+0xa4>
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	6011      	str	r1, [r2, #0]
 8005582:	2b00      	cmp	r3, #0
 8005584:	da03      	bge.n	800558e <_printf_i+0x5e>
 8005586:	222d      	movs	r2, #45	; 0x2d
 8005588:	425b      	negs	r3, r3
 800558a:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800558e:	486f      	ldr	r0, [pc, #444]	; (800574c <_printf_i+0x21c>)
 8005590:	220a      	movs	r2, #10
 8005592:	e039      	b.n	8005608 <_printf_i+0xd8>
 8005594:	2973      	cmp	r1, #115	; 0x73
 8005596:	f000 809d 	beq.w	80056d4 <_printf_i+0x1a4>
 800559a:	d808      	bhi.n	80055ae <_printf_i+0x7e>
 800559c:	296f      	cmp	r1, #111	; 0x6f
 800559e:	d020      	beq.n	80055e2 <_printf_i+0xb2>
 80055a0:	2970      	cmp	r1, #112	; 0x70
 80055a2:	d1dd      	bne.n	8005560 <_printf_i+0x30>
 80055a4:	6823      	ldr	r3, [r4, #0]
 80055a6:	f043 0320 	orr.w	r3, r3, #32
 80055aa:	6023      	str	r3, [r4, #0]
 80055ac:	e003      	b.n	80055b6 <_printf_i+0x86>
 80055ae:	2975      	cmp	r1, #117	; 0x75
 80055b0:	d017      	beq.n	80055e2 <_printf_i+0xb2>
 80055b2:	2978      	cmp	r1, #120	; 0x78
 80055b4:	d1d4      	bne.n	8005560 <_printf_i+0x30>
 80055b6:	2378      	movs	r3, #120	; 0x78
 80055b8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80055bc:	4864      	ldr	r0, [pc, #400]	; (8005750 <_printf_i+0x220>)
 80055be:	e055      	b.n	800566c <_printf_i+0x13c>
 80055c0:	6813      	ldr	r3, [r2, #0]
 80055c2:	1d19      	adds	r1, r3, #4
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6011      	str	r1, [r2, #0]
 80055c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80055cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80055d0:	2301      	movs	r3, #1
 80055d2:	e08c      	b.n	80056ee <_printf_i+0x1be>
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	6011      	str	r1, [r2, #0]
 80055d8:	f010 0f40 	tst.w	r0, #64	; 0x40
 80055dc:	bf18      	it	ne
 80055de:	b21b      	sxthne	r3, r3
 80055e0:	e7cf      	b.n	8005582 <_printf_i+0x52>
 80055e2:	6813      	ldr	r3, [r2, #0]
 80055e4:	6825      	ldr	r5, [r4, #0]
 80055e6:	1d18      	adds	r0, r3, #4
 80055e8:	6010      	str	r0, [r2, #0]
 80055ea:	0628      	lsls	r0, r5, #24
 80055ec:	d501      	bpl.n	80055f2 <_printf_i+0xc2>
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	e002      	b.n	80055f8 <_printf_i+0xc8>
 80055f2:	0668      	lsls	r0, r5, #25
 80055f4:	d5fb      	bpl.n	80055ee <_printf_i+0xbe>
 80055f6:	881b      	ldrh	r3, [r3, #0]
 80055f8:	4854      	ldr	r0, [pc, #336]	; (800574c <_printf_i+0x21c>)
 80055fa:	296f      	cmp	r1, #111	; 0x6f
 80055fc:	bf14      	ite	ne
 80055fe:	220a      	movne	r2, #10
 8005600:	2208      	moveq	r2, #8
 8005602:	2100      	movs	r1, #0
 8005604:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005608:	6865      	ldr	r5, [r4, #4]
 800560a:	60a5      	str	r5, [r4, #8]
 800560c:	2d00      	cmp	r5, #0
 800560e:	f2c0 8095 	blt.w	800573c <_printf_i+0x20c>
 8005612:	6821      	ldr	r1, [r4, #0]
 8005614:	f021 0104 	bic.w	r1, r1, #4
 8005618:	6021      	str	r1, [r4, #0]
 800561a:	2b00      	cmp	r3, #0
 800561c:	d13d      	bne.n	800569a <_printf_i+0x16a>
 800561e:	2d00      	cmp	r5, #0
 8005620:	f040 808e 	bne.w	8005740 <_printf_i+0x210>
 8005624:	4665      	mov	r5, ip
 8005626:	2a08      	cmp	r2, #8
 8005628:	d10b      	bne.n	8005642 <_printf_i+0x112>
 800562a:	6823      	ldr	r3, [r4, #0]
 800562c:	07db      	lsls	r3, r3, #31
 800562e:	d508      	bpl.n	8005642 <_printf_i+0x112>
 8005630:	6923      	ldr	r3, [r4, #16]
 8005632:	6862      	ldr	r2, [r4, #4]
 8005634:	429a      	cmp	r2, r3
 8005636:	bfde      	ittt	le
 8005638:	2330      	movle	r3, #48	; 0x30
 800563a:	f805 3c01 	strble.w	r3, [r5, #-1]
 800563e:	f105 35ff 	addle.w	r5, r5, #4294967295
 8005642:	ebac 0305 	sub.w	r3, ip, r5
 8005646:	6123      	str	r3, [r4, #16]
 8005648:	f8cd 8000 	str.w	r8, [sp]
 800564c:	463b      	mov	r3, r7
 800564e:	aa03      	add	r2, sp, #12
 8005650:	4621      	mov	r1, r4
 8005652:	4630      	mov	r0, r6
 8005654:	f7ff fef6 	bl	8005444 <_printf_common>
 8005658:	3001      	adds	r0, #1
 800565a:	d14d      	bne.n	80056f8 <_printf_i+0x1c8>
 800565c:	f04f 30ff 	mov.w	r0, #4294967295
 8005660:	b005      	add	sp, #20
 8005662:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005666:	4839      	ldr	r0, [pc, #228]	; (800574c <_printf_i+0x21c>)
 8005668:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 800566c:	6813      	ldr	r3, [r2, #0]
 800566e:	6821      	ldr	r1, [r4, #0]
 8005670:	1d1d      	adds	r5, r3, #4
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	6015      	str	r5, [r2, #0]
 8005676:	060a      	lsls	r2, r1, #24
 8005678:	d50b      	bpl.n	8005692 <_printf_i+0x162>
 800567a:	07ca      	lsls	r2, r1, #31
 800567c:	bf44      	itt	mi
 800567e:	f041 0120 	orrmi.w	r1, r1, #32
 8005682:	6021      	strmi	r1, [r4, #0]
 8005684:	b91b      	cbnz	r3, 800568e <_printf_i+0x15e>
 8005686:	6822      	ldr	r2, [r4, #0]
 8005688:	f022 0220 	bic.w	r2, r2, #32
 800568c:	6022      	str	r2, [r4, #0]
 800568e:	2210      	movs	r2, #16
 8005690:	e7b7      	b.n	8005602 <_printf_i+0xd2>
 8005692:	064d      	lsls	r5, r1, #25
 8005694:	bf48      	it	mi
 8005696:	b29b      	uxthmi	r3, r3
 8005698:	e7ef      	b.n	800567a <_printf_i+0x14a>
 800569a:	4665      	mov	r5, ip
 800569c:	fbb3 f1f2 	udiv	r1, r3, r2
 80056a0:	fb02 3311 	mls	r3, r2, r1, r3
 80056a4:	5cc3      	ldrb	r3, [r0, r3]
 80056a6:	f805 3d01 	strb.w	r3, [r5, #-1]!
 80056aa:	460b      	mov	r3, r1
 80056ac:	2900      	cmp	r1, #0
 80056ae:	d1f5      	bne.n	800569c <_printf_i+0x16c>
 80056b0:	e7b9      	b.n	8005626 <_printf_i+0xf6>
 80056b2:	6813      	ldr	r3, [r2, #0]
 80056b4:	6825      	ldr	r5, [r4, #0]
 80056b6:	6961      	ldr	r1, [r4, #20]
 80056b8:	1d18      	adds	r0, r3, #4
 80056ba:	6010      	str	r0, [r2, #0]
 80056bc:	0628      	lsls	r0, r5, #24
 80056be:	681b      	ldr	r3, [r3, #0]
 80056c0:	d501      	bpl.n	80056c6 <_printf_i+0x196>
 80056c2:	6019      	str	r1, [r3, #0]
 80056c4:	e002      	b.n	80056cc <_printf_i+0x19c>
 80056c6:	066a      	lsls	r2, r5, #25
 80056c8:	d5fb      	bpl.n	80056c2 <_printf_i+0x192>
 80056ca:	8019      	strh	r1, [r3, #0]
 80056cc:	2300      	movs	r3, #0
 80056ce:	6123      	str	r3, [r4, #16]
 80056d0:	4665      	mov	r5, ip
 80056d2:	e7b9      	b.n	8005648 <_printf_i+0x118>
 80056d4:	6813      	ldr	r3, [r2, #0]
 80056d6:	1d19      	adds	r1, r3, #4
 80056d8:	6011      	str	r1, [r2, #0]
 80056da:	681d      	ldr	r5, [r3, #0]
 80056dc:	6862      	ldr	r2, [r4, #4]
 80056de:	2100      	movs	r1, #0
 80056e0:	4628      	mov	r0, r5
 80056e2:	f7fa fd75 	bl	80001d0 <memchr>
 80056e6:	b108      	cbz	r0, 80056ec <_printf_i+0x1bc>
 80056e8:	1b40      	subs	r0, r0, r5
 80056ea:	6060      	str	r0, [r4, #4]
 80056ec:	6863      	ldr	r3, [r4, #4]
 80056ee:	6123      	str	r3, [r4, #16]
 80056f0:	2300      	movs	r3, #0
 80056f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80056f6:	e7a7      	b.n	8005648 <_printf_i+0x118>
 80056f8:	6923      	ldr	r3, [r4, #16]
 80056fa:	462a      	mov	r2, r5
 80056fc:	4639      	mov	r1, r7
 80056fe:	4630      	mov	r0, r6
 8005700:	47c0      	blx	r8
 8005702:	3001      	adds	r0, #1
 8005704:	d0aa      	beq.n	800565c <_printf_i+0x12c>
 8005706:	6823      	ldr	r3, [r4, #0]
 8005708:	079b      	lsls	r3, r3, #30
 800570a:	d413      	bmi.n	8005734 <_printf_i+0x204>
 800570c:	68e0      	ldr	r0, [r4, #12]
 800570e:	9b03      	ldr	r3, [sp, #12]
 8005710:	4298      	cmp	r0, r3
 8005712:	bfb8      	it	lt
 8005714:	4618      	movlt	r0, r3
 8005716:	e7a3      	b.n	8005660 <_printf_i+0x130>
 8005718:	2301      	movs	r3, #1
 800571a:	464a      	mov	r2, r9
 800571c:	4639      	mov	r1, r7
 800571e:	4630      	mov	r0, r6
 8005720:	47c0      	blx	r8
 8005722:	3001      	adds	r0, #1
 8005724:	d09a      	beq.n	800565c <_printf_i+0x12c>
 8005726:	3501      	adds	r5, #1
 8005728:	68e3      	ldr	r3, [r4, #12]
 800572a:	9a03      	ldr	r2, [sp, #12]
 800572c:	1a9b      	subs	r3, r3, r2
 800572e:	42ab      	cmp	r3, r5
 8005730:	dcf2      	bgt.n	8005718 <_printf_i+0x1e8>
 8005732:	e7eb      	b.n	800570c <_printf_i+0x1dc>
 8005734:	2500      	movs	r5, #0
 8005736:	f104 0919 	add.w	r9, r4, #25
 800573a:	e7f5      	b.n	8005728 <_printf_i+0x1f8>
 800573c:	2b00      	cmp	r3, #0
 800573e:	d1ac      	bne.n	800569a <_printf_i+0x16a>
 8005740:	7803      	ldrb	r3, [r0, #0]
 8005742:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8005746:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800574a:	e76c      	b.n	8005626 <_printf_i+0xf6>
 800574c:	080068a9 	.word	0x080068a9
 8005750:	080068ba 	.word	0x080068ba

08005754 <_sbrk_r>:
 8005754:	b538      	push	{r3, r4, r5, lr}
 8005756:	4c06      	ldr	r4, [pc, #24]	; (8005770 <_sbrk_r+0x1c>)
 8005758:	2300      	movs	r3, #0
 800575a:	4605      	mov	r5, r0
 800575c:	4608      	mov	r0, r1
 800575e:	6023      	str	r3, [r4, #0]
 8005760:	f7fc fe5e 	bl	8002420 <_sbrk>
 8005764:	1c43      	adds	r3, r0, #1
 8005766:	d102      	bne.n	800576e <_sbrk_r+0x1a>
 8005768:	6823      	ldr	r3, [r4, #0]
 800576a:	b103      	cbz	r3, 800576e <_sbrk_r+0x1a>
 800576c:	602b      	str	r3, [r5, #0]
 800576e:	bd38      	pop	{r3, r4, r5, pc}
 8005770:	2000067c 	.word	0x2000067c

08005774 <__sread>:
 8005774:	b510      	push	{r4, lr}
 8005776:	460c      	mov	r4, r1
 8005778:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800577c:	f000 f896 	bl	80058ac <_read_r>
 8005780:	2800      	cmp	r0, #0
 8005782:	bfab      	itete	ge
 8005784:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005786:	89a3      	ldrhlt	r3, [r4, #12]
 8005788:	181b      	addge	r3, r3, r0
 800578a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800578e:	bfac      	ite	ge
 8005790:	6563      	strge	r3, [r4, #84]	; 0x54
 8005792:	81a3      	strhlt	r3, [r4, #12]
 8005794:	bd10      	pop	{r4, pc}

08005796 <__swrite>:
 8005796:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800579a:	461f      	mov	r7, r3
 800579c:	898b      	ldrh	r3, [r1, #12]
 800579e:	05db      	lsls	r3, r3, #23
 80057a0:	4605      	mov	r5, r0
 80057a2:	460c      	mov	r4, r1
 80057a4:	4616      	mov	r6, r2
 80057a6:	d505      	bpl.n	80057b4 <__swrite+0x1e>
 80057a8:	2302      	movs	r3, #2
 80057aa:	2200      	movs	r2, #0
 80057ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057b0:	f000 f868 	bl	8005884 <_lseek_r>
 80057b4:	89a3      	ldrh	r3, [r4, #12]
 80057b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80057ba:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80057be:	81a3      	strh	r3, [r4, #12]
 80057c0:	4632      	mov	r2, r6
 80057c2:	463b      	mov	r3, r7
 80057c4:	4628      	mov	r0, r5
 80057c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80057ca:	f000 b817 	b.w	80057fc <_write_r>

080057ce <__sseek>:
 80057ce:	b510      	push	{r4, lr}
 80057d0:	460c      	mov	r4, r1
 80057d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057d6:	f000 f855 	bl	8005884 <_lseek_r>
 80057da:	1c43      	adds	r3, r0, #1
 80057dc:	89a3      	ldrh	r3, [r4, #12]
 80057de:	bf15      	itete	ne
 80057e0:	6560      	strne	r0, [r4, #84]	; 0x54
 80057e2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80057e6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80057ea:	81a3      	strheq	r3, [r4, #12]
 80057ec:	bf18      	it	ne
 80057ee:	81a3      	strhne	r3, [r4, #12]
 80057f0:	bd10      	pop	{r4, pc}

080057f2 <__sclose>:
 80057f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80057f6:	f000 b813 	b.w	8005820 <_close_r>
	...

080057fc <_write_r>:
 80057fc:	b538      	push	{r3, r4, r5, lr}
 80057fe:	4c07      	ldr	r4, [pc, #28]	; (800581c <_write_r+0x20>)
 8005800:	4605      	mov	r5, r0
 8005802:	4608      	mov	r0, r1
 8005804:	4611      	mov	r1, r2
 8005806:	2200      	movs	r2, #0
 8005808:	6022      	str	r2, [r4, #0]
 800580a:	461a      	mov	r2, r3
 800580c:	f7fc fdb8 	bl	8002380 <_write>
 8005810:	1c43      	adds	r3, r0, #1
 8005812:	d102      	bne.n	800581a <_write_r+0x1e>
 8005814:	6823      	ldr	r3, [r4, #0]
 8005816:	b103      	cbz	r3, 800581a <_write_r+0x1e>
 8005818:	602b      	str	r3, [r5, #0]
 800581a:	bd38      	pop	{r3, r4, r5, pc}
 800581c:	2000067c 	.word	0x2000067c

08005820 <_close_r>:
 8005820:	b538      	push	{r3, r4, r5, lr}
 8005822:	4c06      	ldr	r4, [pc, #24]	; (800583c <_close_r+0x1c>)
 8005824:	2300      	movs	r3, #0
 8005826:	4605      	mov	r5, r0
 8005828:	4608      	mov	r0, r1
 800582a:	6023      	str	r3, [r4, #0]
 800582c:	f7fc fdc4 	bl	80023b8 <_close>
 8005830:	1c43      	adds	r3, r0, #1
 8005832:	d102      	bne.n	800583a <_close_r+0x1a>
 8005834:	6823      	ldr	r3, [r4, #0]
 8005836:	b103      	cbz	r3, 800583a <_close_r+0x1a>
 8005838:	602b      	str	r3, [r5, #0]
 800583a:	bd38      	pop	{r3, r4, r5, pc}
 800583c:	2000067c 	.word	0x2000067c

08005840 <_fstat_r>:
 8005840:	b538      	push	{r3, r4, r5, lr}
 8005842:	4c07      	ldr	r4, [pc, #28]	; (8005860 <_fstat_r+0x20>)
 8005844:	2300      	movs	r3, #0
 8005846:	4605      	mov	r5, r0
 8005848:	4608      	mov	r0, r1
 800584a:	4611      	mov	r1, r2
 800584c:	6023      	str	r3, [r4, #0]
 800584e:	f7fc fdbf 	bl	80023d0 <_fstat>
 8005852:	1c43      	adds	r3, r0, #1
 8005854:	d102      	bne.n	800585c <_fstat_r+0x1c>
 8005856:	6823      	ldr	r3, [r4, #0]
 8005858:	b103      	cbz	r3, 800585c <_fstat_r+0x1c>
 800585a:	602b      	str	r3, [r5, #0]
 800585c:	bd38      	pop	{r3, r4, r5, pc}
 800585e:	bf00      	nop
 8005860:	2000067c 	.word	0x2000067c

08005864 <_isatty_r>:
 8005864:	b538      	push	{r3, r4, r5, lr}
 8005866:	4c06      	ldr	r4, [pc, #24]	; (8005880 <_isatty_r+0x1c>)
 8005868:	2300      	movs	r3, #0
 800586a:	4605      	mov	r5, r0
 800586c:	4608      	mov	r0, r1
 800586e:	6023      	str	r3, [r4, #0]
 8005870:	f7fc fdbe 	bl	80023f0 <_isatty>
 8005874:	1c43      	adds	r3, r0, #1
 8005876:	d102      	bne.n	800587e <_isatty_r+0x1a>
 8005878:	6823      	ldr	r3, [r4, #0]
 800587a:	b103      	cbz	r3, 800587e <_isatty_r+0x1a>
 800587c:	602b      	str	r3, [r5, #0]
 800587e:	bd38      	pop	{r3, r4, r5, pc}
 8005880:	2000067c 	.word	0x2000067c

08005884 <_lseek_r>:
 8005884:	b538      	push	{r3, r4, r5, lr}
 8005886:	4c07      	ldr	r4, [pc, #28]	; (80058a4 <_lseek_r+0x20>)
 8005888:	4605      	mov	r5, r0
 800588a:	4608      	mov	r0, r1
 800588c:	4611      	mov	r1, r2
 800588e:	2200      	movs	r2, #0
 8005890:	6022      	str	r2, [r4, #0]
 8005892:	461a      	mov	r2, r3
 8005894:	f7fc fdb7 	bl	8002406 <_lseek>
 8005898:	1c43      	adds	r3, r0, #1
 800589a:	d102      	bne.n	80058a2 <_lseek_r+0x1e>
 800589c:	6823      	ldr	r3, [r4, #0]
 800589e:	b103      	cbz	r3, 80058a2 <_lseek_r+0x1e>
 80058a0:	602b      	str	r3, [r5, #0]
 80058a2:	bd38      	pop	{r3, r4, r5, pc}
 80058a4:	2000067c 	.word	0x2000067c

080058a8 <__malloc_lock>:
 80058a8:	4770      	bx	lr

080058aa <__malloc_unlock>:
 80058aa:	4770      	bx	lr

080058ac <_read_r>:
 80058ac:	b538      	push	{r3, r4, r5, lr}
 80058ae:	4c07      	ldr	r4, [pc, #28]	; (80058cc <_read_r+0x20>)
 80058b0:	4605      	mov	r5, r0
 80058b2:	4608      	mov	r0, r1
 80058b4:	4611      	mov	r1, r2
 80058b6:	2200      	movs	r2, #0
 80058b8:	6022      	str	r2, [r4, #0]
 80058ba:	461a      	mov	r2, r3
 80058bc:	f7fc fd43 	bl	8002346 <_read>
 80058c0:	1c43      	adds	r3, r0, #1
 80058c2:	d102      	bne.n	80058ca <_read_r+0x1e>
 80058c4:	6823      	ldr	r3, [r4, #0]
 80058c6:	b103      	cbz	r3, 80058ca <_read_r+0x1e>
 80058c8:	602b      	str	r3, [r5, #0]
 80058ca:	bd38      	pop	{r3, r4, r5, pc}
 80058cc:	2000067c 	.word	0x2000067c

080058d0 <_init>:
 80058d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058d2:	bf00      	nop
 80058d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058d6:	bc08      	pop	{r3}
 80058d8:	469e      	mov	lr, r3
 80058da:	4770      	bx	lr

080058dc <_fini>:
 80058dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80058de:	bf00      	nop
 80058e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80058e2:	bc08      	pop	{r3}
 80058e4:	469e      	mov	lr, r3
 80058e6:	4770      	bx	lr
